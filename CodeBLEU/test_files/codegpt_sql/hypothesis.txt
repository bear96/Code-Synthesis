;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM TABLE_NAME' EXEC sp_executesql @sql </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
declare @sql nvarchar(max) set @sql = 'SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + 'CREATE TABLE'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
</s
SELECT DISTINCT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, </s
</s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY *, </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY DateTime) rn </s
</s
select customer_id, customer_name, max(case when customer_id = 1 then customer_id end) as customer_1, max(case when customer_id = 2 then customer_id end) as customer_2, max(case when customer_id = 3 then customer_id end) as customer_3, max(case when customer_id = 4 then customer_id end) as customer_4, max(case when customer </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users GROUP BY user_id HAVING COUNT(*) > 1 ) </s
<?xml version="1.0" encoding="UTF-8"?> <?xml version="1.0" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" <?xml version="1.0" encoding="UTF-8"?> <?xml version="1.1" encoding="UTF-8"?> <?xml version="1.2" encoding="UTF-8"?> <?xml version="1.3" encoding="UTF-8"?> </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
</s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @ </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
DECLARE @Text NVARCHAR(MAX) SET @Text = REPLACE(@Text, '\n', '') SELECT @Text </s
SELECT </s
</s
SELECT </s
SELECT tblA.ID, tblB.ID, tblC.ID, tblD.ID, tblE.ID, tblF.ID, tblG.ID, tblH.ID, tblI.ID, tblJ.ID, tblK.ID, tblL.ID, tblM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT ID, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) AS rn FROM ( SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE OR REPLACE PROCEDURE [dbo].[spill] AS BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET </s
SELECT </s
</s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
INSERT INTO TableA (A, B) VALUES (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @XML XML = ' </s
</s
</s
DELETE t1 FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id DELETE t2 FROM table2 t2 LEFT JOIN table3 t3 ON t1.id = t3.id DELETE t1 FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
CREATE PROCEDURE [dbo].[IncrementCounter] ( @counter INT ) AS BEGIN SET NOCOUNT ON; END </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ QUOTENAME(@sql) </s
</s
CREATE OR REPLACE FUNCTION [dbo].[MoveTable] ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT ( </s
SELECT </s
SELECT </s
SELECT </s
DELETE FROM tbl WHERE NOT EXISTS (SELECT 1 FROM tbl WHERE tbl.id = tbl.id2 AND tbl.name = tbl.name2 </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY person_id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + CO </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; SET @StartDate = DATEADD(MONTH, -1, @StartDate); SET @EndDate = DATEADD(MONTH, -1, @EndDate); SELECT @StartDate = DATEADD(MONTH, -1, @StartDate); SELECT @EndDate = DATEADD(MONTH, -1, @EndDate); SELECT @StartDate = DATEADD(MONTH, -1, @StartDate); SELECT @End </s
</s
SELECT </s
SELECT </s
SELECT </s
SELECT DISTINCT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT DATEADD(week, DATEDIFF(week, 0, DATEADD(week, -1, DATEADD(week, -2, DATEADD(week, -3, DATEADD(week, -4, DATEADD(week, -5, DATEADD(week, -6, DATEADD(week, -7, DATEADD(week, -8, DATEADD(week, -9, DATEADD(week, -10, DATEADD(week, -11, DATEADD(week, -12, DATEADD </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id </s
CREATE OR REPLACE FUNCTION [dbo].[BatchInsert] ( </s
SELECT CAST( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM comments WHERE comment_id IN ( SELECT comment_id FROM comments WHERE comment_id NOT IN ( SELECT comment_id FROM comments WHERE comment_id NOT IN ( SELECT comment_id FROM comments WHERE comment_id NOT IN ( SELECT comment_id FROM comments WHERE comment_id NOT IN ( SELECT comment_id FROM comments WHERE comment_id NOT IN ( </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn FROM table ) t WHERE t.rn = 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY area_id ORDER BY area_id) AS rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY area_id ORDER BY area_id) AS rn FROM </s
</s
;WITH CTE AS ( SELECT *, </s
CREATE PROCEDURE [dbo].[MyProc] ( </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(mm, -1, @StartDate) SET @EndDate = DATEADD(mm, -1, @EndDate) SELECT DATEADD(mm, -1, DATEADD(mm, -1, DATEADD(mm, -1, DATEADD(mm, -1, DATEADD(mm, -1, DATEADD(mm, -1, DATEADD(mm, -1, DATEADD(mm, -1, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
SELECT </s
</s
UPDATE table1 SET column1 = column2 FROM table1 LEFT JOIN table2 ON table1.id = table2.id </s
DECLARE @sql NVARCHAR(MAX); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql </s
SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * </s
CREATE TABLE table_name( </s
SELECT </s
select to_char(to_date('2015-01-01', 'yyyy-mm-dd'), 'yyyy-mm-dd') as to_date, to_char(to_date('2015-01-02', 'yyyy-mm-dd'), 'yyyy-mm-dd') as to_date, to_char(to_date('2015-01-03', 'yyyy-mm-dd'), 'yyyy-mm-dd') as to_date, to_char(to_date('2015-01- </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.col1 = table1.col1 AND table2.col2 = table1.col2 AND table2.col3 = table1.col3 AND table2.col4 = table1.col4 AND table2.col5 = table1.col5 AND table2.col6 = table1.col6 AND table2.col7 = table1.col7 </s
SELECT lat, lng FROM ( SELECT lat, lng FROM ( SELECT </s
SELECT </s
SELECT </s
UPDATE table1 SET column1 = column2 FROM table1 INNER JOIN table2 ON table1.column1 = table2.column1 </s
ALTER PROCEDURE [dbo].[Rollback] </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
SELECT </s
import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; import java.lang.Integer; </s
SELECT </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id JOIN table9 t9 ON t1.id </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id = t </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( partition </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Value) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Category </s
SELECT </s
import datadump; import datetime; import datetime2; import datetime3; import datetime4; import datetime5; import datetime6; import datetime7; import datetime8; import datetime9; import datetime10; import datetime11; import datetime12; import datetime13; import datetime14; import datetime15; import datetime16; import datetime17; import datetime18; import datetime </s
</s
SELECT COUNT(DISTINCT </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[d </s
CREATE OR REPLACE PROCEDURE [dbo].[MyProcedure] AS </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DE </s
DECLARE @type NVARCHAR(MAX) DECLARE @value NVARCHAR(MAX) SET @type = NVARCHAR(MAX) SET @value = CHAR(MAX) SELECT @value = CHAR(MAX) SELECT @value = CHAR(MAX) SELECT @value = CHAR(MAX) SELECT @value = CHAR(MAX) SELECT @value = CHAR(MAX) SELECT @value = CHAR(MAX) SELECT @value = CHAR(MAX) SELECT @value = CHAR(MAX) SELECT @ </s
DECLARE @XML VARCHAR(MAX) SET @XML = </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @SQL NVARCHAR(MAX) SET @SQL = 'SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY date ORDER BY date DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table </s
DELETE </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, - </s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
declare @sql nvarchar(max) set @sql = 'SELECT DISTINCT </s
CREATE TABLE my_table ( </s
</s
DECLARE @StartTime DATETIME DECLARE @EndTime DATETIME SET @StartTime = DATEADD(DAY, -1, GETDATE()) SET @EndTime = DATEADD(DAY, -1, GETDATE()) SELECT @StartTime = DATEADD(DAY, -1, GETDATE()) SELECT @EndTime = DATEADD(DAY, -1, GETDATE()) SELECT @StartTime = DATEADD(DAY, -1, GETDATE()) SELECT @EndTime = DATEADD(DAY </s
SELECT </s
ALTER TABLE [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[d </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATE </s
SELECT * FROM table1 WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table1.id = table2.id AND table1.name = table2 </s
SELECT </s
SELECT </s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; DECLARE @StartHour DATETIME; DECLARE @EndHour DATETIME; DECLARE @StartMinutes DATETIME; DECLARE @EndMinutes DATETIME; SET @StartDate = DATEADD(DAY, -1, @StartDate); SET @EndDate = DATEADD(DAY, -1, @EndDate); SET @StartHour = DATEADD(DAY, -1, @StartHour); SET @EndHour = DATEADD </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
</s
SELECT </s
</s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
INSERT INTO </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@ </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
select * from ( select t.*, row_number() over (partition by id order by id) as seqnum from table t ) t where seqnum = 1; </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + CO </s
SELECT </s
</s
INSERT INTO table1 (col1, col2, col3, col4) SELECT col1, col2, col3, col4 FROM table1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45 </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT </s
CREATE OR REPLACE PROCEDURE [dbo].[MyProc] AS </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY trip_id ORDER BY arrival_time DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1 </s
SELECT ID, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) AS RN FROM ( SELECT ID, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) AS RN FROM ( SELECT ID, ROW_NUMBER() OVER (PARTITION BY ID) AS RN </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
ALTER PROCEDURE [dbo].[Rollback] </s
DROP TABLE IF EXISTS </s
SELECT </s
WITH CTE AS ( SELECT CAST( REPLACE( </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT * FROM sys.objects WHERE OBJECT_NAME(sys.object_id) = OBJECT_NAME(sys.object_id) GROUP BY OBJECT_NAME(sys.object_id), OBJECT_NAME(sys.object_id) ORDER BY OBJECT_NAME(sys.object_id), OBJECT_NAME(sys.object_id), OBJECT_NAME(sys.object_id), OBJECT_NAME(sys.object_id), OBJECT_NAME(sys.object_id), OBJECT_NAME(sys.object_id), OBJECT_NAME(sys.object_ </s
SELECT </s
SELECT </s
CREATE TABLE my_table ( </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
</s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY timestamp DESC) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
DELETE FROM ( SELECT ROW_NUMBER() OVER (ORDER BY </s
UPDATE table1 SET column1 = column2 FROM table1 LEFT JOIN table2 ON table1.column1 = table2.column1 </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
</s
SELECT </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE OR REPLACE TRIGGER [dbo].[Trigger] AFTER TRIGGER [dbo].[Trigger] BEFORE INSERT OR UPDATE ON [dbo].[Trigger] FOR EACH ROW BEGIN INSERT INTO [dbo].[Trigger] SELECT * FROM [dbo].[Trigger] WHERE [dbo].[Trigger] = [dbo].[Trigger1] AND [dbo].[Trigger] = [dbo].[Trigger2] AND [dbo].[Trigger] = [dbo].[Trigger3] </s
IF EXISTS (SELECT * FROM table1 WHERE table1.id = table2.id AND table1.name = table2.name AND table1. </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + ' </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43 </s
SELECT </s
</s
CREATE TRIGGER [dbo].[update_table] ON [dbo].[TableName] FOR EACH ROW BEGIN INSERT INTO [dbo].[TableName] VALUES ( </s
UPDATE table1 t1 SET t1.field1 = t2.field1 FROM table1 t1 INNER JOIN table2 t2 ON t1.field2 = t2.field2 </s
</s
SELECT * FROM table1 WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.columnA = table1.columnA </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM Table1 WHERE NOT EXISTS ( SELECT 1 FROM Table2 WHERE Table1.Column1 = Table2.Column1 AND Table2.Column2 = Table1.Column2 AND Table1.Column3 = Table2.Column3 AND Table2.Column4 = Table1.Column4 AND Table2.Column5 = Table1.Column5 AND Table2.Column6 = Table1.Column6 AND Table2.Column7 = Table1. </s
SELECT </s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT CASE </s
INSERT INTO Table1 (Column1, Column2, Column3) SELECT Column1, Column2, Column3 FROM Table2 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(*) = (SELECT COUNT(*) FROM table1 GROUP BY t1.id) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COAL </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
CREATE TRIGGER [dbo].[History] ON [dbo].[History] AFTER INSERT ON [dbo].[History] AFTER UPDATE ON [dbo].[History] AFTER DELETE ON [dbo].[History] AFTER INSERT ON [dbo].[History] AFTER DELETE ON [dbo].[History] AFTER UPDATE ON [dbo].[History] AFTER DELETE ON [dbo].[History] AFTER INSERT ON [dbo].[History] AFTER DELETE ON [dbo].[History] </s
SELECT COUNT(DISTINCT </s
SELECT </s
UPDATE table1 t1 SET t1.id = t2.id FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) > 1 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1 </s
</s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.id = t1.id and t2.name = t1.name and t2.id = t1.id and t2.name = t1.name and </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, </s
SELECT * FROM MyTable WHERE NOT EXISTS (SELECT 1 FROM MyTable WHERE MyTable.User_ID = MyTable.User_ID AND MyTable.User_Name = MyTable.User_Name </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id UPDATE table1 t1 INNER JOIN table2 t2 ON </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR(MAX) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3) VALUES (' + </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT CASE WHEN 'A' THEN 'A' WHEN 'B' THEN 'B' WHEN 'C' THEN 'C' WHEN 'D' THEN 'D' WHEN 'E' THEN 'E' WHEN 'F' THEN 'F' WHEN 'G' THEN 'G' </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1 </s
declare @t table (id int) insert into @t values (1) insert into @t values (2) insert into @t values (3) insert into @t values (4) insert into @t values (5) insert into @t values (6) insert into @t values (7) insert into @t values (8) insert into @t values (9) insert into @t values (10) insert into @t values (11) insert into @t values (12) insert into @t values (13) insert into @t values (14) insert into @t values ( </s
</s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id order by t1.id desc; </s
</s
DECLARE @param VARCHAR(MAX) DECLARE @sql VARCHAR(MAX) DECLARE @sql2 VARCHAR(MAX) DECLARE @sql3 VARCHAR(MAX) DECLARE @sql4 VARCHAR(MAX) DECLARE @sql5 VARCHAR(MAX) DECLARE @sql6 VARCHAR(MAX) DECLARE @sql7 VARCHAR(MAX) DECLARE @sql8 VARCHAR(MAX) DECLARE @sql9 VARCHAR(MAX) DECLARE @sql10 VARCHAR </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id </s
</s
declare @sql varchar(max) set @sql = @sql + 'CREATE TABLE IF NOT EXISTS'+ </s
INSERT INTO table1 (col1, col2, col3) SELECT col1, col2, col3 FROM table2 </s
SELECT * FROM table1 WHERE NOT EXISTS ( SELECT * FROM table2 WHERE table1.id = table2.id ) </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT COUNT(*) FROM Users GROUP BY COUNT(*) HAVING COUNT(*) = (SELECT COUNT(*) FROM Users WHERE </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
SELECT </s
SELECT email_id, created_date FROM ( SELECT email_id, created_date FROM ( SELECT email_id, </s
CREATE OR REPLACE FUNCTION getDate() RETURNS DATETIME AS </s
</s
</s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * </s
DECLARE </s
</s
CREATE TABLE Tempory ( </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY ip_address DESC) AS rn </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql + ' </s
select parent_id from your_table group by parent_id having count(*) > 1 </s
SELECT * FROM ( SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
UPDATE Table1 SET Table1.ID = Table2.ID FROM Table1 INNER JOIN Table2 ON Table1.ID = Table2.ID </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.col1 = table1.col1 AND table2.col2 = table1.col2 </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SET @sql = </s
SELECT </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ALPHABET) rn </s
SELECT </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.table1_id INNER JOIN table3 t3 ON t1.id = t3.table1_id INNER JOIN table4 t4 ON t1.id = t4.table1_id INNER JOIN table5 t5 ON t1.id = t5.table1_id INNER JOIN table6 t6 ON t1.id = t6.table1_id INNER JOIN table7 t7 ON t1.id = t7.table </s
select t1.id, t1.name, t2.name, t3.name, t4.name, t5.name, t6.name, t7.name, t8.name, t9.name, t10.name, t11.name, t12.name, t13.name, t14.name, t15 </s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT * FROM table1 WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table1.id = table2.id AND table1. </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1,col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,col14,col15,col16,col17,col18,col19,col20,col21,col22,col23,col24,col25,col26,col27,col28,col29,col30,col31,col32,col33,col34,col35,col36,col37,col38,col39,col40 </s
INSERT INTO TableA (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col </s
UPDATE ( SELECT ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
INSERT INTO table1 (col1, col2, col3) SELECT col1, col2, col3 FROM table2 </s
CREATE NONCLUSTERED INDEX </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn FROM table ) t WHERE t.rn = 1 </s
select t1.id, t1.name, t2.name from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id, t1.name </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
</s
</s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql + ' </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
</s
</s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + </s
UPDATE </s
SELECT </s
SELECT </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
</s
DECLARE @text varchar(100) SET @text = REPLACE(@text, CHARINDEX(' ', @text), CHARINDEX(' ', @text + CHARINDEX(' ', @text + CHARINDEX(' ', @text + CHARINDEX(' ', @text + CHARINDEX(' ', @text + CHARINDEX(' ', @text + CHARINDEX(' ', @text + CHARINDEX(' ', @text + CHARINDEX(' ', @text + CHARINDEX(' ', @text + CHARINDEX(' ', @text + CHARINDEX(' ', @text + CHARINDEX(' ', @text + CHARINDEX(' ', </s
SELECT DISTINCT </s
CREATE TABLE music ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
declare @sql nvarchar(max) set @sql = 'SELECT DISTINCT </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
</s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id INNER JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1. </s
SELECT </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate </s
SELECT </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD( </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT </s
CREATE TABLE mytable ( </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'SELECT * FROM'+ </s
SELECT </s
SELECT </s
</s
UPDATE table1 SET column1 = ( SELECT column1 FROM table2 WHERE table2.column1 = table1.column1 UNION ALL SELECT column1 FROM table3 WHERE table3.column1 = table1.column1 UNION ALL SELECT column1 FROM table4 WHERE table4.column1 = table1.column1 UNION ALL SELECT column1 FROM table5 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'CREATE TABLE'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) AS rn FROM ( SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT DATE_FORMAT(DATE_FORMAT(@date, '%Y-%m-%d %H:%i:%s'), '%Y-%m-%d %H:%i:%s')' SELECT DATE_FORMAT(DATE_FORMAT(@date, '%Y-%m-%d %H:%i:%s'), '%Y-%m-%d %H:%i:%s'), '%Y-%m-%d %H:%i:% </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, - </s
SELECT </s
INSERT INTO customers (customer_id) SELECT customer_id FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customers WHERE customer_id NOT IN ( SELECT customer </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4) SELECT col1, col2, col3, col4 FROM table1 </s
</s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT </s
</s
ALTER PROCEDURE [dbo].[MyProc] </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
</s
DELETE </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT * FROM table1 WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table1.column1 = table2.column1 AND table2.column2 = table1.column2 AND table1.column3 = table2.column3 AND table2.column4 = table1.column4 AND table2.column5 = table1.column5 AND table2.column6 = table1.column6 AND table2 </s
SELECT DATE_FORMAT(date, '%Y-%m-%d %H:%i:%s') </s
SELECT </s
CREATE TABLE IF NOT EXISTS ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn FROM Table1 ) SELECT * FROM CTE WHERE rn = 1 UNION ALL SELECT * FROM CTE WHERE rn = 2 UNION ALL SELECT * FROM CTE WHERE rn = 3 UNION ALL SELECT * FROM CTE WHERE rn = 4 UNION ALL SELECT * FROM CTE WHERE rn = 5 UNION ALL SELECT * </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
CREATE OR REPLACE FUNCTION [dbo].[MyTable] ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM table1 WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table1.id = table2.id ) </s
SELECT </s
SELECT </s
select t1.* from table1 t1 join table2 t2 on t1.timestamp = t2.timestamp and t1.column = t2.column and t2.column = t1.column where t1.timestamp < t2.timestamp and t1.column = t2.column and t2.column = t1.column and </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ QUOTENAME(ColumnName) +'FROM'+ QUOTENAME(ColumnName) +'GROUP BY'+ QUOTENAME(ColumnName) +'ORDER BY'+ QUOTENAME(ColumnName) +'LIMIT'+ QUOTENAME(ColumnName) + ';' SELECT @sql = QUOTENAME(ColumnName) +'FROM'+ QUOTENAME(ColumnName) +'GROUP BY'+ QUOTENAME(ColumnName) +'ORDER BY'+ QUOT </s
UPDATE ( SELECT ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT * FROM table1 WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table1.id = table2.id GROUP BY table1.id HAVING COUNT(*) > 1 ) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY subject </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE( </s
SELECT </s
DECLARE @sql VARCHAR(MAX) DECLARE @sql1 VARCHAR(MAX) DECLARE @sql2 VARCHAR(MAX) DECLARE @sql3 VARCHAR(MAX) DECLARE @sql4 VARCHAR(MAX) DECLARE @sql5 VARCHAR(MAX) DECLARE @sql6 VARCHAR(MAX) DECLARE @sql7 VARCHAR(MAX) DECLARE @sql8 VARCHAR(MAX) DECLARE @sql9 VARCHAR(MAX) DECLARE @sql10 VARCHAR </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = (select count(distinct t2.id) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
</s
</s
SQLiteDatabase db = new SQLiteDatabase() </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY date) rn </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id INNER JOIN table4 t4 ON t1.id = t4.id INNER JOIN table5 t5 ON t1.id = t5.id INNER JOIN table6 t6 ON t1.id = t6.id INNER JOIN table7 t7 ON t1.id = t7.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(*) > 1 </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44 </s
</s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table ) t WHERE t.rn = 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY Date DESC) rn </s
CREATE FUNCTION dblink( </s
SELECT COUNT(DISTINCT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY MuserID </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.col1 = table1.col1 AND table2.col2 = table1.col2 AND table2.col3 = table1.col3 AND table2.col4 = table1.col4 AND table2.col5 = table1.col5 AND table2.col6 = table1.col6 AND table2.col7 = </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = </s
DECLARE @sql NVARCHAR(MAX) SET @sql = N'SELECT * FROM </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + 'CREATE TABLE'+ </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -7, GETDATE()) SET @EndDate = DATEADD(DAY, -7, GETDATE()) SELECT @StartDate = DATEADD(DAY, -7, GETDATE()) SELECT @EndDate = DATEADD(DAY, -7, GETDATE()) SELECT @StartDate = DATEADD(DAY, -7, GETDATE()) SELECT @EndDate = DATEADD(DAY, -7, </s
</s
SELECT * FROM comments WHERE NOT EXISTS (SELECT 1 FROM comments WHERE comments.id = comments.comment_id) </s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @sql2 NVARCHAR(MAX) = '' DECLARE @sql3 NVARCHAR(MAX) = '' DECLARE @sql4 NVARCHAR(MAX) = '' DECLARE @sql5 NVARCHAR(MAX) = '' DECLARE @sql6 NVARCHAR(MAX) = '' DECLARE @sql7 NVARCHAR(MAX) = '' DECLARE @sql8 NVARCHAR(MAX) = '' DECLARE @sql9 NVARCHAR(MAX) = '' DECLARE @sql10 NV </s
UPDATE table1 SET column1 = CASE </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT </s
</s
SELECT </s
DELETE </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM table1 WHERE exists ( SELECT 1 FROM table2 WHERE exists ( SELECT 1 FROM table3 WHERE exists ( SELECT 1 FROM table4 WHERE exists ( SELECT 1 FROM table5 WHERE exists ( SELECT 1 FROM table6 WHERE exists ( SELECT 1 FROM table7 WHERE exists ( SELECT 1 </s
</s
SELECT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
INSERT INTO table (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX) </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GET </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT COUNT(*) FROM </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM users WHERE user_id IN ( SELECT user_id FROM views WHERE view_id IN ( SELECT view_id FROM views GROUP BY view_id HAVING COUNT(*) > 1 ) ) </s
SELECT </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
DELETE </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY EmployeeID </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX) </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECL </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
UPDATE table1 t1 SET t1.id = t2.id FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
SELECT * FROM table_name WHERE NOT EXISTS ( SELECT 1 FROM table_name WHERE NOT EXISTS ( SELECT 1 FROM table_name WHERE NOT EXISTS ( SELECT 1 FROM table_name WHERE NOT EXISTS ( SELECT 1 FROM table_name WHERE NOT EXISTS ( SELECT 1 FROM table_name WHERE NOT EXISTS ( </s
DELETE FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
SELECT </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col </s
SELECT DISTINCT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
SELECT </s
SELECT </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @SQL NVARCHAR(MAX) SELECT @TableName = COALESCE(@TableName + ',', '') + '.' + COALESCE(@TableName + ',', '') SELECT @SQL = COALESCE(@TableName + ',', '') + '.' + COALESCE(@TableName + ',', '') SELECT @SQL = COALESCE(@TableName + ',', '') + '.' + COALESCE(@TableName + ',', '') </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + </s
</s
SELECT resource_key, resource_value FROM ( SELECT resource_key, resource_value FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT * FROM table_name WHERE NOT EXISTS ( SELECT 1 FROM table_name WHERE NOT EXISTS ( SELECT 1 FROM table_name WHERE NOT EXISTS ( SELECT 1 FROM table_name WHERE NOT EXISTS ( SELECT 1 FROM table_name WHERE NOT EXISTS ( SELECT 1 FROM table_name WHERE NOT EXISTS ( </s
</s
DELETE FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT user_id FROM users GROUP BY user_id HAVING COUNT(DISTINCT user_id) = (SELECT COUNT(DISTINCT user_id) </s
SELECT </s
SELECT </s
SELECT </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY [Date] ORDER BY [Date] DESC) rn </s
INSERT INTO Table1 (Column1, Column2, Column3, Column4, Column5) SELECT Column1, Column2, Column3, Column4, Column5 FROM Table1 </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43 </s
UPDATE table1 SET column1 = CASE WHEN column2 IS NULL THEN column2 ELSE column1 END, column2 = CASE WHEN column3 IS NULL THEN column3 ELSE column1 END, column3 = CASE WHEN column4 IS NULL THEN column4 ELSE column1 END, column4 = CASE WHEN column5 IS NULL THEN column5 ELSE column1 END, column5 = CASE WHEN column6 IS NULL THEN column6 ELSE column1 END, column6 = CASE WHEN column7 IS NULL THEN </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3) VALUES (' + </s
</s
SELECT </s
</s
;WITH CTE AS ( SELECT country_code, </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
SELECT </s
SELECT </s
declare @sql nvarchar(max) set @sql = 'SELECT </s
DECLARE @StartTime datetime DECLARE @EndTime datetime SET @StartTime = DATEADD(millisecond, -1, @StartTime) SET @EndTime = DATEADD(millisecond, -1, @EndTime) SELECT @StartTime = DATEADD(millisecond, -1, @StartTime) SELECT @EndTime = DATEADD(millisecond, -1, @EndTime) SELECT @StartTime = DATEADD(millisecond, -1, @StartTime) SELECT @EndTime = DATEADD( </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@ </s
CREATE OR REPLACE PROCEDURE [dbo].[reservation] AS SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @t </s
SELECT COUNT(DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DELETE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
SELECT </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
declare @sql varchar(max) set @sql = @sql + 'CREATE PROCEDURE [dbo].[MyProc] ( </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM Table1 WHERE NOT EXISTS (SELECT 1 FROM Table2 WHERE Table1.ID = Table2.ID AND Table1.Name = Table2.Name </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @SQL NVARCHAR(MAX) DECLARE @Query NVARCHAR(MAX) SELECT @TableName = @TableName + '.' + QUOTENAME(COLUMN_NAME) + '.' + QUOTENAME(COLUMN_NAME) FROM INFORMATION_SCHEMA.COLUMNS WHERE QUOTENAME(COLUMN_NAME) + '.' + QUOTENAME(COLUMN_NAME) + '.' + QUOTENAME(COLUMN_NAME) + '.' + QU </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @ColumnName NVARCHAR(MAX) SELECT @ColumnName = COALESCE(@ColumnName + ',', '') SELECT @ColumnName = COALESCE(@ColumnName + ',', '') SELECT @ColumnName = COALESCE(@ColumnName + ',', '') SELECT @ColumnName = COALESCE(@ColumnName + ',', '') SELECT @ColumnName = COALESCE(@ColumnName + ',', '') SELECT @ColumnName = COALESCE( </s
SELECT DATEADD(month, -1, DATEADD(year, -1, DATEADD(month, -1, DATEADD(year, -1, DATEADD(month, -1, DATEADD(year, -1, DATEADD(month, -1, DATEADD(year, -1, DATEADD(month, -1, DATEADD(year, -1, DATEADD(month, -1, DATEADD(year, -1, DATEADD(month, -1, DATEADD(year, -1, DATEADD(month, -1, DATE </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 5 </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) SET @sql = 'DROP TABLE IF EXISTS'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
CREATE OR REPLACE PROCEDURE [dbo].[MyProc] ( @param1 int, @param2 int, @param3 int, @param4 int, @param5 int, @param6 int, @param7 int, @param8 int, @param9 int, @param10 int, @param11 int, @param12 int, @param13 int, </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY created_at DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo] </s
</s
select t1.id, t1.name from table1 t1 inner join table2 t2 on t1.id=t2.id </s
</s
</s
</s
select substring( substr( substr( substr( </s
DELETE </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn FROM ( </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE( </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT COUNT(DISTINCT </s
SELECT user1.id, user2.id, user3.id, user4.id, user5.id FROM user1 LEFT JOIN user2 ON user1.id = user2.id LEFT JOIN user3 ON user1.id = user3.id LEFT JOIN user4 ON user1.id = user </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DELETE FROM Table1 WHERE NOT EXISTS ( SELECT 1 FROM Table2 WHERE Table2.Column1 = Table1.Column1 AND Table2.Column2 = Table1.Column2 AND Table2.Column3 = Table1.Column3 AND Table2.Column4 = Table1.Column4 AND Table2.Column5 = Table1.Column5 AND Table2.Column6 = Table1.Column6 AND Table </s
ALTER TABLE [dbo].[TableName] ADD COLUMN [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, [ColumnName] NOT NULL, </s
</s
declare @sql nvarchar(max) set @sql = '' select @sql = @sql +'set @autoincrement = 0' select @sql = @sql +'set @autoincrement = 1' select @sql = @sql +'set @autoincrement = 2' select @sql = @sql +'set @autoincrement = 3' select @sql = @sql +'set @autoincrement = 4' select @sql = @sql +'set @autoincrement = 5' select @sql = @sql + </s
SELECT trip.trip_id, trip.trip_name, trip.stop_date, trip.stop_time, trip.stop_id, trip.stop_name, trip.stop_time, trip.stop_id, trip.stop_name, trip.stop_ </s
SELECT * FROM ( SELECT id, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) AS rn FROM table WHERE id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(*) > 1 </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, </s
SELECT </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id where t1.id is null </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
declare @sql nvarchar(max) set @sql = 'CREATE TABLE'+ </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@ </s
UPDATE table1 SET column1 = CASE </s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
DECLARE @sql NVARCHAR(MAX); DECLARE @sql1 NVARCHAR(MAX); DECLARE @sql2 NVARCHAR(MAX); DECLARE @sql3 NVARCHAR(MAX); DECLARE @sql4 NVARCHAR(MAX); DECLARE @sql5 NVARCHAR(MAX); DECLARE @sql6 NVARCHAR(MAX); DECLARE @sql7 NVARCHAR(MAX); DECLARE @sql8 NVARCHAR(MAX); DECLARE @sql9 NVARCHAR(MAX); DECLARE @sql10 NVARCHAR </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + ' </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) > 1 </s
SELECT </s
</s
</s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXIS </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1 </s
CREATE TRIGGER [dbo].[Trigger] ON [dbo].[TableName] AFTER INSERT ON [dbo].[TableName] AFTER UPDATE ON [dbo].[TableName] AFTER DELETE ON [dbo].[TableName] AFTER INSERT ON [dbo].[TableName] AFTER DELETE ON [dbo].[TableName] AFTER UPDATE ON [dbo].[TableName] AFTER INSERT ON [dbo].[TableName] AFTER DELETE ON [dbo].[TableName] </s
SELECT </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = (select count(distinct t2.id) from table2 t2 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
</s
INSERT INTO Table1 (col1, col2) SELECT col1, col2 FROM Table2 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, -12, GETDATE()) SET @EndDate = DATEADD(MONTH, -12, GETDATE()) SELECT @StartDate = DATEADD(MONTH, -12, GETDATE()) SELECT @EndDate = DATEADD(MONTH, -12, GETDATE()) SELECT @StartDate = DATEADD(MONTH, -12, GETDATE()) SELECT @EndDate = DATEADD(MONTH </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @sql2 VARCHAR(MAX) = '' DECLARE @sql3 VARCHAR(MAX) = '' DECLARE @sql4 VARCHAR(MAX) = '' DECLARE @sql5 VARCHAR(MAX) = '' DECLARE @sql6 VARCHAR(MAX) = '' DECLARE @sql7 VARCHAR(MAX) = '' DECLARE @sql8 VARCHAR(MAX) = '' DECLARE @sql9 VARCHAR(MAX) = '' DECLARE @sql </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id JOIN table9 t9 ON t1. </s
SELECT </s
SELECT * FROM MyTable WHERE NOT EXISTS (SELECT 1 FROM MyTable WHERE NOT EXISTS (SELECT 1 </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM sys.indexes WHERE EXISTS ( SELECT 1 FROM sys.indexes WHERE EXISTS ( SELECT 1 FROM sys.indexes WHERE EXISTS ( SELECT 1 FROM sys.indexes WHERE EXISTS ( SELECT 1 FROM sys.indexes WHERE EXISTS ( SELECT 1 FROM sys.indexes WHERE EXISTS ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()) - 1, GETDATE()) FROM ( SELECT DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()) - 1, GETDATE()) UNION ALL SELECT DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()) - 1, GETDATE()) UNION ALL SELECT DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()) - 1, GETDATE()) UN </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
select t1.* from (select t1.*, row_number() over (partition by id order by time desc) as seqnum from table1 t1 ) t1 where seqnum = 1; </s
DECLARE @SQL NVARCHAR(MAX) SET @SQL = N' </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
SELECT </s
SELECT </s
</s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY type ORDER BY type) rn </s
DELETE FROM Links WHERE LinkID IN ( SELECT LinkID FROM Links WHERE LinkID NOT IN ( SELECT LinkID FROM Links WHERE LinkID NOT IN ( SELECT LinkID FROM Links WHERE LinkID NOT IN ( SELECT LinkID FROM Links WHERE LinkID NOT IN ( SELECT LinkID FROM Links WHERE LinkID NOT IN ( SELECT LinkID FROM </s
SELECT </s
</s
INSERT INTO mytable (col1, col2, col3, col4) SELECT col1, col2, col3, col4 FROM mytable </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE OR REPLACE FUNCTION [dbo].[pricing_system] ( </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = COALESCE(@sql +' </s
declare @id int declare @name varchar(50) declare @value varchar(50) insert into table (id, name, value) select id, name, value from (select id, name, value </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM MyTable GROUP BY COUNT(*) ORDER BY CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; DECLARE @StartYear DATETIME; DECLARE @EndYear DATETIME; DECLARE @StartMonth DATETIME; DECLARE @EndMonth DATETIME; DECLARE @StartDay DATETIME; DECLARE @EndDay DATETIME; DECLARE @StartHour DATETIME; DECLARE @EndHour DATETIME; DECLARE @StartMinute DATETIME; DECLARE @ </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ProductID </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT attendee_id, attendee_name, attendee_email, event_type, event_date FROM ( SELECT attendee_id, attendee_name, event_type, event_date FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Name ORDER BY Name) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38 </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY priority DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
SELECT COUNT(*) FROM table GROUP BY COUNT(*) HAVING COUNT(*) = (SELECT COUNT(*) FROM table WHERE </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT COUNT(DISTINCT </s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT COUNT(*) FROM </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT </s
SELECT DISTINCT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY MONTH ORDER BY MONTH) MONTH, ROW_NUMBER() OVER (PARTITION BY YEAR ORDER BY YEAR) YEAR, ROW_NUMBER() OVER (PARTITION BY MONTH ORDER BY MONTH) MONTH, ROW_NUMBER() OVER (PARTITION BY YEAR ORDER BY YEAR) YEAR, </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY status DESC) rn </s
SELECT </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id </s
DECLARE @TempTable TABLE( </s
</s
SELECT DISTINCT </s
select id from table where not exists (select 1 from table where id = table.id ) </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = (select count(distinct t2.id) </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45 </s
</s
SELECT COUNT(DISTINCT </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2; </s
</s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT CAST( </s
SELECT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT ROW_NUMBER() OVER (PARTITION BY </s
UPDATE table1 SET column1 = CASE </s
SELECT DATEADD(dd, -1, DATEADD(mm, -1, DATEADD(mm, -2, DATEADD(mm, -3, DATEADD(mm, -4, DATEADD(mm, -5, DATEADD(mm, -6, DATEADD(mm, -7, DATEADD(mm, -8, DATEADD(mm, -9, DATEADD(mm, -10, DATEADD(mm, -11, DATEADD(mm, -12, DATEADD(mm, -13, DATEADD( </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql +' </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT </s
SELECT </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table1 GROUP BY id HAVING COUNT(*) > 1 ) t WHERE rn = 1 </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id where t1.id is null </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT </s
SELECT </s
update your_table set your_column = replace(your_column, </s
SELECT </s
</s
DECLARE @sql NVARCHAR(MAX) DECLARE @cmd NVARCHAR(MAX) SELECT @sql = COALESCE(@sql + ', ', '') + COALESCE(@cmd + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') + COALESCE(@cmd + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') + COALESCE(@cmd + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') + </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE TABLE #temp ( </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT employee_id, count(*) FROM ( SELECT employee_id, </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
</s
</s
SELECT </s
SELECT CAST( </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql +' </s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER DELETE ON </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
</s
</s
</s
CREATE PROCEDURE [dbo].[InsertServiceBrokerQueue] AS BEGIN INSERT INTO [dbo].[ServiceBrokerQueue] </s
SELECT * FROM ( SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM </s
</s
CREATE TABLE customer ( customer_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, customer_name VARCHAR(50) NOT NULL, customer_email VARCHAR(50) NOT NULL, customer_phone VARCHAR(50) NOT NULL ); CREATE TABLE family ( family_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, family_name VARCHAR(50) NOT NULL, family_email VARCHAR(50) NOT NULL, family_ </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id </s
CREATE UNIQUE INDEX </s
SELECT </s
DELETE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id = t8 </s
CREATE OR REPLACE PROCEDURE [dbo].[MyProcedure] </s
</s
SELECT </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.id = t1.id and t2.name = t1.name and t2.id = t1.id and t2.name = t1.name and t2 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM users WHERE user_id IN ( SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users WHERE user_id NOT IN ( </s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
</s
declare @sql nvarchar(max) set @sql = 'SELECT @sql ='+ </s
CREATE OR REPLACE FUNCTION [dbo].[MyFunction] RETURNS FUNCTION [dbo].[MyFunction] RETURN FUNCTION [dbo].[MyFunction] RETURN FUNCTION [dbo].[MyFunction] RETURN FUNCTION [dbo].[MyFunction] RETURN FUNCTION [dbo].[MyFunction] RETURN FUNCTION [dbo].[MyFunction] RETURN FUNCTION [dbo].[MyFunction] </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
</s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id where t1.id is null group by t1.id having count(distinct t2.id) = 2 </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX) DECL </s
DECLARE @Date DATETIME SET @Date = DATEADD(DAY, -1, GETDATE()) SELECT DATEADD(DAY, -1, GETDATE()) SELECT DATEADD(DAY, -1, GETDATE()) SELECT DATEADD(DAY, -1, GETDATE()) SELECT DATEADD(DAY, -1, GETDATE()) SELECT DATEADD(DAY, -1, GETDATE()) SELECT DATEADD(DAY, -1, GETDATE()) SELECT D </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT department.department_id, department.department_name, department.department_id, department.department_name, department.department_id, department.department_name, department.department_id, department.department_name, department.department_id, department.department_name, department.department_id, department.department_name, department </s
SELECT </s
INSERT INTO Table1 (Column1, Column2, Column3) SELECT Column1, Column2, Column3 FROM Table2 </s
SELECT </s
SELECT DISTINCT </s
select * from ( select t.*, row_number() over (partition by t.*, </s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTrigger] AFTER INSERT ON [dbo].[MyTrigger] AFTER UPDATE ON [dbo].[MyTrigger] AFTER DELETE ON [dbo].[MyTrigger] AFTER INSERT ON [dbo].[MyTrigger] AFTER DELETE ON [dbo].[MyTrigger] AFTER DELETE ON [dbo].[MyTrigger] AFTER UPDATE ON [dbo].[MyTrigger] AFTER DELETE ON [dbo].[MyTrigger] </s
SELECT </s
CREATE OR REPLACE FUNCTION [dbo].[MyTable] ( </s
select regexp_substr( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
SELECT </s
DELETE </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COAL </s
DECLARE @sql NVARCHAR(MAX); SELECT @sql = COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY rating DESC) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @Columns TABLE ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
<?xml version="1.0" encoding="UTF-8"?> <?xml version="1.0" xmlns="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' exec sp_executesql @sql set @sql = 'SELECT * FROM table2' exec sp_executesql @sql set @sql = 'SELECT * FROM table3' exec sp_executesql @sql set @sql = 'SELECT * FROM table4' exec sp_executesql @sql set @sql = 'SELECT * FROM table5' exec sp_executesql @sql set @sql = 'SELECT * FROM table6' exec sp </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @sql NVARCHAR(MAX); SELECT @sql = COALESCE(@sql + ' </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table ) t WHERE t.rn = 1 </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql + ' </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SELECT @sql = COALESCE(@sql + ' </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + 'CREATE TABLE'+ </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY date) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, </s
CREATE PROCEDURE [dbo].[MyProc] ( @id int, @name varchar(50), @description varchar(50) ) AS BEGIN INSERT INTO [dbo].[MyProc] (@id, @name, @description) SELECT @id, @name, @description FROM [dbo].[MyProc] WHERE [dbo].[MyProc].[MyProc].[MyProc].[MyProc].[MyProc </s
CREATE OR REPLACE FUNCTION [dbo].[Update] RETURNS TRIGGER [dbo].[Update] RETURNS TRIGGER [dbo].[Delete] RETURNS TRIGGER [dbo].[Insert] RETURNS TRIGGER [dbo].[Update] RETURNS TRIGGER [dbo].[Delete] RETURNS TRIGGER [dbo].[Insert] RETURNS TRIGGER [dbo].[Delete] RETURNS </s
SELECT </s
MERGE </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3, col4) VALUES (' + </s
CREATE TABLE my_table ( </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(day, -1, @StartDate) SET @EndDate = DATEADD(day, -1, @EndDate) SELECT @StartDate = DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
DELETE </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date) rn </s
SELECT </s
</s
SELECT </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
UPDATE table1 SET column1 = CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @tbl NVARCHAR(MAX) = '' DECLARE @tbl2 NVARCHAR(MAX) = '' DECLARE @tbl3 NVARCHAR(MAX) = '' DECLARE @tbl4 NVARCHAR(MAX) = '' DECLARE @tbl1 NVARCHAR(MAX) = '' DECLARE @tbl2 NVARCHAR(MAX) = '' DECLARE @tbl3 NVARCHAR(MAX) = '' DECLARE @tbl4 NVARCHAR(MAX) </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COAL </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, 1, @StartDate) SET @EndDate = DATEADD(MONTH, 2, @EndDate) SET @StartDate = DATEADD(MONTH, 3, @StartDate) SET @EndDate = DATEADD(MONTH, 4, @EndDate) SET @StartDate = DATEADD(MONTH, 5, @StartDate) SET @EndDate = DATEADD(MONTH, 6, @End </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY amount DESC) rn </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql + ' </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
CREATE OR REPLACE TRIGGER checkbox BEFORE INSERT OR UPDATE ON checkbox FOR EACH ROW BEGIN INSERT INTO checkbox VALUES ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) > 1 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(YEAR, -1, @StartDate) SET @EndDate = DATEADD(YEAR, -1, @EndDate) SELECT DATEADD(YEAR, -1, DATEADD(YEAR, -1, DATEADD(YEAR, -1, DATEADD(YEAR, -1, DATEADD(YEAR, -1, DATEADD(YEAR, -1, DATEADD(YEAR, -1, DATEADD </s
CREATE TABLE my_table ( </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) SET @sql = 'SELECT * FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
SELECT * FROM ( SELECT * FROM table1 UNION ALL SELECT * FROM table2 UNION ALL SELECT * FROM table3 UNION ALL SELECT * FROM table4 UNION ALL SELECT * FROM table5 UNION ALL SELECT * FROM table6 UNION ALL SELECT * </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY ReportDate DESC) rn ROW_NUMBER() OVER (PARTITION BY ReportDate DESC </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
</s
INSERT INTO table1 (col1, col2, col3) SELECT col1, col2, col3 FROM table2 </s
#!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash #!/bin/bash </s
SELECT </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, 1, @StartDate) SET @EndDate = DATEADD(MONTH, 2, @EndDate) SET @StartDate = DATEADD(MONTH, 3, @StartDate) SET @EndDate = DATEADD(MONTH, 4, @EndDate) SET @StartDate = DATEADD(MONTH, 5, @StartDate) SET @EndDate = DATEADD(MONTH, 6, @EndDate </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
UPDATE table1 t1 SET t1.id = t2.id FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
DECLARE @RandomString VARCHAR(100) = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; SELECT @RandomString = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; SELECT @RandomString = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT </s
UPDATE ( SELECT </s
CREATE PROCEDURE [dbo].[GetRandomNumber] ( @RandomNumber int ) AS BEGIN DECLARE @RandomNumber int SET @RandomNumber = RAND() SELECT @RandomNumber = MAX(@RandomNumber) </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1 </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY date ORDER BY date) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sqlplus NVARCHAR(MAX) DECLARE @sqlplusplusplusplus VARCHAR(MAX) DECLARE @sqlplusplusplusplus VARCHAR(MAX) DECLARE @sqlplusplusplus VARCHAR(MAX) DECLARE @sqlplusplusplus VARCHAR(MAX) DECLARE @sqlplusplusplus VARCHAR(MAX) DECLARE @sqlplusplusplus VARCHAR(MAX) DECLARE @sqlplusplus VARCHAR(MAX) SELECT @sqlplus </s
SELECT DISTINCT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
INSERT INTO Table1 (Column1, Column2, Column3) SELECT Column1, Column2, Column3 FROM Table2 </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
CREATE OR REPLACE PROCEDURE [dbo].[Test] AS BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id JOIN table9 t9 ON t1 </s
SELECT </s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(*) > 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR </s
CREATE OR REPLACE PROCEDURE [dbo].[MyProcedure] AS </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM table GROUP BY COUNT(*) HAVING COUNT(*) > 1 </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM ( </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY category ORDER BY date DESC) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
</s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; SET @StartDate = DATEADD(DAY, -1, @StartDate); SET @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @EndDate = DATEADD(DAY, -1, </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE TABLE my_table( </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45 </s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY column </s
SELECT DATEADD(MINUTE, DATEDIFF(MINUTE, 0, GETDATE()), 0) FROM MyTable GROUP BY DATEADD(MINUTE, DATEDIFF(MINUTE, 0, GETDATE()), 0) ORDER BY DATEADD(MINUTE, DATEDIFF(MINUTE, 0, GETDATE()), 0) </s
</s
SELECT </s
</s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, 1, @StartDate) SET @EndDate = DATEADD(MONTH, 2, @EndDate) SET @StartDate = DATEADD(MONTH, 3, @StartDate) SET @EndDate = DATEADD(MONTH, 4, @EndDate) SET @StartDate = DATEADD(MONTH, 5, @StartDate) SET @EndDate = DATEADD(MONTH, 6 </s
</s
SELECT * FROM ( SELECT * FROM ( SELECT CASE </s
SELECT </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @SQL NVARCHAR(MAX) SET @SQL = 'SELECT @TableName ='+ </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE </s
IF EXISTS (SELECT * FROM Table1 WHERE Table1.ID = Table2.ID AND Table1.Name = Table2.Name </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
SELECT </s
SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + CO </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
DELETE FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM members WHERE NOT EXISTS (SELECT 1 FROM members WHERE user_id = @user_id AND member_id = @member_id ) </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR(MAX) </s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
from flask_sqlalchemy.ext.declarative import declarative_base from flask_sqlalchemy.ext.declarative import declarative_base from flask_sqlalchemy.ext.declarative import declarative_base from flask_sqlalchemy.ext.declarative import declarative_base from flask_sqlalchemy.ext.declarative import declarative_base from flask_sqlalchemy.ext.declarative import declarative_base from flask_sqlalchemy.ext.declarative import declarative_base from flask_sqlalchemy.ext.declarative </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + 'CREATE TABLE'+ </s
DECLARE @sql NVARCHAR(MAX) SELECT @sql = COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COAL </s
UPDATE table1 SET column1 = column2 FROM table1 LEFT JOIN table2 ON table1.column1 = table2.column1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
CREATE TABLE mytable ( </s
DELETE </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME, @EndDate DATETIME SET @StartDate = DATEADD(MINUTE, -10, @StartDate) SET @EndDate = DATEADD(MINUTE, -10, @EndDate) SELECT @StartDate = DATEADD(MINUTE, -10, @StartDate) SELECT @EndDate = DATEADD(MINUTE, -10, @EndDate) SELECT @StartDate = DATEADD(MINUTE, -10, @StartDate) SELECT @EndDate = DATEADD(MINUTE, -10, @ </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id INNER JOIN table4 t4 ON t1.id = t4.id INNER JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id </s
SELECT * FROM mytable WHERE NOT EXISTS (SELECT 1 FROM mytable WHERE NOT EXISTS (SELECT 2 </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id </s
SELECT </s
</s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
</s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT COUNT(DISTINCT </s
SELECT </s
MERGE </s
SELECT * FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id </s
SELECT </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT COUNT(DISTINCT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE OR REPLACE PROCEDURE [dbo].[Lock] AS BEGIN EXECUTE [dbo].[Lock] EXECUTE [dbo].[Lock] EXECUTE [dbo].[Lock] EXECUTE [dbo].[Lock] EXECUTE [dbo].[Lock] EXECUTE [dbo].[Lock] EXECUTE [dbo].[Lock] EXECUTE [dbo </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DROP TRIGGER [dbo].[dbo].[triggers] DROP TRIGGER [dbo].[dbo].[triggers] CREATE TRIGGER [dbo].[dbo].[triggers] ON [dbo].[dbo].[triggers] AFTER DELETE ON [dbo].[dbo].[triggers] AFTER INSERT ON [dbo].[dbo].[triggers] AFTER UPDATE ON [dbo].[dbo].[triggers] AFTER DELE </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 INT DECLARE @tbl2 INT DECLARE @
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
UPDATE Table1 SET Column1 = Column2 FROM Table1 INNER JOIN Table2 ON Table1.Column1 = Table2.Column1 INNER JOIN Table3 ON Table1.Column2 = Table3.Column2 INNER JOIN Table4 ON Table1.Column3 = Table4.Column3 INNER JOIN Table5 ON Table1.Column4 = Table5.Column4 UPDATE Table1 SET Column1 = Column2 FROM Table1 INNER JOIN Table2 ON Table1.Column2 = Table2.Column2 INNER JOIN Table3 ON Table1.Column3 </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
CREATE UNIQUE INDEX </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
CREATE OR REPLACE PROCEDURE [dbo].[Script] AS BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ', </s
</s
DECLARE @Date DATETIME SET @Date = DATEADD(DAY, -1, GETDATE()) SELECT @Date = DATEADD(DAY, -1, GETDATE()) </s
</s
</s
SELECT * FROM tableA WHERE NOT EXISTS (SELECT 1 FROM tableB WHERE tableB.id = tableA.id AND tableB.name = tableA.name </s
SELECT DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY TimeStamp ORDER BY TimeStamp DESC) AS rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
CREATE PROCEDURE [dbo].[MyProc] ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.table1_id JOIN table3 t3 ON t1.id = t3.table2_id JOIN table4 t4 ON t1.id = t4.table2_id JOIN table5 t5 ON t1.id = t5.table2_id JOIN table6 t6 ON t1.id = t6.table2_id JOIN table7 t7 ON t1.id = t7.table2_id </s
SELECT </s
DECLARE @t TABLE ( id INT IDENTITY(1,1) NOT NULL, name VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL ) INSERT INTO @t (id, name, email) SELECT id, name, email FROM ( SELECT id, name, email UNION ALL SELECT id, name, email UNION ALL SELECT id, name, email UNION ALL SELECT id, name, email </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
INSERT INTO Table1 (Column1, Column2, Column3, Column4) SELECT Column1, Column2, Column3, Column4 FROM Table1 </s
WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT </s
SELECT </s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER DELETE ON [dbo].[ </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXIS </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @ColumnName NVARCHAR(MAX) SET @TableName = 'Table1' SET @ColumnName = 'Column1' SET @ColumnName = 'Column2' SET @ColumnName = 'Column3' SET @ColumnName = 'Column4' SET @ColumnName = 'Column5' SET @ColumnName = 'Column6' SET @ColumnName = 'Column7' SET @ColumnName = 'Column8' SET @ColumnName = 'Column9' SET @Column </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY Date DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id) rn </s
DECLARE @sql NVARCHAR(MAX); DECLARE @sql1 NVARCHAR(MAX); DECLARE @sql2 NVARCHAR(MAX); DECLARE @sql3 NVARCHAR(MAX); DECLARE @sql4 NVARCHAR(MAX); DECLARE @sql5 NVARCHAR(MAX); DECLARE @sql6 NVARCHAR(MAX); DECLARE @sql7 NVARCHAR(MAX); DECLARE @sql8 NVARCHAR(MAX); DECLARE @sql9 NVARCHAR(MAX); DECLARE @sql10 NVARCHAR( </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY EntityId ORDER BY EntityId DESC) rn </s
select t.* from (select t.*, row_number() over (partition by id order by id) as seqnum from table t ) t where seqnum = 1; </s
CREATE OR REPLACE TRIGGER my_trigger BEFORE INSERT OR UPDATE ON my_table FOR EACH ROW BEGIN INSERT INTO my_table VALUES ( </s
</s
SELECT </s
</s
SELECT </s
UPDATE table_name SET column_name = REPLACE(column_name,'', '') FROM table_name WHERE column_name = REPLACE(column_name,'', '') </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ QUOTENAME(COLUMN_NAME) +'FROM'+ QUOTENAME(COLUMN_NAME) +'WHERE'+ QUOTENAME(COLUMN_NAME) +'='+ QUOTENAME(COLUMN_NAME) +'ORDER BY'+ QUOTENAME(COLUMN_NAME) +'ORDER BY'+ QUOTENAME(COLUMN_NAME) +'LIMIT'+ QUOTENAME(COLUMN_NAME) +'LIMIT'+ QUOTENAME </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table </s
CREATE FUNCTION [dbo].[summary] ( </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
<?xml version="1.0" encoding="UTF-8"?> <node xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2001/XMLSchema-instance" xsi:nodeset="http://www.w3.org/2001/XMLSchema-instance" xsi:nodesetContent="http://www.w3.org/2001/XMLSchema-instance" xsi:nodesetContentType="http://www.w3.org/2001/XMLSche </s
UPDATE ( SELECT CASE </s
DECLARE @t TABLE ( </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
CREATE NONCLUSTERED INDEX </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
select employee_id, project_id, workon_id, count(*) over (partition by employee_id </s
SELECT </s
SELECT </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.city = t1.city and t2.state = t1.state and t2.zip = t1.zip and t2.type = t1.type and </s
SELECT </s
</s
CREATE TABLE my_table ( </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, col </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX) SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY TimeStamp DESC) AS rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + 'SELECT'+ CONVERT(VARCHAR(MAX), </s
DELETE </s
</s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
UPDATE table_name SET column_name = column_name FROM table_name WHERE column_name NOT IN ( SELECT column_name FROM table_name UNION ALL SELECT column_name FROM table_name UNION ALL SELECT column_name FROM table_name UNION ALL SELECT column_name FROM table_name UNION ALL SELECT column_name FROM table_name UNION ALL SELECT column_name FROM </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
DECLARE @t TABLE( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
</s
SELECT </s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3) VALUES (' + </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(DISTINCT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
INSERT INTO table1 (col1, col2, col3, col4) SELECT col1, col2, col3, col4 FROM table1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM my_table GROUP BY id HAVING COUNT(*) > 1 ) t WHERE rn = 1 </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql +' </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ COALESCE(@sql + ', ', '') + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALES </s
CREATE OR REPLACE PROCEDURE [dbo].[CopyTable] </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -7, GETDATE()) SET @EndDate = DATEADD(DAY, -7, GETDATE()) SELECT @StartDate = DATEADD(DAY, -7, GETDATE()) SELECT @EndDate = DATEADD(DAY, -7, GETDATE()) SELECT @StartDate = DATEADD(DAY, -7, GETDATE()) SELECT @EndDate = DATEADD(DAY, - </s
SELECT </s
SELECT </s
SELECT </s
SELECT COUNT(DISTINCT </s
</s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE TRIGGER my_trigger BEFORE INSERT ON my_table BEFORE INSERT ON my_table FOR EACH ROW BEGIN UPDATE my_table SET my_column = CASE </s
</s
SELECT </s
</s
DECLARE @sql NVARCHAR(MAX) DECLARE @param NVARCHAR(MAX) DECLARE @return NVARCHAR(MAX) SET @sql = 'SELECT @param ='+ @param SET @return = 'SELECT @return ='+ @return EXEC sp_executesql @sql </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT </s
SELECT </s
SELECT </s
</s
CREATE TABLE [dbo].[Street] </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
DECLARE @t TABLE ( </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
UPDATE table_name SET column_name = REPLACE(column_name, ',', '') </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX) </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) </s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
</s
SELECT </s
SELECT COUNT(DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
</s
SELECT </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
DECLARE @sql NVARCHAR(MAX); SELECT @sql = COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ CO </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table GROUP BY id ) t WHERE NOT EXISTS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table GROUP BY id ) AND NOT EXISTS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table ) AND NOT EXISTS ( SELECT *, ROW </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALES </s
DROP TABLE IF EXISTS table_name; CREATE TABLE IF NOT EXISTS table_name ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY PatientID </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @Text NVARCHAR(MAX) SET @Text = REPLACE(@Text, '', '') SELECT @Text </s
SELECT COUNT(DISTINCT </s
SELECT * FROM articles WHERE article_id IN ( SELECT article_id FROM comments UNION ALL SELECT comment_id FROM comments UNION ALL SELECT comment_id FROM comments UNION ALL SELECT comment_id FROM comments UNION ALL SELECT comment_id FROM comments UNION ALL SELECT comment_id FROM comments </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
SELECT </s
ALTER PROCEDURE [dbo].[GetTableName] </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX); INSERT INTO @sql (col1, col2, col3) SELECT col1, col2, col3 FROM dual; INSERT INTO @sql (col1, col2, col3) SELECT col1, col2, col3 FROM dual; INSERT INTO @sql (col1, col2, col3) SELECT col1, col2, col3 FROM dual; INSERT INTO @sql (col1, col2, col3) SELECT col1, col2, col3 FROM dual; </s
CREATE NONCLUSTERED INDEX </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@ </s
</s
</s
select player_id from players group by player_id having count(*) = (select count(*) </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) </s
DELETE </s
SELECT * FROM messages WHERE message_id IN ( SELECT message_id FROM messages GROUP BY message_id HAVING COUNT(*) > 1 ) </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43 </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE PROCEDURE [dbo].[UpdateStoredProcedure] ( @UserId int, @UserName varchar(50) ) AS BEGIN INSERT INTO [dbo].[UpdateStoredProcedure] (UserId, UserName) SELECT UserId, UserName FROM [dbo].[UpdateStoredProcedure] WHERE [dbo].[UpdateStoredProcedure].[UserId] = @UserId AND [dbo].[UpdateSt </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
;with cte as ( select id, name, value from ( select id, name, value from </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'CREATE PROCEDURE [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[ </s
</s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2. </s
SELECT * FROM products WHERE product_id IN ( SELECT product_id FROM products GROUP BY product_id HAVING COUNT(*) > 1 ) </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -8, GETDATE()) SET @EndDate = DATEADD(DAY, -8, GETDATE()) SELECT @StartDate = DATEADD(DAY, -8, GETDATE()) SELECT @EndDate = DATEADD(DAY, -8, GETDATE()) SELECT @StartDate = DATEADD(DAY, -8, GETDATE()) SELECT @EndDate = DATEADD(DAY, </s
create index my_index on my_table </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
</s
</s
SELECT DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()), 0) </s
select t1.id, t2.id from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id, t2.id having count(distinct t1.id) = 2; </s
</s
IF EXISTS (SELECT * FROM Table1 WHERE Table1.ID = Table2.ID AND Table1.Name = Table2.Name AND Table1. </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
select id, count(*) as hired from (select id, row_number() over (partition by id order by id) as rn from dvd ) d where rn = 1 </s
select t.* from table t where not exists (select 1 from table t2 where t2.id = t.id </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
</s
SELECT </s
CREATE TABLE [dbo].[History] ( [HistoryId] </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id where t1.id is null group by t1.id having count(distinct t2.id) = 2; </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + 'CREATE TABLE'+ </s
</s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql </s
DECLARE @sql NVARCHAR(MAX); SELECT @sql = COALESCE(@sql, ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) > 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT col1, col2, col3, col4, col5, col6, col7, col8, col9 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
select regexp_replace( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
select t.* from (select t.*, row_number() over (partition by t.*, </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'SELECT'+ COALESCE( </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE( </s
</s
select id, min(time) as time, max(time) as time from ( select id, min(time) as time, max(time) as time from table group by id ) t group by id; </s
</s
CREATE PROCEDURE [dbo].[MyProc] ( </s
CREATE OR REPLACE PROCEDURE [dbo].[login] AS BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; </s
SELECT col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19 </s
select conversation_id, last_message_id, message_id from ( select conversation_id, last_message_id, message_id from ( select conversation_id, </s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM ( </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ', </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2. </s
SELECT COUNT(DISTINCT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Name ORDER BY Name </s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.id = table1.id GROUP BY table2.id HAVING COUNT(*) > 1 ) </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1 </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33 </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE( </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, - </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
CREATE TABLE products ( product_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, category_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, product_name VARCHAR(50) NOT NULL, product_description VARCHAR(50) NOT NULL ); CREATE TABLE categories ( category_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, category_name VARCHAR(50) NOT NULL, category_description VARCHAR(50) NOT </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @SQL NVARCHAR(MAX) SET @SQL = 'DROP TABLE'+ @TableName EXEC sp_executesql @SQL </s
CREATE OR REPLACE PROCEDURE [dbo].[User] AS </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
SELECT </s
SELECT CASE WHEN COUNT(*) > 1 THEN CASE WHEN COUNT(*) > 2 THEN CASE WHEN COUNT(*) > 3 THEN </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate), </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(*) > 1 </s
INSERT INTO table1 (col1, col2, col3, col4) SELECT col1, col2, col3, col4 FROM table1 </s
CREATE PROCEDURE [dbo].[MyProc] ( </s
SELECT t1.* FROM table1 t1 LEFT OUTER JOIN table2 t2 ON t1.id = t2.id LEFT OUTER JOIN table3 t3 ON t1.id = t3.id LEFT OUTER JOIN table4 t4 ON t1.id = t4.id LEFT OUTER JOIN table5 t5 ON t1.id = t5.id LEFT OUTER JOIN table6 t6 ON t1.id = t6.id LEFT OUTER JOIN table7 t7 ON t1.id = t7.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
SELECT </s
UPDATE </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) AS rn FROM CTE WHERE rn = 1 ) SELECT CAST( CAST( </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.table1_id INNER JOIN table3 t3 ON t1.id = t3.table1_id INNER JOIN table4 t4 ON t1.id = t4.table1_id INNER JOIN table5 t5 ON t1.id = t5.table1_id INNER JOIN table6 t6 ON t1.id = t6.table1_id INNER JOIN table7 t7 ON t1.id = t7.table1_id </s
UPDATE table1 t1 SET t1.id = t2.id FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY phone_number ORDER BY phone_number DESC) AS rn FROM my_table ) t WHERE rn = 1 </s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY DATEADD(dd, -1, DATEDIFF(dd, 0, GETDATE())) </s
mysqldump -u <user> -p <password> -u <user> -p <password> -u <user> -p <password> -u <user> -p <password> -u <user> -p <password> -u <user> -p <password> -u <user> -p <password> -u <user> -p <password> -u <user> -p <password> -u <user> -p <password> -u <user> -p <password> -u <user> -p <password> -u <user> -p <password> -u <user> </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
CREATE TRIGGER my_trigger AFTER INSERT ON my_table BEFORE INSERT ON my_table FOR EACH ROW BEGIN UPDATE my_table SET my_column = CASE </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
CREATE TABLE gallery ( gallery_id INT NOT NULL AUTO_INCREMENT, gallery_name VARCHAR(50) NOT NULL, gallery_url VARCHAR(50) NOT NULL, gallery_title VARCHAR(50) NOT NULL, gallery_author VARCHAR(50) NOT NULL, gallery_author_email VARCHAR(50) NOT NULL, gallery_author_name VARCHAR(50) NOT NULL, gallery_author_email VARCHAR(50) NOT NULL, </s
declare @sql nvarchar(max) set @sql = 'CREATE DATETIME'+ </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY category ORDER BY category DESC) rn </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @SQL NVARCHAR(MAX) SET @SQL = 'UPDATE'+ @TableName +'SET'+ </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COAL </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @sql NVARCHAR(MAX) SET @sql = </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(*) > 1 </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.col1 = table1.col1 AND table2.col2 = table1.col2 </s
SELECT </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.date = t1.date and t1.type = t2.type and </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + CO </s
SELECT </s
CREATE TRIGGER [dbo].[Triggers] ON [dbo].[Triggers] AFTER INSERT ON [dbo].[Triggers] AFTER UPDATE ON [dbo].[Triggers] AFTER DELETE ON [dbo].[Triggers] AFTER INSERT ON [dbo].[Triggers] AFTER DELETE ON [dbo].[Triggers] AFTER UPDATE ON [dbo].[Triggers] AFTER INSERT ON [dbo].[Triggers] AFTER DELETE ON [dbo].[ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX) </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY timeinterval DESC) AS rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '' </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( </s
</s
select max(salary) from (select t.*, row_number() over (partition by salary order by salary desc) as seqnum from t ) t where seqnum = 1; </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT </s
SELECT </s
CREATE OR REPLACE TRIGGER ComponentACE BEFORE INSERT OR UPDATE ON ComponentACE FOR EACH ROW BEGIN INSERT INTO ComponentACE ( </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY </s
</s
</s
</s
SELECT </s
</s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(DISTINCT t2.id) > 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT DISTINCT </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(*) > 1 </s
CREATE UNIQUE INDEX </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
SELECT COUNT(DISTINCT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
</s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
CREATE PROCEDURE [dbo].[MyProcedure] ( @Id INT, @StartDate DATETIME, @EndDate DATETIME ) AS BEGIN DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; SET @StartDate = DATEADD(DAY, -1, @StartDate); SET @EndDate = DATEADD(DAY, -1, @EndDate); SET @Id = </s
</s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 </s
</s
CREATE INDEX </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( PARTITION BY GUID </s
SELECT COUNT(DISTINCT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id </s
DECLARE </s
SELECT </s
</s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(DISTINCT t2.id) > 1 </s
DECLARE @TempTable TABLE( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
</s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id JOIN table9 t9 ON t1. </s
</s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[BEGIN] RETURNS FUNCTION [dbo].[dbo].[BEGIN] RETURN FUNCTION [dbo].[dbo].[BEGIN] RETURN FUNCTION [dbo].[dbo].[BEGIN] RETURN FUNCTION [dbo].[dbo].[BEGIN] RETURN FUNCTION [dbo].[dbo].[BEGIN] RETURN FUNCTION [dbo].[d </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) + 1, GETDATE()) FROM YourTable GROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) + 1, GETDATE()) ORDER BY DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) + 1, GETDATE()) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
WITH CTE AS ( SELECT CAST( </s
select to_date('2015-01-01', 'YYYY-MM-DD') as to_date, to_date('2015-01-02', 'YYYY-MM-DD') as to_date, to_date('2015-01-03', 'YYYY-MM-DD') as to_date, to_date('2015-01-04', 'YYYY-MM-DD') as to_date, to_date('2015-01-05', 'YYYY-MM-DD') as to </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY ID) rn </s
SELECT </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
</s
</s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -5, @StartDate) SET @EndDate = DATEADD(DAY, -5, @EndDate) SELECT @StartDate = DATEADD(DAY, -5, @StartDate) SELECT @EndDate = DATEADD(DAY, -5, @EndDate) SELECT @StartDate = DATEADD(DAY, -5, @StartDate) SELECT @EndDate = DATEADD(DAY, -5, @End </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( </s
</s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ QUOTENAME(col) +'FROM'+ QUOTENAME(col) +'WHERE'+ QUOTENAME(col) +'='+ QUOTENAME(col) +'AND'+ QUOTENAME(col) +'='+ QUOTENAME(col) +'AND'+ QUOTENAME(col) +'='+ QUOTENAME(col) +'AND'+ QUOTENAME(col) +'='+ QUOTENAME(col) +'ORDER BY'</s
SELECT </s
</s
SELECT </s
SELECT </s
DELETE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
with cte as ( select *, row_number() over (order by order by </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
</s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id DESC) rn </s
</s
</s
SELECT COUNT(DISTINCT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT CASE </s
s
SELECT </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
CREATE TRIGGER [dbo].[Trigger] ON [dbo].[TableName] AFTER INSERT ON [dbo].[TableName] FOR EACH ROW BEGIN INSERT INTO [dbo].[TableName] VALUES ( </s
SELECT </s
declare @sql nvarchar(max) set @sql ='select * from table1' exec sp_executesql @sql set @sql ='select * from table2' exec sp_executesql @sql set @sql ='select * from table3' exec sp_executesql @sql set @sql ='select * from table4' exec sp_executesql @sql set @sql ='select * from table5' exec sp_executesql @sql set @sql ='select * from table6' </s
SELECT * FROM table1 WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.column1 = table1.column1 AND table2.column2 = table1.column2 AND table2.column3 = table1.column3 AND table2.column4 = table1.column4 AND table2.column5 = table1.column5 AND table2.column6 = table1.column6 AND table2.column7 = table1. </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY route_id ORDER BY route_id) AS rn FROM routes WHERE route_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41 </s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT * FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id WHERE NOT EXISTS (SELECT 1 FROM table2 t2 WHERE t1.id = t2.id </s
CREATE OR REPLACE FUNCTION [dbo].[MyTable] ( </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@ </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT COUNT(*) FROM content_type GROUP BY COUNT(*) </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.id = table1.id UNION ALL SELECT 2 FROM table3 WHERE table3.id = table1.id UNION ALL SELECT 3 FROM table4 WHERE table4.id = table1.id UNION ALL SELECT 4 </s
SELECT </s
SELECT COUNT(DISTINCT </s
SELECT </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(week, -1, @StartDate) SET @EndDate = DATEADD(week, -1, @EndDate) SELECT DATEADD(week, -1, DATEADD(week, -1, DATEADD(week, -1, DATEADD(week, -1, DATEADD(week, -1, DATEADD(week, -1, DATEADD(week, -1 </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY [Date] ORDER BY [Date]) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table GROUP BY id HAVING COUNT(*) > 1 ) t WHERE rn = 1 </s
DELETE FROM Table1 WHERE NOT EXISTS (SELECT 1 FROM Table2 WHERE Table1.ID = Table2.ID AND Table1.Name = Table2.Name </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
</s
select regexp_substr( </s
</s
ORDER BY NEWID() </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.value = t1.value and t2.date = t1.date </s
select t1.* from table1 t1 left join table2 t2 on t1.ID = t2.ID group by t1.ID </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @xml XML = </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR(MAX </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43 </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
DECLARE @TIMESTAMPTZ NVARCHAR(MAX) DECLARE @SQL NVARCHAR(MAX) SELECT @TIMESTAMPTZ = CAST( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
SELECT COUNT(DISTINCT </s
</s
</s
declare @xml xml set @xml = </s
SELECT </s
</s
SELECT </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @col NVARCHAR(MAX) SELECT @tbl = COALESCE(@tbl + ','+ COALESCE(@col + ','+ COALESCE(@col + ','+ COALESCE(@col + ','+ COALESCE(@col + ','+ COALESCE(@col + ','+ COALESCE(@col + ','+ COALESCE(@col + ','+ COALESCE(@col + ','</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id DESC) rn FROM ( SELECT parent_id, parent_name, </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
SELECT DISTINCT </s
SELECT </s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * </s
SELECT </s
</s
</s
DELETE </s
</s
SELECT </s
</s
SELECT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT * FROM Table1 WHERE NOT EXISTS ( SELECT 1 FROM Table2 WHERE Table2.Column1 = Table1.Column1 AND Table2.Column2 = Table1.Column2 AND Table2.Column3 = Table1.Column3 AND Table2.Column4 = Table1.Column4 AND Table2.Column5 = Table1.Column5 AND Table2.Column6 = Table1.Column6 AND Table2.Column7 </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX); SELECT @sql = COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ CO </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, </s
CREATE OR REPLACE TRIGGER update_phone_numbers BEFORE INSERT OR UPDATE ON phone_numbers FOR EACH ROW BEGIN INSERT INTO phone_numbers VALUES ( </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @cursor NVARCHAR(MAX) SELECT @cursor = COALESCE(@cursor + ',', '') + COALESCE(@cursor + ',', '') + COALESCE(@cursor + ',', '') + COALESCE(@cursor + ',', '') + COALESCE(@cursor + ',', '') + COALESCE(@cursor + ',', '') + COALESCE(@cursor + ',', '') + COALESCE </s
SELECT DISTINCT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @TableName NVARCHAR(MAX) SET @TableName = 'Table1' SELECT @TableName = 'Table2' SELECT @TableName = 'Table3' SELECT @TableName = 'Table4' SELECT @TableName = 'Table5' SELECT @TableName = 'Table6' SELECT @TableName = 'Table7' SELECT @TableName = 'Table8' SELECT @TableName = 'Table9' SELECT @TableName = 'Table10' SELECT @TableName = 'Table11' </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY task_id ORDER BY task_id DESC) AS rn FROM tasks WHERE task_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT user_id FROM users GROUP BY user_id HAVING COUNT(*) = 2 </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
CREATE PROCEDURE [dbo].[MyProc] ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM friends WHERE friend_id IN ( SELECT friend_id FROM friends GROUP BY friend_id HAVING COUNT(*) > 1 ) </s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @sql2 NVARCHAR(MAX) = '' DECLARE @sql3 NVARCHAR(MAX) = '' DECLARE @sql4 NVARCHAR(MAX) = '' DECLARE @sql5 NVARCHAR(MAX) = '' DECLARE @sql6 NVARCHAR(MAX) = '' DECLARE @sql7 NVARCHAR(MAX) = '' DECLARE @sql8 NVARCHAR(MAX) = '' DECLARE @sql9 NVARCHAR(MAX) = '' </s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[create_table] RETURNS TABLE AS BEGIN INSERT INTO [dbo].[dbo].[create_table] VALUES ( </s
UPDATE ( SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
declare @text varchar(100) set @text = '123456789ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ' insert into @text values ('123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'); insert into @text values ('123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'); insert into @text values ('123456789ABCDEFGHIJKLMNOPQRSTUVWXY </s
SELECT * FROM table1 WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.column1 = table1.column1 AND table2.column2 = table1.column2 AND table2.column3 = table1.column3 AND table2.column4 = table1.column4 AND table2.column5 = table1.column5 AND table2.column6 = table1.column6 AND table2.column7 = table1.column7 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY status DESC) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
CREATE OR REPLACE FUNCTION [dbo].[create_constraint] </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, </s
SELECT </s
UPDATE ( SELECT CASE WHEN CASE </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'SELECT'+ QUOTENAME(COLUMN_NAME) +'FROM'+ QUOTENAME(COLUMN_NAME) +'GROUP BY'+ QUOTENAME(COLUMN_NAME) +'ORDER BY'+ QUOTENAME(COLUMN_NAME) +'ORDER BY'+ QUOTENAME(COLUMN_NAME) +'ORDER BY'+ QUOTENAME(COLUMN_NAME) +'ORDER BY'+ QUOTENAME(COLUMN_NAME) + </s
SELECT </s
DELETE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
UPDATE table1 t1 SET t1.id = t2.id FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
CREATE TRIGGER [dbo].[Trigger] ON [dbo].[TableName] FOR EACH ROW AS BEGIN INSERT INTO [dbo].[TableName] VALUES ( ( </s
DECLARE @sql NVARCHAR(MAX) SET @sql = N'SELECT * FROM </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate </s
select max(column) from table group by column having length(column) = (select max(length(column)) </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
DECLARE @TimeZone DATETIME SET @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ REPLACE(@sql, ',', '') +'FROM'+ </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() </s
SELECT * FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
CREATE TABLE my_table ( </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at DESC) AS rn </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
CREATE OR REPLACE PROCEDURE [dbo].[dbo].[log] AS BEGIN DELETE FROM [dbo].[dbo].[log] WHERE [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo] </s
CREATE TABLE my_table ( </s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; DECLARE @StartHour DATETIME; DECLARE @EndHour DATETIME; DECLARE @StartMinutes DATETIME; DECLARE @EndMinutes DATETIME; SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartHour = DATEADD(DAY, -1, @StartHour) SET @EndHour </s
SELECT </s
SELECT * FROM ( SELECT </s
SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
CREATE OR REPLACE TRIGGER LogMiner AFTER INSERT OR UPDATE ON LogMiner FOR EACH ROW BEGIN IF EXISTS (SELECT 1 FROM LogMiner WHERE LogMiner.LogMinerID = LogMiner.LogMinerID AND LogMiner.LogMiner </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE WHEN </s
SELECT </s
</s
SELECT </s
CREATE OR REPLACE TRIGGER my_trigger BEFORE INSERT OR UPDATE ON my_table FOR EACH ROW BEGIN INSERT INTO my_table VALUES ( </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT </s
</s
</s
SELECT DISTINCT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY column1, column2 </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + ' </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
UPDATE table1 SET column1 = CASE </s
DELETE FROM </s
UPDATE table_name SET column_name = CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCH </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT DATEADD(DAY, 1, @sql) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at DESC) rn </s
DROP TABLE IF EXISTS </s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DE </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
</s
SELECT DATE_FORMAT(date, '%Y-%m-%d %H:%i:%s') FROM ( SELECT DATE_FORMAT(date, '%Y-%m-%d %H:%i:%s') UNION ALL SELECT DATE_FORMAT(date, '%Y-%m-%d %H:%i:%s') UNION ALL SELECT DATE_FORMAT(date, '%Y-%m-%d %H:%i: </s
SELECT </s
</s
DELETE </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE WHEN qry='yes' THEN 1 ELSE 0 END) AS rn FROM tbl ) qry WHERE rn = 1 </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE( </s
SELECT DATEADD(year, DATEDIFF(year, 0, GETDATE()), 0) FROM ( SELECT DATEADD(year, DATEDIFF(year, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(year, DATEDIFF(year, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(year, DATEDIFF(year, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(year, DATEDIFF(year </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
DECLARE @SerialNumber NVARCHAR(MAX) SELECT @SerialNumber = COALESCE(@SerialNumber + '0', '') SELECT @SerialNumber = COALESCE(@SerialNumber + '1', '') SELECT @SerialNumber = COALESCE(@SerialNumber + '2', '') SELECT @SerialNumber = COALESCE(@SerialNumber + '3', '') SELECT @SerialNumber = COALESCE(@SerialNumber + '4', '') SELECT @SerialNumber = COALESCE(@SerialNumber + '5', '') </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
select regexp_replace( </s
</s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) AS rn FROM table ) t WHERE t.rn = 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id </s
SELECT </s
SELECT </s
SELECT </s
SELECT </s
SELECT </s
UPDATE table1 SET column1 = CASE </s
DELETE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT </s
SELECT </s
CREATE UNIQUE INDEX </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'SELECT'+ COALESCE( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@ </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
</s
UPDATE Table1 SET Table1.ID = Table2.ID FROM Table1 INNER JOIN Table2 ON Table1.ID = Table2.ID </s
SELECT * FROM table1 JOIN table2 ON table1.id = table2.id </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ COALESCE(@sql + ',', '') + COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALES </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name AND table2. </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY DATEADD(DAY, -1, DATEDIFF(DAY, 0, GETDATE())) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCH </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
SELECT COUNT(*) FROM files GROUP BY fileid HAVING COUNT(*) = (SELECT COUNT(*) </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
CREATE PROCEDURE [dbo].[Search] ( </s
DECLARE @sql NVARCHAR(MAX) = '' SET @sql = @sql + </s
</s
SELECT </s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; SET @StartDate = DATEADD(DAY, -1, @StartDate); SET @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @EndDate = DATEADD </s
CREATE OR REPLACE FUNCTION [dbo].[Update] RETURNS TRIGGER [dbo].[Update] RETURNS TRIGGER [dbo].[Delete] RETURNS TRIGGER [dbo].[Insert] RETURNS TRIGGER [dbo].[Update] RETURNS TRIGGER [dbo].[Delete] RETURNS TRIGGER [dbo].[Insert] RETURNS TRIGGER [dbo].[Delete] RETURNS TR </s
CREATE TABLE [dbo].[MyTable] ( [ID] int, [Name] varchar(50), [Description] varchar(50) ) INSERT INTO [dbo].[MyTable] ( [ID], [Name], [Description] ) SELECT [ID], [Name], [Description] FROM [dbo].[MyTable] </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DELETE </s
</s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT </s
select t1.id, t2.id from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id, t2.id having count(distinct t1.id) = (select count(distinct t2.id) </s
SELECT DATE_FORMAT(date, '%Y-%m-%d %H:%i:%s') </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @XML xml SET @XML = </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) > 1 </s
CREATE PROCEDURE [dbo].[MyProc] ( @param1 varchar(100), @param2 varchar(100), @param3 varchar(100), @param4 varchar(100), @param5 varchar(100), @param6 varchar(100), @param7 varchar(100), @param8 varchar(100), @param9 varchar(100), @param </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECIMAL(4,0) </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DELETE </s
CREATE TABLE #temp ( </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; DECLARE @StartHour DATETIME; DECLARE @EndHour DATETIME; DECLARE @StartMinutes DATETIME; DECLARE @EndMinutes DATETIME; DECLARE @StartSecond DATETIME; DECLARE @EndSecond DATETIME; SELECT @StartDate, @EndDate, @StartHour, @EndHour, @EndMinutes, @StartSecond, @EndSecond FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
select object_id, object_name, COUNT(*) from ( select object_id, object_name, COUNT(*) from ( </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM mytable WHERE date_trunc(@date,'+ @date + ')' SELECT * FROM mytable WHERE date_trunc(@date,'+ @date + ')' SELECT * FROM mytable WHERE date_trunc(@date,'+ @date + ')' SELECT * FROM mytable WHERE date_trunc(@date,'+ @date + ')' SELECT * FROM mytable WHERE date_trunc(@date,'+ @date + ')' </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, - </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( </s
</s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[create_table] ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT CASE </s
CREATE PROCEDURE [dbo].[MyProcedure] ( @Date DATETIME ) AS BEGIN INSERT INTO [dbo].[MyProcedure] SELECT DATEADD(DAY, -1, @Date) FROM [dbo].[MyProcedure] WHERE DATEADD(DAY, -1, @Date) < DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, - </s
</s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, </s
SELECT COUNT(DISTINCT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM TABLE_NAME' EXEC sp_executesql @sql </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM ( </s
SELECT </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE PROCEDURE [dbo].[MyProc] ( </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = (select count(distinct t2.id) </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY MasterID ORDER BY DateCreated DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @SQL NVARCHAR(MAX) SET @SQL = 'SELECT * FROM MyTable' SELECT @SQL = @SQL +' </s
INSERT INTO table1 (col1, col2, col3, col4) SELECT col1, col2, col3, col4 FROM table2 </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
CREATE OR REPLACE FUNCTION update( </s
CREATE PROCEDURE [dbo].[MyProc] ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY ID) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY ID) rn FROM </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
SELECT DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()), DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()), DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()), DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()), DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()), DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()), DATEADD(DAY, DATEDIFF(DAY, 0, </s
SELECT * FROM people WHERE NOT EXISTS ( SELECT * FROM supervisor WHERE supervisor.person_id = people.person_id UNION ALL SELECT * FROM supervisor WHERE supervisor.person_id = people.person_id UNION ALL SELECT * FROM supervisor WHERE supervisor.person_id = people.person_id UNION ALL SELECT * FROM supervisor </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY score DESC) AS rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR(MAX) </s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT * FROM </s
DECLARE @DateTime NVARCHAR(MAX) SELECT @DateTime = CONVERT(VARCHAR(10), GETDATE(), 112) SELECT @DateTime = CONVERT(VARCHAR(10), GETDATE(), 112) SELECT @DateTime = CONVERT(VARCHAR(10), GETDATE(), 112) SELECT @DateTime = CONVERT(VARCHAR(10), GETDATE(), 112) SELECT @DateTime = CONVERT(VARCHAR(10), GETDATE(), 112) SELECT @DateTime = CONVERT(VARCHAR(10), </s
</s
;WITH CTE AS ( SELECT *, case </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.hour = t2.hour JOIN table3 t3 ON t1.hour = t3.hour JOIN table4 t4 ON t1.hour = t4.hour JOIN table5 t5 ON t1.hour = t5.hour JOIN table6 t6 ON t1.hour = t6.hour JOIN table7 t7 ON t1.hour = t7.hour JOIN table8 t8 ON t1.hour = t8.hour </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43 </s
</s
SELECT * FROM table1 JOIN table2 ON table1.id = table2.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
CREATE TRIGGER [dbo].[AccountBalance] ON [dbo].[Account] BEFORE INSERT ON [dbo].[Account] FOR EACH ROW BEGIN INSERT INTO [dbo].[Account] SELECT </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT AccountId, COUNT(*) FROM Account GROUP BY AccountId </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
DECLARE @sql NVARCHAR(MAX) SELECT @sql = COALESCE(@sql + ', ', '') + COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') + COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') + COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') + COALESCE(@sql + ', ', </s
DELETE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SELECT @sql = COALESCE(@sql + ',', '') + COALESCE(@query + ',', '') SELECT @query = COALESCE(@query + ',', '') + COALESCE(@query + ',', '') SELECT @sql = COALESCE(@sql + ',', '') + COALESCE(@query + ',', '') SELECT @query = COALESCE(@query + ',', '') + </s
DELETE </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
CREATE OR REPLACE FUNCTION [dbo].[Transaction] RETURNS TRIGGER [dbo].[Transaction] RETURNS TRIGGER [dbo].[InsertTransaction] RETURNS TRIGGER [dbo].[UpdateTransaction] RETURNS TRIGGER [dbo].[DeleteTransaction] RETURNS TRIGGER [dbo].[InsertTransaction] RETURNS TRIGGER [dbo].[UpdateTransaction] RETURNS TRIGGER [dbo].[ </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
DECLARE @text varchar(100) SET @text = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( </s
</s
EXEC sp_executesql </s
</s
SELECT </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql + ' </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
CREATE OR REPLACE TRIGGER my_update BEFORE UPDATE ON my_table FOR EACH ROW BEGIN UPDATE my_table SET my_column = CASE </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO MyTable (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39 </s
</s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
</s
UPDATE table1 SET column1 = column2 FROM table1 LEFT JOIN table2 ON table1.column1 = table2.column1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT TOP 50 * FROM ( SELECT TOP 50 * </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ QUOTENAME(@sql) +'FROM'+ QUOTENAME(@tableName) +'WHERE'+ QUOTENAME(@columnName) +'NOT IN (' + QUOTENAME(@columnName) + ')' SELECT @sql = QUOTENAME(@sql) +'FROM'+ QUOTENAME(@tableName) +'WHERE'+ QUOTENAME(@columnName) +'NOT IN (' + QUOTENAME(@columnName) +'</s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
INSERT INTO Table1 (Column1, Column2, Column3, Column4) SELECT Column1, Column2, Column3, Column4 FROM Table1 </s
SELECT </s
</s
SELECT </s
select t.* from (select t.*, row_number() over (partition by teacher_id order by score desc) as rn from t ) t where rn = 1; </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2; </s
CREATE OR REPLACE TRIGGER update_table BEFORE UPDATE ON table FOR EACH ROW BEGIN INSERT INTO table (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 SELECT col1, col2, col3, col4, col5 FROM table WHERE NOT EXISTS (SELECT 1 </s
</s
SELECT </s
</s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
UPDATE table1 SET column1 = column2 FROM table1 LEFT JOIN table2 ON table1.column1 = table2.column1 </s
</s
<?xml version="1.0" encoding="UTF-8"?> <xml version="1.0" xmlns="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" xmlns:soap="http://schemas.xmlsoap.org/soap/envelop </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table </s
DELETE FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY commit_id ORDER BY commit_date DESC) rn FROM commit_history WHERE commit_id NOT IN ( SELECT commit_id FROM commit_history WHERE commit_id NOT IN ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM keyword WHERE NOT EXISTS (SELECT 1 FROM keyword WHERE keyword.keyword_id = keyword.keyword_id AND keyword.keyword_type = keyword.keyword_type </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) EXEC sp_executesql @sql NVARCHAR(MAX); EXEC sp_executesql @tbl NVARCHAR(MAX); EXEC sp_executesql @tbl NVARCHAR(MAX); EXEC sp_executesql @tbl NVARCHAR(MAX); EXEC sp_executesql @tbl NVARCHAR(MAX); EXEC sp_executesql @tbl NVARCHAR(MAX); EXEC sp_ </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
CREATE PROCEDURE [dbo].[MyProc] ( @id int, @name varchar(50), @description varchar(50) ) AS BEGIN SET NOCOUNT ON; INSERT INTO [dbo].[MyProc] (@id, @name, @description) SELECT @id, @name, @description FROM [dbo].[MyProc] WHERE [dbo].[MyProc].[MyPro </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3) VALUES (' + </s
DELETE FROM MyTable WHERE EXISTS (SELECT 1 FROM MyTable WHERE EXISTS (SELECT 1 FROM MyTable </s
SELECT </s
SELECT </s
SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
</s
SELECT </s
INSERT INTO Table1 (Column1, Column2, Column3) SELECT Column1, Column2, Column3 FROM Table1 </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
select * from ( select *, row_number() over (partition by action order by action desc) as seqnum from table ) t where seqnum = 1; </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44 </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; DECLARE @StartHour DATETIME; DECLARE @EndHour DATETIME; DECLARE @StartMinutes DATETIME; DECLARE @EndMinutes DATETIME; SET @StartDate = DATEADD(DAY, -1, @StartDate); SET @EndDate = DATEADD(DAY, -1, @EndDate); SET @StartHour = DATEADD(DAY, -1, @StartHour); </s
</s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.fk = table1.fk </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
INSERT INTO new_table (id, old_id, new_id) SELECT id, old_id, new_id FROM old_table </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
</s
SELECT COUNT(*) FROM YourTable GROUP BY COUNT(*) ORDER BY COUNT(*) DESC, COUNT(*) DESC, COUNT(*) DESC, COUNT(*) DESC, COUNT(*) DESC, COUNT(*) DESC, COUNT(*) DESC, COUNT(*) DESC, COUNT(*) DESC, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id) rn </s
SELECT DISTINCT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
SELECT </s
SELECT * FROM table1 WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table1.id = table2.id </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @ </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT CAST( </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate </s
SELECT </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY order_id ORDER BY order_date DESC) rn </s
CREATE TRIGGER [dbo].[dbo].[triggers] ON [dbo].[dbo].[triggers] AFTER INSERT ON [dbo].[dbo].[triggers] AFTER UPDATE ON [dbo].[dbo].[triggers] AFTER DELETE ON [dbo].[dbo].[triggers] AFTER INSERT ON [dbo].[dbo].[triggers] AFTER DELETE ON [dbo].[dbo].[triggers] AFTER UPDATE ON [dbo].[d </s
CREATE OR REPLACE FUNCTION [dbo].[User] DECLARE </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
SELECT * FROM table1 WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table1.col1 = table2.col1 AND table2.col2 = table1.col2 AND table1.col3 = table2.col3 AND table2.col4 = table1.col4 AND table2.col5 = table1.col5 AND table2.col6 = table1.col6 AND table2.col7 = table1. </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
CREATE PROCEDURE xp_seller </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM TABLE_NAME' SELECT @sql = COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') SELECT @sql = CO </s
</s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
CREATE OR REPLACE PROCEDURE [dbo].[MyProc] AS </s
DELETE </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'UPDATE </s
SELECT </s
SELECT * FROM table1 WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.user_id = table1.user_id GROUP BY table2.user_id HAVING COUNT(*) > 1 ) </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SELECT @sql = COALESCE(@sql + ' </s
SELECT user_id FROM users GROUP BY user_id HAVING COUNT(*) > 1 </s
UPDATE ( SELECT ROW_NUMBER() OVER (PARTITION BY </s
select t1.* from table1 t1 join table2 t2 on t1.col1 = t2.col1 and t1.col2 = t2.col2 and t2.col3 = t1.col3 and t2.col4 = t1.col4 and t2.col5 = t1.col5 and t2.col6 </s
SELECT </s
</s
CREATE UNIQUE INDEX </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GET </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ @sql +' </s
SELECT </s
SELECT SUBSTRING( </s
SELECT </s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo] </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT COUNT(*) FROM ( SELECT ID, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) AS rn FROM ( </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
SELECT CASE WHEN CASE </s
select * from ( select * union all select * union all select * union all select * union all select * union all select * union all select * union all select * union all select * union all select * union all select * union </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY date) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE WHEN @filter = 1 THEN 1 ELSE 0 END) as rn , CASE WHEN @filter = 2 THEN 1 ELSE 0 END , </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql </s
UPDATE Table1 SET Table1.Column1 = Table2.Column1 FROM Table1 INNER JOIN Table2 ON Table1.Column2 = Table2.Column2 INNER JOIN Table3 ON Table1.Column3 = Table3.Column3 INNER JOIN Table4 ON Table1.Column4 = Table4.Column4 INNER JOIN Table5 ON Table1.Column5 = Table5.Column5 INNER JOIN Table6 ON Table1.Column6 = Table6.Column6 INNER JOIN Table7 ON Table1.Column7 = Table7. </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT DISTINCT </s
ALTER TABLE [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo </s
SELECT </s
SELECT * FROM Table1 WHERE NOT EXISTS ( SELECT 1 FROM Table2 WHERE Table1.ID = Table2.ID AND Table1.ID NOT IN ( SELECT 1 FROM Table2 WHERE Table1.ID NOT IN ( SELECT 1 FROM Table2 </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn </s
CREATE OR REPLACE FUNCTION update_table( </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id JOIN table9 t9 ON t1 </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SELECT @sql = COALESCE(@sql + ', ', '') + COALESCE(@query + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') + COALESCE(@query + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') + COALESCE(@query + ', ', '') SELECT @sql = COALESCE(@sql + ', ', '') + </s
declare @sql varchar(max) set @sql = @sql + 'CREATE PROCEDURE [dbo].[MyProc] ( </s
SELECT </s
MERGE </s
SELECT </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + 'CREATE TABLE'+ </s
</s
</s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[create_table] ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, -1, @StartDate) SET @EndDate = DATEADD(MONTH, -1, @EndDate) SELECT @StartDate = DATEADD(MONTH, -1, @StartDate) SELECT @EndDate = DATEADD(MONTH, -1, @EndDate) SELECT @StartDate = DATEADD(MONTH, -1, @StartDate) SELECT @EndDate = </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.city = t1.city and t2.state = t1.state and t2.zip = t1.zip and t2.state = t1.state and </s
CREATE OR REPLACE PROCEDURE [dbo].[create_table] AS BEGIN SET NOCOUNT ON; INSERT INTO [dbo].[table] (col1, col2, col3) SELECT col1, col2, col3 FROM [dbo].[table] WHERE col1 NOT IN (SELECT col1 FROM [dbo].[table] WHERE col2 NOT IN (SELECT col2 FROM [dbo].[table] WHERE col3 NOT IN (SELECT col3 FROM [dbo].[table] WHERE col4 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT COUNT(*) FROM ( SELECT category, COUNT(*) FROM ( SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
SELECT </s
DECLARE @Date DATETIME SET @Date = '2012-01-01 00:00:00.000' SELECT @Date = '2012-01-01 00:00:00.000' SELECT @Date = '2012-02-01 00:00:00.000' SELECT @Date = '2012-03-01 00:00:00.000' SELECT @Date = '2012-04-01 00:00:00.000' SELECT @Date = '2012-05-01 00:00:00.000' SELECT </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id = t </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
CREATE TABLE my_table( </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, - </s
DECLARE @sql NVARCHAR(MAX); SELECT @sql = COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DELETE FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
SELECT * FROM table_name WHERE NOT EXISTS ( SELECT * FROM table_name WHERE NOT EXISTS ( SELECT * FROM table_name WHERE NOT EXISTS ( SELECT * FROM table_name WHERE NOT EXISTS ( SELECT * FROM table_name WHERE NOT EXISTS ( SELECT * FROM table_name WHERE NOT EXISTS ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY timestamp DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
</s
DECLARE @sql NVARCHAR(MAX) DECLARE @index NVARCHAR(MAX) SET @sql = 'SELECT </s
INSERT INTO table1 (col1, col2, col3) SELECT col1, col2, col3 FROM table2 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE UNIQUE INDEX </s
</s
SELECT </s
SELECT </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table ) t WHERE t.rn = 1 </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
SELECT </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY version DESC) rn </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
</s
</s
SELECT </s
SELECT COUNT(DISTINCT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID) rn FROM </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.id = table1.id UNION ALL SELECT 2 FROM table3 WHERE table3.id = table1.id UNION ALL SELECT 3 FROM table4 WHERE table4.id = table1.id UNION ALL SELECT 4 FROM table5 WHERE table5.id </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
UPDATE table1 SET column1 = column2 FROM table1 LEFT JOIN table2 ON table1.column1 = table2.column1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DELETE </s
select count(*) from ( select id, count(*) from ( select id, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table GROUP BY id HAVING COUNT(*) > 1 ) t WHERE rn = 1 </s
SELECT COUNT(*) FROM table GROUP BY COUNT(*) </s
SELECT COUNT(*) FROM posts WHERE post_id IN ( SELECT post_id FROM posts GROUP BY post_id HAVING COUNT(*) > 1 ) </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.description = t1.description and t1.type = t2.type and t2.description = t1.description and t2.type = t1.type </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @t </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql + ' </s
SELECT * FROM ( SELECT </s
</s
</s
SELECT * FROM Table1 WHERE NOT EXISTS (SELECT 1 FROM Table2 WHERE Table1.ID = Table2.ID AND Table1.Name = Table2.Name </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY timestamp DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn </s
DROP TABLE IF EXISTS my_table; CREATE TABLE my_table ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, - </s
SELECT </s
<?xml version="1.0" encoding="UTF-8"?> <?xml version="1.0" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" <?xml version="1.0" encoding="UTF-8"?> <?xml version="1.1" encoding="UTF-8"?> <?xml version="1.2" encoding="UTF-8"?> <?xml version="1.3" encoding="UTF-8"?> <?xml version="1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE TABLE libraries ( library_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, library_name VARCHAR(50) NOT NULL, library_version VARCHAR(50) NOT NULL ); CREATE TABLE books ( book_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, book_name VARCHAR(50) NOT NULL, book_version VARCHAR(50) NOT NULL </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE UNIQUE INDEX my_table_name ON my_table (my_column); CREATE INDEX my_table_name2 ON my_table (my_column); CREATE INDEX my_table_name3 ON my_table (my_column); CREATE INDEX my_table_name4 ON my_table (my_column); CREATE INDEX my_table_name5 ON my_table (my_column); CREATE INDEX my_table_name6 ON my_table (my_column); CREATE INDEX my_table_name7 ON </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE WHEN ROW_NUMBER() OVER (ORDER BY CASE WHEN ROW_NUMBER() > 0 THEN 1 ELSE 0 END) </s
SELECT </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(wk, -1, @StartDate) SET @EndDate = DATEADD(wk, -1, @EndDate) SELECT @StartDate = DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk, -1, DATEADD(wk </s
SELECT </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
SELECT COUNT(*) FROM table1 GROUP BY COUNT(*) HAVING COUNT(*) > 1 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT COUNT(*) FROM (SELECT </s
<?xml version="1.0" encoding="UTF-8"?> <?xml version="1.0" encoding="UTF-8"?> <?xml version="1.1" encoding="UTF-8"?> <?xml version="1.2" encoding="UTF-8"?> <?xml version="1.3" encoding="UTF-8"?> <?xml version="1.4" encoding="UTF-8"?> <?xml version="1.5" encoding="UTF-8"?> <?xml version="1.6" encoding="UTF-8"?> <?xml version="1.7" encoding="UTF- </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -60, @StartDate) SET @EndDate = DATEADD(DAY, -60, @EndDate) SELECT @StartDate = DATEADD(DAY, -60, @StartDate) SELECT @EndDate = DATEADD(DAY, -60, @EndDate) SELECT @StartDate = DATEADD(DAY, -60, @StartDate) SELECT @EndDate = DATEADD(DAY, -60, @ </s
</s
SELECT * FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id </s
CREATE TABLE myTable ( </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(DISTINCT </s
</s
SELECT * FROM sys.objects WHERE NOT EXISTS ( SELECT * FROM sys.objects WHERE NOT EXISTS ( SELECT * FROM sys.objects WHERE NOT EXISTS ( SELECT * FROM sys.objects WHERE NOT EXISTS ( SELECT * FROM sys.objects WHERE NOT EXISTS ( SELECT * FROM sys.objects WHERE NOT EXISTS ( </s
MERGE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM table1 JOIN table2 ON table1.id = table2.id JOIN table3 ON table1.id = table3.id JOIN table4 ON table1.id = table4.id JOIN table5 ON table1.id = table5.id JOIN table6 ON table1.id = table6.id JOIN table7 ON table1.id = table7.id JOIN table8 ON table1.id = table8.id JOIN table9 ON table1.id = table9.id JOIN table10 ON table1.id </s
SELECT </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43 </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
</s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col </s
SELECT COUNT(*) FROM comments GROUP BY COUNT(*) HAVING COUNT(*) > 1 </s
DECLARE @sql NVARCHAR(MAX) SET @sql = COALESCE(@sql + ' </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY date ORDER BY date DESC) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
DECLARE @TableName NVARCHAR(MAX), @ColumnName NVARCHAR(MAX), @ColumnValue NVARCHAR(MAX), @ColumnType NVARCHAR(MAX), @ColumnName2 NVARCHAR(MAX), @ColumnName222 NVARCHAR(MAX), @ColumnType2 NVARCHAR(MAX), @ColumnType222 NVARCHAR(MAX), </s
</s
SELECT </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @End </s
var output = new String[] { </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT * FROM table1 UNION ALL SELECT * FROM table2 UNION ALL SELECT * FROM table3 UNION ALL SELECT * FROM table4 UNION ALL SELECT * FROM table5 UNION ALL SELECT * FROM table6 UNION ALL SELECT * FROM table7 </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql + ' </s
</s
SELECT COUNT(*) FROM table GROUP BY COUNT(*) HAVING COUNT(*) > 1 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = D </s
</s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1 </s
SELECT COUNT(*) FROM ( SELECT category_id, category_name, COUNT(*) FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
</s
SELECT SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( </s
SELECT COUNT(*) FROM ( SELECT category, COUNT(*) FROM ( SELECT category, </s
SELECT * FROM users WHERE user_id IN ( SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR(MAX) </s
</s
declare @sql nvarchar(max) set @sql = 'SELECT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY date) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, 1, @StartDate) SET @EndDate = DATEADD(MONTH, 2, @EndDate) SET @StartDate = DATEADD(MONTH, 3, @StartDate) SET @EndDate = DATEADD(MONTH, 4, @EndDate) SET @StartDate = DATEADD(MONTH, 5, @StartDate) SET @EndDate = DATEADD(MONTH, 6, @EndDate) </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @sql2 NVARCHAR(MAX) = '' DECLARE @sql3 NVARCHAR(MAX) = '' DECLARE @sql4 NVARCHAR(MAX) = '' DECLARE @sql5 NVARCHAR(MAX) = '' DECLARE @sql6 NVARCHAR(MAX) = '' DECLARE @sql7 NVARCHAR(MAX) = '' DECLARE @sql8 NVARCHAR(MAX) = '' DECLARE @sql9 NVARCHAR(MAX) = '' DECL </s
CREATE OR REPLACE PROCEDURE [dbo].[Grant] AS </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@ </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.city = t1.city and t2.state = t1.state and t2.zip = t1.zip and t2.state = t1.state and t2 </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql </s
CREATE OR REPLACE PROCEDURE [dbo].[lock_messages] AS BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43 </s
DELETE FROM Table1 WHERE NOT EXISTS ( SELECT 1 FROM Table2 WHERE Table2.Column1 = Table1.Column1 AND Table2.Column2 = Table1.Column2 AND Table2.Column3 = Table1.Column3 AND Table2.Column4 = Table1.Column4 AND Table2.Column5 = Table1.Column5 AND Table2.Column6 = Table1.Column6 AND Table2.Column7 = </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT GROUP_CONCAT( </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = (select count(distinct t2.id) </s
declare @sql nvarchar(max) set @sql = @sql + ' </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( </s
SELECT </s
</s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, </s
SELECT </s
SELECT </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.table1_id JOIN table3 t3 ON t1.id = t3.table1_id JOIN table4 t4 ON t1.id = t4.table1_id JOIN table5 t5 ON t1.id = t5.table1_id JOIN table6 t6 ON t1.id = t6.table1_id JOIN table7 t7 ON t1.id = t7.table1_id </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3) VALUES (' + </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COAL </s
SELECT </s
</s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, - </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT </s
SELECT * FROM ( SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
</s
</s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @sql2 NVARCHAR(MAX) = '' DECLARE @sql3 NVARCHAR(MAX) = '' DECLARE @sql4 NVARCHAR(MAX) = '' DECLARE @sql5 NVARCHAR(MAX) = '' DECLARE @sql6 NVARCHAR(MAX) = '' DECLARE @sql7 NVARCHAR(MAX) = '' DECLARE @sql8 NVARCHAR(MAX) = '' DECLARE @sql9 NVARCHAR(MAX) = '' DECLARE @sql10 NVARCHAR( </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(weekday, -1, @StartDate) SET @EndDate = DATEADD(weekday, -1, @EndDate) SELECT @StartDate = DATEADD(weekday, -1, DATEADD(weekday, -1, DATEADD(weekday, -1, DATEADD(weekday, -1, DATEADD(weekday, -1, DATEADD(weekday, -1, DATEADD(weekday, -1, DATE </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql + ' </s
SELECT COUNT(*) FROM ( SELECT course_id, course_name, student_id, student_name FROM </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartTime DATETIME DECLARE @EndTime DATETIME SET @StartTime = DATEADD(DAY, -1, @StartTime) SET @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartTime = DATEADD(DAY, -1, @StartTime) SELECT @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartTime = DATEADD(DAY, -1, @StartTime) SELECT @EndTime = DATEADD(DAY, -1, @EndTime </s
SELECT </s
SELECT </s
SELECT </s
SELECT </s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.id = t1.id and t2.name = t1.name and t2.id = t1.id and t2.name = t1.name and t2.id = t1. </s
INSERT INTO table1 (col1, col2, col3) SELECT col1, col2, col3 FROM table2 </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
</s
CREATE OR REPLACE FUNCTION [dbo].[Upload] ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
CREATE OR REPLACE TRIGGER [dbo].[table_name] ON [dbo].[table_name] BEFORE INSERT ON [dbo].[table_name] FOR EACH ROW BEGIN UPDATE [dbo].[table_name] SET [dbo].[table_name] = [dbo].[table_name] WHERE [dbo].[table_name] = [dbo].[table_name] OR [dbo].[table_name] = [dbo].[table_name] END </s
SELECT COUNT(DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SQLiteDatabase db = new SQLiteDatabase() db.open() db.executescript(''' </s
</s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
select t1.*, t2.* from (select t1.*, row_number() over (partition by t1.title order by t1.title) as seqnum from t1 ) t1 inner join t2 </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) SET @sql = 'SELECT * FROM TABLE1' SET @tbl = 'SELECT * FROM TABLE2' SELECT @sql = @sql +' </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
select t1.* from table1 t1 join table2 t2 on t1.tag = t2.tag group by t1.tag having count(distinct t2.tag) = 2; </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, -1, @StartDate) SET @EndDate = DATEADD(MONTH, -1, @EndDate) SELECT @StartDate = DATEADD(MONTH, 1, @StartDate) SELECT @EndDate = DATEADD(MONTH, 2, @EndDate) SELECT @StartDate = DATEADD(MONTH, 3, @StartDate) SELECT @EndDate = DATEADD(MONTH, 4, @EndDate) </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
INSERT INTO Table1 (Column1, Column2, Column3) SELECT Column1, Column2, Column3 FROM Table2 </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) AS rn FROM CTE WHERE rn = 1 ) SELECT * FROM CTE WHERE rn = 1 </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3) VALUES (' + </s
SELECT DISTINCT ( ( SELECT ( SELECT ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
UPDATE table_name SET column_name = column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column_name + '.' + column </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
select t1.id, t2.id from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id, t2.id having sum(case when t1.id = t2.id then 1 else 0 end) = 0 </s
<?xml version="1.0" encoding="UTF-8"?> <?xml version="1.0" xmlns="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" <?xml version="1.0" encoding="UTF-8"?> <?xml version="1.1" encoding="UTF-8"?> <?xml version="1.2" encoding="UTF-8"?> <?xml version="1.3" encoding="UTF-8"?> </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT </s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ REPLACE(@sql, '.', '') SELECT @sql = REPLACE(@sql, '.', '') SELECT @sql = REPLACE(@sql, '.', '') SELECT @sql = REPLACE(@sql, '.', '') SELECT @sql = REPLACE(@sql, '.', '') SELECT @sql = REPLACE(@sql, '.', '') SELECT @sql = REPLACE(@sql, '.', '' </s
DELETE FROM Table1 WHERE NOT EXISTS (SELECT 1 FROM Table2 WHERE Table1.ID = Table2.ID AND Table1.Name = Table2.Name </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id </s
CREATE PROCEDURE [dbo].[Report] AS BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; </s
</s
DECLARE @t TABLE ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DROP TABLE A; CREATE TABLE A ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
CREATE TRIGGER [dbo].[UpdateUser] ON [dbo].[User] AFTER INSERT ON [dbo].[User] FOR EACH ROW BEGIN INSERT INTO [dbo].[User] VALUES ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( SELECT </s
CREATE TRIGGER [dbo].[trigger_update] ON [dbo].[table_name] AFTER UPDATE AS BEGIN INSERT INTO [dbo].[table_name] VALUES ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
CREATE OR REPLACE FUNCTION [dbo].[DBMS_CREATE_DATABASE] ( @dbms_name varchar(50), @dbms_user varchar(50), @dbms_password varchar(50), @dbms_host varchar(50), @dbms_port varchar(50), @dbms_username varchar(50), @dbms_password varchar(50), @ </s
</s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
CREATE PROCEDURE [dbo].[MyProc] ( @Id int, @Name varchar(50), @Description varchar(50) ) AS BEGIN INSERT INTO [dbo].[MyProc] (Id, Name, Description) SELECT Id, Name, Description FROM [dbo].[MyProc] WHERE [dbo].[MyProc].[Id] = @Id AND [dbo].[MyProc].[Name] = @ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn ROW_NUMBER() OVER (PARTITION BY Date DESC) rn </s
SELECT </s
CREATE TABLE mytable ( </s
</s
SELECT </s
</s
CREATE OR REPLACE TRIGGER logged_on_user AFTER INSERT OR UPDATE ON logged_on_user BEFORE INSERT OR UPDATE ON logged_on_user FOR EACH ROW BEGIN INSERT INTO logged_on_user SELECT * FROM logged_on_user WHERE NOT EXISTS (SELECT 1 FROM logged_on_user </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.description = t1.description and </s
</s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY distance DESC) AS rn FROM ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44 </s
DECLARE @TableName NVARCHAR(MAX) SET @TableName = '' DECLARE @SQL NVARCHAR(MAX) SET @SQL = '' SELECT @TableName </s
</s
SELECT </s
SELECT </s
</s
SELECT COUNT(DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'SELECT * FROM'+ </s
UPDATE table1 SET column1 = CASE </s
SELECT * FROM table1 WHERE NOT EXISTS ( SELECT * FROM table2 WHERE table1.id = table2.id ) </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id DESC) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
MERGE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
ORDER BY CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
CREATE OR REPLACE PROCEDURE [dbo].[backup] AS BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET N </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4) SELECT col1, col2, col3, col4 FROM table2 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, </s
SELECT COUNT(*) FROM ( SELECT person_id, ROW_NUMBER() OVER (PARTITION BY person_id </s
UPDATE table1 SET table1.id = table2.id FROM table1 INNER JOIN table2 ON table1.id = table2.id </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.PK = table1.PK AND table2. </s
SELECT name FROM ( SELECT name FROM ( SELECT name FROM </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table ) </s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER TRIGGER [dbo].[MyTrigger] ON [dbo </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
SELECT </s
SELECT </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.description = t1.description group by t1.id, t1.name, t1.description; </s
SELECT </s
DECLARE @TimeZone DATETIME SET @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; SELECT @TimeZone = 'Europe/Berlin'; </s
SELECT </s
SELECT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT </s
SELECT </s
SELECT </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
ALTER TABLE [dbo].[MyTable] ADD COLUMN [COLUMN_NAME] </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT </s
SELECT </s
SELECT </s
CREATE OR REPLACE FUNCTION [dbo].[Check] ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY ID) rn </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
</s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX) </s
</s
</s
SELECT COUNT(*) FROM ( SELECT ROW_NUMBER() OVER (ORDER BY </s
SELECT </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = COALESCE(@sql + ' </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
INSERT INTO Table1 (Column1, Column2, Column3, Column4, Column5) SELECT Column1, Column2, Column3, Column4, Column5 FROM Table1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id WHERE t1.id IS NULL </s
UPDATE table1 SET column1 = column2 FROM table1 JOIN table2 ON table1.column1 = table2.column1 WHERE table1.column2 = table2.column2 </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql + ' </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SELECT @sql = COALESCE(@sql + ','+ COALESCE(@query + ','+ COALESCE(@query + ','+ COALESCE(@query + ','+ COALESCE(@query + ','+ COALESCE(@query + ','+ COALESCE(@query + ','+ COALESCE(@query + ','+ COALESCE(@query + ','+ COALESCE(@ </s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[create_table] RETURNS TABLE AS BEGIN SET NOCOUNT ON; CREATE OR REPLACE FUNCTION [dbo].[dbo].[create_table] RETURNS TABLE AS BEGIN SET NOCOUNT ON; CREATE OR REPLACE FUNCTION [dbo].[dbo].[create_table] RETURNS TABLE AS BEGIN </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
CREATE OR REPLACE PROCEDURE [dbo].[MySchema] AS SELECT </s
select order_id from orders group by order_id having count(*) = </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE PROCEDURE [dbo].[MyProc] ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY table_name ORDER BY table_name) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY table_name ORDER BY table_name) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY TimeStamp DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT COUNT(*) </s
CREATE OR REPLACE FUNCTION [dbo].[MyTable] ( </s
</s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn </s
INSERT INTO Table1 (Column1, Column2, Column3, Column4) SELECT Column1, Column2, Column3, Column4 FROM Table1 </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date) rn </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE TRIGGER [dbo].[TransactionLog] ON [dbo].[TransactionLog] AFTER INSERT ON [dbo].[TransactionLog] AFTER UPDATE ON [dbo].[TransactionLog] AFTER DELETE ON [dbo].[TransactionLog] AFTER INSERT ON [dbo].[TransactionLog] AFTER DELETE ON [dbo].[TransactionLog] AFTER UPDATE ON [dbo].[TransactionLog] AFTER INSERT ON [dbo].[TransactionLog] AFTER DELETE ON [dbo].[TransactionLog] </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
SELECT </s
</s
DECLARE @SQL NVARCHAR(MAX) SET @SQL = 'SELECT * FROM'+ </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, - </s
SELECT </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id JOIN table9 t9 ON t1.id = </s
SELECT * FROM ( SELECT ID, ROW_NUMBER() OVER (ORDER BY ID) AS rn FROM ( SELECT ID, ROW_NUMBER() OVER (ORDER BY ID) AS rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
DECLARE @Date datetime SET @Date = DATEADD(day, -1, @Date) SELECT @Date = DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY Date DESC) rn </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) > 1 </s
</s
CREATE OR REPLACE FUNCTION [dbo].[Update] ( </s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COAL </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
CREATE TABLE table1 ( </s
;WITH CTE AS ( SELECT ID, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ROW_NUMBER() DESC) rn </s
SELECT DISTINCT </s
CREATE PROCEDURE [dbo].[Lock] AS BEGIN DECLARE @LockID INT SET @LockID = 1 SET @LockID = 2 SET @LockID = 3 SET @LockID = 4 SET @LockID = 5 SET @LockID = 6 SET @LockID = 7 SET @LockID = 8 SET @LockID = 9 SET @LockID = 10 SET @LockID = 11 </s
</s
</s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * </s
SELECT </s
</s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ @sql +'FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ @sql +'FROM'+ </s
select product_id, product_name, count(*) over (partition by product_id </s
CREATE PROCEDURE [dbo].[MyProc] ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM (SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
CREATE OR REPLACE FUNCTION [dbo].[MyTable] ( </s
select employee_id from employee where employee_id in (select employee_id </s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[create_table] RETURNS TABLE AS BEGIN INSERT INTO [dbo].[dbo].[create_table] VALUES ( </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
INSERT INTO table1 (col1, col2, col3) SELECT col1, col2, col3 FROM table2 </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, col46 </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate </s
SELECT * FROM table WHERE EXISTS ( SELECT 1 FROM table WHERE EXISTS ( SELECT 1 FROM table WHERE EXISTS ( SELECT 1 FROM table WHERE EXISTS ( SELECT 1 FROM table </s
SELECT * FROM table1 JOIN table2 ON table1.id = table2.id JOIN table3 ON table1.id = table3.id JOIN table4 ON table1.id = table4.id JOIN table5 ON table1.id = table5.id JOIN table6 ON table1.id = table6.id JOIN table7 ON table1.id = table7.id JOIN table8 ON table1.id = table8.id JOIN table9 ON table1.id = table9.id </s
declare @sql nvarchar(max) set @sql = 'CREATE OR REPLACE PROCEDURE [dbo].[MyProc] </s
SELECT COUNT(*) FROM table GROUP BY COUNT(*) </s
DECLARE @StartTime DATETIME DECLARE @EndTime DATETIME SET @StartTime = DATEADD(DAY, -1, @StartTime) SET @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartTime = DATEADD(DAY, -1, @StartTime) SELECT @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartTime = DATEADD(DAY, -1, @StartTime) SELECT @EndTime = DATEADD(DAY, -1, @EndTime) SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR(MAX </s
MERGE </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY Total DESC) AS rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
</s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
SELECT </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX </s
DECLARE @sql NVARCHAR(MAX) SET @sql = REPLACE(@sql, REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( </s
</s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(*) > 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY phone_number ORDER BY phone_number DESC) AS rn </s
</s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * </s
CREATE TABLE my_table ( </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent, child, grandchild ORDER BY parent, child </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY AccountNumber ORDER BY TransactionDate DESC) rn </s
SELECT * FROM ( SELECT ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
DELETE FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
INSERT INTO table1 (col1, col2, col3) SELECT col1, col2, col3 FROM table2 </s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[create_table] AS </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, 1, @StartDate) SET @EndDate = DATEADD(MONTH, 2, @EndDate) SET @StartDate = DATEADD(MONTH, 3, @StartDate) SET @EndDate = DATEADD(MONTH, 4, @EndDate) SET @StartDate = DATEADD(MONTH, 5, @StartDate) SET @EndDate = DATEADD(MONTH, 6 </s
<?xml version="1.0" encoding="UTF-8"?> <?xml version="1.0" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" <?xml version="1.0" encoding="UTF-8"?> <?xml version="1.1" encoding="UTF-8"?> <?xml version="1.2" encoding="UTF-8"?> <?xml version="1.3" encoding="UTF-8"?> <?xml version="1.4" </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id = t8. </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GET </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
</s
ORDER BY id DESC </s
SELECT </s
select * from ( select t.*, row_number() over (partition by id order by id) as seqnum from table t ) t where seqnum = 1; </s
SELECT DISTINCT </s
SELECT </s
CREATE TABLE mytable ( </s
SELECT DISTINCT </s
SELECT </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
select user_id from friends where not exists (select 1 from friends where user_id = friends.user_id ) </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT * FROM table1 UNION ALL SELECT * FROM table2 UNION ALL SELECT * FROM table3 UNION ALL SELECT * FROM table4 UNION ALL SELECT * FROM table5 UNION ALL SELECT * FROM table6 UNION ALL SELECT * FROM table7 </s
</s
SELECT </s
SELECT </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id </s
DELETE FROM users WHERE user_id NOT IN ( SELECT user_id FROM users UNION ALL SELECT user_id FROM users UNION ALL SELECT user_id FROM users UNION ALL SELECT user_id FROM users UNION ALL SELECT user_id FROM users UNION ALL SELECT user_id FROM users UNION ALL SELECT user_id FROM users </s
SELECT </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
</s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY priority ASC) AS rn FROM ( SELECT *, </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT user_id, user_name FROM ( SELECT user_id, user_name FROM ( SELECT </s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable </s
SELECT COUNT(DISTINCT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
SELECT </s
SELECT </s
SELECT COUNT(*) FROM posts GROUP BY COUNT(*) HAVING COUNT(*) > 1 </s
DECLARE @t TABLE ( id INT, name VARCHAR(50) ) INSERT INTO @t (id, name) SELECT id, name FROM @t UNION ALL SELECT id, name FROM @t UNION ALL SELECT id, name FROM @t UNION ALL SELECT id, name FROM @t UNION ALL SELECT id, name FROM @t UNION ALL SELECT id, name FROM @t UNION ALL SELECT id, name FROM @t UNION ALL SELECT id, name FROM @t UNION ALL SELECT id, name </s
CREATE TABLE MyTable ( </s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.id = table1.id GROUP BY table2.id HAVING COUNT(*) > 1 ) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
MERGE </s
UPDATE table1 SET column1 = CASE </s
DELETE </s
CREATE OR REPLACE PROCEDURE [dbo].[copy_table] </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
CREATE DATABASE [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[d </s
CREATE PROCEDURE ranking( </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
SELECT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
CREATE OR REPLACE FUNCTION [dbo].[Password] ( @username varchar(50), @password varchar(50) ) RETURNS VARCHAR(50) AS BEGIN SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT OFF; SET NOCOUNT ON; SET NOCOUNT OFF; SET NOCOUNT ON; SET NOCOUNT OFF; SET NOC </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT </s
CREATE TABLE mytable ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, 1, @StartDate) SET @EndDate = DATEADD(MONTH, 2, @EndDate) SET @StartDate = DATEADD(MONTH, 3, @StartDate) SET @EndDate = DATEADD(MONTH, 4, @EndDate) SET @StartDate = DATEADD(MONTH, 5, @StartDate) SET @EndDate = DATEADD(MONTH, 6, @EndDate) </s
SELECT </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
SELECT </s
SELECT </s
DELETE </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, col </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR( </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[ </s
CREATE TABLE myTable ( </s
ALTER PROCEDURE [dbo].[rename] AS BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOC </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl TABLE ( id INT IDENTITY(1,1) NOT NULL, name VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, phone VARCHAR(50) NOT NULL ) INSERT INTO @tbl (id, name, email, phone) SELECT id, name, email, phone FROM @tbl WHERE NOT EXISTS (SELECT 1 </s
</s
INSERT INTO Table1 (Column1, Column2, Column3, Column4) SELECT Column1, Column2, Column3, Column4 FROM Table1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT * FROM Table1 WHERE NOT EXISTS ( SELECT 1 FROM Table2 WHERE Table1.ID = Table2.ID AND Table1.ID NOT IN ( SELECT 1 FROM Table3 WHERE Table2.ID = Table3.ID AND Table3.ID NOT IN ( SELECT 1 FROM Table4 WHERE Table3.ID = Table4.ID AND Table4.ID NOT IN ( SELECT 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) </s
SELECT user_id, role_id FROM users GROUP BY user_id, role_id HAVING count(*) > 1 </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY TimeStamp DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, 1, @StartDate) SET @EndDate = DATEADD(MONTH, 2, @EndDate) SET @StartDate = DATEADD(MONTH, 3, @StartDate) SET @EndDate = DATEADD(MONTH, 4, @EndDate) SET @StartDate = DATEADD(MONTH, 5, @StartDate) SET @EndDate = DATEADD(MONTH, 6, @EndDate </s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(*) > 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
CREATE OR REPLACE FUNCTION ( </s
SELECT </s
SELECT </s
SELECT </s
</s
</s
</s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0) FROM ( SELECT DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(dd, DATEDIFF </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) DECLARE @result NVARCHAR(MAX) SELECT @sql = COALESCE(@sql + ', ', '') + COALESCE(@query, '') SELECT @result = COALESCE(@result + ', ', '') + COALESCE(@query, '') SELECT @sql = COALESCE(@sql + ', ', '') + COALESCE(@query, '') SELECT @result = COALESCE(@result + ', ', '') </s
CREATE PROCEDURE [dbo].[IncrementColumn] ( @ColumnName VARCHAR(50) ) AS BEGIN DECLARE @ColumnName VARCHAR(50) SET @ColumnName = 'Column1' DECLARE @ColumnName VARCHAR(50) SET @ColumnName = 'Column2' DECLARE @ColumnName VARCHAR(50) SET @ColumnName = 'Column3' DECLARE @ColumnName VARCHAR </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql + ' </s
SELECT COUNT(*) FROM mytable GROUP BY COUNT(*) HAVING COUNT(*) > 1 </s
declare @xml xml set @xml = </s
</s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id where t1.id is null </s
SELECT </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.description = t1.description and t2.status = t1.status and t2.date = t1.date and t2.user_id = t1.user_id and t2. </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
DECLARE @SessionId int DECLARE @UserId int DECLARE @SessionName varchar(50) SET @SessionId = '' SET @UserId = '' SET @SessionName = '' EXEC sp_executesql @SessionId, @UserId, @SessionName EXEC sp_executesql @SessionId, @UserId, @SessionName EXEC sp_executesql @SessionId, @UserId, @SessionName EXEC sp_executesql @SessionId, @UserId, @SessionName </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; SET @StartDate = DATEADD(DAY, -1, @StartDate); SET @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @EndDate = D </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT </s
DECLARE @xml XML = '<?xml version="1.0" encoding="UTF-8"?> <?xml version="1.0" encoding="UTF-8"?> <?xml version="1.1" encoding="UTF-8"?> <?xml version="1.2" encoding="UTF-8"?> <?xml version="1.3" encoding="UTF-8"?> <?xml version="1.4" encoding="UTF-8"?> <?xml version="1.5" encoding="UTF-8"?> <?xml version="1.6" encoding="UTF-8"?> <?xml </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY item_id ORDER BY item_id DESC) AS rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT skill_id, skills.skill_id, skills.skill_name, skills.skill_description, skills.skill_type, skills.skill_name, skills.skill_description, skills.skill_type, skills.skill_name, skills.skill_description, skills.skill_type, skills </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
CREATE PROCEDURE [dbo].[MyProc] ( </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
</s
SELECT * FROM table1 WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table1.id = table2.id AND table1.name = table2.name </s
SELECT </s
UPDATE table_name SET column_name = CASE </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
MERGE </s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; SET @StartDate = DATEADD(DAY, -1, @StartDate); SET @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @EndDate = DATEADD(DAY, -1, @ </s
DECLARE @sql NVARCHAR(MAX) = '' SET @sql = @sql + COALESCE( </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME DECLARE @StartHour DATETIME DECLARE @EndHour DATETIME SET @StartDate = DATEADD(hour, -1, @StartDate) SET @EndDate = DATEADD(hour, -1, @EndDate) SET @StartHour = DATEADD(hour, -1, @StartHour) SET @EndHour = DATEADD(hour, -1, @EndHour) SET @StartHour = DATEADD(hour, -1, </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCH </s
INSERT INTO table1 (col1, col2, col3, col4) SELECT col1, col2, col3, col4 FROM table1 </s
declare @sql nvarchar(max) set @sql = 'SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
</s
SELECT mobileNO </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.id = t1.id and t2.name = t1.name and t2.id = t1.id and t2.name = t1.name and </s
CREATE OR REPLACE PROCEDURE [dbo].[dbo].[create_metadata_link] AS BEGIN INSERT INTO [dbo].[dbo].[metadata_link] VALUES ( </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COAL </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME DECLARE @StartHour DATETIME DECLARE @EndHour DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartHour = DATEADD(DAY, -1, @StartHour) SET @EndHour = DATEADD(DAY, -1, @EndHour) SET @StartHour = DATEADD(DAY, -1, @StartHour) SET @End </s
SELECT </s
</s
SELECT </s
DELETE </s
CREATE PROCEDURE [dbo].[MyProc] ( </s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER INSERT ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] AFTER UPDATE ON [dbo].[MyTable] AFTER DELETE ON [dbo].[MyTable] </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
CREATE OR REPLACE FUNCTION [dbo].[MyTable] ( </s
SELECT </s
select * from your_table where exists ( select 1 from your_table where exists ( select 1 from your_table where exists ( select 1 from your_table where exists ( select 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
UPDATE ( SELECT </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT DISTINCT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ QUOTENAME(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(RE </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT COUNT(DISTINCT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ', </s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table ) t WHERE t.rn = 1 </s
SELECT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT COUNT(*) FROM </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR(MAX) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY ID) rn </s
DROP TABLE IF EXISTS my_table; CREATE TABLE my_table ( user_id </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @ColumnName NVARCHAR(MAX) SELECT @TableName = COALESCE(@TableName + ',', '') SELECT @ColumnName = COALESCE(@ColumnName + ',', '') SELECT @ColumnName = COALESCE(@ColumnName + ',', '') SELECT @ColumnName = COALESCE(@ColumnName + ',', '') SELECT @ColumnName = COALESCE(@ColumnName + ',', '') SELECT @ColumnName = COALESCE </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GET </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY team_id ORDER BY team_id DESC) AS rn FROM ( SELECT </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTrigger] AFTER INSERT ON [dbo].[MyTrigger] AFTER UPDATE ON [dbo].[MyTrigger] AFTER DELETE ON [dbo].[MyTrigger] AFTER DELETE_ON [dbo].[MyTrigger] AFTER UPDATE ON [dbo].[MyTrigger] AFTER DELETE_ON [dbo].[MyTrigger] AFTER INSERT ON [dbo].[MyTrigger] AFTER UPDATE ON [dbo].[MyTrigger] AFTER DELE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY area_code ORDER BY area_code DESC) AS rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY area_code ORDER BY area_code DESC) AS rn FROM ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY day ORDER BY date DESC) rn </s
</s
CREATE TABLE products ( product_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, product_name VARCHAR(50) NOT NULL, product_description VARCHAR(50) NOT NULL, product_type VARCHAR(50) NOT NULL, PRIMARY KEY (product_id), PRIMARY KEY (product_name), PRIMARY KEY (product_description), PRIMARY KEY (product_type), PRIM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM comments WHERE comment_id IN ( SELECT comment_id FROM comments GROUP BY comment_id HAVING COUNT(*) > 1 ) </s
DELETE FROM users WHERE name = 'user1'; DELETE FROM users WHERE name = 'user2'; DELETE FROM users WHERE name = 'user3'; DELETE FROM users WHERE name = 'user4'; DELETE FROM users WHERE name = 'user5'; DELETE FROM users WHERE name = 'user6'; DELETE FROM users WHERE name = 'user7'; DELETE FROM users WHERE name = 'user8'; DELETE FROM users WHERE name = 'user9'; DELETE FROM users WHERE name = 'user10'; </s
DELETE </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = N'DECLARE @sql1 NVARCHAR(MAX) SET @sql1 = N'DECLARE @sql2 NVARCHAR(MAX) SET @sql2 = N'DECLARE @sql3 NVARCHAR(MAX) SET @sql3 = N'DECLARE @sql4 NVARCHAR(MAX) SET @sql4 = N'DECLARE @sql5 NVARCHAR(MAX) SET @sql5 = N'DECLARE @sql6 NVARCHAR(MAX) SET @sql </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql +' </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM friends WHERE friend_id IN ( SELECT friend_id FROM friends WHERE friend_id IN ( </s
DELETE FROM Table1 WHERE NOT EXISTS ( SELECT 1 FROM Table2 WHERE Table2.Column1 = Table1.Column1 AND Table2.Column2 = Table1.Column2 AND Table2.Column3 = Table1.Column3 AND Table2.Column4 = Table1.Column4 AND Table2.Column5 = Table1.Column5 AND Table2.Column6 = Table1.Column6 AND Table2.Column7 = Table1.Column7 </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @Date datetime SET @Date = DATEADD(DAY, -1, @Date) SELECT @Date = DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
;WITH CTE AS ( SELECT ROW_NUMBER() OVER (ORDER BY CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT CASE WHEN ',' THEN ',' WHEN ',' THEN ',' WHEN ',' THEN ',' WHEN ',' THEN ',' WHEN ',' THEN ',' WHEN ',' THEN ',' WHEN ',' THEN ',' WHEN ',' THEN ',' </s
DELETE FROM Table1 WHERE NOT EXISTS ( SELECT 1 FROM Table2 WHERE Table2.Column1 = Table1.Column1 AND Table2.Column2 = Table1.Column2 AND Table2.Column3 = Table1.Column3 AND Table2.Column4 = Table1.Column4 AND Table2.Column5 = Table1.Column5 AND Table2.Column6 = Table1.Column6 AND Table2.Column7 = Table1.Column7 </s
WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, -1, @StartDate) SET @EndDate = DATEADD(MONTH, -1, @EndDate) SELECT @StartDate = DATEADD(MONTH, -1, @StartDate) SELECT @EndDate = DATEADD(MONTH, -1, @EndDate) SELECT @StartDate = DATEADD(MONTH, -1, @StartDate) SELECT @EndDate = DATEADD(MONTH, </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT CustomerID, OrderDate, COUNT(*) FROM Orders GROUP BY CustomerID </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table ) t WHERE t.rn = 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql +' </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @SQL NVARCHAR(MAX) SET @SQL = 'SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SET @sql = 'SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPL </s
SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) FROM ( SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(day, DATEDIFF(day, 0 </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + ' </s
CREATE INDEX </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ @sql +'FROM'+ </s
select t.* from table t group by t.id having count(distinct t.id) = (select count(distinct t.id) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT ID, COUNT(*) FROM ( SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @tbl NVARCHAR(MAX) = '' DECLARE @tbl2 NVARCHAR(MAX) = '' DECLARE @tbl3 NVARCHAR(MAX) = '' DECLARE @tbl4 NVARCHAR(MAX) = '' DECLARE @tbl1 NVARCHAR(MAX) = '' DECLARE @tbl2 NVARCHAR(MAX) = '' DECLARE @tbl3 NVARCHAR(MAX) = '' DECLARE @tbl4 NVARCHAR(MAX) = </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
import java.util.HashMap; import java.util.Hash; import java.util.HashMap; import java.util.HashMap; import java.util.HashMap; import java.util.HashMap; import java.util.HashMap; import java.util.HashMap; import java.util.HashMap; import java.util.HashMap; import java.util.HashMap; import java.util.HashMap; import java.util.HashMap; import java.util.HashMap; import java.util.HashMap; import java.util.Hash </s
SELECT * FROM ( SELECT </s
SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.col1 = table1.col1 AND table2.col2 = table1.col2 AND table2.col3 = table1.col3 AND table2.col4 = table1.col4 AND table2.col5 = table1.col5 AND table2.col6 = table1.col6 AND table2.col7 = table1. </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.city = t1.city and t2.state = t1.state and t2.zip = t1.zip and t2.city = t1.city and t2.state = t </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT * FROM Table1 UNION ALL SELECT * FROM Table2 UNION ALL SELECT * FROM Table3 UNION ALL SELECT * FROM Table4 UNION ALL SELECT * FROM Table5 UNION ALL SELECT * FROM Table6 UNION ALL SELECT * </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY *, </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTrigger] AFTER INSERT ON [dbo].[MyTrigger] AFTER UPDATE ON [dbo].[MyTrigger] AFTER DELETE ON [dbo].[MyTrigger] AFTER INSERT ON [dbo].[MyTrigger] AFTER DELETE ON [dbo].[MyTrigger] AFTER UPDATE ON [dbo].[MyTrigger] AFTER INSERT ON [dbo].[MyTrigger] AFTER DELETE ON [dbo].[ </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ @sql +'FROM'+ </s
UPDATE table1 SET column1 = column2 FROM table1 INNER JOIN table2 ON table1.column1 = table2.column1 WHERE table1.column2 = table2.column2 </s
select customer_id from ( select customer_id, row_number() over (partition by customer_id </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
SELECT </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY word ORDER BY word </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn FROM table ) t WHERE t.rn = 1 </s
DECLARE @datetime DATETIME SET @datetime = '2014-01-01 00:00:00' SELECT @datetime = '2014-01-01 00:00:00' SELECT @datetime = '2014-02-01 00:00:00' SELECT @datetime = '2014-03-01 00:00:00' SELECT @datetime = '2014-04-01 00:00:00' SELECT @datetime = '2014-05-01 00:00:00' SELECT @datetime = '2014-06-01 00: </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO MyTable (MyColumn) VALUES (@sql);' EXEC sp_executesql @sql </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
SELECT * FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id INNER JOIN table4 t4 ON t1.id = t4.id INNER JOIN table5 t5 ON t1.id = t5.id INNER JOIN table6 t6 ON t1.id = t6.id INNER JOIN table7 t7 ON t1.id = t7.id INNER JOIN table8 t8 ON t1.id = t8 </s
CREATE TABLE IF NOT EXISTS [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[ </s
INSERT INTO my_table (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42 </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY column </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX) DECLARE @tbl10 </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
select t1.id, t2.id, t3.id, t4.id, t5.id, t6.id, t7.id, t8.id, t9.id, t10.id, t11.id, t12.id, t13.id, t14.id, t15.id, </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
SELECT </s
SELECT * FROM #tempTable1 </s
CREATE OR REPLACE PROCEDURE [dbo].[create_table] AS BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON </s
SELECT </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @ColumnName NVARCHAR(MAX) DECLARE @SQL NVARCHAR(MAX) SET @SQL = 'SELECT </s
SELECT </s
SELECT * FROM MyTable WHERE NOT EXISTS (SELECT 1 FROM MyTable WHERE NOT EXISTS (SELECT 1 </s
CREATE OR REPLACE FUNCTION [dbo].[FEDERATION_SWITCH] ( </s
select t1.* from table1 t1 join table2 t2 on t1.col1 = t2.col1 and t1.col2 = t2.col2 and t2.col3 = t1.col3 and t2.col4 = t1.col4 and t2.col5 = t1.col5 and t2.col6 = t1.col </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + CO </s
CREATE OR REPLACE TRIGGER wallet_change BEFORE INSERT OR UPDATE ON wallet FOR EACH ROW BEGIN INSERT INTO wallet_change VALUES ( </s
SELECT </s
DECLARE @sql NVARCHAR(MAX); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); </s
</s
DELETE FROM Table1 WHERE NOT EXISTS (SELECT 1 FROM Table2 WHERE Table2.Column1 = Table1.Column1 AND Table2.Column2 = Table1.Column2 </s
CREATE OR REPLACE FUNCTION [dbo].[ConnectionPool] ( </s
SELECT </s
SELECT </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql +' </s
SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) FROM (SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), DATEADD(day, DATEDIFF(day, 0, GETDATE())) </s
CREATE PROCEDURE [dbo].[MyProc] ( @param1 varchar(100), @param2 varchar(100), @param3 varchar(100), @param4 varchar(100), @param5 varchar(100), @param6 varchar(100), @param7 varchar(100), @param8 varchar(100), @param9 varchar(100), </s
</s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT </s
</s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY [Date] ORDER BY [Date] DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
declare @sql nvarchar(max) set @sql ='select * from [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo </s
CREATE OR REPLACE FUNCTION </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
CREATE OR REPLACE FUNCTION [dbo].[Update] ( </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE WHEN CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHAR </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3. </s
</s
</s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'CREATE TABLE IF NOT EXISTS'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COAL </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( </s
DELETE </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM </s
</s
SELECT </s
SELECT </s
select t1.id, t2.id, t3.id, t4.id, t5.id, t6.id, t7.id, t8.id, t9.id, t10.id, t11.id, t12.id, t13.id, t14.id, t15.id, </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table ) t WHERE t.rn = 1 </s
select count(distinct imagepath) from images group by imagepath having count(distinct imagepath) = (select count(distinct imagepath) </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SET @sql = 'SELECT * FROM </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, 1, GETDATE()) SET @EndDate = DATEADD(MONTH, 2, GETDATE()) SELECT @StartDate = DATEADD(MONTH, 1, GETDATE()) SELECT @EndDate = DATEADD(MONTH, 2, GETDATE()) SELECT @StartDate = DATEADD(MONTH, 3, GETDATE()) SELECT @EndDate = DATEADD(MONTH, 4, GETDATE </s
select t1.* from table1 t1 left join table2 t2 on t1.ID = t2.ID group by t1.ID; </s
CREATE OR REPLACE FUNCTION [dbo].[Test] ( </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(year, -1, @StartDate) SET @EndDate = DATEADD(year, -1, @EndDate) SELECT @StartDate = DATEADD(year, -1, @StartDate) SELECT @EndDate = DATEADD(year, -1, @EndDate) SELECT @StartDate = DATEADD(year, -1, @StartDate) SELECT @EndDate = DATEADD(year, - </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
SELECT COUNT(DISTINCT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
<?xml version="1.0" encoding="UTF-8"?> <?xml version="1.0" encoding="UTF-8"?> <?xml version="1.1" encoding="UTF-8"?> <?xml version="1.2" encoding="UTF-8"?> <?xml version="1.3" encoding="UTF-8"?> <?xml version="1.4" encoding="UTF-8"?> <?xml version="1.5" encoding="UTF-8"?> <?xml version="1.6" encoding="UTF-8"?> <?xml version=" </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
</s
SELECT COUNT(DISTINCT category_id) FROM categories GROUP BY category_id HAVING COUNT(DISTINCT category_id) > 1 </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL </s
SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( SELECT COUNT(*) </s
SELECT * FROM table WHERE EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
SELECT </s
</s
INSERT INTO table (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42 </s
SELECT colA, colB, colC, colD, colE, colF, colG, colH, colI, colJ, colK, colL, colM, colN, colO, col </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE WHEN CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_LENGTH(CHARACTER_L </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3) VALUES (' + </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ REPLACE(@sql, '#', '') +'FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
</s
SELECT CASE WHEN ',' THEN ',' WHEN ',' THEN ',' WHEN ',' THEN ',' WHEN ',' THEN ',' WHEN ',' THEN ',' WHEN ',' THEN ',' WHEN ',' THEN ',' ELSE ',' </s
SELECT </s
DECLARE @t TABLE ( ID INT IDENTITY(1,1) NOT NULL, Name VARCHAR(50) NOT NULL, Description VARCHAR(50) NOT NULL ) INSERT INTO @t (ID, Name, Description) SELECT ID, Name, Description FROM @t UNION ALL SELECT ID, Name, Description FROM @t UNION ALL SELECT ID, Name, Description FROM @t UNION ALL SELECT ID, Name, Description FROM @t UNION ALL SELECT ID </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( </s
SELECT </s
select * from ( select t.*, row_number() over (partition by id order by id) as seqnum from table t ) t where seqnum = 1; </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
CREATE TABLE my_table ( </s
SELECT </s
SELECT </s
SELECT * FROM table1 WHERE NOT EXISTS ( SELECT * FROM table2 WHERE table1.id = table2.id ) </s
SELECT </s
SELECT </s
SELECT </s
CREATE OR REPLACE FUNCTION [dbo].[AutoIncrement] ( @AutoIncrement int ) RETURNS TABLE AS BEGIN INSERT INTO [dbo].[AutoIncrement] (AutoIncrement) SELECT AutoIncrement FROM [dbo].[AutoIncrement] WHERE [dbo].[AutoIncrement] = @AutoIncrement END RETURN @AutoIncrement AS BEGIN INSERT INTO [dbo].[AutoIncrement] ( </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(hour, -1, @StartDate) SET @EndDate = DATEADD(hour, -1, @EndDate) SELECT @StartDate = DATEADD(hour, -1, DATEADD(hour, -1, DATEADD(hour, -1, DATEADD(hour, -1, DATEADD(hour, -1, DATEADD(hour, -1, DATEADD(hour, -1, DATEADD(hour </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.col1 = table1.col1 AND table2.col2 = table1.col2 AND table2.col3 = table1.col3 AND table2.col4 = table1.col4 AND table2.col5 = table1.col5 AND table2.col6 = table1.col6 AND table2.col7 = table1 </s
SELECT </s
CREATE OR REPLACE PROCEDURE [dbo].[schema_name] AS </s
SELECT </s
DECLARE @username varchar(50) SET @username = </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
CREATE OR REPLACE PROCEDURE [dbo].[MyTable] AS </s
SELECT * FROM ( SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table UNION ALL SELECT * FROM table </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR( </s
</s
SELECT </s
CREATE OR REPLACE PROCEDURE [dbo].[prepare_table] AS BEGIN INSERT INTO [dbo].[prepare_table] (col1, col2, col3) SELECT col1, col2, col3 FROM [dbo].[prepare_table] UNION ALL SELECT col1, col2, col3 FROM [dbo].[prepare_table] UNION ALL SELECT col1, col2, col3 FROM [dbo].[prepare_table </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43 </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM </s
UPDATE ( SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + </s
</s
SELECT field_name FROM ( SELECT field_name FROM table GROUP BY field_name HAVING COUNT(*) > 1 </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DELETE FROM tbl WHERE NOT EXISTS ( SELECT 1 FROM tbl WHERE NOT EXISTS ( SELECT 1 FROM tbl WHERE NOT EXISTS ( SELECT 1 FROM tbl WHERE NOT EXISTS ( SELECT 1 FROM tbl WHERE NOT EXISTS ( SELECT 1 FROM tbl WHERE NOT EXISTS ( SELECT 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
CREATE OR REPLACE FUNCTION explode_user_id ( </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT * FROM ( SELECT ID, ROW_NUMBER() OVER (ORDER BY ID) AS rn FROM ( SELECT ID, ROW_NUMBER() OVER (ORDER BY ID) AS rn FROM </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, col46, col </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, col46 </s
SELECT MONTHS_BETWEEN </s
SELECT </s
SELECT * FROM ( SELECT catalog_id, catalog_name, ROW_NUMBER() OVER (PARTITION BY catalog_id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT DISTINCT </s
SELECT </s
CREATE OR REPLACE FUNCTION [dbo].[upload] ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT </s
SELECT </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
declare @sql nvarchar(max) set @sql ='rename table'+ </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY word ORDER BY word) rn </s
IF NOT EXISTS (SELECT * </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COAL </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, </s
SELECT DATE_FORMAT(DATE, '%Y-%m-%d %H:%i:%s') FROM ( SELECT DATE_FORMAT(DATE, '%Y-%m-%d %H:%i:%s') UNION ALL SELECT DATE_FORMAT(DATE, '%Y-%m-%d %H:%i:%s') UNION ALL SELECT DATE_FORMAT(DATE, '%Y-%m-%d %H:%i </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT DATEADD(hh, DATEDIFF(hh, 0, GETDATE()), DATEADD(mm, DATEDIFF(mm, 0, GETDATE()), 0)) </s
SELECT </s
SET ALLOW_SNAPSHOT_ISOLATION ON SET ALLOW_SNAPSHOT_ISOLATION ON SET ALLOW_SNAPSHOT_ISOLATION ON SET ALLOW_SNAPSHOT_ISOLATION ON SET ALLOW_SNAPSHOT_ISOLATION ON SET ALLOW_SNAPSHOT_ISOLATION ON SET ALLOW_SNAPSHOT_ISOLATION ON SET ALLOW_SNAPSHOT_ISOLATION ON SET ALLOW_SNAPSHOT </s
UPDATE table_name SET column_name = REPLACE(column_name, ',', '') </s
SELECT </s
SELECT * FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.table1_id INNER JOIN table3 t3 ON t1.id = t3.table1_id INNER JOIN table4 t4 ON t1.id = t4.table1_id INNER JOIN table5 t5 ON t1.id = t5.table1_id INNER JOIN table6 t6 ON t1.id = t6.table1_id INNER JOIN table7 t7 ON t1.id = t7.table1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT country_code FROM table WHERE country_code NOT IN ( SELECT country_code FROM table WHERE country_code NOT IN ( SELECT country_code FROM table WHERE country_code NOT IN ( SELECT country_code FROM table WHERE country_code NOT IN ( SELECT country_code </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
DECLARE @Comment NVARCHAR(MAX) DECLARE @Parent NVARCHAR(MAX) DECLARE @Comments NVARCHAR(MAX) DECLARE @Comments_Parent NVARCHAR(MAX) DECLARE @Comments_Parent2 NVARCHAR(MAX) DECLARE @Comments_Parent3 NVARCHAR(MAX) DECLARE @Comments_Parent4 NVARCHAR(MAX) DECLARE @Comments_Parent5 NVARCHAR(MAX) DECLARE @Comments_Parent6 NVARCHAR(MAX) DECL </s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * </s
SELECT </s
SELECT </s
</s
</s
</s
SELECT </s
SELECT </s
</s
SELECT * FROM Table1 WHERE NOT EXISTS ( SELECT 1 FROM Table2 WHERE Table1.ID = Table2.ID AND Table1.ID NOT IN ( SELECT 1 FROM Table3 WHERE Table3.ID = Table2.ID AND Table3.ID NOT IN ( SELECT 1 FROM Table4 WHERE Table4.ID = Table2.ID AND Table4.ID NOT IN ( SELECT 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT </s
CREATE TABLE mytable ( </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DELETE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
CREATE OR REPLACE FUNCTION [dbo].[select] </s
SELECT </s
DELETE </s
SELECT </s
SELECT </s
CREATE INDEX my_index ON my_table </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(week, -1, @StartDate) SET @EndDate = DATEADD(week, -1, @EndDate) SELECT @StartDate = DATEADD(week, -1, DATEADD(week, -1, DATEADD(week, -1, DATEADD(week, -1, DATEADD(week, -1, DATEADD(week, -1, DATEADD(week, - </s
SELECT </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = N'SELECT * FROM table2' select @sql = N'SELECT * FROM table3' select @sql = N'SELECT * FROM table4' select @sql = N'SELECT * FROM table5' select @sql = N'SELECT * FROM table6' select @sql = N'SELECT * FROM table7' select @sql = N'SELECT * FROM table8' select @sql = N'SELECT * FROM table9' select @sql = N'SELECT * FROM table10 </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table2 WHERE table2.id = table1.id GROUP BY table2.id HAVING COUNT(*) > 1 ) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at DESC) AS rn FROM my_table ) t WHERE rn = 1 </s
CREATE TRIGGER [dbo].[update_table] ON [dbo].[TableName] AFTER UPDATE ON [dbo].[TableName] FOR EACH ROW AS BEGIN INSERT INTO [dbo].[TableName] VALUES ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn FROM ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT </s
</s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table ) t WHERE t.rn = 1 </s
</s
</s
</s
SELECT </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM </s
CREATE OR REPLACE PROCEDURE [dbo].[MyTable] AS </s
CREATE UNIQUE INDEX , </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SELECT @sql = COALESCE(@sql + ' </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) > 1 </s
CREATE OR REPLACE FUNCTION [dbo].[TableType] ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table2 </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
CREATE UNIQUE INDEX ( </s
</s
declare @sql nvarchar(max) set @sql ='select * from table1 where id in (select id from table2 where id in (select id from table3 where id in (select id from table4 where id in (select id from table5 where id in (select id from table6 where id in (select id from table7 where id in (select id from table8 where id in (select id from table9 where id in (select id from table10 where id in (select id from table11 where id in (select id from table12 where id in (select id from table13 where id in (select id from table14 where id </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table1 GROUP BY id HAVING COUNT(*) > 1 ) t WHERE rn = 1 </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY ID) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME DECLARE @StartTime DATETIME DECLARE @EndTime DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartTime = DATEADD(DAY, -1, @StartTime) SET @EndTime = DATEADD(DAY, -1, @EndTime) SET @StartDate = DATEADD(DAY, -1, @StartDate) </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @sql2 NVARCHAR(MAX) = '' DECLARE @sql3 NVARCHAR(MAX) = '' DECLARE @sql4 NVARCHAR(MAX) = '' DECLARE @sql5 NVARCHAR(MAX) = '' DECLARE @sql6 NVARCHAR(MAX) = '' DECLARE @sql7 NVARCHAR(MAX) = '' DECLARE @sql8 NVARCHAR(MAX) = '' DECLARE @sql9 NVARCHAR(MAX) = '' DECLARE @sql10 NV </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
select * from ( select t.*, row_number() over (partition by t.id order by t.id) as seqnum from t ) t where seqnum = 1; </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM ( </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( </s
</s
SELECT </s
DELETE </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = D </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT DISTINCT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
</s
</s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
SELECT </s
UPDATE table_name SET column_name = CASE WHEN column_name IS NULL THEN column_name ELSE column_name END, column_name = CASE WHEN column_name IS NOT NULL THEN column_name ELSE column_name END, column_name = CASE WHEN column_name IS NOT NULL THEN column_name ELSE column_name END, column_name = CASE WHEN column_name IS NOT NULL THEN column_name ELSE column_name END, column_name = CASE WHEN column_name IS NOT NULL THEN column_name ELSE column_name </s
SELECT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
SELECT Year, Month, Day FROM ( SELECT Year, Month, Day FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
UPDATE table1 SET column1 = ( SELECT column1 FROM table2 WHERE table2.column1 = table1.column1 UNION ALL SELECT column1 FROM table3 WHERE table3.column1 = table1.column1 UNION ALL SELECT column1 FROM table4 WHERE table4.column1 = table1.column1 UNION ALL SELECT column1 FROM table5 </s
DECLARE @StartTime datetime DECLARE @EndTime datetime SET @StartTime = DATEADD(DAY, -1, @StartTime) SET @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartTime = DATEADD(DAY, -1, @StartTime) SELECT @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartTime = DATEADD(DAY, -1, @StartTime) SELECT @EndTime = DATEADD(DAY, -1, @EndTime) </s
</s
SELECT </s
CREATE PROCEDURE [dbo].[MyProcedure] ( @MyProcedureID int, @MyProcedureName varchar(50), @MyProcedureDescription varchar(50) ) AS BEGIN SET @MyProcedureID = @MyProcedureID + 1 SET @MyProcedureName = @MyProcedureName +'' + @MyProcedureDescription SET @MyProcedureDescription = @MyProcedure </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.col1 = table1.col1 AND table2.col2 = table1.col2 </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
</s
CREATE UNIQUE INDEX </s
</s
</s
SELECT </s
CREATE OR REPLACE FUNCTION AUTO_INCREMENT ( </s
CREATE OR REPLACE PROCEDURE [dbo].[MyProcedure] AS AS </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR(MAX </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT CASE </s
SELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) </s
SELECT * FROM table1 WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table1.id = table2.id AND table1.name = table2.name </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
</s
CREATE UNIQUE INDEX guid_guid ON guid (guid); CREATE UNIQUE INDEX guid_guid2 ON guid (guid2); CREATE UNIQUE INDEX guid_guid3 ON guid (guid3); CREATE UNIQUE INDEX guid_guid4 ON guid (guid4); CREATE UNIQUE INDEX guid_guid5 ON guid (guid5); CREATE UNIQUE INDEX guid_guid6 ON guid (guid6); CREATE UNIQUE INDEX guid_guid7 ON guid (guid </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col </s
</s
SELECT COUNT(DISTINCT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY address ORDER BY address DESC) AS rn </s
SELECT </s
INSERT INTO table (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col </s
SELECT COUNT(DISTINCT </s
select manager_id from ( select manager_id union all select manager_id union all select manager_id union all select manager_id union all select manager_id union all select manager_id union all select manager_id union all select manager_id union all select manager_id union all select manager_id union all select manager_id union all select manager_id union all select manager_id union all select manager_id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
<?xml version="1.0" encoding="utf-8"?> <xml version="1.0" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaType="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2001/XML </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT t1.id, t2.id, t3.id, t4.id, t5.id, t6.id, t7.id, t8.id, t9.id, </s
SELECT COUNT(*) FROM ( SELECT RANK() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( SELECT id, </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44 </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT DISTINCT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME DECLARE @StartHour DATETIME DECLARE @EndHour DATETIME DECLARE @StartMinutes DATETIME DECLARE @EndMinutes DATETIME SET @StartDate = DATETIME SET @EndDate = DATETIME SET @StartHour = DATETIME SET @EndHour = DATETIME SET @StartMinutes = DATETIME SET @EndMinutes = DATETIME </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3) VALUES (' + </s
INSERT INTO table1 (col1, col2, col3, col4) SELECT col1, col2, col3, col4 FROM table1 </s
CREATE PROCEDURE [dbo].[MyProc] ( @param1 varchar(100), @param2 varchar(100), @param3 varchar(100), @param4 varchar(100), @param5 varchar(100), @param6 varchar(100), @param7 varchar(100), @param8 varchar(100), @param9 varchar(100), @ </s
DELETE FROM Table1 WHERE NOT EXISTS ( SELECT 1 FROM Table2 WHERE Table2.Column1 = Table1.Column1 AND Table2.Column2 = Table1.Column2 AND Table2.Column3 = Table1.Column3 AND Table2.Column4 = Table1.Column4 AND Table2.Column5 = Table1.Column5 AND Table2.Column6 = Table1.Column6 AND Table2.Column7 = Table1.Column </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY message_id ORDER BY message_id) rn FROM messages WHERE message_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38 </s
CREATE OR REPLACE FUNCTION [dbo].[create_database] ( </s
UPDATE mytable SET mycolumn = CASE </s
CREATE OR REPLACE FUNCTION [dbo].[Check] ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @StartTime DATETIME DECLARE @EndTime DATETIME SET @StartTime = DATEADD(DAY, -1, @StartTime) SET @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartTime = DATEADD(DAY, -1, @StartTime) SELECT @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartTime = DATEADD(DAY, -1, @StartTime) SELECT @EndTime = DATEADD(DAY, -1, @EndTime) SELECT </s
CREATE PROCEDURE [dbo].[MyProc] ( @param1 int, @param2 int, @param3 int, @param4 int, @param5 int, @param6 int, @param7 int, @param8 int, @param9 int, @param10 int, @param11 int, @param12 int, @param13 int, @param14 int, </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE WHEN </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SET @sql = 'INSERT INTO mytable (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, </s
SELECT col1 FROM table </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT CASE </s
SELECT </s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.col1 = table1.col1 AND table2.col2 = table1.col2 AND table2.col3 = table1.col3 AND table2.col4 = table1.col4 AND table2.col5 = table1.col5 AND table2.col6 = table1.col6 AND table2.col7 = table </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
INSERT INTO table1 (col1, col2, col3) SELECT col1, col2, col3 FROM table2 </s
</s
CREATE TRIGGER [dbo].[table_name] ON [dbo].[table_name] BEFORE INSERT ON [dbo].[table_name] FOR EACH ROW BEGIN UPDATE [dbo].[table_name] SET [dbo].[table_name] = [dbo].[table_name] + 1 WHERE [dbo].[table_name] = [dbo].[table_name] + 1 AND [dbo].[table_name] </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY </s
SELECT </s
CREATE OR REPLACE FUNCTION [dbo].[MyTable] ( </s
</s
DECLARE @Date datetime SET @Date = DATEADD(DAY, -1, GETDATE()) SELECT @Date = DATEADD(DAY, -1, GETDATE()) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @ </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql VARCHAR(MAX) SET @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2; </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
<?xml version="1.0" encoding="UTF-8"?> <?xml version="1.0" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2001/XMLSchema-instance" </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE UNIQUEIDENTIFIER </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ CO </s
SELECT </s
DECLARE @t TABLE ( id INT IDENTITY(1,1) NOT NULL, name VARCHAR(50) NOT NULL, description VARCHAR(50) NOT NULL ) INSERT INTO @t (id, name, description) SELECT id, name, description FROM @t UNION ALL SELECT id, name, description FROM @t UNION ALL SELECT id, name, description FROM @t UNION ALL SELECT id, name, description FROM @t UNION ALL SELECT id, name, description FROM @t </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
CREATE TABLE myTable ( </s
SELECT </s
SELECT * FROM mytable WHERE NOT EXISTS ( SELECT 1 FROM mytable WHERE NOT EXISTS ( SELECT 1 FROM mytable WHERE NOT EXISTS ( SELECT 1 FROM mytable WHERE NOT EXISTS ( SELECT 1 </s
DELETE FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.description = t1.description group by t1.id, t1.name, t1.description; </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY TimeStamp DESC) rn </s
IF EXISTS (SELECT 1 FROM sys.database_names WHERE sys.database_name = @database_name AND sys.database_type = 'database' </s
SELECT </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
SELECT </s
</s
SELECT t1.name, t2.name FROM table1 t1 INNER JOIN table2 t2 ON t1.name = t2.name ORDER BY t1.name </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
MERGE </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO MyTable (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( </s
</s
CREATE PROCEDURE [dbo].[MyProc] AS BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
IF EXISTS (SELECT * </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
CREATE PROCEDURE [dbo].[MyProc] ( @param1 int, @param2 int, @param3 int, @param4 int, @param5 int, @param6 int, @param7 int, @param8 int, @param9 int, @param10 int, @param11 int, @param12 int, @param13 int, </s
</s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; SET @StartDate = DATEADD(DAY, -1, @StartDate); SET @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @EndDate = DATEADD(DAY, -1, @EndDate); </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
DECLARE @Date DATETIME, </s
UPDATE table1 SET column1 = CASE </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(year, -1, @StartDate) SET @EndDate = DATEADD(year, -1, @EndDate) SELECT @StartDate = DATEADD(year, -1, @StartDate) SELECT @EndDate = DATEADD(year, -1, @EndDate) SELECT @StartDate = DATEADD(year, -1, @StartDate) SELECT @EndDate = DATEADD(year, -1 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @Start </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.id = table1.id GROUP BY table2.id HAVING COUNT(*) > 1 ) </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
select tag_id, count(*) as tag_count from tags group by tag_id having count(*) > 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT DISTINCT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) </s
SELECT </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @ColumnName NVARCHAR(MAX) SET @TableName = 'Table1' SET @ColumnName = 'Column1' SET @ColumnName = 'Column2' SET @ColumnName = 'Column3' SET @ColumnName = 'Column4' SET @ColumnName = 'Column5' SET @ColumnName = 'Column6' SET @ColumnName = 'Column7' SET @ColumnName = 'Column8' SET @ColumnName = 'Column9' </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.description = t1.description and </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql +' </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Id ORDER BY Id) rn </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id WHERE NOT EXISTS (SELECT 1 FROM table1 WHERE t2.id = t3.id </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id = t8.id </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCH </s
</s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn </s
DECLARE @sql NVARCHAR(MAX); INSERT INTO @sql ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
select regexp_replace( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( </s
SELECT * FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id WHERE t1.id IS NULL </s
DECLARE @sql NVARCHAR(MAX) SET @sql = </s
UPDATE table1 t1 SET t1.id = t2.id FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT COUNT(DISTINCT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
select t.* from (select t.*, row_number() over (partition by t.*, </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
</s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
DECLARE @Table TABLE ( </s
SELECT DISTINCT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @ColumnName NVARCHAR(MAX) DECLARE @SQL NVARCHAR(MAX) SET @SQL = 'CREATE TABLE'+ @TableName +'( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM ( SELECT CHAR(10) FROM ( SELECT CHAR(10) </s
DELETE FROM ( SELECT ID, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT * FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DELETE </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id </s
SELECT </s
SELECT COUNT(*) FROM table WHERE exists ( SELECT 1 FROM table WHERE exists ( SELECT 1 FROM table WHERE exists ( SELECT 1 FROM table WHERE exists ( SELECT 1 </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.date = t2.date and t2.id = t1.id and t2.date = t1.date and t1.id = t2.id and t2.date = t1.date and </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
</s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR(MAX </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1,col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,col14,col15,col16,col17,col18,col19,col20,col21,col22,col23,col24,col25,col26,col27,col28,col29,col30,col31,col32,col33,col34,col35,col36,col37,col38,col39, </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn FROM ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR(MAX </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @Date datetime SET @Date = DATEADD(DAY, -1, GETDATE()) SELECT @Date = DATEADD(DAY, -1, GETDATE()) SELECT @Date = DATEADD(DAY, -2, GETDATE()) SELECT @Date = DATEADD(DAY, -3, GETDATE()) SELECT @Date = DATEADD(DAY, -4, GETDATE()) SELECT @Date = DATEADD(DAY, -5, GETDATE()) SELECT @Date = DATEADD(DAY, -6, GETDATE()) SELECT @ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.col1 = table1.col1 AND table2.col2 = table1.col2 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
SELECT </s
CREATE TRIGGER [dbo].[Trigger] ON [dbo].[TableName] FOR EACH ROW BEGIN INSERT INTO [dbo].[TableName] VALUES ( </s
SELECT COUNT(DISTINCT </s
</s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.table1_id INNER JOIN table3 t3 ON t1.id = t3.table1_id INNER JOIN table4 t4 ON t1.id = t4.table1_id INNER JOIN table5 t5 ON t1.id = t5.table1_id INNER JOIN table6 t6 ON t1.id = t6.table1_id INNER JOIN table7 t7 ON t1.id = </s
select t1.* from table1 t1 inner join table2 t2 on t1.date = t2.date group by t1.date </s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.id = table1.id GROUP BY table2.id HAVING COUNT(*) > 1 ) </s
INSERT INTO table1 (id, primary_key) SELECT id FROM table2 </s
ALTER PROCEDURE [dbo].[update_table] </s
CREATE TABLE my_table ( </s
INSERT INTO table1 (col1, col2, col3, col4) SELECT col1, col2, col3, col4 FROM table1 </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DELETE </s
</s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table2 WHERE table2.column1 = table1.column1 AND table2.column2 = table1.column2 AND table2.column3 = table1.column3 AND table2.column4 = table1.column4 AND table2.column5 = table1.column5 AND table2.column6 = table1.column6 AND table2.column7 = table1 </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY PersonID </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'INSERT INTO'+ </s
SELECT </s
INSERT INTO table (col1,col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,col14,col15,col16,col17,col18,col19,col20,col21,col22,col23,col24,col25,col26,col27,col28,col29,col30,col31,col32,col33,col34,col35,col36,col37,col38,col39,col40,col41,col42,col43,col44,col45,col </s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @tbl NVARCHAR(MAX) = '' DECLARE @tbl2 NVARCHAR(MAX) = '' DECLARE @tbl3 NVARCHAR(MAX) = '' DECLARE @tbl4 NVARCHAR(MAX) = '' DECLARE @tbl1 NVARCHAR(MAX) = '' DECLARE @tbl2 NVARCHAR(MAX) = '' DECLARE @tbl3 NVARCHAR(MAX) = '' DECLARE @tbl4 NVARCHAR(MAX) = '' </s
SELECT </s
</s
SELECT </s
</s
SET NOCOUNT ON; CREATE PROCEDURE [dbo].[MyTable] </s
SELECT * FROM Table1 WHERE NOT EXISTS ( SELECT 1 FROM Table2 WHERE Table2.Column1 = Table1.Column1 AND Table2.Column2 = Table1.Column2 AND Table2.Column3 = Table1.Column3 AND Table2.Column4 = Table1.Column4 AND Table2.Column5 = Table1.Column5 AND Table2.Column6 = Table1.Column6 AND Table2.Column7 = Table1.Column </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY start_time DESC) rn OVER (PARTITION BY start_time DESC) rn </s
select t.* from (select t.*, row_number() over (partition by id order by timestamp desc) as seqnum from table t ) t where seqnum = 1; </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, </s
CREATE PROCEDURE [dbo].[DeleteDuplicates] AS BEGIN EXECUTE IMMEDIATE [dbo].[DeleteDuplicates] EXECUTE IMMEDIATE [dbo].[DeleteDuplicates] EXECUTE IMMEDIATE [dbo].[DeleteDuplicates] EXECUTE IMMEDIATE [dbo].[DeleteDuplicates] EXECUTE IMMEDIATE [dbo].[DeleteDuplicates] EXECUTE IMMEDIATE [ </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY StartTime DESC) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn </s
DELETE FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at DESC) rn FROM ( SELECT user_id, created_at FROM ( </s
</s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCH </s
SELECT </s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT COUNT(*) FROM MyTable GROUP BY COUNT(*) HAVING COUNT(*) > 1 </s
CREATE VIEW my_view AS SELECT * FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
</s
</s
CREATE PROCEDURE [dbo].[create_program] AS BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
<?xml version="1.0" encoding="UTF-8"?> <?xml version="1.0" xmlns="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsi++http://www.w3.org/2001/XMLSchema-instance++http://www.w3.org/2001/XMLSchema-instance++http://www.w3.org/2001/XMLSchema-instance++http://www.w3.org/2001 </s
select user_id, user_name, count(*) over (partition by user_id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX) </s
SELECT </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE WHEN CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARINDEX(' ', CHARIND </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'CREATE TABLE'+ </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY A, B ORDER BY B) AS rn FROM Table1 ) A WHERE rn = 1 </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY created_at DESC) AS rn </s
SELECT </s
select t.*, count(*) over (partition by id order by id) as cnt from (select t.*, row_number() over (partition by id order by id) as seqnum from t ) t where seqnum = 1; </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
django.db.models.fields.CharField(max_length=100) = CharField(max_length=100) </s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn FROM ( </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT ID, COUNT(*) FROM ( SELECT </s
select id from (select id </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
declare @sql nvarchar(max) set @sql = 'SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE OR REPLACE PROCEDURE [dbo].[MyTable] AS </s
SELECT * FROM messages WHERE thread_id IN ( SELECT thread_id FROM messages GROUP BY thread_id HAVING COUNT(*) > 1 ) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
UPDATE ( SELECT ROW_NUMBER() OVER (PARTITION BY </s
</s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
UPDATE table1 SET column1 = column2 FROM table1 LEFT JOIN table2 ON table1.id = table2.id </s
DELETE </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id </s
#!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh #!/bin/sh </s
DELETE t1 FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id JOIN table9 t9 ON t1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table ) t WHERE t.rn = 1 </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
SELECT </s
SELECT </s
CREATE OR REPLACE FUNCTION get_last_update_time() RETURNS datetime AS BEGIN DECLARE @last_update_time DATETIME SET @last_update_time = DATEADD(DAY, -1, GETDATE()) SET @last_update_time = DATEADD(DAY, -2, GETDATE()) SET @last_update_time = DATEADD(DAY, -3, GETDATE()) SET @last_update_time = DATEADD(DAY, - </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
</s
</s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, </s
</s
</s
DECLARE @sql NVARCHAR(MAX); SELECT @sql = COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@ </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT </s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[CheckCommitted] ( </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table ) t WHERE rn = 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT * FROM ( SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
UPDATE Table1 SET Table1.Column1 = Table2.Column1 FROM Table1 INNER JOIN Table2 ON Table1.Column2 = Table2.Column2 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -24, @StartDate) SET @EndDate = DATEADD(DAY, -24, @EndDate) SELECT @StartDate = DATEADD(DAY, -24, @StartDate) SELECT @EndDate = DATEADD(DAY, -24, @EndDate) SELECT @StartDate = DATEADD(DAY, -24, @StartDate) SELECT @EndDate = DATEADD(DAY, -24, @EndDate) SELECT </s
SELECT </s
SELECT * FROM table1 WHERE NOT EXISTS ( SELECT * FROM table2 WHERE table1.id = table2.id ) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY billingtime DESC) rn ROW_NUMBER() OVER (PARTITION BY billingtime ORDER BY billingtime DESC) rn </s
</s
DECLARE @t TABLE ( id INT IDENTITY(1,1) NOT NULL, name VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL ) INSERT INTO @t (id, name, email) SELECT id, name, email FROM ( SELECT id, name, email UNION ALL SELECT id, name, email UNION ALL SELECT id, name, email UNION ALL </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + ' </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY </s
SELECT * FROM table WHERE EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, - </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT COUNT(DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT employee_id, department_id FROM employee WHERE department_id NOT IN ( SELECT department_id FROM department WHERE employee_id NOT IN ( SELECT employee_id FROM employee WHERE department_id NOT IN ( SELECT department_id FROM department WHERE employee_id NOT IN ( SELECT employee_id FROM employee WHERE department_id NOT IN ( SELECT employee_id FROM </s
SELECT </s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY table_name ORDER BY created_at DESC) rn </s
</s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DELETE FROM table WHERE var NOT IN ( </s
</s
SELECT </s
CREATE TRIGGER my_trigger AFTER INSERT ON my_table BEFORE INSERT ON my_table FOR EACH ROW BEGIN UPDATE my_table SET my_column = CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
UPDATE Table1 SET Table1.Column1 = Table2.Column1 FROM Table1 INNER JOIN Table2 ON Table1.Column2 = Table2.Column2 </s
</s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM </s
</s
DECLARE @sql NVARCHAR(MAX); SELECT @sql = COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALES </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql + ' </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT DISTINCT </s
UPDATE </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT * FROM Table1 GROUP BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.table1_id JOIN table3 t3 ON t1.id = t3.table1_id JOIN table4 t4 ON t1.id = t4.table1_id JOIN table5 t5 ON t1.id = t5.table1_id JOIN table6 t6 ON t1.id = t6.table1_id JOIN table7 t7 ON t1.id = t7.table1_id JOIN table8 t8 ON t1.id </s
</s
SELECT </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'UPDATE table1 SET column1 ='+ </s
</s
SELECT </s
</s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
</s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD( </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id JOIN table9 t9 ON t1. </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table ) t WHERE t.rn = 1 </s
UPDATE table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id JOIN table9 t9 ON t1.id = t9. </s
UPDATE table1 SET column1 = column2, column3 = column4, column5 = column6, column7 = column8, column9 = column10, column11 = column11, column12 = column12, column13 = column13, column14 = column14, column15 = column15, column16 = </s
select convert(varchar(10), convert(varchar(10), convert(varchar(10), convert(varchar(10), convert(varchar(10), </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
DECLARE @sql VARCHAR(MAX) SET @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
SELECT Name FROM ( SELECT Name FROM ( SELECT Name FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql + ' </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn ROW_NUMBER() OVER (PARTITION BY Date DESC) rn </s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, 1, @StartDate) SET @EndDate = DATEADD(MONTH, 2, @EndDate) SET @StartDate = DATEADD(MONTH, 3, @StartDate) SET @EndDate = DATEADD(MONTH, 4, @EndDate) SET @StartDate = DATEADD(MONTH, 5, @StartDate) SET @EndDate = DATEADD(MONTH, 6, @EndDate) </s
SELECT </s
SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) </s
SELECT * FROM blog_posts WHERE blog_post_id IN ( SELECT blog_post_id FROM blog_posts GROUP BY blog_post_id HAVING COUNT(*) > 1 ) </s
INSERT INTO table (meta_key, meta_value) SELECT meta_key, meta_value FROM table </s
SELECT COUNT(DISTINCT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; SET @StartDate = DATEADD(DAY, -1, @StartDate); SET @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @End </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY status DESC) rn </s
CREATE OR REPLACE FUNCTION [dbo].[MyTable] ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE OR REPLACE FUNCTION [dbo].[Permissions] ( </s
SELECT </s
</s
CREATE TRIGGER [dbo].[Update] ON [dbo].[YourTable] FOR EACH ROW AS BEGIN INSERT INTO [dbo].[YourTable] VALUES ( </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -5, @StartDate) SET @EndDate = DATEADD(DAY, -5, @EndDate) SELECT DATEADD(DAY, -5, DATEADD(DAY, -5, DATEADD(DAY, -5, DATEADD(DAY, -5, DATEADD(DAY, -5, DATEADD(DAY, -5, DATEADD(DAY, -5, DATEADD(DAY, -5, DATEADD </s
CREATE TABLE myTable ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY client_id </s
</s
SELECT </s
SELECT </s
</s
SELECT * FROM mytable WHERE NOT EXISTS (SELECT 1 FROM mytable WHERE NOT EXISTS (SELECT 1 </s
SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DELETE FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT </s
</s
CREATE OR REPLACE FUNCTION [dbo].[UpdateCloned] RETURNS TRIGGER [dbo].[UpdateCloned] RETURNS TRIGGER [dbo].[DeleteCloned] RETURNS TRIGGER [dbo].[InsertCloned] RETURNS TRIGGER [dbo].[UpdateCloned] RETURNS TRIGGER [dbo].[DeleteCloned] RETURNS TRIGGER [dbo].[InsertCloned] </s
</s
SELECT * FROM mytable WHERE NOT EXISTS ( SELECT 1 FROM mytable WHERE NOT EXISTS ( SELECT 1 FROM mytable WHERE NOT EXISTS ( SELECT 1 FROM mytable WHERE NOT EXISTS ( SELECT 1 FROM mytable WHERE NOT EXISTS ( SELECT 1 FROM mytable WHERE NOT EXISTS ( </s
SELECT firstname, lastname FROM ( SELECT firstname, lastname, </s
SELECT </s
</s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'SELECT * FROM'+ </s
SELECT </s
</s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col </s
</s
SELECT </s
DELETE </s
SELECT DISTINCT </s
SELECT </s
SELECT </s
SELECT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35 </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table ) t WHERE t.rn = 1 </s
DELETE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( </s
SELECT DISTINCT </s
</s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.description = t1.description and t1.type = t2.type and t2.description = t1.description and t2.type = t1.type and </s
<?xml version="1.0" encoding="UTF-8"?> <?xml version="1.0" xmlns="http://schemas.xmlsoap.org/soap/envelope/" </s
SELECT </s
CREATE TABLE tableA ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44 </s
</s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @End </s
SELECT * FROM tags WHERE tag_id IN ( SELECT tag_id FROM tags WHERE tag_id NOT IN ( SELECT tag_id FROM tags WHERE tag_id NOT IN ( SELECT tag_id FROM tags WHERE tag_id NOT IN ( SELECT tag_id FROM tags WHERE tag_id NOT IN ( SELECT tag_id FROM tags WHERE tag_id NOT IN ( SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table1 GROUP BY id HAVING COUNT(*) > 1 ) t WHERE rn = 1 </s
</s
SELECT * FROM ( SELECT * FROM tags UNION ALL SELECT * FROM tags UNION ALL SELECT * FROM tags UNION ALL SELECT * FROM tags UNION ALL SELECT * FROM tags UNION ALL SELECT * FROM tags UNION ALL SELECT * FROM tags </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
</s
INSERT INTO </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col </s
DELETE </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
SELECT course_id, course_name, grade, COUNT(*) FROM grades GROUP BY course_id, course_name, grade HAVING COUNT(*) > 1 </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY MONTH ORDER BY MONTH) rn </s
INSERT INTO Table1 (Column1, Column2, Column3) SELECT Column1, Column2, Column3 FROM Table1 </s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT CASE </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
CREATE VIEW [dbo].[Table1] AS SELECT * FROM [dbo].[Table1] INNER JOIN [dbo].[Table2] ON [dbo].[Table1].[ID] = [dbo].[Table2].[ID] WHERE [dbo].[Table1].[ID] = [dbo].[Table2].[ID] AND [dbo].[Table2].[ID] = [dbo].[Table1].[ID] AND [d </s
CREATE INDEX IF NOT EXISTS ( </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name AND table2. </s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(DISTINCT t2.id) = 2 </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT * FROM </s
</s
SELECT * FROM ( SELECT * FROM table1 UNION ALL SELECT * FROM table2 UNION ALL SELECT * FROM table3 UNION ALL SELECT * FROM table4 UNION ALL SELECT * FROM table5 UNION ALL SELECT * FROM table6 UNION ALL SELECT * </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table GROUP BY id ) t WHERE NOT EXISTS (SELECT 1 FROM table WHERE rn = 1 </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DELETE FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY table_name ORDER BY table_name) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY table_name ORDER BY table_name) rn FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl </s
DECLARE @TableName NVARCHAR(MAX) SELECT @TableName = COALESCE(@TableName + ',', '') + ',' + COALESCE(@TableName, '') SELECT @TableName = COALESCE(@TableName + ',', '') + ',' + COALESCE(@TableName, '') SELECT @TableName = COALESCE(@TableName + ',', '') + ',' + COALESCE(@TableName, '') SELECT @TableName = COALESCE(@Table </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
</s
</s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@ </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
SELECT * FROM mytable WHERE NOT EXISTS ( SELECT 1 FROM mytable WHERE NOT EXISTS ( SELECT 1 FROM mytable WHERE NOT EXISTS ( SELECT 1 FROM mytable WHERE NOT EXISTS ( SELECT 1 FROM mytable WHERE NOT EXISTS ( SELECT 1 FROM mytable WHERE NOT EXISTS ( </s
</s
SELECT </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
SELECT </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
select t1.* from table1 t1 join table2 t2 on t1.col1 = t2.col1 and t1.col2 = t2.col2 and t2.col3 = t1.col3 and t1.col4 = t2.col4 and t2.col5 = t1.col5 and t2.col6 = t1. </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table GROUP BY id ) t WHERE NOT EXISTS ( SELECT 1 FROM table WHERE rn = 1 UNION ALL SELECT 2 FROM table WHERE rn = 3 UNION ALL SELECT 3 FROM table WHERE rn = 4 UNION ALL </s
</s
SELECT </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
DECLARE CHARACTER SET CHARACTER_REPLACE( </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
CREATE TABLE my_table ( </s
CREATE UNIQUE INDEX </s
</s
CREATE FUNCTION [dbo].[dynamic_pivot] ( @a int, @b int, @c int, @d int, @e int, @f int, @g int, @h int, @i int, @j int, @k int, @l int, @m int, @n int, @o int, </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT </s
SELECT </s
SELECT * FROM table1 WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table1.id = table2.id AND table1. </s
SELECT * FROM ( SELECT * FROM table1 UNION ALL SELECT * FROM table2 UNION ALL SELECT * FROM table3 UNION ALL SELECT * FROM table4 UNION ALL SELECT * FROM table5 UNION ALL SELECT * FROM table6 UNION ALL SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
UPDATE table_name SET column_name = CASE </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql + ' </s
DECLARE @currency VARCHAR(100) DECLARE @value VARCHAR(100) SELECT @currency = COALESCE(@value, 'USD') SELECT @value = COALESCE(@value, 'EUR') SELECT @currency = COALESCE(@currency, 'USD') SELECT @value = COALESCE(@value, 'EUR') SELECT @currency = COALESCE(@currency, 'USD') SELECT @value = COALESCE(@value, 'EUR') SELECT @currency = COALESCE(@currency, </s
CREATE OR REPLACE FUNCTION [dbo].[user_permissions] ( @user_id int, @user_name varchar(50), @user_email varchar(50), @user_first_name varchar(50), @user_last_name varchar(50), @user_email varchar(50), @user_first_name varchar(50), @user_last_name varchar(50), @user_email </s
SELECT </s
SELECT </s
</s
DECLARE @temp TABLE ( </s
SELECT </s
select t1.* from table1 t1 inner join table2 t2 on t1.column_a = t2.column_a inner join table3 t3 on t1.column_b = t3.column_b inner join table4 t4 on t1.column_b = t4.column_b group by t1.column_a </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, - </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33 </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY year, month, date </s
</s
</s
SELECT </s
select * from ( select *, row_number() over (partition by date order by date desc) as seqnum from table ) t where seqnum = 1; </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id JOIN table9 t9 ON t1.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
declare @sql nvarchar(max) set @sql = @sql + 'CREATE TABLE'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
DELETE FROM sys.databases WHERE EXISTS ( SELECT * FROM sys.databases WHERE EXISTS ( SELECT * FROM sys.databases WHERE EXISTS ( SELECT * FROM sys.databases WHERE EXISTS ( SELECT * FROM sys.databases WHERE EXISTS ( SELECT * FROM sys.databases WHERE EXISTS ( SELECT * </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY item_id ORDER BY item_id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartTime DATETIME DECLARE @EndTime DATETIME SET @StartTime = DATEADD(DAY, -1, @StartTime) SET @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartTime = DATEADD(DAY, -1, @StartTime) SELECT @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartTime = DATEADD(DAY, -1, @StartTime) SELECT @EndTime = DATEADD(DAY, -1 </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
</s
</s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
var filemaker = new FileMaker() { { </s
SELECT </s
</s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * </s
SELECT COUNT(*) FROM (SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
</s
SELECT * FROM MyTable WHERE NOT EXISTS ( SELECT * FROM MyTable WHERE ParentId NOT IN ( SELECT ParentId FROM MyTable WHERE ParentId NOT IN ( SELECT ParentId FROM MyTable WHERE ParentId NOT IN ( </s
SELECT </s
SELECT COUNT(*) FROM YourTable GROUP BY COUNT(*) HAVING COUNT(*) = (SELECT COUNT(*) FROM YourTable </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @ </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY DATEDIFF(day, 0, GETDATE())) OVER (ORDER BY DATEDIFF(day, 0, GETDATE())) OVER (ORDER BY DATEDIFF(day, 0, GETDATE())) OVER (ORDER BY DATEDIFF(day, 0, GETDATE())) OVER (ORDER BY DATEDIFF(day, 0, GETDATE())) OVER (ORDER BY DATEDIFF(day, 0, GETDATE() </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
SELECT </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY pk ASC) AS rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY pk ASC) AS rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY pk ASC) AS rn </s
UPDATE YourTable SET YourColumn = CASE </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
</s
SELECT </s
select * from ( select t.*, row_number() over (partition by id order by id) as seqnum from table t ) t where seqnum = 1; </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
</s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id UPDATE table1 t1 INNER JOIN table2 t </s
SELECT DISTINCT department_id FROM department GROUP BY department_id HAVING COUNT(DISTINCT department_id) > 1 </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, col46, </s
DELETE FROM </s
DECLARE @StartTime DATETIME; DECLARE @EndTime DATETIME; DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; SET @StartTime = CONVERT(VARCHAR(10), GETDATE(), 103) SET @EndTime = CONVERT(VARCHAR(10), GETDATE(), 103) SET @StartDate = CONVERT(VARCHAR(10), GETDATE(), 103) SET @EndDate = CONVERT(VARCHAR(10), GETDATE(), 103) SELECT @StartTime </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql +' </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
</s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2; </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX); INSERT INTO @sql SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ',', ''); SELECT @sql = COALESCE(@sql + ', </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DELETE </s
</s
SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) FROM ( SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) UNION ALL SELECT DATE </s
CREATE PROCEDURE [dbo].[MyProc] ( @Id INT, @Name VARCHAR(50) ) AS BEGIN SET NOCOUNT ON; INSERT INTO [dbo].[MyProc] (Id, Name) SELECT Id, Name FROM [dbo].[MyProc] WHERE [dbo].[MyProc].[Id] = @Id AND [dbo].[MyProc].[Name] = @Name </s
SELECT * FROM ( SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY date ORDER BY date DESC) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY timestamp DESC) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT COUNT(DISTINCT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table GROUP BY id ) t WHERE NOT EXISTS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table GROUP BY id ) AND NOT EXISTS ( SELECT *, ROW_NUMBER() OVER (ORDER BY </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @sql2 NVARCHAR(MAX) = '' DECLARE @sql3 NVARCHAR(MAX) = '' DECLARE @sql4 NVARCHAR(MAX) = '' DECLARE @sql5 NVARCHAR(MAX) = '' DECLARE @sql6 NVARCHAR(MAX) = '' DECLARE @sql7 NVARCHAR(MAX) = '' DECLARE @sql8 NVARCHAR(MAX) = '' DECLARE @sql9 NVARCHAR(MAX) = </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ QUOTENAME(COLUMN_NAME) +'FROM'+ QUOTENAME(COLUMN_NAME) +'WHERE'+ QUOTENAME(COLUMN_NAME) +'='+ QUOTENAME(COLUMN_NAME) +'AND'+ QUOTENAME(COLUMN_NAME) +'='+ QUOTENAME(COLUMN_NAME) +'ORDER BY'+ QUOTENAME(COLUMN_NAME) </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, col46, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(DISTINCT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + 'CREATE TABLE'+ </s
CREATE OR REPLACE TRIGGER my_table_name BEFORE INSERT ON my_table FOR EACH ROW BEGIN UPDATE my_table SET my_column_name = CASE </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
DELETE </s
SELECT CASE </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT DISTINCT </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
DECLARE @totals TABLE ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT DISTINCT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'ALTER DATABASE IF NOT EXISTS'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
</s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, col </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(day, -1, @StartDate) SET @EndDate = DATEADD(day, -1, @EndDate) SELECT @StartDate = DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, D </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @ </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
</s
</s
SELECT </s
SELECT </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2; </s
</s
ORDER BY CASE </s
SELECT </s
SELECT COUNT(DISTINCT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45 </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) DECLARE @data NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ @table +'WHERE'+ @column +'='+ @value SET @query = 'SELECT * FROM'+ @table +'WHERE'+ @column +'='+ @value SET @data = 'SELECT * FROM'+ @table +'WHERE'+ @column +'='+ @value EXEC sp_executesql @sql </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
select t.*, (select count(*) from t where t.franchise_id = t.franchise_id group by t.franchise_id having count(*) > 1 order by t.franchise_id desc limit 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
select * from ( select t.*, row_number() over (partition by id order by id) as rn from t ) t where rn = 1; </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
</s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + CO </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX); DECLARE @tbl NVARCHAR(MAX); EXECUTE IMMEDIATE 'SELECT * FROM @tbl'; EXECUTE IMMEDIATE 'SELECT * FROM @tbl2'; EXECUTE IMMEDIATE 'SELECT * FROM @tbl3'; EXECUTE IMMEDIATE 'SELECT * FROM @tbl4'; EXECUTE IMMEDIATE 'SELECT * FROM @tbl5'; EXECUTE IMMEDIATE 'SELECT * FROM @tbl6'; EXECUTE IM </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.city = t1.city and t2.state = t1.state and t2.zip = t1.zip and t2.city = t1.city and t2.state </s
CREATE TRIGGER [dbo].[BackupTable] ON [dbo].[BackupTable] AFTER INSERT ON [dbo].[BackupTable] AFTER UPDATE ON [dbo].[BackupTable] AFTER DELETE ON [dbo].[BackupTable] AFTER INSERT ON [dbo].[BackupTable] AFTER DELETE ON [dbo].[BackupTable] AFTER UPDATE ON [dbo].[BackupTable] AFTER INSERT ON [dbo].[BackupTable] AFTER DELETE ON [dbo </s
SELECT </s
SELECT </s
CREATE PROCEDURE [dbo].[Cancel] AS BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON; BEGIN SET NOCOUNT ON </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME DECLARE @StartHour DATETIME DECLARE @EndHour DATETIME DECLARE @StartMinutes DATETIME DECLARE @EndMinutes DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartHour = DATEADD(DAY, -1, @StartHour) SET @EndHour = DATEADD(DAY, -1 </s
UPDATE ( SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT DATEADD(DAY, -1, GETDATE()) FROM ( SELECT DATEADD(DAY, -1, GETDATE()) UNION ALL SELECT DATEADD(DAY, -1, GETDATE()) UNION ALL SELECT DATEADD(DAY, -1, GETDATE()) UNION ALL SELECT DATEADD(DAY, -1, GETDATE()) UNION ALL SELECT DATEADD(DAY, -1, GETDATE()) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
UPDATE Table1 SET Column1 = Column2 FROM Table1 INNER JOIN Table2 ON Table1.Column1 = Table2.Column1 </s
SELECT COUNT(DISTINCT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @StartDate DATETIME, @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate), @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate), @EndDate = DATEADD(DAY, -1, @EndDate) </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT Name, ROW_NUMBER() OVER (PARTITION BY Name ORDER BY Name) AS RN FROM CTE ) SELECT Name, ROW_NUMBER() OVER (PARTITION BY Name) AS RN FROM CTE WHERE RN = 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql </s
SELECT </s
SELECT COUNT(*) FROM YourTable GROUP BY COUNT(*) HAVING COUNT(*) = (SELECT COUNT(*) FROM YourTable WHERE </s
SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( SELECT COUNT(*) </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id INNER JOIN table4 t4 ON t1.id = t4.id INNER JOIN table5 t5 ON t1.id = t5.id INNER JOIN table6 t6 ON t1.id = t6.id INNER JOIN table7 t7 ON t1.id = t7.id </s
SELECT </s
</s
</s
</s
SELECT </s
INSERT INTO [dbo].[MyTable] </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3) VALUES (' + </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT DATEADD(year, DATEDIFF(year, 0, GETDATE()), DATEADD(month, DATEDIFF(month, 0, GETDATE()), DATEADD(day, DATEDIFF(day, 0, GETDATE()))), DATEADD(hour, DATEDIFF(hour, 0, GETDATE()), DATEADD(minute, DATEDIFF(minute, 0, GETDATE()))), DATEADD(second, DATEDIFF(second, 0, GETDATE()), DATEADD(year, DATEDIFF(year, 0, GETDATE()), DATEADD </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
INSERT INTO table1 (col1, col2, col3, col4) SELECT col1, col2, col3, col4 FROM table1 </s
SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable ) </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
</s
CREATE OR REPLACE PROCEDURE [dbo].[copy_table] AS AS </s
SELECT </s
SELECT COUNT(DISTINCT </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
SELECT DISTINCT </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + 'CREATE TABLE'+ </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT </s
DECLARE @Path NVARCHAR(MAX) DECLARE @SplitPath NVARCHAR(MAX) DECLARE @SplitValue NVARCHAR(MAX) DECLARE @SplitValue2 NVARCHAR(MAX) DECLARE @SplitValue3 NVARCHAR(MAX) DECLARE @SplitValue4 NVARCHAR(MAX) DECLARE @SplitValue5 NVARCHAR(MAX) DECLARE @SplitValue6 NVARCHAR(MAX) DECLARE @SplitValue7 NVARCHAR(MAX) DECLARE @SplitValue8 NVARCHAR(MAX) </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @col NVARCHAR(MAX) SET @sql = 'SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT * FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
SET NOCOUNT ON; </s
select player1, player2, player3 from ( select player1, player2, player3 union all select player1, player2, player3 union all select player1, player2, player3 union all select player1, player2, player3 union all select player1, player2, player3 union all select player1, player2, player3 union all select player1, player2, player3 union all select player1, player2, player3 union all select player1, </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
UPDATE table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id JOIN table9 t9 ON t1.id = t9. </s
CREATE OR REPLACE FUNCTION [dbo].[Update] ( </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COAL </s
SELECT * FROM Orders WHERE OrderID IN ( SELECT OrderID FROM Orders UNION ALL SELECT OrderID FROM Orders UNION ALL SELECT OrderID FROM Orders UNION ALL SELECT OrderID FROM Orders UNION ALL SELECT OrderID FROM Orders UNION ALL SELECT OrderID FROM Orders UNION ALL </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'DELETE FROM table1 WHERE id IN (SELECT id FROM table2 WHERE table1.id = table2.id);' INSERT INTO table1 (id) VALUES (1); INSERT INTO table2 (id) VALUES (2); INSERT INTO table3 (id) VALUES (3); INSERT INTO table4 (id) VALUES (4); INSERT INTO table5 (id) VALUES (5); INSERT INTO table6 (id) VALUES (6); INSERT INTO table7 (id) VALUES ( </s
SELECT SUBSTRING( </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'UPDATE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DELETE FROM ( SELECT ID, ROW_NUMBER() OVER (PARTITION BY </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT COUNT(DISTINCT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE( </s
select student_id, avg(grade) as avg_grade from (select student_id, </s
SELECT </s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UN </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DROP TABLE my_table; CREATE TABLE my_table ( </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
SELECT </s
SELECT </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GET </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY a, b, c </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @temp TABLE ( ID int ) INSERT INTO @temp VALUES (1) INSERT INTO @temp VALUES (2) INSERT INTO @temp VALUES (3) INSERT INTO @temp VALUES (4) INSERT INTO @temp VALUES (5) INSERT INTO @temp VALUES (6) INSERT INTO @temp VALUES (7) INSERT INTO @temp VALUES (8) INSERT INTO @temp VALUES (9) INSERT INTO @temp VALUES (10) INS </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY start_date DESC) rn </s
SELECT COUNT(DISTINCT </s
INSERT INTO Table1 (Column1, Column2, Column3, Column4, Column5, Column6, Column7, Column8, Column9, Column10, Column11, Column12, Column13, Column14, Column15, Column16, Column17, Column18, Column19, Column20, Column21, Column22, Column23, Column24, Column25, Column26, Column27, Column28, Column29, Column30, Column31, Column32, Column33, Column34, Column35, Column36, Column37, Column38, Column39, Column40, Column41, Column42, Column43
CREATE TRIGGER [dbo].[Trace] ON [dbo].[Trace] AFTER INSERT ON [dbo].[Trace] AFTER UPDATE ON [dbo].[Trace] AFTER DELETE ON [dbo].[Trace] CREATE TRIGGER [dbo].[Trace] ON [dbo].[Trace] AFTER DELETE ON [dbo].[Trace] AFTER INSERT ON [dbo].[Trace] AFTER UPDATE ON [dbo].[Trace] AFTER DELETE ON [ </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT </s
</s
</s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT </s
ALTER TABLE [dbo].[dbo].[TableName] DROP TABLE [dbo].[dbo].[TableName] ALTER TABLE [dbo].[dbo].[TableName] DROP TABLE [dbo].[dbo].[TableName] ALTER TABLE [dbo].[dbo].[TableName] DROP TABLE [dbo].[dbo].[TableName] ALTER TABLE [dbo].[dbo].[TableName] DROP TABLE [dbo].[dbo].[TableName] ALTER TABLE [dbo].[dbo].[TableName] </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, </s
SELECT </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
</s
</s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY created DESC) rn </s
</s
IF EXISTS (SELECT 1 FROM MyTable WHERE MyTable.ConnectionString = @ConnectionString </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
</s
UPDATE table1 SET column1 = CASE </s
CREATE TABLE my_table ( </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
SELECT COUNT(DISTINCT </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col </s
SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; </s
</s
SELECT </s
SELECT </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ QUOTENAME(@name) +'FROM'+ QUOTENAME(@email) +'WHERE'+ QUOTENAME(@phone) +'='+ QUOTENAME(@email) +'AND'+ QUOTENAME(@phone) +'='+ QUOTENAME(@email) +'AND'+ QUOTENAME(@phone) +'='+ QUOTENAME(@email) +'AND'+ QUOTENAME(@phone) +'</s
</s
</s
SELECT </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
CREATE TABLE myTable ( </s
SELECT </s
SELECT </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM TABLE_NAME' select @sql = @sql +' </s
</s
SELECT </s
SQLiteDatabase db = new SQLiteDatabase() db.open() db.executescript(''' </s
SELECT * FROM articles WHERE article_id IN ( SELECT article_id FROM articles WHERE article_id NOT IN ( SELECT article_id FROM articles WHERE article_id NOT IN ( SELECT article_id FROM articles WHERE article_id NOT IN ( SELECT article_id FROM articles WHERE article_id NOT IN ( SELECT article_id FROM articles WHERE article_id NOT IN ( </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY event_id ORDER BY event_date DESC) rn </s
SELECT </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT * FROM table1 UNION ALL SELECT * FROM table2 UNION ALL SELECT * FROM table3 UNION ALL SELECT * FROM table4 UNION ALL SELECT * FROM table5 UNION ALL SELECT * FROM table6 UNION ALL SELECT * </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
</s
SELECT * FROM table1 t1 LEFT JOIN table2 t2 ON t1.ID = t2.ID LEFT JOIN table3 t3 ON t1.ID = t3.ID LEFT JOIN table4 t4 ON t1.ID = t4.ID LEFT JOIN table5 t5 ON t1.ID = t5.ID LEFT JOIN table6 t6 ON t1.ID = t6.ID LEFT JOIN table7 t7 ON t1.ID = t7.ID </s
</s
</s
SELECT </s
CREATE TRIGGER [dbo].[after_insert] ON [dbo].[TableName] FOR EACH ROW BEGIN INSERT INTO [dbo].[TableName] SELECT * FROM [dbo].[TableName] WHERE EXISTS (SELECT 1 FROM [dbo].[TableName] WHERE [dbo].[TableName] </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY postcode ORDER BY postcode DESC) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35 </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table WHERE NOT EXISTS ( SELECT * FROM table </s
CREATE OR REPLACE TRIGGER [dbo].[Inserted] BEFORE INSERT ON [dbo].[Inserted] FOR EACH ROW BEGIN INSERT INTO [dbo].[Inserted] VALUES ( ( </s
DECLARE @StartDate DATETIME, @EndDate DATETIME DECLARE @StartHour DATETIME, @EndHour DATETIME DECLARE @StartMinute DATETIME, @EndMinute DATETIME DECLARE @EndHour DATETIME, @EndHour DATETIME DECLARE @StartMinute DATETIME, @EndMinute DATETIME DECLARE @StartHour DATETIME, @EndHour DATETIME DECLARE @StartMinute DATET </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at DESC) AS rn </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT * FROM ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = N'SELECT * FROM </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY ID) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM </s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(DISTINCT t2.id) = 2 </s
SELECT DISTINCT </s
SELECT </s
</s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE WHEN ROW_NUMBER() OVER (ORDER BY CASE WHEN ROW_NUMBER() OVER (ORDER BY CASE WHEN ROW_NUMBER() OVER (ORDER BY CASE WHEN ROW_NUMBER() OVER (ORDER BY CASE WHEN ROW_NUMBER() OVER (ORDER BY CASE WHEN ROW_NUMBER() Over (ORDER By CASE WHEN ROW_NUMBER() Over (ORDER By CASE WHEN ROW_NUMBER() Over (ORDER By CASE WHEN </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY Date DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
CREATE OR REPLACE TRIGGER my_triggers BEFORE INSERT OR UPDATE ON my_triggers FOR EACH ROW BEGIN INSERT INTO my_triggers VALUES ( </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
DECLARE @DATE DATETIME SET @DATE = DATEADD(DAY, -1, @DATE) SELECT DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1, DATEADD(DAY, -1 </s
SELECT DISTINCT </s
</s
SELECT * FROM users WHERE user_id IN ( SELECT user_id FROM users UNION ALL SELECT user_id FROM users UNION ALL SELECT user_id FROM users UNION ALL SELECT user_id FROM users UNION ALL SELECT user_id FROM users UNION ALL SELECT user_id FROM users UNION ALL </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY tag_name ORDER BY tag_name) rn FROM tags ) t WHERE t.rn = 1 </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY DateTime DESC) rn ROW_NUMBER() OVER (PARTITION BY DateTime DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1 </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY parent_id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, 1, GETDATE()) SET @EndDate = DATEADD(MONTH, 2, GETDATE()) SET @StartDate = DATEADD(MONTH, 3, GETDATE()) SET @EndDate = DATEADD(MONTH, 4, GETDATE()) SET @StartDate = DATEADD(MONTH, 5, GETDATE()) SET @EndDate = DATEADD(MONTH, 6, GETDATE </s
</s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql + ' </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
INSERT INTO table1 (col1, col2, col3, col4) SELECT col1, col2, col3, col4 FROM table1 </s
SELECT DATE_FORMAT(DATE, '%Y-%m-%d %H:%i:%s') </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = N'SELECT * FROM table2' select @sql = N'SELECT * FROM table3' select @sql = N'SELECT * FROM table4' select @sql = N'SELECT * FROM table5' select @sql = N'SELECT * FROM table6' select @sql = N'SELECT * FROM table7' select @sql = N'SELECT * FROM table8' select @sql = N'SELECT * FROM table9' select @sql = N'SELECT * FROM table </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + ' </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY GroupId ORDER BY GroupId) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT'+ QUOTENAME(ColumnName) +'FROM'+ QUOTENAME(ColumnType) +'WHERE'+ QUOTENAME(ColumnName) +'='+ QUOTENAME(ColumnType) +'AND'+ QUOTENAME(ColumnName) +'='+ QUOTENAME(ColumnType) +'ORDER BY'+ QUOTENAME(ColumnName) +'LIMIT'+ QUOTENAME(ColumnType) +'ORDER BY'+ QUOTENAME(ColumnName </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33 </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[create_table] DECLARE DECLARE </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM </s
CREATE UNIQUE INDEX </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col </s
DROP TABLE IF EXISTS table_name; CREATE TABLE table_name ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name </s
;WITH CTE AS ( SELECT ID, ROW_NUMBER() OVER (PARTITION BY </s
IF EXISTS (SELECT * FROM table1 WHERE table1.id = table2.id AND table1.name = table2.name </s
DECLARE @sql NVARCHAR(MAX); DECLARE @tbl NVARCHAR(MAX); EXEC sp_executesql @sql NVARCHAR(MAX); EXEC sp_executesql @tbl NVARCHAR(MAX); EXEC sp_executesql @tbl NVARCHAR(MAX); EXEC sp_executesql @tbl NVARCHAR(MAX); EXEC sp_executesql @tbl NVARCHAR(MAX); EXEC sp_executesql @tbl NVARCHAR(MAX); </s
DECLARE @xml XML = ' </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT CASE </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, Col14, Col15, Col16, Col17, Col18, Col19, Col20, Col21, Col22, Col23, Col24, Col25, Col26, Col27, Col28, Col29, Col30, Col31, Col32, Col33, Col34, Col35, Col36, Col37, Col38, Col39, Col40, Col41, Col42, Col43, Col44, Col45, Col46, Col47
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, </s
CREATE TRIGGER [dbo].[MyTrigger] ON [dbo].[MyTrigger] BEFORE INSERT ON [dbo].[MyTrigger] FOR EACH ROW BEGIN INSERT INTO [dbo].[MyTrigger] VALUES ( </s
IF EXISTS (SELECT * FROM table1 WHERE table1.id = table2.id AND table1.name = table2.name AND table1. </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, </s
</s
</s
</s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME DECLARE @StartTime DATETIME DECLARE @EndTime DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartTime = DATEADD(DAY, -1, @StartTime) SET @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartDate = DATEADD(DAY, -1, </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @sql NVARCHAR(MAX); SELECT @sql = COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALES </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
MERGE </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY goal_id ORDER BY goal_id) as rn FROM ( SELECT </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM table1 WHERE NOT EXISTS ( SELECT 1 FROM table2 WHERE table1.id = table2.id ) </s
SELECT COUNT(DISTINCT </s
SELECT * FROM ( SELECT *, CASE WHEN CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY word1, word2 </s
</s
MERGE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, </s
SELECT DATEADD(YEAR, -1, DATEADD(YEAR, -1, DATEADD(YEAR, -2, DATEADD(YEAR, -3, DATEADD(YEAR, -4, DATEADD(YEAR, -5, DATEADD(YEAR, -6, DATEADD(YEAR, -7, DATEADD(YEAR, -8, DATEADD(YEAR, -9, DATEADD(YEAR, -10, DATEADD(YEAR, -11, DATEADD(YEAR, </s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @sql2 NVARCHAR(MAX) = '' DECLARE @sql3 NVARCHAR(MAX) = '' DECLARE @sql4 NVARCHAR(MAX) = '' DECLARE @sql5 NVARCHAR(MAX) = '' DECLARE @sql6 NVARCHAR(MAX) = '' DECLARE @sql7 NVARCHAR(MAX) = '' DECLARE @sql8 NVARCHAR(MAX) = '' DECLARE @sql9 NVARCHAR(MAX) = '' DECLARE @sql10 NV </s
CREATE TRIGGER [dbo].[Order] ON [dbo].[Order] BEFORE INSERT ON [dbo].[Order] FOR EACH ROW BEGIN INSERT INTO [dbo].[Order] VALUES ( </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT COUNT(*) </s
SELECT </s
SELECT </s
</s
CREATE OR REPLACE FUNCTION [dbo].[update_table] ( </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY person_id DESC) rn FROM ( SELECT person_id, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY person_id DESC) rn </s
SELECT </s
CREATE UNIX_TIMESTAMP ( </s
SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) FROM ( SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0) UNION ALL SELECT DATEADD(day, DATEDIFF </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate), </s
DECLARE @LocationTable TABLE ( </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY product_id) rn </s
SELECT </s
INSERT INTO Table1 (Column1, Column2, Column3, Column4) SELECT Column1, Column2, Column3, Column4 FROM Table1 </s
</s
</s
SELECT DISTINCT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT name, surname FROM ( SELECT name, surname FROM ( SELECT name, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn OVER (PARTITION BY Date DESC) rn </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT employee_id, COUNT(*) FROM ( SELECT </s
CREATE TABLE myTable ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE( </s
SELECT </s
SELECT </s
SELECT </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id </s
DECLARE @TempTable TABLE ( </s
select id from ( select id union all select id union all select id union all select id union all select id union all select id union all select id union all select id union all select id union all select id union all </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, </s
<?xml version="1.0" encoding="UTF-8"?> <?xml version="1.0" xmlns="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" <?xml version="1.0" encoding="UTF-8"?> <?xml version="1.1" encoding="UTF-8"?> <?xml version="1.2" encoding="UTF-8"?> <?xml version="1.3" encoding="UTF-8"?> <?xml version="1 </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, </s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * </s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
SELECT </s
SELECT </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM Table1 WHERE NOT EXISTS ( SELECT * FROM Table2 WHERE Table1.Column1 = Table2.Column1 AND Table1.Column2 = Table2.Column2 AND Table1.Column3 = Table2.Column3 AND Table1.Column4 = Table2.Column4 AND Table1.Column5 = Table2.Column5 AND Table1.Column6 = Table2.Column6 AND Table1.Column7 = Table2. </s
SELECT </s
select t.*, (select count(*) from t where t.id = t.id and </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
CREATE OR REPLACE TRIGGER [dbo].[Lock] BEFORE INSERT ON [dbo].[TableName] FOR EACH ROW BEGIN INSERT INTO [dbo].[TableName] VALUES ( ( </s
CREATE TABLE #TempTable ( ID INT NOT NULL AUTO_INCREMENT, Name VARCHAR(50) NOT NULL, Description VARCHAR(50) NOT NULL ); INSERT INTO #TempTable ( ID, Name, Description ) SELECT ID, Name, Description FROM #TempTable UNION ALL SELECT ID, Name, Description FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT </s
CREATE OR REPLACE FUNCTION [dbo].[profiles] ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @SQL NVARCHAR(MAX) SELECT @TableName = COALESCE(@TableName + '.', '') + '.' + COALESCE(@TableName, '') + '.' + COALESCE(@TableName + '.' + COALESCE(@TableName + '.' + COALESCE(@TableName + '.' + COALESCE(@TableName + '.' + COALESCE(@TableName + '.' + COALESCE(@TableName + '.' + COALES </s
SELECT CAST( </s
DELETE FROM Table1 WHERE NOT EXISTS (SELECT 1 FROM Table2 WHERE Table1.ID = Table2.ID AND Table1.Name = Table2.Name </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY month, year ORDER BY month) rn </s
SELECT * FROM table1 WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table1.id = table2.id AND table1.name = table2.name </s
SELECT * FROM table1 JOIN table2 ON table1.id = table2.id JOIN table3 ON table1.id = table3.id JOIN table4 ON table1.id = table4.id JOIN table5 ON table1.id = table5.id JOIN table6 ON table1.id = table6.id JOIN table7 ON table1.id = table7.id JOIN table8 ON table1.id = table8.id JOIN table9 ON table1.id = table9.id </s
SELECT </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY type ORDER BY type) rn </s
SELECT </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t2.id = t1.id INNER JOIN table3 t3 ON t3.id = t1.id INNER JOIN table4 t4 ON t4.id = t1.id INNER JOIN table5 t5 ON t5.id = t1.id INNER JOIN table6 t6 ON t6.id = t1.id INNER JOIN table7 t7 ON t7.id = t1.id INNER JOIN table8 t8 ON t8.id = t1.id </s
</s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT cars.id, cars.name FROM cars LEFT JOIN ( SELECT id, name FROM cars GROUP BY id HAVING </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY RAND() DESC) rn </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29 </s
DECLARE @sequence nvarchar(max) SET @sequence = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; SELECT @sequence </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
IF EXISTS (SELECT 1 FROM table1 WHERE table1.id = table2.id </s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; SET @StartDate = DATEADD(DAY, -1, @StartDate); SET @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @EndDate = DATEADD(DAY, -1, @EndDate); SELECT @StartDate = DATEADD(DAY, -1, @StartDate); SELECT @EndDate = D </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql + ' </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.description = t1.description and t1.type = t2.type and t2.description = t1.description and t2.type = t1.type and </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY person_id </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT DISTINCT </s
DECLARE @PhoneNumber NVARCHAR(MAX) DECLARE @Country NVARCHAR(MAX) SET @PhoneNumber = </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT </s
</s
CREATE TABLE my_table ( </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) DECLARE @result NVARCHAR(MAX) SELECT @sql = COALESCE(@sql + ','+ COALESCE(@result + ','+ COALESCE(@result + ','+ COALESCE(@result + ','+ COALESCE(@result + ','+ COALESCE(@result + ','+ COALESCE(@result + ','+ COALESCE(@result + ','+ COALESCE(@result + ','+ </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col </s
</s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
select min(column1) from table1 group by min(column1) having count(*) > 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; DECLARE @StartHour DATETIME; DECLARE @EndHour DATETIME; DECLARE @StartMinutes DATETIME; DECLARE @EndMinutes DATETIME; DECLARE @StartDateHour DATETIME; DECLARE @EndDateHour DATETIME; DECLARE @StartMinutesHour DATETIME; DECLARE @EndMinutesHour DATETIME; </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id JOIN table9 t9 ON t1.id = t9 </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY product_id DESC) rn </s
DECLARE @xml XML SET @xml = </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, </s
</s
select departments.department_id, departments.department_name from departments group by departments.department_id having count(distinct departments.department_id) = (select count(distinct departments.department_id) </s
CREATE OR REPLACE PROCEDURE [dbo].[comments] AS SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @Text NVARCHAR(MAX) SET @Text = '' SELECT @Text = COALESCE(@Text + '\n', '') + '\n' SELECT @Text = COALESCE(@Text + '\n', '') + '\n' SELECT @Text = COALESCE(@Text + '\n', '') + '\n' SELECT @Text = COALESCE(@Text + '\n', '') + '\n' SELECT @Text = COALESCE(@Text + '\n', '') + '\n' </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
</s
CREATE TABLE my_table ( </s
SELECT </s
SELECT </s
DELETE </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @ColumnName NVARCHAR(MAX) SELECT @TableName = COALESCE(@TableName + '.', '') + '.' + COALESCE(@ColumnName, '') SELECT @ColumnName = COALESCE(@ColumnName + '.', '') + '.' + COALESCE(@ColumnName, '') SELECT @ColumnName = COALESCE(@ColumnName + '.', '') + '.' + COALESCE(@ColumnName, </s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql +' </s
SELECT * FROM ( SELECT * FROM table1 UNION ALL SELECT * FROM table2 UNION ALL SELECT * FROM table3 UNION ALL SELECT * FROM table4 UNION ALL SELECT * FROM table5 UNION ALL SELECT * FROM table6 UNION ALL SELECT * FROM table7 </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
SELECT * FROM friends WHERE user_id IN ( SELECT user_id FROM friends WHERE friend_id IN ( SELECT friend_id FROM friends WHERE friend_id NOT IN ( SELECT friend_id FROM friends WHERE friend_id NOT IN ( SELECT friend_id FROM friends WHERE friend_id NOT IN ( SELECT friend_id FROM friends WHERE friend_id NOT IN ( </s
UPDATE table1 SET column1 = CASE </s
CREATE OR REPLACE FUNCTION [dbo].[Update] RETURNS TRIGGER [dbo].[Update] RETURNS TRIGGER [dbo].[Delete] RETURNS TRIGGER [dbo].[Insert] RETURNS TRIGGER [dbo].[Update] RETURNS TRIGGER [dbo].[Delete] RETURNS TRIGGER [dbo].[Insert] RETURNS TRIGGER [dbo].[Delete] RETURNS TRIG </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX) </s
</s
</s
SELECT </s
SELECT </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = N'DROP TABLE IF EXISTS'+ </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR(MAX) SELECT </s
SELECT </s
DELETE </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.id = t1.id and t2.name = t1.name and t2.id = t1.id and t2.name = t1.name and </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ServiceId ORDER BY DateCreated DESC) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @string varchar(255) SET @string = '1234567890' SELECT @string = REPLACE(@string, '1234567890', '1234567890') SELECT @string = REPLACE(@string, '1234567890', '1234567890') SELECT @string = REPLACE(@string, '1234567890', '1234567890') SELECT @string = REPLACE(@string, '1234567890', '1234567890') SELECT @string = REPLACE(@string, '12345678 </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
</s
</s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42 </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM master GROUP BY id ) t WHERE rn = 1 </s
DECLARE @sql NVARCHAR(MAX) SELECT @sql = COALESCE(@sql + ',', '') + COALESCE(@sql + ',', '') + COALESCE(@sql + ',', '') + COALESCE(@sql + ',', '') + COALESCE(@sql + ',', '') + COALESCE(@sql + ',', '') + COALESCE(@sql + ',', '') + COALESCE(@sql + ',', '') + COALESCE(@sql + ',', '') + COALESCE(@sql </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
</s
SELECT DATE_FORMAT(DATE, '%Y-%m-%d %H:%i:%s'), DATE_FORMAT(DATE, '%Y-%m-%d %H:%i:%s'), DATE_FORMAT(DATE, '%Y-%m-%d %H:%i:%s'), DATE_FORMAT(DATE, '%Y-%m-%d %H:%i:%s'), DATE_ </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Name ORDER BY Name) AS rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
SELECT </s
SELECT </s
CREATE TRIGGER my_trigger BEFORE INSERT ON my_table FOR EACH ROW BEGIN UPDATE my_table SET my_column = CASE </s
SELECT </s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT </s
SELECT * FROM ( SELECT * FROM table1 UNION ALL SELECT * FROM table2 UNION ALL SELECT * FROM table3 UNION ALL SELECT * FROM table4 UNION ALL SELECT * FROM table5 UNION ALL SELECT * FROM table6 UNION ALL SELECT * </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY MONTH ORDER BY MONTH) rn </s
SELECT * FROM table1 WHERE NOT EXISTS ( SELECT * FROM table2 WHERE table2.field1 = table1.field1 AND table2.field2 = table1.field2 AND table2.field3 = table1.field3 AND table2.field4 = table1.field4 AND table2.field5 = table1.field5 AND table2.field6 = table1.field6 AND table2.field7 = table1. </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Month ORDER BY Date DESC) rn </s
DELETE </s
</s
CREATE TABLE my_table ( </s
UPDATE table_name SET column_name = REPLACE(column_name, '[^,]+', '[^,]+') FROM table_name WHERE column_name = REPLACE(column_name, '[^,]+', '[^,]+') </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, </s
SELECT forums_id FROM forums GROUP BY forums_id HAVING COUNT(*) > 1 </s
DECLARE @StartDate DATETIME; DECLARE @EndDate DATETIME; DECLARE @StartHour DATETIME; DECLARE @EndHour DATETIME; DECLARE @StartMinutes DATETIME; DECLARE @EndMinutes DATETIME; SET @StartDate = DATEADD(MINUTE, -1, @StartDate); SET @EndDate = DATEADD(MINUTE, -1, @EndDate); SET @StartHour = DATEADD(MINUTE, -1, @StartHour); </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.col1 = table1.col1 AND table2.col2 = table1.col2 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT </s
</s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY col1, col2 </s
SELECT UserID FROM UserResource GROUP BY UserID HAVING COUNT(*) > 1 </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table2.id = table1.id AND table2.name = table1.name </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Address) AS rn FROM Table1 ) t WHERE t.rn = 1 </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
SELECT </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43 </s
SELECT </s
SELECT </s
SELECT </s
</s
CREATE OR REPLACE FUNCTION [dbo].[Role] ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY created_at DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
INSERT INTO Table1 (Column1, Column2, Column3, Column4) SELECT Column1, Column2, Column3, Column4 FROM Table1 </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT t1.id, t1.name, t2.name FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
SELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) </s
DELETE </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DELETE FROM Table1 WHERE NOT EXISTS (SELECT 1 FROM Table2 WHERE Table1.ID = Table2.ID AND Table1.Name = Table2.Name </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @sql1 NVARCHAR(MAX) = '' DECLARE @sql2 NVARCHAR(MAX) = '' DECLARE @sql3 NVARCHAR(MAX) = '' DECLARE @sql4 NVARCHAR(MAX) = '' DECLARE @sql5 NVARCHAR(MAX) = '' DECLARE @sql6 NVARCHAR(MAX) = '' DECLARE @sql7 NVARCHAR(MAX) = '' DECLARE @sql8 NVARCHAR(MAX) = '' DECLARE @sql9 NVARCH </s
</s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table </s
SELECT COUNT(DISTINCT </s
select ( select </s
CREATE OR REPLACE FUNCTION [dbo].[MyTable] ( </s
</s
CREATE TABLE books ( book_id </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY gender </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @DateTime varchar(10) SET @DateTime = CONVERT(VARCHAR(10), GETDATE(), 10) SELECT @DateTime </s
DECLARE @date DATETIME SET @date = DATEADD(day, -1, @date) SELECT @date = DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATE </s
SELECT </s
SELECT </s
</s
SELECT * FROM table1 WHERE NOT EXISTS (SELECT 1 FROM table2 WHERE table1.id = table2.id AND table1.name = table2.name </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Name ORDER BY Name) rn </s
SELECT </s
UPDATE table1 SET column1 = CASE </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT * </s
</s
SELECT </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SET @sql = @sql + </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
mysql -u <username> -p <password> mysql -u <username> -p <password> mysql -u <username> -p <password> mysql -u <username> -p <password> mysql -u <username> -p <password> mysql -u <username> -p <password> mysql -u <username> -p <password> mysql -u <username> -p <password> mysql -u <username> -p <password> mysql -u <username> -p <password> </s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[create_database] RETURNS TABLE AS BEGIN DECLARE @SQL VARCHAR(MAX) SET @SQL = 'CREATE OR REPLACE FUNCTION [dbo].[dbo].[create_database] </s
SELECT </s
CREATE OR REPLACE PROCEDURE pg_hba(@username varchar(50), @password varchar(50), @host varchar(50), @port varchar(50), @dbname varchar(50), @user varchar(50), @password1 varchar(50), @dbname1 varchar(50), @user1 varchar(50), @password2 varchar(50), @dbname2 varchar(50), @user2 varchar(50), @password3 varchar(50), @password4 varchar </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT </s
</s
SELECT * FROM ( SELECT </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id = t8. </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY date DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
ALTER TABLE my_table DROP PRIMARY KEY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY [, ] </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX) DECLARE @ </s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY table_name ORDER BY table_name) rn FROM ( SELECT *, </s
select * from ( select * from ( select * from </s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @sql2 NVARCHAR(MAX) = '' DECLARE @sql3 NVARCHAR(MAX) = '' DECLARE @sql4 NVARCHAR(MAX) = '' DECLARE @sql5 NVARCHAR(MAX) = '' DECLARE @sql6 NVARCHAR(MAX) = '' DECLARE @sql7 NVARCHAR(MAX) = '' DECLARE @sql8 NVARCHAR(MAX) = '' DECLARE @sql9 NVARCHAR(MAX) = '' DECLARE @sql10 NV </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( </s
DECLARE @text varchar(100) SET @text = 'Hello World!' SELECT @text = COALESCE(@text + ','+ COALESCE(@text + ','+ COALESCE(@text + ','+ COALESCE(@text + ','+ COALESCE(@text + ','+ COALESCE(@text + ','+ COALESCE(@text + ','+ COALESCE(@text + ','+ COALESCE(@text + ','+ COALESCE(@text + ','+ CO </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users WHERE user_id NOT IN ( SELECT user_id FROM users WHERE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table GROUP BY id HAVING COUNT(*) > 1 ) t WHERE rn = 1 </s
SELECT * FROM TableA a JOIN TableB b ON a.id = b.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY date DESC) rn </s
CREATE TRIGGER [dbo].[Order] ON [dbo].[Order] BEFORE INSERT ON [dbo].[Order] FOR EACH ROW BEGIN UPDATE [dbo].[Order] SET [dbo].[Order] = [dbo].[Order] + 1 WHERE [dbo].[Order] = [dbo].[Order] + 1 OR [dbo].[Order] = [dbo].[Order] + 1 OR [dbo].[Order] = [dbo </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM table ) t WHERE t.rn = 1 </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
declare @sql nvarchar(max) set @sql = 'SELECT * FROM table1' select @sql = @sql +' </s
SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( SELECT * FROM mytable WHERE NOT EXISTS ( </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
DECLARE @StartDate DATETIME, @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) </s
DECLARE @TableName NVARCHAR(MAX) DECLARE @Columns NVARCHAR(MAX) SELECT @TableName = COALESCE(@TableName + ',', '') + '.' + COALESCE(@Columns + ',', '') SELECT @Columns = COALESCE(@Columns + ',', '') + '.' + COALESCE(@Columns + ',', '') SELECT @Columns = COALESCE(@Columns + ',', '') + '.' + COALESCE(@Columns + ', </s
SELECT </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY date DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = N'SELECT * FROM </s
CREATE PROCEDURE [dbo].[MyProc] ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY hour, minute </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DELETE FROM ( SELECT ID, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @StartTime DATETIME DECLARE @EndTime DATETIME SET @StartTime = DATEADD(DAY, -1, @StartTime) SET @EndTime = DATEADD(DAY, -1, @EndTime) SET @StartTime = DATEADD(DAY, -1, @StartTime) SET @EndTime = DATEADD(DAY, -1, @EndTime) SET @StartTime = DATEADD(DAY, -1, @StartTime) SET @EndTime = DATEADD(DAY, </s
SELECT SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( </s
DECLARE @sql VARCHAR(MAX) SET @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') SELECT @sql = REPLACE(@sql, ',', '') </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY date ORDER BY date DESC) rn </s
SELECT DATEADD(day, DATEDIFF(day, 0, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, DATEADD(day, -1, D </s
CREATE TABLE mytable ( </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DELETE FROM MyTable WHERE NOT EXISTS (SELECT 1 FROM MyTable WHERE MyTable.ID = MyTable.ID AND MyTable.ParentID = MyTable.ParentID </s
CREATE OR REPLACE PROCEDURE [dbo].[UserPassword] AS BEGIN SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET NOCOUNT ON; SET </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
SELECT </s
</s
</s
</s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
</s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
UPDATE table1 SET column1 = CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
</s
CREATE PROCEDURE [dbo].[MyProc] ( myProcID int, myProcName varchar(50), myProcDescription varchar(50) ) AS BEGIN SET NOCOUNT ON; SET NOCOUNT ON; INSERT INTO [dbo].[MyProc] (myProcID, myProcName, myProcDescription) SELECT myProcID, myProcName, myProcDescription FROM [dbo].[MyPro </s
SELECT CASE WHEN CASE </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + N' </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
UPDATE table1 t1 JOIN table2 t2 ON t1.id = t2.id JOIN table3 t3 ON t1.id = t3.id JOIN table4 t4 ON t1.id = t4.id JOIN table5 t5 ON t1.id = t5.id JOIN table6 t6 ON t1.id = t6.id JOIN table7 t7 ON t1.id = t7.id JOIN table8 t8 ON t1.id = t8.id JOIN table9 t9 ON t1.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT COUNT(DISTINCT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@ </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY ID) rn </s
SELECT </s
</s
SELECT * FROM ( SELECT </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
CREATE OR REPLACE FUNCTION [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( SUBSTRING( </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM ( SELECT COUNT(*) FROM </s
SELECT SUBSTRING( </s
select t.* from (select t.*, row_number() over (partition by user_id order by created_at desc) as seqnum from t ) t where seqnum = 1; </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
DECLARE @xml XML = '<?xml version="1.0" encoding="UTF-8"?> <?xml version="1.0" encoding="UTF-8"?> <?xml version="1.1" encoding="UTF-8"?> <?xml version="1.2" encoding="UTF-8"?> <?xml version="1.3" encoding="UTF-8"?> <?xml version="1.4" encoding="UTF-8"?> <?xml version="1.5" encoding="UTF-8"?> <?xml version="1.6" encoding="UTF-8"?> <?xml </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
</s
INSERT INTO table (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM </s
SELECT COUNT(DISTINCT </s
SELECT </s
SELECT COUNT(DISTINCT </s
CREATE UNIX_TIMESTAMP ( </s
SELECT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, </s
SELECT COUNT(*) FROM ( SELECT category, ROW_NUMBER() OVER (PARTITION BY category ORDER BY RAND() DESC) AS rn FROM ( </s
SELECT * FROM INFORMATION_SCHEMA.TABLES UNION ALL SELECT * FROM INFORMATION_SCHEMA.TABLES UNION ALL SELECT * FROM INFORMATION_SCHEMA.TABLES UNION ALL SELECT * FROM INFORMATION_SCHEMA.TABLES UNION ALL SELECT * FROM INFORMATION_SCHEMA.TABLES UNION ALL SELECT * FROM INFORMATION_SCHEMA.TABLES UNION ALL SELECT * FROM INFORMATION_SCHEMA.TABLES </s
</s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GET </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.description = t1.description and t1.type = t2.type and t1.value = t2.value and t </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE OR REPLACE FUNCTION [dbo].[Random] ( @Random int ) RETURNS VARCHAR2 AS BEGIN DECLARE @Random int SET @Random = RAND() RETURN @Random END GO CREATE OR REPLACE FUNCTION [dbo].[Random] ( @Random int ) RETURNS VARCHAR2 AS BEGIN DECLARE @Random int SET @Random = RAND() RETURN @ </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id </s
SELECT * FROM sys.procedures WHERE EXISTS ( SELECT * FROM sys.procedures WHERE EXISTS ( SELECT * FROM sys.procedures WHERE EXISTS ( SELECT * FROM sys.procedures WHERE EXISTS ( SELECT * FROM sys.procedures WHERE EXISTS ( SELECT * FROM sys.procedures WHERE EXISTS ( SELECT * FROM sys.procedures WHERE EXISTS ( </s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn FROM table ) t WHERE rn = 1 </s
DECLARE @TempTable TABLE( </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
UPDATE table1 SET column1 = CASE </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, -1, @StartDate) SET @EndDate = DATEADD(MONTH, -1, @EndDate) SELECT @StartDate = DATEADD(MONTH, -1, @StartDate) SELECT @EndDate = DATEADD(MONTH, -1, @EndDate) SELECT @StartDate = DATEADD(MONTH, -1, @StartDate) SELECT @EndDate = </s
SELECT * FROM YourTable WHERE NOT EXISTS ( SELECT * FROM YourTable WHERE NOT EXISTS ( SELECT * FROM YourTable WHERE NOT EXISTS ( SELECT * FROM YourTable WHERE NOT EXISTS ( SELECT * FROM YourTable WHERE NOT EXISTS ( SELECT * FROM YourTable WHERE NOT EXISTS ( SELECT * </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
</s
SELECT </s
</s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE( </s
DECLARE @sql NVARCHAR(MAX) SET @sql = N'SELECT * FROM </s
ALTER DATABASE [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo </s
DELETE FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 FROM MyTable WHERE NOT EXISTS ( SELECT 1 </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
</s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT DATEADD(DAY, -1, GETDATE()) FROM ( SELECT DATEADD(DAY, -1, GETDATE()) UNION ALL SELECT DATEADD(DAY, -1, GETDATE()) UNION ALL SELECT DATEADD(DAY, -1, GETDATE()) UNION ALL SELECT DATEADD(DAY, -1, GETDATE()) UNION ALL SELECT DATEADD(DAY, -1, GETDATE()) </s
MERGE </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT user_id FROM ( SELECT user_id FROM ( SELECT user_id FROM </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY priority DESC) rn </s
SELECT </s
UPDATE table1 SET column1 = CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) AS rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name) AS rn </s
</s
SELECT </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at DESC) AS rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM </s
select t1.* from table1 t1 left join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2; </s
SELECT </s
CREATE TABLE my_table ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY category ORDER BY date DESC) rn </s
select t.* from (select t.*, row_number() over (partition by t.*, </s
</s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
CREATE OR REPLACE FUNCTION [dbo].[update_table] ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY timestamp DESC) rn </s
</s
SELECT COUNT(DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
with cte as ( select *, row_number() over (partition by id order by id) as rn from your_table ) select * from cte where rn = 1 </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
</s
update table1 set date = (select max(date) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
INSERT INTO table1 (col1, col2, col3, col4) SELECT col1, col2, col3, col4 FROM table1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX </s
CREATE UNIQUE INDEX </s
</s
CREATE UNIQUE INDEX , </s
DELETE </s
</s
select sum(case when... then 1 else 0 end), sum(case when... then 0 else 1 end), sum(case when... then 0 else 1 end), sum(case when... then 0 else 1 end), sum(case when... then 0 else 1 end), sum(case when... then 0 else 1 end), sum(case when... then 0 else 1 end), sum(case when... then 0 else 1 end </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
DECLARE @t TABLE( </s
SELECT </s
SELECT </s
CREATE OR REPLACE PROCEDURE [dbo].[dbo].[SplitPK] </s
SELECT </s
SELECT COUNT(*) AS "CATEGORY AVERAGE", COUNT(*) AS "CATEGORY B", COUNT(*) AS "CATEGORY C", COUNT(*) AS "CATEGORY D", COUNT(*) AS "CATEGORY E", COUNT(*) AS "CATEGORY F", COUNT(*) AS "CATEGORY </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col </s
DECLARE @t TABLE ( </s
declare @id int set @id = 1 declare @name varchar(100) set @name = 'John' select @id = 1 select @name = 'John' select @id = 2 select @id = 3 select @id = 4 select @id = 5 select @id = 6 select @id = 7 select @id = 8 select @id = 9 select @id = 10 select @id = 11 select @id = 12 select @id = 13 select @id = 14 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM ( SELECT </s
</s
</s
SELECT COUNT(*) FROM votes GROUP BY COUNT(*) HAVING COUNT(*) > 1 </s
</s
SELECT COUNT(DISTINCT </s
</s
SELECT </s
ALTER TABLE [dbo].[MyTable] DROP PRIMARY KEY [dbo].[MyTable] </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY CustomerID </s
</s
UPDATE ( SELECT ID, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) AS rn FROM ( SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
UPDATE ( SELECT </s
</s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id </s
SELECT * FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table WHERE NOT EXISTS ( SELECT 1 FROM table </s
SELECT </s
</s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ @sql SELECT @sql = COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','+ COALESCE(@sql + ','</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @ </s
</s
DECLARE @TableName NVARCHAR(MAX) DECLARE @SQL NVARCHAR(MAX) DECLARE @Query NVARCHAR(MAX) SET @SQL = 'SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
SELECT COUNT(DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
DECLARE @StartTime datetime DECLARE @EndTime datetime SET @StartTime = DATEADD(DAY, -1, @StartTime) SET @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartTime = DATEADD(DAY, -1, @StartTime) SELECT @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartTime = DATEADD(DAY, -1, @StartTime) SELECT @EndTime = DATEADD(DAY, -1, @EndTime) SELECT @StartTime </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COAL </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45 </s
SELECT </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM Table1 ) SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM CTE WHERE rn = 1 </s
SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT * FROM </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @End </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) SELECT @sql = COALESCE(@sql + ', ', '') + COALESCE(@query + ', ', '') + COALESCE(@query + ', ', '') + COALESCE(@query + ', ', '') + COALESCE(@query + ', ', '') + COALESCE(@query + ', ', '') + </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
</s
CREATE UNIQUE INDEX idx_product_idx ON product (product_id); CREATE INDEX idx_product_idx2 ON product (product_id); CREATE INDEX idx_product_idx3 ON product (product_id); CREATE INDEX idx_product_idx4 ON product (product_id); CREATE INDEX idx_product_idx5 ON product (product_id); CREATE INDEX idx_product_idx6 ON product (product_id); CREATE INDEX idx_product_idx7 ON </s
SELECT </s
</s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY year, month, day ORDER BY month DESC) rn FROM table ) t WHERE t.rn = 1 </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ItemID </s
</s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1.id = </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT @sql ='+ QUOTENAME(@sql) SELECT @sql = QUOTENAME(@sql) </s
</s
SELECT </s
SELECT DATE_FORMAT(year, '%Y-%m-%d') </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR( </s
SELECT </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY quantity DESC) AS rn FROM ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn FROM table ) t WHERE t.rn = 1 </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl6 NVARCHAR(MAX) DECLARE @tbl7 NVARCHAR(MAX) DECLARE @tbl8 NVARCHAR(MAX) DECLARE @tbl9 NVARCHAR(MAX) </s
select max(id) from table group by id </s
SELECT COUNT(DISTINCT </s
SELECT </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETD </s
SELECT </s
SELECT </s
INSERT INTO table1 (col1, col2, col3, col4, col5) SELECT col1, col2, col3, col4, col5 FROM table1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( </s
</s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @sql2 NVARCHAR(MAX) = '' DECLARE @sql3 NVARCHAR(MAX) = '' DECLARE @sql4 NVARCHAR(MAX) = '' DECLARE @sql5 NVARCHAR(MAX) = '' DECLARE @sql6 NVARCHAR(MAX) = '' DECLARE @sql7 NVARCHAR(MAX) = '' DECLARE @sql8 NVARCHAR(MAX) = '' DECLARE @sql9 NVARCHAR(MAX) = '' DECLARE @sql10 NV </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
</s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY name ORDER BY name) rn </s
DECLARE @sql NVARCHAR(MAX) = '' SELECT @sql = @sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + COALESCE(@sql + CO </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl1 NVARCHAR(MAX) DECLARE @tbl2 NVARCHAR(MAX) DECLARE @tbl3 NVARCHAR(MAX) DECLARE @tbl4 NVARCHAR(MAX) DECLARE @tbl5 NVARCHAR(MAX) DECLARE @tbl </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t1 </s
</s
SELECT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT COUNT(DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
SELECT </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
select t1.* from table1 t1 join table2 t2 on t1.id = t2.id and t1.name = t2.name and t2.city = t1.city and t2.state = t1.state and t2.zip = t1.zip and t2.city = t1.city and t2.state = t </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
declare @tablename varchar(max) set @tablename = 'tablename1' select @tablename = 'tablename2' select @tablename = 'tablename3' select @tablename = 'tablename4' select @tablename = 'tablename5' select @tablename = 'tablename6' select @tablename = 'tablename7' select @tablename = 'tablename8' select @tablename = 'tablename9' </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY message_id DESC) AS rn FROM messages WHERE user_id = @user_id ) WHERE rn = 1 </s
CREATE OR REPLACE PROCEDURE [dbo].[schema_access] </s
</s
DECLARE @TableName NVARCHAR(MAX) DECLARE @SQL NVARCHAR(MAX) DECLARE @Query NVARCHAR(MAX) SET @SQL = 'SELECT @TableName ='+ @TableName +'FROM'+ </s
SELECT </s
SELECT </s
select substring( </s
SELECT </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) SELECT @StartDate = DATEADD(DAY, -1, @StartDate) SELECT @EndDate = DATEADD(DAY, -1, @EndDate) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT p.id, p.name FROM players p LEFT JOIN teams t ON t.id = p.team_id GROUP BY p.id, p.name HAVING COUNT(DISTINCT t.id) = 1 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT </s
SELECT DISTINCT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id UPDATE table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id INNER JOIN table3 t3 ON t1.id = t3.id </s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'CREATE TABLE IF NOT EXISTS'+ </s
SELECT </s
UPDATE ( SELECT </s
SELECT </s
SELECT t1.* FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(DISTINCT t2.id) = 2 </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO table1 (col1, col2, col3, col4) VALUES (' + </s
DELETE FROM </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = COALESCE(@sql + ' </s
SELECT t1.* FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
declare @sql nvarchar(max), @sqlplus nvarchar(max), @sql2 nvarchar(max), @sql3 nvarchar(max), @sql4 nvarchar(max), @sql5 nvarchar(max), @sql6 nvarchar(max), @sql7 nvarchar(max), </s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col </s
SELECT t1.* FROM table1 t1 JOIN table2 t2 ON t1.id = t2.table1_id JOIN table3 t3 ON t1.id = t3.table1_id JOIN table4 t4 ON t1.id = t4.table1_id JOIN table5 t5 ON t1.id = t5.table1_id JOIN table6 t6 ON t1.id = t6.table1_id JOIN table7 t7 ON t1.id = t7.table1_id JOIN table8 t8 ON </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM TableA WHERE NOT EXISTS (SELECT 1 FROM TableB WHERE TableB.ColumnA = TableA.ColumnA AND TableB.ColumnB = TableA.ColumnB </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(MONTH, -1, @StartDate) SET @EndDate = DATEADD(MONTH, -1, @EndDate) SET @StartDate = DATEADD(MONTH, 1, @StartDate) SET @EndDate = DATEADD(MONTH, 2, @EndDate) SET @StartDate = DATEADD(MONTH, 3, @StartDate) SET @EndDate = DATEADD(MONTH, 4, @EndDate) </s
</s
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY word ORDER BY word) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
</s
DECLARE @sql NVARCHAR(MAX) = '' DECLARE @sql2 NVARCHAR(MAX) = '' DECLARE @sql3 NVARCHAR(MAX) = '' DECLARE @sql4 NVARCHAR(MAX) = '' DECLARE @sql5 NVARCHAR(MAX) = '' DECLARE @sql6 NVARCHAR(MAX) = '' DECLARE @sql7 NVARCHAR(MAX) = '' DECLARE @sql8 NVARCHAR(MAX) = '' DECLARE @sql9 NVARCHAR(MAX) = '' </s
CREATE TRIGGER [dbo].[UpdateTrigger] AFTER UPDATE ON [dbo].[TableName] FOR EACH ROW BEGIN INSERT INTO [dbo].[TableName] VALUES ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at DESC) AS rn FROM ( SELECT user_id, created_at FROM ( </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY RoomID ORDER BY RoomID) rn </s
SELECT </s
UPDATE </s
DELETE t1 FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id LEFT JOIN table3 t3 ON t1.id = t3.id LEFT JOIN table4 t4 ON t1.id = t4.id LEFT JOIN table5 t5 ON t1.id = t5.id LEFT JOIN table6 t6 ON t1.id = t6.id LEFT JOIN table7 t7 ON t1.id = t7.id LEFT JOIN table8 t8 ON t </s
</s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM'+ </s
</s
SELECT </s
CREATE TRIGGER [dbo].[BulkCopy] ON [dbo].[TableName] AFTER INSERT ON [dbo].[TableName] FOR EACH ROW BULK INSERT ON [dbo].[TableName] FOR EACH ROW BULK INSERT ON [dbo].[TableName] FOR EACH ROW BULK INSERT ON [dbo].[TableName] FOR EACH ROW BULK INSERT ON [dbo].[TableName] FOR EACH ROW BULK INS </s
</s
UPDATE ( SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn FROM ( SELECT </s
</s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql + ' </s
select * from ( select t.*, row_number() over (partition by id order by id) as seqnum from table t ) t where seqnum = 1; </s
CREATE TABLE my_table ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY Date DESC) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
DELETE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn FROM </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY date ORDER BY date DESC) rn </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
CREATE TABLE my_table ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
</s
</s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( ROW_NUMBER() OVER ( </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn FROM TableA ) a WHERE rn = 1 </s
SELECT </s
declare @sql nvarchar(max) set @sql = 'SELECT @sql ='+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @tbl NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY user ORDER BY date DESC) rn </s
DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM table1' SELECT @sql = @sql +' </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate) SET @StartDate = DATEADD(DAY, -1, @StartDate) SET @EndDate = DATEADD(DAY, -1, @EndDate </s
SELECT </s
DELETE FROM ( SELECT id, name, row_number() over (partition by id order by name) rn FROM </s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
</s
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY CASE </s
SELECT </s
DECLARE @sql NVARCHAR(MAX) SET @sql = @sql + 'CREATE TABLE'+ </s
DECLARE @sql NVARCHAR(MAX) DECLARE @query NVARCHAR(MAX) DECLARE @cursor NVARCHAR(MAX) SELECT @cursor = CURSOR </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
DECLARE @sql NVARCHAR(MAX) DECLARE @sql1 NVARCHAR(MAX) DECLARE @sql2 NVARCHAR(MAX) DECLARE @sql3 NVARCHAR(MAX) DECLARE @sql4 NVARCHAR(MAX) DECLARE @sql5 NVARCHAR(MAX) DECLARE @sql6 NVARCHAR(MAX) DECLARE @sql7 NVARCHAR(MAX) DECLARE @sql8 NVARCHAR(MAX) DECLARE @sql9 NVARCHAR(MAX) DECLARE @sql10 NVARCHAR(MAX) </s
select t1.* from table1 t1 inner join table2 t2 on t1.id = t2.id group by t1.id having count(distinct t2.id) = 2 </s
DECLARE @StartDate DATETIME DECLARE @EndDate DATETIME SET @StartDate = DATEADD(DAY, -1, GETDATE()) SET @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) SELECT @StartDate = DATEADD(DAY, -1, GETDATE()) SELECT @EndDate = DATEADD(DAY, -1, GETDATE()) </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
SELECT </s
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT </s
WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
</s
</s
INSERT INTO table1 (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18, col19, col20, col21, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, </s
SELECT * FROM ( SELECT * FROM ( SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL SELECT * UNION ALL </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
declare @sql nvarchar(max) set @sql ='select * from [dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[dbo].[ </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
SELECT </s
SELECT COUNT(DISTINCT </s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT </s
</s
SELECT </s
SELECT * FROM goals WHERE goals.goal_id IN ( SELECT goals.goal_id FROM goals WHERE goals.goal_id IN ( SELECT goals.goal_id FROM goals WHERE goals.goal_id IN ( SELECT goals.goal_id FROM goals WHERE goals.goal_id IN ( SELECT goals.goal_id FROM goals WHERE goals.goal_id IN ( SELECT goals.goal_id </s
CREATE UNIQUE INDEX idx_product_idx ON product (product_id); CREATE INDEX idx_product_idx2 ON product (product_id); CREATE INDEX idx_product_idx3 ON product (product_id); CREATE INDEX idx_product_idx4 ON product (product_id); CREATE INDEX idx_product_idx5 ON product (product_id); CREATE INDEX idx_product_idx6 ON product (product_id); CREATE INDEX idx_product_idx7 ON </s
</s
</s
SELECT </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id) rn </s
SELECT COUNT(*) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY </s
UPDATE Table1 SET Column1 = Column2 FROM Table1 INNER JOIN Table2 ON Table1.Column1 = Table2.Column1 WHERE Table1.Column2 = Table2.Column2 </s
</s
</s
SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT COUNT(*) FROM </s
</s
SELECT </s
SELECT </s
SELECT </s
UPDATE YourTable SET YourColumn = CASE </s
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY id DESC) rn </s
