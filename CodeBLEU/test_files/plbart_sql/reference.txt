select time, activities, count(*) from table group by time, activities;
SELECT i_adgroup_id, array_agg(i_category_id) FROM adgroupcategories_br WHERE i_adgroup_id IN ( SELECT i_adgroup_id FROM adgroupusers_br WHERE i_user_id = 103713 ) GROUP BY i_adgroup_id;
SELECT @RecordType AS RecordType_1, AbstractData.AccountNumber AS AcctNum_2, COALESCE(AD.Diagnosis, '') AS Dx_3 FROM AbstractData LEFT JOIN AbsDrgDiagnoses AD ON AD.VisitID = AbstractData.VisitID WHERE AbstractData.PtStatus <> 'REF' AND AD.DiagnosisSeqID = '1'
111.045*DEGREES(ACOS(COS(RADIANS(lat1)) * COS(RADIANS(lat2)) * COS(RADIANS(long1) - RADIANS(long2)) + SIN(RADIANS(lat1)) * SIN(RADIANS(lat2)))) AS distance_in_km
delimiter // create trigger ins_table2 after insert on table1 for each row begin declare t2_cnt_index int default 1; while t2_cnt_index <= new.num do insert into Table2 (desc2,id1) values (new.desc2,new.id1); set t2_cnt_index := t2_cnt_index + 1; end while ; end ; // delimiter ;
update table set TRANSFER_TITLE = ID || PAYMENT_BASE || PAYMENT_A || PAYMENT_B || PAYMENT_C || PARTNER_ID
SELECT DISTINCT u.host ,first_value(usage) OVER w AS first_usage ,last_value(usage) OVER w AS last_usage FROM usage u WINDOW w AS (PARTITION BY host ORDER BY logtime, usage ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
Dim d As DAO.Database Dim r As DAO.Recordset Dim s As String Set d = CurrentDb() Set r = d.OpenRecordset("SELECT foo, bar, baz FROM foobar") s = "" While Not r.EOF s = s & r!foo & "," & r!bar & "," & r!baz & ";" r.MoveNext Wend r.Close Set r = Nothing Set d = Nothing s = SHA1TRUNC(s)
delete from campaingMailList where campaingId not in (select campaingid from campaigns)
;WITH Data AS ( SELECT [QUOTE Ref], [Product Line], [Value] FROM ( SELECT [QUOTE Ref], [Product A], [Product B], [Product C], [Product D] FROM [Table1] ) p UNPIVOT ([Value] FOR [Product Line] IN ([Product A], [Product B], [Product C], [Product D] ) )AS unpvt ) SELECT * FROM DATA WHERE Value <> 0;
SELECT CONCAT(fo.first_name, ' ', fo.last_name, if (fights.winner=1, "Winner", "Loser")) 'Fighter 1', CONCAT(ft.first_name, ' ', ft.last_name, if (fights.winner=2, "Winner", "Loser")) 'Fighter 2', CONCAT(victory_method.name, ' (', method_notes, ')') 'Victory' FROM fights INNER JOIN fighters as fo ON fights.fighter1_id = fo.id INNER JOIN fighters as ft ON fights.fighter2_id = ft.id INNER JOIN victory_method ON fights.victory_method_id = victory_method.id
array_length(array[[1, 2], [3, 4], [5, 6]], 1) ---> 3 array_length(array[[1, 2], [3, 4], [5, 6]], 2) ---> 2
SELECT CategoryId, MIN(SWITCH(YourTable.Flag = 'a',Value)) AS aValue, MIN(SWITCH(YourTable.Flag = 'm',Value)) AS mValue, MIN(SWITCH(YourTable.Flag = 'p',Value)) AS pValue FROM YourTable GROUP BY CategoryId
case when regexp_like(A, 'XXX/MOSCOW/XXXMSX/[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]') then 'true' else 'false' end
select t1.column2 from table1 t1 left join table2 t2 on t1.id = t2.id
IF @DateExpired = 1 SELECT sens.date1 AS Expired FROM sens ELSE SELECT sens.date1 AS [Due Date] FROM sens
SELECT CASE @Flag WHEN 1 THEN t.field1 WHEN 2 THEN t.field2 WHEN 3 THEN t.field3 END as field, [A bunch of other fields], @Flag as flag FROM table t
Select ID, Type, Price, Code, Date from tblPRODUCT tbpr where (Code = '1234' AND Date IN (Select MAX(Date) from tblPRODUCT where type= tbpr.type and code = '1234')) OR Date IN (Select MAX(Date) from tblPRODUCT where type= tbpr.type and not exists(select code from tblPRODUCT where type= tbpr.type and code is not null) )
SELECT tbl2.userid, tb2.col3 AS [your name here], tbl1.col1 AS [your name here], ... FROM tbl2 INNER JOIN tbl1 ON tbl1.userid = tb2.userid WHERE tbl2.userid = "testuser"
SELECT Key FROM keys k INNER JOIN users u ON k.UserId = u.UserId WHERE u.UserName = 'username'
SELECT Col1, Col2, Col3, Col4 FROM MyTable WHERE Col1 NOT IN (Col2,Col3,Col4) AND Col2 NOT IN (Col3,Col4) AND Col3 <> Col4
select ... from ... order by case when name is null then 0 else 4 end + case when distance is null then 0 else 3 end + case when proximity is null then 0 else 2 end desc
SELECT s.studentid, s.name,notes.courseid ,count(1) CNT FROM student s INNER JOIN notes ON s.studentid = notes.studentid WHERE (notes.note) < "50" group by s.studentid, s.name, notes.courseid ORDER BY student.name
@topParam select TOP (COALESCE (@topParam, 1000000000))
CREATE OR REPLACE TYPE PARENT AS OBJECT (...); CREATE OR REPLACE TYPE CHILD UNDER PARENT (...); CREATE TABLE PEOPLE OF PARENT;
CREATE TABLE Member ( MemberID , Org_Type , Name , ... , Role , PRIMARY KEY (MemberID) , UNIQUE KEY (Org_Type, MemberID) , CHECK Org_Type IN (1, 2, 3) ) ; CREATE TABLE Member_Type_1 ( MemberID , Org_Type , Location , PRIMARY KEY (MemberID) , FOREIGN KEY (Org_Type, MemberID) REFERENCES Member(Org_Type, MemberID) , CHECK Org_Type = 1 ) ;
select * from dbo.myDatabase where ([Date] = (select max([Date]) from /* your query */ ) or [Date] = (select min([Date]) from /* your query */ )) and MachineId = '7B788EE88E-6527-4CB4-AA4D-01B7F4048559' -- or any other id
SELECT CAST((columnName * 100) as INTEGER) NewValue FROM TableName;
SELECT allSt.* FROM students allSt join students st -- check the same majorSubject AND the same minorSubject -- on allSt.majorSubject = st.majorSubject and allSt.minorSubject = st.minorSubject WHERE st.rollNumber = '<rollNumber>' AND -- exclude student with the given rollNumber from the result set -- allSt.rollNumber <> '<rollNumber>'
mysql> select find_in_set(2, '1, 2, 3'); +---------------------------+ | find_in_set(2, '1, 2, 3') | +---------------------------+ | 0 | +---------------------------+ mysql> select find_in_set(2, '1,2,3'); +-------------------------+ | find_in_set(2, '1,2,3') | +-------------------------+ | 2 | +-------------------------+
SELECT user.name, profile.bio, rate.rate FROM user LEFT JOIN profile ON user.id = profile.user_id LEFT JOIN rate ON user.id = rate.user_id WHERE status = 'active'
select id, name,parentID from @a where name like @Letter or ID in (select ParentID from @a where name like @Letter)
areaid areaname townname 1 AA AA 1 AA BB
UNHEX(REPLACE(UUID(),'-',''))
DECLARE TABLE @MYTABLE ( ID INT IDENTITY, VALUES...... ) INSERT INTO @MYTABLE SELECT MYVALUES..... SELECT * FROM @MYTABLE
update mytable1 t1 inner join mytable2 t2 on (t1.a=t2.a or t1.b=t2.b or t2.c=t1.c) set t1.state=5,t2.state=5 where((cast(t1.a=t2.a as unsigned integer) + (cast(t1.b=t2.b as unsigned integer) + (cast(t1.c=t2.c as unsigned integer)) <3) and t1.state=0;
SELECT ... FROM ... WHERE somecol >= '2011-01-01' AND somecol <= '2011-01-30'
INSERT INTO second_table (Bill_Number, Rest_Inform_Status, Rest_Response_Status) SELECT ft.Bill_Number, @default_inform_status, @default_response_status FROM first_table ft LEFT JOIN second_table st ON st.Bill_Number = ft.Bill_number WHERE st.Bill_Number IS NULL
INSERT INTO Colleges (CollegeName) SELECT DISTINCT CollegeName FROM OLdTable ; INSERT INTO Courses (CollegeID, CourseName) SELECT Colleges.CollegeID, OldTable.CourseName FROM OldTable JOIN Colleges ON OldTable.CollegeName = Colleges.CollegeName ;
with c as ( select *, row_number() over(partition by name, name2, [user] order by id) as n from YourTable ) delete from c where n > 1;
select 'SC' as Characteristic_Name, SC as Val from yourtable union all select 'DO' as Characteristic_Name, DO as Val from yourtable union all select 'temp' as Characteristic_Name, temp as Val from yourtable union all select 'pH' as Characteristic_Name, pH as Val from yourtable union all select 'etc' as Characteristic_Name, etc as Val from yourtable;
UPDATE tablename SET value1 = concat(0,value1) WHERE length(value1)=4
delete p1 from product p1 join product_description d1 on d1.product_id = p1.product_id join product_description d2 on d2.product_id <> d1.product_id and d2.language_id = d1.language_id and d2.name = d1.name join product p2 on p2.product_id = d2.product_id where d1.language_id = 1 -- define the language used for product name and (p2.price > p1.price -- delete if higher price exists or p2.price = p1.price and p2.product_id < p1.product_id -- delete if same price with lower id exists ) ;
Select CHARINDEX ('S','MICROSOFT SQL SERVER 2000') Result: 6
select datediff(second,depart_dt, arrived_dt)/86400 as Day, datediff(second,depart_dt, arrived_dt)/3600%24 as Hour, datediff(second,depart_dt, arrived_dt)/60%60 as Minute, datediff(second,depart_dt, arrived_dt)%60 as Second from yourtable
SELECT (CASE WHEN id_1 IN ('1', 'AF', 'C') THEN id_1 WHEN id_2 IN ('1', 'AF', 'C') THEN id_2 WHEN id_3 IN ('1', 'AF', 'C') THEN id_3 ELSE 0 END ) id ,name FROM table WHERE (id_1 IN ('1', 'AF', 'C')) OR (id_2 IN ('1', 'AF', 'C')) OR (id_3 IN ('1', 'AF', 'C'));
SELECT objectName, objectType FROM objectTable INNER JOIN objectids ON (objecttable.objectid = objectids.id)
SELECT * FROM myTable WHERE desc LIKE U&'%\2028%'
select b.* from yourtable a left join yourtable b on ( a.Patient_ID = b.Patient_ID and a.DateOfService = b.DateOfService) where a.CPTCode = "some value"
CREATE TRIGGER [dbo].[Group_Update] ON [dbo].[TBL_ADM_USER_GROUP] AFTER UPDATE AS BEGIN SET NOCOUNT ON; INSERT INTO TBL_TestTable -- define column list for clarity SELECT CONCAT('Group "' ,i.name,'" is updated'), 'GROUP', 'Update', SYSDATETIME(), i.changer_user_id FROM inserted i; END
Select GeneName, count(*) from genes group by GeneName;
SELECT cpe.entity_id, cpe.sku, cpe_int.value as visibility FROM catalog_product_entity as cpe LEFT JOIN catalog_category_product as ccp on cpe.entity_id = ccp.product_id LEFT JOIN catalog_product_entity_int as cpe_int ON cpe.entity_id = cpe_int.entity_id AND cpe_int.attribute_id = 89 WHERE ccp.category_id IS NULL
insert into tab2 (field1, field2, field3, field4) select field1, field2, field3, 'New Value' from tab1
SELECT d.device, s.service, r.hits FROM dt_devs d INNER JOIN dt_serv s ON d.serviceID = s.serviceID LEFT JOIN results r ON d.deviceID = r.deviceID
strDdl = "ALTER TABLE Dummy ALTER COLUMN ID COUNTER(1, 1);" CurrentProject.Connection.Execute strDdl
CREATE SEQUENCE your_pk_seq; CREATE TRIGGER trg_populate_pk BEFORE INSERT ON your_table_name FOR EACH ROW BEGIN SELECT 'S' || to_char( your_pk_seq.nextval ) INTO :new.primary_key_column FROM dual; END;
select Years,number as Month,isnull(Total,0) as Total from( select number from master..spt_values where type='P' and number between 1 and 12) seq cross join (select distinct Year([date]) as Years from Table1) y left join (select Year([date])as Year,month([date])as Month,sum(total) as Total from Table1 group by Year([date]),month([date]))t on seq.number=t.Month and t.year=y.Years
select o.OrderNo, OrderDate, ol.Amount,(select sum(oll.Amount * oll.UnitPrice) from OrderLine oll where oll.OrderNo = o.OrderNo) as OrderTotal ....
select empid, sum(case when attendance = 'P' then 1 end) as presents, sum(case when attendance = 'A' then 1 end) as absents from EmpAttendance group by empid
SELECT rec_date_sf(registration) as date_rent_start, registration FROM i_booking WHERE registration = 'E246WFC';
=Join(LookupSet(Fields!grade.Value & Fields!od.Value & Fields!wall.Value & Fields!id.Value, Fields!grade.Value & Fields!od.Value & Fields!wall.Value & Fields!id.Value, RTrim(Fields!stock_number.Value), "FOC"), ", ")
SELECT coalesce(t1.x, t2.x) x, t1.y, t2.z FROM (select count(y), x from a group by x) t1 full join (select count(z), x from b group by x) t2 on (t1.x = t2.x)
select p.* from (select p.*, (lag(clock, 1) over () - clock) as diff from plays p ) p where possession = 'away';
SELECT product_tracking.user_id, SUM(CASE WHEN product_tracking.product='A' THEN 1 ELSE 0 END) AS A, SUM(CASE WHEN product_tracking.product='B' THEN 1 ELSE 0 END) AS B, SUM(CASE WHEN product_tracking.product='C' THEN 1 ELSE 0 END) AS C FROM product_tracking GROUP BY product_tracking.user_id
SELECT cities, CASE WHEN COUNT(*) = 1 THEN '1' WHEN COUNT(*) BETWEEN 2 AND 5 THEN '2-5' WHEN COUNT(*) > 5 THEN '5' END category, LISTAGG(people, ',') WITHIN GROUP (ORDER BY people) AS names FROM your_table GROUP BY cities
SELECT t1.Id, t1.Name, t2.Color from TableA t1 left outer join TableB t2 on t1.Id_TableB = t2.Id;
SELECT t.Opp, avg(Points) FROM (SELECT gl.team, gl.Opp, AVG(gl.Points) as Points FROM Players p INNER JOIN NBAGameLog gl ON p.Player_ID = gl.Player_ID WHERE (gl.Date_Played Between Date()-15 And Date() AND p.Position = "C" GROUP BY gl.team, gl.Opp; ) t GROUP BY t.Opp;
SELECT name, continent, population FROM world x WHERE continent in (SELECT continent FROM world group by continent having max(population) < 25000000)
SELECT COUNT(*) AS cnt FROM products WHERE ExternalProductId IS NOT NULL GROUP BY ExternalProductId, SourceId HAVING cnt > 1
begin dbms_job.broken(23, true); commit; end; /
select coalesce(p.name, f.name) as name from contacts c left join people p on p.contacts_id = c.id and c.type = 'person' left join firms f on f.contacts_id = c.id and c.type = 'firm' where c.id = 42;
select i1.item_id,i2.item_id,count(1) from items i1 join categorizations c1 on c1.item_id=i1.item_id join categorizations c2 on c2.category_id=c1.category_id join items i2 on c2.item_id=i2.item_id where i1.item_id <> i2.item_id group by i1.item_id,i2.item_id order by count(1)
DECLARE @ID BIGINT INSERT INTO dbo.TABLE_ID (Table_NAME) SELECT 'Table_Products' SELECT @ID = SCOPE_IDENTITY() INSERT INTO dbo.Table_Products (ID, Product_Name) SELECT @ID, 'SomeProduct'
WHERE field LIKE '%ZZZ%' AND field NOT LIKE 'Additional comments:%ZZZ%'
SELECT CAST(CASE WHEN OLEFLOAT > 0 THEN OLEFLOAT-2.0 ELSE 2*CAST(OLEFLOAT AS INT) - 2.0 + ABS(OLEFLOAT) END as datetime)
SELECT MY_TABLE.*, (CHANGE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS FORMATED_DATE FROM MY_TABLE;
select p.floor,p.[1] as room1,p.[2] as room2,p.[3] as room3 from ( select floor,apt,row_number() over(partition by floor order by apt) as rn from #t) as t pivot ( min(t.apt) for t.rn in([1],[2],[3]) )as p;
select c.id_contract , p.id_pfo , nvl(l.budget,0) value from contracts c cross join portfolios p left outer join "contract_Linked_pfo" l on l.id_contract = c.id_contract and l.id_pfo = p.id_pfo ;
:setvar filename somefile.ext :setvar version 1 :on error exit print 'This is version $(version) on $(filename)' -- the rest of the actual script
SELECT cust, date, store, COUNT(*) AS n_items, SUM(item_type = 1) AS item1, SUM(item_type = 2) AS item2, SUM(item_type = 3) AS item3, SUM(item_type = 4) AS item4 FROM t GROUP BY cust, date, store
WHERE DTH.PointPerson LIKE @userParam AND ActivityDate >= @startDateParam AND ActivityDate <= @endDateParam AND ( (@orgTeamPK = '%' AND (USR.[OrganizationalTeamId] LIKE @orgTeamPK OR USR.[OrganizationalTeamId] IS NULL) ) OR (@orgTeamPK <> '%' AND (USR.[OrganizationalTeamId] LIKE @orgTeamPK ) )
SELECT a,b FROM table WHERE b = (SELECT MAX(b) FROM table)
create function hun_first_letter(name in varchar2) return varchar2 as begin if substr(upper(name),1,3) in ('DZS') then return substr(name,1,3); elsif substr(upper(name),1,2) in ('CS','DZ','LY','NY','SZ','TY','ZS','GY') then return substr(name,1,2); else return substr(name,1,1); end if; end;
SELECT hist.I_PAYT_REF AS PAY_REF, hist.C_USERID AS USER_ID, PAYT.I_PAYT_REQ_SUM AS PAYMENT_FILE_ID FROM SP.TSP_CP_HIST hist left join SP.TSP_CP_PAYT_RQ_DTL PAYT ON PAYT.I_PAYT_REF = hist.I_PAYT_REF WHERE hist.C_HIST_TYPE ='V'
CREATE TABLE User ( Name VARCHAR(10) NOT NULL , PRIMARY KEY (Name) ) ; CREATE TABLE MutualFriendship ( u1 VARCHAR(10) NOT NULL , u2 VARCHAR(10) NOT NULL , PRIMARY KEY (u1, u2) , FOREIGN KEY (u1) REFERENCES User(Name) , FOREIGN KEY (u2) REFERENCES User(Name) , CHECK (u1 < u2) ) ;
where datetime('now') >= coalesce(fromDate, datetime('now')) datetime('now') <= coalesce(toDate, datetime('now'))
SELECT e.id, e.title, COALESCE(ca.text, es.text, e.content) content FROM events e LEFT JOIN localizations ca ON ca.row_id = e.id AND ca.language = 'ca' LEFT JOIN localizations es ON es.row_id = e.id AND es.language = 'es'
select ItemId from Item_has_category group by ItemId having sum(case when CategoryId = 1 then 1 end) = 1 or sum(case when CategoryId = 2 then 1 end) = 1 andsum(case when CategoryId = 3 then 1 end) = 1
UPDATE a75ting.username SET points = points - 5
INSERT INTO actions(Action) VALUES ('Go to the pub'); SET @aid = LAST_INSERT_ID(); INSERT INTO statements(statement, Language) VALUES ('Have a pint', 'English'); SET @sid = LAST_INSERT_ID(); INSERT INTO Relationships(SID,AID) VALUES (@sid,@aid);
SELECT A.ID, A.NAME, A.DESC, CASE B.ISEMPTY WHEN 1 THEN 1 ELSE A.ISEMPTY END CASE AS ISEMPTY FROM TABLE2 A LEFT JOIN TABLE1 B ON A.ID=B.ID
SELECT SUM(COUNT) AS Actions, (CASE event WHEN 1 THEN 'Web' WHEN 2 THEN 'iOS' WHEN 3 THEN 'Android' WHEN 4 THEN 'Windows' WHEN 5 THEN 'Mac' ELSE 'Unknown' END ) AS Platform FROM METRICS_WEEKLY WHERE EVENT IN (1, 2, 3, 4 ,5 ,6) GROUP BY EVENT
select suppcode, count(distinct storecode) as StoresSupplied from stocks group by suppcode having count(distinct storecode) > 3
sqlite> create table t(f); sqlite> create index tf on t(f); sqlite> explain query plan select * from t where ifnull(f,0)=1; 0|0|0|SCAN TABLE t (~500000 rows) sqlite> explain query plan select * from t where f is null; 0|0|0|SEARCH TABLE t USING COVERING INDEX tf (f=?) (~10 rows) sqlite> explain query plan select * from t where f=1; 0|0|0|SEARCH TABLE t USING COVERING INDEX tf (f=?) (~10 rows)
DECLARE @readerrorlog_results TABLE ( LogDate date, ProcessInfo varchar(max), Text varchar(max) ) INSERT INTO @readerrorlog_results (LogDate,ProcessInfo,Text) EXEC sp_readerrorlog 0, 1, 'Login failed' INSERT INTO FailedLogins (LogDate, ServerName,ProcessInfo,Text) SELECT LogDate,@@SERVERNAME,ProcessInfo,Text FROM @readerrorlog_results
INSERT INTO table (product_id, value, branch_id) SELECT t1.product_id, t1.value, '71' FROM table AS t1 LEFT JOIN table AS t2 ON t1.product_id = t2.product_id AND t2.branch_id = '71' WHERE t1.branch_id = '53' AND t2.product_id IS NULL
INSERT INTO `consumption` (consumption, total_consumption) VALUES (8, consumption + (SELECT MAX(total_consumption) FROM consumption) );
select distinct c1.ID, c2.category from mytable c1 join mytable c2 ON c1.category = c2.category and c1.ID <> c2.ID group by c1.category, c2.ID;
SELECT id, summary, owner, c1.value, c2.value FROM ticket t INNER JOIN ticket_custom c1 ON t.id = c1.ticket AND c1.name = 'X' INNER JOIN ticket_custom c2 ON t.id = c2.ticket AND c2.name = 'Y'
SELECT * INTO newA FROM a EXCEPT SELECT * FROM b ; SELECT * INTO newB FROM b EXCEPT SELECT * FROM a ;
SELECT DISTINCT WEEKLY_TIMECARD.WEEK_NUMBER FROM WEEKLY_TIMECARD, DAILY_CALCULATIONS, EMPLOYEE_PROFILES WHERE EMPLOYEE_PROFILES.EMPLOYEE_NUMBER = WEEKLY_TIMECARD.EMPLOYEE_NUMBER AND EMPLOYEE_PROFILES.EMPLOYEE_NUMBER = DAILY_CALCULATIONS.EMPLOYEE_NUMBER AND WEEKLY_TIMECARD.WEEK_NUMBER = DAILY_CALCULATIONS.WEEK_NUMBER
ALTER TABLE tablename CHANGE columnname columnname BOOLEAN DEFAULT '1' NOT NULL
select * from subjects s left join enrollment e on s.subno = e.subno where sno=9800007
UPDATE r1 SET r1.mutationcode = 1 FROM record as r1 join record as r2 on r2.loadno < r1.loadno and r2.firstname = r1.firstname and r2.lastname = r1.lastname WHERE r2.street != r1.street or r2.streetno != r1.streetno ;
UPDATE my_table SET path = substring(path, 8, 9999); where path like '/PicsDB%'
ALTER TABLE fin_stavke ADD CONSTRAINT fin_stavke_knjizenje CHECK ( doc_id IS NOT NULL OR protocol_id IS NOT NULL)
SELECT DebugData CASE WHEN lower(DebugData) LIKE 'veri%' THEN 'Verizon' WHEN REGEXP_MATCH(LOWER(DebugData),r'^\d+[^a-zA-Z]*$') THEN c.Network ELSE REGEXP_REPLACE(lower(DebugData),r'[^a-zA-Z]', ' ') END AS ActualCarrier From table
SELECT ..., t.read FROM items i LEFT JOIN items_tracking t ON (t.item_id = i.id)
SELECT COUNT(color) AS cnt, color FROM YourTable GROUP BY color
create table T ( ID char(8) not null, /* other columns */ constraint PK_T PRIMARY KEY (ID) ) create table PhoneNumbers ( ID char(8) not null, PhoneType varchar(12) not null, Number varchar(15) not null, constraint PK_PhoneNumbers PRIMARY KEY (PhoneNumbers,PhoneType), constraint CK_PhoneNumber_Types CHECK (PhoneType in ('Home','Work','Mobile')), constraint FK_PhoneNUmbers_T FOREIGN KEY (ID) references T(ID) )
Select * from table1 Where number in (14,23) and id in( Select id from table1 Where number in (14,23) Group by id Having count(distinct number) = 2)
var connectionStringBuilder = new SqlConnectionStringBuilder(_db.ConnectionString); string databaseName = connectionStringBuilder.InitialCatalog;
update table set animal = case anmial when 'dog' then 'fox' else 'dog' end where animal in ('dog', 'fox')
where priceratio < cast(@input_number as int)
SELECT Article_Name, Tag, COUNT( * ) AS count FROM articletagview GROUP BY Article_Name, Tag HAVING COUNT(*) > 1 ORDER BY count DESC
SELECT A.[DATE], A.[TIME], A.[User], A.[Entry] FROM @Table A CROSS APPLY(SELECT MIN([Date]) FROM @Table WHERE [Entry] LIKE 'Some Job%') CA_min(start_dt) CROSS APPLY(SELECT MAX([Date]) FROM @Table WHERE [Entry] LIKE 'Some Job%') CA_max(end_dt) WHERE [DATE] BETWEEN start_dt AND end_dt
SELECT CAST('July,1999' AS DATETIME)
select ps.id, ps.created_date, pst.last_updated, pst.from_state, pst.to_state, ( select min(last_updated) from mwcrm.process_state_transition subpst where subpst.last_updated > pst.last_updated and subpst.process_state = ps.id) as next_response from <the rest>
// internal GetDecimal // ------------------- // Get Value of type SQL_DECIMAL or SQL_NUMERIC // Due to provider incompatibilities with SQL_DECIMAL or SQL_NUMERIC types we always read the value // as SQL_C_WCHAR and convert it back to the Decimal data type
$this->db->set('a.firstname', 'Pekka'); $this->db->set('a.lastname', 'Kuronen'); $this->db->set('b.companyname', 'Suomi Oy'); $this->db->set('b.companyaddress', 'Mannerheimtie 123, Helsinki Suomi'); $this->db->where('a.id', 1); $this->db->where('a.id = b.id'); $this->db->update('table as a, table2 as b');
update MyTable set IsLatestReading = 0 inner join DELETE on DELETE.AssetID = MyTable and IsLatestReading = 1 update table MyTable set IsLatestReady = 1 inner join INSERTED on INSERTED.MeterReadingID = MyTable.MeterReadingID
UPDATE a FROM table2 a, table1 b SET hour1=b.mou WHERE a.access_method_id=b.access_method_id AND hour='hour1'
EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM ' || t.owner || '.' || t.table_name || ' WHERE '||t.column_name||' like :1' INTO match_count USING '%ALERT%';
UPDATE Users SET AccountId = RIGHT(lastName, 5) + RIGHT(UserId, 6)
SELECT t1.* FROM tableA as t1 LEFT JOIN tableB t2 ON t1.email=t2.email WHERE t2.id IS NULL
select housenumber, street, town, country postcode, count(*) as cnt, min(a.id) as masterid, max(a.id) as childid from #address a group by housenumber, street, town, country postcode having count(*) >= 2;
SELECT CASE WHEN COLUMN_A LIKE '%.%' THEN TO_CHAR(CAST(COLUMN_A AS DECIMAL(10,3))*100, '999.0') || '%' ELSE COLUMN_A END AS COLUMN_F FROM Table_a;
SELECT * FROM A INNER JOIN B ON B.AID = A.AID INNER JOIN C ON C.BID = B.BID INNER JOIN D ON D.AID = A.AID INNER JOIN E ON E.DID = D.DID INNER JOIN F ON F.EID = E.EID WHERE C.Field = F.Field
SELECT SUM([Item quantity]) as totalItems , SUM([Item quantity]) / 160 as totalBoxes , MOD(SUM([Item Quantity), 160) amountInLastBox FROM [Transactions] GROUP BY [Transaction Id]
select created_at, s.label, amount from ( select count(r.Source) as amount, r.source, r.created_at from related_table r group by r.source, r.created_at) a inner join source_table s on a.source = s.source_id where created_at between '2013-12-01' and '2013-12-31' order by amount desc, created_at desc
select emp_number, datepart(year, order_date), datepart(month, order_date), datepart(wk, order_date), sum(grand_total) from order_details group by emp_number, datepart(year, order_date), datepart(month, order_date), datepart(wk, order_date) order by 1, 2, 3, 4
INSERT INTO [JDatabase].[dbo].[MineOp] (Name) SELECT Name FROM [JDatabase].[dbo].[MineOp$];
p = subprocess.Popen('/usr/bin/slonik',stdout=subprocess.PIPE,stdin=subprocess.PIPE) p.stdin.write('<slon commands here>') p.stdin.close()
SELECT * FROM EMPLOYEE_T WHERE EXTRACT (YEAR FROM EmployeeDateHired) = 1999
select k.transactid, k.Hbarcode into Khanger2013 from KHanger_tbl k inner join Transaction_tbl t on t.transactid=k.transactid where t.dtime <='2013-12-30
SELECT CASE WHEN stageCompleted = 1 THEN 'Final' WHEN StartDate < NOW() THEN 'Active' ELSE 'Inactive' END, ID FROM Stage
DELETE FROM table_a WHERE ref_b IS NOT NULL AND NOT EXISTS ( SELECT 1 FROM table_b WHERE table_b.id = table_a.ref_b )
=QUERY(Website!$A16:$D, "select B WHERE (lower(C)=lower('"&$B$1&"') OR lower(B) contains lower('"&$B$1&"'))", -1)
select top 1 l.klantId, bh.rechten, kg.voornaam, kg.achternaam, kg.woonplaats, kg.telefoonnr, og.klantbericht, s.klantstatus from login l inner join klantGegevens kg on l.klantId=kg.klantid inner join bevoegdheden bh on l.rechten=bh.id inner join orderGegevens og on og.loginNr=l.klantid inner join status s on s.id=og.klantstatus where l.klantid=1 order by ordernr desc
from items left join sales on ITEMS.ITEM_CD =sales.ITEM_CD left join purchase on items.ITEM_CD =purchase.ITEM_CD
use DBI; my $db = DBI->connect('dbi:Oracle:tnsname','user','password',{RaiseError=>1}); my $txt = ($db->selectrow_array('select my_clob_col from my table where ...'))[0]; $db->close; open my $fh, '>out.txt' or die $!; print $fh $txt; close $fh;
to_char(sysdate,'Dy Mon dd','NLS_DATE_LANGUAGE = FRENCH') to_char(sysdate,'Dy Mon dd','NLS_DATE_LANGUAGE = AMERICAN')
my @day = (1,1,1,2,2,2,3,3,3); my @product = qw(banana apple pear orange cherry strawberry blueberry yogurt lettuce); my @total = (22,44,67,34,76,44,67,45,86); my $cnt = @day - 1; for my $i (0..$cnt) { $insert_products_total->execute($day[$i], $product[$i], $total[$i]); }
WHERE IFNULL(a.entity_id, 0) = IFNULL(b.entity_id, 0);
UPDATE a SET Status = 'FAIL' FROM TableA a INNER JOIN ( SELECT a.MatchID1 FROM TableA a INNER JOIN b ON a.MatchID1 = b.MatchID1 AND a.MatchID2 <> b.MatchID2 GROUP BY a.MatchID1 ) x ON a.MatchID1 = x.MatchID1
select a.id, a.ans, count(*) as cnt from submitted_answers sa join answers a on concat(', ', sa.ans, ', ') like concat('%, ', a.id, ', %') group by a.id, a.ans order by cnt desc limit 5
UPDATE tablename SET url = SUBSTRING_INDEX(url, "?", 1);
IF NOT EXISTS (SELECT 1 FROM City WHERE City = 'Paris') Insert INTO City (City) VALUES ('Paris') DECLARE @Cid int = (SELECT CityID FROM City WHERE City = 'Paris') INSERT INTO people (lname, fname, city, age, salary) VALUES (' Doe','John', @cid, '25','1000$' )
UPDATE YourTable SET DateField1 = DATEADD(mm, -2, DateField1) WHERE .....
SELECT * FROM ( select serial_Number, system_id, date_time from acp_parts ap UNION ALL select serial_Number, system_id, date_time from acp_parts test_results tr ) ORDER BY serial_Number, date_time
SELECT EXTRACT(HOUR FROM NUMTODSINTERVAL(SUM(HOURS_WORKED), 'HOUR'))||':' ||EXTRACT(MINUTE FROM NUMTODSINTERVAL(SUM(HOURS_WORKED), 'HOUR')) AS TOTAL_HOURS FROM (...
select concat(substring_index(ip, '.', 3), '.', substring_index(ip, '.', -1) -1 ) as NewIP
select malecount+femalecount as sumcount from (select count(if(gender="male",1,null)) as malecount, count(if(gender="female",1,null)) as femalecount from biodata) as query
where REGEXP_SIMILAR (int_cust_ip_addr, '^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$') = 1
INSERT INTO priceRule SELECT user.id, parentPriceRule.product_id, parentPriceRule.price FROM user LEFT JOIN priceRule AS parentPriceRule ON parentPriceRule.user_id = user.belongs_to_id LEFT JOIN priceRule AS myPriceRule ON myPriceRule.user_id = user.id AND myPriceRule.product_id = parentPriceRule.product_id WHERE myPriceRule.id IS NULL
select (case when dept like 'Car%' then 'Car' when dept in ('MC1', ...) then 'MC' when ... end case) dept, sum(...), sum(...) from ... group by (case when dept like 'Car%' then 'Car' when dept in ('MC1', ...) then 'MC' when ... end case)
SELECT movie.celeb, movieCount, albumCount FROM (SELECT celeb, count(1) movieCount FROM star GROUP BY celeb) movie INNER JOIN (SELECT celeb, count(1) albumCount FROM releases GROUP BY celeb) album ON movie.celeb=album.celeb
SELECT (SELECT COUNT(*) FROM categories), (SELECT COUNT(*) FROM serverfuncs), (SELECT COUNT(*) FROM clientfuncs);
CREATE TABLE Rental ( status char(6), date datetime, id int PRIMARY KEY ); alter table Rental add constraint status_valid_value check (status is null or (status in ('open','closed')));
select ur.uno, count(q.eno)*5 from userresponse ur left outer join question q on( ur.eno = q.eno and q.correctanswer = ur.response and q.qno = ur.qno and q.eno = '1') where ur.uno = '1' group by ur.uno
SELECT workername, closedCalls, totalCalls - closedCalss AS openCalls FROM (SELECT workername, COUNT(closeddate) AS closedcalls, COUNT(*) totalCalls FROM mybanksupport GROUP BY workername) t
SELECT * FROM table WHERE EMPLOYEE_ID = ?? AND DTL_ID = ?? UNION SELECT * FROM table WHERE EMPLOYEE_ID = ?? AND DTL_ID = 0 AND NOT EXISTS (SELECT * FROM table WHERE EMPLOYEE_ID = ?? AND DTL_ID = ??)
select projectnum, allw, budjet, substring(projectnum, 1, 3) + '-' + substring(projectnum, 7, 3) + case when len(projectnum) = 10 then '-' + substring(projectnum, len(projectnum) - 1, 1) end as project_code into new_table from old_table
SELECT u.user, COUNT(s.score) as WINS FROM users u INNER JOIN scores s ON u.user_id = s.user_id WHERE s.score = 1 GROUP BY u.user_id (and any other columns you need from the user table) ORDER BY WINS
with NT as ( select ID, Row_Number() over (PARTITION BY RedirectLink ORDER BY ID)-1 as Nr from Table1 ) update T set T.RedirectLink = T.RedirectLink + '_' + cast(NT.Nr as varchar) FROM Table1 T JOIN NT ON (NT.ID = T.ID) where Nr>0
SELECT 'SELECT * ' + char(13) + char(10) + 'FROM LIFE'
GetDataByChinese_Name(@"你好");
select nhi ,sum(case when length='dna' then 1 else 0 end) dna_count from table group by nhi having sum(case when length='dna' then 1 else 0 end)>3;
SELECT SerialNumber, ModelNumber, Date, CustomerName FROM (SELECT pft.*, count(*) over (partition by SerialNumber) as cnt FROM PreQcFormTable pft WHERE Date BETWEEN '2014-02-14' AND '2014-03-05' AND ProductOrigin = 'P' ) t WHERE cnt = 1 AND FailCodes = '';
SELECT U.UnitID as UnitID, U.Name as Unit FROM Product PR inner join Unit U on U.UnitID in (PR.BaseUnitID, PR.SecondaryUnitID, PR.PrimaryUnitID) where Productid = 1;
USE Server SELECT firstName AS EmployeeFirstname , lastName AS EmployeeLastname , title AS EmployeeTitle , id AS EmployeeID , Case When emailAddress Like '%@mycompany.com' Then emailAddress Else Null End AS EmployeeEmailAddress FROM db.Information WHERE ISNUMERIC(id)<> 0 AND empStatus = 'A'
where [column] not like '[cd]%' or [column] is null
select Distinct a.Sequence, b.RELEASED_TITLE from IncludedIn a inner join FinishedTrack b on a.OriginatesFrom = b.IIOriginatesFrom Inner join CdInfo c on a.IIALBUM_ID = c.ALBUM_ID Order By a.Sequence
SELECT e.id, e.name, e.description, (SELECT count(*) FROM day d WHERE d.event_id = e.id) AS days FROM event e;
SELECT ABC.Pays FROM SR1.DB1.SC1.Tbl1 ABC UNION ALL SELECT DEF.Pays FROM SR2.DB1.SC1.Tbl1 DEF
select col1, col2, count(*) from yourTable group by col1, col2 having count(*) > 1
SELECT LoanAccs.name , Department.depAdress , book.author , book.title LEFT OUTER JOIN LoanedBooks ON loanAccs.loanAcc = loanedBooks.loanAcc LEFT OUTER JOIN Department ON loanAccs.depCode = department.DepCode LEFT OUTER JOIN Book ON loanedBooks.ISBN = books.ISBN WHERE DATEDIFF(dd, CURRENT_DATE, loanedbooks.returndate) <= 28 ORDER BY depAdress, depCode, name desc
SELECT H.hotelName, SUM(R.roomPrice) as 'Room Price' FROM hotel H JOIN room R ON H.hotelNo = R.hotelNo GROUP BY H.hotelNo;
UPDATE TableA AS a JOIN TableA b ON a.`Source` = b.`Source` AND a.`Date` > b.`Date` LEFT JOIN TableA c ON a.`Source` = c.`Source` AND a.`Date` > c.`Date` AND c.`Date` > b.`Date` SET a.`new fans` = a.`fans` - b.`fans` WHERE c.`Date` IS NULL
SELECT MINIMUM_SALARY,DEPARTMENT_ID FROM ( SELECT AVG(SALARY) AS AVERAGE_SALARY, MIN(SALARY) AS MINIMUM_SALARY, DEPARTMENT_ID FROM EMPLOYEES GROUP BY DEPARTMENT_ID )EMPLOYEE_AGGREGATED WHERE AVERAGE_SALARY = (SELECT MAX(AVG(SALARY)) FROM EMPLOYEES GROUP BY DEPARTMENT_ID)
DECLARE @SQL AS VARCHAR(MAX); SELECT @SQL = COALESCE(@SQL + ' ', '') + 'SELECT * FROM ' + TableName + CASE WHEN TableName = MAX(TableName) OVER () THEN '' ELSE ' UNION ALL ' END FROM TableNames; EXEC(@SQL);
SELECT COALESCE(a.master,b.master) master, a.ColA, b.ColB FROM a FULL OUTER JOIN B ON a.master = b.master AND (a.ColA = b.ColB or a.ColA is Null or b.ColB is Null) ORDER BY COALESCE(a.master,b.master), COALESCE(a.cola,b.colB)
update tblCustomer set IsHappy = 1 where country = 1 and firstname in ('ian', 'bob', 'sam', 'joe')
SELECT P.PARENTID FROM PARENT P WHERE EXISTS (SELECT 1 FROM CHILD C WHERE C.PARENTID = P.PARENTID AND C.ISACTIVE = 1)
select 1.0 * data / sum(data) over () from tableName
select * from table1 pivot ( max("Value") for "Machine" in ('M1', 'M2') )
SELECT ADD_SECONDS (TO_TIMESTAMP('2014-04-10 09:11:45'), 0.1) FROM DUMMY
select top 10 foo from bar where foo like '%[^A-Z0-9]%'
SELECT * FROM POSITION WHERE NOT EXISTS (SELECT 1 FROM OFFICER WHERE OrganizationID = '2016-02081-0' AND OFFICER.PosID = POSITION.PosID);
select * from ( select foreign_serial_num, msg_id, data_value, timestamp , row_number() over (partition by oreign_serial_num, msg_id order by timestamp desc) as rn from external_data ) ordered where ordered.rn = 1
select productid, sum(IsProcess * Yield) ProcessYield, sum(IsCosmetic * Yield) CosmeticYield from myTable group by productid
create view v_table select * from table where createdat >= now() - interval 1 minute;
SELECT CASE WHEN ( T1.Field1 = T2.Field1 OR (T1.Field1 IS NULL AND T2.Field1 IS NULL) ) THEN NULL ELSE T2.Field1 END AS Field1, CASE WHEN ( T1.Field2 = T2.Field2 OR (T1.Field2 IS NULL AND T2.Field2 IS NULL) ) THEN NULL ELSE T2.Field1 END AS Field2 /** and so on **/ FROM Table1 T1 FULL OUTER JOIN Table2 T2 ON T1.JoinField = T2.JoinField
AND dte_vouch_start <= #myDate# AND dte_vouch_expiry >= #myDate#
Cursor cursor = sqLiteDatabase.query(MYDATABASE_TABLE, columns, null, null, null, null, "CAST(" + KEY_CONTENT + " as integer) desc");
SELECT FK_ID FROM MYTABLE WHERE NUMBER = 0 GROUP BY FK_ID HAVING COUNT(*) >= 2;
select dvdID as 'unique number', count(*) as 'times hired' from MonthlyRental where month(dateHired) = 8 group by dvdId
select t1.id as ID, sum(case when t2.field1 = 1102 then (t2.field3 - t2.field2) end) as A, sum(case when t2.field1 = 1112 then (t2.field3 - t2.field2) end) as B, sum(case when t2.field1 = 1113 then (t2.field3 - t2.field2) end) as C, sum(case when t2.field1 = 1106 then (t2.field3 - t2.field2) end) as D from table1 t1 left join table2 t2 on t1.id = t2.id group by 1;
;with cte as ( select id, type_id, value, sort_order, rn = row_number() over(partition by id order by type_id, sort_order) from yourtable ) select id, type_id, value, sort_order from cte where rn = 1
SELECT * FROM users u WHERE u.user_name LIKE (select '%arthur%' from dual);
select id, speed, min(time), max(time) from (select t.*, (row_number() over (partition by id order by time) - row_number() over (partition by id, speed order by time) ) as grp from table t ) t where speed = 0 group by id, speed, grp;
select col1. col2 from your_table group by col1, col2 having count(*) > 1
replace(columnToSearch,' ',' ')
SELECT id, schoolid, sex, age, diagnose FROM tbl_1 WHERE diagnose = 'Cholera' UNION ALL SELECT id, patientid, sex, age, diagnose FROM tbl_2 WHERE diagnose = 'Cholera' ORDER BY age, sex;
Student(id,name,mail,password) Article(id,art_name,description)
INSERT INTO mytable (mykeycolumn,col1,col2) VALUES ((SELECT MAX(mykeycolumn)+1 FROM mytable),'val1','val2');
UPDATE Reservations r JOIN Train t ON (r.Train = t.TrainID) SET t.Capacity = t.Capacity + r.NoSeats WHERE r.ReservationID = ?;
select created_at, 'a' as tab_name from table_a union all select created_at, 'b' as tab_name from table_b order by created_at
SELECT city, to_char(day,'iw'), max(high), min(low), sum(NVL(count,0)), max(first) keep (dense_rank first order by day) as first, max(last) keep (dense_rank last order by day) as last FROM dailyX WHERE day > to_date(20140101,'YYYYMMDD') GROUP BY city, to_char(day,'iw');
CREATE TABLE User ( UNAME VARCHAR(100), FNAME VARCHAR(100), LNAME VARCHAR(100), CONSTRAINT CHECK_USERS CHECK(INSTR(UNAME, FNAME) = 0 AND INSTR(UNAME, LNAME) = 0) )
SELECT Users.full_name FROM Users INNER JOIN profiles ON profiles.user_id = users.id WHERE profiles.zipcode = '$ZIPCODE' ORDER BY users.full_name ASC
scope :recent_flag, -> { where(product.created_at > 40.days.ago)}
SELECT YEAR(BeginTimePeriodDT), MONTH(BeginTimePeriodDT), DAY(BeginTimePeriodDT), User_ID, SUM(TotalLoginTime) FROM MyTable GROUP BY YEAR(BeginTimePeriodDT), MONTH(BeginTimePeriodDT), DAY(BeginTimePeriodDT), User_ID
select car.Brand, car.model, car.Color, car.AdministrationNo, car.InsuranceNo, car.RegistrationExp, Administration.City from Car left join Administration ON Administration.AdministrationNo = Car.AdministrationNo where car.PlateNo = xxx
Select e.* From employee e Where Not Exists ( Select 1 From employee_roles r Where r.employee_id = e.employee_id And r.role_id = 5330 )
select A, B from ( select A, B, ROW_NUMBER() OVER (PARTITION BY A ORDER BY C_B DESC) as rn from ( select A, COUNT (B) as C_B, B from table group by A, B ) count_table ) order_table where rn = 1;
select cu.cust_id, cu.cust_name, ci.location from cinema ci join booking b on ci.c_id = b.c_id join customer cu on b.cust_id = cu.cust_id where ci.location <> 'Paris'
SELECT SUBSTRING(name,2,2) AS ShortComp FROM table;
SELECT id, date, text FROM (SELECT id, date, text, 1 AS priority FROM timeline UNION ALL SELECT *, 2 AS priority FROM reps) u ORDER BY priority, date DESC
FOR idx IN 1..(LENGTH(w)-NgramLen+1) LOOP -- do what you want here DBMS_OUTPUT.PUT_LINE(SUBSTR(w,idx,NgramLen)); END LOOP;
SELECT games.id, games.title, GROUP_CONCAT(DISTINCT dc.name) AS developers, GROUP_CONCAT(DISTINCT pc.name) AS publishers INNER JOIN game_developer ON game_developer.games_id = games.id INNER JOIN companies AS dc ON dc.id = game_developer.companies_id INNER JOIN game_publisher AS gp ON gp.games_id = games.id INNER JOIN companies AS dp ON dp.id = gp.companies_id GROUP BY games.id ORDER BY games.title LIMIT 50
Select * from table t1 where t1.date between '20160511 00:00:00' and '20160513 23:59:59'; select * from table t1 where cast(t1.date as date) IN ('20160511');
select l1.name from table_1 l1 where not exists (select 1 from table_2 l2 where l2.name = l1.name) and not exists (select 1 from table_3 l3 where l3.name = l1.name);
select id, code from (select id, code, row_number() over ( partition by id order by last_upd_date desc) as rn from tbl where is_current = 'CURRENT' and org = 'E') where rn = 1
SELECT t.idMain, sub_t.minSecondary, t.textValue FROM your_table t JOIN (SELECT idMain, MIN(idSecondary) minSecondary FROM your_table GROUP BY idMain) sub_t ON (sub_t.idMain = t.idMain);
SELECT product_id FROM accounts_products GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT Tag FROM UserSpecifiedTags LEFT OUTER JOIN AllTags ON UserSpecifiedTags.Tag = AllTags.Tag WHERE AllTags.Tag IS NULL
DECLARE @Status nVARCHAR(400), @SQL nvarchar(500) SET @status = '''Closed'''+','+'''OPEN''' set @SQL = ' select * from [MYTABLE] where status in('+@status +')' exec sp_executesql @SQL GO
select * from table1 where Col1 = (select max(Col1) from table1 where Col1 <= 8) and Col2 = (select min(Col2) from table1 where Col2 >= 8)
SELECT ji.issuestatus, cf.ID AS customfield_id, ROUND(SUM(cfv.NUMBERVALUE),0) AS mysum FROM jissue ji CROSS JOIN customfield cf LEFT JOIN customfieldvalue cfv ON cfv.ISSUE=ji.ID AND cfv.customfield=cf.ID WHERE ji.pkey LIKE '%PB-%' AND ji.issuestatus IN (10127,10128,10129,10130,10131) AND cf.ID IN IN (11381, 11382) GROUP BY ji.issuestatus, cf.ID;
Laptop ------------- LaptopId (PK) ... LCD ------------- LCDId (PK) LaptopId (FK, Non-null, Unique constraint)
SELECT * FROM `users` WHERE ( fname LIKE '%Toms%' OR lname LIKE '%Toms%' ) AND ( bDate < "1991-12-03" AND regDate > "2000-12-03" AND lastActivity > "2000-12-03" ) LIMIT 0 , 30
SELECT M.Machine_ID, M.Machine_Name, COUNT(CASE WHEN E.Event_ID='1' THEN 1 ELSE NULL END) AS Event1, COUNT(CASE WHEN E.Event_ID='2' THEN 1 ELSE NULL END) AS Event2 FROM Machines M JOIN Events E ON M.Machine_ID = E.Machine_ID GROUP BY M.Machine_ID, M.Machine_Name
update the_table t1 set value = (select value from the_table t2 where quantity < 0 and t2.id = t1.id) where quantity > 0 and id = 'id1';
select * from dbo.ONE where LastLogin is NULL and datediff(ss,regdate,GetDate())<30
regexp_replace('''val1'',''val2''','(''.*?'')','upper(\1)')
SELECT t.*, (@i := if(@c = column, @i + 1, if(@c := column, 1, 1) ) ) as rank FROM table t CROSS JOIN (SELECT @i := 0, @c := '') params ORDER BY column, time;
select trim(substr(legacy, 1 - instr(reverse(legacy), ' '))) as surname, trim(substr(legacy, 1, length(legacy) - instr(reverse(legacy), ' '))) as restname
select A.IdentifyingNumber as IdentifyingNumberL, A.Included as IncludedL, B.IdentifyingNumber as IdentifyingNumberR, B.Included as IncludedR from ( select ROW_NUMBER() OVER(ORDER BY IdentifyingNumber) AS Row, IdentifyingNumber, Included from @EntityList where Included=0 ) A full outer join ( select ROW_NUMBER() OVER(ORDER BY IdentifyingNumber) AS Row, IdentifyingNumber,Included from @EntityList where Included=1 )B on A.Row=B.Row
define( 'WP_USE_THEMES', false ); require( '/path/to/your/wordpress/root/directory/wp-blog-header.php' ); status_header( 200 );
CREATE TABLE agents ( agent_id int PRIMARY KEY, ... more columns ... ); CREATE TABLE customers ( customer_id int PRIMARY KEY, agent_id int REFERENCES agents, ... more columns ... );
select * from actions join ( select action_id, group_concat(name,'=',value order by name separator ',') as csv // MySQL // string_agg(name || '=' || value, ',' order by name) as csv // PostgreSQL from meta where name in ('planet', 'object') group by action_id ) meta on actions.id = meta.action_id where csv = 'object=building,planet=earth'
SELECT package.id, user_id, package_name, date, package_content.* FROM package INNER JOIN package_content on package.id = package_content.id WHERE whatever ORDER BY whatever
$this->Model->find('all', array('conditions' => array('OR' => array( array('UserEntityVarchar.entity_id' => 1, 'EavAttribute.attribute_code' => 'firstname'), array('UserEntityVarchar.entity_id' => 1, 'EavAttribute.attribute_code' => 'lastname')))));
declare @userId int; set @userId = <your user ID>; SELECT p.ProgramId, (CASE WHEN g.ProgramID IS NULL THEN 0 ELSE 1 END) AS IsSubscribed FROM Programs p LEFT OUTER JOIN Gateway g ON (g.ProgramID = p.ProgramID AND g.UserID = @userId)
SELECT PC.Category_Name, Sum(P.Products_Inventory) FROM Products_Category PC INNER JOIN Products P ON PC.ProductId = P.ProductId GROUP BY PC.Category_Name
contact_id super_id relationship 1 10 Parent 1 20 Grandparent 10 20 Parent
insert into NewTable (Decision) select case Decision when 'N' then 0 when 'Y' then 1 else 2 end from OldTable
echo $this->element('sql_dump');
SELECT * FROM testing WHERE fruits IN ( SELECT fruits FROM testing GROUP BY fruits HAVING COUNT(*)>1 ) ORDER BY id
SELECT c.comment, m.* FROM comments c JOIN ( SELECT t.match_id, max(t.timestampe) as maxtimestamp, count(t.match_id) as comments_no FROM comments t GROUP BY t.match_id ) m on c.match_id = m.match_id and c.timestampe = m.maxtimestamp
SELECT LAST_DAY(DATE_ADD('2010-11-24', INTERVAL 3 YEAR))
WHERE StoreID = @StoreID
select SIMULATION, [USSIC Aviation], [Avemco Aviation], [Property], [Life] from ( select SIMULATION, replace(PRODUCT,'_',' ') Product, value from CM.CorrelationData where Product_Description='UW' ) d pivot ( min(Value) for PRODUCT in ([USSIC Aviation], [Avemco Aviation], [Property], [Life]) ) piv
SELECT sub.RecDate, Sum(sub.AdjYield) AS SumOfAdjYield FROM ( SELECT RecDate, Weight * YTD / (SELECT SUM(Weight) From Records WHERE Class1=t2.Class1 AND Class2 = t2.Class2) as AdjYield From Records as t2 WHERE Class1="fi" AND Class2="ra" ) AS sub GROUP BY sub.RecDate;
select * from master.sys.syslogins WHERE [name] ='loginname'
SELECT i.* , GROUP_CONCAT(tag_name) tags FROM items i JOIN items_tags_xref it ON it.item_id = i.item_id JOIN tags t ON t.tag_id = it.tag_id GROUP BY i.item_id;
SELECT 'Table1' AS TableName, name, lastname FROM Table1 OUTER JOIN Table2 ON Table1.name = Table2.name2 AND Table1.lastname = Table2.lastname WHERE Table2.name2 IS NULL UNION SELECT 'Table2' AS TableName, name2 as name, lastname2 as lastname FROM Table2 OUTER JOIN Table1 ON Table2.name2 = Table1.name AND Table2.lastname2 = Table1.lastname WHERE Table1.name IS NULL
SELECT b.* FROM yourTable b INNER JOIN (SELECT MIN(VEH_ID) as minV, GLASS_ID as g FROM yourTable GROUP BY GLASS_ID) as d ON b.Glass_ID = d.g and b.VEH_ID = d.minV WHERE b.GLASS_ID LIKE '%DB00%'
create dbo.MyProc ( @Param int = 30; ) . . .
update top (1) table with (readpast) set Column1=1 output inserted.* where Column1 = 0
res.render('index', { title: 'Home', rows: rows });
DECLARE @Mileage NVARCHAR(75) = NULL, @IsMiles BIT = 1, @Converted NVARCHAR(75) = NULL select a.* from (SELECT [Id],Odometer,IsMiles, CASE when IsMiles=0 THEN OdometerValue * 0.62137 else Odometer end as ConvertedOdometer FROM [dbo].[Vehicle] where IsMiles = 0)a where a.ConvertedOdometer >=0 AND a.ConvertedOdometer <= @Mileage
SELECT * FROM `lead` WHERE (`added_on` >= '$from' AND `added_on` <= '$to') AND `status` IN ('Hot', 'Paid')
select * from your_table where id > 5 order by id asc limit 5
SELECT a.* FROM addresses a JOIN individuals i ON a.AddressID = i.AddressID GROUP BY a.StreetName, i.FirstName, i.Surname HAVING COUNT(1) > 1
with tree as ( SELECT t.name, t.id, t.parent, LEVEL lvl, connect_by_root(id) root FROM t CONNECT BY PRIOR parent = id START WITH id IN (83, 98, 46, 43, 48) ), ordered_tree as ( select name, id, parent, row_number() over (partition by id order by id) rn from tree order by root, lvl desc ) select name, id, parent from ordered_tree where rn = 1
SELECT COMPANY, PROJECT FROM TABLE GROUP BY COMPANY, PROJECT HAVING MAX(TYPE) = MIN(TYPE) AND MAX(TYPE) = 'DUMMY'
SELECT t.[From] AS FromAddress FROM MyAddresses AS t
DECLARE @TEST TABLE (ID INT, WORDS VARCHAR(10)) INSERT INTO @TEST VALUES (1, 'A�AA') INSERT INTO @TEST VALUES (2, 'BBB') INSERT INTO @TEST VALUES (3, 'CC�C') INSERT INTO @TEST VALUES (4, 'DDD') SELECT * FROM @TEST WHERE WORDS LIKE '%' + NCHAR(UNICODE('�')) + '%' UPDATE @TEST SET WORDS = REPLACE(WORDS, NCHAR(UNICODE('�')), 'X') SELECT * FROM @TEST WHERE WORDS LIKE '%' + NCHAR(UNICODE('�')) + '%' SELECT * FROM @TEST
SELECT k.location, l.description, h.parent, SUM(CASE WHEN k.status = 'ECCAPR' THEN 1 ELSE 0 END) as cnt_ECCAPR, SUM(CASE WHEN k.status = 'FSAPR' THEN 1 ELSE 0 END) as cnt_FSAPR FROM KINDICENT k JOIN LOCATIONS l ON k.location = l.location JOIN LOCHIERARCHY h ON l.location = h.location GROUP BY k.location, l.description, h.parent ORDER BY parent;
select * from dba_objects where data_object_id = dbms_rowid.rowid_object(ROWID_OF_THE_ROW)
SELECT a.id, a.title, b.title, c.title FROM table1 AS a INNER JOIN table2 AS b ON b.id = a.cat1_id INNER JOIN table3 AS c ON c.id = b.cat2_id ORDER BY a.id DESC
ALTER TABLE Table_3 ADD CONSTRAINT my_name CHECK (column_3 in (SELECT Column_1 FROM Table_1))
select col1, col2, col3 = ( select col3 + ',' from TestTable for xml path('') ) from TestTable group by col1, col2
SELECT E1.last_name Boss, E2.last_name Subordinate FROM Employee E1 FULL JOIN Employee E2 ON E1.id = E2.boss_id WHERE (CASE WHEN E1.ID is null THEN 'M' ELSE E1.sex END) = 'M' AND (CASE WHEN E2.ID is null THEN 'M' ELSE E2.sex END) = 'M';
SELECT COUNT(DISTINCT PoliticianId) AS result FROM Votes WHERE UserId = 1010 ;
Update stuff; Delete stuff; Update stuff;
SELECT project_id, Sum(rate * quantity) AS total_price FROM orders WHERE client_id = 1 GROUP BY project_id
where ',' + @PostCode + ',' like '%,' + PCode + ',%'
declare @StartDate date = cast(dateadd(month, -12, GetDate()) as date) declare @EndDate date = cast(GetDate() as date) declare @YMList TABLE (YYYYMM INT) ;with dates as ( SELECT cast(@StartDate as Date) [date] UNION ALL SELECT DATEADD(month,1,t.date) FROM dates t WHERE t.[date] < @EndDate ) insert @YMList (YYYYMM) select YEAR([Date]) * 100 + MONTH([Date]) AS YYYYMM from dates WHERE [Date] < @EndDate OPTION (MAXRECURSION 10000)
SELECT name , create_date, modify_date ,sm.definition FROM sys.procedures sp Inner join sys.sql_modules sm ON sp.object_id = sm.object_id WHERE CONVERT(DATE,sp.modify_date) = CONVERT(DATE, '02/19/2013')
UPDATE S SET Column1 = CASE WHEN CHARINDEX('(', REVERSE(S.Column1)) > 0 THEN REVERSE(RIGHT(REVERSE(S.Column1), LEN(S.Column1) - CHARINDEX('(', REVERSE(S.Column1)))) ELSE S.Column1 END FROM dbo.Source AS S;
select r.id, r.computername, r.event, r.timestamp from raw r inner join ( select max(id) as id from raw group by computerName ) as maxEventPerComputer on r.id = maxEventPerComputer.Id
Select * from Street where Street_Name like REPLACE('%Park Ave 10%',' ', '%')
SELECT COUNT(DISTINCT p.id) AS pictures, COUNT(DISTINCT m.id) AS songs, COUNT(DISTINCT l.id) AS likes, CAST(p.date_of_upload AS DATE) AS Posted FROM pictures p LEFT JOIN music m ON p.id = m.pictures_id LEFT JOIN likes l ON p.id = l.pictures_id WHERE p.date_of_upload > DATE_ADD(CURRENT_DATE(), INTERVAL - 14 DAY)
IF (NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'MyDbo')) BEGIN EXEC ('CREATE SCHEMA [MyDbo] AUTHORIZATION [dbo]') END ALTER SCHEMA MyDbo TRANSFER dbo.your_old_table GO
SELECT p.`product_id`, p.`name`, SUM(o.`quantity`) AS quantity FROM `Order_Detail` AS o INNER JOIN `Product` AS p ON o.`product_id` = p.`product_id` GROUP BY o.`product_id` ORDER BY SUM(o.`quantity`) DESC, p.`name` ASC LIMIT 3
SELECT min(reserved_date) AS start_date , max(reserved_date) AS end_date FROM ( SELECT reserved_date , reserved_date - row_number() OVER (ORDER BY reserved_date)::int AS grp FROM reserved_dates ) sub GROUP BY grp ORDER BY grp;
SELECT post.ID,max(post.Title),max(post.Author),min(post.CreateDate), min(comment.CreateDate), datediff(mi,min(post.CreateDate),min(comment.CreateDate)) as 'first comment in minutes' FROM Posts as post INNER JOIN Comments as comments on post.ID = comment.PostID where comment.Type != 'initial' group by post.id
SELECT @BaseProductId, Id, Row_Number() OVER (ORDER BY ....), @UserId, GETUTCDATE(), @UserID, GETUTCDATE() FROM @ImageIDs;
DECLARE @myTable TABLE([Fruits] VARCHAR(20)) INSERT INTO @myTable VALUES('Apple') INSERT INTO @myTable VALUES('Pear') INSERT INTO @myTable VALUES('Peach') INSERT INTO @myTable VALUES('Plum') INSERT INTO @myTable VALUES('Grape') SELECT * FROM @myTable ORDER BY CASE WHEN([Fruits] = 'Grape') THEN 0 ELSE 1 END, [Fruits]
SELECT StuffYouWant FROM (SELECT * FROM TableA UNION ALL SELECT * FROM TableB) c
SELECT ITEM, STORE, SUM(CASE WHEN REASON = 183 THEN QUANTITY ELSE 0 END)- SUM(CASE WHEN REASON = 182 THEN QUANTITY ELSE 0 END) FROM TRANSACTION GROUP BY ITEM, STORE
SELECT c.custId, c.firstname, SUM(i.unitcost*li.quantity) total_spent FROM customers c JOIN orders o ON c.custId = o.custId JOIN lineitems li ON o.orderId = li.orderId JOIN items i ON li.itemId = i.itemId GROUP BY c.custId, c.firstname HAVING COUNT(DISTINCT o.orderID)>1 LIMIT 0,30
SELECT * FROM undefined_table_name GROUP BY image_type ORDER BY image_type ASC;
select u.ufn, u.uln, u.ue, t.unit, t.address from users u inner join ( select uid, max(start_date) as newest_start_date from transactions group by uid) x on u.uid = x.uid inner join transactions t on t.start_Date = x.newest_start_date and t.uid = u.uid
SELECT name CASE WHEN ' ' || name || ' ' LIKE '% N %' THEN 'Red' WHEN ' ' || name || ' ' LIKE '% B %' THEN 'White' WHEN ' ' || name || ' ' LIKE '% RS %' THEN 'Green' ELSE 'Other' END FROM mytable
... UNIQUE (UserID, IsType) ON CONFLICT REPLACE
SELECT Date, MIN(CASE WHEN Product = 'P1' THEN Sold END) AS "P1", MIN(CASE WHEN Product = 'P2' THEN Sold END) AS "P2", MIN(CASE WHEN Product = 'P3' THEN Sold END) AS "P3" FROM ___insert_table_name_here___ GROUP BY Date ;
UPDATE someTable SET yourField = <SOME-VALUE> WHERE emp_id = emp_id_in AND some_date BETWEEN TO_DATE('9/3/2011', 'MM/DD/RRRR') AND TO_DATE('9/6/2011', 'MM/DD/RRRR')
UPDATE MPOLITICAS SET NOM_POLITICA = REPLACE(NOM_POLITICA, '%' , ' PERCENT');
Select m.Description, st.Description FROM BaseTable bt LEFT JOIN Mapping m where m.toID = bt.id LEFT JOIN BaseTable bt2 where m.FromID = bt2.id, inner join SubTypeTable stt on bt2.subTypeID = stt.id
select permission_name, state_desc, type_desc, U.name, OBJECT_NAME(major_id) from sys.database_permissions P JOIN sys.tables T ON P.major_id = T.object_id JOIN sysusers U ON U.uid = P.grantee_principal_id
select d.datePlaying, p.namePlayer from table2 p cross join (select distinct datePlaying from table1) d left join table1 t on t.idPlayer = p.idPlayer and t.datePlaying = d.datePlaying where t.idPlayer is null
select userid from (select t.*, dateadd(d, -seqnum, t.date) as diff from (select t.*, row_number() over (partition by userid order by date) as seqnum from t where datediff(d, t.date, getdate()) <= 30 and leave = 'Y' ) t ) t group by userid, diff having count(*) > 1
phoneplan_id (P) phone_id (F) package_id (F) point
select user.user_fname ,user.user_lname ,parent.user_fname ,parent.user_lname from users as user join users as parent on parent.user_id = user.user_parent_id where user.user_id = $_GET[id]
select a.* from (select a.*, row_number() over (partition by Customer_nr order by [Months left till service expiry] desc) as seqnum from a ) a where seqnum = 1;
UPDATE employee SET Salary= CASE WHEN Salary < 10000 THEN Salary + 500 CASE WHEN Salary >= 10000 and Salary < 20000 then Salary+600 CASE WHEN Salary >= 20000 and Salary < 30000 then Salary+700 ELSE Salary END
select case when isnull (ff.ff_sales,aa.ff_sales) is null then '---' else cast(isnull (ff.ff_sales,aa.ff_sales) as varchar) end as 'Total Revenue'
SELECT No FROM ( SELECT No, MAX(Field1) AS MaxField1 FROM tableX GROUP BY No, Type ) AS tmp GROUP BY No HAVING MIN(MaxField1) > 0 ;
UPDATE f SET f_status = 0 WHERE ( f_userid1 = @userid1 AND f_userid2 = @userid2 ) OR ( f_userid1 = @userid2 AND f_userid2 = @userid1 );
SELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) AS Id, * FROM ( SELECT DISTINCT Word, STUFF((SELECT ',' + description FROM Your_Table WHERE Word = T.Word FOR XML PATH('')), 1, 1, '') AS description FROM Your_Table T) AS A
declare @city nvarchar(50) = 'mm', @state nvarchar(50) = 'ap' Select * From (Select * from YourTable Where city = @city or state = @state )z order by Case When city = @city and state = @state Then 1 When City = @city then 2 Else 3 end
Imports System Imports System.Data Imports System.Math Imports Microsoft.SqlServer.Dts.Pipeline.Wrapper Imports Microsoft.SqlServer.Dts.Runtime.Wrapper <microsoft.sqlserver.dts.pipeline.ssisscriptcomponententrypointattribute> _ <clscompliant(false)> _ Public Class ScriptMain Inherits UserComponent Public Overrides Sub Input0_ProcessInputRow(ByVal Row As Input0Buffer) ' Create a Globally Unique Identifier with SSIS Row.Guid = System.Guid.NewGuid() End Sub End Class
SELECT Customer, Date, Row_Number() Over (Partition By Customer Order By Date) RN FROM YourTable ORDER BY Customer, Date
DECLARE @output TABLE (id int) Insert into A (fname, lname) OUTPUT inserted.ID INTO @output SELECT fname, lname FROM B select * from @output
WITH ranking AS ( SELECT *, RANK() OVER (ORDER BY score DESC) userRank FROM TableName ) SELECT * FROM ranking WHERE userRank BETWEEN (SELECT userRank - 1 FROM ranking WHERE userID = 'bbb') AND (SELECT userRank + 1 FROM ranking WHERE userID = 'bbb')
select n_rec, my_field from (select n_rec, my_field , count(*) over (partition by my_field) as Counter from myTable where my_field = ?) where Counter = 1
DECLARE @FiscalYear INT = 2014, @fyLowerBound DATE; SET @fyLowerBound = CAST(CAST((@FiscalYear - 1) AS CHAR(4)) + '1001' AS DATE) SELECT @fyLowerBound;
COLUMN number_column FORMAT 999999999999999
select id, p1.value as company, p2.value as budget, sum(p2.value) over (partition by p1.value) as CompanyBudget FROM process p LEFT JOIN Param p1 on p1.ID = p.ID AND p1.NAME = 'Company' LEFT JOIN Param p2 ON p2.ID = p.ID AND p2.NAME = 'Budget' where type = 'Authorization';
case when DailyNet = max(DailyNet) over(partition by TillID) then 'Yes' else 'No'
USE master; GO CREATE MASTER KEY ENCRYPTION BY PASSWORD = '5tr0ngP@ssW0rd' GO OPEN MASTER KEY DECRYPTION BY PASSWORD = '5tr0ngP@ssW0rd' CREATE CERTIFICATE MyDBcert WITH SUBJECT = 'The Cert For MyDB'; GO USE MyDB; GO CREATE DATABASE ENCRYPTION KEY WITH ALGORITHM = AES_256 ENCRYPTION BY SERVER CERTIFICATE MyDBcert; GO
SELECT street_name, store_id, count(*) FROM streets GROUP BY street_name HAVING COUNT(DISTINCT store_id) > 1
SELECT col1, col2 FROM mytable WHERE foo = 'bar' LIMIT 42;
DECLARE @empid int; DECLARE vend_cursor CURSOR FOR select employee_id from employee where employee_team = 1 and employee_role = 1 OPEN vend_cursor FETCH NEXT FROM vend_cursor into @empid; WHILE @@FETCH_STATUS = 0 BEGIN // your query with @mpid FETCH NEXT FROM db_cursor INTO @name END CLOSE vend_cursor DEALLOCATE vend_cursor
alter session set nls_date_format='dd-mon-yyyy hh24:mi' / with cte as ( select trunc(sysdate) as start_date from dual ) select start_date + ((level-1)/(24*60)) as date_w_mins from cte connect by level <= (24*60) /
SELECT category.category_id, category.name, COUNT(item.item_id) as items_in_category, AVG(item.rate) as avg_rate FROM category INNER JOIN item_category ON category.category_id = item_CATEGORY.category_id INNER JOIN item ON item_category.item_id = item.item_id GROUP BY category.category_id, category.name
SELECT 1.Label, COUNT(2.values) FROM Table1 1 LEFT JOIN Table2 2 ON 1.fk = 1.pk and 2.Date BETWEEN 1/1/2010 AND 12/31/2010 GROUP BY 1.Label
SELECT * FROM ( SELECT (SELECT max(level) FROM students "inner" WHERE "inner".level < "outer".level) as Level , sum(Case When grade = 'Pass' Then 1.0 Else 0.0 End) / count(*) as Percentage FROM students "outer" GROUP BY level union all SELECT max(level) as Level , null as Percentage FROM students ) mylevels WHERE level is not null
var emails; var matchingMails = users.find({"email" : {$in : emails}}, {"email":1, "_id":0}); var newEmails = emails.subtract(matchingMails); // set difference db.batchInsert(createUsersFromEmails(newEmails));
declare @str varchar(max); select @str='Hello,world,continent,nation,city'; SELECT @str=''''+REPLACE(@str,',',''',''')+'''' exec('select * from mytable where col_word in('+@str +')')
SELECT 'NetworkKey' AS AuthKey, COUNT(*) AS TotalCount, SUM(CASE WHEN NetworkSK IS NULL THEN 1 ELSE 0 END) AS NUllcount, SUM(CASE WHEN NetworkSK IS NOT NULL THEN 1 ELSE 0 END) AS NotNullcount FROM EDW.Fact.AuthorizationRequest
SELECT d.department_name, d.manager_id, m.name, AVG(e.salary) FROM employees e INNER JOIN departments d ON (e.department_id = d.department_id) LEFT OUTER JOIN employees m ON (m.employee_id = d.manager_id) GROUP BY d.department_name, d.manager_id, m.name;
Select * FROM Items WHERE Extra IS NULL OR Extra = ''
Spinner mySpinner = (Spinner)findViewbyId(R.id.spinner); int position = mySpinner.getSelectedItemPosition(); String Text = yourCityList[position].toString(); // dont know which list is holding the city list... // i didn't use any db in any of my app so cant tell you how can you get list... // leaving it to you... :)
SELECT A.ID, A.Date, COUNT(c.ID) AS Comments FROM Article A LEFT JOIN Comment c ON A.id = c.FK_Article GROUP BY A.ID, A.Date ORDER BY A.ID;
DECLARE @EndDate date; SELECT @EndDate = DATEADD(day, 1, atvcEndDate) FROM tbUserReport WHERE atvcUserId = @UserId;
SELECT table_1.*, table_2.*, table_3.*, table_4.* FROM table_1 INNER JOIN table_2 ON table_1.age_grp = table_2.age_grp AND table_1.gender = table_2.gender INNER JOIN table_3 ON table_2.age_grp = table_3.age_grp AND table_2.gender = table_3.gender INNER JOIN table_4 ON table_3.age_grp = table_4.age_grp AND table_3.gender = table_4.gender
SELECT SUM(CASE WHEN a=1 THEN 1 ELSE 0 END)- SUM(CASE WHEN a=0 THEN 1 ELSE 0 END) AS Result FROM table
INSERT INTO Table1(colm1,colm2,colm3) SELECT clom1,constant,constant FROM TABLE2
lib.my_val { select { pidInList = 100000 max = 1 where = UNIX_TIMESTAMP(effective_date) < UNIX_TIMESTAMP() orderBy = UNIX_TIMESTAMP(effective_date) DESC } table = tx_my_table }
SELECT 'colname1', 'colname2', 'colname3', 1 AS ordering FROM dual UNION SELECT colname1, colname2, colname3, 2 AS ordering FROM yourtable ORDER BY ordering;
declare @t table (id int) insert @t (id) exec myoldsp @parameters
SELECT T1.X, T1.Y, T1.A, T1.B FROM (SELECT X, Y, A, B, ROW_NUMBER() OVER (Partition BY X,Y Order By A,B) AS RowNum FROM T ) T1 WHERE T1.RowNum = 1
DECLARE @T TABLE (Code VARCHAR(5)) INSERT @T VALUES ('EM010'), ('EM100'), ('EM101'), ('EM105'), ('EM106') SELECT T1.Code, ( SELECT MAX(Code) FROM @T t2 WHERE t1.Code > t2.Code ) AS Code2 FROM @T t1
SELECT DISTINCT ON(companies.name, employees.first_name) applicants.id, companies.name, employees.first_name, departments.name, applied_date FROM applicants INNER JOIN departments ON applicants.department_id = departments.id INNER JOIN companies ON departments.university_id = companies.id INNER JOIN employees ON applicants.student_id = employees.id ORDER BY companies.name, employees.first_name, applied_date
SELECT b.id AS next_id FROM tableb b LEFT JOIN tablea a ON (b.id =a.Table_b_fk ) WHERE b.M1=100 AND b.M2 =100 AND b.id >4 ORDER BY b.id ASC LIMIT 1
Command.ExecuteReader(CommandBehavior.KeyInfo)
select user_id, date, case when date - lag(date) over (partition by user_id order by date) > interval '40' minute then 1 else 0 end as diff_flag from the_table order by user_id, date
update tableA tA set tA.value = ( select tB.value from tableB tB inner join tableC tC on tB.value = tC.value where tB.id = tA.id )
SELECT sysdate - date '1900-01-01' days_since_jan_1_1900 FROM dual;
SELECT IFNULL(m.local_mir, o.localParty) as local, IFNULL(m.remote_mir, o.remoteParty) as remote FROM data as o LEFT JOIN mirror_data as m ON (o.localParty = m.local OR o.remoteParty = m.remote) LIMIT 0,10;
SELECT SUBSTR(t.column_one, 1, INSTR(t.column_one, ' ')-1) AS col_one, SUBSTR(t.column_one, INSTR(t.column_one, ' ')+1) AS col_two FROM YOUR_TABLE t
WHERE String_Finder(Log_Table.Message, 1, 2) NOT LIKE 'NO_TYPE'
select T.*, someFunction(T.Value) from T cross join F
select min(category_id) as min_cat, group_concat(distinct category_id order by category_id) as category_list, bookmark_id from your_table group by bookmark_id
Live - Cardinality Estimate Expression="CONVERT_IMPLICIT(nchar(18),[pn].[PartNumber],0)" Test - Cardinality Estimate Expression="CONVERT_IMPLICIT(nvarchar(50),[pn].[PartNumber],0)"
SELECT OrderID FROM OrderDetailTable JOIN OrderedTable USING (ItemID) GROUP BY OrderID HAVING COUNT(DISTINCT ItemID) = (SELECT COUNT(DISTINCT ItemID) FROM OrderedTable)
SELECT DISTINCT T.C.value('local-name(.)[1]', 'varchar(100)') FROM @Employees CROSS APPLY EmployeeDetails.nodes('Employee/EmployeeDetails/*') AS T(C)
SELECT m.Meal, COUNT(*) AS Orders FROM tbl_Meal_Options AS m LEFT JOIN ( SELECT Meal_1 AS Meal FROM tbl_Invitations UNION ALL SELECT Meal_2 AS Meal FROM tbl_Invitations UNION ALL SELECT Meal_3 AS Meal FROM tbl_Invitations UNION ALL SELECT Meal_4 AS Meal FROM tbl_Invitations ) AS i ON m.Meal_Option = i.Meal GROUP BY m.Meal
UPDATE tableName SET coldate = DATE_FORMAT(STR_TO_DATE(colDate,'%m/%d/%y'),'%Y/%m/%d')
SELECT SystemName, Caption, Label, Capacity, FreeSpace, 100*freespace/capacity [% of free space], capacity-freespace [used space] FROM CCS_Win32_Volume ORDER BY SystemName, Caption
SELECT newTable.MyData, newTable.CreationDate FROM (SELECT MyData, CreationDate FROM Table1 UNION SELECT MyData, CreationDate FROM Table2) AS newTable ORDER BY newTable.CreationDate DESC
select sum(QTY),GROUP from table where TO_CHAR(order_date,'DY', 'NLS_DATE_LANGUAGE=AMERICAN') in ('SUN','SAT') group by GROUP;
class Order(models.Model): order_id = models.IntegerField(...) class Step(models.Model): name = models.CharField(max_length=128) orders = models.ManyToManyField(Order, through='StepOrder') class StepOrder(models.Model): order = models.ForeignKey(Order) step = models.ForeignKey(Step) ## date of the order starting this step date_created = models.DateField(...) date_end = models.DateField(...) status = models.CharField(max_length=128, default="Pending")
select min(A),B from table group by B
select tableA.id from tableA left outer join tableB on (tableA.id = tableB.id) where tableB.id is null order by tableA.id desc
SELECT * FROM (SELECT TOP 2 * FROM mytable WHERE someid = @something ORDER BY added DESC) ORDER BY added
SELECT COUNT(*) FROM your_table WHERE 1 IN (n1,n2,n3,n4,n5) AND 26 IN (n1,n2,n3,n4,n5)
SELECT DISTINCT t.item_code, t.item_name FROM mytable t INNER JOIN (SELECT item_code, COUNT(DISTINCT item_name) num FROM mytable GROUP BY item_code) code ON (t.item_code = code.item_code) INNER JOIN (SELECT item_name, COUNT(DISTINCT item_code) num FROM mytable GROUP BY item_name) name ON (t.item_name = name.item_name) WHERE code.num > 1 OR name.num > 1
SELECT DISTINCT a.* FROM table a JOIN table b ON a.colA = b.colA AND a.colB != b.colB
SELECT firstName AS "First Name", lastName AS "Last Name", dependent_name AS "Dependent Name" FROM employee LEFT JOIN dependent ON dependent.essn = employee.ssn;
select name, count(*) over (partition by name) as name_count, amount from table t;
<?php $xml=simplexml_load_file("yourxml.xml"); echo $xml->name . "<br>"; echo $xml->surname . "<br>"; echo $xml->image1 . "<br>"; echo $xml->image2; ?>
CREATE TABLE ranks SELECT DISTINCT rank+0 as id, CONCAT('',rank) as rank FROM soldiers
DECLARE @array TABLE( tag varchar(50) ) INSERT INTO @array VALUES('test') INSERT INTO @array VALUES('braindead') select * from bookmark_model_bookmark where id in( select bookmark_model_bookmark_id FROM bookmark_tag x INNER JOIN bookmark_model_tag t ON t.id = x.bookmark_model_tag_id where t.name in (select tag from @array) group by bookmark_model_bookmark_id having bookmark_model_bookmark_id >= (select count(0) from @array))
SELECT CalendarEventID, dbo.GetLatestDate( FromDate, ToDate, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday, EveryNWeeks, EndAfterNOccurences) AS LatestDate FROM CalendarEvents ORDER BY 2
SELECT a.ELM_NUM,a.COMBO, CASE WHEN abs(a.N_1) > abs(a.N_2) THEN a.N_1 ELSE a.N_2 END as maxN from ntm a order by a.ELM_NUM
INSERT INTO student(name, age) SELECT name, age FROM toMerge.student;
;with cte as ( select case when stat = 'N' and duedate > GETDATE() then 'NG' when stat = 'N' and duedate < GETDATE() then 'NL' else stat end As S, duedate from activity) select S,COUNT(*) from CTE group by (S)
WITH RECURSIVE children AS ( -- select leaf nodes SELECT id, value, parent FROM t WHERE value IS NOT NULL UNION ALL -- propagate values of leaf nodes up, adding rows SELECT t.id, children.value, t.parent FROM children JOIN t ON children.parent = t.id ) SELECT id, sum(value) FROM children GROUP BY id -- sum up appropriate rows ORDER BY id;
Select 'KEYWORD' as KEYWORD, 'PART1_D1' as PART1_D1, 'PART1_D2' as PART1_D2, 'PART1_D3' as PART1_D3, 'PART1_D4' as PART1_D4, 'PART2_D5' as PART2_D5, UNION Select KEYWORD, cast(PART1_D1 as varchar(50), cast(PART1_D2 as varchar(50), cast(PART1_D3 as varchar(50), cast(PART1_D4 as varchar(50), cast(PART2_D5 as varchar(50) From sample
Select column1, column2 from MyTable GROUP BY column1, column2
SELECT T1.SubmissionStatus FROM Table1 T1 JOIN Table0 T0 ON T1.primaryKey = T0.foreignKey UNION SELECT T2.SubmissionStatus FROM Table1 T2 JOIN Table0 T0 ON T2.primaryKey = T0.foreignKey UNION SELECT T3.SubmissionStatus FROM Table1 T3 JOIN Table0 T0 ON T3.primaryKey = T0.foreignKey
SELECT TOP (100) PERCENT me.Path, MAX(pd.SampleValue) AS Sample, DATEADD(MI, -(DATEPART(MI, pd.DateTime) % 5), pd.DateTime) AS PeriodStart FROM ... WHERE ... GROUP BY me.Path, DATEADD(MI, -(DATEPART(MI, pd.DateTime) % 5), pd.DateTime) ORDER BY me.Path
select productname, max(test1) from ( SELECT *, row_number() over (order by test2 asc) - row_number() over (partition by productname order by test2 asc) as GRP from @MyTable ) X group by productname, GRP
DECLARE @listStr VARCHAR(MAX) SELECT @listStr = COALESCE(@listStr+',' ,'') + Isnull(CAST (CONVERT(DATE,SP.StartDateTime,103) as Varchar),'') FROM testtable AS SP SELECT @listStr GO
select startid = min(id) from customer; select maxid = max(id) from customer; i = startid while i <= maxid begin with myCTE as (select ... from customer where id >= i and id < i + 1000) insert into xxx (....) select .... from myCustomerChunk join productcustomers pc on .... join product p on .... i = i+1000 end
Lcid SportID Description 3081 1 Soccer 3082 1 Futbol
select login_id , sum(case when status_name='open' then count end) open , sum(case when status_name='closed' then count end) closed , sum(case when status_name='inprogress' then count end) inprogress , sum(case when status_name='pending' then count end) pending from table group by login_id
SELECT origin, destination FROM mytable GROUP BY origin, destination HAVING COUNT(*) > 1
DECLARE @sqlstmt VARCHAR(MAX) SET @sqlstmt = 'SELECT vin FROM cars WHERE 1=1' IF @interior<>'No Preference' SET @sqlstmt = @sqlstmt + ' AND interior = '''+@interior+''' IF @color<>'No Preference' SET @sqlstmt = @sqlstmt + ' AND color = '''+@color+''' ... exec(@sqlstmt)
If rrow = 1 then DoCmd.RunSQL "SELECT [Oracle JE].* INTO Unmatched FROM [Oracle JE] WHERE [Oracle JE].[Account Code]=" & start Else DoCmd.RunSQL "INSERT INTO Unmatched SELECT [Oracle JE].* FROM [Oracle JE] WHERE [Oracle JE].[Account Code]=" & start End
select * from table where YEAR(date) = YEAR(CURDATE())
HAVING ISNULL(max(m.Init_Amnt) - sum(d.Amnt-Appl), 1) > 0
select (5 - 3)
stores id code name address ... items id code name description barcode retail_price ... stocks store_id item_id stock_count inventories id inventory_date store_id inventory_items inventory_id item_id original_stock_count corrected_stock_count
SELECT "DATE", BUS, VALUE FROM {your_table} WHERE "DATE" >= trunc(sysdate) and "DATE" < trunc(sysdate+1)
SELECT Reference.quote_date As Date, Customer.name As Name , Customer.surname AS Surname, Customer.postcode, Customer.telephone, Reference.ref_ID AS PolicyRefNo, Reference.agent_ID, (reference.call_id IN(1,2,3)) as Tel, (reference.call_id IN(4,5,6)) as F2F FROM Customer INNER JOIN Reference ON Customer.customer_ID = Reference.customer_ID;
SELECT btst.Ordnungsbegriff AS BBNR, COUNT(vp.KVNR) FROM ... GROUP BY vz."VALIDTO", vz."BETRIEBSNUMMER", btst.Ordnungsbegriff
select ou.* from (select u.FullName, u.Id, o.FullAddress, Price, Payment, o.Created, StartDelivery as Delivering, [Status], o.Id, COUNT(*) OVER (PARTITION BY o.CustomerId) AS CountOfOrders from orders o full outer join users u on o.CustomerId = u.Id ) ou where [Status] = 2
wampmanager -> Apache -> Version -> click on the version number
SELECT product_id, COUNT(product_id) AS cnt FROM warehouse GROUP BY product_id HAVING COUNT(product_id) MOD 2 = 1;
IF @CORP IN ('something', 'somethingElse') BEGIN -- your code END
ALTER MyTable NOCHECK CONSTRAINT FK_MyTable_AnotherTable
ALTER PROCEDURE [dbo].[SP_GET_QUEUESINFO_BY_DATE] AS BEGIN declare @date2 datetime set @date2= '2012-09-21' select COUNT(QueueID) , sum(case when QueueNumIn != 0 THEN 1 else 0 end) as 'InQueue', sum(case when QueueNumOut != 0 THEN 1 else 0 end) as 'OutQueue' from Queue where CAST(QueueDate as DATE) >= @date2 -- QueueDate = @date2 END
Select t.Name TownName, c.Name, d.Id From Towns t Join Companies c ON t.Id = c.Town Join Documents d ON c.Id = d.Company Order By c.Name
select array_agg(attr => val) from t1;
select id, lname, fname from table1 t1 where t1.id not exists in (select id from table2)
UPDATE second_table AS s, pay_periods AS pp SET s.[Pay Period] = [pp].[Pay Period] WHERE s.Date Between [pp].[Start Date] And [pp].[End Date];
DECLARE @Text AS VARCHAR(100) DECLARE @Cmd AS VARCHAR(100) SET @Text = 'Hello world^| ' SET @Cmd ='echo ' + @Text + ' > C:\AppTextFile.txt' EXECUTE Master.dbo.xp_CmdShell @Cmd
SELECT * FROM (SELECT Id, Lat, Lng, (6367 * acos(cos(radians(45.444)) * cos(radians(Lat)) * cos(radians(Lng) - radians(158.554)) + sin(radians(4545)) * sin(radians(Lat)))) AS distance FROM Posts) p WHERE p.distance < 15 ORDER BY p.distance
SELECT x.* FROM x WHERE (x.id = @NameFilter OR @NameFilter is null) AND (x.typeId = @typeFilter OR -1 = @typeFilter) AND (x.date = @date OR @date is null) AND (x.someStingType = @someStringType Or '' = @someStringType)
/* All deployments get the reference data */ :r .\ReferenceData.PostDeployment.sql IF ('$(SampleSet)' = 'ClientA') BEGIN :r .\SampleData.ClientA.PostDeployment.sql END ELSE IF ('$(SampleSet)' = 'ClientB') BEGIN :r .\SampleData.ClientB.PostDeployment.sql END
select * from RBOTRANSACTIONSALESTRANS main where main.DATAAREAID = 'DAT' and exists ( select 1 from RBOTRANSACTIONSALESTRANS sub where sub.QTY < 0 and sub.DATAAREAID = main.DATAAREAID and sub.STORE = main.STORE and sub.TERMINALID = main.TERMINALID and sub.TRANSACTIONID = main.TRANSACTIONID ) order by main.TRANSACTIONID
select Department1 from tab union select Department2 from tab
select FOO from BAZ limit 50 union select FOO from BAZ limit 50, 1 union select FOO from BAZ limit 99, 1 union select FOO from BAZ limit 100, 1 union select FOO from BAZ limit 149, 1
SELECT a.id,a.first_name,a.last_name,b.value as user_type,b.value AS user_type, b2.value as user_status FROM user AS a JOIN reference AS b ON 'user'=b.table AND 'type'=b.type AND a.type = b.value JOIN reference AS b2 ON 'user'=b2.table AND 'status'=b2.type AND a.status = b2.value
SELECT u.firstName, u.lastName, u.fbId, MIN(q.dateUsed) as dateUsed, u.codesLeft FROM Users u INNER JOIN Code q ON u.Id = q.userId GROUP BY u.firstName, u.lastName, u.fbId, u.codesLeft
declare @query varchar(max) = 'select * into #t from table' EXEC(@query) select * FROM #t
SELECT H.transaction_no, H.customer_id, H.operator_id, H.purchase_date FROM Sales_Transactions_Header H INNER JOIN (SELECT customer_id, MIN(purchase_date) As first_occurence FROM Sales_Transactions_Header GROUP BY customer_id) X ON H.customer_id = X.customer_id AND H.purchase_date = X.first_occurence
SELECT f.fruit, SUM(f.cnt) AS cnt FROM ( SELECT d.Fruit1 AS fruit, COUNT(1) AS cnt FROM Fruits d GROUP BY d.Fruit1 UNION ALL SELECT e.Fruit2 AS fruit, COUNT(1) AS cnt FROM Fruits e GROUP BY e.Fruit2 ) f GROUP BY f.fruit ORDER BY f.fruit
SELECT number, COUNT(CASE WHEN answer = 'yes' THEN 1 END) AS total_yes, COUNT(CASE WHEN answer = 'no' THEN 1 END) AS total_no FROM test_table GROUP BY number
select guid, sum(datediff(ms, t.[date], t.nextInactive)) as duration_ms from (select t.*, (select min([date]) from t t2 where t2.guid = t.guid and t2.[date] > t.[date] and t2.status = 'Inactive' ) as nextInactive from t where t.status = 'Active' ) t group by guid
SELECT t1.activity_status_id, Count(*), t2.description, t2.color FROM dbo.Activity t1 INNER JOIN dbo.Activity_Status t2 ON t1.activity_status_id = t2.id GROUP BY t1.activity_status_id ,t2.description,t2.color
where 'Kitchen Towel w/ Red-Brown Stripes' like productname || '%'
select count(*), round(mynum/3.0) foo from mytable group by foo;
SELECT A.x FROM A LEFT OUTER JOIN B ON A.x = B.x WHERE B.x IS NULL
select t.* from table t left outer join table sub on t.subid = sub.id where 'Tom' = t.name or 'Tom' = sub.name;
SELECT ROUND((SUM((to_number((case when g.grade='DRP' then '5.00' else g.grade end), '9D99') * s.subjunits)))/(SUM(s.subjunits)), 2)
-- Survey/Quiz "has many Questions" Survey (SurveyStartedAt, SurveyExpiresAt) -- Question "belongs to a Survey" Question (FK Survey, QuestionPrompt, QuestionRules..) -- Each Participant can "respond to a Survey" Response (FK Participant, FK Survey, ResponseTime) -- And each Answer, of which there are many per Response, -- "contains the answer for a single Question" Answer (FK Response, FK Question, Value)
update tbl t join (select post_id, meta_value from tbl where meta_value is not null) x on t.post_id = x.post_id set t.meta_value = replace(x.meta_value, '_ico', '_img') where t.meta_key = '_wpbdp[fields][10]'
Insert into Itemlookup (ItemNumber, Cases, [TimeStamp]) Select a.ItemNumber, b.CaseCount, a.TimeStamp from ItemsProduced a inner join MasterItemList b on a.ItemNumber = b.ItemNumber left join Itemlookup i on i.ItemNumber = a.ItemNumber and i.Cases= b.CaseCount and i.TimeStamp = a.TimeStamp where i.ItemNumber is null
INSERT INTO [ITD640_B].[dbo].[employee] ([employee_no] ,[employee_fname] ,[employee_lname] ,[store_no]) SELECT 123456 ,'YourFirstName' ,'YourLastName' ,[store_no] FROM store WHERE store_name = 'Rocky Mountain Produce';
select profile,sum(to_number(limit))from dba_profiles where ascii(substr(limit,1,1))between 48 and 57 and resource_name in ('PASSWORD_GRACE_TIME','PASSWORD_LIFE_TIME') group by profile;
1. Make TableA.CId and TableB.CId both FKs to Table C.ID. 2. Add a unique index in TableA on columns AId and CId. 3. Add a unique index in TableB on columns BId and CId. 4. Add a CId column to TableM. 5. Then Add two FKs in Table M, a. One using columns (AId, CId) pointing to Unique composite Index in Table A, and b. the other using columns (BId, CId) pointing to Unique composite Index in Table B.
select t1.a, t1.b into t4 from t1 join t2 on t1.a = t2.a and t1.c = t2.c join t3 on t1.a = t3.a and t1.c = t3.c where t3.e / t2.d < x
SELECT STR_TO_DATE('201038 Sunday', '%X%V %W');
SELECT [Quarter], [Month], SUM([Group]) as [Group], SUM([Member]) as Member, SUM([Value]) as [Value] FROM dbo.YourTableName GROUP BY [Quarter], [Month]
NSString *pathLocal; // Path to your SQlite DB file NSFileManager *fileManager = [NSFileManager defaultManager]; NSDictionary *localAttr = [fileManager attributesOfItemAtPath:pathLocal error:&error]; NSDate *localDate = [localAttr objectForKey:NSFileModificationDate]; // localDate here has the info you're looking for
public static Bitmap getBitmapFromBytes(byte[] bytes) { Bitmap bmp; bmp = BitmapFactory.decodeByteArray(bytes, 0, bytes.length); Bitmap mutableBitmap = bmp.copy(Bitmap.Config.ARGB_8888, true); return mutableBitmap; }
IF @date = CAST(getdate() as date) BEGIN SELECT * FROM server1.db1..MyTable ELSE SELECT * FROM server2.db2..MyTable_history WHERE date = @date END
select * from content_definition where content_id = 'hhhh233';
SELECT id AS newid FROM test WHERE newid=1; -- must use "id" in WHERE clause
TRANSFORM Sum(tbl_timesheet_hours.[work_order_hours]) AS SumOfwork_order_hours SELECT tbl_timesheet_hours.[work_order_no], Sum(tbl_timesheet_hours.[work_order_hours]) AS [Total Of work_order_hours] FROM tbl_timesheet_hours GROUP BY tbl_timesheet_hours.[work_order_no] ORDER BY Format([work_order_date],'ddd') PIVOT Format([work_order_date],'ddd') In ("Mon","Tue","Wed","Thu","Fri","Sat","Sun");
Users ----- UserID (PK) ... (Other user details) Product ------- ProductID (PK) ... (Other product details) Order ----- OrderID (PK) UserID (FK) OrderDate OrderLine --------- OrderID (PK) ProductID (PK) OrderQuantity
SELECT ... From ... WHERE date > DATEADD(year,-1,GETDATE())
SELECT c.*, m.first_name, m.last_name FROM charges c LEFT JOIN member m ON c.member_id=m.member_id INNER JOIN members_groups mg ON mg.group_id=1 AND mg.member_id = m.member_id
alter table tbl1 with check add constraint FK_tbl1_tbl2 foreign key (fkID1, fkID2) references tbl2 (pkID1, pkID2)
SELECT State, City, Device, Stat_A, Stat_B, null FROM A UNION SELECT State, City, Device, null, null, Stat_C FROM B;
select i from generate_series(current_timestamp - interval '24' hour, current_timestamp, interval '1' hour) i
SELECT t.* FROM dbo.tbh_table t CROSS APPLY dbo.fn_split(TopicID) split WHERE split.value = 19
SELECT T_RATE_ID, T_INPUTDATE, T_INPUTTIME, T_SINCEDATE FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY T_SINCEDATE ORDER BY T_INPUTDATE DESC, T_INPUTTIME DESC) rn FROM YourTable WHERE T_SINCEDATE<= sysdate) T WHERE rn = 1
select (select max(count1) from ( select count1 union all select count2 union all select count3 union all select count4 union all select count5) X) as MaxCount from tbl
update t1 set grp = t2.grp from yourtable t1 join yourtable t2 on t1.code = t2.code and t2.grp is not null where t1.grp is null
select * from ( select *, rnum = ROW_NUMBER() over ( partition by #tmp.foreignKeyId order by #tmp.startDate desc) from #tmp ) t where t.rnum = 1
SELECT t.col, s.Item FROM dbo.tablename AS t CROSS APPLY dbo.function_name(t.value) AS s;
SELECT OrderNumber, sum(SellPrice * Quantity) AS TotalCost FROM OrderDetail INNER JOIN Product ON Product.ProductID = OrderDetail.ProductID group by OrderNumber
SELECT EAM_Model, new_Model, count(*) FROM rollout_systems WHERE scope_ID = '.$id.' GROUP BY EAM_Model, new_Model
var results = from r in MyXmlFieldTable let date = context.XQueryDateTime( r.XmlValues, "MyContainer/MyDateTime" ) where date < DateTime.Now.AddDays( -5 ) select new { Date = date, FirstName = context.XQueryString( r.XmlValues, "MyContainer/FirstName" ), LastName = context.XQueryString( r.XmlValues, "MyContainer/LastName" ) };
select userid, checktime, checktype, verifycode from ( select userid, checktime, checktype, verifycode, case when checktype = lag(checktype) over (order by checktime) then 1 else 0 end as is_repeated from mytable ) marked where is_repeated = 0 order by checktime;
select schema1.Usage('element', 20140101, 20140714), schema1.TOTAL_Usage('element', 20140101, 20140714) schema1.CAPABILITY_Usage('element', 20140101, 20140714)/schema1.TOTAL_Usage('element', 20140101, 20140714) AS X(a) from sysibm.sysdummy1;
SELECT id, DatabaseYouUsed.dbo.functionYouWrote(id) FROM DatabaseYouUsed.dbo.TableWithIDs
select top 1 cola, colb from table1 order by cola, colb
SELECT * FROM ( SELECT CASE WHEN pet NOT IN ('dog','cat') THEN 'others' ELSE pet END pet, age FROM Pet.Info) AS B PIVOT (AVG(age) FOR pet IN ([dog],[cat],[others])) AS C
SELECT FISCAL_PERIOD, FISCAL_year, amount FROM MAXTABLE where fiscal_period = 5 union all SELECT FISCAL_PERIOD, FISCAL_year, amount FROM MAXTABLE where fiscal_period = (select max(fiscal_period) from MAXTABLE) and not exists (select * from MAXTABLE where fiscal_period = 5)
$sql = "SELECT p.id, m.menu_name, m.image_id, i.file_url FROM product p INNER JOIN menu m ON m.id = p.menu_id INNER JOIN icon i ON i.id = m.image_id WHERE ... ";
select t1.EmpID, t1.TimeIn, t1.TimeOut, datediff(minute, max(t2.TimeOut), t1.TimeIn) as minutes from timesheet t1 left join timesheet t2 on t1.EmpID = t2.EmpID and t2.TimeOut < t1.TimeIn group by t1.EmpID, t1.TimeIn, t1.TimeOut
$price=filter_var($_POST['price'], FILTER_SANITIZE_STRING); //USER SUBMITTED sanitization stage 1. $query=$dbh->prepare("SELECT * FROM $table WHERE price=?;"); $query->execute(array($price));
USE [Target DB]; DECLARE @view VARCHAR(MAX) DECLARE curs CURSOR FOR SELECT VIEW_DEFINITION FROM [Source DB].INFORMATION_SCHEMA.VIEWS OPEN curs FETCH NEXT FROM curs INTO @view WHILE @@FETCH_STATUS = 0 BEGIN EXEC(@view) FETCH NEXT FROM curs INTO @view END CLOSE curs DEALLOCATE curs
CREATE TABLE tblMembers ( Member_ID int identity(1, 1) not null primary key Name varchar(255) ); CREATE TABLE tblHorses ( Horse_ID int identity(1, 1) not nullprimary key Name varchar(255), Age int, Member_ID int references tblMembers(member_id) );
update t set num = num-1 where num > <val deleted>
CREATE SCHEMA cdbo AUTHORIZATION dbo;
select PM.PM_Eng_Name, sum(isnull(PMOutput.Quantity, 0)) as TotalOut from PM left outer join PMOutput on PM.PM_code = PMOutput.PM_code and PMOutput.Output_Date BETWEEN ‘2013-01-01’ AND ‘2013-08-25’ group by PM.PM_Eng_Name
(select a as yourField from d1) union (select b from d2) union (select c from d3) order by yourField desc limit 5
select ol1.orderId, ol1.orderLineId, count(*) as lineNumber from orderLine ol1 inner join orderLine ol2 on ol1.orderId = ol2.orderId and ol1.orderLineId >= ol2.orderLineId group by ol1.orderId, ol1.orderLineId
CREATE OR REPLACE FUNCTION func2(IDs integer[]) RETURNS SETOF y AS $BODY$ DECLARE a_id int; BEGIN FOREACH a_id IN ARRAY $1 LOOP RETURN QUERY SELECT * FROM func1(a_id); END LOOP; RETURN; END; $BODY$ LANGUAGE plpgsql STABLE STRICT;
SELECT @i := @i + 1 AS i, COUNT(*), ... FROM affiliates_earnings JOIN (SELECT @i := 0) dummy WHERE ... GROUP BY ...;
CREATE PROCEDURE [dbo].[proc_search_patient_ByID] ( @PatID_pk int , @Cntid smallint, @FamID int ) AS SET NOCOUNT ON IF @Cntid IS NULL BEGIN --Use select stmt of a table END ELSE --Use select stmt of another table BEGIN END
SELECT rnk, name ,gender FROM ( SELECT STRAIGHT_JOIN id, name, @y:=IF(@gender=gender,@y+1,1) AS rnk, @gender:=gender AS gender FROM (SELECT @gender:=NULL) AS x JOIN test ORDER BY gender, name DESC ) AS t ORDER BY rnk ASC, gender DESC;
SELECT stuff FROM foo INNER JOIN bar ON (join predicates here) WHERE (static filters here)
var query = product.OrderByDescending(m => m.ProductScore) .ThenBy(m => m.ProductId);
select id from your_table group by id having sum(rank=1 and `case`=0) > 0 and sum(rank=2 and `case`=1) > 0 and sum(rank=3 and `case`=0) > 0
SELECT ... FROM Table JOIN ( SELECT x.value(N'.',N'uniqueidentifier') as guid FROM @values.nodes(N'/guids/guid') t(x)) as guids ON Table.guid = guids.guid;
select school_ucn,count(DISTINCT otc_order_number) from storiacloud.schl_storia_revenue_fact group by school_ucn having count(distinct otc_order_number)>1
select projectid, group_concat(case when roleid = 1 then userid end) junior, group_concat(case when roleid = 2 then userid end) senior, group_concat(case when roleid = 3 then userid end) TL from table1 group by projectid
select 'answer1' as questions, sum(case when answer1 = 1 then 1 end) as total_1, sum(case when answer1 = 0 then 1 end) as total_0, sum(case when answer1 = NA then 1 end) as total_NA from tablename UNION ALL select 'answer2' as questions, sum(case when answer2 = 1 then 1 end) as total_1, sum(case when answer2 = 0 then 1 end) as total_0, sum(case when answer2 = NA then 1 end) as total_NA from tablename etc...
create table football_players ( id VARCHAR(36) PRIMARY KEY, name VARCHAR(20), surname VARCHAR(20), constraint chk_name_surname check (name is not null or surname is not null) );
Insert into tRestituiri (DataRestituire,CodCD , CodCV,CodAB) SELECT DataScadenta,CodCD , CodCV,CodAB FROM tImprumuturi WHERE DataScadenta>GETDATE()-60
select * from supplier s cross join Customer c
CREATE SCHEMA [billing] CREATE PROCEDURE billing.sp_IssueInvoice ( /*parameters*/ ) AS BEGIN -- Your code END CREATE PROCEDURE billing.sp_CancelInvoice ( /*parameters*/ ) AS BEGIN -- Your code END CREATE SCHEMA [ordering] CREATE PROCEDURE ordering.sp_SubmitOrder ( /*parameters*/ ) AS BEGIN -- Your code END CREATE PROCEDURE ordering.sp_UpdateOrder ( /*parameters*/ ) AS BEGIN -- Your code END
select vehiclename, sum(case when oil = 'oil1' then volume end) as oil_1, sum(case when oil = 'oil2' then volume end) as oil_2, sum(case when oil = 'oil3' then volume end) as oil_3 from the_table group by vehiclename order by vehiclename;
echo "UPDATE artwork SET location='storage' WHERE name='Mona Lisa' | psql -u some_user -d some_database
SELECT Shiftindex, ID, Time, x00 AS xGPS, y00 AS yGPS FROM GPS UNION SELECT Shiftindex, ID, Time, x01 AS xGPS, y00 AS yGPS FROM GPS
SELECT h.Hotelname, Sum(r.FreeRooms) as FreeRooms FROM hotel h INNER JOIN hotel_room r ON r.H_ID = h.H_ID GROUP BY h.Hotelname
select Items.itemId, count(MyTbl.itemId) as count from Items left join MyTbl on (MyTbl.ItemID = Items.ItemID) group by Items.itemId order by Items.itemId
WHERE field <> 'deactivated' OR field IS NULL
SET @dt = 'Mon Jun 13 2011 11:30:00 GMT-0400 (EDT)'; SELECT CONVERT_TZ( -- Parse all, but timezone STR_TO_DATE(@dt, '%a %b %e %Y %H:%i:%s'), -- Parse timezone to '+NN:NN' format INSERT(SUBSTRING_INDEX(SUBSTRING_INDEX(@dt, 'GMT', -1), ' ', 1), 4, 0, ':'), -- Our unified timezone '+00:00' ); -- Result: 2011-06-13 15:30:00
Select location,Cashier,[Time], stuff((SELECT distinct ', ' + cast(ref as varchar(500)) FROM t t2 where t2.location = t1.location FOR XML PATH('')),1,1,'') Grom t t1 Group By location, Cashier,[Time]
INSERT INTO UserPermission (UserPermissionID, UserID, PermissionID, RegionID) SELECT NEWID(), UserID, @PermID, NULL FROM UserRole r WHERE RoleID = '<specific guid>' AND NOT EXISTS (SELECT * FROM UserPermission WHERE UserID = r.UserID AND @PERMID = PermissionID);
select cast(DATEADD(hour, 13, 0) as time)
select 1.page_name, count(*) as ExitPageCount from WebLog l inner join ( select http_session_id, max(page_hit_timestamp) from WebLog group by session ) lm on l.http_session_id = lm.http_session_id and l.page_hit_timestamp = lm.page_hit_timestamp group by 1.page_name
SELECT Verticals.Vertical_Name as V_name, COUNT(*) AS [Count] FROM Impressions Inner Join Verticals ON Impressions.Campaign_id = Verticals.Campaign_id GROUP BY Verticals.Vertical_Name
SELECT COUNT(*) FROM AllScoringPlays WHERE GameId = 6124 AND SeasonId = 1 AND (P_AssistId = 21 OR S_AssistId = 21);
SELECT *, (select count (*) from Applications as A1 where A.ID = A1.AdID ) as Applicants, (select count(*) from Referrals as R where A.ID = R.AdID ) as Referrals, (select count(*) from Subscribers as S where A.ID = S.AdID ) as Subscribers, (select count(*) from Views as V where A.ID = V.AdID ) as Views FROM Ads as A
SELECT ID, MAX(CASE WHEN Position = 1 THEN Email ELSE '' END) AS primary_email, MAX(CASE WHEN Position = 2 THEN Email ELSE '' END) AS Secondary_email FROM YourTable GROUP BY ID;
WITH C AS ( SELECT MAX(IMAGE_ORD) M FROM TBL_IMAGE ) SELECT TBL_IMAGE.IMAGE_PATH, TBL_IMAGE.IMAGE_ID, TBL_IMAGE.DOC_NID FROM TBL_IMAGE JOIN C ON IMAGE_ORD = C.M WHERE ROWNUM < 2
SELECT * FROM table ORDER BY id = 5 DESC, id ASC
SELECT node_id, group_concat(name SEPARATOR ' ') FROM taggings INNER JOIN tags ON taggings.tag_id=tags.id INNER JOIN (SELECT node.id AS node_id, parent.id AS parent_id FROM categories AS node, categories AS parent WHERE node.lft BETWEEN parent.lft AND parent.rgt) subcategories ON subcategories.parent_id=taggings.taggable_id GROUP BY (node_id);
select t1.run, t1.code, t2.code from tablename t1, tablename t2 where t1.run = t2.run and t1.code = 1 and t2.code = 8;
SELECT photos.id,max(otherColumn) FROM \"photos\" INNER JOIN \"taggings\" ON \"photos\".\"id\" = \"taggings\".\"photo_id\" INNER JOIN \"tags\" ON \"tags\".\"id\" = \"taggings\".\"tag_id\" WHERE \"tags\".\"name\" IN ('foo', 'bar') group by photos.id having count(*) = 2 --2 is the number of items in your array of tags.
SELECT collections.collectionid as collectionid, photos.name as photo_name, 'photo' as document_type FROM collections LEFT JOIN photos on collections.collectionid = photos.collectionid WHERE collections.collectionid = 14 UNION ALL SELECT collections.collectionid as collectionid, song.name as photo_name 'song' as document_type FROM collections LEFT JOIN songs on collections.collectionid = songs.collectionid WHERE collections.collectionid = 14
SELECT customer_name, COUNT(DISTINCT product_ID) as products_count FROM customer_table INNER JOIN orders_table ON customer_table.customer_ID = orders_table.customer_ID GROUP BY customer_table.customer_ID, customer_name HAVING COUNT(DISTINCT product_ID) > 10
SELECT u.ID, u.fname, u.lname , d1.name as div_1_name , d2.name as div_2_name FROM USERS u LEFT JOIN DIVISIONS d1 ON u.div_1_id = d1.ID LEFT JOIN DIVISIONS d2 ON u.div_2_id = d2.ID
CREATE TABLE temp (startdate varchar(255), stuff varchar(255)); INSERT INTO temp SELECT startdate,stuff FROM mytable; TRUNCATE TABLE mytable; ALTER TABLE mytable ALTER COLUMN startdate DATETIME NOT NULL; INSERT INTO mytable SELECT CAST(startdate AS DATETIME), stuff FROM temp; DROP TABLE temp;
Select c.Id, c.Name from Client c Join ClientArticle ca on c.ID = ca.ClientID Join Article a on ca.ArticleID = a.ArticleId Where a.Value = 'Y'
http://download.oracle.com/docs/cd/B19306_01/appdev.102/b14352/toc.htm
SELECT ID, MAX(Total) FROM ( SELECT ID, Total FROM Table1 UNION ALL SELECT ID, Total FROM Table2 ) foo GROUP BY ID
SELECT c1.name, c1.country, c2.name, c2.country FROM city c1, city c2 WHERE c1.country < c2.country
select L1.Session, L1.Date, L1.Level, L1.Context, 'Api Call' AS Message, L3.ExecutionTime, L1.Parameters as InputModel, L2.Parameters as OutputModel, L3.Parameters as HttpResponse from Log L1 inner join Log L2 ON L1.Session = L2.Session inner join Log L3 ON L1.Session = L3.Session where L1.Message = 'Call Begin' and L2.Message = 'Call Response' and L3.Message = 'Call End'
select t.country, t.month, t.code, t.code_count, 100 * t.code_count / cast( x.scc as float) as percentage from t left join ( select country, month, sum(code_count) as scc from t group by country, month ) x on x.month = t.month
update pd set EAC = r.EAC from [dbo].[Projectdetails] pd join [dbo].['RAC'] r on pd.[ProjectKey] = r.[Project _ID]);
select ?husband ?color where {?husband <spouse> ?wife . ?husband <likes> ?color . OPTIONAL {?wife <likes> ?wifecolor FILTER (?wifecolor = ?color)} FILTER (!BOUND(?wifecolor))}
SELECT picture,person_id, firstname+ ' ' +middlename+ ' ' +lastname AS fullName FROM PERSON WHERE (firstname+ ' ' + LTRIM(middlename + ' ') + lastname LIKE"%#queryString#%")
select count(distinct recipient_id) from email e1 where e1.activity = 'delivered' and exists (select * from email e2 where e1.recipient_id = e2.recipient_id and e2.activity = 'open' and datediff(e2.action_date,e1.action_date) <= 1)
SELECT TOP (1) WITH TIES a, b, c, ROW_NUMBER() OVER (ORDER BY a) as ROWNUM, ROW_NUMBER() OVER (ORDER BY a) % 2 as BOOL FROM love ORDER BY BOOL DESC;
DELETE a.* FROM accounts a JOIN (SELECT email FROM accounts GROUP BY email HAVING COUNT(*) > 1) dup ON a.email = dup.email
update d_dim set FLAG = case when id in (select id from t_temp) then 'Y' else 'N' end;
INSERT INTO `<table>` (column1, column2, ...) -- Not IDENTITY columns SELECT column1, column2, ... FROM ...
<img src="data:image/jpeg;base64,<?php echo base64_encode($_SESSION['pic']); ?>" />
User (UserID, firstname, lastname, etc.) Event (EventID, Name, Date, Location, Capacity, etc.) EventRegistration (EventRegistrationID, UserID, EventID, ParticipantTypeID, etc.) ParticipantType (ParticipantTypeID, Name)
Data Source=myServerAddress;Failover Partner=myMirrorServerAddress;Initial Catalog=myDataBase;Integrated Security=True;
DECLARE @ItemBack1 TABLE ( column1 int, column2 int, someInt int, someVarChar nvarchar(50) ); INSERT INTO @ItemBack1 SELECT column1, column2, someInt, someVarChar FROM table2 WHERE table2.ID = 7;
Select f.name, t.name, message from messages Left join users as f on messages.fromID = f.uid Left join users as t On messages.toid = t.uid
SELECT A.id, A.name, B.[datetime] FROM tableA A LEFT OUTER JOIN tableB B ON A.Id = B.id AND B.[datetime] < @date
Update YourTable set shortDate = date_format(`Date`, '%m%d')
SELECT b.foreignkey, count(b.foreignkey) as bidcount FROM b WHERE b.foreignkey IN (SELECT a.id FROM a) GROUP BY b.foreignkey HAVING count(b.foreignkey) < 3
WITH t AS ( SELECT Client, Task, Hours, ROW_NUMBER() OVER(PARTITION BY Client,Task,Date ORDER BY Date) rn, DATEPART(dw,date) DayOfWeek FROM MyTable ) SELECT Client, Task, [1] Sun, [2] Mon, [3] Tues, [4] Wed, [5] Thu, [6] Fri, [7] Sat FROM t PIVOT(SUM(Hours) FOR DayOfWeek IN ([1],[2],[3],[4],[5],[6],[7])) p
response.write " $('li','#myList').each(function(i,li) { " int i = 1; sql= "INSERT INTO links SET headline='"& headline &"',datum='"& datum &"',links_adress='"& links_adress &"', userId=" & userId & ", avd_id=" & i & " ;" i++; conn.Execute (sql) response.write" })"
SELECT Count(DISTINCT ORD.ORDERNUMMER) FROM Orders AS ORD INNER JOIN Material AS KP ON KP.Ordernummer = ORD.Ordernummer WHERE (KP.SOORT = 'SCREEN') AND ORD.PRODUCTIEORDER = '201132' AND ORD.LAND = 'Belgie'
SELECT GENDER, R = ROW_NUMBER() OVER (PARTITION BY GENDER ORDER BY GENDER) FROM PERSON ORDER BY R, GENDER DESC
IList<string> sorted = context.Terms.ToList() .OrderBy(t => Regex.Replace(t.Term, @"\W*","")).ToList();
SELECT DISTINCT(ans) FROM ( SELECT right AS ans FROM answers UNION SELECT wrong1 AS ans FROM answers UNION SELECT wrong2 AS ans FROM answers UNION SELECT wrong3 AS ans FROM answers UNION SELECT wrong4 AS ans FROM answers ) AS Temp
select * from Sales where SaleDate between @StartDate and @EndDate and ( (@SalesUserId is not null and SalesUserId = @SalesUserID) or (@SiteId is not null and SiteId = @SiteId) or (BrandId = @BrandID) )
ADOQueryToUpdate->FieldByName("Column_Name")->AsInteger = ADOQueryFillingList->FieldByName("Column_Name")->AsInteger;
You can add a primary key! It just has to be over two columns and not just one. ALTER TABLE your_table ADD PRIMARY KEY(idA, idB)
SELECT * FROM table_name WHERE Login <> Alias
SELECT EID, SUM(PCNUM) FROM table1 GROUP BY EID;
CREATE TABLE Location ( LocationID INT PRIMARY KEY, CompanyID INT NOT NULL, -- References Company table, not shown here. LocationName VARCHAR(50) NOT NULL, -- Possibly UNIQUE? IsPrimary INT CHECK (IsPrimary IS NULL OR IsPrimary = 1), -- Use a BIT or BOOLEAN if supported by your DBMS. CONSTRAINT Locations_U1 UNIQUE (CompanyID, IsPrimary) );
DECLARE @object int exec sp_OACreate 'SQLDMO.SQLServer', @object OUT exec sp_OASetProperty @object, 'LoginSecure', TRUE exec sp_OAMethod @object,'Connect(sqltest)' exec sp_OAMethod @object, 'Jobserver.Jobs().Script()' exec sp_OADestroy @object
UPDATE STUDENT s SET points = s.points + CONSTANT * (SELECT p.score FROM PLAYSIN p WHERE p.name = s.name)
COUNT(case when Recordings_Sum >= 60 AND Recordings_Sum < 100 then 1 end) AS DaysAbove60 COUNT(case when Recordings_Sum >= 100 AND Recordings_Sum < 140 then 1 end) AS DaysAbove100 COUNT(case when Recordings_Sum >= 140 then 1 end) AS DaysAbove140
select id, sum(value) from ( select id, value from table1 union all select id, value from table2 union all select id, value from table3 ) t group by id
SELECT u.id, u.name FROM users u, relationships r WHERE u.id = r.follows_user_id AND r.user_id = N
SELECT COLUMN_NAME, MY_TIMESTAMP FROM TABLE_NAME WHERE MY_TIMESTAMP >= SYSDATE - INTERVAL '3600' SECOND ORDER BY MY_TIMESTAMP
DELETE FROM BatchProducts WHERE BatchProducts.ID = @ID AND EXISTS (SELECT * FROM [Batch] WHERE [Batch].ID = BatchProducts.BatchID AND [Batch].RetailerID = @RetailerID)
//OrderVal/Orderattrs/Orderattr/(@Ordername, OrderVals/OrderVal/listvalue)/data(.)
create procedure prTest @i int = null, @i2 int = null as select @i,@i2 go exec prTest 1 --just pass 1 parameter, 2nd is default go exec prTest -- leave all as default go exec prTest @i2 = 5 --to pass in a param if it is not 1st, use names go exec prTest null,5 --same as above
UPDATE likes INNER JOIN votes ON votes.votedElm = likes.id AND votes.country = likes.country SET likes.votes = IF(votes.vote_type = 0,likes.votes+1,likes.votes-1), votes.voteProcessed = 1 WHERE votes.voteProcessed = 0
SELECT * FROM PROFILE WHERE upper(no) = upper(?);
UPDATE inventar i INNER JOIN product_to_category ptc ON ptc.product_id = i.product_id INNER JOIN category_description cd ON cd.category_id = ptc.category_id SET i.category = cd.name;
CREATE OR REPLACE PROCEDURE proc_main AS BEGIN EXECUTE IMMEDIATE 'BEGIN proc_child1; END;'; EXECUTE IMMEDIATE 'BEGIN proc_child2; END;'; EXECUTE IMMEDIATE 'BEGIN proc_child3; END;'; proc_compile_invalids; -- This invokes -- "alter procedure <procedure_name> compile" -- statement for all the invalids. END;
CREATE TABLE a(id INT); INSERT INTO a (id) VALUES (1,2,3,4,5,6); CREATE TABLE b(id INT); INSERT INTO b (id) VALUES (10,20,30,40,50,60); CREATE TABLE c (a_id INT, b_id INT) AS SELECT a.id AS a_id, b.id AS b_id FROM a,b;
SELECT l.country, c.list, c.list_count FROM location l LEFT JOIN ( SELECT location_id AS id ,array_agg(id) AS list ,count(*) AS list_count FROM competition GROUP BY 1 ) c USING (id)
Select dmvndn "Vendor Number", IFNULL(sum(dmsls) / NULLIF(sum(dmprc), 0), 0) "Calculation" From MyFile Group By dmvndn
exec sp_msforeachtable "dbcc dbreindex('?')"
Select Table1.* from Table1 where (X = 0 or Width = X) and (Y = 0 or Height = Y) and (Z = 0 or Length = Z)
SELECT a.name, SUM(B.sequence + B.length) AS total FROM Tbl1 A INNER JOIN Tbl2 B ON B.sequence = A.sequence WHERE A.loc <> -1 AND A.id = 10201 GROUP BY a.name ORDER BY A.location
WHERE REPLACE ( REPLACE ( some_column, "-", "" ), ".", "" ) in ('10000000000', '1999999999')
public function ReplaceCodes(str as string) as string dim returnString as string returnString = str returnString = replace(returnString,"abc-longcode","") // ... etc... ReplaceCodes = returnString end function
SELECT ITEM_ID, (SELECT name FROM Code WHERE CODE_ID = Claim_ID) AS Claim_ID_NAME, (SELECT name FROM Code WHERE CODE_ID = status_ID) AS status_ID_name FROM Claim
select id, max(case when seqnum = 1 then value end) as value from (select t.*, row_number() over (partition by id order by modifieddate desc) as seqnum from table t ) t group by id having max(case when seqnum = 1 then value end) <> max(case when seqnum = 2 then value end);
CREATE OR REPLACE PROCEDURE ReverseOf(input IN varchar2) IS reverse varchar2(50); BEGIN FOR i in reverse 1..length(input) LOOP reverse := reverse||''||substr(input, i, 1); END LOOP; dbms_output.put_line(reverse); END;
Set @seq = 0; Set @type_id = -1; Update `log` Set `sequence` = If(@type_id=(@type_id:=`type_id`), (@seq:=@seq+1), (@seq:=1)) Order By `type_id`, `created_at`;
SELECT * FROM run WHERE run_id NOT IN (SELECT runID FROM booking WHERE startDate >= '10/07/2015' AND endDate <= '15/07/2015');
select unique id from table as t1 where (t1.source = 'a' or t1.source='f') and exists (select * from table as t2 where t2.id = t1.id and (t2.source = 'c' or t2.source='g') )
select case when your_varchar_column = 'N' then 1 else 0 end as your_bool_result from your_table
SELECT v.id, MAX(duration) FROM video v JOIN source s ON s.id IN (v.source_low, v.source_med, v.source_high) GROUP BY v.id
select * from table1 t1 union all select * from table2 t2 where not exists (select * from table1 t1 where t1.invno = t2.invno );
select spj1.jnum as jnum1, spj2.jnum as jnum2 from spj spj1 join spj spj2 on spj1.pnum = spj2.pnum and spj1.jnum < spj2.jnum group by spj1.jnum, spj2.jnum having count(distinct spj1.pnum) >= 100;
SELECT message, count(commentID) FROM tableA LEFT JOIN tableB ON tableA.messageID = tableB.messageID GROUP BY message
select d.employee_id, h.week_start_date from detail d join header h on h.header_id = d.header_id group by d.employee_id, h.week_start_date -- employees with same week_start_date having ( count(distinct h.location_code) > 1 -- have more than 1 location or count(distinct h.department_code) > 1 -- or more than 1 department )
Sale table: ----------------------------- sale_id autonumeric(1,1) PK , emp_id int FK , prod_id int FK , price decimal(10,2) , sold_date datetime(2) , other_interesting_sale_details
mysql -uroot -p database_name < backup.sql
select t1.id , t1.job_id , t1.updatedate , t2.rn as rnt2 from temprwithrn as t1 left join temprwithrn as t2 on t1.rn = t2.rn + 1 where t1.job_id <> t2.job_id or t2.job_id is null
db=# select current_date - interval '15' year; ?column? --------------------- 1997-04-26 00:00:00 db=# select current_date - interval '15' years --------------------- 2012-04-25 23:59:45 db=# select current_date - interval '15 year'; ?column? --------------------- 1997-04-26 00:00:00
MyTable: ID Interval Date 1 1 10-10-2001 SELECT ID, DATEADD(D, Interval, GETDATE()) AS NewDate FROM MyTable SELECT e.* FROM [events] e INNER JOIN [interval] i on e.customerID = i.customerID WHERE e.date = DATEADD(D, i.daysBefore, DATEADD(D, 0, DATEDIFF(D, 0, GETDATE())))
SELECT p.ID, m1.meta_value as event_address, m2.meta_value as event_date, p.post_title from events_posts p inner join events_postmeta m1 on p.ID=m1.post_id and p.post_type='event' and (p.post_status='publish' or p.post_status='recurring') and m1.meta_key='address' inner join events_postmeta m2 on p.ID=m2.post_id and p.post_type='event' and (p.post_status='publish' or p.post_status='recurring') and m2.meta_key='st_date' order by p.ID
SELECT * FROM posts ORDER BY DATE(published_at)=DATE(NOW()) DESC, DATE(published_at)<DATE(NOW()) DESC, DATE(published_at)>DATE(NOW()) ASC`
select * from Table Where SSN not Like '[0-9][0-9][0-9][0-9]'
SELECT * FROM categories AS c LEFT JOIN (SELECT * FROM articles ORDER BY id DESC) AS a ON c.id = a.id_category AND /criterias about joining/ WHERE /more criterias/ GROUP BY c.id
DECLARE @T TABLE ( b1 bit ,b2 bit ,b3 bit ); DECLARE @T2 TABLE ( b1 bit ,b2 bit ,b3 bit ,b4 bit ,b5 bit ); INSERT INTO @T VALUES (0,0,0),(1,1,1); INSERT INTO @T2 VALUES (0,0,0,0,0),(1,1,1,1,1); SELECT CHECKSUM(*) FROM @T; SELECT CHECKSUM(*) FROM @T2;
var customerName = ""; var customerEmail = ""; if (Request.Cookies["BookingReq"] != null) { var breq = db.Query("SELECT * FROM BookingRequests WHERE BookingGUID = @0", Request.Cookies["BookingReq"].Value); //I don't know webmatrix so I don't know what happens to breq if that value doesn't exist - I'll assume it's null if (breq != null) { customerName = breq.CustomerName; customerEmail = breq.CustomerEmail; } }
SELECT * FROM ( SELECT pk_id, user_id, some_timestamp, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY some_timestamp DESC) col FROM table) x WHERE x.col = 1
UPDATE `User` u LEFT JOIN `User` maxUser ON u.user = maxUser.user AND maxUser.endDate > u.endDate SET u.`endDate` = NULL WHERE maxUser.user IS NULL;
ALTER TABLE `invoices`.`invoices` CHANGE `DateTime` `DateTime` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
select key1, key2, key3, emailSent_Date, row_number() over (partition by key2, key3 order by key1) as "Count" from "table";
/* All parents without children */ SELECT a.* FROM tbl_Categories a WHERE NOT EXISTS ( SELECT * FROM tbl_Categories b WHERE b.CategoryId_fk = a.CategoryId ) /* All children */ UNION ALL SELECT a.* FROM tbl_Categories a WHERE CategoryId_fk IS NOT NULL
select t.* from (select t.*, sum(case when cust_type = 'M' then 1 else 0 end) over (partition by sales_id) as NumMs from table t ) t where NumMs > 1;
WHILE @Id IS NOT NULL AND @Id <> @AncestorId BEGIN SET @Id = ( SELECT ManagerId FROM dbo.Users WHERE UserId = @Id ) END RETURN CASE WHEN @Id IS NOT NULL THEN 1 ELSE 0 END
SELECT t2.person_id, COUNT(*) int_size, GROUP_CONCAT(t2.preference_id) shared_preferences FROM table t1 JOIN table t2 ON t1.preference_id = t2.preference_id WHERE t1.person_id = 1 AND t2.person_id != 1 GROUP BY t2.person_id ORDER BY int_size DESC LIMIT 10
ORDER BY DECODE( GRADE_MASTER.GRADE_DESCRIPTION, 'SENIOR DIRECTOR', 1, 'DIRECTOR', 2, 'MANAGER', 3, 'EMPLOYEE', 4, 5)
SELECT b.id, group_concat(c.a) a FROM a_b JOIN a ON a.id = a_b.a JOIN b ON b.id = a_b.b JOIN a_b c on b.id = c.b WHERE a.name = 'bob' GROUP BY b.id
SELECT InspectionProcedureName AS Inspection, COUNT(*) AS Total FROM UnitData_Vehicle WHERE (DATEDIFF(day, InspectionDateTime, GETDATE()) = 1) GROUP BY InspectionProcedureName UNION ALL SELECT InspectionProcedureName AS Inspection, COUNT(*) AS Total FROM AnotherTable WHERE (DATEDIFF(day, InspectionDateTime, GETDATE()) = 1) GROUP BY InspectionProcedureName UNION ALL -- Next query etc...
SELECT ID FROM FA WHERE MASS = 800 - (SELECT MASS FROM FA WHERE ID = '14:0')
SELECT DISTINCT SUBSTRING( 6pp, 1, 4 ) AS postcode FROM `6pp` WHERE EXISTS (SELECT 1 FROM tmp_orderimport oi WHERE oi.gebiedID = `6pp`.gemeenteID AND typeGebied = 'Gemeente' AND idorder = 1733 AND STATUS = TRUE );
$data = unserialize("thatlongstring"); print_r($data);
select t.candidateid , @curRank := @curRank + 1 AS rank, if(@prevote=-1, 0,@prevote-t.num) as sub, @prevote:=t.num as num from ( SELECT candidateid, count(*) as num FROM vote p group by candidateid ORDER BY num desc ) t, (SELECT @curRank := 0, @prevote:=-1) r
FOR i IN coll_nt.FIRST .. coll_nt.LAST LOOP dbms_output.put_line(i||': '||coll_nt(i)); END LOOP;
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY cav_id ORDER BY updated DESC) seq FROM yourTable) dt WHERE seq = 1;
SELECT UserID, COUNT(*) Total, SUM(CASE WHEN JoinStatus = 2 THEN 1 END) Joined FROM Customer WHERE JoinYear = 2016 AND JoinMonth = 1 AND JoinWeek = 2 AND JoinDay = 1 GROUP BY UserID
CREATE OR REPLACE PACKAGE my_constants AS color_alpha constant integer := 255; END my_constants;
CREATE OR REPLACE FUNCTION task_manager(task integer, params text) RETURNS integer AS $$ BEGIN IF task = 1 OR task = 2 THEN -- some work 1 END IF; IF task = 2 THEN -- some work 2 END IF; RETURN null; END; $$ LANGUAGE plpgsql;
sigma=0 demo_by_age = Demo.objects.filter(age_group=age); popn=demo_by_age.count() #One card_list = demo_by_age.values_list('card_no', flat=True) # Two dic = Fact_table.objects.filter(card_no__in=card_list).aggregate(Sum('duration') #Three sigma = dic['duration__sum'] avgDur=sigma/popn
private void UpgradeDatabaseWithDacpac(string connectionString, string databaseName, string dacpacFileName) { DacPackage dacPackage = DacPackage.Load(dacpacFileName); DacServices dacServices = new DacServices(connectionString); dacServices.Deploy(dacPackage, databaseName, true); }
SELECT city,state, CASE WHEN (city IS NULL OR city='') AND (state IS NULL or state='') THEN '' ELSE country END as country_1 FROM `table`
declare @caroptions table ( car varchar(1000) ) insert into @caroptions values ('BMW') insert into @caroptions values ('Toyota') insert into @caroptions values ('Nissan') select * from cars where make in (select car from @caroptions)
;WITH oc AS ( SELECT [order], COUNT([order]) AS order_count FROM order_comment GROUP BY [order] ), occ AS ( SELECT o.*, order_count AS comment, ROW_NUMBER() OVER (ORDER BY order_count DESC) AS [rownum] FROM [order] o INNER JOIN oc ON oc.[order] = o.id ) SELECT * FROM occ WHERE [rownum] BETWEEN 0 AND 10 ORDER BY [rownum]
update your_table set column1 = column1 || column2
select (case when su1.id is not null and su2.id is not null then 'BOTH' when su1.id is not null then 'TYPE1' when su2.id is not null then 'TYPE2' else 'Neither' end) from (select 999 as user_id from dual) u left join sub_user_1 su1 on su1.id = u.user_id left join sub_user_2 su2 on su2.id = u.user_id
SELECT title, body FROM messages WHERE tsv @@ to_tsquery('english', 'title & body')
SELECT a.StringValue, COUNT(a.StringValue) FROM Attributes a INNER JOIN ProductAssociations p ON a.ProductAssociation = p.ID AND p.ProductCode = 'MyProductCode' LEFT JOIN Attributes a2 ON a2.ProductAssociation = p.ID AND a2.Name = 'Is Test' AND a2.BooleanValue = 0 WHERE Name = 'Windows OS Version' AND StringValue IS NOT NULL AND COALESCE(a2.ProductAssociation, NULLIF(@IsTestsIncluded, 1)) IS NOT NULL GROUP BY a.StringValue
SELECT integername FROM tblintegerlist WHERE (integername-<variable>) BETWEEN -1 AND 1
;WITH cte AS ( SELECT Id, Name, ParentId FROM Color WHERE ParentId = @parentIdValue UNION ALL SELECT c2.Id, c2.Name, c2.ParentId FROM cte c1 INNER JOIN Color c2 ON c2.ParentId = c1.Id ) SELECT * FROM cte;
SELECT CONVERT(char(30), '2006-09-08 14:39:41.000',126)
SELECT CONCAT('DROP TABLE `',t.table_schema,'`.`',t.table_name,'`;') AS stmt FROM information_schema.tables t WHERE t.table_name LIKE 'USER_%%' ESCAPE '\\' ORDER BY t.table_name
SELECT locations.id as loc_id, meets.id as meets_id, ... FROM meets LEFT JOIN locations ON locations.id=meets.loc ORDER BY date DESC
select Account, security_name, broker_name, balance_bf, tran_amt, tran_date, FIRST_VALUE(balance_bf) OVER (PARTITION BY security_name, broker_name ORDER BY tran_date) as first_balance, FIRST_VALUE(tran_date) OVER (PARTITION BY security_name, broker_name ORDER BY tran_date) as first_tran_date from customer_transactions;
WITH RECURSIVE intervals(t) AS ( VALUES(1413902400000) UNION ALL SELECT t + 600000 FROM intervals WHERE t < 1413972000000 ) SELECT intervals.t, COUNT(*) FROM intervals LEFT JOIN MyTable ON MyTable.unixtime BETWEEN intervals.t AND intervals.t + 599999 GROUP BY 1;
public function getStatusAttribute($value) { return ($value) ? "Approved" : "Pending"; }
select p1.gameId from participants as p1, participants as p2 where p1.name = 'Team1' and p2.name='Team2' and p1.gameId = p2.gameId
INSERT INTO NewTable (flagNewTableCol,othercolumns) SELECT CASE WHEN flagColunn = 'Y' THEN 1 ELSE 0 END, othercolumns FROM OldTable
SELECT orders.user, orders.item, orders.date FROM orders, (SELECT * FROM orders WHERE item = 'ball') ball_table WHERE orders.user = ball_table.user AND orders.date > ball_table.date;
select a.Data, b.Data from Table1 a left join Table2 b on b.JoinValue = a.JoinValue and b.DateField =( select Max( DateField ) from Table2 where JoinValue = b.JoinValue );
INSERT INTO table1 (username) SELECT CONCAT(COALESCE(prefix, 'AB'), LPAD(COALESCE(MAX(id), 0) + 1, 3, '0')) FROM table1
select sum(order_total) as total_amount, to_char(trunc(created_date), 'DD/MM/YYYY') as grouped_date from orders where status = 'Complete' and created_date >= trunc(sysdate-30) group by trunc(created_date) order by trunc(created_date) asc
update _Items SET CodeName = REPLACE(CodeName,'_08_','_07_') where CodeName LIKE '%_08_%'
WHERE start_date <= sysdate AND closing_date >= sysdate
UPDATE i SET TrimNumber = tempintr.TempTrimNumber FROM Interpreters AS i INNER JOIN #InterpreterTrimNumbers tempintr ON i.TrimNumber= tempintr.TempTrimNumber
SELECT XMLQuery(' for $customer in ora:view("customer")/ROW return $customer/LAST_NAME ' RETURNING CONTENT) FROM DUAL;
select t.id, t.col, t.filter from (select t.*, @rn := if(@f = filter, @rn + 1, if(@f := filter, 1, 1)) as rn from table t cross join (select @f := '', @rn := 0) vars order by filter, id ) t order by rn, field(filter, 'type1', 'type2', 'type3');
SELECT COUNT(DISTINCT CustomerID) as Total, COUNT(DISTINCT CASE WHEN OrderDate >= '2016-01-01' THEN CustomerID END) as Total_2016 FROM Orders;
SELECT TO_CHAR(696585242087, '99G999G999G9999', 'NLS_NUMERIC_CHARACTERS=",."') FROM dual
essais=> SELECT * FROM Test1; id | foo | bar ----+-----+----- 2 | 1 | 2 essais=> ALTER TABLE Test1 RENAME COLUMN foo TO baz; ALTER TABLE essais=> SELECT * FROM Test1; id | baz | bar ----+-----+----- 2 | 1 | 2
with C as ( select *, row_number() over(partition by ToOrganizationID order by ToLastModifiedDate desc) as rnTo, row_number() over(partition by ToOrganizationID order by FromLastModifiedDate desc) as rnFrom from MergeAndDeleteNonprofitDetails ) select * from C where rnTo = 1 or rnFrom = 1
select student, greatest(q1, q2, q3, q4) as greatest_value from sample;
UPDATE topMovies SET movieId = REPLACE(REPLACE(movieId,'/title/',''),'/',''), year = REPLACE(REPLACE(year,'(',''), ')','')
SELECT *, ROW_NUMBER() OVER (PARTITION BY ReportId ORDER BY Time) as IncrementColumn FROM ProcessMaster
select user_1, user_2 from t group by user_1, user_2 having count(*) >= 2;
DELIMITER $$ CREATE TRIGGER `yourDB_polozky` BEFORE INSERT ON `yourDB`.`polozky` FOR EACH ROW BEGIN DECLARE vat_rate float; SELECT DPH INTO dph_rate FROM `yourDB`.`dph` WHERE id = new.dph_id; SET new.cena = (1 + dph_rate) * (new.cena_za_kus * new.mnozstvi); END $$
select * from ( select *, case when location = 'berlin' then 5 else 0 end + case when royality >= 100 then 1 else 0 end + case when familylaw = null then 1 else 0 end + case when criminallaw = true then 1 else 0 end as score from tbl ) scored order by score desc
DECLARE @from INT=1 DECLARE @to INT=5, @cnt INT, @sql NVARCHAR(max) SET @cnt=@from SET @sql='select ' WHILE @cnt <= @to BEGIN SET @sql += 'sum(sum' + CONVERT(VARCHAR(50), @cnt) + '),' SET @cnt+=1 END SELECT @sql = LEFT(@sql, Len(@sql)-1)+ ' from tablename group by GroupByID' exec sp_executesql @sql
SELECT ... Product.ProductPrice as Price, CustomerRules.ProductPriceRules as Rules FROM Product LEFT JOIN Customer ON ... LEFT JOIN CustomerRules ON Product.ProductID = CustomerRules.ProductID AND Customer.CustomerID = CustomerRules.CustomerID
SELECT CCID, COUNT(CASE WHEN TypeID = 5 THEN CCID END) as OurTypeCnt, COUNT(CASE WHEN TypeID <> 5 THEN CCID END) as NotOurTypeCnt FROM CCsTransactions GROUP BY CCID HAVING ((OurTypeCnt >= 1) AND (NotOurTypeCnt < 1))
select distinct t1.[key], STUFF((SELECT distinct ', ' + t2.plant from yourtable t2 where t1.[key] = t2.[key] FOR XML PATH(''), TYPE ).value('.', 'NVARCHAR(MAX)') ,1,2,'') plant from yourtable t1;
WITH tempTable AS (select userid, AVG(score) FROM sample GROUP BY userid) SELECT * FROM tempTable WHERE score = (SELECT MAX(score) FROM tempTable)
Me!AutoNumber.Value = Format(Val(Nz(Right(DMax("[AutoNumber]", "[YourTable]"), 3), 0)) + 1, "\D000")
UPDATE TableName SET Col2 = Col1, Col1 = NULL WHERE Col1 IS NOT NULL
select * from A inner join B on A.id_x = B.id_x inner join C on B.id_y = C.id_y inner join D on C.id_z = D.id_z where A.date > '2014-01-01' and A.id_y = 154 and D.id_t = 2 AND A.id_x IN ( SELECT A.id_x FROM A GROUP BY A.id_x HAVING count(A.id_x)>1);
SELECT --Set image for xmas CASE WHEN @CurrentMonth = 12 AND @CurrentDate = 25 THEN 'imagetest.png' --Set for easter WHEN @CurrentMonth = 3 AND @CurrentDate = 19 THEN 'imagetest2.png' --Keep setting images for events WHEN @CurrentMonth = 3 AND @CurrentDate = 19 THEN 'imagetest3.png' --If no match, return default image ELSE 'logo.png' END AS url
delete from GlassesColor where GlassesID in (select GlassesID from Glasses where CollectionID = 3)
SELECT Column_Name, Data_Type, Data_Length, Data_Precision, Nullable FROM All_Tab_Columns WHERE Owner = '<schema>' AND Table_Name = '<table>' ORDER BY Column_ID
UPDATE accounts SET account_id = '30' WHERE account_id = '20' AND user_id = '10';
select a.Id from proxy a, account b where a.ID = b.proxyId group by a.ID having count(*) <= 10
awk -F \* 'NR==FNR{if (/\*/)a[$1]} NR>FNR{ if (/\*/) {print;next} s=0 for (i in a) {if ($0~i){s++;break}} if (s==0) print }' file file
INSERT INTO [NewDB].[dbo].[Aliases] SELECT columns FROM [OldDB].[Terminal].[Alias]
SELECT p.*, o.* FROM Policy p JOIN OtherPolicyFile o on o.PolicyId = p.PolicyId LEFT JOIN OtherPolicyFile o9or10 on o9or10.PolicyId = p.PolicyId and o9or10.Status IN (9,10) WHERE o.Status IN (9,10) OR o.Status = 11 AND o9or10.PolicyId is NOT NULL GROUP BY <whatever key you need>
SELECT source_id, company_id, MAX(avg_click) as max_click FROM (SELECT source_id,company_id,AVG(clicks) AS avg_click FROM table_company GROUP BY source_id,company_id ORDER BY avg_click DESC) tmp GROUP BY company_id
SQLString = "UPDATE tblRegister" & _ " SET tblRegister.Status = " & IIF(StatusID=0,"NULL", StatusID) & _ " WHERE tblRegister.ID = 'reg01'
insert into `films_genres_temp` (`id`,`film_id`,`genre_id`,`num`) values (1,1,1,1), (2,1,17,2), (3,2,1,1), ... insert into `films_genres` (`film_id`,`genre_id`) select `film_id`,`genre_id` from `films_genres_temp`
ORDER BY Val(MasterPNo)
select place from myTable where Designation='Manager' and timeOfJoining > '1930-10-10' and timeOfLeaving < '1950-10-10';
select setval('keyword_id_seq', 3);
select b.KeyValue, a.rqstId, a.orchiveId, case when c.KeyTypeName = 'key2' then 0 else 1 end as KeyTypeNameForOrder from rqst a, key b, keyType c where a.statusId = 102 and a.requestType = 4 and a.processTypeId = 5 and b.rqstId = a.rqstId and c.KeyTypeId = b.keyTypeId order by 4
select g.*, coalesce(s1.erynda_kakayato, konkretnaya_hren) from general g left join secondary1 s1 on s1.general_id = g.id and g.type_id = 1 left join secondary s2 on s2.general_id = g.id and g.type_id = 2 ;
SELECT SUBSTRING('Z00056ABC00044', 1, CHARINDEX('ABC', 'Z00056ABC00044') -1)
sum(case when day([date]) = 1 then 1 else 0 end) as day1, sum(case when day([date]) = 2 then 1 else 0 end) as day2, sum(case when day([date]) = 3 then 1 else 0 end) as day3, sum(case when day([date]) = 4 then 1 else 0 end) as day4, etc sum(case when day([date]) = 31 then 1 else 0 end) as day31
CREATE TABLE a ( id int, other_id int REFERENCES b(id) ); CREATE TABLE b ( id int, other_id int REFERENCES a(id) ); INSERT INTO a VALUES (1,1); INSERT INTO b VALUES (1,1);
SELECT UserID, MIN(Login_Date) as First_Login_Date FROM Login WHERE Login_Date BETWEEN inputStartDate AND inputEndDate GROUP BY UserID, YEAR(Login_Date), MONTH(Login_Date), DAY(Login_Date)
select staff_id as id, totalrentaltranscations from a_table order by 2 desc limit 1;
SELECT au.*,p.* FROM account_users au INNER JOIN posts p ON p.account_users.id = au.id GROUP BY p.post_id HAVING count(*) > 5
INSERT INTO delivery(Manifest_Id, Expected_Start_DateTime, Expected_End_DateTime) VALUES ('SGP1361645SGP','2013-10-23 14:00:00','2013-10-23 18:00:00')
SELECT MIN(CASE WHEN company = 'walmart' THEN 'True' ELSE 'False' END) FROM Table1 WHERE users IN ('a','b','e') --False SELECT MIN(CASE WHEN company = 'google' THEN 'True' ELSE 'False' END) FROM Table1 WHERE users IN ('c','d','e') --True
SELECT A.ID_NO,A.NAME B.APPL_STATUS FROM PERSON A LEFT JOIN FORM_DETAILS B ON A.ID_NO=B.ID_NO WHERE B.APPL_DATE BETWEEN '12/07/2009' AND '12/09/2009' AND (B.STATUS = 'A' OR B.STATUS = 'C') ORDER BY APPL_DATE
-- A time interval must be either completely "to the left" or completely -- "to the right" of the other time interval for them not to overlap. SELECT * FROM EVENT WHERE NOT( (:s < DTSTART AND :s < DTEND AND :e < DTSTART AND :e < DTEND) OR (:s > DTSTART AND :s > DTEND AND :e > DTSTART AND :e > DTEND) )
select count(*) from (SELECT XMLTYPE( DBMS_XMLGEN.GETXML('select SEARCH_CONDITION from user_constraints ') ).extract('//SEARCH_CONDITION/text()').getstringval() srch_cond from dual) where srch_cond like '%&apos;g&apos;%'
SELECT * FROM Customers WHERE Country LIKE '%land%' order by charindex('land', Country)
SELECT bands.band_id, track_id FROM bands LEFT JOIN tracks ON tracks.band_id = bands.band_id WHERE bands.property1 = xyz;
MULTIPLY PRICE BY QUANTITY GIVING COST.
SELECT ArchiveTravelNewsByMonth, NewsDatePosted FROM( SELECT DISTINCT TOP 12 SUBSTRING(CONVERT(VARCHAR(11), NewsDatePosted, 113), 4, 8) AS ArchiveTravelNewsByMonth, NewsDatePosted FROM dbo.at_News)x ORDER BY CONVERT(DATETIME, ArchiveTravelNewsByMonth)
SELECT A.SVC_PREFIX, B.SVC_CD, A.anotherData, CD.SVC_ID, CD.isGood, CD.isHappy FROM A JOIN B ON B.SVC_PREFIX = A.SVC_PREFIX AND B.SVC_CD = A.SVC_CD JOIN ( SELECT SVC_ID, isGood, isHappy FROM C UNION SELECT SVC_ID, isGood, NULL AS isHappy FROM D ) AS CD ON CD.SVC_ID = B.SVC_ID
DENY UPDATE ON dbo.MyTable (Creator, CreationDate) TO SampleRole;
SELECT id, first_name, last_name FROM users WHERE (first_name LIKE 'jo%' OR last_name like 'jo%')
SELECT foo FROM Table WHERE CAST(foo as int)>@n
insert into holdings (accountid, holdingdate, holdingid, holdingvalue) select v.accountid, v.valuationdate, 999, v.valuation from valuations v left join holdings h on h.accountid=v.accountid and h.holdingdate=v.valuationdate where h.holdingdate is null EDIT: Corrected the second version to use a correlated WHERE clause. insert into holdings (accountid, holdingdate, holdingid, holdingvalue) select v.accountid, v.valuationdate, 999, v.valuation from valuations v where v.valuationdate not in (select distinct holdingdate from holdings where accountid=v.accountid)
SELECT options.optid as id, options.value as value, options.vid as voteid, ( SELECT COUNT(*) FROM vote_votes votes WHERE votes.optid = options.optid ) as votes FROM vote_options options WHERE options.vid = {$vote['vid']} ORDER BY votes DESC;
SELECT count(*) FROM comments WHERE thread=1 AND parent_id=0 AND NOT EXISTS (SELECT 1 FROM users WHERE users.user_id=comments.user_id)
select * from myTable order by field(myID, 8, 7, 6) desc;
Select T1.Id Ida, t2.id idb, T3.id idc FROM T3 LEFT JOIN (T2 LEFT JOIN T1 ON (T1.ID = T2.ID)) ON (T1.ID= T3.ID);
SELECT TOP 1 * FROM ( SELECT Patient_ID, Appt_Resource_ID, COUNT(*) AS theCount FROM vwGenPatApptInfo GROUP BY Patient_ID, Appt_Resource_ID WHERE ApptDateTime >= DATEADD(yyyy, -2, GETDATE()) and Appt_Cancelled_Date is NULL ) b JOIN vwGenPatInfo p ON p.Patient_ID = b.Patient_ID ORDER BY theCount DESC
select m.*, ms.TotalValue from MyTable m inner join ( select [Order], sum(Price * Quantity) as TotalValue from MyTable group by [Order] ) ms on m.[Order] = ms.[Order]
INSERT INTO Temp (id, name) VALUES (1, VARBINARY('rg_book'));
UPDATE Table1, Table2 SET Table1.Value = Table2.Value WHERE Table2.Name = "Table 1"
SELECT * FROM my_table;
select * from mytable where mydate = current date - (case when dayofweek(current date) = 1 then 2 -- sonntag when dayofweek(current date) = 2 then 3 -- montag else 1 end) days
def updateContact(id: Int, firstName: Option[String], lastName:Option[String], ...): Unit = { val q1 = Query(Contacts).filter(_.id === id) val c = q1.first val modifiedC = c.copy( firstName = firstName.getOrElse(c.firstName), lastName = lastName.getOrElse(c.lastName), ... ) q1.update(modifiedC) }
Select s.Branch, s.Date, s.containers, lag(s.Date) over (partition by branch order by date) as prev_Date, lag(s.containers) over (partition by branch order by date) as prev_Containers from shipping s;
select date(now() + trunc(random() * 20) * '1 day'::interval);
SELECT * FROM table1 WHERE str_col LIKE 'FR10%' OR str_col LIKE 'FR1%' OR str_col LIKE 'FR%' OR str_col LIKE 'F%' ORDER BY 4 * (str_col LIKE 'FR10%') + 3 * (str_col LIKE 'FR1%') + 2 * (str_col LIKE 'FR%') + 1 * (str_col LIKE 'F%') DESC, CHAR_LENGTH(str_col), str_col
BEGIN; INSERT INTO fields VALUES ('field1'); COMMIT;
SELECT t1.col1, t2.col2, t2.col3 FROM table1 t1 LEFT JOIN table2 t2 ON t1.col1=t2.col1 ;
SELECT * FROM posts WHERE STATUS=2 AND INSTR(tags,'featured video')>0 OR INSTR(tags,'video')=0
select TicketNum from TicketBooks a where Used='No' and TicketNum < (select MAX(b.TicketNum) from TicketBooks b where b.Used='Yes' and b.TicketBookNum = a.TicketBookNum) order by TicketNum desc
select * from t1 union all select * from t2 where Not exists (select 1 from t1 where t1.age = t2.age)
SELECT p.id, ..., creationdate FROM Post p LEFT JOIN Post_Has_Post php ON p.id = php.child_id ORDER BY COALESCE(php.parent_id, p.id), creationdate
select customer, max(case when seqnum = 1 then distributor end) as distributor1, max(case when seqnum = 2 then distributor end) as distributor2 from (select t.*, row_number() over (partition by customer order by (select null)) as seqnum from t ) t group by customer;
SELECT id, name as title, description as body, ( select GROUP_CONCAT( b.attributeValue ) as attributeValue from shop_product a, shop_product_attribute b where a.id = b.productId and b.attributeName="Tag" ) as tags FROM shop_product a
SELECT RIGHT(INC_DATE, 4);
declare @arr table (result int) insert @arr (result) select 1 union select 2
SQL> select to_char(systimestamp, 'YYYY-MM-DD HH24:MI:SS.FF TZD') as d from dual; D ---------------------------------- 2008-10-21 17:00:43.501591
SELECT * FROM Users WHERE MONTH( Users.Birthdate ) = MONTH( GetDate() ) AND DAY( Users.Birthdate ) = DAY( GetDate() )
select * from t where enrolldate= (select max(enrolldate) from t as t1 where t.id=t1.id) and t.code='WHEAT'
SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='your DB_Name' AND........{additional conditions }....
DELETE FROM `catalog_product_link` WHERE `link_type_id` = 5;
SELECT sum( CASE WHEN network = 'Search Network' THEN Ctr ELSE 0 END )
SELECT user_id FROM table_user_flags WHERE flag IN (1,2) GROUP BY user_id HAVING COUNT(DISTINCT flag)=2;
open table_cursor for 'SELECT * FROM REALM_ENTRIES WHERE ID IN (SELECT ID FROM APP_ENTRIES where APP_EXT_CODE =:appcode AND VERSION_NUMBER=:version_number)' using appcode, version_number;
UPDATE login SET is_admin=1 where memberid IN (1, 6, 10, 12, 7, 3)
SELECT Q1.customer_name, Q1.order_date, Q1.price, ( SELECT COUNT(*) + 1 FROM MyQuery AS Q2 WHERE Q2.customer_name = Q1.customer_name AND Q2.order_date < Q1.order_date ) AS pivot_id FROM MyQuery AS Q1;
SELECT c.id,l.login, AVG(f.mark) AS AVGRating FROM logininfo l JOIN person p ON l.id = p.info_id JOIN candidate c ON p.id = c.id JOIN feedback f ON c.id = f.candidat_id -- < -- this one GROUP BY c.id ORDER BY AVGRating ASC;
select id, sum(id*prm) from tablename group by id order by 2 desc
select t.in_click, t.first_name, t.create_date from tracker t where t.create_date = (select min(create_date) from tracker where in_click = t.in_click) or t.create_date = (select max(create_date) from tracker where in_click = t.in_click)
select * from (select skl.*, row_number() over (partition by skl.KeyId order by skl.PublishDate desc) as rn from ServerKeyLog skl where skl.PublishDate >= date '2015-08-01' and skl.PublishDate < date '2015-09-01') where rn = 1 and IsActive = 'T' order by KeyId
SELECT StudentName FROM tblStudents WHERE LEFT(StudentName,1)= RIGHT(StudentName,1)
Get Distance: float[] results = new float[1]; Location.distanceBetween(SQLitePosition.latitude, SQLitePosition.longitude, CurrentPosition.latitude, CurrentPosition.longitude, results);
DELETE student WHERE ApplicationDateTime <> (SELECT max(ApplicationDateTime) FROM student s2 WHERE s2.StudentID = student.StudentID)
SELECT fd.cust_id FROM fd JOIN loan USING (cust_id) GROUP BY fd.cust_id, fd.amount HAVING fd.amount < sum(loan.amount)
SELECT t.* FROM table t JOIN (SELECT rid, MAX(revision) MaxRevision FROM table GROUP BY rid) mt ON t.rid = mt.rid AND t.revision = mt.MaxRevision
#!/bin/bash if [ $( ps aux | grep WLS_FORMS |wc -l) -eq 1 ] then echo "Process is not running." service oracleforms start else echo "Process is running." fi
CREATE TABLE user_rating ( rated_user_id INTEGER NOT NULL, rater_user_id INTEGER NOT NULL, value FLOAT, time TIMESTAMP, PRIMARY KEY (rated_user_id, rater_user_id));
SELECT [RowKey], x.y.value('(.)[1]', 'INT') AS ItemKey FROM dbo.[tbl_MyDataTable] AS t CROSS APPLY t.[Format].nodes('/MultiSelect/ItemKey') x(y)
column startval new_value v_startval SELECT MAX(customer_id) + 1 FROM customer; create sequence customer_seq start with &v_startval.;
SELECT ... CASE WHEN LEFT(LTRIM(RTRIM([consent_complete])),1) = '2' THEN 'Complete' ELSE 'Incomplete' END AS [Complete?] FROM ...
dim x as integer for x = 0 to datTable.rows.count - 1 listOfCanteenSwipe.Add(datTable.rows(x).item("datarec")) next
SELECT min(ID), City FROM Cities Group by City
SQL> ed Wrote file afiedt.buf 1 select rpad( '* ', level*2, '* ' ) 2 from dual 3* connect by level <= 3 SQL> / RPAD('*',LEVEL*2,'*') -------------------------------------------------------------------------------- * * * * * *
WHERE t.something = 'something' AND (t.lastname = 'smith' or t.name <> 'john')
select * from case C left join P on P.case_id = C.case_id and P.primary_party != '' where P.case_id is null
UPDATE tContractsInTransit SET Paid = 'true' FROM tContractsInTransit cit INNER JOIN (SELECT CtrlNo ,SUM(Amt)/COUNT(DISTINCT CtrlNo) AS Tot FROM tContractsInTransit GROUP BY CtrlNo HAVING SUM(Amt)/COUNT(DISTINCT CtrlNo) = 0) t ON cit.CtrlNo = t.CtrlNo
SELECT r.Restaurant_ID, m.Item_Name, m.Item_price FROM restaurants r LEFT JOIN menu m ON r.Restaurant_ID=m.Rest_ID WHERE Item_ID=1
SELECT name FROM tbl_name GROUP BY name HAVING COUNT(name) = 1
Select * From YourTable Where IsDate([myDtField]) And DateDiff("d", DateValue([myDtField]), Date()) > 120
select cnt.loginid, COUNT(*) from contact cnt right join grpmem list on cnt.contact_uuid = list.member left join contact grp on grp.contact_uuid = list.group_id join contact_acctyp cntacc on cnt.contact_uuid = cntacc.contact_uuid where cntacc.c_acctyp_id in (select id from acctyp_v2 where sym like 'CDN%') GROUP BY cnt.loginid
;with numbered as ( SELECT event_type, department_name, effective_time, row_number() OVER (ORDER BY effective_time) row FROM a ) SELECT cur.event_type, cur.department_name, cur.effective_time FROM numbered cur LEFT JOIN numbered prev ON cur.row = prev.row + 1 WHERE cur.row = 1 or prev.event_type <> cur.event_type or prev.department_name <> cur.department_name ORDER BY cur.effective_time
from t1 in tab1 from t2 in tab2.Where(t2 => t2.SomeCol == t1.SomeCol).Take(1) select new { t1, t2 }
--will not count NULLS select @totalrecs= count(id) from table1 --will count NULLS select @totalrecs= count(*) from table1
SELECT * FROM table WHERE theDate < convert(date, GetDate())
SELECT CustomerType, COUNT(*), SUM(CASE WHEN Status = 'C' THEN 1 ELSE 0 END), SUM(CASE WHEN Status = 'A' THEN 1 ELSE 0 END), SUM(Amount) FROM Customers GROUP BY CustomerType ORDER BY CustomerType
INSERT INTO `wp_postmeta` (post_id, meta_key, meta_value) SELECT post_id, 'custom', custom FROM `wp_temp` WHERE custom IS NOT NULL UNION ALL SELECT post_id, '_custom', 'field_514e91e73640d' FROM `wp_temp` WHERE custom IS NOT NULL
SELECT SUM(CASE WHEN field_id_207 != '' then 1 else 0 end) as total_1, COUNT(exp_channel_data.entry_id) AS total_2 FROM exp_channel_data JOIN exp_channel_titles ON exp_channel_titles.entry_id = exp_channel_data.entry_id AND status = 'open' AND exp_channel_data.channel_id = '18' AND author_id = "CURRENT_USER"
dbo_agreements_1.end_date >= DateSerial(Year(Date()), Month(Date()) -1, 1) AND dbo_agreements_1.end_date < DateSerial(Year(Date()), Month(Date()), 1)
update old set NewID = new.NewID from ContactRecords as old inner join NewContact as New on new.OriginalID = old.OriginalID
DateTime startDate = DateTime.Now.Date.AddDays(-13).Date;
CREATE TEMPORARY TABLE tc AS (SELECT company.id AS cid, temp_company.scode AS tcode FROM temp_company INNER JOIN company ON temp_company.number = company.number WHERE temp_company.scode IS NOT NULL AND temp_company.scode != "") CREATE TEMPORARY TABLE rc AS (SELECT tc.cid as cid FROM tc LEFT JOIN company_scode ON tc.cid = company_scode.company_id WHERE tc.tcode = company_scode.code) SELECT * FROM tc WHERE tc.cid NOT IN (SELECT cid FROM rc)
select p.* from Table1 as p inner join (SELECT ProductName, MIN(Price) AS minPrice FROM Table1 GROUP BY ProductName) t on p.productname = t.ProductName and p.price = t.minPrice
debug($node);
sum(case when t.credit then t.amount else -t.amount end)
SQL> select 1 from dual where regexp_like('?:', '(?:)'); 1 ---------- 1 1 row selected.
SELECT months.id_month, Count(DISTINCT ad.email) FROM `months` LEFT OUTER JOIN `ad` ON id_month = Month(ad.created_at) AND Year(ad.created_at) = 2015 GROUP BY id_month ORDER BY id_month ASC
SELECT NAMA_AKUN, REPLACE(NAMA_AKUN, 'DOLLAR AMERICA', 'USD') AS NEW_NAMA_AKUN FROM MONDES_MSTR_CHART_OF_ACCOUNT WHERE INSTR(NAMA_AKUN, 'DOLLAR AMERICA') > 0;
CREATE TABLE #tmp_NoRotadayOff ( DayOfYear datetime , Rota varchar(10) COLLATE DATABASE_DEFAULT , RotaTemplate varchar(50) COLLATE DATABASE_DEFAULT );
SELECT * FROM exp_categories WHERE parent_id IN (4, 5, 6, 7) ORDER BY cat_id ASC;
SELECT * FROM [dbo].[tickets] WHERE t_date_time_issued > DATEADD(mm, - 30, GetDate()) AND Cast(t_date_time_issued as TIME) between '06:00' and '09:10'
INSERT INTO transactions(itemid, userid, tdate) SELECT TOP 1 items.ID, users.ID, NOW() FROM items, users ORDER BY Rnd(-(1000*items.ID*users.ID)*Time()), items.ID, users.ID
select t.* from (select t.*, dense_rank() over (partition by x order by y) as seqnum from atable t ) t where seqnum <= 2;
using (var dataContext = new DataContext(ConnectionString)) { dataContext.TABLE_NAME.Attach(modifiedEntity); dataContext.SubmitChanges(); }
select dte, count(*) from (select trip_id, min(date_trunc('day', timestamp)) as dte from t group by trip_id ) t group by dte order by dte;
select firstname, lastname, count(*) as `Name Count` from table group by firstname, lastname
SELECT * FROM YourTable WHERE X IN ( SELECT T1.X FROM YourTable T1 INNER JOIN YourTable T2 ON T1.X = T2.X WHERE T1.DATE <> T2.DATE );
IF EXISTS (SELECT * FROM sys.synonyms WHERE name = N'TABLE_SYNONYM') DROP SYNONYM [dbo].[TABLE_SYNONYM] IF @region_id not in (2,3) CREATE SYNONYM [dbo].[TABLE_SYNONYM] FOR [DB_US].[dbo].[mytable] IF @region_id = 2 CREATE SYNONYM [dbo].[TABLE_SYNONYM] FOR [DB_EU].[dbo].[mytable] IF @region_id = 3 CREATE SYNONYM [dbo].[TABLE_SYNONYM] FOR [DB_Asia].[dbo].[mytable] insert into [dbo].[TABLE_SYNONYM] (...) select ....
SELECT F.fruitName FROM tblFruits as F INNER JOIN tblFruitTagJunc AS FTJ on F.fruitID = FTJ.fruitID INNER JOIN tbltag as T ON FTJ.tagID = T.tagID GROUP BY F.fruitName HAVING SUM(iif(t.tag in ('Orange'), 1, 0) > 0 AND COUNT(t.tag) = 1;
CREATE TABLE locationCreatedNew SELECT * FROM location RIGHT JOIN locationdata ON location.id=locationdata.location_location_id;
create table #t ( name sysname, rows bigint, reserved varchar(50), data varchar(50), index_size varchar(50), unused varchar(50) ) EXEC sp_MSForEachtable 'insert into #t EXEC sp_spaceused ''?''' select name,rows,reserved,data,index_size,unused from #t
ORA-01922: CASCADE must be specified to drop 'THE_USER'
select category, series, CntS from ( select distinct count(category) over (partition by category) cntC, count(series) over (partition by category, series ) cntS, category, series from fruit ) Tab order by CntC desc, cntS desc;
select (select count(*) from data where 991 in (insurance1, insurance2, insurance3)) + (select count(*) from sat where 991 in (insurance1, insurance2, insurance3));
SELECT COUNT(u) FROM RAZUserBundle:User u WHERE u.id NOT IN ( SELECT u2.id FROM RAZUserBundle:User u2 JOIN u2.groups g WITH g.id = 70 )
sqlite> create table selfref (id integer primary key, name string, parent integer references selfref (id)); sqlite> .schema CREATE TABLE selfref (id integer primary key, name string, parent integer references selfref (id)); sqlite> insert into selfref values (null, "alice", null); sqlite> insert into selfref values (null, "bob", null); sqlite> insert into selfref values (null, "charlie", (select id from selfref where name = "alice")); sqlite> select * from selfref; 1|alice| 2|bob| 3|charlie|1 sqlite>
SELECT t.column1 AS "@Name", t.column2 AS Subcategory FROM TABLE t FOR XML PATH ('Category')
select c.*, e.cnt from [Contract] c inner join (select e.ContractId, count(*) as cnt from Envelope e group by e.ContractId having count(*) >= 10 ) e on e.ContractID = c.ID;
select a.name,b.manufacturer_id,c.id,c.item_desc from manufacturers as a inner join item_manufacturers as b on b.manufacturer_id=a.id inner join item as c on c.id=b.item_id
with recursive tc as( select $1 as player_id, 1 as level union select ph2.player_id, level+1 from tc, phone_hashes ph1, phone_hashes ph2 where tc.player_id=ph1.player_id and ph1.hash=ph2.hash and tc.level < 6 ) select distinct player_id from tc
UPDATE links1 INNER JOIN links2 ON (links1.URL = links2.URL) SET links1.UTitle = links2.title, links1.UDesc = links2.description
UPDATE products AS p JOIN categories AS c ON p.scategory = c.scategory SET p.fcategory = c.scategory
SELECT C.conContractID, COALESCE(C.conWkActual, C.conWkPlanned, C.conWkBaseline) AS 'YourDatecolumn', C.conService, C.conCapRev, C.conContractType, C.conSection, C.conContractStatus FROM Contracts C WHERE ConContractStatus = 'Cancelled';
SELECT /*+ INDEX (t index_name_on_col1) */ * FROM mytable t WHERE col1 IS NOT NULL
select * from cards_data where id in ( select cards_id from con_cards_colors group by cards_id having count(case when colors_id in (select id from colors where name in ('Red','Blue')) then 1 end) = 2 -- i.e. find all and count(*) = 2 -- i.e. find only those and no others );
SELECT CASE WHEN fruit IN ('orange', 'grapefruit') THEN 'citrus' ELSE fruit END, SUM(price) FROM inventory GROUP BY CASE WHEN fruit IN ('orange', 'grapefruit') THEN 'citrus' ELSE fruit END
use tempdb go CREATE TABLE example ( id BIT DEFAULT (0) ) INSERT example (id) VALUES (null) SELECT * FROM example
select column1, count (*) from mytable where column2 = column3 group by column1, column2;
Select distinct pair From table2 join table1 b on b.CUR = t.bas join table1 u on u.id = b.id and u.CUR = t.under
select idStudent, SUM( hourCourse * mark ) / SUM( hourCourse ) AS WeightedAvg from ( SELECT t.*, case when @idStudent<>t.idStudent then @cumSum:=hourCourse else @cumSum:=@cumSum+hourCourse end as cumSum, @idStudent:=t.idStudent FROM `test` t, (select @idStudent:=0,@cumSum:=0) r order by idStudent, `key` ) t where t.cumSum <= 30 group by idStudent;
;WITH CTE as (Select *, ROW_NUMBER()over(partition by OUTPUTVALUE order by id)rn From #Temp A Inner Join #Temp2 B On A.Id=B.Table1Id Where A.Value=1) SELECT OUTPUTVALUE FROM cte where rn >= 3
Insert into TagSoftarerel (SoftwareID, TagID) Select m.Id, (Select T.TagId from Tag T where T.Tag = m.Keyword) as TagId from MAIN m
DoCmd.SetWarnings False ' do stuff here DoCmd.SetWarnings True
SELECT email, COUNT(*) AS num_tables FROM (SELECT DISTINCT email FROM table1 UNION ALL SELECT DISTINCT email FROM table2 UNION ALL -- All the other tables ) t GROUP BY email HAVING COUNT(*) > 1
select a.city, count(b.city) as cnt from a left join b on a.id=b.city and b.active=1 group by a.id, a.city order by count(b.city) desc
<cfquery name='b'> SELECT ID , AVG( DECODE( Pen_Type, 'Type A', Pen_Price, 0 ) ) AS Price_A , AVG( DECODE( Pen_Type, 'Type B', Pen_Price, 0 ) ) AS Price_B , AVG( DECODE( Pen_Type, 'Type C', Pen_Price, 0 ) ) AS Price_C FROM Pen_Table WHERE Date_Purchase = #Date# GROUP BY ID </cfquery>
column title_column1 new_value vc1 column title_column2 new_value vc2 column title_column3 new_value vc3 select title_column1,title_column2,title_column3 from test_columns; select &vc1,&vc2,&vc3 from test_data;
createdb -p 5433 -T template0 db_name pg_restore -p 5433 --no-owner --role=owner2 -d db_name db_name.dump
SELECT IDIDAT, COUNT(*) FROM CA1665AFCV.SROISDPL T01 WHERE IDIDAT >= '20160101' AND IDORDT = 'FB' GROUP BY IDIDAT
$user = User::findOrFail($id); $user->getGroups(); foreach($user->groups as $group) { echo $group->name; }
SELECT PB_BANK_CODE, PB_BANK_NAME, ISNULL(SUM(PC_AMOUNT),0) FROM GLAS_PDC_BANKS inner join GLAS_PDC_CHEQUES on GLAS_PDC_BANKS.PB_BANK_CODE = GLAS_PDC_CHEQUES.PC_BANK_FROM WHERE PB_COMP_CODE='1' AND PB_BANK_CODE='025' AND ISNULL(PC_DISCD,'X') != 'C' AND PC_DUE_DATETIME BETWEEN '05/05/2008' AND '05/06/2008'
insert into table (all_Dates) SELECT * FROM OPENQUERY(USLinkedServer, 'SELECT getdate()') union SELECT * FROM OPENQUERY(UKLinkedServer, 'SELECT getdate()') union SELECT * FROM OPENQUERY(AUSLinkedServer, 'SELECT getdate()') . . .
DELETE * FROM 'list' WHERE id NOT IN ( SELECT id FROM 'list' ORDER BY id DESC LIMIT 25 )
select convert(varchar(10), getdate(), 105) + ' ' + SUBSTRING(CONVERT(varchar, getdate(), 100), 14, 4)+ ' ' + RIGHT(convert(varchar, getdate(), 100), 2)
table authorities: username id bob 1 bob 3 bob 5
select ServerName,Downloaded,Failed, RebootRequired, Administrator from Table1 t1 left join Table2 t2 on t1.ServerName=t2.ServerName
select contentID, title, created from content where created < dateadd(week,-3,getdate());
SELECT MTGUID * 1.35 as calculatedMTGUID, SUBSEL.* FROM ( SELECT BKRETAIL.* FROM BKRETAIL WHERE BKRETAIL.MKEY='SOMEKEY' UNION SELECT BKWHOLESALE.* FROM BKWHOLESALE WHERE MKEY='SOMEKEY') SUBSEL ORDER BY case STATUS WHEN 'RT' then 1 WHEN 'WH' then 2 WHEN 'OL' then 3 WHEN 'OD' then 4 WHEN NULL then 5 else 6 end;
SELECT COUNT(*) FROM ( SELECT Col1 FROM Table GROUP BY Col1 ) tbl
SELECT w.fizz FROM widgets w WHERE w.special_id = 2394 AND ( ( w.buzz != null AND w.foo = 12 ) OR ( w.blah = 'YES' AND w.num = 4 ) )
select a.mnth,b.leavecount from ( SELECT to_char(to_date(LVL,'MM'),'MM') mnth FROM (select level lvl from dual CONNECT BY LEVEL <=12) ) a ,(SELECT to_char(leavedate,'MM') AS MONTH,leavecount..."your query")b WHERE a.mnth=b.MONTH(+)
update fruittable set fruitvalue = (SELECT MAX (fruitvalue) FROM fruit WHERE fruitname IN ('apple','pear')); where fruitname in ('apple', 'pear');
select term, count(DISTINCT iso) as doc_frequency from countries , regexp_split_to_table(name, '[^\.\w]') term where term <> '' group by term;
<fieldType name="signatureNgrams" stored="false" class="solr.StrField"> <analyzer type="index"> <tokenizer class="solr.analysis.NGramTokenizerFactory" minGramSize="4" maxGramSize="4" /> <filter class="solr.LowerCaseFilterFactory"/> </analyzer> </fieldType>
SELECT Format(Sum(IIf(MONTH(Sale_PickupDateTime)=1,1,0))/Count(Sale_PickupDateTime) , "Percent") AS January FROM [Sales Table];
SELECT COUNT(1) FROM (SELECT t1.name as name1, t2.name as name2 FROM Locations t1, Locations t2 WHERE t1.name <> t2.name)
UPDATE mytable SET myfield = REPLACE(myfield, CHAR(0), '')
UPDATE t2 SET t2.id = t1.id FROM T t2 JOIN S1.<dbname>.dbo.T t1 ON t2.somefield = t1.somefield -- AND t2.otherfield = t1.otherfield
select distinct director, title, stars from (movie join rating using (mid)) m where stars in (select max(stars) from rating join movie using (mid) where m.director = director);
(CASE WHEN [Control_Stage2] IS NULL THEN NULL -- or -1 or what you like ELSE datediff(day,[Control_OpenDate],getdate()) END)
order by Table1.Name, Table2.Money
while not exists (select * from QueueTable) begin wait for delay '00:01' end
SET SERVEROUTPUT ON BEGIN -- A PL/SQL cursor FOR cursor1 IN (SELECT * FROM table1) LOOP DBMS_OUTPUT.PUT_LINE('Column 1 = ' || cursor1.column1 || ', Column 2 = ' || cursor1.column2); END LOOP; END; /
SELECT * FROM dbo.TestFunction (your_parameters_separated_by_commas)
UPDATE tbl2 t INNER JOIN tbl1 s ON(t.transaction_id = s.id) set t.transaction_id = s.id_trans
SELECT CAST(CAST(@ReminderDate AS Date) AS DateTime) + CAST(DATEADD(HOUR,-3,@ReminderTime) AS TIME)
SELECT firstName, lastName FROM Presidents WHERE endTerm > DATE_ADD(beginTerm, INTERVAL 4 YEAR)
create materialized view first_view as select a.column_one, b.column_two, c.column_three from table_a a join table_b b on a.id = b.aid join table_c c on b.id = c.bid; create materialized view second_view as select x.some_column, f.* from other_table x join first_view f on x.id = f.column_one;
select id, max(col1) as col1, max(col2) as col2, max(col3) as col3, max(col4) as col4 from t group by id;
SELECT SUM(CASE WHEN order.state = 3 AND order.source = 1 THEN 1 ELSE 0 END) AS equal, SUM(CASE WHEN order.state <> 3 AND order.source <> 1 THEN 1 ELSE 0 END) AS different FROM order;
SELECT Name, 'Users' AS Type FROM users WHERE name LIKE '%alex%' UNION SELECT Name, 'Admins' AS Type FROM admins WHERE name LIKE'%alex%'
SELECT ( SELECT COUNT( WiningComment) FROM Threads WHERE WiningComment IN (SELECT CommentsID FROM Comments WHERE UsersID=@UserID) ) as 'WinningAnswers', ( SELECT COUNT(CommentsID) FROM Comments WHERE UsersID=@UserID ) as 'TotalAnswers'
WITH MyCte AS (SELECT MyWeek = 1 UNION ALL SELECT MyWeek + 1 FROM MyCte WHERE MyWeek < 53) SELECT MyWeek, DATEPART(year, DATEADD(wk, -MyWeek, GETDATE())), DATEPART(month, DATEADD(wk, -MyWeek, GETDATE())), DATEPART(wk, DATEADD(wk, -MyWeek, GETDATE())) FROM MyCte
select B.caseNumber, ISNULL(count(C.checkupNumber) ,0) from BaseTable B left join Checkup C on B.caseNumber = C.caseNumber where B.patientId ='P201' group by B.caseNumber
... = MONTH(DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 MONTH));
rm db/development.sqlite3
SELECT POI.Name FROM POI INNER JOIN rtgitems ON POI.Vote=rtgitems.item where totalrate= (select min(totalrate) from rtgitems) GROUP BY POI.Name
Select case when t2.statusid = 3 then t2.Id end as MatchedId, case when t2.statusid <> 3 then t1.Id end as UnmatchedId ,t2.Number,t1.Date from Table1 t1 left join Table2 t2 on t2.Id = t1.Id;
delete from tbl where id NOT in ( select min(id) from tbl group by sourceid )
CREATE TRIGGER dbo.trg ON customer AFTER INSERT,UPDATE AS BEGIN -- SET NOCOUNT ON added to prevent extra result sets from -- interfering with SELECT statements. SET NOCOUNT ON; IF EXISTS (SELECT 1 FROM inserted WHERE comm_preference IN ('E', 'B') BEGIN INSERT INTO email_sent SELECT customerno, email, GETDATE() from inserted END END
SELECT a.*, b.city FROM tableA a LEFT JOIN tableB b ON a.ID = b.ID
with scd_table ( select a.* , lead(from_date,1,to_date('31/12/9999','dd/mm/yyyy')) over (partition by a order by from_date asc) as to_date from YOUR_TABLE a ) select * from scd_table where :d >= from_date and :d < to_date
ALTER TABLE Items ADD UNIQUE INDEX(ItemName, ItemSize);
--EXECUTE AS USER = 'Wanida'; SELECT * FROM fn_my_permissions('dbo.MyProc','OBJECT') ORDER BY subentity_name, permission_name;
ROW_NUMBER() OVER(PARTITION BY docRefID ORDER BY docExternalContent)
DROP SYNONYM syn_a; CREATE SYNONYM a FOR STAGEDB.SCHEMA.SOURCE; DROP SYNONYM syn_b; CREATE SYNONYM b FOR STAGEDB.SCHEMA.TABLEA; DROP SYNONYM syn_target; CREATE SYNONYM target FOR SOURCEDB.SCHEMA.DESTINATIONTABLE; MERGE INTO syn_target as TARGET USING (SELECT COLA, COLB, COLC FROM syn_a as A INNER JOIN syn_b as B ) AS SOURCE ON TARGET.ID = SOURCE.ID WHEN MATCHED THEN UPDATE-- WHEN NOT MATCHED INSERT
SELECT * FROM table1 WHERE Id IN ( SELECT Id FROM table1 GROUP BY Id HAVING COUNT(DISTINCT [Customer No_]) > 1 )
SELECT tbl.name FROM ( SELECT name FROM customer UNION SELECT name FROM vendor ) tbl
SELECT ABS(ROUND(DATEDIFF(MI,CONVERT(TIME,date1), CONVERT(TIME,date2))/60.0,0))
SELECT id, checkresult.pcname, pcuser, checkTime as lastCheckTime, TIMESTAMPDIFF(SECOND,checkTime,now()) as lastCheckAge, lastBackup, diff, threshold, backupStatus, TIMESTAMPDIFF(SECOND,lastBackup,now()) as ageNow FROM checkresult join (SELECT pcname, max(checkTime) as maxct FROM checkresult GROUP BY pcname ) pm on checkresult.pcname = pm.pcname and checkresult.checkTime = pm.maxct ORDER BY id desc;
update software s inner join equimentinventory ei on s.id = ei.id set s.name = "windows 7" where ei.item="computer"
INSERT INTO myCrazyHugeTable (column1Name, column2Name) VALUES ('column1Val', 'column2Val');
SELECT hero, AVG(pointEarned > 0) p FROM gamestatistics GROUP BY hero ORDER BY p DESC
SELECT date, SUM(case when payed = 1 then amount else 0 end) as PaidAmount, SUM(case when payed = 0 then amount else 0 end) as UnPaidAmount FROM events GROUP BY DATE;
select sum(t.population) from ( select population from table A union all select population from table B union all select population from table A ) t
ALTER DATABASE YourDatabaseName SET AUTO_CLOSE OFF;
SELECT g.naam,g.gebruikerID ,g2.naam,g2.gebruikerID FROM gebruiker g , gebruiker g2, vriend v WHERE g.gebruikerID = v.gebruikerID_Jezelf OR g2.gebruikerID = v.gebruikerID_Persoon AND g.gebruikerID IN(SELECT gebruikerID_Jezelf FROM vriend) OR g2.gebruikerID IN(SELECT gebruikerID_Persoon FROM vriend);
UPDATE tblOperation SET tblOperation.DateDifference = DateDiff("d",[tblOperation].[Date],[tblOperation].[FinalDate]), tblOperation.Tax = tblOperation.Value*tblOperation.Percentage/3000*(DateDiff("d",[tblOperation].[Date],[tblOperation].[FinalDate])), tblOperation.FinalValue = tblOperation.Value-(tblOperation.Value*tblOperation.Percentage/3000*(DateDiff("d",[tblOperation].[Date],[tblOperation].[FinalDate])));
CREATE UNIQUE INDEX foobar_test ON foobar (COALESCE(a_id, -1), COALESCE(b_id, -1), COALESCE(c_id, -1), ident) -- Nulls become -1 WHERE date_a is null and date_b is null; -- Only check when date_a and date_b is null
SELECT u.Name, c.[Description], hs.Duration FROM Users u CROSS JOIN Categories c LEFT OUTER JOIN HourlyStats hs ON u.UserID = hs.UserID AND c.EventID = hs.EventID
WITH cte AS ( SELECT *, ROW_NUMBER() OVER ( PARTITION BY Reg_No ORDER BY Transdate DESC ) AS RowNumber FROM unithistory ) SELECT * FROM cte WHERE RowNumber = 1
SELECT t.* FROM teams t WHERE NOT EXISTS (SELECT 1 FROM userteams ut WHERE t.teamname = ut.teamname AND ut.name = 'Gary')
add_months(trunc(add_months(sysdate, 10), 'YYYY'), 2) - 1
SELECT * FROM name WHERE strpos(LastName, FirstName) > 0;
SELECT id, timestamp, lat, lon FROM ( SELECT *, rn = ROW_NUMBER() OVER(PARTITION BY id ORDER BY timestamp DESC) FROM yourTable ) t WHERE rn = 1
SELECT SUM(Sale_Price) FROM sales WHERE Sale_Date < DATE '2015-10-12';
select td1.client_name,td1.TotalDebt,td2.TotalPayment from (SELECT client_name, sum(total_debts) as TotalDebt FROM client_debts GROUP BY client_name) as td1 inner JOIN (SELECT client_name, sum(payment) as TotalPayment FROM client_details GROUP BY client_name) as td2 on td1.client_name=td2.client_name
select i.id, s.date, t.type from (select distinct id from sample) i cross join (select distinct type from sample) t left join sample s on s.id = i.id and s.type = t.type;
SELECT prh.* FROM product_rate_history prh INNER JOIN (SELECT max(created_on) as maxco FROM product_rate_history WHERE prh.product_id = 16 GROUP BY Date(created_on) ) prh2 ON prh.created_on = prh2.maxco WHERE prh.product_id = 16 ORDER BY prh.created_on DESC;
SELECT <cols> FROM profiles INNER JOIN ( SELECT <primary key cols> FROM profiles WHERE x.sex='M' ORDER BY rating LIMIT 100000, 10 ) AS x USING(<primary key cols>);
ALTER TABLE table_name ALTER COLUMN column_name new_datatype nullability
Update t Set t.Email = '' Where t.Email in (Select email from YourTable group by email having count(*)>1)
SELECT pm.p_name "P_NAME", listagg(sm.s_number, ', ') WITHIN GROUP (ORDER BY pd.p_d_id) "S_NUMBER" FROM pattern_master pm, pattern_details pd, shift_master sm WHERE sm.s_id= pd.s_id AND pm.p_id = pd.p_id GROUP BY pm.p_name;
SELECT GROUP_CONCAT(ID) FROM tablename Where Running = 3
SELECT A.[id], Split.a.value('.', 'VARCHAR(100)') AS String FROM (SELECT [id], CAST ('<M>' + REPLACE([string], ',', '</M><M>') + '</M>' AS XML) AS String FROM TableA) AS A CROSS APPLY String.nodes ('/M') AS Split(a);
update your_table set lat_appx = substring(lat, 1, 6), long_appx = substring(`long`, 1, 6)
update table_1 set field_1 = table_2.value_1 from table_1 inner join table_2 on (table_1.id = table_2.id)
select PrimaryKeyColumn1, PrimaryKeyColumn2, stuff(((case when column_a = 1 then ',A' else '' end) + (case when column_b = 1 then ',B' else '' end) + (case when column_c = 1 then ',C' else '' end) ), 1, 1, '') as vals from . . .
select ALBUMS.category_id , ALBUMS.album_id , ALBUMS.album_name , ALBUMS.artist_id , ARTISTS.artist_name from ALBUMS inner join ARTISTS on ALBUMS.artist_id = ARTISTS.artist_id inner join CATEGORIES on ALBUMS.category_id = CATEGORIES .category_id where CATEGORIES.category_name = 'Your category name'
SELECT shops.*, shop_item.id AS attached FROM shops LEFT OUTER JOIN shop_item ON shops.id = shop_item.shop_id and shopt_item.item_id = 1;
select JOURNAL_NO, LINE_NO, SUM(AMOUNT), MAX(ACC_CODE) from ( select JOURNAL_NO, case when LINE_NO > 1000 then LINE_NO - 1000 else LINE_NO end as LINE_NO, AMOUNT, ACC_CODE from tablename ) dt group by JOURNAL_NO, LINE_NO
Previous Value := CALCULATE(SUM(Table[Value]) - CALCULATE(SUM(Table[Value]), PREVIOUSDAY(Table[date])))
$this->db->select('*'); $this->db->from('tbl_user'); $this->db->join('tbl_userinfo', 'tbl_user.user_id = tbl_userinfo.user_id'); $this->db->where('tbl_user.user_id', $data); $query = $this->db->get(); $result = $query->result(); return $result;
select ssw.* from sys.fulltext_system_stopwords ssw where ssw.language_id = 1033;
SELECT U.Name AS UserName, MAX(P.Date) AS LatestPost, (SELECT COUNT(F.userNameFollower) FROM Followers WHERE userID = U.userID) AS FollowerCount FROM User U INNER JOIN Post P ON (U.userID = P.userID) GROUP BY U.UserID
update your_table set your_column = your_column || '_[' || your_id || ']' where your_column is not null
SELECT i.* FROM checklist_item i INNER JOIN tab t ON i.tab_id = t.tab_id WHERE t.name = 'Household'
$sql = "UPDATE table SET salary = salary + 5 WHERE name = 'david' ORDER BY id LIMIT 1";
Select flights.name, flights.Departure from flights inner join Table2 on Table2.Dep = SUBSTRING(flights.Departure,1,4) and Table2.Arri = SUBSTRING(flights.Arrival,1,4) ;
SELECT p.id FROM Photo p JOIN PhotoConnect pc on pc.photo_id = p.id JOIN PhotoConnect pc1 on pc1.photo_id = p.id WHERE pc.outside_name = 'country' and pc.outside_key = 6 AND pc1.outside_name = 'region' and pc1.outside_key = 13 GROUP BY photo_id
SELECT a.user_id, b.user_id, count(*) AS num, collect_set(m.movie_title) FROM ratings a JOIN ratings b ON a.movie_id = b.movie_id JOIN movies m ON a.movie_id = m.movie_id WHERE a.user_id < b.user_id GROUP BY a.user_id, b.user_id ORDER BY num DESC;
select id, roomid, inv_date, count(room) from room_inventory group by id, roomid, inv_date having count(room) > 1;
SELECT u.id, u.name, u.isSpecial, d.country, d.zipCode FROM Users u LEFT JOIN Detals d ON u.id = d.userId WHERE u.name = 'Jorden' OR u.isSpecial = 1
UPDATE myTable SET voteCol = voteCol + 1 WHERE id = idOfInterest;
SELECT A.name, A.code, A.Account, A.remark, A.scheme FROM account_agent A INNER JOIN bulk_index B ON A.account = B.account WHERE A.scheme = 'as' AND A.code = '10'
select SubId, max(case when ProcessNumber = 802 then ReadTime end) as [802Time], max(case when ProcessNumber = 802 then Lineage end) as [802Lineage], .... from SourceTable group by SubId
SELECT * FROM [TIMESTAMP_ORGANISER].[dbo].[TEST_DB] ORDER BY timestamp, CASE WHEN remaining LIKE '%agentStateEvent%' THEN -1 WHEN remaining LIKE '%TerminalConnectionCreated%' THEN -2 ELSE -3 END
INSERT INTO t1_temp (id, NeighborhoodID, power, tag) SELECT id, NeighborhoodID, SUM(power), tag FROM CLOUD GROUP BY tag, NeighborhoodID ORDER BY NeighborhoodID
ALTER TABLE dbo.DEPARTMENT ALTER COLUMN BUDGET_CODE VARCHAR(100) ALTER COLUMN OFFICE_NUM VARCHAR(100)
select * from test where key0 >= '00 00 00 00 00 00' order by key0; key0 ------ (0 rows) select * from test where key0 >= '00 00 00 00 00 00' COLLATE "C" order by key0; key0 ---------------------------------------- 00 00 00 00 0000 (1 row)
select bid_id, status, created_at from ( select bid_id, status, created_at, row_number() over(partition by bid_id order by created_at desc) as rn from tablename ) x where x.rn = 2;
select t1.CustomerId, t1.CustomerName, max(case when seqnum = 1 then PhoneNmber end) as PhoneNmber1, max(case when seqnum = 2 then PhoneNmber end) as PhoneNmber2 from table1 t1 left join (select t2.*, row_number() over (partition by customerId order by customerId) as seqnum from table2 t2 ) t2 on t1.CustomerId = t2.CustomerId group by t1.CustomerId, t1.CustomerName;
CREATE VIEW database.pages_view AS SELECT p.p_name, p.slug, i.image, t.title, t.text, s.* FROM database.pages p LEFT JOIN database.page_image i ON p.id = i.ages_id LEFT JOIN database.page_text t ON p.id = t.pages_id LEFT JOIN database.sections s ON p.id = t.pages_id WHERE p.visible = 1;
update LTC_NEW.pfields_content c join LTC_OLD.phpbb_users u on c.member_id = u.user_id SET c.field_5 = u.user_gender
SELECT Title, COUNT(1) AS TitleCount FROM MaliciousCodeAlertDocument GROUP BY Title HAVING COUNT(1) > 1
SELECT [user_id], [first_name], COUNT(m.sender_id) as number_of_messages FROM [Member] LEFT JOIN [Message] m ON user_id = m.sender_id AND m.message_type = 0 GROUP BY [Member].[user_id], [first_name] ORDER BY number_of_messages DESC
BEGIN FOR cc IN (SELECT owner, table_name FROM all_tables WHERE tablespace_name = :x AND table_lock = 'DISABLED') LOOP EXECUTE IMMEDIATE 'ALTER TABLE "' || cc.owner || '"."' || cc.table_name || '" ENABLE TABLE LOCK'; END LOOP; END;
# NULL for appID INSERT INTO Applications VALUES (NULL, "app name") # NULL for fileID, LAST_INSERT_ID() for recently inserted appID INSERT INTO files VALUES (NULL, LAST_INSERT_ID(), "file name")
SELECT InstructorDetails.Name, count(*) totalCount FROM Instructor i INNER JOIN Person as InstructorDetails ON InstructorDetails.ID = i.InstructorID INNER JOIN Student as Mentees ON Mentees.MentorID = i.InstructorID GROUP BY InstructorDetails.Name
SELECT t1.`INDEX`, t1.`INDEX2`, t1.`SOMENUMBER` FROM TEST t1 INNER JOIN (SELECT `INDEX`, `INDEX2`, MAX(`DATE`) DATE FROM TEST GROUP BY `INDEX`, `INDEX2`) t2 ON t1.INDEX = t2.INDEX AND t1.INDEX2 = t2.INDEX2 AND t1.DATE = t2.DATE
DATEDIFF(second, '1 Jan 1970', tbl.LastChangeDate)
SELECT ClientId, body, MAX(DateModified) FROM Activity GROUP BY ClientId, body
SELECT counties.* FROM counties INNER JOIN (importedpatients INNER JOIN patients ON importedpatients.patientid = patients.patientID) ON counties.countyid = patients.countyid
update criminals set charge1 = replace(charge1,substring(charge1, charindex('#',charge1), len(charge1)),'') where charindex('#',charge1) > 0
ArrayList<Integer> partNumbers = new ArrayList<Integer>(); partNumbers.add(999); partNumbers.add(777); partNumbers.add(1234); // set up Database database = new Database(getConnection()); Table<Inventory> inventoryTable = database.getTable(Inventory.class); ArrayListSelectOperation<Inventory> operation = new ArrayListSelectOperation<Inventory>(inventoryTable, "partNumberIn"); // show results for (Inventory inventory: operation.selectAll(partNumbers)) System.out.println(inventory.getPartNumber());
DECLARE @QueryTime DATETIME SET @QueryTime = GetDate() INSERT INTO TableB SELECT X, @QueryTime FROM TableA SELECT X, Y FROM @TableA
IF @existPerson is null
insert into TBL3 select t1.col1, t2.col2 from (select row_number() over (order by NEWID()) rownum, col1 from TBL1) t1 inner join (select row_number() over (order by NEWID()) rownum, col2 from TBL2) t2 on t1.rownum = t2.rownum go 10
DECLARE @MaxKeyLength INT = (SELECT MAX(LEN([Name])) FROM testTable) select '(''{' + cast(UniqueId as varchar(MAX)) + '}'',''' + LEFT(LTRIM([Name]) + ''', ', @MaxKeyLength + 4) + '''' + Address+ '''),' from testTable;
LTRIM(RTRIM(EB.Liter))+'L '+LTRIM(RTRIM(EB.CC))+'cc '+'-ci'+LTRIM(RTRIM(EB.BlockType))+LTRIM(RTRIM(EB.Cylinders))+ + '('+ LTRIM(RTRIM(EB.EngBoreIn))+'x'+ LTRIM(RTRIM(EB.EngStrokeIn))+'; '+ LTRIM(RTRIM(EB.EngBoreMetric))+'x'+ LTRIM(RTRIM(EB.EngStrokeMetric)) +')' as EBase
select id,entity_type,likes_count from ( SELECT Row_number()OVER (partition BY entity_type ORDER BY likes_count DESC)rn,id,entity_type,likes_count FROM elements ) A ORDER BY rn, CASE entity_type WHEN 'Ride' THEN 1 WHEN 'Part' THEN 2 ELSE 3 END
SELECT name, surname, SUM(absentdays) AS total_absent_days FROM (SELECT name, surname, DATEDIFF("d", fromdate, todate) AS absentdays FROM DiseaseReport D, Employees E WHERE E.number = D.empnumber ) GROUP BY name, surname
Select * from ::fn_dblog(null,null)
CREATE TRIGGER mytrigger BEFORE INSERT ON mytable BEGIN SELECT CASE WHEN (SELECT COUNT (*) FROM mytable) >= 3 THEN RAISE(FAIL, "Activated - mytrigger.") END; END;
UPDATE `wp_posts` SET `post_content` = (SELECT CONCAT(SUBSTRING_INDEX(`post_content`,@search,@pos),'4321',SUBSTRING_INDEX(`post_content`,@search,(@pos-1-(LENGTH(`post_content`)-LENGTH(REPLACE(`post_content`,@search,'')))/LENGTH(@search)))));
select (case country when @c then @co = @co +1 else @co = 1, @c = country end ) as ax, country, country_id, town, IF(town_id = param_ti, population_c, NULL) as pop from tb_town a left join tb_country b on b.country_id = a.country_id;
SELECT DecadeStart, MAX(MovieCount) from ( SELECT m.year AS DecadeStart, ( SELECT COUNT(*) FROM Movie m2 WHERE m2.year >= m.year AND m2.year < (m.year + 10) AND m2.year IS NOT NULL) as MovieCount FROM Movie m GROUP BY m.year ) movie ;
SELECT COUNT(*) FROM tbl WHERE letter < 'F'
SELECT coll.title AS CollectionTitle, cont.CollectionID, cont.title AS ContainerTitle, cont.ID as ContainerID, cont.LevelContainerID, cont.ContentID, user.Title, user.Value, user.EADElementID FROM tblCollections_Content cont JOIN tblCollections_Collections coll ON cont.collectionid = coll.id JOIN tblCollections_UserFields user ON cont.ContentId = user.ContentId WHERE cont.title is NOT NULL ORDER BY CollectionID, ContainerID
select count(t1.id), t1.variety_id, t1.name from tblItem t1 inner join tblItem t2 ON t2.order_id = t1.order_id and t2.variety_id = 4005 where t1.variety_id != 4005 GROUP BY t1.variety_id, t1.name ORDER BY count(t1.id) DESC LIMIT 5;
SELECT p1.cost AS V1, p2.cost AS V2 , p3.cost AS V3 FROM product p1 LEFT JOIN product p2 on p2.id = 2 LEFT JOIN product p3 on p3.id = 3 WHERE p1.id = 1
select i_id, option, p_id from ( select i_id, option, p_id, row_number() over (partition by i_id order by case option when 'C' then 0 when 'B' then 1 when 'A' then 2 end) takeme from thetable where option in ('A', 'B', 'C') ) foo where takeme = 1
Select StartDate, [Status]=Case when DATEDIFF(m,StartDate,(Select MAX(Date) from Table2))>6 then 'Expired' Else 'Valid' end From Table1 where EndDate is not null
name = db.execute "SELECT price FROM Products WHERE product_code = ?", bind_variable_here
SELECT Nz(s1.CountOfPatient_ID,0) + Nz(s2.CountOfAll_ID,0) FROM [SELECT Count(Patient_ID) AS CountOfPatient_ID FROM Research]. AS s1, [SELECT Count(All_ID) AS CountOfAll_ID FROM Research]. AS s2
var s = "Welcome [CT Name=\"UserName\" /], We hope that you will enjoy our services and your subscription will be expired on [CT Name=\"ExpiredDate\" /]."; var pattern = "\\[CT\\s\\w+=\"\\w+\"\\s/\\]"; var matches = Regex.Matches(s, pattern); foreach (var match in matches) { Console.WriteLine(match.ToString()); } Console.ReadLine();
SELECT * FROM information_schema.columns c with (Nolock)
select ItemName, (select sum(Price) from Items) as AllPrices from Items
select count(*) from first_table f where not exists (select 1 from second_table s where s.infoid = f.id)
%% Converting of the UUIDs into integer C = unique(session); N = length(session); session2 = zeros(N, 1); for i = 1:N session2(i) = find(strcmp(C, session(i))); end
select * from events a events p on a.eventid = p.eventid and a.status = 'acknowledged' and p.status = processed;
select a, b, c from example join (select a, max(c) max_c from example group by a) max_c on example.a = max_c.a and example.c = max_c.max_c
SELECT emp_no, owner_id FROM ( SELECT emp_no ,owner_id ,COUNT(DISTINCT owner_id) OVER (PARTITION BY emp_no) c FROM TableB b INNER JOIN TableA a ON b.aid = a.aid ) WHERE c > 1;
select a.id, group_concat(c.id) from a join categories c on concat(', ', c.catename, ', ') like concat('%, ', name, ', %') group by a.id;
(select t.*, u.Name from thread_message t left join users u on FromUserId=u.Id where ToUserId=1) union (select t.*, u.Name from thread_message t left join users u on ToUserId=u.Id where FromUserId=1)
WITH cte AS ( SELECT *, rank() OVER (ORDER BY <something>) AS rnk FROM tbl ) SELECT * FROM cte WHERE rnk <= n;
SELECT emp.name, emp.lastname, emp.birthdate, emp.gender FROM employee emp inner join (select 1 as a union all select 2) a on 1 = 1 WHERE employeeid = 1
select d.`name` from z_dealer d where (select count(*) from z_order o WHERE o.promo_code = d.promo_code AND o.date_ordered > '2015-01-01') = 0
SELECT t.name FROM TEACHERS t JOIN CLASS c ON c.teacherid = t.teacherid JOIN STUDENTS s ON s.studentid = c.studentid AND s.name IN ('John', 'Bob') GROUP BY t.name HAVING COUNT(DISTINCT s.name) = 2
Set .Recordset = rs .Refresh
SELECT r.EventName, e.TotalSeats - SUM( r.NumSeats ) FROM Reservation r JOIN Event e ON e.Name = r.EventName GROUP BY r.EventName, e.TotalSeats;
SELECT dboUser.User, dboComputer.ComputerName FROM dboUser LEFT JOIN dboComputer ON dboUser.User = dboComputer.User WHERE dboUser.User IN ('user1', 'user2', 'user3');
select a.*, sum(SequenceStart) over (partition by user order by date) as seq from (select a.*, (case when date > dateadd(day, 45, lag(date) over (partition by user order by date)) then 1 else 0 end end) as SequenceStart from appointment a ) a;
SELECT pkm.pkm_code, pkm.pkm_name, group_concat(type.type_name) as typename FROM poketype JOIN pkm ON pkm.pkm_code=poketype.pkm_code JOIN type ON poketype.type_code=type.type_code WHERE pkm.pkm_code<=151 GROUP BY pkm.pkm_code, pkm.pkm_name;
INSERT INTO NEWTABLE (ID, VALUE, NEWVALUE) SELECT ID, VALUE, CASE OLDVALUE WHEN 'A' THEN 'Y' WHEN 'B' THEN 'Z' ELSE OLDVALUE END FROM OLDTABLE;
select case when extract(day from date_field) <= 25 then date_trunc('month', date_field + interval '3 months') else date_trunc('month', date_field + interval '4 months') end from t
SELECT * , prev_value = ( SELECT TOP 1 NewCustomerValue FROM #CustomerExampleLog l WHERE c.CustomerRecordId = l.CustomerRecordId AND l.NewCustomerValue <> c.CurrentCustomerValue ORDER BY LogCreateDate DESC ) FROM #CustomerExample c
SELECT * FROM `Fac__Invoice` ORDER BY CAST(`Fac__Invoice`.`invoice_number` AS UNSIGNED) ASC
sqlite3 your.db "pragma table_info(your_table)"
update table1 set "date" = to_date(date_txt, 'MM/DD/YYYY HH:MI:ss AM')
FROM subscriptions JOIN users ON users.user_id = subscriptions.following FROM subscriptions left JOIN users ON users.user_id = subscriptions.following FROM subscriptions CROSS JOIN users FROM subscriptions JOIN users ON users.referred by_id = subscriptions.following
SELECT cr.* FROM cliche c INNER JOIN cliche_revisao cr ON c.cliche_pk = cr.cliche_pk WHERE cr.numero = (SELECT MAX(number) FROM cliche_revisao cr2 WHERE cr2.cliche_pk = cr.cliche_pk)
UPDATE table_name SET timeout = timeout + interval '12' hour WHERE timeout > timein;
SELECT a.ID, SUBSTRING(d.NameList,1, LEN(d.NameList) - 1) Names FROM a CROSS APPLY ( SELECT DISTINCT [NAME] + '; ' FROM B WHERE A.ID = B.DupID FOR XML PATH('') ) D (NameList)
SELECT * FROM table1 WHERE CONCAT(column1, column2) = '0123456789';
UPDATE Orderdetails od INNER JOIN Titles t ON od.id = t.id SET t.No_of_copies_in_inventory = (t.No_of_copies_in_inventory - o.QtyOrdered) WHERE od.id = 'idhere'
SELECT tblSalaryBand.BandName, tblSalaryBandYear.BandMax, tblSalaryBandYear.BandMin, tblSalaryBand.ID AS SalaryBandID FROM tblSalaryBand LEFT JOIN ( SELECT * FROM tblSalaryBandYear WHERE ReviewYearID = [Forms]![frmHome]![SelectedYear] ) AS SBY ON tblSalaryBand.ID = SBY.SalaryBandID
SELECT REPLACE(note,';','') AS [note] FROM @T
LOAD DATA LOCAL INFILE 'c:/mytestfile.csv' INTO TABLE report.test FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n' IGNORE 1 LINES (ONE, TWO)
declare @sumc decimal declare @sumd decimal set @sumc=0 set @sumd=0 update myTable set @sumc+= case typ when 'c' then amn else 0 end, flwc=@sumc, @sumd+= case typ when 'd' then amn else 0 end, flwd=@sumd
DECLARE @currentDate DATE = '20160404' SELECT Status = CASE WHEN DueDate <= @currentDate AND ISNULL(Status, '') <> 'Complete' THEN 'Late' ELSE Status END, COUNT(*) FROM DispatchStatus GROUP BY CASE WHEN DueDate <= @currentDate AND ISNULL(Status, '') <> 'Complete' THEN 'Late' ELSE Status END
SELECT pd_id, pd_title, pd_description, pd_colour, pd_price,pd_large_image,pd_date,cat_sub_id_3,pd_new FROM product WHERE cat_sub_id_1 = '".$cat_sub_id."' AND cat_parent_id='".$cat_parent_id."' AND pd_id = (select max(pd_id) from product) GROUP BY pd_title
DECLARE @SQLQuery varchar(500) SET @SQLQuery = 'SELECT * FROM Employees WHERE EmployeeID = 123' EXECUTE(@SQLQuery)
SELECT t.name_id, t.last_name, a.street_address FROM NAME t JOIN ADDRESS a ON a.name_id = t.name_id JOIN (SELECT n.last_name FROM NAME n GROUP BY n.last_name HAVING COUNT(*) > 1) nn ON nn.last_name = t.last_name
CREATE TRIGGER trgCustInfo_Status ON CustInfo AFTER INSERT AS BEGIN DECLARE @id INT SELECT @id = Id FROM ( SELECT Id, ROW_NUMBER() OVER (ORDER BY Id DESC) rn FROM CustInfo ) t WHERE rn=2 UPDATE CustInfo SET EndDate = CAST(GETDATE() AS DATE), Status = 'OFF' WHERE Id = @id END
SELECT a.* FROM user a LEFT JOIN event b ON (b.user = a.id AND b.event = 'userjoined') WHERE a.joineddt < '1 week ago date' AND b.id IS NULL
SELECT * FROM MyTable WHERE parentId = '001' AND childId = (SELECT MAX(childId) FROM MyTable WHERE parentId = '001')
Select * from Admissions Where DATEDIFF(dd,AdmitDateTime,DepartDateTime)=0
SELECT * FROM MyTable WHERE CreateTime > DateAdd("d", -3, Now())
SELECT DISTINCT task_group FROM query_tst As a WHERE ( (NOT EXISTS ( SELECT NULL FROM query_tst As b WHERE ( (a.task_group = b.task_group) And (b.task_name <> 'Initial') And (b.performed_by <> 'AUTO') ) )) );
MyModel.objects.extra(group='FLOOR(quantity/100)')\ .values('group')\ .annotate(count=Sum('quantity'))\ .order_by()
SELECT MAX((SELECT AVG(watts) FROM tblworkoutdata d2 WHERE d2.workoutsummaryid = d1.workoutsummaryid AND d2.ticks BETWEEN d1.ticks AND d1.ticks + 60)) AS theMax FROM tblworkoutdata d1 WHERE workoutsummaryid = 198
SELECT *, DATEDIFF(start_time, CURDATE()) AS diff FROM events WHERE start_time >= CURDATE() OR ( start_time <= CURDATE() AND end_time >= CURDATE() ) ORDER BY CASE WHEN diff > 0 THEN 0 ELSE 1 end, diff ASC;
select entity_id from table where value = 1 intersect select entity_id from table where value = 2 select t1.entity_id from table t1 join table t2 on t1.entity_id = t2.entity_id where t1.value = 1 and t2.value = 2
select * from t_items where (code ='#itemcode#' and #itemcode# is not null) OR (definition like '%#definition#%' and #definition# is not null)
begin ctx_ddl.create_preference('my_multi', 'MULTI_COLUMN_DATASTORE'); ctx_ddl.set_attribute('my_multi', 'columns', 'column1, column2, column3'); end; create index myindex on mytable(docs) indextype is ctxsys.context parameters ('DATASTORE my_multi');
SELECT id, first, last, CASE WHEN first IN (q1,q2) THEN 1 ELSE 0 END + CASE WHEN last IN (q1,q2) THEN 1 ELSE 0 END AS points FROM dbo.users ORDER BY points DESC;
db.execSQL("DELETE FROM "+ TABLE_SERVER_CONTACTS);
select to_char(event_date + (l - 1),'dd/mm/yyyy') from tab1 t left outer join ( select level l from dual connect by level <= (select max(rang) + 1 from tab1) ) on l <= rang + 1 order by event_date, 1;
select a.orgid, b.orgaddressid, c.address from organization a left join organization_address b on a.orgid = b.orgid and b.isprimaryaddress = 'YES' left join address c on b.orgaddressid = c.addressid where a.orgid = 1;
CEILING(DATEDIFF(MONTH, DATE1, DATE2) / 12.0) as Total
SELECT customer , COUNT(DISTINCT product) ttl -- DISTINCT is only necessary if (customer,product) is NOT unique FROM t WHERE product IN ('p1', 'p2') GROUP BY customer HAVING COUNT(*) = 2 -- where 2 is equal to the number of items in IN();
UPDATE records SET earnings= (SELECT SUM(rate) FROM leads WHERE records.user_id=leads.user_id AND leads.datetime >= records.date And leads.datetime < records.date [+ one day]) -- however you do that in MySQL
SELECT * FROM #YourTable WHERE Batch IN (SELECT DISTINCT BATCH FROM #YourTable WHERE MajorCode >= 4000)
SELECT userName FROM tblUsers ORDER BY date ASC,score DESC
SELECT * FROM images LEFT JOIN links AS l1 ON l1.INO = images.INO LEFT JOIN tags AS t1 ON t1.TagNO = l1.TagNO LEFT JOIN links AS l2 ON l2.INO = images.INO LEFT JOIN tags AS t2 ON t2.TagNO = l2.TagNO [...] WHERE t1.tagNO = $tag1 AND t2.tagNO = $tag2 [...]
SELECT coral.name, COUNT(coralsampling.sampleno) number_of_samples FROM coral JOIN coralsampling ON coral.coralcode = coralsampling.coralcode AND coralsampling.dateofsampling BETWEEN '2007/1/1' AND '2008/1/1' GROUP BY coral.name HAVING COUNT(coralsampling.sampleno) > 1
CHECK(team_a_id < team_b_id)
SELECT Article.ID, Article.Title, Article.Content, COALESCE(Article_Likes.Time,'NOT LIKED') AS Time FROM Articles LEFT JOIN Article_Likes ON Article.ID = Article_Likes.ArticleID WHERE Article.ID = (ArticleID) LIMIT 1
select * from your_table order by case when colA > 0 then 1 when colA = 0 then 2 when colA < 0 then 3 end, colB
Select A,B,C From Table Where REGEXP_LIKE(Field, '[aeiou]{3,}', 'i');
SELECT Date, ColumnA, ColumnB FROM TableName WHERE Date = (SELECT max(Date) FROM TableName)
select id1,id2,id3, date1, isnull(lead(date1) over(partition by id1,id2,id3 order by date1)-1, '99991231') as date2 from test
SELECT OS_NAME FROM OS WHERE VERSION LIKE '*1*'
SELECT IFNULL((SELECT _id FROM empty_table LIMIT 1), 1)
SELECT CONCAT('Q', QUARTER(inv.duedate), ' ', YEAR(inv.duedate)) as quarter, SUM(inv.total) as total FROM invoices inv LEFT JOIN clients cli ON inv.client_id = cli.id WHERE cli.country = 'CA' GROUP BY quarter
WITH singleRow as ( select count(way), way from planet_osm_line group by way having count(way) = 1 ) SELECT P.* FROM planet_osm_line P JOIN singleRow S ON P.way = S.way
SELECT * FROM tbl WHERE (Column_1 = 'PENDING') OR (Column_2 = 'PENDING') OR (Column_3 = 'PENDING')
create table #inserted(insertorder int identity(0,1), prodId int, orderQuantity int ... <matches inserted row>) --cursor loop insert destination_table(prodId, orderQuantity, ...) output inserted.* into #inserted /*output inserted.* will just select it */ values @prodId, @orderQuantity ... --end loop --inserted rows; select * from #inserted order by insertorder
Declare @myDate Datetime Set @myDate = dateadd(HOUR, 5, getdate()) SELECT Left(Convert(varchar(10),@myDate,21),10) + stuff(right(convert(varchar(26), @myDate, 109 ), 15 ), 7, 7, ' ')
select [Level],Val from ( SELECT '0' as [Level], [Col001] as Ord, [Col001] as Val FROM @DataSource union SELECT '1' as [Level], [Col001]+[Col002] as Ord, [Col002] as Val FROM @DataSource union SELECT '2' as [Level], [Col001]+[Col002]+[Col003] as Ord, [Col003] as Val FROM @DataSource union SELECT '3' as [Level], [Col001]+[Col002]+[Col003]+[Col004] as Ord, [Col004] as Val FROM @DataSource ) as T1 ORDER BY Ord,[Level]
strDB = xlWb.Path & "\database\dbQueries.accdb" conn.Open "Driver={Microsoft Access Driver (*.mdb, *.accdb)};" & _ "Dbq=" & strDB & ";" & _ "Trusted_Connection=Yes;"
SELECT T1.ItemNum, T2.mySplits as Substitute FROM ( SELECT *, CAST('<X>'+replace(T.Substitutes,'/','</X><X>')+'</X>' as XML) as my_Xml FROM Table1 T ) T1 CROSS APPLY ( SELECT my_Data.D.value('.','varchar(50)') as mySplits FROM T1.my_Xml.nodes('X') as my_Data(D) ) T2
SELECT COUNT(s.id) FROM salesperson s, businesstrip b WHERE b.id = @BusinessTrip_ID AND s.isEligibleForTrip AND (s.canSpeakFrench OR NOT b.requiresFrench)
IF CAST(DateField1 AS DATE) = CAST(DateField2 AS DATE)
SELECT value FROM (SELECT value, dense_rank() over (order by value asc) rnk FROM table) WHERE rnk = 2
select users.id, (users.msg_limit - subq.msgs_used) as msgs_available from users inner join (select sum(msg_log.cnt) as msgs_used from msg_log where weekofyear(msg_log.date) = weekofyear(now()) and msg_log.user = :user_id_param) as subq;
INSERT IGNORE INTO `table` SELECT `alt1`.`nid`, `alt2`.`realm` FROM `table` AS `alt1`, `table` AS `alt2`
-- Clustered index (C index) NCCol2 IDA lockhash (these values are the "identifier" of locks) ------ --- -------------- 1 11 (29cf3326f583) 2 22 (31178495a25a) -- Non-Clustered index (NC index) NCCol2 lockhash ------ -------------- 1 (8194443284a0) 2 (61a06abd401c)
SELECT a.id, (SELECT count(*) FROM ancestors_table t where t.ancestors LIKE CONCAT('%,',a.id,',%') ) FROM ancestors_table a;
SELECT * FROM table ORDER BY RAND() LIMIT 40;
Select count(js_id) from yourtable WHERE DATEDIFF( m, applied_date, GETDATE() ) = 0
DELIMITER $$ DROP TRIGGER /*!50032 IF EXISTS */ `TR_Ebook`$$ CREATE TRIGGER `TR_Ebook` AFTER INSERT ON `Ebook` FOR EACH ROW BEGIN IF NOT EXISTS (SELECT 1 FROM MisLibros WHERE NEW.IdEbook = MisLibros.IdEbook) THEN INSERT INTO MisLibros (IdEbook) VALUES (NEW.IdEbook); END IF; END; $$ DELIMITER ;
select m.groupId from Members m group by m.groupId having count(*) > 1 and sum(case when m.userid = 1 then 1 else 0 end) > 0;
SELECT t1.Id_thread, t2.Name, t1.Date FROM t1 JOIN t2 ON t1.Id_thread = t2.Id_thread GROUP BY t1.Id_thread
SELECT DateTo,(((((EXTRACT(YEAR FROM Ht_LoanSusp.DateTo))-(EXTRACT(YEAR FROM Ht_LoanSusp.DateFrom)))*12)+ (EXTRACT(MONTH FROM Ht_LoanSusp.DateTo))-(EXTRACT(MONTH FROM Ht_LoanSusp.DateFrom)))+1) AS NoOfMonth FROM HT_LoanSusp
DECLARE @NewLineChar AS CHAR(2) = CHAR(13) + CHAR(10) PRINT ('SELECT FirstLine AS FL ' + @NewLineChar + 'SELECT SecondLine AS SL')
select a,b, rank() over (partition by b order by a) c from tbl order by a;
ALTER TABLE MY_TABLE ADD COLUMN NEW_COLUMN BLOB(2147483647); UPDATE MY_TABLE SET NEW_COLUMN=MY_COLUMN; ALTER TABLE MY_TABLE DROP COLUMN MY_COLUMN; RENAME COLUMN MY_TABLE.NEW_COLUMN TO MY_COLUMN;
select PK_Branch, [Branch Name DE], Country from DimBranch where ([Branch Name DE] like 'Lyss (CH)' or [Branch Name DE] like 'Sevilla') and Country like 'Spain'
SELECT * , lead(action_time) OVER (PARTITION BY user_id ORDER BY action_time) - action_time AS time_spent FROM tbl;
WITH actions(action) AS( VALUES ('X'),('Y'),('Z')) SELECT d.action ,Count(DISTINCT a.userid) FROM table1 as a LEFT JOIN table1 AS b ON a.userid = b.userid AND b.action = 'Y' AND a.timestamp < b.timestamp LEFT JOIN table1 AS c ON a.userid = c.userid AND c.action = 'Z' AND b.timestamp < c.timestamp JOIN actions AS d ON d.action IN (a.action, b.action, c.action) WHERE a.action = 'X' GROUP BY d.action
INSERT INTO ChatArchive (MsgId, MsgText, Filtered, LastFetched) SELECT MsgID, MsgText, Filtered, LastFetched FROM ChatCurrent WHERE ID <= (SELECT MAX(ID) from ChatCurrent) - 500; DELETE FROM ChatCurrent WHERE MsgId <= (SELECT MAX(MsgId) FROM ChatArchive);
SELECT SQL_CALC_FOUND_ROWS i.id_msg, i.id_user_from from_id, i.id_user_to to_id, u_from.name from_name, u_to.name to_name, i.message FROM inbox AS i INNER JOIN user AS u_from ON u_from.id_user = i.id_user_from INNER JOIN user AS u_to ON u_to.id_user = i.id_user_to WHERE (i.id_user_from = 1 AND i.id_user_to = 2) OR (i.id_user_from = 2 AND i.id_user_to = 1) ORDER BY date_msg DESC
SELECT name, repeat_status FROM `x` WHERE labref = '111' GROUP BY name ,repeat_status;
tbl_user UserID | firstName | Email | Password | LoginArea | GroupID 1 , Bill , email@email1.com , passwordhash344, Backend | 2 2 , Paul , email@email2.com , passwordhash123, Backend | 3
select * from mytable where REPLACE( `productcode` , ' ' , '' ) like '%searchparam%'
SELECT SUM(amount) totalamount, GROUP_CONCAT(amount) amounts, GROUP_CONCAT(doc_number) docno, doc_date docdate, scheme_description schemedesc FROM ( SELECT scheme_description, doc_date, doc_number, SUM(amount) amount FROM credit_notes GROUP BY scheme_description, doc_date, doc_number) t GROUP BY scheme_description, doc_date
SELECT f1.fUID, f1.fName FROM friends f1, friends f2 WHERE f1.UID = X1 AND f2.UID = X2 AND f1.fUID = f2.fUID
SELECT i.item_id, group_concat(p.property_id, ':', p.property_value separator ';') as properties FROM Item i INNER JOIN Property p ON i.item_id = p.item_id GROUP BY i.item_id;
select id, count(*) from (select x.*, row_number() over(partition by id order by ord) - row_number() over(partition by id, seg order by ord) as grp from tbl x) x where seg = 'B' group by id, grp order by grp
ADOQuery1.SQL.Text := 'INSERT INTO [dbo].[client] ([Meno],[Priezvisko]) ' + 'VALUES(:Meno, :Priezvisko)'; ADOQuery1.Parameters.ParamByName('Meno').Value := Edit1.Text; ADOQuery1.Parameters.ParamByName('Priezvisko').Value := Edit2.Text; ADOQuery1.ExecSQL;
SELECT m.ID, m.PN, m.CLASS, m.ZAHL, Count(M2.id) AS IncByPN FROM Table1 AS m INNER JOIN Table1 AS m2 ON m2.PN = m.PN AND m2.ID <= m.ID WHERE m.CLASS='ECN' GROUP BY m.ID, m.PN, m.CLASS, m.ZAHL ORDER BY m.ID
declare @Search varchar(20); set @Search = '3011'; select * from TableName where FieldName like '%' + @Search + '%';
While reader.Read() TextBox1.Text &= reader(0).ToString() & Environment.NewLine End While
Select empSal from Emp_Master where empID = '&1'; -- not &2 exit
\dt public.[^[:digit:]]+
UPDATE table_name SET url = CONCAT( 'www.', SUBSTR(url, 8, LENGTH(url) - 7) ) WHERE url LIKE 'http://%'
SQL> CREATE TABLE t(EMP_ID NUMBER); Table created. SQL> SQL> SELECT table_name, column_name 2 FROM all_tab_cols 3 WHERE owner='SCOTT' 4 AND column_name LIKE 'EMP\_%' ESCAPE '\'; TABLE_NAME COLUMN_NAME -------------------- -------------- T EMP_ID SQL>
SELECT AVG(volume) AS avg_vol, symbol_id FROM daily WHERE date > current_date - INTERVAL'20' day GROUP BY symbol_id ORDER BY AVG(volume) DESC LIMIT 100;
delete from sqltable where duplicateid > companyid and exists (select 1 from sqltable st2 where st2.duplicateid = sqltable.companyid and st2.companyid = sqltable.duplicateid );
to_char(10000,'FM99999')
SELECT * FROM project_category as a LEFT OUTER JOIN project_estimate_detail as b ON a.id = b.project_cat_id where (b.project_cat_id IS NULL) OR (b.project_cat_id not in ('21','22','2'))
select product_id from values where value in ('large','short') group by product_id having count(distinct value) = 2
SELECT max(name), place_code, max(email), max(phone), max(address), max(details), max(estd), max(others) FROM table_x GROUP BY substring(name,1,4),place_code
SELECT DATE_FORMAT(date_column, '%H:%i') FROM your_table
select * from TABLE order by field(ID,4,2,5,3,1)
SELECT a.VolumeID "WFID" , a.Manager , t.TimeEst , t.SALTRecordedBy , MAX(t.SALTRecordedDate) FROM ctxAssistanceWF a JOIN ctxAssistanceSaltWF t ON a.VolumeID = t.SaltWFID WHERE a.RowSeqNum = 1 GROUP BY a.VolumeID , a.Manager , t.TimeEst , t.SALTRecordedBy
(SELECT `products`.product_id, products.product_name FROM (`products`) WHERE `product_name` LIKE '%chair%' AND `products`.`active` = 1) UNION ALL (SELECT `products`.product_id, products.product_name FROM (`products`) WHERE `category_id` IN (128,135,136,138) AND `products`.`active` = 1) ORDER BY CASE WHEN `product_name` LIKE 'chair%' THEN 1 WHEN `product_name` LIKE '%chair' THEN 3 ELSE 2 END
with mf as ( select Message_id,field_id from DB1.MESSAGE_FIELDS a minus select Message_id,field_id from DB2.MESSAGE_FIELDS ) select mf.*, m.name from mf join messages m on mf.message_id = m.message_id;
select * from (select name , ROW_NUMBER() over(order by name) rn from user ) a where rn > 5 and rn<= 15
Select ,CAST(DATEDIFF(mi, Date1Column, Date2Column) as int) as 'DeltaMinutes' ,CAST(DATEDIFF(day, Date1Column, Date2Column) as int) as 'DeltaDays' ,ISNULL(DATEDIFF(MONTH, Date1Column, Date2Column), -9999) as 'LastSWAge' From Table
ORDER BY month_event (DATE, FORMAT 'mmm') ORDER BY CASE month_event WHEN 'jan' THEN 1 WHEN 'feb' THEN 2 WHEN 'mar' THEN 3 WHEN 'apr' THEN 4 WHEN 'may' THEN 5 WHEN 'jun' THEN 6 WHEN 'jul' THEN 7 WHEN 'aug' THEN 8 WHEN 'sep' THEN 9 WHEN 'oct' THEN 10 WHEN 'nov' THEN 11 WHEN 'dec' THEN 12 END
CREATE UNIQUE INDEX ON EventStaff (EventID) WHERE IsSupervisor = 1
SELECT Column1 , LISTAGG(Column2, ' ') WITHIN GROUP (ORDER BY Column2) AS employees FROM Table1 GROUP BY Column1 ;
update table1 set value1 = (select value3 from table2 where id=7) , value2 = (select value4 from table2 where id=7) where id=1
SELECT `auction_title`, `auction_seo_title`, `auction_description_1`, `auction_unixtime_expiration`, `auction_startPrice`, MAX(`bids`.`bid_price`) as `bid_price` FROM `auctions` LEFT JOIN `bids` ON `auctions`.`auction_id`=`bids`.`bid_belongs_to_auction` GROUP BY `auction_id` ORDER BY `auction_unixtime_expiration` ASC
@ORM\OneToOne(targetEntity="Paragraph", mappedBy="page",cascade={"persist", "remove"})
select t1.eid from t t1 where t1.fid = 'B' and not exists (select 1 from t t2 where t2.eid = t1.eid and t2.fid = 'A')
SELECT STUFF( (SELECT ',' + t.name FROM table_name t where t.foreingId = 1 FOR XML PATH ('')), 1, 1, '')
merge icdjxn as S using patientTbl as T on S.patientID = T.patientID when not matched then insert (patientID) values (patientID);
SELECT Id, Data, Date, Transition FROM mytable WHERE Id IN (SELECT MAX(Id) FROM mytable GROUP BY Data, Transition HAVING COUNT(*) > 1)
SELECT * FROM ( SELECT DEPT_ID, COUNT(*) AS stud_count, ROW_NUMBER() over (order by COUNT(*) desc) ROW_NUM FROM TBL_STUDENT_DEPARTMENT_593932 GROUP BY DEPT_ID ) WHERE ROW_NUM = 2;
select hour,sum(temperature) from MyTable group by hour
select ProductSerial, count(*) from testing where IsRead = 'True' group by ProductSerial order by ProductSerial
IF OBJECT_ID('tempdb..##Table' , 'U') IS NOT NULL drop TABLE ##Table
SELECT m.Name FROM Main m LEFT JOIN Net n ON n.AppID=m.AppID LEFT JOIN Env e ON e.AppID=m.AppID;
select rownum + 999 from your_table
CASE WHEN UPPER(wuu.URL) LIKE 'HTTP://%' THEN wuu.UR ELSE 'HTTP://' || wuu.URL END
WHILE 1 = 1 BEGIN DELETE TOP 10000 FROM myTable WHERE CreationDate < GetDate() IF @@ROWCOUNT = 0 BREAK END
SELECT * FROM CUSTOMERS WHERE STORE(ID) IN (SELECT STOREID FROM STORES WHERE AREA = DOWNTOWN)
SELECT * FROM Logs l JOIN ( SELECT prod, amt FROM Logs WHERE time between '02:00' and '06:00' GROUP BY prod, amt HAVING count(*)>1 ) tmp ON tmp.prod=l.prod AND tmp.amt=l.amt WHERE time between '02:00' and '06:00'
CREATE OR REPLACE PROCEDURE SP_IN_PARAM( INPARAM1 IN number, OUTPARAM2 OUT varchar ) AS BEGIN SELECT col1 INTO OUTPARAM2 FROM SAM_TEMP WHERE COL2=INPARAM1; END SP_IN_PARAM;
select uid, max(case when Report <> 'TRUE' then Report end) as Report, date from reports r group by uid, date having sum(case when Report = 'TRUE' then 1 else 0 end) > 0;
SELECT COUNT(m.meet_id), SUM(CASE WHEN m.meet_category = 'long' THEN 1 ELSE 0 END), SUM(CASE WHEN m.meet_category = 'short' THEN 1 ELSE 0 END) FROM Meetings m where meet_id in (select meet_id FROM Orders o WHERE o.order_date >= '2011-03-01');
ALTER INDEX idx1 [ INVISIBLE | VISIBLE ]
SELECT t.sPropertyCode, sDataDate, SFirstSeen, a1.sTaskType, a2.sTaskType, a3.sTaskType FROM tasks AS t INNER JOIN temp AS a1 on t.sPropertyCode = a1.sPropertyCode and a1.sTaskType = 'RF' INNER JOIN temp as a2 on t.sPropertyCode = a2.sPropertyCode and a2.sTaskType = 'IF' INNER JOIN temp as a3 on t.sPropertyCode = a3.sPropertyCode and a3.sTaskType = 'CM' WHERE iRemoved = 1 AND iBusinessStreamId = 9 ORDER BY sPropertyCode, sFirstSeen;
select * from tablename where length(rtrim(field1)) > 4
select * from tblactivity where action like N'រៀន%'
Select left(x.id, 1) + '\' + left(right(x.Id, 3), 1) + '\' + left(right(x.Id, 2), 1) + '\' + right(x.Id, 1) From ( Select Left(cast(idField as varchar(38)), 4) as Id From myTable ) x
SELECT a.*, b.* FROM table1 a LEFT JOIN ( SELECT cid, MIN(imagename) minImage FROM table2 GROUP BY cid ) c ON a.cid = c.cid LEFT JOIN table2 b ON c.cid = b.cid AND b.imageName = c.minImage
SELECT (SELECT id FROM test WHERE value < myvalue ORDER BY value DESC LIMIT 1) as below, (SELECT id FROM test WHERE value > myvalue ORDER BY value ASC LIMIT 1) as above;
select distinct p1.name,p1.article from products p1 where exists( select 1 from products p2 where p2.article = p1.article and p2.name <> p1.name )
Select * from 'myTable' where 'datetime' >= ( select `datetime` from myTable group by DATE(`datetime`) order by `datetime` desc 4,1 )
# relay log restrictions relay-log-space-limit=15G
SELECT COUNT(a.word) FROM concordance a JOIN (SELECT DISTINCT b.word FROM bigdic b) temp ON temp.word = a.word WHERE a.word LIKE '%" . $name . "%'"
begin dbms_stats.gather_table_stats(user,'M_CURRENT', method_opt=>'for columns TNE size 254', cascade=>false, granularity=>'ALL', degree=>8); end; /
SELECT * FROM table_name WHERE MONTH(Display_Date) = MONTH(CURDATE()) AND YEAR(Display_Date) = YEAR(CURDATE())
select * from (SELECT s.shout_id, s.user_id, s.time, 1 AS FromShouts FROM shouts s union all select v.post_id, v.sender_user_id, v.time, 0 AS FromShouts from void_post v) as derived_table order by time desc;
DECLARE @val nvarchar(max) SELECT @val = COALESCE(@val + ',' + col1, col1) FROM (SELECT col1 FROM dbo.twoColumns UNION SELECT col2 FROM dbo.twoColumns ) x SELECT @val
SELECT at.author_id, at.author_name, 'article' AS source_table, aat.id FROM author_table at JOIN article_author_table aat ON at.author_id = aat.author_id UNION ALL SELECT at.author_id, at.author_name, 'event' AS source_table, eat.id FROM author_table at JOIN event_author_table eat ON at.author_id = eat.author_id
SELECT A.City, B.number Sequence FROM Cities A CROSS JOIN (SELECT * FROM master.dbo.spt_values WHERE type = 'P' AND number > 0) B WHERE B.number <= A.NumberOfSchools
select quote_section_id, expense_id, q.quoted, p.procured, nvl(q.quoted, 0) - nvl(p.procured, 0) as balance from vw_pm_sum_quoted q full outer join vw_pm_sum_procured p using (quote_section_id, expense_id) where quote_section_id = '1000065052' order by quote_section_id, expense_id;
SELECT code, name, ST_Force2D(geom) FROM mytable WHERE mytable.city = 'Greater Sydney' UNION SELECT '0', 'Remaining Countries', ST_Collect(geom) FROM mytable WHERE mytable.city <> 'Greater Sydney';
HAVING (expr_for_ratio) > 0
insert into computer (computer_id, attr_name, attr_value) values (1, 'connection', 'HDMI') , (1, 'connection', 'USB') , (1, 'memory', '2 GB') ;
WITH CTE_VL AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ProductId ORDER BY vl.VirtualLicenseId ASC) RN FROM dbo.VirtualLicense vl LEFT JOIN dbo.Product p ON vl.ProductName = p.Name ) ,CTE_License AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ProductId ORDER BY ExpiryDate ASC) RN FROM dbo.License ) SELECT VirtualLicenseId, LicenseId FROM CTE_VL vl LEFT JOIN CTE_License l ON vl.ProductId = l.ProductID AND vl.RN = l.RN
SELECT sales_cat.id_cat, sales_cat.name,case when user_cat.id is null then 0 else 1 end as "selected" FROM sales_cat LEFT JOIN user_cat ON user_cat.id_cat = sales_cat.id_cat and user_cat.id_user = 4
select m.* from messages m join ( select id_sender, max(id) maxid from messages group by id_sender ) t on m.id = t.maxid
Cursor cursor = this.db.query(TABLE_NAME_2, new String[] { "empid,username,emp_date,imagepath"}, null , null, null, null, "empid asc");
for each (id, csv_foreign_keys) in source_rows do foreign_keys = split ',', csv_foreign_keys for each fk in foreign_keys do insert (id, fk) into many-to-many link table
UPDATE a SET Listed = a.Listed + b.Listed, Sold = b.Sold, Volume = a.Volume + ISNULL(b.Volume, 0) FROM @DList1 a JOIN @DList2 b on a.ItemID = b.ItemID;
SELECT tenor_years, yield_pct, MostRecentDate FROM ( SELECT tenor_years, yield_pct, curve_date AS "MostRecentDate", RANK() OVER (PARTITION BY tenor_years ORDER BY curve_date DESC) N FROM yc_node_hist where fk_yc_update = 12 )M WHERE N = 1 ORDER BY tenor_years
SELECT cd.DiagCode, Count(cd.CustomerID) FROM (select distinct DiagCode, CustomerID from CustomerTable) as cd Group By cd.DiagCode;
select a.TranName,a.TranDate,a.TranCode from ( select TranName,TranDate,TranCode, SUM(TranQty) AS T1Qty Table1 group by TranName,TranDate,TranCode) a LEFT JOIN ( select TranName,TranDate,TranCode, SUM(TranQty) AS T1Qty Table2 group by TranName,TranDate,TranCode) b on (A.TranName = B.TranName AND A.TranDate = B.TranDate AND A.TranCode = B.TranCode) where a.T1Qty != b.T1Qty
SELECT idMovie, AVG(score) AS AvgScore FROM Critiques GROUP BY idMovie HAVING AVG(score) > 8
INSERT OR REPLACE INTO decryptionKeys VALUES ("999","Birthday","25.12.1988")
CREATE MATERIALIZED VIEW sales_mv BUILD IMMEDIATE REFRESH FAST ON COMMIT AS SELECT t.calendar_year, p.prod_id ... FROM ...
select column_name,ordinal_position from information_schema.columns where table_schema = ... and table_name = ... and ordinal_position <= 2
SELECT REPLACE('[30.345, -97.345, 4],[30.345, -97.345, 5],[30.345, -97.345, 6],[30.345, -97.345, 7].','],[','][');
Video.belongsToMany(models.User, {through: 'user_like_video', as: 'Like'}); Video.belongsToMany(models.User, {through: 'user_comment_video',as: 'Comment'});
CREATE PROC spCountAnyTableRows( @PassedTableName as NVarchar(255) ) AS -- Counts the number of rows from any non-system Table, *SAFELY* BEGIN DECLARE @ActualTableName AS NVarchar(255) SELECT @ActualTableName = QUOTENAME( TABLE_NAME ) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = @PassedTableName DECLARE @sql AS NVARCHAR(MAX) SELECT @sql = 'SELECT COUNT(*) FROM [' + @ActualTableName + '];' EXEC(@SQL) END
SELECT t.FinYearVal, t.Category, ISNULL(ttb.AMOUNT,0) FROM ( SELECT tta.FinYearVal, d.Category FROM @TempTableA tta CROSS JOIN (SELECT DISTINCT ttb.Category FROM @TempTableB ttb) AS d ) AS t LEFT OUTER JOIN @TempTableB ttb ON t.FinYearVal = ttb.FinYear AND ttb.Category = t.Category ORDER BY t.Category, t.FinYearVal
SELECT title, COUNT(art) AS art_count FROM table1 GROUP BY art HAVING art_count >= (select count(*) * X / 100 from table1)
SELECT p.name, p.create_date, p.modify_date, sm.definition FROM sys.procedures AS p INNER JOIN sys.sql_modules AS sm ON p.object_id = sm.object_id WHERE p.is_ms_shipped = 0 AND p.modify_date >= DATEADD(DAY, -10, DATEADD(DAY, -10, GETDATE())
select * from ( select 10Code, COUNT(10Code) AS NumOccurrences FROM test.table GROUP BY 10Code ) grouped join test.table src on src.10Code = grouped.10Code and (src.9Approximate is null or grouped.NumOccurrences == 1)
SELECT u.town l.userID, l.type FROM listings l INNER JOIN users u on u.userID = l.userID WHERE l.type = '{$type}' AND u.town = '{$town}'
SELECT u.* FROM USERS AS u JOIN ( SELECT EMAIL FROM USERS GROUP BY EMAIL HAVING COUNT(1) = 1) AS dt ON u.EMAIL = dt.email
select t1.* from aTable t1, (select parentid, max(id) as id from aTable group by parentid) t2 where t1.id = t2.id and t1.parentid = t2.parentid
SELECT name, city, addr, 12345 AS ph_no FROM table1
SELECT * FROM `t_activities` WHERE (`uid` = {$uid} OR `uid` in (SELECT `cid` FROM `t_con` WHERE `uid` = {$uid} AND `flag` = 1)) AND `del` = 0 GROUP BY `fid` ORDER BY `time` DESC LIMIT 10
SELECT * FROM TBL WHERE (@state is null and name is null) or (name = @state)
with s(name, distance) as ( values ('archer goblin', 10), ('dragon', 50) ), the_ids as ( insert into monster(name) select name from s returning id, name ) insert into ranged_monster (id_monster, distance) select id, distance from s inner join the_ids using (name)
SELECT COUNT(*) FROM ( select distinct profile_id from userprofile_... union all select distinct profile_id from productions_... ) x
CREATE TABLE [Comment]( CommentId int PRIMARY KEY IDENTITY(1,1), UserId int Not NULL, ArticleId int NOT NULL , FOREIGN KEY(UserId) references [User](UserId), FOREIGN KEY(ArticleId) references [Article](ArticleId) ON DELETE CASCADE )
;WITH MyCTE AS ( SELECT colA, colB, colC, ROW_NUMBER() OVER(PARTITION BY id ORDER BY colA, colB) AS rn FROM table WHERE id in (1, 2) ) SELECT * FROM MyCTE WHERE rn<= 10 ORDER BY colA, colB
START TRANSACTION -- Or SET autocommit = 0 INSERT INTO two SELECT * FROM one WHERE ...; DELETE FROM one WHERE ...; COMMIT
create unique index idx_table_userId_active on table(userId) where active = 1;
SELECT u.UserID, UserLastName, UserFirstName, UserName, Notified, CycleNumber, CycleCurrentStep, CycleDateReported, cycleid FROM [User] u left join Cycle c on (u.UserID = c.UserID) join UserDivSection us on (u.UserID = us.UserID and us.DivSectionID=26) where cyclenumber = ( select max(cyclenumber) from cycle where cycle.userid = u.userid)
select Top 2 Clientes.Nome, Clientes.NCartao, sum(Vendas.ValorCIva) ValorCIva from Clientes AS Cli, Vendas INNER JOIN Clientes ON Clientes.IdCliente = Vendas.IdCliente group by Clientes.Nome, Clientes.NCartao order by sum(Vendas.ValorCIva) DESC
select first.Id, first.Name from ( select top 1 * from Locations order by Id) first union all select last.Id, last.Name from ( select top 1 * from Locations order by Id desc) last
{ A → B A → C C → D }
DECLARE @SQL varchar(max) CREATE TABLE #tmp(Id int) SET @SQL = 'ALTER TABLE #tmp ADD Column1 varchar(20)' EXEC(@SQL)
select avg( greatest( coalesce(first_score,last_score) , coalesce(last_score,first_score) ) ) from mytable;
SELECT * FROM `table` ORDER BY FIELD(`genre`, 'horror', 'scifi', 'horror'), `name`;
select r.kpi_frequency, r.kpi_freq_time_unit, min(f.id) from rator_monitoring_configuration.kpi_definition r, wf_workflow@fonic_retail f where r.event_id = 10028 and f.start_date > sysdate - numtodsinterval ( r.kpi_frequency, r.kpi_freq_time_unit ); group by r.kpi_frequency, r.kpi_freq_time_unit order by r.kpi_frequency, r.kpi_freq_time_unit;
ResultSet res = st.executeQuery("select count(*) from pg_catalog.pg_database where datname = 'sample'") ; res.next(); int count = res.getInt("count"); System.out.println("Count : " + count); if(count == 0) { st.executeUpdate("CREATE DATABASE sample"); }
SELECT MIN(value_0-value) as MinDiff FROM TableName WHERE value_0>=value
select p.* from TableOfMaterialNeeds tomn join Products p on tomn.productid = p.productid join TableOfMaterials tom on tomn.materialid = tom.materialid group by p.productid having sum(find_in_set(tomn.material, @LISTOFMATERIALS) = 0) = 0;
$result = db_query("SELECT myimage FROM example"); $records = $result->fetchAll(); foreach ($records as $value) { $uri = $value['url']; $url = file_create_url($uri); }
select * from platform where entityid is null;
MERGE A2 AS target USING (SELECT * FROM A1) AS source ON (target.Id = source.Id AND target.a1 = Source.a1...) -- More join condition WHEN MATCHED THEN UPDATE SET a2 = source.a2, a3 = source.a3 ------ more columns WHEN NOT MATCHED THEN INSERT (Id, A1, a1, a2....) VALUES (source.Id, source.a1, source.a2.....) WHEN NOT MATCHED BY SOURCE THEN DELETE END;
FROM (invoice INNER JOIN ar ON invoice.trans_id = ar.ID) RIGHT JOIN parts ON parts.id = invoice.parts_id
select col1, col2, max(which) from ((select col1, col2, 1 as which from table1 t1 where exists (select 1 from table2 t2 where t2.col1 = t1.col1) ) union all (select col1, col2, 2 as which from table2 t2 where exists (select 1 from table1 t1 where t2.col1 = t1.col1) ) ) tt group by col1, col2 having count(*) = 1
SET A = CONCAT(isnull(A,''), '_b')
SELECT t1.id, value, (case when values like value || '%' then 'yes' end) as first FROM (SELECT t1.id, t1.values, regexp_split_to_table(t1.values, E',') as value FROM t1 ) t1;
SELECT server.id , COALESCE( AVG( playerData.player ) , 0 ) AS average FROM server LEFT JOIN playerData ON server.id = playerData.serverID AND (playerData.timestamp > UNIX_TIMESTAMP( ) -10000) group by server.id
SELECT g.*, gua.* FROM games g LEFT JOIN game_user_answers gua ON g.id = gua.id_game AND gua.answer_time>g.game_start_time AND points>0 WHERE g.id = 1 AND g.game_start_time = '2016-01-01 00:00:00'
SELECT name, bin, name || '-0' || lev AS id FROM mytable JOIN (SELECT LEVEL AS lev FROM dual CONNECT BY LEVEL <= 4) ON SUBSTR(bin, lev, 1) != '0'
Private Sub txtCC_LostFocus() txtCC.Text = Left(txtCC, 4) & String(8, "x") & Right(txtCC, 4) End Sub
SELECT s.ID, e1.Name, e2.Name FROM tblSale s INNER JOIN tblEmployee e1 ON e1.employeeID = s.employeeID INNER JOIN tblEmployee e2 ON e2.employeeID = s.employeeSaleID
SELECT sum(case when Stat='1' then 1 else 0 end) as Counted, sum(case when Stat='2' then 1 else 0 end) as Counted2 from dbo.Batch
select * from ( SELECT cur.name, log.price, log.valid_at, RANK() OVER (PARTITION BY cur.id order by valid_at DESC) as rnk FROM currency cur JOIN exchange_rate_log log on (cur.id = log.currency_id) WHERE log.exchange_currency = ? AND log.valid_at < ? ) dt where rnk = 1;
SELECT e.entity_id, eav.value AS name, eav2.value as price FROM catalog_product_entity e JOIN catalog_product_entity_varchar eav ON e.entity_id = eav.entity_id JOIN eav_attribute ea ON eav.attribute_id = ea.attribute_id JOIN catalog_product_entity_decimal eav2 ON e.entity_id = eav2.entity_id JOIN eav_attribute ea2 ON eav2.attribute_id = ea2.attribute_id WHERE ea.attribute_code = 'name' and ea2.attribute_code = 'price'
SELECT CURRENT_DATE - ((CURRENT_DATE - DATE '0001-01-07) MOD 7) AS BOW;
WITH myCTE AS ( SELECT t1.*, ROW_NUMBER() OVER (PARTITION BY t2.caseid ORDER BY LastSavedDate DESC) AS RowNumber FROM table1 t1 LEFT JOIN table2 t2 ON t1.propid = t2.propid WHERE t2.caseid in ('100','101') AND t1.active = '1' AND b.doc_type_id = '404' ) SELECT * FROM myCTE WHERE RowNumber = 1;
SELECT i.name AS IndexName, OBJECT_NAME (ic.OBJECT_ID) AS TableName, COL_NAME (ic.OBJECT_ID, ic.column_id) AS ColumnName, ic.Key_ordinal as ColumnOrder FROM sys.indexes AS i INNER JOIN sys.index_columns AS ic ON i.OBJECT_ID = ic.OBJECT_ID AND i.index_id = ic.index_id WHERE i.is_primary_key = 1 ORDER BY ic.OBJECT_ID, ic.Key_ordinal
SELECT t.Question, t.Answer, COUNT(*) AS 'Count' FROM YourTable AS t GROUP BY t.Question, t.Answer
SELECT Games.GameDate AS Date, SiteSchool.SchoolName AS Site, HomeSchool.SchoolName AS Home, VisitorSchool.SchoolName AS Visitor FROM Games INNER JOIN Schools SiteSchool ON SiteSchool.SchoolId = Games.SiteId INNER JOIN Schools HomeSchool ON HomeSchool.SchoolId = Games.HomeId INNER JOIN Schools VisitorSchool ON VisitorSchool.SchoolId = Games.VisitorId WHERE Games.GameId = '1'
person = db.person.insert(name=..., dob=..., ...) opslist = db.opslist.insert(opid=..., dop=..., ...) db.cardlist.insert(opid=opslist, name=person, ...)
SET IDENTITY_INSERT [your table] ON INSERT INTO [your table] (identityCol, col1,...) VALUES (identityCol, col1,...) SET IDENTITY_INSERT [your table] OFF
update TAB1 set col1='OLD ' || nvl(COL1, '') where to_char(COL2, 'yyyy') < 2001;
select * from sys.dm_tran_locks where resource_associated_entity_id = object_id('YourTable');
SELECT least(gps.time, cadence.added_on, `heart-rate`.added_on) FROM gps JOIN cadence ON cadence.rider_id = gps.rider_id JOIN `heart-rate` ON `heart-rate`.rider_id = gps.rider_id ORDER BY least(gps.time, cadence.added_on, `heart-rate`.added_on) LIMIT 1
SELECT (N * COUNT(*)) - ( COUNT(COLUMN_1) + COUNT(COLUMN_2) + ... + COUNT(COLUMN_N) ) FROM DATAPOINTS;
SELECT COUNT(*) * 15 FROM your_table
select * from t1 WHERE EXISTS( SELECT null FROM t2 WHERE t1.make = t2.make AND t1.model = t2.model AND t1.catcode= t2.catcode )
SELECT CONCAT(COALESCE(`affiliate_name`,''),'-',COALESCE(`model`,''),'-',COALESCE(`ip`,''),'-',COALESCE(`os_type`,''),'-',COALESCE(`os_version`,'')) AS device_name FROM devices
select t1.UniqueNumber from mytable t1 left join mytable t2 on t2.UniqueNumber = t1.UniqueNumber and t2.type = 'Response' where t1.type = 'Request' and t2.type is null
bc.SetSearchExpr("[Id]='a' or [Id]='b' or [Id]='c'"); bc.SetSearchSpec("Id", "='a' OR ='b' OR ='c'");
SELECT OBJECT_NAME(m.object_id), m.* FROM SYS.SQL_MODULES m WHERE m.definition LIKE N'%my_sp_name%'
DECLARE @productType INT = 1 DECLARE @table NVARCHAR(MAX) DECLARE @sql NVARCHAR(MAX) SELECT @table = CASE @productType WHEN 1 THEN 'products1' WHEN 2 THEN 'products2' END SELECT @sql = 'SELECT * FROM ' + QUOTENAME(@table); EXEC(@sql)
SELECT receiver, caller, category, playfilename, COUNT(*) OVER (PARTITION BY receiver, category) AS CountPerReceivercategoryGroup from tbl_record
SELECT * FROM TABLEA WHERE 20140630 < CASE WHEN RecvdDateID > GETDATE() THEN EnteredDateID ELSE RecvdDateID END
WITH MatchedRows AS SELECT A.a, B.b FROM A a INNER JOIN B b ON A.a = B.b SELECT MatchedRows.a, MatchedRows.b FROM MatchedRows UNION SELECT A.a, B.b FROM A a, B b WHERE A.a NOT IN (SELECT a FROM MatchedRows) AND B.b NOT IN (SELECT b FROM MatchedRows)
SELECT aWord, COUNT(*) AS WordOccuranceCount FROM (SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(concat(Text, ' '), ' ', aCnt), ' ', -1) AS aWord FROM table CROSS JOIN ( SELECT a.i+b.i*10+c.i*100 + 1 AS aCnt FROM integers a, integers b, integers c) Sub1 WHERE (LENGTH(Body) + 1 - LENGTH(REPLACE(Text, ' ', ''))) >= aCnt) Sub2 WHERE Sub2.aWord != '' AND LENGTH(Sub2.aWord) >= 5 GROUP BY aWord ORDER BY WordOccuranceCount DESC LIMIT 10
;WITH MonthlyOrders AS ( SELECT PartNo, [Desc], CONVERT(VARCHAR(6),OrderDate,112) YearMonth, SUM(OrderQty) OrderQty FROM YourTable GROUP BY PartNo, [Desc], CONVERT(VARCHAR(6),OrderDate,112) ),MaxOrders AS ( SELECT *, ROW_NUMBER() OVER(PARTITION BY PartNo, [Desc] ORDER BY OrderQty DESC) RN FROM MonthlyOrders ) SELECT PartNo, [Desc], OrderQty MaxSoldPerMonth, YearMonth FROM MaxOrders WHERE RN = 1;
select t.* from t where 'abc' like t.pattern;
select * from customer where (@customerid is null OR customer_id = @customerid)
SELECT * FROM Table2 EXCEPT SELECT * FROM Table1
SELECT SUM(Amount) FROM Master M WHERE M.ID IN ( SELECT DISTINCT MasterID FROM DETAIL WHERE PID IN (1,2,3) )
SELECT d.the_date FROM [date-table] AS d LEFT JOIN statHolidaysTbl AS h ON d.the_date = h.Date WHERE h.Date Is Null;
SELECT * FROM MyTable ORDER BY (ColumnA - ColumnB)
where created >= STR_TO_DATE('2014-09-01','%Y-%m-%d') and created < STR_TO_DATE('2014-10-01','%Y-%m-%d')
SELECT SUB_ACCT_NO_PAJ, CustomerType, POST_DTE_PAJ, IA_DateYear, ADJ_RSN_PAJ, SUM(POST_AMT_PAJ) AS POST_AMT_PAJ_total COUNT(*) AS [aCount] INTO TempTable1 FROM All_Adjustments GROUP BY SUB_ACCT_NO_PAJ, CustomerType, POST_DTE_PAJ, IA_DateYear, ADJ_RSN_PAJ
CREATE OR REPLACE TRIGGER UpdateLog BEFORE UPDATE OF title ON TestTable REFERENCING new as newrow old as oldrow FOR EACH ROW WHEN (newrow.title != oldrow.title) BEGIN INSERT INTO LogTable VALUES(:oldrow.title, make_ref(TestTable, :newrow.object_id)); END UpdateLog; /
SELECT movie_name FROM table1 JOIN table2 USING (movie_id) WHERE movie_genre = 'some_genre'
CHECKPOINT; GO DBCC DROPCLEANBUFFERS; --Clears query cache GO DBCC FREEPROCCACHE; --Clears execution plan cache GO
CREATE TABLE combined_things WITH OIDS AS (SELECT thing1.name, thing1.shape, CAST('public.thing1_source_table' AS CHAR(100)) source_id FROM public.thing1_source_table UNION SELECT thing2.name, thing2.shape, 'public.thing2_source_table' FROM public.thing2_source_table);
DELETE po.* FROM `Product ordered` po INNER JOIN `User Info` ui ON ui.userID = po.userID WHERE ui.userName = 'Tim'
db.col.find({"name":{$ne: "John"}})
SELECT CASE CHARINDEX('.', @summary1) -- determine if the sentence contains a full stop WHEN 0 THEN @summary1 -- if not return the whole sentence ELSE SUBSTRING(@summary1, 1, CHARINDEX('.', @summary1)) -- else first part END AS sentence
select t1.EmployeeId, t1.EmployeeCarModelID, t2emp.CarModelName as EmployeeCarModelName, t1.SpouseCarModelID, t2sp.CarModelName as SpouseCarModelName from table1 t1 left join table2 t2emp on t1.EmployeeCarModelID = t2emp.CarModelId left join table2 t2sp on t1.SpouseCarModelId = t2sp.CarModelId;
INSERT INTO DOCUMENTATION (NAME, VALUE, QUERY, INSERTDATE) SELECT 'Datafile paths', LISTAGG(name, ', ') WITHIN GROUP (ORDER BY name), 'select name from V$DATAFILE', SYSDATE FROM V$DATAFILE;
--CTE: WITH subq AS ( SELECT xx FROM a INNER JOIN aa ON a.col = aa.col UNION SELECT xx FROM b INNER JOIN bb on a.col = bb.col ) SELECT x from d left join subq on subq.xx = d.x where subq.xx is null
(SELECT TOP 1 config.Signal FROM config,bases WHERE config.ID = messages.ID AND bases.Name = messages.RecBy AND bases.NameNum = config.RecBy Order By...)
select column_name + ',' from information_schema.columns where table_name = 'your table name' and column_name like 'nvarchar%'
Declare @parameter1 float, @parameter2 float, @parameter3 float, @parameter4 float Select @parameter1 = name, @parameter2 = age, @parameter3 = postal, @parameter4 = weight from TableValues where ID = 1234 dbo.SqlFuntion(@parameter1, @parameter2, @parameter3, @parameter4)
SELECT * FROM myTable WHERE Column1 = 'test' AND (@ID = -1 OR Column2 = @ID)
select * from video where video_id in (select video_id from video_category where category_id not in (list of meaninless ids))
SELECT DISTINCT Cateogory, Subcategory 1, Subcategory 2 FROM your_table
SELECT t.*, @rownum := @rownum + 1 AS rank FROM TABLE t, (SELECT @rownum := 0) r
CREATE TABLE attachments ( ... ticket_id INTEGER, ... FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE ON UPDATE CASCADE )
;with C as ( select DisplayIndex, row_number() over (partition by [Group] order by DateCreated desc) as rn from Product ) update C set DisplayIndex = rn
insert into tbl(item_name, item_price) select item_name, item_price from tbl where id = 5
begin declare at_end sqlstate; declare name anchor emp.name; declare continue handler for not found set at_end = TRUE; declare c cursor for select tabname from emp for update; open c; fetch c into name; if at_end <> TRUE then update emp set name = 'foo' where current of c; end if; end@
SELECT Pers.value('self::*', 'nchar(10)') as 'ID' FROM @xmlUserId.nodes('/users/id') as EMP(Pers)
SELECT WEEK(FROM_UNIXTIME(time)) WeekNo, DATE_FORMAT(FROM_UNIXTIME(time),'%a') WeekName, COUNT(DISTINCT(session_id)) FROM T GROUP BY WEEK(FROM_UNIXTIME(time)), DATE_FORMAT(FROM_UNIXTIME(time),'%a')
SELECT x.value from form_data x, form_data y WHERE x.form_id=1 and x.field_id=1 and y.form_id=and y.field_id=1 GROUP BY x.value HAVING SUM(SIGN(1-SIGN(y.value-x.value))) = (COUNT(*)+1)/2;
select t2.*, t1.restock_date, (t1.restock_date - t2.analysis_date) as diff from table2 t2 left join lateral (select t1.* from table1 t1 where t2.part = t1.part and t2.analysis_date <= t1.restock_date order by t1.restock_date limit 1 ) t1;
var DuplicatePages = from a in DBContext.Pages join b in DBContext.Pages on a.MetaDescription equals b.MetaDescription where (a.PageID <> b.PageID) && (a.DomainID == ReportID) && (b.DomainID == ReportID) && (a.MetaDescription.Trim().Length > 0) && (a.URL < b.URL) orderby a.URL select new { Url = a.URL, DuplicateUrl = b.URL };
SELECT CASE WHEN ROW_NUMBER() > 7 THEN ROW_NUMBER()-7 ELSE '' END AS Wosequence , colum2, column3 FROM dbo.abc [..]
SELECT LEFT(ID, 8) AS nID, SUM(Value) AS tot FROM your_table GROUP BY LEFT(ID, 8)
select TaskId, ... from Tasks where State="New" limit 1; update Tasks set State="In Progress" where TaskId=<from above> and State="New";
declare @email varchar(100) set @email='sample@gmail.com' select substring(@email,1,charindex('@',@email)-1)
SELECT address, min(timestamp), max(timestamp) FROM ((SELECT address_from as address, timestamp FROM transactions ) UNION ALL (SELECT address_to as address, timestamp FROM transactions ) ) a GROUP BY address;
UserRank.trydato = System.DateTime.Today.AddDays(4).Date;
String query = "SELECT r.reservation_no, f.flight_no, r.departure_date, f.departure_time, f.duration FROM flights f, reservations r WHERE f.flight_no=r.flight_no AND r.customer_ssn="?" "; PreparedStatement ps = connection.prepareStatement(query); ps.setString(1, customer_ssn); result = ps.executeQuery();
INSERT INTO Membership (Id, StartDateTime, EndDateTime, Frozen, MembershipType) SELECT Id, GETDATE(), GETDATE(), 0, 'Free' FROM User
select regexp_split_to_table('hello world', E'\\s+'); hello world (2 rows)
SELECT DISTINCT X1.col1 FROM X X1 INNER JOIN X X2 ON X1.col1=X2.col1 WHERE X1.col2=2 AND X2.col2=4
(select * from a except select * openquery(LINKEDSERVER,'select * from a')) Union (select * openquery(LINKEDSERVER,'select * from a') except select * from a)
SELECT [Location Code], [Bill No_], SUM(Price) AS Price FROM (SELECT DISTINCT [Location Code], [Bill No_] , Price from [Item Ledger Entry] WHERE [Location Code] = '0001' and [Document Date] = '01.04.2015') t GROUP BY [Location Code], [Bill No_]
SELECT CASE WHEN name LIKE '% %' THEN LEFT(name, Charindex(' ', name) - 1) ELSE name END, CASE WHEN name LIKE '% %' THEN RIGHT(name, Charindex(' ', Reverse(name)) - 1) END FROM YourTable
select 24534534534345353||chr(160) "Really Long Number" from dual;
NodeA NodeB Hops ------ ------ ---- tog171 tog171 0 tog171 abb521 1 abb521 tog171 1 tog171 tog226 2 tog226 tog171 2 tog171 tog218 3 tog218 tog171 3
select * from Stations where lines IN (select distinct [column_name] from A) AND lines in (select distinct [column_name] from B)
SELECT DISTINCT Name, ID FROM TestTable where Name <> '' union all SELECT Name, ID FROM TestTable where Name = ''
alter table testTable add ( column1 number(1) default 0 not null )
SELECT DISTINCT A FROM MY_TABLE WHERE A NOT IN (SELECT DISTINCT A FROM MY_TABLE WHERE B = 1)
SELECT * FROM TABLE LIMIT 5 AND 20
select * from MYTABLE t WHERE REGEXP_LIKE (t.DESCRIPTION, '[a-z]', 'c')
select t1.*, t2.bar, t2.drink from t1 left join t2 on t1.id = t2.id and t2.bar = 9 where t1.name = 'Frank';
SELECT user, month, GROUP_CONCAT(event), SUM(gross) FROM xyz GROUP BY month
var games = from g in dataModel.MediaItems.OfType<Game> where g.LibraryItems.Any(item => item.LoanTo == 1) select g;
struct Shop { // other variables.... var record : CKRecord? var commentRef : CKReference? } struct Comment { // other variables.... var record : CKRecord? var clientRef : CKReference? } var shops : [Shop] var comments : [Comment] func commentsWithReference(ref: CKReference) -> [Comment] { let matchingComments = comments.filter {$0.record!.recordID == ref.recordID } return matchingComments } let shopComments = shops.map { commentsWithReference($0.commentRef!) }
SELECT r.* FROM my_table r WHERE r.Date IN (SELECT Date FROM my_table WHERE ID = r.ID ORDER BY Date LIMIT 5);
SELECT p.ProductID, p.Title, MAX(pi.FileName) as FileName FROM [Ordering].[Products] p INNER JOIN [Ordering].[ProductImages] pi ON p.ProductID =pi.FK_ProductID WHERE p.Title like '%' + @Title +'%' GROUP BY p.ProductID, p.Title ORDER BY p.Title ASC
CREATE TABLE Unavailability (Crew_ID varchar (9) NOT NULL, Available text (3), Licence_Number int (8), CONSTRAINT pk11 primary key (Crew_ID));
update the_table set pos = t.rn - 1 from ( select id, row_number() over (partition by fk_id) as rn from the_table ) t where t.id = the_table.id;
SELECT COUNT(*) FROM (SELECT col_appid, min(col_payment_issued_date) as PayDate FROM tbl_ui_paymentstubs WHERE isnull(col_payment_amount,0) > 0 GROUP BY col_appid HAVING min(col_payment_issued_date) >= '09/01/2010' and min(col_payment_issued_date) <= '09/30/2010') Claims
select messages.*, f.user_name as from_id, t.user_name as to_id from messages join users f on f.user_id = messages.from_id join users t on t.user_id = messages.to_id ;
select A.person from (SELECT DISTINCT person,product FROM yourtable) A where A.product in ('phone','suitcase','wallet','chair') group by A.person having count(*) = 4
WITH q AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY locationName ORDER BY id) rn FROM tTable ) DELETE FROM q WHERE rn > 1
with groupings as ( select concat(data) groups from Table1 group by ID ) select groups, rownumber() over () from groupings
SELECT col3, Format(Avg([col2]-[col1]),"hh:mm:ss") AS TimeDiff FROM Table1 GROUP BY col3;
select coalesce(maxtemptrans, maxtrans, 0) from (select max(transid) maxtemptrans from tbltrans_temp) t, (select max(transid) maxtrans from tbltrans ) t2
FOR I IN T_TITLE.FIRST.. T_TABLE.LAST LOOP IF T_TABLE(I).VAR_TITLE = PAR_TITLE THEN V_TITLE_ID = I; EXIT; END IF; END LOOP;
select max(id),value From foo group by value order by max(id) desc
select id,trunc(next_day - day) from (select id,day,lead(day) over (order by day) next_day from date_test) where id = '00';
with data as ( select Code, substring(Code, 1, len(Code) - 1) as Prefix, Name, Total from T ) select case when grouping(Name) = 1 then Prefix else min(Code) end as Code, case when grouping(Name) = 1 then '-' else Name end as Name, sum(Total) as Total from data group by grouping sets ( (Prefix, Name), (Prefix) ) order by Prefix, grouping(Name), Code
CREATE PROCEDURE dbo.SELECT_MEMBERS @ID int = NULL, @Name varchar(250)= NULL, @Deleted datetime =NULL AS BEGIN SET NOCOUNT ON; SELECT ID, Name, Deleted FROM dbo.Members WHERE ID = ID AND ISNULL(@Name, '') = ISNULL(Name, '') AND ISNULL(@Deleted, '') = ISNULL(Deleted, '') END GO
SELECT b.* FROM dbo.BRANCH b JOIN ( VALUES (1, 'C'), (2, 'D'), (3, 'A'), (4, 'F') ) c(ID, IDENTIFIER) ON c.IDENTIFIER = b.IDENTIFIER ORDER BY c.ID
UPDATE person SET dollars = GREATEST(0, dollars-20) WHERE id=1
with dtl_cnt as (select det_orderno , count(*) as tot_lines from detail group by det_ordno) select hdr_orderno , row_number() over (partition by hdr_orderno) as Line_no , dc.tot_lines , d.item from header join dtl_count dc on hdr_orderno = dc.det_orderno join detail d on hdr_orderno = d.det_orderno
product, name_1, value_1, name_2, value_2 apple, size, small, color, green apple, size, small, color, red apple, size, large, color, green apple, size, large, color, red car, type, coupe, fuel, diesel car, type, coupe, fuel, gas car, type, sedan, fuel, diesel car, type, sedan, fuel, gas
SELECT * FROM invoice_headers A LEFT OUTER JOIN user_info B ON A.debtor_id = B.user_id AND A.debtor_user_type = 0 LEFT OUTER JOIN company_info C ON A.debtor_id = C.company_id AND A.debtor_user_type <> 0
select t.*, (select sum(t2.CourseFee + t2.AdditionalCharges - t2.ExpenseAmount) from onetable t2 where t2.id <= t.id ) as NetAmount from onetable t;
select i.item, m.material, m.begin_time from items i join materials m on m.begin_time between i.begin_time and i.end_time union all select item, material, begin_time from (select i.item, m.material, m.begin_time, row_number() over (partition by i.item order by m.begin_time desc) as seqnum from items i join materials m on m.begin_time < i.begin_time ) im where seqnum <= 2;
where LENGTH(TRIM(TRANSLATE(YourField, ' +-.0123456789', ' '))) is not null
Select .... From ... Where create_date = trunc( (TO_DATE('06/30/14 21:41:11', 'MM/DD/YY HH24:MI:SS') - TO_DATE('01/01/1970 00:00:00', 'MM/DD/YYYY HH24:MI:SS') ) * 24 * 60 * 60 );
SELECT property.ID, property.address, property.postcode, property.lease, landlords.firstName, landlords.lastName FROM property INNER JOIN landlords ON landlords.ID = property.landlord WHERE landlords.firstName LIKE '%spina%' OR landlords.lastName LIKE '%spina%'
WHERE STR_TO_DATE(due, '%d-%b-%Y') < NOW()
select location, month, value from <yourquery here> unpivot ( value for month in (January, February, March, April, May, June, July, August, September, October, November, December) ) unpiv
SELECT DATE_FORMAT(AudiEvent.EventDate,'%d-%m-20%y') as Event_Date from AudiEvent ORDER BY AudiEvent.EventDate
DECLARE @id INT SET @id = 100 WHILE (@id <= 300) BEGIN insert into categories (categoryID) values (@id) SELECT @id = @id + 1 END
select substring(member_name, charindex('/', member_name) + 1, 1) as first_initial, left(member_name, charindex('/', member_name) - 1) as last_name from member
insert into table1 (col1, col2, col3) select cast(col1 as signed), col5, col7 from Table1_Temp
DELETE a FROM activities a LEFT JOIN (SELECT MAX(id) AS id FROM activities GROUP BY name) uniqId ON a.id=uniqId.id WHERE uniqId.id IS NULL;
select 1 from table where key = value; select count(1) from table where key = value;
@Column(name="BOOLEAN_COLUMN", columnDefinition = "varchar2(1)") @Type(type = "yes_no") private Boolean booCol;
SELECT f.* FROM FRIENDS f JOIN USERS u ON r.FRIEND_ID = u.USER_ID WHERE f.FRIEND_ID = ...
SELECT AVG(NO_OF_SEATS) "WEEKLY AVERAGE", TRUNC(TRAVEL_DATE,'IW') FROM RESER GROUP BY TRUNC(TRAVEL_DATE,'IW');
SELECT City, State, County, GROUP_CONCAT(Zipcode SEPARATOR ',') AS Zipcodes FROM MyTable WHERE <Whatever you have> GROUP BY City, State
declare @sql nvarchar(max); set @sql = N'select * from table where ' + quotename(@search) + N'=''1'''; exec sp_executesql @sql;
select Fname,Lname,Pname, Employee.DepartNum E_DNUM,Project.DepNum P_DNUM from Employee join WorksOn on WorksOn.EmpSSN = Employee.SSN join Project on WorksOn.ProjNum = Project.Pnumber join Department on Project.DepNum = Department.Dnumber where Employee.DepartNum <> Project.DepNum
SELECT a1, MAX(a2) AS a2 FROM table GROUP BY a1
select distinct t1.title_id, t1.shared_task_id from mytable t1 join mytable t2 on t1.shared_task_id = t2.shared_task_id and t1.title_id <> t2.title_id
SELECT TITLE_LOOK_UP.TITLE_NAME , STAFF.FIRST_NAME , STAFF.LAST_NAME , STAFF.DEPT_ID FROM STAFF, TITLE_LOOK_UP WHERE STAFF.POST_ID ='2' AND STAFF.TITLE_ID = TITLE_LOOK_UP.TITLE_ID ORDER BY STAFF.LAST_NAME ASC
SELECT cs.EmployeeRun, min(cs.Date) as MinDate, max(cs.Date) as MaxDate, SUM(cs.Total) as SumTotal FROM CusSalaryDay cs WHERE cs.Date Between '2012-12-03' and '2012-12-05' GROUP BY cs.EmployeeRun Order By EmployeeRun
SELECT r.* FROM `record_versions` r JOIN (SELECT MAX(`datetime`) `datetime`, account_id FROM record_versions GROUP BY account_id) t ON ( r.account_id = t.account_id AND r.datetime = t.datetime ) WHERE r.record_id = '26'
SELECT sub_id, SUM(ans1) FROM booktable WHERE book_id = 1 AND sub_id IN (4, 6) Group by sub_id
<select id="selectFoo" parameterType="com.foo.bar.SettingsBean"> select * from foo where rownum >= #{rowStart} and rownum < #{rowEnd} </select>
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE TO USER;
SELECT qr.* FROM question_records qr enrollments e questions q WHERE e.id = qr.enrollment_id AND q.id = qr.question_id -- your original WHERE condition AND enrollments.id IN (10,20) AND questions.id IN (500,600) AND question_records.id not in (3000,4000))
SELECT t1.*, MAX(t2.unixtimestamp as rj_time), t2.response_detail as rj_error FROM t1 LEFT JOIN table2 as t2 ON t1.id=t2.personid AND t1.clientcode=t2.client WHERE t1.clientcode='quouk' AND (t1.language = 'en_GB') GROUP BY t1.id ORDER BY t1.id
Create Materialized view temp_mv refresh complete start with (sysdate) next (add_months(trunc(sysdate,'mm'),1)+25)+0.5/24 with rowid as select * from temp;
select * from employee where Department = @dept AND (@flag != 1 OR @sal < 10000)
SELECT ... FROM TABLE_A AS A JOIN TABLE_B AS B ON CAST(SUBSTR(DIGITS(A.STR_NBR),3,3)AS CHAR(4)) = B.LOCN_NO
SELECT column1 FROM (SELECT nvl(column1, 0) column1 FROM table1) WHERE column1 <= 1
WITH cte AS ( SELECT id,code, ROW_NUMBER() OVER(PARTITION BY id ORDER BY code) as row FROM tableName ) SELECT id,code FROM cte WHERE row=1
from django.db.models import Sum Entry.objects.all().values('author','target').annotate('sum__points'=Sum('points'))
select a.mjor, a.course, b.grade from degree_plan as a left join student_record as b on a.course_no=b.course_no and b.id=4455 where a.major='COE'
select A.column1, B.column2 from tablename as A, tablename as B where (A.id != B.id) and (SOUNDEX(A.column1) = SOUNDEX(B.column2))
var suppliers = dbContext.Suppliers.Include(s => s.PrimaryContact.Addresses);
SELECT SUM(Amount) FROM mytable x WHERE Ident = 3 AND NOT EXISTS (SELECT * FROM mytable y WHERE x.OrderNr = y.OrderNr AND y.Ident = 14)
select id, name, (x + y) as total, (case when (x + y) = min(x + y) over (partition by id) then 0 else 1 end) as IsNotMinValue from t;
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY p.DtDistribuicao, p.Id) AS RowNumber FROM ProcessoInstanciaFonte as p ) AS q WHERE q.RowNumber BETWEEN 1 AND 20; ORDER BY q.RowNumber SELECT TOP 20 * FROM dbo.ProcessoInstanciaFonte AS p ORDER BY p.DtDistribuicao, p.Id
select cs.*, sum(cs.ActiveEachYear) over (order by cs.[year]) as TotalActiveInSystem from CurrentScenario cs order by cs.[year] desc;
SELECT stddev_pop(C) FROM ( SELECT B, C FROM table1 WHERE B < (SELECT AVG(B) FROM table1 ) ) s
SELECT CASE WHEN UPPER(name) LIKE 'THE %' THEN CONCAT(RIGHT(name, length(name)-4),', THE') ELSE name END AS name FROM artist ORDER BY name
CASE WHEN (org.org_misc_data = 'PAC') THEN 'pac|' ELSE '' END + CASE WHEN (org.dues_category = 'PART') THEN 'partner_member' WHEN (org.dues_category = 'FREE' AND org.org_status_flag = 'P') THEN 'associate_member' ELSE 'non_member' END AS org_status
SELECT (case when substr(locationPostcode, 2, 1) between 'A' and 'Z' then left(`locationPostcode`, 2) else left(locationPostcode, 1) end) as postcode_prefix, count(`locationPostcode`) as `locationCount` FROM `locations` WHERE `locationPostcode` IS NOT NULL AND `locationPostcode` <> '' GROUP BY postcode_prefix ORDER BY `locationCount` DESC;
select to_date('12/30/1899', 'MM/DD/YYYY') + 40676.2641666667 from dual;
SELECT COUNT(1) FROM (SELECT distinct ProductId from Sales UNION -- instead of union all to ensure that only distinct values are taken SELECT distinct ProductId from Links) products
ALTER TABLE HS_HR_PEA_EMPLOYEE MODIFY JS_PICKED_TIME DATE DEFAULT SYSDATE
SELECT distinct(*) FROM HS_IHE_ATNA_Repository.Aggregation a WHERE EventType = 'Retrieve Document Set' AND TimeStamp = (select min(b.TimeStamp) from from HS_IHE_ATNA_Repository.Aggregation b WHERE b.tid = a.tid) ORDER BY ID asc
select .. Agent, case when coalesce(MiddleName, '') = '' then FirstName + ' ' + LastName else FirstName + ' ' + MiddleName + ' ' + LastName end as Name, ... from tbSystemUser
SELECT skills.id, IF(IS NULL user_skills.skill_id, 'Yes', 'No') FROM skills LEFT JOIN user_skills ON ( skills.id = user_skills.skill_id AND user_skills.user_id = 1234 )
mysqldump -t -u root -p mytestdb mytable --where="datetime LIKE '2014-09%'"
SELECT id, SUM(CASE WHEN event IN ('end', 'prog') THEN viewtime WHEN event = 'rew' THEN -viewtime END) AS viewtime FROM tablename GROUP BY id
SELECT distance, floor(distance / 12) AS Feet, distance mod 12 as Inches from products
"... where ProductName+ProductNumber+GenericName like '%" & txtSearch & "%'"
replace( regexp_replace( regexp_replace( regexp_replace( string, '\s([a-zA-Z]+($|\W))', chr(0)||'\1' ), '((^|\W)[a-zA-Z]+)\s', '\1'||chr(0) ), '\s'), chr(0), ' ')
select entity_name, count(*) count from ( select e.entity_name, t.tag from tag t join entity e on (t.entity_id = e.entity_id) where t.tag in ('tag', 'tag', 'tag') )x group by entity_name order by count desc
CREATE TABLE tab ( id tinynot null CHECK (id BETWEEN 0 AND 9), value INT not null CHECK (id BETWEEN 1000000000 AND 9999999999) );
SELECT * FROM products INNER JOIN categories ON categories.id = products.category_id WHERE categories.lft > 2 and categories.rgt < 11
... SET @currText = textToExpolde; SET @sepLen = LENGTH( separator ); WHILE @currText != '' DO SET @word = SUBSTRING_INDEX(@currText, separator, 1); SET @currText = SUBSTRING(@currText, LENGTH(@word) + 1 + @sepLen); INSERT INTO extractor_words SET word = @word; END WHILE; ...
select orderid, case when maxprice is null then 0 else maxprice end as maxprice from ( select orderid = o.id, maxprice = (select MAX(price) from orderlines ol where ol.orderid = o.id) from orders o ) sub
SELECT [some fields] FROM SELECT firstname, lastname, CONCAT(firstname, ' ', lastname) as fullname FROM people) AS tmp WHERE firstname LIKE '%user_submitted_data%' OR lastname LIKE '%user_submitted_data%' OR fullname LIKE '%user_submitted_data%'
UPDATE Geo_location AS g JOIN users_data AS u ON u.member_num = g.member_num SET g.public = ud.acceptinClients
SELECT LastName, CASE FirstName WHEN 'Ian' THEN JobNo ELSE -1 END FROM Employees
UPDATE all_event_details SET venue_city = split_part(venue_city_state, ',', 1), venue_state = split_part(venue_city_state, ',', 2)
select user_id, game_id, (case when count(*) > 1 then timestampdiff(second, min(timestamp), max(timestamp)) / (count(*) - 1) end) as AvgDiffSeconds from game_logs gl where game_event_type_id = 3 group by user_id, game_id;
select id from table t order by id desc limit 1;
SELECT german FROM translate_content WHERE german = "A" UNION ALL SELECT german FROM translate_content WHERE german = "B" UNION ALL SELECT german FROM translate_content WHERE german = "C" UNION ALL SELECT german FROM translate_content WHERE german = "A"
SELECT cat, dog, mouse, ids, (SELECT cheese FROM my_second_table AS a WHERE find_in_set(a.ids, ids) LIMIT 1) AS cheese FROM my_first_table
SELECT MAX(ltrim(sys_connect_by_path(flow_run_id, ','), ',')) FROM ( select flow_run_id, rownum rn from table where CREATED_DATE < sysdate - 32 and rownum < 10 order by 1 desc ) START WITH rn = 1 CONNECT BY PRIOR rn = rn - 1
SELECT CASE WHEN rnk = 1 THEN MAKER ELSE '' END AS Mkr, type, rnk FROM Table1 ORDER BY MAKER,RNK
SELECT * FROM UserDB ORDER BY CASE Role WHEN 'Admin' THEN 0 WHEN 'User' THEN 1 WHEN 'Guest' THEN 2 END
SELECT REPLACE(text,CHR(26),otherChar) FROM .........
INSERT INTO example_table ([month], field, field, field) SELECT Forms!YourForm!txtSecondMonth AS [month], field, field, field FROM example_table WHERE [month] = Forms!YourForm!txtFirstMonth;
SELECT DISTINCT id FROM myTable WHERE @myInput IN (rColumn, sColumn);
DECLARE @FirstDayofPrevMonthPriorYear datetime DECLARE @LastDayofPrevMonthPriorYear datetime SET @FirstDayofPrevMonthPriorYear = DATEADD(year,-1,@FirstDayofPrevMonth) SET @LastDayofPrevMonthPriorYear = DATEADD(year,-1,@LastDayofPrevMonth)
SELECT CR.ID, CR.Name, Folder.Name AS FolderName FROM CR /* First join CR to VM */ INNER JOIN VM ON CR.ID = VM.ObjectID /* Then join VM to itself aliased as VMLoc, mapping Location to ObjectID */ INNER JOIN VM AS VMLoc ON VM.Location = VMLoc.ObjectID /* Finally join the second ObjectID to Folder to get Folder.Name */ INNER JOIN Folder ON Folder.ID = VMLoc.ObjectID
select A.product_desc, (select sum(B.qty) from product_sales_branch_a B where B.product_id = A.product_id), (select sum(C.qty) from product_sales_branch_b C where C.product_id = A.product_id) from product A where A.product_id = 'ABC'
SELECT Id, Name FROM Table1 JOIN Table2 ON Table2.FK1 = Table2.FK1
select * from questions where id NOT IN ( select distinct round1 from questions where user1 in (1,2) OR user2 in (1,2) UNION select distinct round2 from questions where user1 in (1,2) OR user2 in (1,2) UNION select distinct round3 from questions where user1 in (1,2) OR user2 in (1,2) )
SELECT s.name, s.email, l.link FROM subscribers s, links l WHERE s.id IN ('.$subscribers.') AND FIND_IN_SET(s.id, l.id_of_user_that_clicked)
UPDATE records SET name = CASE WHEN id = 3 THEN 'abc' WHEN id = 1 THEN 'def' ELSE name END
order by case when price between @priceMin and @priceMax and location = @location then 1 when price between @priceMin and @priceMax and district_id = @districtid then 2 when no_of_bedrooms = @no_of_bedrooms and districtid = @districtid then 3 when price between @priceMin and @priceMax and no_of_bedrooms = @no_of_bedrooms and property_area = @property_area and districtid <> @districtid then 4 else 5 end, price desc
where BUSINESS_UNIT=1227 and b.year_audit=2016 and taggable='YES' and ( ( (select count(*) from #tempdept) > 0 and fix_asset.department in (select item from #tempdept) ) or (select count(*) from #tempdept) = 0 )
WITH cte AS ( SELECT CustomerID, Date, DATEADD(DAY, -ROW_NUMBER() OVER (PARTITION BY CustomerID ORDER BY Date), Date) dt FROM trips ) SELECT CustomerID, Date, DENSE_RANK() OVER (PARTITION BY CustomerID ORDER BY dt) FROM cte;
WITH find_rec AS (SELECT id3 FROM s.t2 WHERE id4 = 'hello3') UPDATE s.t1 SET id2 = find_rec.id3 WHERE id1 = 2 AND EXISTS (SELECT 1 FROM find_rec);
select st.version as version, count(st.version) as total sys_ids,count(a),count(b),count(c) from ( SELECT sys_id,version,state, MAX(DECODE(state,'A',state)) as a, MAX(DECODE(state,'B',state)) as b, MAX(DECODE(state,'C',state)) as c FROM SYSTEM st group by sys_id,version,state ) group by version;
{ (Author, Date) (Author, URL) (Content) }
;WITH PricesCTE AS ( SELECT *, ROW_NUMBER()OVER(PARTITION BY companyid,product ORDER BY version DESC) AS rn FROM prices WHERE GETDATE() BETWEEN [start] AND [end] ) SELECT * FROM PricesCTE WHERE rn = 1
SELECT CONCAT_WS("", "$", FORMAT(COALESCE(db.billing.cost_per_month, 0.00), 2)) AS "Monthly Cost", CONCAT_WS("", "$", FORMAT(COALESCE(db.billing.additional_cost, 0.00), 2)) AS "Additional Cost", CONCAT_WS("", "$", FORMAT(COALESCE(db.billing.cost_per_month, 0.00) AS DECIMAL(60, 2)) + COALESCE(db.billing.additional_cost, 0.00), 2)) AS "Total Cost" FROM db.billing;
select name from syscolumns sc1 where id = object_id('table1') and exists(select 1 from syscolumns sc2 where sc2.name = sc1.name and sc2.id = object_id('table2'))
EXEC sys.sp_addextendedproperty @name=N'PersianName', @value=N' ''کارکنان'' ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Personnel' EXEC sys.sp_addextendedproperty @name=N'PersianColumnName', @value=N' ''شناسه''' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Personnel', @level2type=N'COLUMN',@level2name=N'Name'
select Numbers, count(*) as Count from MyTable group by Numbers
SELECT YEAR(time) AS year MONTH(time) AS month, COUNT(myTable.year) AS cnt, FROM months LEFT JOIN myTable ON months.year = myTable.year AND months.month = myTable.month GROUP BY months.year, months.month ORDER BY months.year, months.month
(mod(EXTRACT(MONTH FROM SYSDATE()), 3)) = (mod(EXTRACT(MONTH FROM <input date>), 3))
SELECT DAYOFWEEK('2007-02-03');
ORDER BY FIELD(color, 49, 2) DESC
SELECT p.name AS personName, p.slug AS personSlug, COUNT(p.slug) AS personCount FROM person AS p INNER JOIN person AS p2 ON p.checksum = p2.checksum WHERE p2.slug = 'john-doe' AND p.slug <> 'john-doe' GROUP BY personName ORDER BY personCount DESC
select right('000' + convert(varchar(3), intcolumn), 3) from yourtable
select pst.userid, pic.title from pictures pic inner join posted_by pst on pic.title = pst.title left join followers flw on pst.userid = flw.userid where pst.userid = <userid> or flw.followerid = <userid>
pg_dump -h 172.26.76.100 -p 5432 -U username your_db | psql -h localhost -p 5432 -U username your_db
SELECT a.Price FROM SalesReturnDetails a INNER JOIN ( SELECT DISTINCT Bill_number FROM SalesReturn WHERE Session='12-13' ) b ON a.Bill_number = b.Bill_number
select decode(kpi_def_id,NULL,'N', case when instr(ini||curr||downtime||manual,'N',1) = 0 then status else 'N' end) from ex_6
Select personid,lastname,firstname,age, Case when age between 26 and 27 then 'post graduate' when age between 28 and 30 then 'working and single' when age between 31 and 33 then ' middle level manager and married' Else 'Nil' End comments from persons
WITH CTE AS ( SELECT 1 N UNION ALL SELECT N + 1 FROM CTE WHERE N < 5 ) UPDATE MyTable SET MyNumber = ( SELECT TOP 1 N FROM CTE WHERE NOT EXISTS (SELECT * FROM MyTable WHERE MyNumber = N) ) WHERE PrimaryKey = 2
CREATE STORED PROCEDURE CheckPassword @username VARCHAR(20), @password varchar(20) AS BEGIN SET NOCOUNT ON IF EXISTS(SELECT * FROM usertable WHERE username = @username AND password = @password) SELECT 'true' AS UserExists ELSE SELECT 'false' AS UserExists END
SELECT phonenumber, dataplan AS currentplan, SUM(datamb) AS value_sum FROM maindata GROUP BY phonenumber, dataplan;
Dim db As DAO.Database Dim strInsert As String Set db = CurrentDb strInsert = "INSERT INTO [table1]([field 1], [field 2])" & vbCrLf & _ "VALUES ('value 1', 'value 2')" db.Execute strInsert, dbFailOnError TempVars.Add "itemNum", db.OpenRecordset("SELECT @@identity")(0).Value MsgBox "TempVars!itemNum: " & TempVars!itemNum
SELECT *, ROW_NUMBER() OVER (ORDER BY somefield) rownum FROM table;
select ut.* from URITable ut where @MYURL like ut.URIPattern;
FROM Objects o LEFT OUTER JOIN Attributes aa ON (o.Id = aa.ObjectId) and (aa.AttributeTypeId = 1)
SELECT p.* FROM players p INNER JOIN (SELECT age, Max(score) as mScore FROM players GROUP BY age) AS mp ON p.age = mp.age AND p.score = mp.mscore
select t1.*, t2.* from table1 t1 cross apply (select top 1 t2.* from table2 t2 order by distance(t1, t2) -- put your appropriate function here ) t2;
NODE id NODE_POST id pk fk node(id) title body NODE_COMMENT id pk fk node(id) body post_id fk node_post(id) parent_comment_id fk node_comment(id)
SELECT a.stagename, a.realname FROM Actor a LEFT JOIN ActedIn b ON a.stagename = b.stagename LEFT JOIN Movie c ON b.title = c.title AND a.year = b.year AND c.earnings >= c.budget WHERE c.title IS NULL GROUP BY a.stagename, a.realname
with dv as ( delete from book_version where version_id = 2 returning book_id, version_id ) delete from book b using dv where b.book_id = dv.book_id and not exists ( select version_id from book_version where book_id = dv.book_id and version_id != dv.version_id )
select id, students, sub1, sub2, sub3, sub4, sub5, sub6, ((sub1 < 40) + (sub2 < 40) + (sub3 < 40) + (sub4 < 40) + (sub5 < 40) + (sub6 < 40) ) as FailedIn from table t;
select m.month, sum(case when c.regionid = 1 then 1 else 0 end) as north, sum(case when c.regionid = 2 then 1 else 0 end) as south, sum(case when c.regionid = 3 then 1 else 0 end) as east, sum(case when c.regionid = 4 then 1 else 0 end) as west from region r cross join month m left join customer c on c.regionid = r.regionid and c.monthid = m.monthid group by m.monthid, m.month
USE USERS; SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'MEMBERS'
select * from subscribers ls join emailopens eo on ls.subscriberid=eo.subscriberid left join subscribers ls2 on ls.emailaddress=ls2.emailaddress and ls2.listid = 1384 where ls.listid=1381 and opentime > 1458864000 and ls2.emailaddress is null
CASE WHEN KPI IN (1, 4) THEN ACTUAL WHEN KPI = 2 THEN KPI / MIN(CASE WHEN KPI = 1 AND KPI <> 0 THEN ACTUAL END) OVER (PARTITION BY DATE, DIVISION) WHEN KPI = 3 THEN KPI / MIN(CASE WHEN KPI = 3 AND KPI <> 0 THEN ACTUAL END) OVER (PARTITION BY DATE, DIVISION) END
Select Sum(Case When Z = 1 Then A Else 0 End) As B, Sum(Case When Z = 2 Then A Else 0 End) As C From TableName
alter table t add column domain varchar(255); update t set domain = substring_index(email, '@', -1); create index idx_t_domain on t(domain);
SELECT WEEK(created), SUM(case WHEN status = 1 then 1 else 0 end) Status1, SUM(case WHEN status = 2 then 1 else 0 end) Status2, SUM(case WHEN status = 3 then 1 else 0 end) Status3, SUM(case WHEN status = 4 then 1 else 0 end) Status4, SUM(case WHEN status = 5 then 1 else 0 end) Status5 FROM contacts GROUP BY WEEK(created), YEAR(created);
SELECT * FROM emp WHERE (CASE WHEN (sal+comm) > 1700 THEN 1 ELSE 0 END) = 1
select ID_DISH, sum(ID_INGREDIENT not in (2, 4)) stillMissing from x group by ID_DISH having stillMissing != count(*) order by stillMissing
Private Sub TotalMonthlyEnquiries_Click() DoCmd.OpenForm "frmQuery2", acFormDS Forms!frmQuery2.Filter = "Format([DateOfEnquiry], ""mmmm"") = '" & Me![Month] & "'" Forms!frmQuery2.FilterOn = True End Sub
SELECT ID, DATE, 'TEST_1' AS TEST, TEST_1 AS SCORE FROM TABLE UNION ALL SELECT ID, DATE, 'TEST_2' AS TEST, TEST_2 AS SCORE FROM TABLE UNION ALL SELECT ID, DATE, 'TEST_3' AS TEST, TEST_3 AS SCORE FROM TABLE
SELECT * FROM Customer LEFT JOIN Product ON Customer.CustID=Product.CustID WHERE Item = 'Toaster' AND Customer.CustID NOT IN ( Select CustID FROM Product Where Item = 'Breadbox' ) AND (SELECT COUNT(*) FROM Returns WHERE Customer.CustId = Returns.CustID) <= 1
SELECT * FROM X INNER JOIN ( SELECT ROW_NUMBER() OVER (ORDER BY SomeVal) as rn, * FROM Y ) AS Z ON X.ID = Z.X_ID WHERE Z.rn <= X.IntegerAmount)
INSERT INTO prod_users (user_id, first_name, last_name) SELECT ID, FIRST_NAME, LAST_NAME FROM test_users
Select ... date_sub($(Start_Date), interval 1 year)... , ...date_sub($(end_date ), interval 1 year)... from ... ;
EXPLAIN SELECT foo,bar from glurch WHERE baz > 1 ORDER BY foo;
with cte as ( update mytable set val1 = 'Foo' where val13=1234 and val12=12 returning * ) select * from cte where val14=(select max(val14) from mytable )
;WITH CTE AS ( SELECT *, RN = ROW_NUMBER() OVER(PARTITION BY Name ORDER BY [Date]) FROM (...Your query here...) T ) SELECT * FROM CTE WHERE RN > 1;
select * from ( select *, row_number() over( partition by user_id order by createdat desc, rating desc ) as rn from t1 where status = 1 and some_field not in (?, ?, ..., ?) and user_id in (1,2,3) ) s where rn <= 10 order by user_id, rn
from a in objcxt.tableA join b in objcxt.tableB on new { a.fld1, a.fld2 } equals new { b.fld1, b.fld2 } into b_join from b in b_join.DefaultIfEmpty()
select user_id sum(amount) total, sum(least(amount,0)) total_negs, sum(greatest(amount,0)) total_pos from my_table group by user_id
CREATE TABLE my_table ( col1 VARCHAR(10), col2 VARCHAR(20), expiration_date DATE, is_expired AS CASE WHEN expiration_date > GETDATE() THEN 1 ELSE 0 END );
USE master GO CREATE LOGIN SomeLogin --FROM WINDOWS? GRANT CONNECT SQL TO SomeLogin GO USE MYDB GO CREATE USER SomeUser FOR LOGIN SomeLogin GRANT CONNECT TO SomeUser GO CREATE ROLE SomeRole AUTHORIZATION [dbo] GO EXEC sp_addrolemember 'SomeRole', 'SomeUser' GO
select top 1 email_id from update_winnerslist where item_index = 10 order by bid_amount desc
$sql = " SELECT Title, 1 FROM table1 UNION SELECT Title, 2 FROM table2 UNION SELECT Title, 3 FROM table3";
String sql = "Select to_date('1970-01-01 ' || ? ,'YYYY-MM-DD HH24:MI:SS) as MY_TIME from dual"; Connection conn = null; //get Connection from somewhere PreparedStatement stmt = conn.prepareStatement(sql); stmt.setString(1, "16:31:59"); ResultSet rs = stmt.executeQuery(); rs.next(); //get to first element of result set; java.sql.Time myTime = rs.getTime(1);
select u.User_ID from users u left join reviews r on r.user_id = u.user_id where r.review_id is null
select * from TableName unpivot(v for xyz in([Atest],[Btest],[Ctest]))u pivot(max(v) for yyyymmdd in([20150525],[20150526],[20150527]))p
select cast(left(r, charindex('%', r) - 1) AS float) as minVal, cast(replace(right(r, charindex('-', r) - 1), '%', '') as float) AS maxVal from ( select '22.45% - 42.32%' as r ) as tableStub
CREATE TABLE Table ( col DATETIMEOFFSET DEFAULT GETUTCDATE() ) GO
IN (SELECT myField from #myTable)
update [Table1] SET [Vote] = Vote + 1 WHERE ID = 1
INSERT INTO table2 (id, AddressNumber, Address) SELECT id, AddressNumber, CASE AddressNumber WHEN 1 THEN Address1 WHEN 2 THEN Address2 WHEN 3 THEN Address3 WHEN 4 THEN Address4 END Address FROM table1 t CROSS JOIN ( SELECT 1 AddressNumber UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 ) i HAVING Address IS NOT NULL ORDER BY id, AddressNumber;
DECLARE @TBL TABLE( C1 INT, C2 INT ) INSERT INTO @TBL (C1, C2) EXEC sptemp SELECT *, 34 FROM @TBL
;WITH sums AS ( SELECT m1, m2, SUM(m1) + SUM(m2) as Total, SUM(m1) + SUM(m2) as Total1 FROM dbo.stud GROUP BY m1, m2 ) SELECT m1, m2, total, total1, total+total1 AS 'GrandTotal' FROM sums
SELECT t.A, t.B, t.C, number = ROW_NUMBER() OVER (ORDER BY t.A) FROM dbo.tableZ AS t ORDER BY t.A;
CREATE TABLE `member_images` ( `image_id` BIGINT(20) UNSIGNED NOT NULL auto_increment, `member_id` BIGINT(20) UNSIGNED NOT NULL DEFAULT 0, `image_path` VARCHAR(255) NOT NULL DEFAULT '', PRIMARY KEY(`image_id`), KEY (`member_id`) );
SELECT SUM(CASE WHEN type = 1 THEN amount ELSE 0 END) amount1, SUM(CASE WHEN type = 2 THEN amount ELSE 0 END) amount2 FROM MyTbl
CREATE TABLE #foo ( IDColumn int NOT NULL IDENTITY(1,1), PayLoad varchar(100) NOT NULL, TheRealKey AS CONCAT('SLN', RIGHT(CONCAT('00000', IDColumn), 6)) PERSISTED PRIMARY KEY ) GO INSERT #foo (PayLoad) VALUES ('Row 1'), ('Row 2') GO SELECT * FROM #foo f
SELECT (CASE WHEN COUNT(*) = 3 THEN 'ALL PRESENT' ELSE 'MISSING FIELD' END) FROM `engine4_user_fields_values` WHERE (field_id = 3 AND value = 'test7') OR (field_id = 4 AND value = 'test7') OR (field_id = 13 AND value = 'Hemraj')
UPDATE sh SET sh.Col2 = (SELECT TOP 1 sh_inner.Col2 FROM Temp.dbo.Sheet4 sh_inner WHERE sh_inner.Col2 IS NOT NULL ORDER BY ABS(sh.Col1 - sh_inner.Col1)) FROM Temp.dbo.Sheet4 sh WHERE sh.Col2 IS NULL
mysql> delimiter // mysql> CREATE TRIGGER upd_check BEFORE UPDATE ON account -> FOR EACH ROW -> BEGIN -> IF NEW.amount < 0 THEN -> SET NEW.amount = 0; -> ELSEIF NEW.amount > 100 THEN -> SET NEW.amount = 100; -> END IF; -> END;// mysql> delimiter;
CREATE PROC MyInsertM2M(@fieldname1 int, @fieldname2 varchar(20), @Key1 int, @Key2 int etc) AS BEGIN INSERT INTO MyMainTable(fieldname1, fieldname2...) VALUES(@fieldname1, @fieldname2...) INSERT INTO MyResolverTable(KeyField1, Keyfield2) VALUES (@Key1, Key2) END
SELECT (CASE WHEN a.column1 is NULL THEN 'Active' ELSE 'Inactive' END) as Status_Define_Resources, <<some columns>>, (CASE WHEN b.column1 is NULL THEN 'ACTIVE' ELSE 'INACTIVE' END) as STATUS_USER, <<some columns>>, c.LASTNAME||','||c.FIRSTNAME||','||c.MIDDLENAME as "Complete Name" FROM table1 a, table2 b, table3 c
select year, month, day, sum(loginCount) from user group by year, month, day
transform count(*) as CountOfReceipts select Month(x.[Receipt Date]) as Month from the_table x where Department = 'marketing' group by Month(x.[Receipt Date]) pivot x.Type;
WHERE DATE(MyDate) = '2013-07-08'
textBox1.DataBindings.Add(new System.Windows.Forms.Binding("Text", n.ADataSet, "Table.date", true, System.Windows.Forms.DataSourceUpdateMode.OnValidation, null, "yyyy-MM-dd"));
select * from A t where exists ( select 1 from A where id = t.id having count(distinct partid) > 1)
SELECT BatchID, MAX(CASE WHEN EntityChanged = 'ABC' THEN ChangeValue END) 'ABC', MAX(CASE WHEN EntityChanged = 'ABCD' THEN ChangeValue END) 'ABCD', MAX(CASE WHEN EntityChanged = 'Something' THEN ChangeValue END) 'Something', MAX(CASE WHEN EntityChanged = 'SomethingMore' THEN ChangeValue END) 'SomethingMore' FROM YourTable t GROUP BY BatchID
SELECT u.user_id, u.name, b.billing, s.stocks FROM user_details u LEFT JOIN billing_details b on b.user_id = u.user_id LEFT JOIN stock_details s on s.user_id = u.user_id
SELECT t1.id, t1.Game, t1.Points, SUM(t2.Points) [Points (Add)] FROM yourTable t1 JOIN yourTable t2 ON t1.Game = t2.Game AND t1.id >= t2.id GROUP BY t1.id, t1.Game, t1.Points
select convert(varchar(8), getdate(),120) + convert(varchar(3),datename(month,getdate()))
select A, B, C from (select t.*, count(*) over (partition by A, B) as cnt from t ) t where cnt > 1;
insert into table (col1,col2,col3,col4,col5) select null,col2,col3,col4,col5 from table where col2 = 'anyvalue' and more conditions... ;
db.Execute "SQL DB", "INSERT INTO ABPCahirMIS.dbo.TESTDB (TEST) VALUES(1)"
SELECT mshiptype_name, timeslot_name, timetable_name FROM mshiptypes ST INNER JOIN paymentoption PO ON ST.mshiptype_id = PO.mshiptype_id INNER JOIN membertopaymentoption MPO ON PO.paymopt_Id = MPO.paymopt_Id INNER JOIN timetables TT ON ST.timetable_id = TT.timetable_id INNER JOIN timeslottotimetables TTT ON TT.timetable_id = TTT.timetable_id INNER JOIN timeslotss TS ON TTT.timeslot_id = TS.timeslot_id WHERE MPO.member_id = <members_id>
select * from ( select a.* , rank() over ( partition by fname, lname, accountid order by creation_date desc , update_date desc ) as rnk from my_table a ) where rnk = 1
SELECT ImpFile, DATEADD(hh, DATEDIFF(hh, 0, ImpDate), 0) FROM nol_artikula_izmaina
select substring_index(group_concat(bill_id order by date, bill_id desc desc), ',', 1) as bill_id, max(date) as date, substring_idnex(group-concat(bill_amount order by date, bill_id desc), ',', 1) as bill_amount from bills group by year(date), month(date)
SELECT rec.id, rec.username FROM users send JOIN messages ON (messages.send_id = send.id) JOIN users rec ON (messages.receive_id = rec.id) WHERE send.id = SOMEUSERID
SELECT x.f1,Count(x.f1) FROM (SELECT p1 As F1 FROM table UNION ALL SELECT p2 As F1 FROM table UNION ALL SELECT p3 As F1 FROM table) x GROUP BY x.f1
SELECT items, MAX(weight) FROM mytable GROUP BY items ORDER BY MAX(weight) DESC
update players, teams set players.team = teams.id where players.team = teams.name
UPDATE test SET name = INSERT(name, LENGTH(name), 0, '_');
^(\S+\s+){5}151
SELECT poverty FROM (SELECT COUNT(language) as langnum, country, RANK() OVER (ORDER BY COUNT(language) DESC) as ranking FROM "Language" GROUP BY country ) conto JOIN "Economy" AS E ON E.country=conto.country WHERE conto.ranking = 1 ORDER BY conto.langnum DESC;
select to_char(to_date(TMS,'YYYY-MM-DD')+3,'YYYY-MM-DD') from city;
Select Case When [Value] < 0 Then 0 Else [Value] End From Example
select date_format(begin_datum, '%e-%b-%y')
select count(*) as total_users , date(user_registered) as reg_date from wp_users group by reg_date having total_users > 0
select itemID, itemTitle, deleted, userID FROM( SELECT i.id_itemID, i.itemTitle, M.deleted, M.userID FROM MyList M right OUTER JOIN Items I ON I.itemID= M.itemID ) as MyTableItems where itemID = 3 or itemID is null
select date_start, date_finish from some group by date_start, date_finish order by max(id) desc
select 1 from tblMessage where '210' = STR(210,3)
select * from ( SELECT *, LAG(Group, 1,0) OVER (ORDER BY BeginDate) AS PreviousGroup FROM table ) where PreviousGroup is null or PreviousGroup <> group
SELECT username, value1, uploaded_date FROM (SELECT username, value1, uploaded_date, RANK() OVER (PARTITION BY username ORDER BY value1 ASC) AS rk FROM test) t WHERE rk = 1
DECLARE FUNCTION your_fnc() RETURN ... AS ... BEGIN SELECT your_fnc() FROM DUAL; END;
SELECT DISTINCT a.* FROM Vehicle AS a INNER JOIN Vehicle AS b ON a.License = b.License WHERE a.VIN != b.VIN AND a.Region != b.Region AND (a.Region = 1 OR b.Region = 1)
SELECT @username = user FROM MyTable WHERE id = @id;
SELECT dc.constraint_name, dc.constraint_type, dc.owner, dc.table_name FROM dba_cons_columns dcc JOIN dba_constraints dc ON (dcc.constraint_name = dc.r_constraint_name and dc.owner = dcc.owner) WHERE dcc.owner = 'OWNER_NAME' and dcc.table_name = 'TABLE_NAME';
select t1.id from t1 where t1.id not in (select t2.id from t2)
^(?!.*going to.*$)
select columna from your_table where columnb = 1 intersect select columna from your_table where columnb = 3
SELECT Id, SUM( CASE WHEN Item1 is NULL THEN 0 ELSE 1 END + CASE WHEN Item2 is NULL THEN 0 ELSE 1 END + CASE WHEN Item3 is NULL THEN 0 ELSE 1 END + CASE WHEN Item4 is NULL THEN 0 ELSE 1 END + CASE WHEN Item5 is NULL THEN 0 ELSE 1 END ) 'Count' FROM tableName GROUP BY Id
select * from employee where level <= 5 connect by prior id = .manager start with username = 'abc'
CREATE PROCEDURE [dbo].[viewSimilarRecords] @recordType varchar(25), @recordSource varchar(25) AS SELECT * FROM myTableName WHERE (recordtype =@recordType OR @recordType IS NULL) AND --<<change to OR?? (recordsource=@recordSource OR @recordSource IS NULL) --^^^^^^^^^^^^^^^^^^^^^^^^ GO
select t.A from mytable as t group by t.A having min(t.B) = max(t.B);
SELECT * FROM table_name WHERE Name LIKE '%query%' OR Tel.No LIKE '%query%' OR City LIKE '%query%' OR State LIKE '%query%' OR Address LIKE '%query%'
with testData as ( select 'Read Only, Write, read only, Admin' test from dual union all select 'Read, Write, read only, Admin' test from dual union all select 'Admin, Read Only (no), read only(see mgr), Admin' test from dual ) select * from testData where lower(test)||',' like '%read only,%';
select power(max(prod_year) - min(prod_year), 2) from mediaitems mi;
SELECT bar_id, bar_name, town_name, advert_text FROM bar b inner join towns t on t.town_id = b.town_id_fk left outer join baradverts ba on t.town_id = ba.town_id_fk AND b.bar_id = ba.bar_id_fk
SELECT COUNT(*) as Count, sum(sch.HomeTeamID = 34) AS Hawaii_home_count ...
Select username, select min(date) over (partition by username) as firstDate, date, row_number() over (partition by username order by date) as date_sequence from data as outer;
SELECT AVG(Value) FROM ( SELECT TOP (10) Value FROM YourTable WHERE ... ORDER BY DateColumn DESC ) AS s ;
update catalog_product_entity_text set value = "the product's name test hah test." where attribute_id = 66 and entity_id IN (select product_id from catalog_category_product where category_id = 40);
Example: SELECT last_day('2003-03-15 01:22:33') FROM src LIMIT 1; 2003-03-31 00:00:00
select ID, Name from sometable a group by id, name having count(id) > 2 or max(cast(a.[appointment date] as date)) > cast(GETDATE() - 5 as date)
SELECT [group_ID] FROM Table1 T WHERE [tax_Id] in (2,3,4) And not exists ( select 1 from Table1 E Where T.group_id = E.group_id And tax_id not in (2,3,4) ) Group by group_id Having count(distinct tax_id) =3
SELECT * FROM products WHERE date_available > CURDATE()
declare @money_sum decimal declare @days_count int set @money_sum = SELECT SUM(MONEY) FROM table_name set @days_count = SELECT COUNT(DISTINCT date) FROM table_name return @money_sum/ @days_count
SELECT * FROM TableA WHERE DATEDIFF(DAY, ExpirationDate, GETDATE()) = 7 OR DATEDIFF(DAY, ExpirationDate, GETDATE()) = 24
select _id, busnum, case cast (strftime('%w', servdate) as integer) when 0 then 'Sunday' when 1 then 'Monday' when 2 then 'Tuesday' when 3 then 'Wednesday' when 4 then 'Thursday' when 5 then 'Friday' else 'Saturday' end as servdayofweek from tb1 where ...
update table1 t1 join table2 t2 on t1.f2 = f2.e2 set f2 = 'foo', f3 = 'bar';
WHERE (Sub = @SubscriberState OR (@SubscriberState IS NULL AND Sub IS NULL))
... SET NEW.attendance_percent = (NEW.class_attended/NEW.class_total) ...
WITH LastDays (calc_date) AS (SELECT DATEADD(DAY, DATEDIFF(DAY, 0, CURRENT_TIMESTAMP) - 6, 0) UNION ALL SELECT DATEADD(DAY, 1, calc_date) FROM LastDays WHERE DATEADD(DAY, 1, calc_date) < CURRENT_TIMESTAMP) SELECT ... FROM LastDays l LEFT JOIN (YourQuery) t ON (l.cal_date = t.YourDateColumn);
select ROW_NUMBER() over (order by (select 0)) as ID,count(*) as count,kind1 as new1,kind2 as new2,kind3 as new3 from yourtable group by kind1,kind2,kind3
SELECT date,SUM(rainmm) FROM weather WHERE MOD(minute(time),60)=0 GROUP BY date ORDER BY date;
SELECT YourTable.PK, YourTable.[Date], YourTable.[Status], YourTable.Serial FROM ( SELECT Serial, MAX([Date]) AS [MaxDate] FROM YourTable GROUP BY Serial ) DerivedMaxDateBySerial LEFT OUTER JOIN YourTable ON DerivedMaxDateBySerial.Serial = YourTable.Serial AND DerivedMaxDateBySerial.[MaxDate] = YourTable.[Date] WHERE YourTable.[Status] != 8
SELECT * FROM sys.dm_exec_query_stats AS qs CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) AS st where st.text = 'Your Query Here'
CREATE PROCEDURE update_value( p_value IN varchar2 ) AS l_month_num integer := to_number( to_char( sysdate, 'mm' )) ; BEGIN IF( l_month_num = 1 ) THEN UPDATE report SET jan = p_value; ELSIF( l_month_num = 2 ) THEN UPDATE report SET feb = p_alue; ELSIF ... END IF; END;
WITH cte AS ( SELECT * ,[dec] = COUNT(CASE WHEN STATUS = 'DECLINE' THEN 1 END) OVER (PARTITION BY ID) ,[app] = COUNT(CASE WHEN STATUS = 'APPROVE' THEN 1 END) OVER (PARTITION BY ID) FROM #Audit ) SELECT ID, STATUS, [TIME] FROM cte WHERE NOT ([dec] >= 1 AND [app] >= 1 AND [STATUS] = 'DECLINE');
DECLARE @event_type varchar(42) IF EXISTS(SELECT * FROM inserted) IF EXISTS(SELECT * FROM deleted) SELECT @event_type = 'update' ELSE SELECT @event_type = 'insert' ELSE IF EXISTS(SELECT * FROM deleted) SELECT @event_type = 'delete' ELSE --no rows affected - cannot determine event SELECT @event_type = 'unknown'
time dbaccess <dbname> file.sql
class TestExecQueue { static mapping = { scenario column:'test_scenario_id' } TestScenario scenario }
<ul> <% dim irecordcount irecordcount=1 %> <li> <% do until rs.eof %> <img src="<%=rs("big_image")%>" /> <!--Im only displaying 30 images and here I write the </li><li> if it an even row, and also I dont write the last </li><li>--> <%if irecordcount mod 2=0 and irecordcount <>30 then%> </li> <li> <% end if irecordcount=irecordcount+1 rs.movenext loop%> </li> </ul>
UPDATE FACTBUDGET SET BUDGETAMOUNT = @JAN WHERE BUDGETDATEID > 20141231 AND BUDGETDATEID < 20150201 AND MISCID = 0 ;
SELECT eteam.teamname 'Team Name', COUNT(goal.teamid) 'Total Goals' FROM eteam JOIN goal ON eteam.id=goal.teamid GROUP BY goal.teamid ORDER BY eteam.teamname
SELECT name, file FROM users,userfiles, files WHERE users.id = userfiles.usrid AND usersfiles.fileid = files.id;
select courseid as cid, if ( select count(*) from instructor where courseid = cid ) > 2 then 'Committee' else list(name order by name) endif as profs from instructor group by courseid order by cid
SELECT MyTable.team AS team, MyTable.rel AS rel, AVG(iif(Testable,1,0)) AS result FROM MyTable WHERE MyTable.team IN (1,2) AND MyTable.rel IN (1,2,3) GROUP BY MyTable.rel, MyTable.team ORDER BY MyTable.team, MyTable.rel
select * from ( SELECT DISTINCT name, age FROM donates, persons WHERE name = donor AND name IN (SELECT receiver FROM donates) ORDER BY age DESC ) where ROWNUM <= 1;
select case when isnull(price, 0) <= 0 then 0 else 1 end as validprice
with t as ( select 'L10 1TY' as postcode from dual union all select 'WF2 5TG' from dual union all select 'W7 5RR' from dual ) select postcode, regexp_substr(postcode, '^[[:alpha:]]+', 1, 1) as region from t; POSTCODE REGION -------- ------- L10 1TY L WF2 5TG WF W7 5RR W
select case when RNum=1 then UserName else '' end UserName, case when RNum=1 then Fee else '' end Fee, ReferenceName, Billed from( select *, ROW_NUMBER() over (partition by UserName order by UserName) RNum from tbl )x
HASHBYTES('SHA1', ISNULL(CONVERT(varchar(20),[EmployeeID]),'') + '|' + ISNULL(CONVERT(varchar(20),[ClientID]),''))
SELECT LAG(TimeEnd, 1) OVER (ORDER BY PhaseID) TimeStart
SELECT o.`name` , COUNT(o.id) `count` FROM computers c LEFT JOIN operatingsystems o ON (c.operatingSystemId =o.id) GROUP BY o.id
NVL(NULLIF( ALIMENTATION_COD_ACT_MCH(ta.CA_DDE_TYP_DDE,tb.COD_SECVTE,tb.NUM_FOU1,ta.CA_COD_ENSCIAL), 'N'), '')
decode(count(distinct prl.suggested_vendor_name) over (partition by prh.requisition_header_id),1,prl.suggested_vendor_name,0,null,'MULTIPLE') vendor
SELECT e.name AS name, m.name AS manager_name FROM emp e LEFT JOIN emp m ON e.mgr_id = m.emp_id
SELECT [DocumentNo], ConcatRelated("[Description]","[TableName]","[DocumentNo] = " & [DocumentNo]) AS [Description] FROM [TableName];
select 'quote here: ''' , 'double quote'from dual union all select q'@quote here: ''@', 'q syntax, double quote means two quotes' from dual union all select q'@quote here: '@', 'q syntax, no need fou double quotes' from dual union all select 'two quotes here: ''''', 'same thing to have two quotes' from dual union all select q'@two quotes here: ''@', 'and two quotes with q syntax ' from dual union all select q'@this is the delimiter char: @.@', 'the delimiter character can be used wherever in the string' from dual union all select q'@@delimiter is in the beginning and in the end@@', 'you have to double the delimiter if you want it in the end or beginning' from dual
select d.name, sum(s.amount) from sales s join department_employees de on de.worker_id = s.worker_id join departments d on d.id = de.department_id group by d.name
select Item , ItemName , Quantity from yourtable A cross join (select num from numbers) b where a.Quantity <= b.num
SELECT fld_name FROM (tbl_product_colors JOIN tbl_product ON tbl_product_colors.fk_prod_id = tbl_product.fld_id) JOIN tbl_colors ON tbl_product_colors.fk_color_id = tbl_colors.fld_id
update yourtable set col = substring(col, 1, charindex(',', col)-1) where charindex(',', col) > 0 -- only update the rows with a comma
;WITH CTE AS ( SELECT docid, writing, submissionDate, ROW_NUMBER() OVER (ORDER BY submissionDate) AS position FROM My_Table ) SELECT docid, writing, submissionDate, position FROM CTE WHERE docid = 34
SELECT col, value FROM (SELECT CAST(col1 AS VARCHAR) AS col1, CAST(col2 AS VARCHAR) AS col2, CAST(col3 AS VARCHAR) AS col3, CAST(col4 AS VARCHAR) AS col4 FROM Table1) p UNPIVOT (value FOR col IN (col1, col2, col3, col4) ) AS unpvt;
SELECT SUBSTR (355560, 2, SUBSTR (355560, 1, 1)) FROM DUAL;
select max(case when csv not in(select orderid from mg_orders) then csv end) as csv1, max(case when csv not in(select orderid from lab_orders) then csv end) as csv2, max(case when csv not in(select orderid from pcg_pharmacogenetics) then csv end) as csv3, max(case when csv not in(select orderid from well_wellness) then csv end) as csv4 from csvdata
create view newest123 as ( -- this gets the newest review for member_id 123 select * from reviews where member_id = 123 order by date desc limit 1 ) select * from ( select * from newest123 union select * -- all the reviews that aren't for member_id 123 from reviews where member_id != 123) filtered order by date desc limit 10 -- sort 'em and take the top 10
select top (1) with ties C.CompanyName, Year(O.OrderDate) as Yr, sum(OD.Quantity) as Total from Orders as O join Customers as C on C.CustomerID = O.CustomerID join "Order Details" as OD on OD.OrderID = O.OrderID group by C.CompanyName, Year(O.OrderDate) order by row_number() over ( partition by Year(O.OrderDate) order by sum(OD.Quantity) desc );
;WITH cte AS ( SELECT (t1.Amount / t1.Tax * t1.Extra) AS [CalculatedValue], t1.Option1, t1.Option2, t1.Option3 FROM t1 ) SELECT cte.[CalculatedValue] + Option1 AS [Value1], cte.[CalculatedValue] + Option2 AS [Value2], cte.[CalculatedValue] + Option3 AS [Value3],
case when cast(isnull(f.routingnum, 0) as bigint) <> cast(isnull(replace(t.routingnum, '''', ''), 0) as bigint) then 'do not match' else 'match' end
SELECT * FROM tableName where Date >= DATE_SUB(NOW(),INTERVAL 3 HOUR);
SELECT a.gid, a.the_geom FROM pointsTable a LEFT JOIN river_100_1k b ON ST_Intersects(a.the_geom, b.the_geom) LEFT JOIN river_200_1k c ON NOT ST_Intersects(a.the_geom, c.the_geom) -- Not Intersects LEFT JOIN river_1000_1k d ON NOT ST_Intersects(a.the_geom, d.the_geom) -- Not Intersects WHERE AND c.gid IS NULL AND d.gid IS NULL AND b.gid=2 AND c.gid=2 AND d.gid=2 ;
concat(concat(INITCAP(lastname), INITCAP (firstname)), '~~~~~')
SELECT a.category, CASE WHEN a.salesVolumes < b.salesVolumes THEN 'TRUE' ELSE 'FALSE' END AS salesIncreasing FROM MyTable a INNER JOIN MyTable b ON a.category = b.category WHERE a.year = 2002 AND b.year = 2003
and <condition>
SELECT A, B FROM MyTable WHERE A IN ( SELECT A FROM MyTable GROUP BY A HAVING COUNT(*)>1 )
SELECT table1.name, table2.name2 , table3.name3 from table3 left join table2 on table3.table2Id = table2.table2Id left join table1 on table2.table1Id = table1.table1Id
SELECT * FROM tableOne WHERE (SELECT COUNT(*) FROM tableTwo WHERE tableTwo.data_id = tableOne.data_id) = 0 ORDER BY RAND() LIMIT 1
UPDATE table SET col1 = CASE WHEN col1 ='--' THEN col2 ELSE col1 END, col2 = CASE WHEN col2='--' THEN col1 ELSE col2 END WHERE col2='--' OR col1 ='--';
SELECT 1 FROM DUAL WHERE REGEXP_LIKE('23.9', '^\d+(\.\d+)?$', '')
ORDER BY d1, d2
SELECT id, tbl.dateof dateof FROM tbl INNER JOIN (SELECT fk, MAX(dateof) dateof FROM tbl GROUP BY fk) temp ON tbl.fk = temp.fk AND tbl.dateof = temp.dateof
SELECT a.number, max(c.quantity) as qty, max(c.retail_price) as price FROM catalog.product `a` JOIN catalog.product_variation `b` ON a.id = b.product_id JOIN catalog.price_regular `c` ON b.id = c.product_variation_id WHERE c.retail_price BETWEEN 5 AND 6 AND a.status_id = 1 GROUP BY a.number;
SELECT t.* FROM t ORDER BY (CASE WHEN A < B THEN A ELSE B END), (CASE WHEN A < B THEN B ELSE A END), A;
SET PAGESIZE 50000 SET MARKUP HTML ON TABLE "class=detail cellspacing=0" ENTMAP OFF column colA heading "<p style='width:800px'>800SetColA</p>" format a40 column colB heading "<p style='width:10px'>10SetColB</p>" format a40 spool test.html select level cola, level-5 colb from dual connect by level <10 ; spool off
INSERT INTO T1 (c1, c_additional) -- here SELECT C1, 'needed_value' -- just select a constant here FROM dblink( 'hostaddr=127.0.0.1 port=5432 dbname=DB2 user=postgres password=postgres', 'SELECT * FROM T2') AS T2_row(C1 integer)
drop procedure if exists sp_test; delimiter # create procedure sp_test( in p_facility_id int unsigned, -- p prefix = parameter in p_start_date date, in p_end_date date ) begin declare v_facility_name varchar(255) default null; -- v prefix = variable select f.facility_name into v_facility_name from facilities f where f.facility_id = p_facility_id limit 1; select f.*, upper(v_facility_name) as facility_name from facilities f; end# delimiter ; call sp_test (1, curdate() - interval 1 month, curdate());
CREATE TRIGGER trig_Insert_Stock ON [Product] FOR INSERT AS Begin Insert into Stock (ProductId, Stock) Select Distinct i.ProductId, 0 from Inserted i End
sqlite3 test.sqlite2 vacuum
SELECT t1.TimeStamp, t2.State, t1.OtherData FROM Table1 t1 inner join Table2 t2 on t1.SpecialNumber = t2.SpecialNumber inner join (SELECT MAX(time stamp) maxts, state FROM table1 inner join table2 ON table1.specialnumber = table2.specialnumber GROUP BY state) t3 on t2.State = t3.State and t1.TimeStamp = t3.maxts
UPDATE messages SET status=10 WHERE ID in (SELECT TOP (10) Id FROM Table WHERE status=0 ORDER BY priority DESC);
store_id zip 1 11111 1 12222 2 12222 2 22222
select col1,col2 from table union all select col1,col2 from some_other_table union all select col1,col2 from yet_another_table;
create table closure(parent int, child int); insert into closure values(1, 10), (10, 100); delete from closure where exists( select * from closure p, closure c where p.parent = closure.parent and c.child = closure.child and p.child=10 and c.parent=1);
select BusinessUnit, CustomerID, ProductFamily , Revenue , (table1.Cost * table2.Revenue ) / (SUM(Revenue) over(partition by table1.BusinessUnit, table1.ProductFamily )) AS Allocated_Cost from table1 INNER JOIN table2 ON ( table1.BusinessUnit = table2.BusinessUnit AND table1.ProductFamily = table2.ProductFamily ) ;
create temporary table tmp1 Select flatpos from archdetails where version='1.3' AND compname IN ( select distinct compname from svn3 where revno='r270294' ) create temporary table tmp2 select count(distinct compname) as c, sum(CASE WHEN inFlat=1 THEN 1 ELSE 0 END) as s, min(flatLoopIndex) as m from archdetails where version='1.3' AND compname IN ( select distinct compname from svn3 where revno='r270294' ) select * from tmp1 select tmp2.c, tmp2.s, tmp2.m from tmp1, tmp2
Dim str As String = "Data Source=DESKTOP; uid=" & ID & "; pwd=" & PASS & ";database=DB"
SELECT o.*, max(e.status) AS org_status FROM organization o JOIN event e ON e.organiszation_id = o.organization_id GROUP BY o.organization_id ORDER BY org_status DESC, o.rank DESC, o.name;
;with cte (rn, id, inst_id, person_name, email) as ( select row_number() over (partition by inst_id order by id) rn, * from person ) update f set person1 = cte1.person_name, email1 = cte1.email, person2 = cte2.person_name, email2 = cte2.email from firm f left join cte cte1 on f.inst_id = cte1.inst_id and cte1.rn = 1 left join cte cte2 on f.inst_id = cte2.inst_id and cte2.rn = 2
SELECT ft.thread_id, ft.thread_title, fp.*, pmin.postcount FROM forums_threads AS ft JOIN ( SELECT post_thread_id, MAX(post_date), COUNT(post_id) AS postcount FROM forums_posts GROUP BY post_thread_id ) AS pmin ON ft.thread_id=pmin.post_thread_id JOIN forums_posts AS fp ON fp.post_thread_id=pmin.post_thread_id AND fp.post_date = pmin.post_date WHERE ft.thread_forum_id=84 ORDER BY ft.thread_date DESC
select id,b,c from tablename inner join ( select id, count(A) as CountDuplicates from TableName as base group by A,id having (count(A) > 1) )d on tablename.id= d.id
select * from table_2 where not exists (select 1 from table_1 where table_1.emp_id = table_2.emp_id);
select `Caller_id` from `CallTable` group by `Caller_id` having sum(`Is_picked` = 'yes') = 0
SELECT a.*,b.type FROM article a INNER JOIN (SELECT id,'news' AS type FROM news UNION SELECT id,'courses' AS type FROM courses) b ON a.id=b.id;
SELECT base.packageID, servers.server, (SELECT count(*) FROM base AS b1 WHERE b1.packageId = base.packageId AND b1.server = servers.server) deployed FROM base, servers WHERE base.server = 'baseline' AND deployed = 0;
MERGE table2 AS target USING table1 AS source ON (target.email = source.email) WHEN NOT MATCHED BY TARGET THEN INSERT ( email, country, Phone ) VALUES ( source.email, source.country, source.phone );
SELECT ct.*, t.* FROM exp_channel_titles as ct LEFT JOIN transactions as t on (ct.entry_id = t.restaurant_id) WHERE t.cardid > 0 and t.restaurant_id=0 order by t.created DESC
SELECT COUNT(id_sale) AS total_transactions,sold_to, CAST(strftime('%m', sale_date) AS INTEGER) month, CAST(strftime('%Y', sale_date) AS INTEGER) year, sale_date FROM sales WHERE month=5
update YourTable set YourCol = '00' + STUFF( YourCol,6,0,'00') WHERE YourCol LIKE '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]'
create or replace trigger pick_a_name before insert or update on mytable for each row begin :new.full_name := :new.firstName ||' '|| :new.lastName; end pick_a_name;
with rank_query as ( SELECT section, name, score, RANK() OVER (PARTITION BY section ORDER BY score) score_rank FROM myTable ) select * from rank_query where score_rank <= 10;
SELECT sno, iif(Len([Code])<=5,[Code],iif(ASCII([Code])>57,Right([Code],Len([Code])-1),Mid([Code],3))) AS Codeno FROM table1
SELECT * FROM my_table WHERE createdate BETWEEN DATE_SUB(NOW(), INTERVAL 1 week) AND NOW(); SELECT * FROM my_table WHERE createdate BETWEEN DATE_SUB(NOW(), INTERVAL 1 month) AND NOW() ; SELECT * FROM my_table WHERE createdate BETWEEN DATE_SUB(NOW(), INTERVAL 1 year) AND NOW();
select distinct a.a_id, b.b_id, a.a_value, b.b_value from b full join a on b.b_id = a.a_id and a.a_cnt_id = 849 and b.b_cnt_id = 848;
CASE WHEN BP_Systolic >= '160' OR BP_Diastolic >= '100' THEN 'Stage 2 Hypertension' WHEN BP_Systolic BETWEEN '140' AND '159' OR BP_Diastolic BETWEEN '90' AND '99' THEN 'Stage 1 Hypertension' WHEN BP_Systolic BETWEEN '120' AND '139' OR BP_Diastolic BETWEEN '80' AND '89' THEN 'Prehypertension' WHEN BP_Systolic < '120' AND BP_Diastolic < '80' THEN 'Normal' END AS BP_Category
-- UserType table -- UserTypeID INT -- PK -- Type NVARCHAR(50)
if (rs.next()) { String option = rs.getString("options"); jAnswerA.setText(option); }; if (rs.next()) { String optionB = rs.getString("options"); jAnswerB.setText(optionB); };
USE [new_db_name] GO IF EXISTS (SELECT * FROM sys.database_principals WHERE name = N'login_name') DROP USER [login_name] GO CREATE USER [login_name] FOR LOGIN [login_name] GO EXEC sp_addrolemember N'My_StoredProcs', N'login_name' GO EXEC sp_addrolemember N'db_datareader', N'login_name' GO EXEC sp_addrolemember N'db_datawriter', N'login_name' GO
SELECT id, Status, DeliveryDate, PromiseDate FROM CustomerOrderT WHERE Status > 2 and Status <7 ORDER BY IIF(DeliveryDate > PromiseDate, PromiseDate, DeliveryDate);
declare @date datetime set @date='07/11/2013 11:22:07' SELECT cast(convert(varchar(20),substring(convert(nvarchar(20),@date, 9), 0, 21) + ' ' + substring(convert(nvarchar(30), @date, 9), 25, 2),105) as datetime)
select PersonID from Person p inner join (select value as AName from dbo.fnSplit('David;John;Kevin', ';')) Names on p.Name LIKE '%' + Names.Value + '%'
SELECT table_A.*, table_B.*, table_C.*, table_D.* FROM table_A INNER JOIN table_B ON table_A.my_field = table_B.my_field LEFT JOIN table_C ON table_B.my_field = table_C.my_field and table_B.complete ='1' LEFT JOIN table_D ON table_C.my_field = table_D.my_field
SELECT id, name, time FROM ( SELECT book_id id, book_name name, book_time time FROM books UNION SELECT movie_id id, movie_name name, movie_time time FROM movies ) booksandmovies ORDER BY time DESC;
CREATE UNIQUE INDEX unique_cd0_cd1 ON VARIANTCOMBINATIONRULE (least(VARRECID0, VARRECID1), greatest(VARRECID0, VARRECID1));
SELECT case when conditional = 1 then 'MAIN' when conditional <> 1 and conditional < 2 then UPPER(Title) else Title end as Title , COUNT(Title) AS NumberOfTitles FROM Table GROUP BY case when conditional = 1 then 'MAIN' when conditional <> 1 and conditional < 2 then UPPER(Title) else Title end ORDER BY case when conditional = 1 then 'MAIN' when conditional <> 1 and conditional < 2 then UPPER(Title) else Title end
SELECT GROUPS.*, USERS.* FROM GROUPS LEFT OUTER JOIN USERS ON GROUPS.ID = USERS.GROUPID AND USERS.ISDELETED = 'F'
select s.DateAdded, s.Souring, s.Inake, s.placement, s.PreviousSunday, CONCAT(s.DateAdded, ' => ', e.DateEnd) as DateStartEnd from table_name as s inner join (select MAX(DateAdded) as DateEnd, PreviousSunday from table_name group by PreviousSunday) as e on s.PreviousSunday = e.PreviousSunday group by e.DateEnd order by s.DateAdded
WHERE posteddate BETWEEN DATEADD(dd, -30, GETDATE()) AND GETDATE()
create table mytable( col_1 int ,col_2 varchar(100) ,col_3 date ,primary key(col_1) ) create table mytable_deleted( delete_id int not null auto_increment ,delete_dtm datetime not null -- All of the original columns ,col_1 int ,col_2 varchar(100) ,col_3 date ,index(col_1) ,primary key(delete_id) )
SELECT "from", "to", timestamp FROM ( SELECT "from", "to", timestamp, LAG(("from", "to")) OVER (ORDER BY timestamp) AS prev FROM Table1 ) T1 WHERE ("from", "to") IS DISTINCT FROM prev
SELECT Item FROM ( (SELECT Item, Count(*) Cnt FROM (SELECT Item FROM Received1 UNION ALL SELECT Item FROM Received2 UNION ALL SELECT Item FROM Received3 UNION ALL SELECT Item FROM Recovered1 UNION ALL SELECT Item FROM Recovered2 UNION ALL SELECT Item FROM Recovered3)A GROUP BY Item)B WHERE Cnt%2 = 0 --checks for multiples of 2
SELECT CASE WHEN Count(Account)=0 THEN (Sum(Amount))/(Count(Account)) END AS New_field FROM TableName
SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME='TABLE_NAME'
WITH sorted AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY substring(id,1,3) ORDER BY val, id) AS sequence_id FROM yourTable ) SELECT * FROM sorted WHERE sequence_id = 1
Select COUNT(*),SUBSTRING(column_name,1,2) FROM table_name GROUP BY SUBSTRING(column_name,1,2)
SELECT id, first, last, category FROM names WHERE ID NOT IN (SELECT id FROM names where category = 'Tutor')
SELECT ID, Description FROM( SELECT ID+1-ROW_NUMBER() OVER (ORDER BY ID) Col, * FROM YourTable WHERE ID>=83633 )x WHERE Col=83633
SELECT e1.firstName AS violatorFirstName, e1.lastName AS violatorLastName, e2.firstName AS supervisorFirstName, e2.lastName AS supervisorLastName FROM violator v LEFT JOIN employee e1 ON v.violatorId = e1.id LEFT JOIN employee e2 ON v. supervisorId = e2.id
;WITH cte As ( SELECT array_id, [date], comment, ROW_NUMBER() OVER (PARTITION BY array_id ORDER BY [date] DESC) AS RN FROM my_table WHERE master_frame = 1 ) SELECT array_id, [date], comment FROM cte WHERE RN=1;
$myPosts = $wpdb->get_row("SELECT * FROM wp_posts"); //Add column if not present. if(!isset($myPosts->my_custom_posts_column)){ $wpdb->query("ALTER TABLE wp_posts ADD my_custom_posts_column INT(1)"); }
n_cst_String lnv_String ltr_NewConnect.DBMS = SQLCA.DBMS ltr_NewConnect.AutoCommit = SQLCA.AutoCommit ltr_NewConnect.DBParm = lnv_String.of_GlobalReplace (SQLCA.DBParm, "mytestdb", "myotherdb")
BEGIN DECLARE @mth int SET @mth = DATEPART(MONTH, GETDATE()) IF @mth BETWEEN '1' AND '3' print '1' -- SELECT-Statement ELSE IF @mth BETWEEN '4' AND '6' print '2' -- SELECT-Statement ELSE IF @mth BETWEEN '7' AND '9' print '3' -- SELECT-Statement ELSE IF @mth BETWEEN '10' AND '12' print '4' -- SELECT-Statement END
Select t1.column1, t1.column2 From table1 t1, table2 t2 Where t1.id = t2.id and t1.some_column = t2.some_column and not exists (select 1 from table3 t3 where t1.id = t3.id)
begin :test := q'< many many lines many many lines >' ; end; /
select 'A', sum(A) from table union select 'B', sum(B) from table
BEGIN TRANSACTION; SELECT DISTINCT url FROM urls WHERE task_assigned is NULL ORDER BY id LIMIT 100 FOR UPDATE; UPDATE urls SET task_assigned = NOW() WHERE url IN [list of URLs] COLLATE utf8_bin; COMMIT;
SELECT a,b FROM my_table GROUP BY a
SELECT id, viewcount + ( SELECT COUNT(*) FROM likes l WHERE l.video = v.id ) AS points FROM video v WHERE location = 30 ORDER BY points DESC, id LIMIT 4
UPDATE mytable SET field = '88' + SUBSTRING(field, 3) WHERE SUBSTRING(field, 1, 2) = '99'
SELECT First Name + ' ' + Last Name FROM Employees ORDER BY 1 OFFSET 10 ROWS;
DataSource := 'Provider=Microsoft.Jet.OLEDB.4.0;Data Source=' + Filename + ';Persist Security Info=False'; ADOConnection1.ConnectionString := DataSource; ADOConnection1.LoginPrompt := False; ADOConnection1.Connected := true; // ADOConnection1.GetTableNames(listbox1.items); AdoTable1.Connection := ADOConnection1; AdoTable1.ReadOnly := false; //if u want to make changes ADOTable1.active := false; ADOTable1.TableName := 'B2777'; //table name ADOTable1.active := true;
SELECT Name, Composer, REPLACE(Composer,'/',',') AS Make FROM tracks
SELECT job_class, sum(case when finalrate like 'A%' then 1 else 0 end) as AA, sum(case when finalrate like 'B%' then 1 else 0 end) as B, sum(case when finalrate like 'C%' then 1 else 0 end) as C FROM t GROUP by job_class
mysql_query("UPDATE scan_list2 SET sl_scanned = '1' WHERE sl_scanned = '0' ORDER BY sl_id LIMIT 40"); $sql3 = mysql_query("SELECT * FROM config LIMIT 1"); $row3 = mysql_fetch_assoc($sql3); $log=$row3['con_log']; $sql2 = mysql_query("SELECT sl_start,sl_id FROM scan_list2 WHERE sl_scanned = '1' ORDER BY sl_id DESC LIMIT 40"); while($row2 = mysql_fetch_assoc($sql2)){ echo "crk|".$row2['sl_start']."|".$log."-"; }
WHERE CAST(CASE WHEN a.variable = 'X' THEN '10' ELSE a.variable END AS int) >= 2
INSERT #Table (Column1, Column2, Column3) EXEC SP1;
select extract(hour from numtodsinterval(to_date('14:00:00','HH24:MI:SS') - to_date('13:15:00','HH24:MI:SS'),'DAY')) ||':'|| extract(minute from numtodsinterval(to_date('14:00:00','HH24:MI:SS') - to_date('13:15:00','HH24:MI:SS'),'DAY')) diff from dual / DIFF ------------------ 0:45
select device, count(*) as cnt, max(time) <-- same as latest time from database.table group by device having cnt>1 order by device;
select distinct computerId from groupMemberships m1 join groupMemberships m2 on m2.groupId=m1.groupId and (m2.isSharing or m2.userId=m1.userId) join computers c on c.userId=m2.userId where m1.userId=?
select * from mytable mt where mycol in (timestamp(current date - 100 days, '00:00:00'), timestamp(current date - 200 days, '00:00:00') );
SELECT p.Alias, p.Name, g.Group FROM Person AS p LEFT OUTER JOIN Group AS s ON p.Alias=l.Alias LEFT OUTER JOIN CGLink AS l ON l.Type=s.Type ORDER BY p.Alias, p.Name;
SELECT user, SUM(points) AS points, SUM(case when date_achieved >= (CURRENT_DATE - INTERVAL 1 MONTH) THEN points else 0 END) points_last_Month FROM myTable GROUP BY user
proc sql; create table toto (col1 varchar(8)); update toto set col1="nvar&&pays&l"; quit;
CREATE TABLE #test(DateColumn DATETIME, IntColumn INT); INSERT INTO #test VALUES ({ts'2016-01-01 00:00:00'},1) ,({ts'2016-01-10 11:30:00'},-2) ,(GETDATE(),3); SELECT DateColumn AS A ,IntColumn AS B ,DATEADD(DAY,IntColumn,DateColumn) AS C FROM #test; DROP TABLE #test;
WHERE timestamp(start_date, start_time) <= timestamp(currdate, currtime) AND timestamp(end_date, end_time) >= timestamp(currdate, currtime)
SELECT e.language_name, ecc.language_animal_code, a.animal_code FROM language_animal_codes ecc INNER JOIN languages e ON e.language_id = ecc.language_id LEFT OUTER JOIN animals a ON ecc.animal_id = a.animal_id
SELECT TABLE_NAME, COLUMN_NAME FROM sysindexes AS i INNER JOIN sysobjects AS o ON i.id=o.id INNER JOIN INFORMATION_SCHEMA.COLUMNS ON o.NAME=TABLE_NAME WHERE(indid=0 or indid=1) and DATA_TYPE like '%varchar' and(CHARACTER_MAXIMUM_LENGTH=-1 or CHARACTER_MAXIMUM_LENGTH=2147483647);
SELECT cast(AVG(Price) as decimal(6, 2)) FROM Product WHERE ProductName = 'Shoe';
SELECT u.clan_id, sum(case when cv.type = 3 then cv.value else 0 end) as totalTime, sum(case when cv.type = 1 then cv.value else 0 end) as totalMass FROM users u INNER JOIN clan_values cv ON(u.id = cv.user_id) GROUP BY u.clan_id
Select mappingid, formTypeId as "Form Type", abbreviation, case when count(formtypeid) >= 2 then 2 else Count(formTypeID) end as "Chart Count" From tables.dbo.forms where questions = answered and formtypeid = 3 group by mappingid, formtypeid, abbreviation;
delimiter // CREATE TRIGGER trigger_check BEFORE INSERT ON your_table FOR EACH ROW BEGIN IF NEW.NUM > 99999 THEN SET NEW.NUM = 0; END IF; END //
SELECT * FROM ( SELECT id, value1, value2, version, max(version) over (partition by id) as max_version FROM T WHERE id IN (1, 2, 3, ... 10) ) t2 WHERE version = max_version
select col1,col2, row_number() over (partition by col1 order by col1) as _KEYCOL from align1
SELECT Userid, User, Max(UserUpdate) AS MaxDate FROM myTable GROUP BY Userid, User
<property name="insertSql" value="${sql.accountdao.insert}" /> <property name="selectSql" value="${sql.accountdao.select}" />
SELECT * FROM user WHERE (month(birthday) * 100) + day(birthday) between 0131 and 1231
$sql = "SELECT `id`, `name` FROM `records` WHERE `name` LIKE '%".mysql_real_escape_string($q)."%'";
CREATE TABLE #Proc1TempResults ( ColA INT, --OR WHATEVER DATA TYPE ColB INT, ColC INT ) INSERT INTO #Proc1TempResults (ColA, ColB, ColC) EXEC Proc1 @ID, 0 SELECT ColA, ColB FROM #Proc1TempResults
sp_addlinkedsrvlogin [ @rmtsrvname = ] 'rmtsrvname' [ , [ @useself = ] 'TRUE' | 'FALSE' | NULL ] [ , [ @locallogin = ] 'locallogin' ] [ , [ @rmtuser = ] 'rmtuser' ] [ , [ @rmtpassword = ] 'rmtpassword' ]
SELECT STUFF(SomeString,1,11,'')
select id, one_column, another_column from two_hundred_mb_table where id = 1 select sum(one_column) / sum(another_column) from two_hundred_mb_table
Grid grd = new Grid(); XpsDocumentWriter wrt = new XpsDocumentWriter(); //Bunch of code to manipulate your grid here //Now we calculate the scaling required: double ScaleX = PageWidth / grd.Width; //The page width must be in Device Independent Units double ScaleY = ScaleX; grd.RenderTransform = new ScaleTransform(ScaleX, ScaleY); wrt.Write(grd);
SELECT users.user_id,groups.group_id,(SELECT COUNT(*) FROM user_group WHERE user_group.group_id=groups.group_id) FROM groups INNER JOIN user_group ON groups.group_id=user_group.group_id INNER JOIN users ON user_group.user_id=users.user_id ORDER BY users.user_id,groups.group_id ASC
SELECT CASE WHEN Committed_Date >= '01/04/2011' THEN 'Y' ELSE 'N' END AS Current_YTD FROM YourTable
SELECT country_code , COUNT(emission_class) AS total , SUM(CASE WHEN emission_class = 'E0' THEN 1 ELSE 0 END) AS EURO0 , SUM(CASE WHEN emission_class = 'E?' THEN 1 ELSE 0 END) AS EURO? , ... FROM DB.CUSTOMER_VEHICLE GROUP BY country_code;
PostgresQL: 250 - 1600 depending on column types MySQL: upto 4096, depending on row size Oracle: 1000 IBM DB2: 1012 Mycrosoft SQL Server: 1024 - 30000 Sybase: 45000
CREATE DATABASE PROJECT GO USE PROJECT GO CREATE TABLE Courses ( CourseID INT NOT NULL PRIMARY KEY, Name VARCHAR(64) NOT NULL UNIQUE, Code CHAR(4) NOT NULL UNIQUE ) GO
declare @keywords table ( word varchar(100) ) insert into @keywords values ('catching') insert into @keywords values ('unicorns') select kw.word, count(*) as NumMessages from your_table t inner join @keywords kw on t.comment like '%' + kw.word + '%' group by kw.word order by NumMessages
SELECT * FROM bUser WHERE ( (id+'' LIKE @id) and (name LIKE '%'+@name+'%') AND (email LIKE '%'+@email+'%') )
declare @t1 as table (id int,date datetime) insert into @t1 select 1,'2016/1/05' insert into @t1 select 2,'2012/5/09' insert into @t1 select 3,'2010/6/23' insert into @t1 select 4,'2009/7/18' insert into @t1 select 5,'2002/2/13' declare @inputDate datetime = '2003/2/12' select top 1.id from @t1 order by abs(datediff(dd,date,@inputDate)) set @inputDate = '2016/1/02' select top 1.id from @t1 order by abs(datediff(dd,date,@inputDate))
select char_length((select text_field from table where key = 1));
SQL> describe sdo_geometry
SELECT name, code FROM new n WHERE NOT EXISTS(SELECT * FROM current c WHERE c.name = n.name OR c.code = n.code)
select distinct(DeviceID) from YourTable WHERE Transmission = 'Inventory' and DeviceID not in ( select distinct(DeviceID) from YourTable WHERE Transmission in('Starting', 'Stopping') );
SELECT DISTINCT msgID, msgSubject, msgBody -- and so on FROM messages m LEFT JOIN small_group_visibility sg ON sg.msg_id = m.msg_id LEFT JOIN big_group_visibility bg ON bg.msg_id = m.msg_id WHERE sg.group_id IN (1, 2, 3) OR bg.group_id IN (10, 20);
create table W_UK as select * from W_US where 1 = 2;
Select id, SUM(CASE W = w1 THEN S ELSE 0 END) over(Partition by id order by 1) total, W from yourtable
SELECT model, price FROM Product NATURAL JOIN PC WHERE maker = 'B' UNION ALL SELECT model, price FROM Product NATURAL JOIN Laptop WHERE maker = 'B' UNION ALL SELECT model, price FROM Product NATURAL JOIN Printer WHERE maker = 'B';
SELECT ... (SELECT ... ) AS 'Current - 1', (SELECT ... ) AS 'Current - 2', ... FROM ...
SELECT * FROM dbo.Table WITH (NOLOCK)
SELECT dbo.Team.ID, dbo.Team.Comment, MAX(dbo.Team.Date) LatestDate, dbo.TeamName.Name, dbo.Contacts.ContactName FROM dbo.Team INNER JOIN dbo.TeamName ON dbo.Team.ID = dbo.TeamName.id INNER JOIN dbo.Contacts ON dbo.Team.ContactID = dbo.Contacts.ContactID WHERE dbo.TeamName.idstatus = 'Active' GROUP BY dbo.Team.ID, dbo.Team.Comment, dbo.TeamName.Name, dbo.Contacts.ContactName
CREATE TABLE Departments ( ID integer primary key, Description varchar(255), HeadOfDepartment varchar(255), ParentDepartment integer references Departments(ID) );
UPDATE tbUser SET username = LEFT(username, CHARINDEX('@', username) - 1) WHERE username LIKE '%@%'
SELECT id, nr, cost, A.subtotal AS TOTAL FROM table1 INNER JOIN (SELECT nr, Sum(cost) AS subTotal FROM table1 GROUP BY nr) AS A ON table1.nr = A.nr
select count(*), datepart(year,created) as [year], datepart(month,created) as [month], datepart(day,created) as [day] from table where created >= '8/1/2009' and created < '9/1/2009' and datepart(hour,created) >= 8 and datepart(hour,created) <= 17 group by datepart(year,created), datepart(month,created), datepart(day,created)
SELECT activity,GROUP_CONCAT(userID,' ') AS Groups FROM Activity GROUP BY activity ORDER BY activity DESC;
dim i as integer for i = 1 to 7 docmd.runsql "insert into temp table select * from qry_Input_" + CStr(i) next i
select bank_id OldBankId ,bank_name OldBankName, bank_interest OldBankInterest , bank_fees OldBankFees, bank_pic_url as BankPic from bank where bank_Id =(select bank_id from bank where bank_id= $user_id)
db.Query(fmt.Sprintf("SELECT * FROM mytable WHERE %s = ?", col), searchStr)
CREATE TRIGGER Trig_INS_Test ON Test INSTEAD OF INSERT AS BEGIN SET NOCOUNT ON INSERT INTO Test (CommaSeperatedString) SELECT CommaSeperatedString FROM inserted END
select *, max(mt.version) over (partition by mt.partitiongroup) from mytable mt where mt.id = 'some uuid';
create or replace procedure proc_1 ( i IN number ) as PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO test_table@remote_sid (id, description) VALUES (i, 'Description for ' || i); COMMIT; END; / create or replace procedure proc_base ( i IN number ) as begin insert into local_tab (id) values (i); proc_1( i ); rollback; end; /
UPDATE a SET a.IDT2 = c.ID FROM Table2 a JOIN Table1 b ON a.BRID = b.BRID JOIN TAble2 c ON b.HQID = c.BRID
Me.List_history.RowSource = "SELECT [Date] " & _ "FROM Leaves " & _ "WHERE CodePersonali = '" & Nz(Me.CodePersonali.Value) & "'"
Select * from emp where group in (item1, item2, item3)
SELECT COUNT(DISTINCT t1.userid) AS user_count FROM TRANSACTIONS t1 JOIN TRANSACTIONS t2 USING (userid) WHERE t1.product_id = 'prod1' AND t2.product_id = 'prod2';
SELECT films.film_name FROM `films` JOIN popular_films ON popular_films.film_id = films.film_id;
WHERE ISNULL(Assetclass, 'Anything but Bond') <> 'Bond'
SELECT SUBSTR(text, ip_start, ip_len) AS ip_addr FROM ( SELECT text, (LOCATE('(', text) + 1) AS ip_start, (LOCATE(')', text) - (LOCATE('(', text) + 1)) AS ip_len FROM test ) temp;
SELECT MAX(CASE WHEN rd.REPNUMBER BETWEEN 11000000 and 11099999 THEN rd.REPNUMBER END) + 1 as REPNUMBER, MAX(ri.REPITEM) + 1 as REPITEM FROM REPORTDETAILS rd INNER JOIN REPORTITEMS ri ON rd.REPNUMBER = ri.REPNUMBER
update newLocations nl set description= (select MAX(l.description) from locations l where nl.id_location=l.id_location ) where exists (select 1 from locations l2 where nl.id_location=l2.id_location);
SELECT x1.<cols>, x2.<cols> FROM dbo.YourTable AS x1 INNER JOIN dbo.YourTable AS x2 ON x1.Vendor_Code = x2.Vendor_Code AND x1.Invoice_Number = x2.Invoice_Number AND x1.Check_Number = x2.Check_Number AND x1.Payment_Amount = -x2.Payment_Amount;
ALTER TABLE YourTable ALTER COLUMN YourColumn columnType NULL
select * from ( ( select * from TableInSchema1 minus select * from TableInSchema2) union all ( select * from TableInSchema2 minus select * from TableInSchema1) )
SELECT c.id, c.name, p.name the_default_printer, c.description FROM computers c INNER JOIN groups g ON g.id = c.guid INNER JOIN printers p ON g.default_printer = p.id OR c.default_printer = p.id WHERE p.name LIKE 'mfd%'
select * from MyTable where @Param is null or case when @Param is not null and FieldCode = 'Whatever' then case when FieldValue like '%' + @Param + '%' then 1 end end = 1
create proc proc1 as select 1 as one, 2 as two declare @result table (one int, two int) insert into @result exec proc1 select one from @result
UPDATE Projects SET Projects.Is_Ready = ALL_PROJECTS.Is_Ready FROM Projects, ALL_PROJECTS WHERE Projects.ProjectID = ALL_PROJECTS.ProjectCode;
update prof set counter = counterSum from prof join (select name, number, sum(counter) counterSum from prof where whatever group by name, number) temp on prof.name = temp.name and prf.number = temp.number where whatever
SELECT * FROM city ORDER BY population DESC LIMIT 5 -- or any other N
SELECT deptno, ename (your_counter-1) new_counter FROM ( SELECT deptno, ename , ROW_NUMBER() OVER (PARTITION BY deptno ORDER BY deptno, ename) your_counter FROM scott.emp ); 10 CLARK 0 10 KING 1 10 MILLER 2 20 ADAMS 0 20 FORD 1 20 JONES 2 20 SCOTT 3 ....
class Device include DataMapper::Resource property :id, Serial has n, :locations # You probably want :order => [:time.desc] here too has 1, :latest_location, :class_name => Location, :order => [:time.desc] def lat latest_location.lat end end
from bs4 import BeautifulSoup as soup table = soup.find(id="top-player-stats-summary-grid")
INTEGER PRIMARY KEY AUTOINCREMENT
SELECT NAME, COUNT(*) AS POPULARITY FROM CATTWO GROUP BY NAME HAVING COUNT(*) = ( SELECT COUNT(*) AS MAX_POPULARITY FROM CATTWO GROUP BY NAME ORDER BY MAX_POPULARITY DESC LIMIT 1 );
SELECT id, son, technology, ISNULL((select id from table t2 where t2.id = t1.son), 0) AS father, ROW_NUMBER() OVER (ORDER BY technology, father, son) AS RowNumber FROM table t1 ORDER BY RowNumber ASC
CREATE UNIQUE INDEX idx_order_unique ON foo (parent, ordering);
select SQL_CALC_FOUND_ROWS ID, Title, Author from yourtable limit 0, 10; SELECT FOUND_ROWS();
SELECT COUNT(*) FROM tablename
command.CommandText = string.Format("DELETE FROM {0}", tableName);
mysql> select abs(datediff('2009-09-18 00:00:00', '2009-10-17 00:00:00')); +-------------------------------------------------------------+ | abs(datediff('2009-09-18 00:00:00', '2009-10-17 00:00:00')) | +-------------------------------------------------------------+ | 29 | +-------------------------------------------------------------+ 1 row in set (0.00 sec)
UPDATE WorkOrder SET name2=name1+' '+name2
UPDATE training SET finalized = complete_date + INTERVAL FLOOR(1 + (RAND() * 3)) DAY
UPDATE table_spec_data SET coverage=33 WHERE (specification_id = 247 AND data_id = 1) OR (specification_id = 248 AND data_id = 2) OR (specification_id = 249 AND data_id = 3)
SELECT m.member_first_name, cr.c_id FROM classregistration cr INNER JOIN clases c ON cr.c_id = c.class_id INNER JOIN members m ON m.member_id = cr.m_id WHERE cr.c_id = 1
declare @t table (Name varchar(17) not null,Value bit not null) insert into @t(Name,Value) values ('Val1',1), ('Val2',1), ('Val3',0), ('Val4',0), ('Val1',0), ('Val2',0), ('Val3',0), ('Val4',1) select Name,CONVERT(bit,MAX(CONVERT(int,Value))) as Value from @t group by Name
SELECT COUNT(Student) FROM YourTable WHERE Start >= @Start AND End <= @End
CASE WHEN adres.CD_land = 'NL' THEN street ELSE upper(COALESCE(postalcode + ' ', '') + street) END as Street
SELECT * FROM MyTable WITH (INDEX(IndexName)) WHERE MyIndexedColumn = 0
List cats = sess.createCriteria(Cat.class) .add( Restrictions.like("name", "Fritz%") ) .add( Restrictions.or( Restrictions.eq( "age", new Integer(0) ), Restrictions.isNull("age") ) ) .list();
Profiles | | | +-----> PreferredPicture | +-----> | | \|/ | ProfilePictures
SELECT strftime('%W','2013-05-04')-strftime('%W','2013-05-01') +1;
SELECT * FROM dbo.NGPTimesheetsPosition WHERE ProjectNO = '12169-01-c' AND CreditorEmployeeID <> 'E0000' AND DocType = 'Time Sheet' AND TransactionDate <= @MyDateParameter -- ADDED!
SELECT GROUP_NAME, GROUP_ID, SUM(CASE WHEN PASS_FAIL = 'PASS' THEN 1 ELSE 0 END) as PASS, SUM(CASE WHEN PASS_FAIL = 'FAIL' THEN 1 ELSE 0 END) as FAIL FROM log a join group b on a.group_id=b.group_id GROUP BY b.group_name, a.group_id
Select u.first_name, u.last_name, n.status From users u Left Join networks n On ( ( n.user_id = 1 And n.friend_id = u.id ) Or ( n.friend_id = 1 And n.user_id = u.id ) Where u.id <> 1
DECLARE @cnt INT SELECT @cnt = COUNT(*) FROM LinkedServer.database.schemaname.tablename IF @cnt > 40 INSERT INTO table1 VALUES(col1, col2, col3 .....)
SELECT * FROM SYSCAT.COLUMNS WHERE TABNAME= (SELECT BASE_TABNAME FROM SYSCAT.TABLES WHERE TABNAME = 'Table')
var q = from p in ProductReport where !ClientProduct.Any(c => c.ClientId == new Guid("06ae6be1-ca94-44c9-bd30-f1d4f3ac3264") && p.ProductId == c.ProductId) select p.ProductId;
select column_1||', '||column_2 as "Concatenated_Result" , column_3 from table
SELECT * FROM mytable t1 INNER JOIN mytable t2 ON t1.idA = t2.idB AND t1.idB = t2.ida AND t1.ida<t1.idb
SELECT 'Job1', job1 FROM TAB UNION ALL SELECT 'Job2', job2 FROM TAB
SELECT DATALENGTH(inputstring);
int j=st.executeUpdate("insert into mtc (entryDate) values (SYSDATE())");
$rsm = new ResultSetMapping; $rsm->addEntityResult('Player', 'p'); $rsm->addFieldResult('p', 'id', 'player_id'); $rsm->addFieldResult('p', 'name', 'name'); $sql = " SELECT p.* FROM players p WHERE CONCAT(p.first_name, ' ', p.last_name) = ? "; $query = $this->getEntityManager()->createNativeQuery($sql, $rsm); $query->setParameter(1, $name);
setdbprefs('datareturnformat','structure'); result = fetch(conn,sql_query); result.(name) ans = ...
SELECT extract( hour from x) hours FROM (SELECT (date1 - date2)x FROM B)
UPDATE items SET score= 'a', count = (SELECT COUNT(votes.id) FROM votes WHERE votes.uri = items.uri) WHERE items.id = 'b'
with CTE as (select accesses, computer, dt, row_number() over (partition by computer order by accesses desc) rn from table1 ) select * from CTE where rn = 1
select p.id, p.name, case when min(c.classificationid) = max(c.classificationid) then max(c.classificationid) else -1 end CalculatedClassification from parent p join child c on p.id = c.parentrow group by p.id, p.name
SELECT j.id job_id ,sum(case when amount is null then 0 else amount end) FROM jobs j LEFT JOIN payments p ON j.id=p.job_id GROUP BY j.id HAVING sum(case when amount is null then 0 else amount end) < 1000;
SELECT Games.Title, Genres.Name FROM Games LEFT JOIN GameGenres ON Games.Id = GameGenres.GameId LEFT JOIN Genres ON GameGenres.GenreId = Genres.Id
SELECT Users.Name, Users.userid AS users,video_id FROM watching_list JOIN Users ON Users.UserID = watching_list.UserID GROUP BY Users.userid , video_id, Users.Name HAVING COUNT(*) > 1;
INSERT INTO Comments ( A, B, C, D, Comment ) SELECT DISTINCT C.A, C.B, C.C, C.D, C.comment_value_insert FROM Core AS C INNER JOIN Comments as C1 ON C.A = C1.A and C.B = C1.B and C.C = C1.C WHERE NOT EXISTS (SELECT * FROM Comments AS O WHERE O.Comment = "Critical" AND O.A = C.A AND O.B = C.B AND O.C = C.C);
SELECT a.name, a.salary, b.salary_grade FROM a JOIN b ON a.salary BETWEEN b.lower_bound AND b.upper_bound
LEFT OUTER JOIN tbl_advisor AS d ON d.id = c.advisor_id
SELECT * FROM a WHERE (status = 'x' AND a_date < NOW()) OR (status = 'y') ORDER BY status ASC, a_date ASC LIMIT 1;
SELECT customer_name FROM customer_billing WHERE LEAST(bill_day, EXTRACT(DAY FROM LAST_DAY(SYSDATE))) = EXTRACT(DAY FROM SYSDATE);
DELIMITER $$ CREATE TRIGGER tr_au_s_articles_details AFTER UPDATE ON s_articles_details FOR EACH ROW BEGIN -- Here you can access the id of the updated article New.id -- update/insert depending on the condition of the newvalue. -- Check if id corresponds to a main_detail_id in the s_articles table -- Here an int : select count(id) from s_articles where main_detail_id = new.id END; DELIMITER ;
SELECT * FROM items LEFT JOIN //left join readStatus ON items.itemId = readStatus.itemId WHERE (readStatus.status != 1 OR readStatus.status IS NULL);
SELECT id, CAST('0' + id AS INTEGER) A FROM "my.db" ORDER BY A, id
SELECT t1.* FROM table1 t1 inner join table2 t2 on (t1.sku = t2.sku) WHERE t1.sku = 'TERM' or t2.alt_sku = 'TERM'
DELETE T1 FROM Terms t1 JOIN ( SELECT TermID FROM TermOccurrences GROUP BY TermID HAVING SUM(Counter) <=2 ) T2 on T1.TermID = T2.TermID
select distinct c1.city_name from city c1 join city c2 on c2.city_name = c1.city_name and c1.state_name <> c2.state_name where not exists (select 1 from city c3 where c3.city_name = c1.city_name and c3.state_name not in (c1.state_name, c2.state_name));
strSource = "SELECT [Product Code],[Stock Level],[Description] " & _ "FROM [products/stock] " & _ "WHERE Mid([Product Code],1,5) = '" & Me.listSource & "';"
SELECT XX, CASE WHEN Y = 1 THEN (Select X from table2 where xx= ) WHEN Y = 2 THEN (Select X from table3 where xx=) END FROM table1
SELECT P.[MONTH] ,P.[Nationality] , COUNT(*) AS Total FROM #PAXS P GROUP BY P.[MONTH] , P.[Nationality]
SELECT DISTINCT category FROM mytable
glean2_saves(username, ses_id, save_status, id)
delete t1 from tTable t1, tTable t2 where t1.locationName = t2.locationName and t1.id > t2.id
SELECT * INTO XLImport4 FROM OPENROWSET('Microsoft.Jet.OLEDB.4.0', 'Excel 8.0;Database=C:\test\xltest.xls', [Customers$])
CREATE TABLE User ( user_id INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY, fname VARCHAR(100) NOT NULL, lname VARCHAR(100) NOT NULL, email VARCHAR(100), mobile VARCHAR(15), city VARCHAR(100), demo_id INT(1) NOT NULL )
where . . . having distance < 10 order by distance;
SELECT items.title, items.artist, orders.order_date, orders.ship_date FROM items JOIN orderline ON orderline.item_id = items.item_id JOIN orders ON orders.order_id = orderline.order_id
SELECT u2.name as id_name, u1.name as linked_id_name FROM link_view_user l join panel_user u1 on u1.id = l.linked_id join panel_user u2 on u2.id = l.id
select s.Security_id, nvl(c.odate, s.Maturity_date) as Maturity_date from Security s left join Callput c on s.Security_id = c.Security_id
SELECT student_id, course_id, result FROM tbl WHERE result = 0 AND student_id NOT IN (SELECT student_id FROM table WHERE result =1 and course_id = tbl.course_id )
SELECT *,IF(LOCATE('14_',B)+3<=Length(B), INSERT(B,LOCATE('14_',B),4,''),B) C FROM ( SELECT *,IF(LOCATE('14_',A)+3<=Length(A), INSERT(A,LOCATE('14_',A),4,''),A) B FROM ( SELECT *,IF(LOCATE('14_',x)+3<=Length(X), INSERT(X,LOCATE('14_',x),4,''),X) A FROM X ) Q1 ) Q2
SELECT d = REPLACE(CONVERT(CHAR(7), d, 121), '-', '/') FROM ( SELECT DISTINCT d = DATEADD(MONTH, DATEDIFF(MONTH, '19000101', colDate), '19000101') FROM dbo.MyTable WHERE colDate >= '20120101' AND colDate < '20140101' ) AS x ORDER BY d;
SELECT * FROM table t WHERE NOT EXISTS (SELECT * FROM table WHERE t.id_number = id_number AND date > t.date)
DECLARE @NewId nvarchar(45) set @NewId = newid() SELECT replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(@NewId, 1, 'A'), 2, 'B'), 3, 'C'), 4, 'D'), 5, 'E'), 6, 'F'), 7, 'G'), 8, 'H'), 9, 'I'), 0, 'L'), '-', 'M')
select * from your_table where 'N' in (webLoad, transmitted, transmissionRcvd, ackRcvd)
SELECT * FROM ActivityLog WHERE id in ( SELECT id + 1 FROM ActivityLog WHERE activityAt >= '2015-01-23 00:00:00' AND module LIKE 'Api' AND data LIKE '%"status":false%' AND ( action LIKE 'DeviceSignUp' OR action LIKE 'UniversityStudentSignUp' ) )
session.query( TestModel).group_by( TestModel.col1).all()
SELECT p.*, s.meta_value FROM posts p LEFT JOIN storage_varchars s ON p.id = s.post_id WHERE parent_id = 20 AND STR_TO_DATE(s.meta_value, '%d-%m-%Y') >= CURRENT_DATE() ORDER BY STR_TO_DATE(s.meta_value, '%d-%m-%Y') ASC;
SELECT photo.src_big, photo.created, photo.modified, photo.owner, photo.aid, photo.caption FROM photo inner join album on album.aid = photo.aid inner join friend on album.owner = friend.uid2 WHERE uid1=me() or uid2 = me() order by modified desc,created DESC LIMIT 30
SELECT ISNULL(COUNT(e.CODE), 0) AS OK, t.ORG AS ORG FROM( SELECT DISTINCT ORG FROM EVENTS )t LEFT JOIN EVENTS e ON e.ORG = t.ORG AND e.TYPE = 'A' AND e.DATE BETWEEN '2015-07-06' AND '2015-07-12' GROUP BY t.ORG
SELECT id, max_value FROM scores CROSS JOIN (SELECT MAX(value) AS max_value FROM scores) m
SELECT COUNT(*) AS SumAll, SUM( DEPARTMENT1 ) AS Sum1, SUM( DEPARTMENT2 ) AS Sum2, SUM( DEPARTMENT3 ) AS Sum3, SUM( DEPARTMENT4 ) AS Sum4, SUM( DEPARTMENT5 ) AS Sum5, SUM( DEPARTMENT6 ) AS Sum6, SUM( DEPARTMENT7 ) AS Sum7, SUM( DEPARTMENT8 ) AS Sum8 FROM RECLAMATION WHERE EXTRACT( YEAR FROM RECLAMATIONDATE ) = 2015
SELECT personTbl.* FROM personTbl LEFT OUTER JOIN ( SELECT DISTINCT filterValue FROM filterTable WHERE filterType = 'name' ) filter ON 1 = 1 WHERE filter.filterValue = personTbl.name OR filter.filterValue IS NULL ;
declare @value varchar(10); set @value = ''; SELECT COALESCE(NULLIF(@value,''), '0')
update a set phoneNumber = b.phoneNumber from TheTable a inner join TheTable b on b.contactFirstName = a.contactFirstName and b.contactLastName = a.contactLastName and b.statusID = 2 where a.statusID = 10 and a.phoneNumber is null
CREATE TABLE CURRENCIES ( ... CONSTRAINT c_asset_from CHECK(exists(select 1 from ASSETS a where a.id = from and a.type = 'CURRENCY')) );
SELECT A.name, A.regionID, b.Name FROM countries A Join regions B on B.id = A.RegionId ORDER BY A.name ASC
SELECT TableA.type_uid FROM TableA INNER JOIN TableB ON TableA.allowed_type_uid = TableB.type_uid GROUP BY TableA.type_uid HAVING COUNT(distinct TableB.type_uid) = (SELECT COUNT(distinct type_uid) FROM TableB)
select DATE(date),count(1) from videos_videoview group by DATE(date);
SELECT col1, col2 FROM table1, table2 WHERE table1.person_uid = table2.person_uid (+) AND table1.period = table2.period (+)
insert into table (ColumnA, ColumnB) select ColumnA, 'c' from table where columnA = 'a' and columnB = 'b'
select right(@string2, charindex('.', reverse(@string2), 1) - 1)
create table Area( ID int primary key, Name nvarchar2(200) ); create table Employee( ID int primary key, Name nvarchar2(200), IDArea int references Area(ID) );
Table1 Index: col1 and col2 (2-way index) col5
GRANT SELECT ON dbo.vwconfirmEmailSent TO PUBLIC;
WHERE (Date1 >= ISNULL(@DateFrom,'17531231') AND Date1 <= ISNULL(@dateTo,'20991231')) OR (Date2 >= ISNULL(@DateFrom,'1753-12-31') AND Date2 <= ISNULL(@dateTo,'20991231')) OR (Date3 >= ISNULL(@DateFrom,'1753-12-31') AND Date3 <= ISNULL(@dateTo,'20991231'))
SELECT * FROM pharmacy_items LEFT OUTER JOIN pharmacy_quantity_types ON pharmacy_items.quantity_type = pharmacy_quantity_types.id WHERE pharmacy_items.name LIKE '%query_here%' OR pharmacy_items.description LIKE '%query_here%'
SELECT coalesce(u1.name, u2.name) as name FROM matches m LEFT JOIN users u1 ON u.userId = m.userId1 AND m.userId2 = '1' LEFT JOIN users u2 ON u.userId = m.userId2 AND m.userId1 = '1' WHERE '1' in (m.userId1, m.userId2);
Select a,b from (select a,b from table order by b) as c group by a;
SELECT Fact_Stream.Free_Stream, 100.0 * COUNT(*) -- count per bit / SUM(COUNT(*)) OVER () -- sum of those counts = count of all rows As "Percentage of Streams" FROM Fact_Stream GROUP BY Free_Stream
Create Table Criteria ( UserSessionId ... , KeyValue .... ) Select ... From MyMainTable Join Criteria On Criteria.KeyValue = MyMainTable.col And Criteria.UserSessionId = ...
select s1.id as id1, s2.id as id2 from sentences s1 join sentences s2 on s1.creator_id = s2.creator_id and s1.order = s2.order - 1 where s1.text like '%first part%' and s2.text like '%second part%';
# assume userIdList is a list of ints that are entity key ids user_keys = [ndb.Key('User', k) for k in userIdList] users = ndb.get_multi(user_keys)
l_cur_string := 'SELECT ex1, ex2FROM exTable WHERE col1= '''|| vTest || '''';
SELECT avg(value) FROM (select value from que LIMIT 10 ) q;
select to_char(d, '99') || ' ' || to_char(h, '00') || ':' || to_char(m, '00') || ':00'
ALTER TABLE MyTable ADD CONSTRAINT UK_MyUniqueConstraint UNIQUE (MyColumn)
select EmployeeColumn, iff(iif(Date1 > Date2, Date1, Date2) > Date3, iif(Date1 > Date2, Date1, Date2), Date3) from yourTable
@JoinTable(name= "ticket_to_collectors") @ManyToMany private List<Person> collectors;
select row_number() over (order by FLD_A,FLD_B) as POS, FLD_A, FLD_B from My_Tbl where FLD_C='p'
DECLARE @totalCount AS INT SET @totalCount = (SELECT COUNT(p.Id) from players p inner join players_group pg on p.Id=pg.player_id) Select count(p.Id)/@totalCount * 100 as nb_play ,pg.group from players p inner join players_group pg on p.Id=pg.player_id group by pg.group order by pg.group;
SELECT Cust_Name FROM Customer_dim WHERE Cust_Id NOT IN ( SELECT c.Cust_Id FROM Product_dim p CROSS JOIN Customer_dim c LEFT JOIN Orders_fact o ON o.Prod_Id = p.Prod_Id AND c.Cust_Id = o.Cust_Id WHERE Ord_Id IS NULL )
SELECT ID, COUNT(ID) FROM table WHERE Age = 25 GROUP BY ID HAVING COUNT(ID) > 1
SELECT customerID, sum(sumOfLines) FROM ( SELECT header.CustomerID, (SELECT sum(Detail.LineTotal) FROM Sales.SalesOrderDetail.LineTotal as Detail WHERE Detail.SalesOrderID = header.SalesOrderID) as sumOfLines FROM Sales.SalesOrderHeader.CustomerID as header ) sub GROUP BY customerID
SELECT period, value, category FROM (SELECT VendorID, charcge,nocharge FROM Table) p UNPIVOT (value FOR category IN (charge,nocharge) )AS unpvt;
SELECT @t2.id, @t1.name from @t2 LEFT OUTER JOIN @t1 ON @t1.ID = @t2.ID
Select substring(Data, PatIndex('%[0-9]%', Data), 1) from( select 'Charged Hourly Fee for 3 CR for BCP202DL Personal Development II' as Data )x
create view v as select * from Student where major like '%Engineering%' with check option;
Select * From callforwarding Where Mastercode in (select SRFID from @SRFTable) and ApproverNo = @empID and ForwardDate in (Select max(ForwardDate) from CallForwarding where Mastercode in (select SRFID from @SRFTable) and ApproverNo = @empID group by Mastercode)
DECLARE @TableName NVARCHAR(512), @sql NVARCHAR(MAX), @xml NVARCHAR(MAX); SET @TableName = N'dbo.Feeds'; SET @sql = N'SELECT @xml = CONVERT(NVARCHAR(MAX), ( SELECT * FROM ' + @TableName + ' FOR XML AUTO, ELEMENTS));'; EXEC sp_executesql @sql, N'@xml NVARCHAR(MAX) OUTPUT', @xml OUTPUT; SELECT @xml;
SELECT r.* FROM `records` r LEFT JOIN `records` r3 ON r.name = r3.name AND r3.state=3 WHERE r3.state IS NULL
SELECT NUMTODSINTERVAL (SUM (total_secs), 'second') FROM (SELECT SUBSTR (duration, 1, 2) * 3600 + SUBSTR (duration, 4, 2) * 60 + SUBSTR (duration, 7, 2) total_secs FROM user_tab);
SELECT col1, COUNT(*) totalCount FROM tableName GROUP BY col1
select uf.user, count(*) as FeaturesInCommon from user_features uf join user_features uf2 on uf.feature = uf2.feature where uf2.user = $user group by uf.user order by FeaturesInCommon desc;
SELECT title, MIN(date) FROM financials GROUP BY title ORDER BY title
SELECT * FROM (SELECT et.*, MAX(TIMESTAMP_DATE) OVER (PARTITION BY EMPLOYEE_ID) as MAX_TIMESTAMP_DATE FROM EMPLOYEE_TIMESTAMPS ) et WHERE TIMESTAMP_DATE >= MAX_TIMESTAMP_DATE - 365;
SELECT * FROM resources AS r WHERE r.type = (SELECT type FROM resources s where s.culture= 'sk' and s.key= 'test')
select 'grant select on A.'||table_name||' to B' from dba_Tables where owner = 'A';
create table person_organization ( ssn number(9) , org_code varchar2(60) , constraint person_organization_pk primary key (ssn, org_code) , constraint person_organization_ssn_fk foreign key ( ssn ) references person ( ssn ) , constraint person_organization_oc_fk foreign key ( org_code ) references organization ( org_code ) );
select name, total, total/(select sum(total) from counts)*100 as percentage from counts
select 'Draft' as Enum union select 'Submitted' as Enum union select 'Cancelled' as Enum union select 'Accepted' as Enum union select 'Accepted and Modified' as Enum union select 'Open' as Enum union select 'Pending' as Enum union select 'Seller Reject' as Enum
return String.Format("SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST={0})(PORT={1}))(CONNECT_DATA=(SID={2})));uid={3};pwd={4};", host, port, sid, user, pass);
SELECT hostel_num, sum(num_of_stud) as total_students FROM HOSTELS GROUP BY hostel_num ORDER BY hostel_num;
select PreAgg.ID, PreAgg.Amount, @PrevBal := @PrevBal + PreAgg.Amount as Total from ( select YT.id, YT.amount from YourTable YT order by YT.id ) as PreAgg, ( select @PrevBal := 0.00 ) as SqlVars
select *, SUBSTRING(Result,2,2) as VF021, SUBSTRING(Result,5,2) as VF02b, SUBSTRING(Result,8,2) as VF02c, SUBSTRING(Result,11,2) as VF05b from DQS_RAW
NAMES.DEFAULT_DOMAIN = world
SELECT * FROM order_header INNER JOIN order_line ON order_header.header_id = order_line.header_id LEFT OUTER JOIN inventory ON order_line.product = inventory.product AND order_header.location = inventory.location WHERE order_header.header_id = xxx
ROUND(Value, 0) + (10 * (Value - ROUND(Value, 0)) / 3)
SELECT 'col1', 'col2' UNION ALL SELECT Name1, MAX(Name) OVER (PARTITION BY Name) FROM table
'www.myweb.com?q=id%3D'+convert(varchar(20),@id) +'%26action%3go​'
create or replace function calc(i_str in varchar2) return number is l_result number; begin execute immediate 'select ' || i_str || ' from dual' into l_result; return l_result; exception when others then return null; end; select calc(replace('0,4,2,88,6', ',', '+')) from dual --> 100
UPPER(CONVERT('value' USING latin1))
CREATE TABLE B(ID INT UNIQUE, A_ID INT); MERGE INTO B USING (VALUES 2, 3) I (ID, A_ID) ON (B.ID=I.ID) WHEN MATCHED THEN UPDATE SET B.A_ID = I.A_ID WHEN NOT MATCHED THEN INSERT (ID, A_ID) VALUES (I.ID, I.A_ID)
EXTRACT(HOUR FROM timestampcol)
select * from mytable where date > (select date from mytable where id = {id})
SELECT * FROM table_name WHERE email_address NOT IN ('email1', 'email2', 'email3')
SELECT A.clientid, A.EventNumber, B.City AS CityTo, A.EndDateTime AS MoveDateTime FROM MyTable A INNER JOIN MyTable B ON A.clientid = B.clientid AND A.EventNumber = B.EventNumber AND A.EndDateTime = B.StartDateTime WHERE A.City = 'Chester'
select . . ., count(distinct concat(key, ':', source)) as numcombos
;WITH Vals AS ( SELECT *, ROW_NUMBER() (PARTITION BY Path ORDER BY Minute) RowID FROM Table ) SELECT * FROM Vals WHERE RowID = 1
SELECT ID, duty, SUM(DATEDIFF(dd, startDate, endDate)) as duration FROM [Table] GROUP BY ID, duty
db.Books.find({"timestamp":{$gte: "2016-03-07 11:33:48", $lt: "2016-03-07 11:34:48"}})
DECLARE @contentID int, @contenttype varchar SET @contentid = 28861 SET @contenttype = 'resource' SELECT @contenttype
UPDATE foo SET bar = INSERT(bar, (LENGTH(bar) - 4) / 2 + 1, 4, 'xxxx');
SELECT MAX(owner_name), --floored to the second dateadd(second,datediff(second,'2000-01-01',start_date),'2000-01-01') AS StartDate From MyTable GROUP BY dateadd(second,datediff(second,'2000-01-01',start_date),'2000-01-01')
CREATE Table #Foo (fooID INT NOT NULL Identity (1,1), field1 varchar(20), field2 varchar(20), field3 varchar(20), field4 varchar(20), field5 varchar(20))
select distinct c.* from company c join postcode_areas p on p.company_id = c.company_id where c.name like <input> or c.location like <input> or p.postcode like <input>
SELECT Sum(libromayor.debe) AS IngresosGlobal, sum(IF(ear(libromayor.fechaevento) = Year(CurDate()), libromayor.debe, 0)) AS IngresosGlobal2 FROM libromayor
SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name' ORDER BY column_name
select userId, sum(date(timeOfLogin) = date(@day1)) as NumLogins_0, sum(date(timeOfLogin) = date(date(@day1) + 1)) as NumLogins_1, sum(date(timeOfLogin) = date(date(@day1) + 2)) as NumLogins_2, sum(date(timeOfLogin) = date(date(@day1) + 3)) as NumLogins_3, sum(date(timeOfLogin) = date(date(@day1) + 4)) as NumLogins_4 from table t group by userId;
select foo.id, foo.val, (select MAX(bar.val) from bar where bar.val < foo.val) as barval from foo
SELECT substring(Code,1,6) as Code, SUM(Number) AS [Sum] -- Add this line From Table Group by substring(Code,1,6) Order By Code
SELECT [Date] , CASE WHEN [Co] = 'XYZ' THEN 'Client' WHEN [Co] = 'PQR' THEN 'Partner' ELSE [Co] END AS [Co] FROM [Table1]
DB: there is no name of DB Table: sensor_readings (directly after from) Column: READING_SENSOR_TEMP (AVG function take column as an argument)
select TimeStamp,sum(electricity) from the_table where SiteId in(98,100) group by TimeStamp
Select U.userid, U.username , Count(TM.ticket_id) As tot_ticket From users As U Left Join ticket_master As TM On U.userid = TM.assignedto_user Group By U.userid, U.username
Select * from [Members] where [Expire] >= #" & Me.Text168 & "# And [MembType] IN ('A' , 'B', 'C' , 'D') And [MembType] <> 'E'
-- 1) Insert new record INSERT INTO old_table(id, column) SELECT n.id, n.column FROM new_table n LEFT JOIN old_table o ON n.id = o.id WHERE o.id IS NULL -- 2) Update existed record UPDATE o SET column = n.column FROM old_table o JOIN new_table n ON n.id = o.id
update myTable set Prefixes = case when Prefixes is null or Prefixes = '' then 'abc' else convert(nvarchar(max),Prefixes) + ', abc' end where MyCol='xyz' and (Prefixes not like '%abc%' or Prefixes is null)
TO_DATE(TO_CHAR(s.starttm, 'YYYY-MM-DD HH24:')||TRUNC(TO_NUMBER(TO_CHAR(s.starttm,'MI'))/30,0)*30||':00', 'YYYY-MM-DD HH24:MI:SS')
select tag_id, Count(*) as TagCount from relation where tag_id <> 1 group by tag_id order by Count(*) desc
*= (LEFT JOIN) =* (RIGHT JOIN)
SELECT p.productName FROM products p WHERE p.productName LIKE '%sun%' OR p.productName LIKE '%screen%' OR p.productName LIKE '%sun screen%' ORDER BY CASE WHEN p.productName LIKE '%sun screen%' THEN 1 ELSE 2 END
select (case when parent_id != -1 then parent_id else id end) as mid, max(create_dte ) from messages group by case when parent_id != -1 then parent_id else id end order by max(create_dte) desc;
SELECT A.AnswerID AS Answer, UA.AnswerID AS UserAnswer FROM quizanswers AS A LEFT JOIN useranswers UA ON UA.QuestionID = A.QuestionD WHERE A.CorrectAnswer = TRUE AND A.QuestionID = X
alter table studenttbl drop primary key;
DECLARE @Count INT SET @Count = ( SELECT COUNT(*) FROM dbo.DaylightSavings WHERE @time between Timestart AND Timeend) IF @Count > 0 SELECT DATEADD(HH, 2, @time) ELSE IF @Count = 0 SELECT DATEADD(HH, 1, @time)
SELECT invoice_line.item_id, invoice_line.amount, invoices.customer_name FROM db.invoice_line INNER JOIN db.invoices ON invoice_line.invoice_id = invoices.id_invoices WHERE invoices.customer = 'zzzz' AND invoices.transaction_date > DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) AND invoices.sales_rep = 'aaa' AND (invoice_line.item_id = 'xxx' OR invoice_line.item_id = 'yyy') ORDER BY invoice_line.item_id;
select case when col = 'yes' then 1 else 0 end as new_col_value from your_table
SELECT DISTINCT id FROM (SELECT id,col1 AS col from Yourtable UNION ALL SELECT id,col2 from Yourtable UNION ALL SELECT id,col3 from Yourtable UNION ALL SELECT id,col4 from Yourtable Union ALL .......) A GROUP BY id,col HAVING Count(1) > 3
UPDATE movies SET votes = (select value from info where info.movie_id=movies.id and info_type=3) WHERE EXISTS (select * from info where info.movie_id=movies.id and info_type=3)
SELECT players.Game AS Game, players.Name AS Name, 'W' AS Result, 'F' as Stage FROM MyTable stage JOIN MyTable players ON stage.Game = players.Game WHERE stage.stage = 'F' AND players.result = 'W'
SELECT t.created, COUNT(CASE WHEN t.status = '1' THEN 1 END) as cnt_status1, COUNT(CASE WHEN t.status = '2' THEN 1 END) as cnt_status2, COUNT(CASE WHEN t.status = '3' THEN 1 END) as cnt_status3, COUNT(CASE WHEN t.status = '4' THEN 1 END) as cnt_status4 FROM ticket t GROUP BY t.created
SELECT REGEXP_REPLACE( REGEXP_REPLACE( 'UPDATE PLUTO SET FIELD1='''',FIELD2='''',FIELD3=''TIGER'',FIELD4='''',FIELD5=''SCOTT'',FIELD9='''';', '(FIELD[0-9]+=(?'''',*))','') , '[, ]+;',';') from dual
var drs = from DataRow dr in Mytable.Rows where (col_Con == 'G' ? col_Val : 30) <= (col_Con == 'L' ? 30 : col_Val) select dr;
case when x = val1 or y = val2 or z in (val3, val4, val5) then result1 else defaultResult end
SELECT COUNT(cs.student_id) FROM Course c INNER JOIN course_student cs ON c.id = cs.course_id WHERE c.course_name = 'Database Design'
SELECT 'Average Is:' AS GRADE_TYPE_CODE, AVG(GRADE) AS GRADE FROM ( SELECT AVG(NUMERIC_GRADE) AS GRADE FROM GRADE WHERE STUDENT_ID = 5 AND SECTION_ID = 17 GROUP BY GRADE_TYPE_CODE ) myInnerTable;
select c.*, coalesce([DL-No], [SS-No], [State-ID-No]) as calculated from citizens c
SELECT t2.ID, t1.NAME FROM (SELECT ROW_NUMBER() OVER(ORDER BY ID DESC) AS rownumber, Name FROM MyTable) as t1 INNER JOIN (SELECT ROW_NUMBER() OVER(ORDER BY ID ASC) AS rownumber, ID FROM MyTable) as t2 ON t1.rownumber = t2.rownumber
SELECT DISTINCT ROUTINENAME, RESULT_SETS, REMARKS FROM SYSIBM.SYSROUTINES WHERE ROUTINESCHEMA='<schema>' AND FUNCTION_TYPE NOT IN ('S', 'T')
SELECT id FROM SomeTable INNER JOIN SomeTableGrouped ON (SomeTable.Column1 = SomeTableGrouped.Column1) AND (SomeTable.Column2 = SomeTableGrouped.Column2) AND (SomeTable.Column3 = SomeTableGrouped.Column3) WHERE SomeTableGrouped.id = ...
Product-Enquiries ============================= P_ID-E_ID PK, int, AUTO_INCR P_ID FK, int E_ID FK, int
select g.dte, coalesce(sum(dt.minutes), 0) as minutes from generate_series('2016-02-07'::timestamp, '2016-03-20'::timestamp, interval '7 day') g(dte) left join downtime dt on dt.timestamp >= g.dte and dt.timestamp < g.dte + interval '7 day' group by g.dte order by g.dte;
when matched update set .... merge_status = 'U' when not matched insert ( ...., merge_status, ... ) values ( ...., 'I', .... )
select "(" + DatabaseOpenHelper.KEY_ROW_ID + " - 1)/4 + 1" as field from table where field not like '%.%'
SELECT allCustomer.customerName, allCity.cityName FROM Customer finder JOIN City finderCity ON finder.zipCode = finderCity.ZipCode JOIN City allCity ON finderCity.CityName = allCity.CityName AND finderCity.StateCode = allCity.StateCode JOIN Customer allCustomer ON allCity.ZipCode = allCustomer.ZipCode WHERE finder.customerName = 'William' and allCustomer.customerName != 'William'
select 'All'= LTRIM(ISNULL(Name+' ','')+ISNULL(City+' ','')+ISNULL(CAST(Age as varchar(50))+' ','') from zPerson)
select code from tbl1 minus select code from tbl2;
update smf_members a, (select user_id, sum(if(karma_action='+',1,0)) karma_good, sum(if(karma_action='-',1,0)) karma_bad from phpbb_karma group by user_id) b set a.karma_good=b.karma_good, a.karma_bad = b.karma_bad where a.id_member = b.user_id;
Table Student_Teacher_Mapping Id (Int) TeacherId(Int) // foreign key for teacher table StudentId(Int) // foreign key for student table
;WITH Actions AS ( SELECT ActionID, ActionType, ActionDate, UserID, ContentID, RowNum = ROW_NUMBER() OVER(PARTITION BY ContentID, ActionType ORDER BY ActionDate DESC) FROM dbo.YourTable WHERE ...... ) SELECT ActionID, ActionType, ActionDate, UserID, ContentID, FROM Actions WHERE RowNum = 1 ORDER BY ActionDate DESC
SELECT SUM(CASE WHEN pid = 2 THEN area ELSE 0 END) As "2", SUM(CASE WHEN pid = 4 THEN area ELSE 0 END) As "4", SUM(CASE WHEN pid = 9 THEN area ELSE 0 END) As "9", SUM(CASE WHEN pid = 11 THEN area ELSE 0 END) As "11" FROM t GROUP BY class ORDER BY class
user.conversations.includes{messages}.group{id}.having{messages.id == max(messages.id)}
SELECT trunc(minutes/600)||' working days, '||trunc(mod(minutes,600)/60)||' working hours and '||mod(minutes,60)||' minutes' FROM (SELECT 1000 as minutes FROM dual)
SELECT t1.id + 1 FROM tbl t1 LEFT JOIN tbl t2 ON t1.id + 1 = t2.id WHERE t2.id IS NULL ORDER BY t1.id ASC LIMIT 1
SET DATEFORMAT dmy; GO UPDATE #Test SET new_CHQ_DATE = CONVERT(VARCHAR(20), CHQ_DATE, 105) WHERE ISDATE(CHQ_DATE) = 1; --reset DATEFORMAT back to whatever it was
CurveID = 15 Dim i As Integer For i = 0 to 76 MaxOfMarkAsofDate = #7/22/2015# - i 'Your inner code here ' Next i End Sub
TABLE: Transaction idTransaction INT NOT NULL AUTO_INCREMENT PRIMARY KEY TABLE: TransactionWorker fkTransaction INT NOT NULL fkWorker INT NOT NULL TABLE: Worker idWorker INT NOT NULL PRIMARY KEY
SELECT a = 'rajat' + tableB.a FROM dbo.b tableB WHERE tableB.b >= (SELECT TOP 1 c FROM d ORDER BY e DESC)
UPDATE myTable SET description = newdesc FROM Pieces WHERE Pieces.id = myTable.itemid
declare @createdon datetimeoffset set @createdon = '2008-12-19 17:30:09.1234567 +11:00' select CONVERT(datetime2, @createdon, 1) --Output: 2008-12-19 06:30:09.12 select convert(datetimeoffset,CONVERT(datetime2, @createdon, 1)) --Output: 2008-12-19 06:30:09.1234567 +00:00
select firstname, lastname FROM ( SELECT firstname, lastname, row_number() over (partition by status_id order by random()) as rn FROM calls WHERE status_id = ANY (ARRAY [1,2,3,4,5]) ) t where rn <= 50;
SELECT count(sales.for_Date) FROM (SELECT Trunc(current_date) - (LEVEL - 1) as d FROM Dual CONNECT BY Level <= 10) as DateRangeTbl LEFT JOIN sales ON Sales.for_Date = DateRangeTbl.d GROUP BY DateRangeTbl.d
--Replace db with your database name USE db --Create a database role CREATE ROLE db_execonly --Grant EXEC permissions to the role GRANT EXECUTE TO db_execonly --Add users to the new role EXEC sp_addrolemember 'db_execonly', 'user1' EXEC sp_addrolemember 'db_execonly', 'user2' --Deny permissions to specific objects for user2 DENY EXEC ON OBJECT::dbo.usp_sproc1 TO user2 DENY EXEC ON OBJECT::dbo.usp_sproc2 TO user2
SELECT Movies.* FROM Movies LEFT JOIN Rating ON Movies.mID = Rating.mID WHERE Rating.mID IS NULL
ALTER table phpbb_topics ADD poll_show_votes TINYINT(2) UNSIGNED NOT NULL DEFAULT 0
51sec * 120MB/sec ~ 6GB
SELECT PERSON FROM SPEAKS WHERE LANG IN( 'French', 'Russian', 'Italian') GROUP BY PERSON HAVING COUNT(DISTINCT LANG) = 3
INSERT INTO table (comment, otherCol1, otherCol2, otherCol3) SELECT 'Some comment', otherCol1, otherCol2, otherCol3 FROM table WHERE id=existingRowId;
Function CheckDateParameters(StartDate as Date, EndDate as Date) as Integer Dim msg as String msg = "" If (StartDate > EndDate) Then msg="Start Date should not be later than End Date" End If If msg <> "" Then MsgBox(msg, 16, "Report Validation") Err.Raise(6,Report) 'Raise an overflow End If End Function
SELECT fcategory,sum(fquantity*fprice) AS qty FROM items GROUP BY fcategory order by qty desc limit 1
SELECT tt.TOKENTYPE_NAME, t.TOKEN_NAME FROM TOKENS AS t JOIN TOKENTYPES AS tt ON tt.TOKENTYPE_ID = t.TOKENTYPE_ID
select b.name, b.date, sum(case when product='Apple' then qty end) Apples, sum(case when product='Banana' then qty end) Bananas from buyers b join purchases p on b.name = p.name and b.date = p.date group by b.name, b.date
SELECT Projects.*, UserLicenses.* FROM Projects LEFT JOIN UserLicenses ON Projects.id = UserLicenses.project_id and UserLicenses.user_id = 12 and UserLicences.Question = '6*7' and UserLicences.Answer = 42 ORDER BY name ASC
UPDATE lists l JOIN (SELECT listid, COUNT(*) AS cnt FROM list_items GROUP BY listid) li ON l.listid = li.listid SET l.subscribecount = cnt
SELECT DISTINCT A.MBLNR FROM MKPF A LEFT JOIN MSEG B ON B.SMBLN = A.MBLNR AND AND B.XBLNR_MKPF = '0150525913' WHERE A.XBLNR = '0150525913' and A.MANDT='368' and B.SMBLN is null;
UPDATE accounts SET account_id=CONCAT(LEFT(account_id,9), LPAD(id, 4, '0'))
UPDATE PS_Z_TREND_NOW_TBL a SET STATUS = ( CASE WHEN COUNT(SEC.IS_AW_AUTH_NAME) > 0 then 'M' ELSE null END ) FROM PS_IS_AW_SECURITY sec WHERE sec.IS_AW_AUTH_NAME LIKE '%Manager%'
select * from tblTagGlass ttg inner join tblTagGlass ttgC ON ttg.JobID = ttgC.JobID AND ttg.PartCode = ttgC.PartCode where (ttg.TagHeight != ttgC.TagHeight OR ttg.TagWidth != ttgC.TagWidth) AND ((ttg.TagHeight >= ttgC.TagHeight AND ttg.TagWidth >= ttgC.TagWidth) OR (ttg.TagHeight > ttgC.TagHeight AND ttg.TagWidth < ttgC.TagWidth)) order by ttg.PartCode
CREATE FUNCTION GetEmployees ( @EmployeeId int ) RETURNS TABLE AS RETURN ( WITH yourcte AS ( SELECT EmployeeId, ManagerID, Name FROM Employees WHERE EmployeeId = @EmployeeId UNION ALL SELECT e.EmployeeId, e.ManagerID, e.Name FROM Employees e JOIN yourcte y ON e.ManagerID = y.EmployeeId ) SELECT EmployeeId, ManagerID, Name FROM yourcte )
Select PRODUCT_ID_1, PRODUCT_ID_2 ,SCORE, (Case when b.Score= (Select Max(a.Score) from TableName a where a.PRODUCT_ID_1=b. PRODUCT_ID_1) then 1 else 0 End) as IS_MAX_SCORE_FOR_ID_1 from TableName b
SELECT c1.* FROM codes c1 LEFT OUTER JOIN codes c2 ON (c1.language_id = c2.language_id AND c1.time_posted < c2.time_posted) GROUP BY c1.id HAVING COUNT(*) < 5;
SELECT a.supplier_id , b.supplier_name , count(a.supplier_id) AS "number of foods" FROM l_suppliers b , LEFT JOIN l_foods a ON a.supplier_id = b.supplier_id GROUP BY b.supplier_id ,b.supplier_name ORDER BY b.supplier_id
TRANSFORM iif(Count(*)>0,"Y","N") AS Val SELECT Year(YourDate) AS Y, Month(YourDate) AS M FROM YourTable GROUP BY Year(YourDate), Month(YourDate) PIVOT Day(YourDate) In ("01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31");
update tbl1 set col1 = a.col1, col2 = a.col2, col3 = a.col3 from tbl2 a where tbl1.Id = 'someid' and a.Id = 'differentid'
select isnull(.. Massive subquery here..., FirstName)
SELECT COUNT(DISTINCT store_code), supplier_code FROM myTable GROUP BY supplier_code HAVING COUNT(DISTINCT store_code) >= 4 ORDER BY 2
UserID FirstName 1 Bob 2 John HobbyID HobbyName 1 Golf 2 Photography UserHobbyID UserID HobbyID 1 1 1 2 1 2 3 2 2
update crates cr set cr.total_pieces = ( select sum(bu.pieces) pieces from crates cr join boxes bo on bo.crate_id = cr.id join buckets bu on bu.box_id = box.id where crate.id = cr.id group by crate.id );
SELECT i.imports, e.exports, s.size FROM size AS s LEFT JOIN (SELECT size_id,sum(weight) AS imports FROM import_size GROUP BY size_id) AS i ON s.id=i.size_id LEFT JOIN (SELECT size_id,sum(weight) AS exports FROM export_size GROUP BY size_id) AS e ON s.id=e.size_id
SELECT * FROM `Users` ORDER BY (`city` = 'New York') DESC, `city`
SELECT users.*, COUNT(*) AS role_count, SUM(case roles.name when 'user' then 1 else 0 end) AS IsUser FROM users JOIN roles_users ON users.id = roles_users.user_id JOIN roles ON roles_users.role_id = roles.id GROUP BY users.id HAVING COUNT(*) = 1 AND SUM(case roles.name when 'user' then 1 else 0 end) = 1
select con, min(line_no), sum(wgt), pallet from dwd_temp group by con, pallet
SELECT A,B FROM table_name WHERE NOT (A = 'EF' AND B = 'RUI')
SELECT avg( col1 + col2 + col3)/3.0 FROM tbl
SELECT s.period, s.year, s.amount FROM salaries s where (s.year, s.period) in (select year, period from periods)
select '{?District}'
CREATE VIEW vw_table1 AS SELECT rownum a , b, c, d FROM table1
select (case when 1>2 then 1 else 0 end) from dual
var loginNames = session .CreateCriteria<SimpleUsers>() .Add(Restrictions.In("loginName", new[] { "admin", "oscar", "stig" })) .SetProjection(Projections.Property("loginName")) .List<string>();
declare @countryid int Insert into country (Name) values('canada'); SELECT @countryid = SCOPE_IDENTITY() Insert into provinces (CountryId, Name) values (@countryid,'ontario');
where Sp.sprite_change_ind is null and sh.TRAN_REQUEST_DATE between sysdate-1 and sysdate and (sf.stcr_term_code = '201401' or sf.stcr_term_code = '201402') AND SV.RSTS_ENRL = 'Y' and trim(NL.DGMR_DEGS_CODE) is null
select 'FY'||TRUNC(date + 83, 'YYYY') as FY, Site, count(*) from mytable group by 'FY'||TRUNC(date + 83, 'YYYY'), site
CREATE TRIGGER updateTotalsalary AFTER INSERT OR UPDATE ON salary FOR EACH ROW WHEN (pg_trigger_depth() = 0) EXECUTE PROCEDURE reCount();
SELECT COUNT(*) FROM subscriptions WHERE DAYOFMONTH(created_at) = DAYOFMONTH(NOW())
select StaffId, fName, lName, sum(Quantity) from DeliveryStaff ds, Orders o, OrderItems oi where StaffId = DeliveryStaffId and o.OrderId = oi.OrderId group by StaffId, fName, lName
SELECT name FROM table WHERE name LIKE '%'
var Query : TQuery; PIN : string; begin Query.Sql.Text := 'SELECT pin FROM table WHERE id = value' Query.Open; PIN :+ Query.FieldByName('pin').AsString; Query.Close end;
with drg as (SELECT DISTINCT patientID, admissionDate, dischargeDate, drgCode from largeTable) update s set s.drgCode = l.drgCode from smallTable s join drg l on s.patientId = l.patientId and s.admissionDate = l.admissionDate and s.dischargeDate = l.dischargeDate
ddply(tab, .(time, id), summarise, product = paste(product, collapse="&"))
write-host $DBname."Channel Database Name"
SELECT * FROM categories_widgets cw JOIN widgets w ON w.id = cw.widgets_id WHERE cw.category_id = $my_cat_id ORDER BY w.id DESC LIMIT 0,10
CREATE TABLE TEST(ID INT, NAME VARCHAR); INSERT INTO TEST VALUES(1, '10'); CREATE TABLE TEST2 AS SELECT CAST(ID AS VARCHAR) A, CAST(NAME AS INT) X FROM TEST;
SELECT * FROM table WHERE datetime LIKE '2007-05%'
SELECT distinct T0.CardCode ,T1.CardName ,T0.State FROM CRD1 T0 LEFT OUTER JOIN OCRD T1 ON T0.CardCode=T1.CardCode
CREATE TABLE #tempTable (Value int primary key); INSERT INTO #tempTable SELECT DISTINCT Value FROM dbo.func_ConvertListToTable('4,6,5,1,2,3,9,222',',')
SELECT E.EmployeeName, COUNT(T.TaskID) AS [Number of Tasks], SUM(T.Duration) as [Time Spent] FROM Employee E, EmployeeTasks ET, Tasks T WHERE ET.EmployeeID = E.EmployeeID AND ET.TaskID = T.TaskID GROUP BY E.EmployeeName
select * from Table t where lastRanAt < dateadd(mi, (t.refreshTime * -1), getdate())
... from product left join provider ON product.provider_id = provider.id left join product_attribute on product.id = product_attribute.product_id and product_attribute.attribute_id = 8 where `product`.`active` = '1' and `product`.`url` IS NOT NULL and `product`.`provider_id` = '7' ...
select * from yourtable order by case when comment = 'Do not use' then 1 else 0 end, comment, cp_code
select Column1 from YourTable order by convert(datetime, left(Column1, 3)+' 01, '+right(Column1, 4), 107)
Select ID, OrderID, Item, Price from customerOrders Where [Order] = 1 UNION ALL Select NULL, NULL, NULL, SUM(Price) from customerOrders Where [Order] = 1 ORDER BY CASE WHEN ID IS NULL THEN 2 ELSE 1 END, ID;
UPDATE aTable SET aColumn = 1 WHERE id IN (SELECT /*+ cardinality( pt 10 ) */ COLUMN_VALUE FROM TABLE (pTable) pt );
$name = 'John'; $order = new Zend_Db_Expr($this->getAdapter()->quoteInto("name = ?", $name) ." DESC, `name`"); $select = $this->select(); $select->order($order); return $this->fetchAll($select);
ALTER TABLE x ADD COLUMN y uniqueIdentifier null GO UPDATE TABLE x SET y = NEWID() --Or NEWSEQUENTIALID() if its safe GO ALTER TABLE x ALTER COLUMN y uniqueIdentifier NOT NULL GO ALTER TABLE x DROP CONSTRAINT PK_PrimaryKeyConstraintName GO ALTER TABLE x DROP COLUMN PrimaryKeyColumn GO ALTER TABLE x ADD CONSTRAINT PK_NewPrimaryKeyConstraint PRIMARY KEY CLUSTERED ( y ASC ) GO
1.9.3-p194 :014 > numberOfAccounts => [[#<BigDecimal:119cd90,'0.123E3',9(36)>], [#<BigDecimal:119cd18,'0.456E3',9(36)>]] 1.9.3-p194 :015 > numberOfAccounts.flatten!.collect!(&:to_i) => [123, 456] 1.9.3-p194 :016 > numberOfAccounts => [123, 456]
$jsonArray = array(); foreach ( $results as $result ) { $jsonArray[] = array( 'personal_data' => array( 'id' => $result->id, 'name' => $result->name, 'street' => $result->street, ... )); } return $jsonArray;
SELECT hg.name, (SELECT COUNT(*) FROM HOSTS h WHERE h.hostgroup_id = hg.id) FROM HOSTGROUPS hg
SELECT e.* FROM `event` e # 'e' from 'event' LEFT JOIN `event` d # 'd' from 'derived'; `LEFT JOIN` gets ALL entries from `e` ON e.id = d.derivedfrom_id # match an event `e` with all those `d` derived from it WHERE d.id IS NULL # keep only events `e` without derived events `d` ;
SELECT events.title, events.id, events.location, events.date, Sum(active_quote_items.cost) FROM active_quote_items LEFT JOIN events ON active_quote_items.event_id = events.id GROUP BY events.title, events.id, events.location, events.date
SELECT Filetype, COUNT(*) AS TypeCount FROM tbl_Uploads GROUP BY Filetype
select id,cat,max(realtime)-min(realtime) as interval from table group by 1,2;
select sum(length(REGEXP_SUBSTR(word, '^[A-Z]*'))) as capitalized_sum from mytable;
Select * from (MY SELECT STATEMENT order by A desc, B) where ROWNUM = 1;
select USER,collect_set(ITEM) from ( select USER, ITEM,row_number () over (partition by USER order by SCORE desc) RN from A ) t1 where RN <= 5 group by USER;
select * from order where order_number in (select order_number from order_details group by order_number having count(*) = 1)
with userCTE as ( select u.userId , c.columnId from tblUsers as u cross join tblColumns as c ) select u.* , Coalesce(cd.ColumnDatacontent, 'N/A') AS columnDataContent from userCTE as u left join tblColumnData as cd on u.columnId = cd.columnId and u.userID = cd.userId
MERGE PermanentT AS [TARGET] USING #TempT AS [SOURCE] ON [TARGET].PrimId = [SOURCE].PrimId AND [TARGET].MyDates = [SOURCE].MyDates WHEN MATCHED AND [TARGET].PRICE <> [SOURCE].PRICE THEN UPDATE SET [TARGET].PRICE = [SOURCE].PRICE WHEN NOT MATCHED THEN INSERT (PrimID, myDate, myPrice) VALUES (SOURCE.PrimID, SOURCE.myDate, SOURCE.myPrice);
cstmt = conn.getNewCallableStatement("{call MY_PLSQL_PACKAGE.MY_PROC(?,?,?)}"); cstmt.setString(1, stringOutput1); cstmt.setString(2, stringOutput2); cstmt.registerOutParameter(3, OracleTypes.CURSOR); cstmt.execute;
select t1.name as name1, t2.name as name2, count(*) from table t1 inner join table t2 on t1.Lived_in = t2.Lived_in and t1.name > t2.name group by t1.name,t2.name
SELECT a.request_id, a.request_date, a.customer_id, a.request_type, a.target_customer, a.customer_id, a.agent_number, a.merchant_number, a.bill_reference, d.loan_id, a.amount FROM requests a left join loans d on a.loan_id=d.loan_id where d.loan_status=12
Update table Set mydata = '$ ' + Right(mydata, Len(mydata)-1) Where mydata Not Like '$ %'
SELECT T1.Org, T1.Dest, T1.Amount, T2.Org, T2.Dest, T2.Amount, T3.Org, T3.Dest, T3.Amount FROM dbo.RateTable T1 JOIN dbo.RateTable T2 ON T1.Org = T2.Org JOIN dbo.RateTable T3 ON T1.Dest = T3.Dest AND T2.Dest = T3.Org ----------------------------------------^ WHERE T1.Amount > (T2.Amount + T3.Amount);
select account from tbl where item in ('apples','pears') group by account having count(distinct item) = 2
select year, quarter, 'P1' as value, p1 from table1 union all select year, quarter, 'P2' as value, p2 from table1;
WITH sequenced AS ( SELECT ROW_NUMBER() OVER (ORDER BY running_id) - 1 AS sequence_id, * FROM RUNNING_COLA_IS_AFRICA ) SELECT sequence_id / 50 AS group_id, MIN(running_id) AS running_id_first, MAX(running_id) AS running_id_last, COUNT(*) AS size_of_group FROM sequenced GROUP BY sequence_id / 50
SELECT X.value('.','int') as 'TextResult' FROM Answers as 'a' CROSS APPLY a.answer.nodes('/DocumentElement/Screening/TextResult') as answers(X)
SELECT * FROM ( SELECT week,name,effort FROM [Group$] ) as s PIVOT ( SUM(effort) FOR [name] IN ('quentin','joe','tracy') )AS pvt
SELECT a.columns FROM table a WHERE a.ID IN (SELECT TOP 1 b.id FROM table b WHERE b.Name = a.Name ORDER BY b.Date DESC)
d1, i1, f1 d1, i2, f2 d2, i2, f3, d3, i3, f3
select CONTACTNAME, SUBSTRING (EMAIL,CHARINDEX('@',EMAIL,0)+1,LEN(EMAIL)) as Email from CONTACTS result
SELECT CONVERT(VARCHAR(50), getdate(), 121)
WHERE ColA LIKE '%2[%]%'
# On Jan 5, 2011, Provider A makes $500 total off of its products SELECT prov.*, SUM(sales.price) FROM provider AS prov INNER JOIN sales_transaction AS sales on sales.provider_id = prov.id WHERE provider.name = 'Provider A' AND sales.created_at BETWEEN '2012-01-05 00:00:00' AND '2012-01-05 23:59:59' GROUP BY prov.id
select round(DBMS_RANDOM.VALUE (0, 1)) from dual
select * from ( select * from dbo.[sometable] ) as X
select item_id , item_name, update_date, from items order by update_date desc , item_id desc;
select users.user, users.id, count (species.name) from users left join species on users.id = species.user group by users.user, users.id order by count (species.name) desc
[code].order("SUM((prices.price * #{params[:prod_id].to_i}) + profiles.shippingCost)").all
select * from some_table where record_valid_flg = 1 and CASE WHEN user_param = '1' THEN age > 20 ELSE name like 'Mr%' END;
select employee_id, cast(collect(sale_type(product_id, sale_amount)) as sales_type) from employee_sales group by employee_id
SELECT Table2.Years,Table1.TeamName,IFNULL(AVG(TeamWinCount), 0) AS TeamWinCount FROM Table2 CROSS JOIN Table1 LEFT JOIN Table4 ON Table1.TeamId=Table4.TeamId AND Table2.YearsId=Table4.YearsId GROUP BY Table2.Years,Table1.TeamName
SELECT i.name AS itemname, GROUP_CONCAT(s.id ORDER BY s.id) AS salesids, GROUP_CONCAT(s.date ORDER BY s.date) AS salesdates, GROUP_CONCAT(s.containerid ORDER BY s.containerid) AS containerids, GROUP_CONCAT(c.name ORDER BY c.name) AS containertypes FROM ITEMS i JOIN SALE s ON s.id = i.salesid JOIN CONTAINERS c ON c.id = s.containerid GROUP BY i.name
IF NOT EXISTS (SELECT ...) BEGIN -- do all the things END
select count(*)+1 from table t where score > SCORE_PARAMETER;
SELECT WSN, MAX(BASE) as MaxBase, MIN(TOP) as MinTop INTO memory FirstPass FROM PERFS GROUP BY WSN ; SELECT (MaxBase - MinTop) as Calc FROM memory FirstPass
drop index primarykey on bar
select * from Example unpivot ( numbers for type in (x,y,z) ) as p pivot ( Max(numbers) for site in ([A],[B],[C]) ) as q
CREATE VIEW dbo.DefaultBarcode WITH SCHEMABINDING AS SELECT StockID, Barcode FROM dbo.Barcode WHERE IsDefault = 1 GO CREATE UNIQUE CLUSTERED INDEX UC_DefaultBarcode ON dbo.DefaultBarcode (StockID) GO
SELECT b.CODE as code, COUNT(a.id) AS a_count FROM b LEFT JOIN (j JOIN a ON j.a_id = a.id) ON j.b_id = b.id GROUP BY b.CODE ASC
;WITH CTE AS ( SELECT B.objectIdA ,A.objectIdB ,ROW_NUMBER() OVER (PARTITION BY B.objectIdA ORDER BY A.objectIdB DESC) rn FROM TableA A INNER JOIN TableB B ON A.objectIdA = B.objectIdA ) SELECT C.objectIdA ,C.objectIdB FROM CTE WHERE rn = 1
;with PowersOf2 as ( select 1 as Number union all select A.Number * 2 from PowersOf2 as A where A.Number < 64 ) select P.PERSON_NAME, sum(distinct P.PERSON_DAY & PowersOf2.Number) from PERSON_DAYS as P left outer join PowersOf2 on PowersOf2.Number <= P.PERSON_DAY where P.PERSON_ID = @myId group by P.PERSON_NAME
PREPARE test AS SELECT * FROM users WHERE first_name = $1; EXECUTE test ('paul'); DEALLOCATE test;
select a.name, a.phone, b.mobile, b.relation, case when a.phone<>'' and b.mobile<>'' then CONCAT(a.phone, ' ', b.mobile) when a.phone<>'' and b.mobile='' then a.phone when a.phone='' and b.mobile<>'' then b.mobile else '' end as phone from abc a join bcdb where a.id=b.id and b.relation='a123'
with cte as (select 1 i union all select i+1 i from cte where i < 5) select dateadd(d, i-1, '2010-01-01') from cte
<% set conn = CreateObject("ADODB.Connection") on error resume next conn.open "remote connection string" if err.number <> 0 then response.write "unable to connect, trying other" conn.open "alternate connection string" end if on error goto 0 %>
SELECT a1.FlightId, COUNT(a2.FlightId) FROM A a1 LEFT JOIN A a2 ON a1.id = a2.id AND a2.Roles = 'Steward' GROUP BY a1.FlightId;
select * from subjects where id not in (select subject.id from categories )
/*+ parallel(4) */
SELECT t1.id as id, t1.text as english, t2.text as translated FROM translation t1 LEFT JOIN translation t2 on t1.id = t2.id and t2.locale = :locale WHERE t1.locale = 'en_US' ORDER BY translated
( SELECT ... WHERE ... AND pattern.direction='inbound' ... LIMIT 1) UNION ALL ( SELECT ... WHERE ... AND pattern.direction='outbound' ... LIMIT 1 );
SELECT * FROM waypoint WHERE ID NOT IN( (SELECT MIN(ID) FROM waypoint WHERE booking_id="1"), (SELECT MAX(ID) FROM waypoint WHERE booking_id="1") ) AND booking_id="1";
select ((close-open)/open) as daychange, date from prices order by daychange desc limit 1 ;
SELECT Department, COUNT(DISTINCT ID) AS total, COUNT(DISTINCT CASE WHEN course LIKE 'AS%' THEN id END) Total_AS FROM schedule GROUP BY Department ORDER BY Department ASC
select title from sakila.film f join sakila.film_actor fa on fa.film_id = f.film_id where fa.actor_id = @id
CREATE PROCEDURE Schema.Proc (@C1 int) AS BEGIN INSERT INTO SmallTable(C1, C2, C3) --- Columns of smaller table SELECT C1, C2, C3 ---Columns of Master table FROM MasterTable WHERE C1 = @C1 --- Where value of C1 of Master table matches the value of @C1 END
NSString *databaseName = @"mainDB.sqlite"; NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDir = [documentPaths objectAtIndex:0]; databasePath = [documentsDir stringByAppendingPathComponent:databaseName];
select sum(impact) from (select top 18 id, obsDate, impact from diseaseHits where diseaseID = 2 AND pCode = 3352 AND obsDate <= '2014/11/5 11:30:00 PM' ) t;
select id from tbl group by id having count(distinct loc) > 1;
SELECT t1.acr FROM table1 t1 LEFT JOIN table2 t2 on t2.ocd = t1.ocd AND t2.switch = 'Y' GROUP BY t1.acr HAVING COUNT(t2.ocd) = COUNT(t1.ocd)
SELECT A FROM ( SELECT A, B FROM TableA UNION SELECT A, B FROM TableB ) AS tbl WHERE B > 'some value'
SELECT id FROM [QTRA410].[Admin].[qt_request] WHERE id IN (SELECT Max(r1.id) FROM [QTRAX4619410].[QTRAXAdmin].[qt_request] r1 join [QTRA410].[Admin].[qt_request] r2 on r1.id = r2.id AND r2.requestcode = 'FOREMAN')
SELECT city, GROUP_CONCAT(name) FROM contacts GROUP BY city
SELECT `s`.`song_name`, GROUP_CONCAT(`a`.`artist_name`) `artists` FROM `assoc` JOIN `songs` s ON `s`.`song_id`=`assoc`.`song_id` JOIN `artists` a ON `a`.`artist_id`=`assoc`.`artist_id` GROUP BY `s`.`song_id`
DELETE FROM myTable AS t1 WHERE EXISTS ( SELECT 1 FROM myTable AS t2 WHERE t1.ID=t2.ID AND t1.DateCreated<t2.DateCreated)
SELECT * FROM game WHERE id = 1 LIMIT 1;
select T2.Name from Table2 as T2 where not exists (select * from Table1 as T1 where T1.Name = T2.Name)
CASE WHEN COALESCE(@Date1, '1/1/1980') > COALESCE(@Date2, '1/1/1980') THEN @Date1... ELSE @Date2... END
select min(Id) as Id,max(job) as Job,max(FNAME) as FNAME,max(LName) as LNAME from yourtable
SELECT ID, [Date Entered], Item, Status FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY Item ORDER BY [Date Entered] DESC)'RowRank' FROM Table1 WHERE Status = 'Ready' )sub WHERE RowRank = 1
SELECT StatusReportID, StatusReportTime, CarNumber, VehicleID, DriverNumber, DriverID, VehicleStatus, LocationX, LocationY, Speed, Direction, InvalidGPS FROM dbo_VehicleStatusReport WHERE StatusReportID > ((SELECT max(StatusReportID) FROM dbo_VehicleStatusReport) - 3000)
SELECT t.id, t.start, t.end, t.start - t.end AS difference FROM TABLE t ORDER BY difference DESC
select SUBSTRING(TextData,1,25), count(*) as howMany, sum(Duration) as totalTime from [Tmp].[dbo].[tmp2] group by SUBSTRING(TextData,1,25) order by 3 --3rd column
select u.user_id, f1.status, f2.status from user u left outer join friend f1 on f1.user_id = u.user_id and f1.user_friend_id = 1 left outer join friend f2 on f2.user_friend_id = u.user_id and f2.user_id = 1 where u.name like '%'
SELECT * FROM `articles` WHERE `body` REGEXP '[[:<:]][acgj]'
SELECT c.id 'client_id', g.Id 'group_id', ISNULL(cg.client_id) FROM (client c CROSS JOIN group g) LEFT JOIN client_group cg ON c.id = cg.client_id AND g.id = cg.group_id
Select op_id ,count(op_id) as itemsOpened ,count(closed_by) as itemsClosed FROM dbo.Dealer_Track_Work WHERE Date_Received between <cfqueryparam value="10/13/2015" /> AND <cfqueryparam value="10/26/2015" /> AND op_id IN (<cfqueryparam value="192,229,123" list="true">) GROUP BY op_id ORDER BY op_id ASC
ALTER TABLE your_table MODIFY some_column INT NOT NULL AUTO_INCREMENT;
SELECT x.* , x.a - SUM(y.b) FROM my_table x JOIN my_table y ON y.date_created <= x.date_created GROUP BY x.id;
context.Table.Where(k => k.TURKCE_ADI.ToLower().Contains("lpg")).ToList();
return db.query(DBHelper.TABLETRANSACTIONS, null, null, null, null, null, C_TAG_SCAN_TIME + " DESC");
SELECT name, email FROM members WHERE id IN (SELECT id FROM profilefields WHERE field1 = 'X' and field2 = 'Y')
;with cte as ( select M_ID, STEP, DateTo, AddDays from #t1 where STEP = 1 union all select t.M_ID, t.STEP, dateadd(dd, c.AddDays, c.DateTo), t.AddDays from #t1 t inner join cte c on t.M_ID = c.M_ID and t.STEP = c.STEP + 1 ) select * from cte
DECLARE @Result nvarchar(max) DECLARE @Xml xml = (select * from master..spt_values FOR XML PATH) SELECT @Result = CAST(@Xml.query('string(.)') as nvarchar(max)) PRINT @Result
Select DATEDIFF(dd, '2014-09-22 09:14:01.850','2014-09-24 17:14:53.243') + 1
update contacts set title =@title, firstName=@firstName, middleName=@middleName, lastName=@lastName where contactID=@ContactID
select event_date, sum(case when cnt between 0 and 2 then 1 else 0 end) as "0-2", sum(case when cnt = 3 then 1 else 0 end) as "3", sum(case when cnt between 4 and 99 then 1 else 0 end) as "4-99" from (select cast(event_time as date) as event_date, name, count(1) as cnt from log group by cast(event_time as date), name) baseCnt group by event_date order by event_date
select s.name, m.mark, c.definition from students s inner join marks m on s.id = m.id inner join classes c on m.code = c.code
select colname,1 as OrderCol from table where <cond1> union select colname,2 as OrderCol from table where <cond2> order by OrderCol
SELECT COUNT(DISTINCT(STR(a) + ',' + STR(b))) FROM @YourTable
SELECT string, MIN(low), MAX(high) FROM table GROUP BY string
'.*MYSTART2#(.+?)\~.*'
SQL> recover database until cancel using backup controlfile; ORA-00279: change 6846169 generated at 01/20/2016 16:00:29 needed for thread 1 ORA-00289: suggestion : +DATA ORA-00280: change 6846169 for thread 1 is in sequence #521 Specify log: {<RET>=suggested | filename | AUTO | CANCEL} cancel Media recovery cancelled. SQL> alter database open resetlogs; Database altered.
select user_name, new_status, status_change_date as StartTime, lead(status_change_date) over (partition by user_name order by status_change_date) as EndTime from app_users
SELECT * FROM History WHERE symbol = $symbol AND date = (SELECT MAX(date) FROM History)
SELECT md.Doc_no, md.Doc_date, md.Doc_type, mp1.Product_Details Item_details1, md.Item_qty1, md.Item_price1, mp2.Product_Details Item_details2, md.Item_qty2, md.Item_price2 FROM master_document md INNER JOIN master_product_table mp1 ON md.Item_code1 = mp1.ID INNER JOIN master_product_table mp2 ON md.Item_code2 = mp2.ID ;
select to_char(your_date_column, 'mon-dd') from your_table
select cupcake from cupcake_rating where delicious_rating in ('Super Delicious', 'Mouth Heaven') group by cupcake having count(distinct delicious_rating) = 2
select table1.*, fyyear, fymonth from table1 inner join table2 on convert(date,convert(varchar(4),table1.year)+'-'+convert(varchar(4),table1.month)+'-'+convert(varchar(4),table1.day),120) between table2.stdate and table2.eddate
select customer_id, regexp_substr(exp_comment,'.*'||chr(10)||'(.*Export)', 1, 1, 'n', 1) as export from export_comments
SELECT t1.number FROM t t1 JOIN (SELECT LEVEL FROM dual CONNECT BY LEVEL<=(SELECT MAX(number) FROM t)) t2 ON t2.level<= t1.number;
SELECT REGEXP_SUBSTR(text, '[:digit:]{5}', 1, 1) AS first_refid, REGEXP_SUBSTR(text, '[:digit:]{5}', 1, 2) AS second_refid FROM TABLE
SELECT tableA.username as userA tableB.username as userB FROM tableA CROSS JOIN table B WHERE tableA.username='abc' AND tableB.username='abcd' AND tableB.password='abcd';
sqlplus -S user/password << EOF | grep Primx select * from emp; EOF
UPDATE Table1 SET recordTime = FORMAT(MID(recordTime, 4, 2) + '/' + LEFT(recordTime, 2) + MID(recordTime, 6), 'yyyy-mm-dd hh:nn:ss') WHERE recordTime LIKE '##/##/####*'
SELECT M.ID, M.Value, D.ID DETAILID, D.Value DetailValue, D.Date FROM TABLE_MASTER M LEFT JOIN ( SELECT * FROM TABLE_DETAIL1 UNION ALL SELECT * FROM TABLE_DETAIL2) D ON M.ID = D.MASTER_ID
create table C as( select a.id, a.date_id, SUM(CASE WHEN b.hits >= '9' THEN 1 ELSE 0 END)/COUNT(b.hits) AS percent from A a join B b on a.id = b.id group by 1,2) with no data primary index(id);
select 'exdb' [@DataBaseName], (select t.table_name [@TableName], (select c.COLUMN_NAME [@ColumnName] from INFORMATION_SCHEMA.COLUMNS c where c.TABLE_NAME = t.TABLE_NAME for xml path('Column'), type) from INFORMATION_SCHEMA.TABLES t for xml path('Table'), type) for xml path('DataBase')
display(N) :- w(Order,_,Word,Class), ( N > Order -> write(Word), write(' '), write(Class), nl ; true ), fail .
SELECT t1.Name AS [Name] FROM Table1 AS t1 UNION SELECT t2.FName as [Name] FROM Table2 AS t2
Dim myadapter As New MySqlDataAdapter("SELECT * FROM core WHERE F1 = '" & strdocument &"'", dbConn)
SELECT * FROM (SELECT USER_ID,COUNT(comp_id) as numberr FROM COMPETITION GROUP BY USER_ID ORDER BY COUNT(comp_id) DESC) T1 WHERE rownum=1;
WHERE [value] like N'%■%'?
SELECT status, id AS ticket, summary, priority, keywords, datetime(changetime/1000000, 'unixepoch') AS last_updated, milestone AS __group__, reporter, owner FROM ticket t WHERE status NOT IN ('closed', 'resolved') AND (CASE WHEN '$MILESTONE' != '' THEN (milestone='$MILESTONE') ELSE (milestone in ('project1', 'project2', 'project3')) END) ORDER by t.milestone ASC, p.value
INSERT INTO myTable (ID) values (5);
x <- c('11111-111-11', '11111-1111-1', '1111-1111-11') y <- strsplit(x, '-') myfun <- function(y) { first <- sprintf('%05d', as.integer(y[1])) second <- sprintf('%04d', as.integer(y[2])) third <- sprintf('%02d', as.integer(y[3])) paste(first, second, third, sep='-') } sapply(y, myfun) # [1] "11111-0111-11" "11111-1111-01" "01111-1111-11"
SELECT UserId, MAX(TIMESTAMP) FROM ACCTRANS GROUP BY UserId
Select * from Table1 Except Select * from Table2
INSERT INTO Table_C (SELECT null, Table_A.item, Table_B.color, null FROM Table_A CROSS JOIN Table_B);
alter table tablename modify ( column_name varchar2(13) );
SELECT Column1, Column2 FROM Table WHERE CONVERT(datetime, DateColumn, 3) BETWEEN @StartDate AND @EndDate
UPDATE table SET a = replace..... OUTPUT DELETED.* WHERE stuff
select MAX(TO_NUMBER(REPLACE(SYSTEM_ID,'SYS',''))) from TABLE;
SELECT @Action = CASE WHEN EXISTS(SELECT 1 FROM INSERTED) AND EXISTS(SELECT 1 FROM DELETED) THEN 'U' WHEN EXISTS(SELECT 1 FROM INSERTED) THEN 'I' ELSE 'D' END;
create table measurements ( id, seq integer, -- between 1 and 256 ts timestamp, -- Timestamp of the measurement value decimal(...) )
select t2.ref, xx.Dates, xx.Status from Table2 t2 join ( select filename, dates, status from yt a where a.dates = ( select max(dates) from yt b where a.filename = b.filename )) xx on t2.filename = xx.filename;
SELECT NBAGameLog.Opp, AVG(NBAGameLog.Points) FROM Players INNER JOIN NBAGameLog ON Players.Player_ID = NBAGameLog.Player_ID WHERE (NBAGameLog.Date_Played Between Date()-15 And Date() AND Players.Position = "C" GROUP BY NBAGameLog.Opp;
select a.*, b.sumb from ta a left join (select b.uid, sum(b.amount) as sumb from tb b group by b.uid ) b on a.uid=b.uid where a.year = 'value';
select cola, regexp_replace(cola, '([^*|]*)\|([^*|]*)(\*|$)','\2|\1\3') as swapped_col from ( select '3456|Abc*7890|Def*9430|Ghi*3534|Jkl' cola from dual )
DECLARE @email VARCHAR(100) SET @email = 'firstname.lastname@email.com/IMCLientName' SELECT SUBSTRING(@email,0, CHARINDEX('@',@email))
SQL> ALTER SESSION SET nls_date_format = 'dd/mm/yyyy hh24:mi:ss'; Session altered. SQL> SELECT TO_DATE(SYSDATE) FROM DUAL; TO_DATE(SYSDATE) ------------------- 28/05/2014 16:03:25 SQL> SELECT TRUNC(SYSDATE) FROM DUAL; TRUNC(SYSDATE) ------------------- 28/05/2014 00:00:00
SELECT TABLENAME, LASTALTERTIMESTAMP FROM DBC.TABLES WHERE DATABASENAME = 'My DB Name' -- OPTIONAL ORDER BY LASTALTERTIMESTAMP DESC
SELECT * FROM financials WHERE date >= NOW() - INTERVAL 30 DAY
select AS.USER_ID from ACTION_SUMMARY AS where AS.DATE between '2015-01-01' and '2015-07-07' and EXISTS (select 1 from ACTION_DETAIL AD where AD.AS_id = AS.AS_ID and AD.ACTYP_ID in (45, 25, 11) );
│ │ Users │ Active users │ DB+edits │ DB only │ ├──────────────┼───────┼──────────────┼──────────┼─────────┤ │ MusicBrainz │ 1.2M │ 1K/week │ 30 GiB │ 20 GiB │ │ en.wikipedia │ 21.5M │ 133K/month │ 3 TiB │ 44 GiB │ │ OSM │ 1.7M │ 21K/month │ 726 GiB │ 480 GiB │
select X.From, [To] = COALESCE(Y.To, X.To) from x left outer join y on x.To = Y.From and x.Exec_ID = y.Exec_ID
SELECT distinct on (parent_id) parent_id , version_id FROM items ORDER BY parent_id, version_id DESC
SELECT * FROM table WHERE name LIKE '%foo%' OR descr LIKE '%foo%'
CREATE USER [Username] FOR LOGIN [Domain\Username] EXEC sp_addrolemember N'DatabaseRole', N'Username'
SELECT SUM(i.price)/(SELECT COUNT(*) FROM customers) FROM items i LEFT JOIN orders o ON i.itemID = o.itemID AND o.date BETWEEN '2013-03-01' AND '2013-03-31' WHERE o.itemID IS NOT NULL
SELECT M1.* FROM Messages M1 LEFT JOIN Messages M2 ON M1.ReceiverID = M2.ReceiverID AND M1.Timestamp < M2.Timestamp WHERE M2.ID IS NULL
UPDATE tablename SET creationDate=DATETIME(creationDate, '+330 minutes');
SELECT * FROM directory WHERE userType = 'employee' OR userID NOT IN ( SELECT userID FROM directory WHERE userType = 'employee' )
SELECT TOP 1 t.value FROM table AS t ORDER BY LEN(t.value) DESC
SELECT p.PersonID, -- NOT NULL -- dl.PersonID, -- Can be null. Don't use this one. p.FirstName, p.LastName, a.City, a.Street, dl.ValidUntilDate FROM Person p INNER JOIN Addresse a ON a.AddressID = p.HomeAddressID LEFT JOIN DrivingLicence dl ON dl.PersonId = p.PersonID
True False Unknown
select division_id, count(*), avg(scores.score), sum(scores.score) from user join (select id as user_id, score from user UNION ALL select user_id, score from test_score UNION ALL select user_id, score from task_score UNION ALL select user_id, score from offline_score) as scores on user.id = scores.user_id group by division_id
declare @SQL nvarchar(max) = '' select @SQL = @SQL + 'EXEC ' + quotename(s.name) + '.' + quotename(b.name) + ';' from sys.procedures b join sys.schemas s on s.schema_id = b.schema_id where s.name = 'IC' select @SQL --exec sp_executesql @SQL
SELECT TOP 500 CONVERT(INT, CONVERT(VARBINARY(16), NEWID())) FROM dbo.MyTable
SELECT CLASS, COUNT (*) FROM MYTABLE GROUP BY CLASS
SELECT * FROM (select id, somedate, somevalue, sum(somevalue) over(order by somedate) as runningtotal from TestTable )sub WHERE somedate > '2009-02-20'
select disease.name, count(diagnosed.diseaseid) as timesdiagnosed from disease left join diagnosed on disease.diseaseid = diagnosed.diseaseid group by disease.name having count(diagnosed.diseaseid) <= 2 order by disease.name
alter table t1 shrink space;
def up execute "ALTER TABLE orders ADD UNIQUE ordering_date_ndx (ordering_date)" end
DELETE t1 FROM emailvalue t1 LEFT JOIN ( SELECT email, value FROM emailvalue GROUP BY email ) t2 on t2.email = t1.email AND t2.value = t1.value WHERE t2.value is null;
SELECT mt.*, FROM MyTable mt INNER JOIN ( SELECT ID, MIN(Record_Date) MinDate FROM MyTable GROUP BY ID ) t ON mt.ID = t.ID AND mt.Record_Date = t.MinDate
INSERT Table2 (Produce, Cust1_Totals, Cust2_Totals, Cust3_Totals) SELECT Fruit , SUM(case when Customer_ID = 1 then quantity end) , SUM(case when Customer_ID = 2 then quantity end) , SUM(case when Customer_ID = 3 then quantity end) FROM Table1 WHERE Customer_ID IN (1,2,3) GROUP BY Fruit
CREATE TRIGGER tg_bi_mytable BEFORE INSERT ON mytable FOR EACH ROW SET NEW.address1 = IF(EXISTS ( SELECT * FROM mytable WHERE address1 IN(NEW.address1, NEW.address2) OR address2 IN(NEW.address1, NEW.address2) ), NULL, NEW.address1);
SELECT Customers.CustomerNum, Reasons.ID FROM Customers, Reasons WHERE SUBSTR(Customers.Reasons, Reasons.ID, 1) = 'X'
SELECT `course`.`id`, `course`.`name` FROM `course` WHERE `name` LIKE 'TEB lorem ipsum' or `name` LIKE '%TEB%' or `name` LIKE '%lorem%' or `name` LIKE '%ipsum%' ORDER BY CASE WHEN `name`='TEB lorem ipsum' THEN 1 ELSE 2 END ASC
WHERE YEAR(datecreated) = YEAR(GETDATE()) AND MONTH(datecreated) = MONTH(GETDATE()) AND DAY(datecreated) = DAY(GETDATE())
delete from table2 where not exists (select 1 from table1 where table1.id = table2.id and table2.date between table1."begin" and table1."end" );
SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'
SELECT display_order AS CurrentDisplayOrder, ROW_NUMBER() OVER (ORDER BY display_order) AS NewDisplayOrder FROM YourTable ORDER BY display_order
Select ..... from .... where (Status = @Status or @Status is null) and (Created=@Created or @Created is null) and (Release = @Release or @Release is null) and (Date = @Date or @Date is null)
select top 5 type, count(*) Total from yourtable group by type order by total desc
select FirstName,LastName from People where FirstName <= LastName union select LastName,FirstName from People where LastName < FirstName
with recursive rel_tree as ( select rel_id, rel_name, rel_parent, 1 as level, array[rel_id] as path_info from relations where rel_parent is null union all select c.rel_id, rpad(' ', p.level * 2) || c.rel_name, c.rel_parent, p.level + 1, p.path_info||c.rel_id from relations c join rel_tree p on c.rel_parent = p.rel_id ) select rel_id, rel_name from rel_tree order by path_info;
SELECT t1.checkno,t1.id, IF(@lastCheckNo IS NULL OR @lastCheckNo = t1.checkno - 1,'','*') as outoforder, @lastCheckNo := t1.checkno FROM (SELECT * FROM `table` ORDER BY checkno) t1,(SELECT @lastCheckNo := NULL)variable
SELECT job_id, cust_id, count(distinct a.skill_id) FROM aaa.jp_job_skill_ref a INNER JOIN aaa.jp_cust_skill_ref b ON a.skill_id = b.skill_id GROUP BY `job_id`, `cust_id`;
DECLARE @x xml DECLARE @strXML varchar(MAX) SET @x=N'<Employee><Name>Luftwaffe</Name></Employee>' set @strXML = '<xml version="1.0" encoding="ISO-8859-1"/>' + CONVERT(varchar(MAX),@x) SELECT @strXML
CREATE UNIQUE INDEX foo_idx1 ON foo (bar)
SELECT * FROM Employees E JOIN States S ON E.idEmployee = S.idEmployee LEFT JOIN Data1 D1 ON S.data1 = D1.data1 AND S.idStateType = 1 AND D1.attribute1 = value LEFT JOIN Data2 D2 ON S.data2 = D2.data2 AND S.idStateType = 2 and D2.attribute2 = value and D2.attribute3 = value LEFT JOIN Data3 D3 ON S.data3 = D3.data3 AND S.idStateType = 3 and (D1.attribute1 = value or D3.attribute3 = value)
select * from picks where pick = '$winner' and abs(score-$winScore) = (select min(abs(score-$winScore)) from picks where pick = '$winner');
CREATE OR REPLACE TRIGGER trg_table_name_set_id BEFORE INSERT ON table_name FOR EACH ROW BEGIN SELECT table_seq.nextval INTO :new.id FROM DUAL; --id would be the id column in your table --or, if you are on 11g, simply --:new.id := table_seq.nextval; END trg_table_name_set_id;
CAST(DATEADD(MINUTE, 60 * FLOOR(StartTime/100) + StartTime % 100, CONVERT(char(12), ROW_DATE, 112)) AS DATETIME) AS DATE_TOME
select distinct on (r1.name) r1.name, r2.name, f(r1.m, r2.m) from r1 cross join r2 order by r1.name, f(r1.m, r2.m)
DECLARE @d1 datetime, @d2 datetime SELECT @d1 = '2008-06-09 10:18:00.000', @d2 = '2008-06-10 11:20:00.000' SELECT CAST(DATEDIFF(hour, @d1, @d2) AS varchar(30)) + ' hours, ' + CAST(DATEDIFF(minute, @d1, @d2) % 60 AS varchar(30)) + ' minutes, ' + CAST(DATEDIFF(second, @d1, @d2) % 3600 % 60 AS varchar(30)) + ' seconds'
SELECT customers.name AS customer_name, item.name AS item_name FROM customers INNER JOIN items ON items.customer_id=customers.id;
WHERE 0 in (col1, col2) OR '' in (col3, col4)
;WITH rn (ID, rowNumber) AS ( SELECT st.ID, ROW_NUMBER() OVER (ORDER BY st.ID) FROM SomeTable st WHERE EXISTS ( SELECT 1 FROM MyTable mt WHERE mt.Some_ID = st.ID ) ) UPDATE mt SET MyField = rowNumber FROM MyTable mt JOIN rn ON rn.ID = mt.Some_ID
select name_1, dpid_clid, city from dts_master_dividend where upper(name_1) like upper('%') and dpid_clid like upper('IN30290243450560%') group by name_1, dpid_clid ,city
SELECT 1 FROM your_table a INNER JOIN your_table b ON a.tag = b.tag WHERE a.article = 1 AND b.article = 2
SELECT Total FROM (SELECT (Some Really Taxing Calculation) AS Total, * FROM Purchases) AS Purchases WHERE Total < 55 AND itemName = "Bananas" OR Total > 90 AND itemName = "Apples" OR Total = 30 AND itemName = "Peaches" ORDER BY Total
.... WHERE isActive;
WITH x AS ( SELECT eventDate, MAC, IP, eventCode, rn = ROW_NUMBER() OVER ( PARTITION BY DATEDIFF(DAY, 0, eventDate), MAC, IP, eventCode ORDER BY eventDate ) FROM EventsLog ) SELECT eventDate, MAC, IP, eventCode FROM x WHERE rn = 1 ORDER BY EventDate;
SELECT itemName, GROUP_CONCAT(CASE Date_format(`Date`,'%Y-%d-%m') WHEN '2012-01-12' THEN `isAvailable` ELSE NULL END) AS `2012-01-12` ,GROUP_CONCAT(CASE Date_format(`Date`,'%Y-%d-%m') WHEN '2012-02-12' THEN `isAvailable` ELSE NULL END) AS `2012-02-12` ,GROUP_CONCAT(CASE Date_format(`Date`,'%Y-%d-%m') WHEN '2012-03-12' THEN `isAvailable` ELSE NULL END) AS `2012-03-12` FROM Table1 GROUP BY `itemName`;
CREATE VIEW ordered_view AS SELECT name, cost FROM mytable ORDER BY cost DESC; SELECT name, cost FROM ordered_view;
SELECT case when CONVERT(DECIMAL(11,1),SUM(Column/1000*-1)) >= 0 then concat('+', CONVERT(DECIMAL(11,1),SUM(Column/1000*-1))) else CONVERT(DECIMAL(11,1),SUM(Column/1000*-1)) end AS NAME FROM Table
select t.Customer, t.ID, t.Cost, t.Date from (select t.*, dense_rank() over (partition by Customer order by "Date" desc) as seqnum from t ) t where seqnum <= 4;
SELECT ContinentID, CountryID, StateCode = STUFF((SELECT ', ' + StateCode FROM Location b WHERE b.ContinentID = a.ContinentID and b.CountryID = a.CountryID FOR XML PATH('')), 1, 2, '') FROM Location a GROUP BY ContinentID, CountryID
DECLARE @TheDate datetime, @Today datetime SET @TheDate = GetDate() SET @Today = DateAdd(dd, DateDiff(dd, 0, @TheDate), 0) SELECT DateAdd(s, DateDiff(s, @Today, @TheDate), @Today)
select Column1, Column2, 1 + ((row_number() over(order by Column3) - 1) / 5) from YourTable
set fmtonly on go insert into execution_log_table ([timestamp] ,user_id ,report_id) values (CURRENT_TIMESTAMP ,1234 ,5678) select * from (select column1 ,column2 from another_table) tbl
select t1.Name, sum(t1.NbrOfAuthorizations) as NbrOfAuthorizations, avg(datediff(dd, t1.AuthDate, t1.AuthExpirationDate)) as AuthLenInDays from #tmp1 as t1 -- looks like you don't need join also, or there're multiple rows -- in #tmp2 for row in #tmp1 -- left outer join #tmp2 as t2 on t2.AuthID = t1.AuthID where t1.mode = 'Preservation' group by t1.Name
DECLARE p_Statement NVARCHAR(MAX) SELECT p_Statement = 'SELECT id FROM hotels WHERE 1 = 1 ' for each p_catID in SelectedCatIds (loop) : SELECT p_Statement = p_Statement + 'AND id IN (SELECT hotel_id FROM hotel_category_infos WHERE cat_id = p_catID ' (end loop) PREPARE stmt FROM p_Statement EXECUTE stmt
WHERE t1.FullName LIKE '%sometext%' OR t1.Comment LIKE '%sometext%' OR t2.Name LIKE '%sometext%' OR t3.Description LIKE '%sometext%'
SELECT bl.`blog_id`, count(DISTINCT CONCANT(bc.`blog_id`,bc.`author`,bc.`timestamp`) AS 'comment_count',...
select name,v1,v2, (max(rate) + min(rate)) / 2 As `Average` From messages m INNER JOIN rates r ON r.id = m.rate_id Group by name,v1,v2
CREATE TABLE ts2 AS SELECT DISTINCT * FROM ts1;
UPDATE links SET link = '$link', rid = $rid, order = $order WHERE lid = $lid and (SELECT COUNT(*) FROM resources WHERE rid = $rid AND (sid = $sid OR sid IS NULL) AND types IS NULL) = 1;
INNER JOIN Inventory ON tbl_IMPORT.[Bill Date] = Inventory.[Bill Date] INNER JOIN Device ON Inventory.[ID]=Device.[ID]
select count(*) as counts from myTable where datediff(yyyy,dob,admitdate) between 5 and 10
SELECT id, header, text, ... FROM CONTENT WHERE online_at < current_timestamp MINUS SELECT id, header, text, ... FROM CONTENT WHERE offline_at < current_timestamp
SELECT c.cust_id, c.forename, c.surname, p.prod_name, s.Date_of_sale FROM customers c INNER JOIN sales s ON c.cust_id = s.cust_id INNER JOIN products p ON s.product_id = p.product_id ORDER BY s.Date_of_sale DESC
IF @debug = 1 BEGIN print 'Something' --or insert into a log table if you need the rows of a temp table --or the results of a calculation END
SELECT t.id, t.transaction_date FROM transactions t INNER JOIN users_transactions ut ON t.id = ut.transaction_id WHERE ut.user_id = 71720 ORDER BY t.transaction_date DESC LIMIT 25 OFFSET 0;
SELECT Color,SUM(amount) as count FROM tablename GROUP BY Color ORDER BY count DESC;
UPDATE users SET number_of_days = if (last_login = curdate(), number_of_days, number_of_days + 1), last_login='date', number_of_login = number_of_login + 1 WHERE user_id='user_id'
CREATE TABLE #temp ( a INT NULL, b INT NULL ) INSERT #temp SELECT 1, NULL UNION SELECT 2, 2 DECLARE @b INt SELECT @b = 2 SELECT * FROM #temp WHERE b = isnull(@b,b)
SELECT ChildId,MainValues FROM CHILD INNER JOIN MASTER WHERE ','||[Values]||',' like '%,'||MainValues||',%'
select t.*, ((case when jan is not null then 1 else 0 end) + (case when feb is not null then 1 else 0 end) + (case when mar is not null then 1 else 0 end) + (case when apr is not null then 1 else 0 end) + (case when may is not null then 1 else 0 end) ) as MonthsWithData from t;
( select a as FIRST_COL from table 1 ) union ( select d as FIRST_COL from table2 )
var query = (from employee in db.Employee from business in db.Business where employee.Administrator == 1 || (business.BusinessId == 1 && (employee.EmployeeId == business.Initiator || employee.EmployeeId == business.Owner)) select employee.EmployeeId).Distinct();
isnull(c.NAME_CONT +' ', '')+isnull(c.SURNAME_CONT,'')
SELECT u.name, count(t.username) TicketsSubmitted FROM Users u INNER JOIN tickets t ON u.id = t.username GROUP BY u.name
SELECT * FROM sys.configurations WHERE name = 'clr enabled'
ALTER ROLE <rolename> SET statement_timeout = '60000'
SELECT categories.id, max(categories.slug), count(categories_questions.id) AS numberOfQuestions FROM categories LEFT JOIN categories_questions ON categories.id = categories_questions.category_id group by categories.id
SQL> select add_months(date '2008-01-31',1) from dual; ADD_MONTHS( ----------- 29-FEB-2008 SQL> select add_months(date '2008-02-29',1) from dual; ADD_MONTHS( ----------- 31-MAR-2008
SELECT st.name, sc.grades, CASE WHEN @grade = COALESCE(sc.grades, 0) THEN @rownum ELSE @rownum := @rownum + 1 END AS rank, @grade := COALESCE(sc.grades, 0) FROM STUDENTS st LEFT JOIN SCORES sc ON sc.student_id = st.id JOIN (SELECT @rownum := 0, @grade := NULL) r ORDER BY sc.grades DESC
SELECT * FROM FREQUENT WHERE BAR = 'TAVERN' AND DRINKER NOT IN (SELECT DRINKER FROM FREQUENT WHERE BAR <> 'TAVERN')
SELECT id, ProductName, NZ(OnHand, 0) + NZ(SUM([OrderJoin.Quantity]), 0) AS QtyAfter ...
SELECT a.id, a.name, c.name as category, group_concat(subcat.name) as subcategories FROM accounts AS a INNER JOIN account_has_subcategory AS ahs ON a.id = ahs.account_id INNER JOIN subcategory AS subcat ON subcat.id = ahs.subcat_id INNER JOIN category AS c ON a.category = c.id GROUP BY a.id, a.name, c.name ORDER BY a.id;
select first_name, last_name, min(pin) as pin from documents group by first_name, last_name having count(distinct pin) = 1;
SELECT * from table where field1 = 1 AND field2 = 0 AND ( (field3 = 1 AND (field4 = 4 OR field4 = 5 OR field4 = 6)) OR (field3 = 0) )
capacity = (X * Y) / Z
select distinct trunc(date_created), user_name from login_history order by trunc(date_created);
select a.*, (case when a.id is not null then coalesce(ans, -1) end) as ans from b left join a on b.answerid = a.id;
{ "perms": { "$elemMatch": { "user": "alex", "visible": 0 } } }
SELECT m.field1, v.vegName, f.fruitName FROM test_main m INNER JOIN dummy d ON d.id < 3 LEFT JOIN test_veg v ON v.mainID = m.mainID and d.id = 1 LEFT JOIN test_fruit f ON f.mainID = m.mainID and d.id = 2 WHERE m.mainid=1
select a.* from tableA a Left outer join TableB b on a.id=b.id where b.id is NULL
SELECT * FROM( SELECT a.*, rownum rn FROM( SELECT * FROM table_name ORDER BY some_key ) a WHERE rownum <= MAX_ROW) WHERE rn >= MIN_ROW
1. tbl_users(uid, uname, password, Name, ...) 2. tbl_categories(cid, cname, parent_category_id ...) -- self join 3. tbl_user_categories (uid, cid) -- Mapping table
outgoing_text := DBMS_XMLGEN.CONVERT(incoming_text)
;WITH cte AS ( SELECT *, RowNum = ROW_NUMBER() OVER (PARTITION BY phone, name ORDER BY id) FROM tbl ) DELETE FROM cte WHERE RowNum > 1
CAST(a.numeric_Field AS CHAR(5))` = b.stringfield
SELECT t.inv, MAX(CASE WHEN t.description = 'CHARGES' THEN t.amount ELSE NULL END) AS charges, MAX(CASE WHEN t.description = 'FREIGHT' THEN t.amount ELSE NULL END) AS freight, MAX(CASE WHEN t.description = 'INSURANCE' THEN t.amount ELSE NULL END) AS insurance FROM YOUR_TABLE t GROUP BY t.inv ORDER BY t.inv
SELECT * FROM table_name WHERE name = 'F100'
select name, sum(case when rating > 1 then 1 else 0 end) as cnt1, sum(case when rating > 5 then 1 else 0 end) as cnt2 /* ... repeat as many times as needed */ from myview group by name
select t.*, sum(case when datefrom = dateadd(day, 1, prev_dateto then 0 else 1 end) over (order by itemId, datefrom) from (select t.*, lag(dateto) over (partition by itemid order by datefrom) as prev_dateto from table t ) t;
select * from ( select lag(date_)over ( order by date_) as date_before_ko, date_ as date_after_ko, floor((date_ - lag(date_) over ( order by date_))*24*60) as minutes_passed from HISTORY_LOG ) where minutes_passed > 4
Select * from (SELECT owner_id,message,time FROM messages WHERE thread_id = ? ORDER BY time DESC LIMIT ?) test Order by time ASC
select a.*, b.* from tablea a outer apply (select top 1 b.* from tableb b where b.id = a.id and b.date <= a.date order by b.date desc ) b;
SELECT object_name, last_ddl_time FROM dba_objects ORDER BY last_ddl_time DESC;
CREATE PROCEDURE myTest @Result INT OUTPUT AS BEGIN SET NOCOUNT ON; BEGIN TRY SELECT FirstName,LastName FROM Employees SET @Result = 1; END TRY BEGIN CATCH SET @Result = 0; END CATCH END;
$myColumnArray = /* load mysql values here */; // order numbers smallest to largest $uniqueElements = sort(array_unique($myColumnArray)); // calculate increment $incriment = count($uniqueElements); // go thru elements in orig array and replace with weighted value foreach($myColumnArray as &$val){ // get position of element (i.e. "4th largest") $position = array_search ($val, $uniqueElements); // set it equal to weighted value $val = $position * $increment; }
SELECT c.* FROM Customer c INNER JOIN ( SELECT c.promo1, MIN(c.AutoID) AutoID FROM Customer c GROUP BY c.promo1) FirstCusomterWithPromo ON c.AutoID = FirstCusomterWithPromo.AutoID
SELECT top 40 @searchLatitude, @searchLongitude, l.Id as Id, l.Postcode as Postcode, l.latitude as Latitude, l.longitude as Longitude,
UPDATE c SET c.Message = p.Message FROM Categories c INNER JOIN Categories p ON c.ParentID = p.CategoryID WHERE c.ParentID IS NOT NULL AND c.DeptID = @DeptID
SELECT COUNT(*) FROM (select x,y from xx group by y) sub;
select * from ( select col, row_number() over(order by col) rn from yourtable ) src order by random()
SELECT * FROM ( SELECT t1.Num, t1.Name, COUNT(DISTINCT t2.Num) AS seq FROM yourTable t1 LEFT JOIN yourTable t2 ON t1.Num <= t2.Num GROUP BY t1.Num, t1.Name) dt WHERE (seq <= 5);
select field1 , f2 , f3 , 'FLOW'||trim(to_char(rnk)) from (select field1 , f2 , f3 , sum(case when f3 = 1 then 1 else 0 end) over (order by field1, f3 range between unbounded preceding and current row) rnk from your_table )
select count(distinct block) as total_block from tablename
CREATE PROCEDURE `test1`(IN tab_name VARCHAR(40) ) BEGIN SET @t1 =CONCAT('SELECT * FROM ',tab_name ); PREPARE stmt3 FROM @t1; EXECUTE stmt3; DEALLOCATE PREPARE stmt3; END $$
if (update(columnA) or update(columnB))...
SELECT to_char(X) FROM TABLEX WHERE NAME LIKE 'Blablabla';
WHERE INSTR('00235-3844-42-523-3DF44',str_to_find)!=0
create view v_LOAD_UNISTATS_ACCREDITATION as select lua.*, 2013 as year from LOAD_UNISTATS_2013_ACCREDITATION lua union all select lua.*, 2012 as year from LOAD_UNISTATS_2012_ACCREDITATION lua . . .;
SELECT price FROM `table` WHERE STR_TO_DATE(`date`, '%d.%m.%y') BETWEEN STR_TO_DATE(...) AND STR_TO_DATE(...)
CREATE INDEX IDX_CoveredIndex ON Table1 (id1, id2, id3)
INSERT INTO Table1 (Amount, ContactName, State, City) values ( (Select nvl(max(Amount),0) from Table2 where id=12)+ (Select nvl(max(Amount),0) from Table3 where id=13), 'Sam','Newyork','Newyork' );
select tab.*, count(*) over () as totalcnt from mytable tab where tab.name = 'XYZ' and tab.type = 'TP'
SELECT CASE WHEN EXISTS(SELECT * FROM Application WHERE ID=@id AND IsSubmitted=1) THEN 0 ELSE 1 --or some other value END
select distinct d2.name from term_data d1 join term_node n1 on d1.tid = n1.tid join term_node n2 on n1.nid = n2.nid join term_data d2 on n2.tid = d2.tid where d1.name = 'A'
select s.emp_name as Name ,s.Number as m ,st.salestotal as Amount from ( select distinct emp_name, number from salestotals, numbers where number between 1 and 12) s left join salestotals st on s.emp_name = st.emp_name and s.number = month(st.yearmonth)
SELECT CASE WHEN DATENAME(WEEKDAY,OrderDate) = 'Wednesday' THEN DATEADD(DAY,7,OrderDate) ELSE DATEADD(DAY,(18-(@@DATEFIRST+DATEPART(WEEKDAY,OrderDate)))%7,OrderDate) END FROM Orders
INSERT INTO MyTable (character, number) SELECT character, '2' FROM MyTable WHERE number = 1
SELECT b.* ,(SELECT a.text FROM addresses a WHERE a.buildingid = b.id AND ROWNUM=1) as atext FROM building b;
UPDATE table2 SET table2.annualyear = inserted.intannualyear FROM table2 JOIN inserted ON table2.id = inserted.id
INSERT INTO table_name(column_proc_name)select name from sys.objects where type='p'
SELECT id, CASE WHEN value = 'xyz' THEN 'Pending' ELSE 'Not Pending' END AS status, time, FIRST_VALUE(user) OVER (PARTITION BY id ORDER BY time) AS first_user FROM table1 INNER JOIN ... WHERE subject IN (...) AND field = 'Status'
SELECT * FROM mytable WHERE LEN(MyField) > 400
select max(maxId) from ( select max(id) as maxId from delT1 union all select max(id) as maxId from t1 ) maxes;
WITH ids AS ( SELECT ID, ID AS orig FROM Data d1 WHERE CXL IS NULL UNION ALL SELECT d2.ID, orig FROM ids i INNER JOIN Data d2 ON d2.CXL = i.ID ) SELECT orig AS [Original Id], MAX(ID) AS [Latest Good Id] FROM ids GROUP BY orig
create table users (id serial primary key, tags text[]); insert into users (tags) values ('{"fun", "day"}'), ('{"fun", "sun"}'), ('{"test"}'), ('{"fin"}'); select * from users where exists (select * from unnest(tags) as arr where arr like 'f%')
Select * from Page where Page.page_title = 'AccessibleComputing'
class = > table instance => row attribute => column
SELECT * FROM yourTable INNER JOIN (SELECT col1, MAX(col2) as max_col2 FROM yourTable GROUP BY col1) AS lookup ON yourtable.col1 = lookup.col1 AND yourtable.col2 = lookup.col2
UPDATE YOUR_TABLE t SET T.COLUMN = REPLACE(T.COLUMN, 'FD>;', 'FD>;1')
SELECT manager_id AS "Manager ID", MIN(salary) AS "Lowest Paid Salary" FROM employees WHERE manager_id IS NOT NULL AND salary > 6000 GROUP BY manager_id ORDER BY min(salary) DESC;
SET ROWCOUNT 1 SELECT %s FROM %s
SELECT case when Status in ('A','B') then 'A&B' else Status end AS Status, COUNT(Status) AS StatusCount FROM EMPLOYEE GROUP BY case when Status in ('A','B') then 'A&B' else Status end
UPDATE video SET schedulingflag = true WHERE schedulingflag IS FALSE AND errorflag IS FALSE;
SELECT * FROM temp WHERE realName LIKE '% S_i%'
select key, min(value1) as "a value1", min(value2) as "a value2", max(value2) as "another value2", count(distinct value2) "number of value2" FROM tbl group by key having count(distinct value2) > 1
declare @docid bigint, @account varchar(30) While @@fetch_status=0 BEGIN SET @docid = NULL SELECT @Docid = Docid FROM printdata WHERE Account = @account IF @docid IS NULL -- @Docid *WILL* be NULL now if nothing is found! BEGIN SELECT @Docid = Docid FROM printdata WHERE balance = @balance END
Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs) //create your button then assign the id myButton.ID = "123" // assign a generic event handler for all the buttons in the table. AddHandler myButton.Click, AddressOf myButtons_Clicked End Sub Protected Sub myButtons_Clicked(ByVal sender As Object, ByVal e As EventArgs) Button thebtn = CType(sender, Button) string btnID = thebtn.ID // pass of the ID to whatever method is doing your processing End Sub
"DELETE x FROM $table x LEFT JOIN ( SELECT vendors , email , MIN(lead_id) min_lead_id FROM $table GROUP BY vendors , email ) y ON y.vendors = x.vendors AND y.email = x.email AND y.min_lead_id = x.lead_id WHERE x.vendors = $vendor AND y.min_lead_id IS NULL;";
SELECT A.ID, A.ProductName, B.ID, B.Size FROM A INNER JOIN B ON B.ProductID = A.ID UNION ALL SELECT A.ID, A.ProductName, NULL, NULL FROM A
SELECT Block.name, Container.name, adminrole.name from Block LEFT JOIN container_block ON container_block.containerid = Block.id LEFT JOIN Container ON Container.id = container_block.containerid LEFT JOIN AdminACL ON AdminACL.objectid = Container.id RIGHT JOIN adminrole_admin ON adminrole_admin.adminid #there could be multiple roles LEFT JOIN adminrole ON adminrole.id = adminrole_admin.adminroleID WHERE AdminACL.ObjectType = "Container" AND adminrole.name not like 'hidden_%'; # shouldn't you have a `hidden` column on the table, instead of prefixing the name?
ORDER BY to_char(TIMEOFISSUE, 'hh24miss')
select t.Column1, (select column2 from t t2 where t2.column1 = 'Customer' and t2.id <= t.id order by t2.id desc limit 1 ) as customer, (select column2 from t t2 where t2.column1 = 'Account' and t2.id <= t.id order by t2.id desc limit 1 ) as transaction, from t where t.column1= 'Transaction'
insert into a(email) select email from ((select email from c) union (select email from d) union (select email from e) ) cde where not exists (select 1 from b where b.email = cde.email);
WHERE xmlcolumn.value('(/path/to/tag)[1]', 'int') = @QueryValue
UPDATE `main_table` SET `count` = '$count' WHERE userid='$someid'
UPDATE public_document_store a INNER JOIN public_document_store_talkback b ON b.document_id = a.document_id SET a.skin_id = 6 WHERE b.is_released = 1 AND b.is_rejected = 0 AND a.section_id = 10
result := REGEXP_REPLACE(subject, '_0+', '_', 1, 0, 'c');
select name, min(time), max(time), count(*) from (select t.*, (row_number() over (partition by name order by time) - row_number() over (partition by name, event order by time) ) as grp from t ) t where event = 1 group by name, event, grp having count(*) >= 3;
----To create a snapshot create database SrcDbSnapshot on ( name = LogicalFileNameFromSrcDB, filename = 'E:\SrcDB.ss') AS SNAPSHOT OF SrcDB go ----To roll back --Kills all connections and performs the rollback ALTER DATABASE [SrcDB] SET SINGLE_USER WITH ROLLBACK IMMEDIATE RESTORE DATABASE [SrcDB] FROM DATABASE_SNAPSHOT = 'SrcDbSnapshot' go ----To remove the snapshot drop database SrcDbSnapshot go
SELECT GROUP_CONCAT(DISTINCT col_1) AS col_1, col_2 FROM (SElECT col_1, GROUP_CONCAT(DISTINCT col2) AS col_2 FROM my_table GROUP BY col_1) t GROUP BY col2
SELECT division, division_name, object_account, account_description, SUM(CASE WHEN vendor_type = 'PV' THEN value ELSE 0 END) as PreferedSpend, SUM(value) AS TotalSpend FROM jde_dw.blanket_rpt WHERE division = 02 AND month = 07 AND year = 2013 GROUP BY division, division_name, object_account, account_description ORDER BY division
;WITH cte AS ( SELECT CASE WHEN DATEPART(Day,@StartDate) = 1 THEN @StartDate ELSE DATEADD(Month,DATEDIFF(Month,0,@StartDate)+1,0) END AS myDate UNION ALL SELECT DATEADD(Month,1,myDate) FROM cte WHERE DATEADD(Month,1,myDate) <= @EndDate ) SELECT myDate FROM cte OPTION (MAXRECURSION 0)
SELECT * FROM table1 T JOIN Table2 S ON T.status_change_date <> max(S.enter_date) AND T.user_id = S.user_id WHERE S.status= 'closed'
SELECT username FROM table_name WHERE MONTH(birthday)=MONTH('$birthday') AND DAY(birthday)=DAY('$birthday')
HAVING EXTRACT(DAY FROM MAX(plans.updated_at) - MIN(plans.created_at)) > 0
INSERT INTO new_table (id, label) <put select query here>
select column1, column2, case when column1 is NULL and column2 is NULL then 'true' when column1=column2 then 'true' else 'false' end from table;
Select * From participants Where nokp in ( Select nokp From participants Group by nokp Having count(*) > 1 )
SELECT DISTINCT Order_ID FROM Orders T1 WHERE NOT EXISTS ( SELECT Product_ID FROM Orders WHERE Order_ID = 2 EXCEPT SELECT Product_ID FROM Orders WHERE Order_ID = T1.Order_ID);
select r.employee, d.description from table1 as d inner join (select min(rank) as rank, employee from table1 group by employee) r on d.rank = r.rank and d.employee = r.employee
SELECT product_description.* FROM `product_description` left outer join product on product_description.product_id = product.product_id where product.product_id is null
SELECT us.UsersShiftsId, us.UserId, us.ShiftStart, us.ShiftEnd, MIN(fs.ScannedTime) ActualStart, MAX(fs.ScannedTime) ActualEnd FROM UsersShifts us LEFT JOIN FingerprintScan fs ON us.UserId = fs.UserId AND fs.ScannedTime BETWEEN us.ShiftStart AND us.ShiftEnd GROUP BY us.UsersShiftsId, us.UserId, us.ShiftStart, us.ShiftEnd
Select * from ShipsTable where ShipType = "Barge" into Barges Run Menu Command 311
SELECT username ,LISTAGG(colour , ',') WITHIN GROUP (ORDER BY colour ) AS colour ,age FROM t GROUP BY username,age ;
/* the columns in this table are the same as the columns in your csv: */ create table if not exists my_csv ( some_field text, ... ); /* COPY appends, so truncate the table if loading fresh data again: */ truncate table my_csv; /* you need to be a postgres superuser to use COPY use psql \copy if you can't be superuser put the csv file in /srv/vendor-name/ */ copy my_csv from '/srv/vendor-name/my.csv' with ( format csv );
sql [ctx] C1 = { SELECT * FROM MyTable ORDER BY dup_column }; sql { FETCH C1 INTO row }; while ( !C1.endFetch() ) { if ( row.dup_column = prevrow.dup_column ) { sql [ctx] { DELETE FROM MyTable WHERE CURRENT OF C1 }; } prevrow.dup_column = row.dup_column; sql { FETCH C1 INTO ... }; } C1.close();
insert into perm (a,b,c,d,e,f) select t.* from temp t left outer join ( select p.* from perm p inner join ( select a, b, max(c) as max_c from perm group by a,b) mx on p.a = mx.a and p.b = mx.b and p.c = max_c ) p on t.a = p.a and t.b = p.b and t.c > p.c and t.d = p.d and t.e = p.e and t.f = p.f where p.a is null
SET @Sql = 'SELECT * FROM [' + @RemoteServer + '].dbname.schema.tblCustomers' EXEC @Sql
SELECT * FROM tbl WHERE col IN(SELECT col1 FROM tbl1) OR NOT EXISTS(SELECT 1 FROM tbl1)
select * from [lnkDB].[DB2].[dbo].[SystemInfo]
select company, sum(netSales) as netSales, sum(case when month(CURDATE()) - 1 = month(`date`) then netSales else 0 end) as lastMonthSales from your_table_name group by company;
INSERT INTO anothertable (list, of , column, names, to, give, values, for) SELECT list, of, column, names, of, compatible, column, types FROM bigimportedtable WHERE possibly you want a predicate or maybe not;
select Id, field1, (sum(field1) over() / field1) as field2 from YourTable
like '%JUL%'
insert into sales(code, sold) (SELECT '001',CASE WHEN 'FILLHERE' ='SI' THEN 1 ELSE 0 END );
INESRT INTO InsertTable (ReplacementID, [Name]) SELECT R.ReplacementID, O.[Name] FROM OriginalTable O INNER JOIN Employee E ON E.EmployeeID = O.EmployeeID INNER JOIN ReplacementEmployee R ON E.SerialNo = R.SerialNo
SELECT COALESCE(PriceDiscount, Price) AS Price FROM mytable
GROUP BY meetingID HAVING COUNT(caseID) < 4 AND COUNT(caseID) > 2
Select * from [mgnl:news] as t where name(t) = '3265'
SELECT * FROM t WHERE field2 = '2019@162440' UNION ALL SELECT * FROM t WHERE FOUND_ROWS() = 0 AND field2 LIKE '%%2019@%%'
alter table orders enable row movement;
select ForgeRock.id1 , ForgeRock.id2 , group_concat(ForgeRock.productName) from TClock left join ForgeRock on TClock.id1 = ForgeRock.id1 and TClock.id2 = ForgeRock.id2 where colour = 'red' group by ForgeRock.id1 , ForgeRock.id2
;WITH cte As ( SELECT ROW_NUMBER() OVER (PARTITION BY name, compound, rowid ORDER BY rid) AS RN FROM qvalues ) DELETE FROM cte WHERE RN > 1
SELECT yr, subject, winner FROM nobel WHERE winner LIKE "%Grünberg%"
create class User extends V create property User.username string create property User.password string create class UserGroup extends V create property UserGroup.id string create class user_group extends E create vertex User set username = 'foo', password = 'bar' create vertex UserGroup set id = 'group1' create edge user_group from (select from User where username = 'foo') to (select from UserGroup where id = 'group1') select expand(in('user_group')[username='foo'][password='bar']) from UserGroup where id = 'group1'
UPDATE data set `value` = REPLACE(`value`,'\\n', CHAR(10)) WHERE `key`='shipping_address';
ParseQuery<ParseObject> query = ParseQuery.getQuery("Data_db"); query.whereEqualTo("username", edittext_user.getText().toString()); query.getFirstInBackground(...);
SELECT t1.docnum, t1.doctype, t1.code, t2.invnum FROM ( select *, row_number() over (partition by docnum ORDER BY docnum, poline) as ordinal from table1 ) t1 LEFT JOIN ( select *, row_number() over (parition by docnum ORDER BY docnum, invseq) as ordinal ) t2 ON t2.docnum = t1.docnum and t2.ordinal = t1.ordinal
SELECT DISTINCT LOWER(SUBSTR(firstName,1,1)) firstChars FROM your_table WHERE LOWER(SUBSTR(firstName,1,1)) IN ('a','b','c','d','e','f','g','h','i','j', 'k','l','m','n','o','p','q','r','s','t', 'u','v','w','x','y','z') ORDER BY firstChars
declare @SomeDate datetime = GETDATE() update Testingset set SomeDate = @SomeDate where SomeDate is null or SomeDate <> @SomeDate
DECLARE @SummaryOfChanges TABLE(Change VARCHAR(20)); MERGE tblTarget AS Target USING (SELECT Col1,Col2 FROM tblSource) AS Source ON (Target.Col1 = Source.Col1) WHEN MATCHED THEN UPDATE SET target.Col2 = source.Col2 -- Need to get affected rows here WHEN NOT MATCHED BY TARGET THEN INSERT (Col1,Col2) VALUES (Col1,Col2); -- Need to get affected rows here OUTPUT $action INTO @SummaryOfChanges; SELECT Change, COUNT(*) AS CountPerChange FROM @SummaryOfChanges GROUP BY Change;
SELECT D.id FROM (SELECT id , DISTANCE_BETWEEN (Latitude,Longitude,43.2560997009,-2.9078400135) AS distance FROM Locations) AS D ORDER BY distance LIMIT 1
SELECT MIN(user_id) user_id, MIN(friend_id) friend_id FROM Table1 GROUP BY LEAST(user_id, friend_id), GREATEST(user_id, friend_id) HAVING COUNT(*) = 1
select text from sys.dm_exec_requests cross apply sys.dm_exec_sql_text(plan_handle) where session_id = <SPID FROM PROFILER>
if (:OLD.LOGGED_IN = 1) then if (:NEW.LOGGED_IN = 0) then UPDATE SESSION_LOGGING AS current_session SET DAUER = (sysdate-ZEITSTEMPEL) WHERE DAUER IS NULL AND SECURE_IDENTIFIER = :NEW.SECURE_IDENTIFIER; end if; end if;
SELECT id, date, state_on_date, ( SELECT TOP 1 year_quantity FROM table2 WHERE id = t.id AND date >= t.date ORDER BY date ) AS year_quantity FROM table1 t
SELECT person_id, [1] Num_1,[2] Num_2,[3] Num_3,[4] Num_4,[5] Num_5 FROM Table1 PIVOT(MAX(number) FOR row_count IN ([1],[2],[3],[4],[5]))pvt
select environments.envcode, logs.type from environments left join session on environments.envcode = session.envcode left join logs on session.sessionid = logs.sessionid where not exists ( select * from sessions later_session join logs later_log on later_log.sessionid = later_session.sessionid where later_session.envcode = session.envcode and later_log.created > logs.created );
SELECT * FROM foo WHERE update_date > DATE_ADD(publish_date, INTERVAL 1 WEEK)
SELECT * FROM posts LEFT JOIN customfields ON post_id=posts.id AND custom_key='featured' ORDER BY custom_value=1 DESC, id DESC;
ALTER TABLE yourTable RENAME CONSTRAINT SYS006321 TO yourNewName;
SELECT * FROM Notification inner join User on ( User.Date >= Notification.Date and (Notification.Gender is null or Notification.Gender = User.Gender) and (Notification.HairColor is null or Notification.HairColor = User.HairColor) and (Notification.EyeColor is null Notification.EyeColor = User.EyeColor) and (Notification.Company is null or Notification.Company = User.Company) )
CREATE TABLE "Author/Title" ( author_name VARCHAR(50), isbn VARCHAR(13) REFERENCES "Item Details", PRIMARY KEY (author_name, isbn) )
SELECT * FROM Table1 WHERE Name='ABC' OR Party<>'IND';
SELECT * INTO OUTFILE 'filename' FIELDS TERMINATED BY '|' LINES TERMINATED BY '\n' FROM yourtable;
SELECT ... WHERE ... UNION SELECT ... WHERE ... UNION SELECT ... WHERE ...
select HotelName from your_table group by HotelName having count(HotelID) >= 5
SELECT * FROM t3 INNER JOIN t2 ON (t3.fkeyT2 = t2.key) INNER JOIN t1 ON (t2.fkeyT1 = t1.key) WHERE t1.name = 'Foo'
ORDER BY CASE when Symbol like '%FUT' then 1 when Symbol like '%CE' then 2 when Symbol like '%PE' then 3 else 4 end, Symbol asc
SELECT MAX(id) FROM status WHERE id < 5
DataContext db = new DataContext(); var nameCount = db.Names.Count(); var nameCount = db.Names.Select(n => n.Id).Max();
SELECT modify_date ,type_desc ,name FROM sys.objects WHERE is_ms_shipped=0 --AND modify_date>='yyyy/mm/dd' <--optionally put in your date here ORDER BY 1 DESC
SELECT user.uid FROM user WHERE EXISTS( SELECT TOP 1 1 FROM Friends WHERE Friends.fuid = @friend1 AND Friends.fapproved = 1 AND Friends.fuid2 = User.uid ) AND EXISTS( SELECT TOP 1 1 FROM Friends WHERE Friends.fuid = @friend2 AND Friends.fapproved = 1 AND Friends.fuid2 = User.uid )
DELETE tableA FROM tableB WHERE tableA.ID = tableB.ID
SELECT item1.id as id1, item2.id as id2 FROM item item1, item item2 WHERE item1.value = item2.value AND item1.id < item2.id
declare @Result int EXEC @Result = sp_getapplock @Resource = 'holdit1', @LockMode = 'Exclusive', @LockTimeout = 10000 --Time to wait for the lock IF @Result < 0 BEGIN ROLLBACK TRAN RAISERROR('Procedure Already Running for holdit1 - Concurrent execution is not supported.',16,9) RETURN(-1) END
SELECT DISTINCT [Month], Mean = AVG(Score) OVER (PARTITION BY [Month]), StdDev = STDEV(Score) OVER (PARTITION BY [Month]), P90 = PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY Score) OVER (PARTITION BY [Month]) FROM my_table
select top 1 s.* from schedules s where username = 'username' and CAST('2008-12-20 10:00' AS DATETIME) >= startdate order by startdate;
CommandText = "Insert into FileMaster(Subject,FileID) Values('" & obj.Subject & "','" & obj.FileID & "')
WITH CTE (NodePath, ID) AS ( SELECT '/' + CAST(NodeName AS NVARCHAR(MAX)) AS NodePath, ID FROM TABLE WHERE NodeName = 'Root' UNION ALL SELECT CTE.NodePath + '/' + CAST(NodeName AS NVARCHAR(MAX)) AS NodePath, TABLE.ID FROM CTE INNER JOIN TABLE ON TABLE.ParentId = CTE.ID ) SELECT NodeName, ID FROM CTE
SELECT Products.* FROM Products RIGHT OUTER JOIN Join_Table ON Products.ID = Join_Table.Product_ID AND Join_Table.Property_ID = 2 WHERE Products.ID IS NULL
SELECT post_title, post_content, meta_value FROM wp_posts LEFT JOIN wp_postmeta ON ID = post_id and meta_key = '_wp_attached_file'
INSERT INTO TableE (E_ID , E_NAME) SELECT b.B_ID ,d.D_ID FROM TableA a INNER JOIN TableB b ON b.FROM_A = a.A_ID INNER JOIN TableC c ON c.C_ID = a.A_TYPE INNER JOIN TableD d ON d.D_NAME = c.C_NAME
select a, b, c, left(case when t.b > t.c then t.b else isnull(t.c, t.b) end + @f, 10) as d from #myTable t order by someCriteria
Worksheets("Sheet3").Cells(2, 1).CopyFromRecordset rs
floor(time_to_sec(time1) - time_to_sec(time2) / 60) as MinutesDiff
case when job_id like '%VP%' then 1.3 else 1.2 end * salary
SELECT SUM(Units) FROM TableIH AS F WHERE F.Fund = S.Fund AND F.Number = S.Number AND F.Date >= (SELECT MIN(Date) FROM TableIH AS D WHERE D.Fund= F.Fund AND D.Number = F.Number AND D.Entry = 'Tax'
SELECT measuremententry * 1000 AS measuremententry FROM log
create unique index idx_supplier_shop_name on supplier(shop, name)
select substring(empno, 6, charindex('E', empno, 6) - 6) from (select 'Empl:9998 Earn Code:7704 Seq:1' as empno) t;
SELECT DISTINCT CategoryName FROM YourTable
SELECT * FROM `MY_TABLE` WHERE field_1 = 'something' AND created BETWEEN '2014-06-01 00:00:00' AND '2014-06-30 23:59:59' AND email IN ('emaillist1@email.com', 'emaillist2@email.com', 'emaillist3@email.com');
select user_id, case when age < 18 then 'under18' when age <=65 then 'normal' when age > 65 then 'over65' else null end as category from Users
DECLARE @vkey int = 1 ;WITH cte_test AS ( SELECT keyA,(SELECT ','+fieldb FROM tableB t1 WHERE t1.keyA = t.keyA FOR XML path('')) AS rslt from tableB t GROUP BY t.keyA) SELECT t2.* FROM cte_test t1 INNER JOIN cte_test t2 ON t1.[rslt] = t2.[rslt] AND t2.[keyA] <> t1.[keyA] WHERE t1.[keyA] = @vkey
select * from your_table order by year, month, `date` desc limit 1
SELECT ID, Value,As_of from yourTable a inner join (SELECT ID, MAX(As_of) as As_of from yourTable group by ID) b on a.ID=b.ID and a.As_of = b.As_of
select @address = address , @serialNumber = serialNumber from dummyTable where id = 10
select u._id,u.id,u.name,u.email,u.country, case when s.subscribe is not null then 1 else 0 end as subscribe from user u left join subscribe s on (u._id = s.user and s.subscribe ='$sub') where u._id='$user'
DECLARE @TempTable TABLE ( TableID int PRIMARY KEY IDENTITY, TokenId int ) Insert Into @TempTable Select tt.TokenId from XLBDataPoint tt where tt.TokenId= 1 DECLARE @RowCount INT SET @RowCount = (SELECT COUNT(*) FROM @TempTable ) (SELECT Top 1 t.TokenId + @RowCount FROM TokenData t Where t.TokenId+ @RowCount NOT in (select t2.TokenId FROM TokenData t2)
SELECT ItemID ,Price FROM ACTIVE UNION SELECT ItemID ,Price FROM ARCHIVE AA WHERE AA.ArchiveDate = (SELECT MAX(ArchiveDate) FROM ARCHIVE AA1 WHERE AA1.ItemID = AA.ItemID) AND NOT EXISTS (SELECT 1 FROM ACTIVE A WHERE A.ItemID = AA.ItemID)
with sqf as (SELECT * FROM PRODUCT A, PRODUCT_RELATION B WHERE A.ROW_ID = B.PROD_ID AND A.NAME = 'Zinc' ) select * from sqf where sqf.row_id not in (select x.row_id from sqf x where x.START_DATE < SYSDATE)
return "User Id=USER;Password=pass;Data Source=(DESCRIPTION=" + "(ADDRESS=(PROTOCOL=TCP)(HOST=14.12.7.20)(PORT=1139))" + "(CONNECT_DATA=(SID=QCTRP1)));Connection Timeout=60;";
SELECT COUNT(barcode) FROM table1 WHERE timestamp >= DATEADD(HOUR,18,CONVERT(VARCHAR(10), GETDATE(),110)) AND timestamp <= DATEADD(HOUR,6,CONVERT(VARCHAR(10), GETDATE()+1,110))
USERS(ID_USER, NAME, NICK, REGISTER_DATE) ITEMS(ID_ITEM, DESCRIPTION, PRICE) PURCHASES(ID_PURCHASE, ID_USER, ID_ITEM, PRICE, PURCHASE_DATE)
Update Table Set Reference = map.NewReference From ReferenceMap map Where reference = map.OldReference
SELECT * FROM Notification n LEFT OUTER JOIN Acknowledgment a ON a.parent_id = n.id WHERE (a.parent_id IS NULL OR a.status = @somevalue)
public string[] GetNames() { string[] names = Cache["names"] as string[]; if(names == null) //not in cache { names = DB.GetNames(); Cache["names"] = names; } return names; }
SELECT OBJECT_NAME(m.object_id), m.* FROM SYS.SQL_MODULES m WHERE m.definition like N'%INSERT INTO my_table_name%'
SELECT item, amount, price, bought, NULL sold, slot FROM Buying WHERE slot = 0 UNION SELECT item, amount, price, NULL bought, sold, slot FROM Selling WHERE slot = 0
my $rs1 = $rs->search({ foo => 'bar' }); my $rs2 = $rs->search({ baz => 'biff' }); for ($rs1->union($rs2)->all) { ... }
SELECT C.names FROM C INNER JOIN B ON C.B_ID = B.B_ID INNER JOIN A ON B.A_ID = A.A_ID WHERE A.A_ID = 3
insert into table_name (order, firstname, lastname, email, contacttypeid) values (1284480, 'joe'...);
select fc.* from fruits_cities fc where fc.cityId = (select max(CityId) from fruits_cities fc2 where fc2.fruit_id = fc.fruit_id );
select cust_id, date, row_number() over (partition by cust_id order by date) as assigned_value from table t;
... beginning of your query ... START WITH A.TREE_Name = 'MDA_GRN_KK' connect by nocycle prior A.TREE_NODE = A.PARENT_NODE_NAME
select inv_number from yourtable order by substring(inv_number, 5, 2), substring(inv_number, 1, 3)
SELECT param_value FROM user_stored_settings WHERE param_name = 'PLSQL_COMPILER_FLAGS' AND object_name = 'MY_PACKAGE';
adb shell
select * from Book as b where not exists ( select * from BookPage as bp where b.Id = bp.BookId and bp.Text is null )
var user_address= from _user in users select new userDetails{ userid=_user.userid, Address=(from _address in address where _user.userid=_address.userid select _address.:address ).ToList() };
SELECT * FROM user WHERE FIND_IN_SET('10', keywords) > 0 OR FIND_IN_SET('20', keywords) > 0
SELECT * FROM MYLINKEDSERVER.MYDATABASE.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Address'
WHERE (ProductLine = 'TVs' AND @ProductType = 1) OR (ProductLine IN ('Handsets', 'Mobiles') AND @ProductType = 2) OR (ProductLine = 'Books' AND @ProductType NOT IN (1, 2))
$query = $this->db->query('SELECT val FROM table')->result_array(); $array = array(); foreach ( $query as $key => $val ) { $temp = array_values($val); $array[] = $temp[0]; }
SELECT * FROM ( SELECT [TableName] = so.name, [RowCount] = MAX(si.rows) FROM sysobjects so, sysindexes si WHERE so.xtype = 'U' AND si.id = OBJECT_ID(so.name) GROUP BY so.name ) sub WHERE sub.[RowCount] = 0
select team, day, count(*) as numgames from ((select id, homeid as team, date(start_date) as day from t ) union all (select id, awayid as team, date(start_date) from t ) ) t group by team, day having numgames > 1;
DECLARE @Funding TABLE (FundingDetailID INT,FundingID INT, DetailDescription VARCHAR(50)) INSERT INTO @Funding VALUES (1,107,'Desc 1') INSERT INTO @Funding VALUES (1,107,'Desc 2') INSERT INTO @Funding VALUES (1,107,'Desc 3') SELECT CHAR (CAST (96+ROW_NUMBER() OVER (Order BY FundingDetailID) AS VARCHAR)) + ') ' + DetailDescription FROM @Funding ----------------------------------------------------- a) Desc 1 b) Desc 2 c) Desc 3
SELECT [Referer], Count([Referer]) as RefCount FROM [tblSequence] WHERE [Referer] IS NOT NULL AND [Referer] NOT LIKE @url AND siteID = 15 GROUP BY [Referer]
SELECT ch.name, date(msg.date_created), SUM(CASE WHEN msg.status = 'SENT' THEN 1 ELSE 0 END) as SENT, ... -- same for other statuses FROM message msg, channel ch WHERE msg.status !='TRANSFORMED' AND msg.channel_id = ch.id AND msg.date_created BETWEEN to_date('2015-01-10', 'YYYY-MM-DD') AND to_date('2015-01-11', 'YYYY-MM-DD') GROUP BY ch.name, date(msg.date_created);
> setVerboseShell(true) > db.testing.update({}, {$set: { deleteme: true }}, { multi:true }) Updated 100 existing record(s) in 1ms WriteResult({ "nMatched" : 100, "nUpserted" : 0, "nModified" : 100 }) > db.testing.remove({ deleteme:true }) Removed 100 record(s) in 1ms WriteResult({ "nRemoved" : 100 })
Total blocks of R = B(R) Total tuples in R = N(R) Total blocks of S = B(S) R X S is done.
SELECT comment_post_ID, count(like_ID) from (select distinct comment_post_ID,like_ID from comments_like cl , comments c where cl.comment_ID= c.comment_ID ) as iq group by comment_post_ID
UPDATE table_name SET new_value = (original_value * amount) WHERE new_value IS NULL
SELECT activeteams.divisionid, teams.teamname, res.wins FROM activeteams INNER JOIN teams ON activeteams.teamid = teams.teamid LEFT JOIN ( SELECT COALESCE(SUM(CASE WHEN result = 'w' THEN 1 ELSE 0 END ), 0) AS wins, teamid FROM results GROUP BY teamid ) res ON teams.teamid = res.teamid WHERE activeteams.divisionid = 1
Message.executeQuery('select count(m) from Message m where SIZE(m.body) < 25')
With maxCategories AS (select book_id, max(category_id) as category_id from BookCategory group by book_id) select Books.book_id, Books.Title, Categories.category_id, Categories.name from Books inner join maxCategories on (Books.book_id = maxCategories.book_id) inner join Categories on (Categories.category_id = maxCategories.category_id) where Books.title like '%treasure island%'
create table t as select * from raw_data; or insert into t (x,y,z) select x,y,z from raw_data;
select cast(cast([Percent] as decimal(9,2)) AS FLOAT) as [Percent]
Select Country, SUM([Number of Manager]) AS 'Number of Parts Staff/Manager', Count([Name]) AS 'Number of Test' From Test GROUP BY Country
WHERE client = $id AND ((isinvoiced = 0) OR (isinvoiced = 1 and isrecurring = 1))
SELECT * FROM (select user_id, prod_and_ts.product_id as product_id, regex_replace(prod_and_ts.timestamps, "#\\d*", "") as timestamps FROM table2 LATERAL VIEW explode(purchased_item) exploded_table as prod_and_ts) prod_and_ts;
SELECT WeekDate = Monday, DayDateMonday = MAX(CASE Day WHEN 'Monday' THEN DayDate END), TimeEntryMonday = MAX(CASE Day WHEN 'Monday' THEN TimeEntry END), TimeOutMonday = MAX(CASE Day WHEN 'Monday' THEN TimeOut END), RestMonday = MAX(CASE Day WHEN 'Monday' THEN Rest END), DayDateTuesday = MAX(CASE Day WHEN 'Tuesday' THEN DayDate END), TimeEntryTuesday = ... -- and so on FROM timetable GROUP BY Monday ;
select CASE when next_action_date between GETDATE() and GETDATE()+7 then 'Incoming' when next_action_date < GETDATE() THEN 'Overdue' else 'fine' end as Condition from( select GETDATE()+6 next_action_date )x
LOCK TABLE `categories` WRITE; SELECT @myLeft := `lft` FROM `categories` WHERE `id` = '. $where .'; UPDATE `categories` SET `rght` = `rght` + 2 WHERE `rght` > @myLeft; UPDATE `categories` SET `lft` = `lft` + 2 WHERE `lft` > @myLeft OR `lft` = @myLeft; INSERT INTO `categories`(`name`, `lft`, `rght`) VALUES("'. $name .'", @myLeft, @myLeft + 1); UNLOCK TABLES;
update WebCatalog.Published.DemoTracking set Purchased = 1 where Purchased = 0 and RCompanyLink in (select Link as RCompanyLink from WebCatalog.Published.RCompany where RC.Expiration >= GETDATE() and RC.DemoLicense = 0)
SELECT * from wp_posts where ID IN ( (SELECT post_id from wp_postmeta where meta_key='list_price' and meta_value BETWEEN 1 and 1229000 ) ) and id in (SELECT post_id from wp_postmeta where meta_key='weight' and meta_value BETWEEN 20 and 200 )
SELECT DATENAME(month, getdate()) + ' ' + DATENAME(year, getdate())
INSERT INTO BOOKING (CUSTOMER_CODE, BOOKING_DATE) SELECT CUSTOMER_CODE, $booking_date FROM CUSTOMER WHERE CUSTOMER.email=$email
Declare @vQuery nvarchar(max), @vWhereClasue varchar(500) SET @vQuery = 'Select top 7 col1,col2 ....col16 from ... where ' + @vWhereClasue exec sp_executesql @vQuery
UPDATE TimeRequestedTable INNER JOIN BlockTimesTable ON BlockTimesTable.EmpID = TimeRequestedTable.EmpID SET AppointTime = "inputed by user" WHERE AppointTime BETWEEN startTime and EndTime
SELECT (SELECT SUM(units) FROM stock_in WHERE itemid = 7) - (SELECT SUM(units) FROM stock_out WHERE itemid = 7) AS difference;
CREATE OR REPLACE FUNCTION updateTsvector () RETURNS void AS $$ UPDATE acrticles_pl_vector SET locale = 'pl', vector = to_tsvector('polish', ot.title || ot.content FROM otherTable ot WHERE id = ot.id; $$ LANGUAGE sql;
CREATE TABLE sizes ( name ENUM('small', 'medium', 'large') );
SELECT CodeField, COUNT(CodeField) FROM table GROUP BY CodeField HAVING COUNT(CodeField) < 12
/Whatever/*//*[empty(.//text() | .//attribute())]
;WITH Top10Distinct AS ( SELECT DISTINCT TOP 10 YourColumn FROM dbo.YourTable ORDER BY YourColumn DESC ) SELECT * FROM dbo.YourTable tbl INNER JOIN Top10Distinct cte ON tbl.YourColumn = cte.YourColumn
ALTER TABLE sales CHECK CONSTRAINT ALL;
SELECT m1.ModeName, m2.ModeName, m3.ModeName, m4.ModeName, m5.ModeName FROM Modes m LEFT JOIN Ref m1 on m1.ModeID = m.Mode1 LEFT JOIN Ref m2 on m2.ModeID = m.Mode2 LEFT JOIN Ref m3 on m3.ModeID = m.Mode3 LEFT JOIN Ref m4 on m4.ModeID = m.Mode4 LEFT JOIN Ref m5 on m5.ModeID = m.Mode5
SELECT SLEEP(600);
ALTER TABLE foo ADD COLUMN tempbar text; UPDATE foo SET tempbar = cast(cast(bar as varchar) as text); ALTER TABLE foo DROP COLUMN bar; ALTER TABLE foo ADD COLUMN bar text; UPDATE foo SET bar = tempbar; ALTER TABLE foo DROP COLUMN tempbar;
update Mytable set Sal=1.05*sal where departmentId=xxx
SELECT a.datatime , sum(case when a.tagname = 'grp1_tagA' then a.interesting else NULL end) as tagA , sum(case when a.tagname = 'grp1_tagB' then a.interesting else NULL end) as tagB , sum(case when a.tagname = 'grp1_tagC' then a.interesting else NULL end) as tagC FROM everything AS a WHERE a.datatime >= '2013-12-04' GROUP BY a.datatime ;
select s.s_id, p.p_id, count(d.Did_Something) as Count_D_Did_Something, -- nulls won't be counted sum(CASE WHEN d.Did_Something = 1 THEN 1 ELSE 0 END) as Count_D_Did_Something_is_one from Soknad as s left join Prognose as p on p.P_S_ID = s.s_id left join Did as d on d.D_S_ID = s.s_id
select id , sum(octSecAndthrd1 + octSecAndthrd2 + octSecAndthrd3 + octSecAndthrd4) col1 , sum(octSecAndthrd5 + octSecAndthrd6 + octSecAndthrd7 + octSecAndthrd8) col2 from ...
IF EXISTS(SELECT * FROM YourTable)
SELECT * FROM team_by_membre WHERE id_team IN ( SELECT id_team FROM team_by_membre WHERE id_membre = ? AND level = 1 );
WITH Base AS ( SELECT ROW_NUMBER() OVER (ORDER BY [Count] DESC) RowNum, [Dept], [Count] FROM SR ) SELECT SR.Dept, SR.Count, SUM(SR2.[Count]) Total FROM Base SR INNER JOIN Base SR2 ON SR2.RowNum <= SR.RowNum GROUP BY SR.Dept, SR.Count ORDER BY SR.[Count] DESC
;with cte as(select *, row_number() over(partition by studentid, songid order by solutiondate, solutiontime) rn from tablename) select studentid, songid, max(case when rn = 1 then solutiontime end) as timea, max(case when rn = 2 then solutiontime end) as timeb, max(case when rn = 3 then solutiontime end) as timec from cte group by studentid, songid
CREATE TABLE PATIENT_ACCOUNT ( ID NUMBER , PATIENT_ID NUMBER , ACCOUNT_ID NUMBER ); INSERT INTO PATIENT_ACCOUNT VALUES(1, 11, 22); UPDATE PATIENT_ACCOUNT SET PATIENT_ID = 1 AND ACCOUNT_ID = 2 WHERE ID = 3; -- ORA-00933: SQL command not properly ended UPDATE PATIENT_ACCOUNT SET PATIENT_ID = 33 , ACCOUNT_ID = 44 WHERE ID = 1; -- 1 rows updated.
SELECT DATE_FORMAT(Date, '%Y-%m-%d') AS Timestamp, AVG(value) FROM abc GROUP BY DATE(Date)
Update c Set pid = Case When course_name = ? Then ? Else pid End
Select [...], request.Id From [Action] inner join [other tables on ...] inner join Person on Action.PersonId = Person.Id left JOIN request as r on r.PersonId = Person.Id left JOIN Subject as s on s.SubjectId = r.SubjectId left JOIN TypeRequest tr on tr.IDSujet = s.SubjectId **and typeRequest = 'MOVE'** Where ([already existing conditions])
alter table t1 drop FOREIGN KEY FKA126572FF5D5DSE; ALTER TABLE t1 DROP INDEX FKA126572FF5D5DSE;
with cte as ( SELECT Product.ID, Product.No FROM Product WITH(NOLOCK) WHERE Product.Type = 1 ) SELECT ID FROM cte WHERE No = '123456789' UNION SELECT Description.ID FROM Description WITH(NOLOCK) WHERE Description.Opis LIKE '%hello%' AND Description.ID IN (SELECT ID from cte)
DELETE o FROM orders o WHERE date_received <= date_sub(current_date, interval 2 day) and status = 0;
select regexp_replace('..agsb', '^(\.+)([^. ])', '\1 \2') as output from dual;
select Nom from tab where ( libelle != '' and ( Nom like Nom1 or Nom like Nom2 ) ) or ( libelle = '' and Nom like Nom3 )
select user_name, id, min(status), sum (calls) from yourtable where status in ('BadAD', 'Lead', 'DNC') group by user_name, id
Adapt the code Private Sub Command_Click() Dim top_num As Long Dim SQL As String top_num = Top_number.Value sSQL = _ "SELECT week, SUM(price1/price2 * turnover)/SUM(turnover) AS [PriceIndex]" & _ "FROM Table1 AS F INNER JOIN TopTable AS T ON F.code=T.code" & _ "WHERE F.code IN ( " & _ "***SELECT TOP " & top_num & " code" & _ "FROM TopTable)" & _ "GROUP BY week;" ' Add This : Me!subform1.Form.RecordSource = sSQL End Sub
- (BOOL)modelChanged { NSError *error; NSURL * sourceURL = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@"db.sqlite"]; NSDictionary *sourceMetadata = [NSPersistentStoreCoordinator metadataForPersistentStoreOfType:NSSQLiteStoreType URL:sourceURL error:&error]; BOOL isCompatible = [[self managedObjectModel] isConfiguration:nil compatibleWithStoreMetadata:sourceMetadata]; return isCompatible; }
SELECT m.Id, m.column1, CASE WHEN s.Id IS NULL THEN 'Not Exists' WHEN s.column2 IS NULL THEN 'Null Value' ELSE s.column2 END AS column2 FROM mainTable AS m LEFT JOIN secondTable As s ON s.Id = m.Id ;
select sum(price*quantity) as yoursum from yourtable
Insert into Server2.Database2.dbo.MapTable1 select * from table1
SELECT t1.* FROM YourTable t1 JOIN (SELECT MIN(Col1) AS FirstId FROM YourTable GROUP BY Col2) x ON t1.Col1 = x.FirstId
SELECT FirstName, LastName, r.Email, min(ListingID) as ListingID, ListingFirmID FROM sancap_Residential_Property e JOIN sancap_Agent r ON e.ListingAgentID = r.AgentID JOIN sancap_Office d ON e.ListingFirmID = d.firmID WHERE ListingFirmID != 'BrokerC' GROUP BY FirstName, LastName, r.Email, ListingFirmID
on a.userid = n.userid
select mprev.hips - m.hips as hips, mprev.wrist - m.wrist as wrist, mprev.abs - m.abs as abs, mprev.weight - m.weight as weight from measurements m join measurements mprev on me.week = mprev.week + 1;
CREATE TRIGGER upd_check BEFORE UPDATE ON account FOR EACH ROW BEGIN IF NEW.amount is NULL THEN SET NEW.item = 0; END IF; END;
SELECT a.question_id, a.level, COUNT(a.question_id) AS rank, SUM(SELECT(rank)) AS total FROM logs AS a, question AS b WHERE a.question_id = b.q_id AND a.level = '2' GROUP BY a.question_id ORDER BY rank DESC
CREATE TRIGGER myPostsTrigger AFTER INSERT ON posts FOR EACH ROW BEGIN UPDATE categories SET count = count + 1 WHERE id = NEW.category_id END
C:\>sqlplus sys@\"localhost:1521/orcl12\" as sysdba SQL*Plus: Release 12.1.0.2.0 Production on Fri Sep 18 13:10:19 2015 Copyright (c) 1982, 2014, Oracle. All rights reserved. Enter password: Connected to: Oracle Database 12c Enterprise Edition Release 12.1.0.2.0 - 64bit Production With the Partitioning, OLAP, Advanced Analytics and Real Application Testing options SQL>
public DbSet<art> arts { get; set; }
DECLARE @sql NVARCHAR(max)='SELECT ' DECLARE @TableName NVARCHAR(max) = 'Table_Name' -- <-- Set the target table name here SELECT @sql=@sql+N'ISNULL(CAST(' + name +' as NVARCHAR(max)), '''')+'',''+' FROM sys.columns WHERE object_id=OBJECT_ID(@TableName) SELECT @sql=SUBSTRING(@sql,1,LEN(@sql)-5)+N' FROM ' + @TableName --SELECT @sql -- uncomment to see the query string EXEC sp_executesql @sql
CREATE VIEW balance_amount AS SELECT la.creditid, la.credit_type, amount - COALESCE(SUM(pay),0) balance FROM loan_amount la LEFT JOIN pay_the_loan pl ON la.creditid = pl.creditid AND la.credit_type = pl.credit_type AND pl.status = 'OK' GROUP BY la.creditid, la.credit_type, la.amount;
update patient set security_level = '2' where security_level = '1';
SELECT c.cust_id, nvl2( q.tel_no, null, c.tel_no ) tel_no, nvl2( q.email, null, c.email ) email FROM contact_data c LEFT JOIN ( SELECT cust_id, min(case channel when 'tel_no' then 1 end) tel_no, min(case channel when 'email' then 1 end) email FROM opt GROUP BY cust_id ) q ON c.cust_id = q.cust_id ORDER BY c.cust_id
INSERT INTO @MyTableVar(id, EmployeeId) SELECT id, EmployeeId FROM ( MERGE dbo.target TGT USING dbo.source SRC ON TGT.employee = SRC.employee WHEN NOT MATCHED THEN INSERT (employee) VALUES (src.employee) OUTPUT inserted.id, SRC.EmployeeId) AS out(id, EmployeeId);;
select tab.name, col.name, typ.name, col.max_length, * from sys.columns col join sys.tables tab on col.object_id = tab.object_id join sys.types typ on col.system_type_id = typ.system_type_id where tab.name = 'Test'
SELECT * FROM ( (SELECT name, 'man' as source FROM man) UNION ALL (SELECT name, 'woman' FROM woman ) ) AS my_table ORDER BY name
WITH temp AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY name) AS 'RowNumber' FROM sometable ) SELECT * FROM temp WHERE RowNumber BETWEEN 40 AND 60
SELECT STATE, SUM(Point) AS MEDAL, SUM(CASE WHEN Point = 7 THEN 1 ELSE 0 END) AS GoldCount, SUM(CASE WHEN Point = 5 THEN 1 ELSE 0 END) AS SilverCount, SUM(CASE WHEN Point = 4 THEN 1 ELSE 0 END) AS BronzeCount FROM [Sheet2$] GROUP BY STATE ORDER BY SUM(Point) DESC
REPLACE INTO `cf_cal_events`(`model_id`) SELECT `id` FROM `cal_events_`
CREATE SEQUENCE myid_seq; ALTER TABLE mytable ADD COLUMN myid bigint NOT NULL DEFAULT nextval('myid_seq');
select min(pk), a, b, c from @dummy group by a, b, c
and a.day = trim(to_char(A.PRESENTATIONDATESTART+delta, 'Day'))
SELECT (CASE WHEN password = 'WrittenPassword' THEN 1 ELSE 0 END) AS is_equal FROM users WHERE username = 'someuser'
select substr(table.column,1,1) from table order by table.column
JOIN conf_log t ON x.date_changed = t.date_changed And x.Order_Number = t.Order_number
select * from TABLE1 MS JOIN TABLE2 TM ON MS.CID = TM.CID JOIN (SELECT TA.*, ROW_NUMBER() OVER (PARTITION BY EID ORDER BY STATUS DESC) as seqnum FROM TABLE3 TA ) TA ON TM.EID = TA.EID AND seqnum = 1;
Select sales_ref_no, STUFF(( SELECT ' | ' + B.Description FROM YOUR_TABLE B WHERE (B.sales_ref_no = A.sales_ref_no) FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,'') AS Description From YOUR_TABLE A Group By sales_ref_no
(@shift = 'Nights' AND DATEPART(hh,[PostingDate]) NOT BETWEEN 6 and 17) or (@shift = 'Days' AND DATEPART(hh,[PostingDate]) BETWEEN 6 and 17)
select case when date '2010-12-05' between range1_from and range1_to then range1_rate when date '2010-12-05' between range2_from and range2_to then range2_rate when date '2010-12-05' between range3_from and range3_to then range3_rate end as rate from events where date '2010-12-05' between range1_from and range1_to or date '2010-12-05' between range2_from and range2_to or date '2010-12-05' between range3_from and range3_to;
1 1 1 2 1 3 2 1 2 2 2 3 3 1 3 2 3 3
SELECT * FROM Customer c WHERE NOT EXISTS( SELECT 1 FROM GroupCustomer WHERE CustomerID = c.CustomerID AND GroupID = @selectedGroupParameter )
insert ignore into table2 (description) select t.description from table1 t join ( select distinct description from table1 ) t1 on (t.description=t1.description);
SELECT dbo.Clients.Town AS Town, count(*) AS wkTotal, sum(CASE WHEN datepart(dayofyear, status_date) = DATEPART(dayofyear, getdate()) THEN 1 ELSE 0 END) AS dayTotal FROM dbo.Clients WHERE dbo.Clients.Status LIKE 'Status 1%' AND datepart(week, GETDATE()) = datepart(week, dbo.Clients.Status_date) AND YEAR(GETDATE())= YEAR(dbo.Clients.Status_date) GROUP BY dbo.Clients.Town ORDER BY dbo.Clients.Town
tmpCol.query(Tablename, columns, "WHERE Clause LIMIT xx OFFSET yy", selectionArgs[], having, orderBy);
select distinct Inbound.* from Inbound inner join Rules on Inbound.campaign_id = Rules.campaign_id where -- or adding these conditions to the INNER JOIN would be the same Inbound.Entry_status = Rules.Entry_status and Inbound.Error_code = Rules.Error_code;
select round(123.456, 2, 1)
SELECT dc.content, dc.state FROM destination_content dc INNER JOIN properties p ON ( dc.state = p.state AND dc.content = p.content ) WHERE p.active = 1
WHERE dbo.[Order].WebsiteID IN (1, 2, 8, 12) AND dbo.[Order].OrderStatusID = 1 AND OrderDate >= DateAdd(Hour, DateDiff(Hour, 0, GetDate())-12, 0) AND OrderDate < DateAdd(Hour, DateDiff(Hour, 0, GetDate())-11, 0)
DECLARE @XML XML = ' <reservation> <reservationNo>9833591189</reservationNo> <securityCode>ad4badfd56</securityCode></reservation>' SELECT reservationNo = Events.value('(reservationNo)[1]', 'varchar(100)'), securityCode = Events.value('(securityCode)[1]', 'varchar(100)') FROM @XML.nodes('/reservation') AS XTbl(Events)
WITH RECURSIVE tree (id, par, name) AS ( SELECT id, par, name FROM the_table WHERE name = 'Nicole' UNION ALL SELECT id, par, name FROM the_table tt JOIN tree tr ON tr.id = tt.par ) SELECT * FROM tree
SELECT item, count(*) as num_rows, sum(quantity > 20) as count_over_20, sum(quantity <= 20) count_20_or_lower FROM Sales GROUP BY item;
>>ssh user@your_website.com >>Enter password: your_password >>mysqldump -u [uname] -p[pass] [dbname] > [backupfile.sql]
SELECT `user` FROM tablename WHERE `option` in ('A', 'D') GROUP BY `user` HAVING COUNT(DISTINCT `option`) = 2;
SELECT DISTINCT d.* FROM ticket_data d LEFT OUTER JOIN ticket_comment c on c.tid = d.id WHERE ( d.subject LIKE '%test%' OR d.message LIKE '%test%' OR c.comment LIKE '%test%' )
SELECT e.id AS id, e.name AS name, e.url AS url, p.action AS action, gk.key AS `key` FROM event AS e LEFT JOIN participation AS p ON (p.event=e.id AND p.person='139160') LEFT JOIN goldenkey AS gk ON gk.issuedto=p.person
1.table products_id (master table) 1.id- Primary Key 2.id_product_size- References size.id (FK) 3.id_product_color- References color.id (FK) 2. table product_name 1.product_id- References product_id.id(FK) 2.name 3.parents 3.table size 1.id- Primary Key 2.size_name 3.quantity 4.table color 1.id- Primary Key 2.colors 3.quantity
SELECT E.Name,E.Salary FROM E WHERE E.DepWorking IN (SELECT DepWorking FROM E WHERE Name = 'Mike') AND E.Name <> 'Mike' ;
DECLARE @variableName int SELECT @variableName = productID FROM mproducts WHERE .. SELECT ProductVersionID FROM cb_mproductversions WHERE ProductID = @variableName
ALTER TABLE `table` ALTER `field` SET DEFAULT 'value'
select full_name, string_agg(substr(initials, 1,1)||'.', ' ') initials from ( select full_name, unnest(string_to_array(full_name,' ')) initials from my_table ) sub group by 1; full_name | initials ------------------------+------------- Phil Smith | P. S. Joe Blow | J. B. Jose Maria Allan Pride | J. M. A. P. Eric A. Korver | E. A. K. (4 rows)
select q.question_id,count(student_id)*100/ (select count(distinct student_id)from student_answers ) as "Percentage Student Fail Rate" from student_answers s,questions q where q.question_id=s.question_id and correct_answer<>student_answer group by q.question_id having count(student_id)*100/(select count(distinct student_id)from student_answers ) > 30
SELECT service_type, COUNT(service_type) AS GrandTotal, COUNT(CASE WHEN created_on BETWEEN '2013-01-01' AND '2013-06-30' THEN 1 END) AS FirstHalf2013 FROM qba_customers GROUP BY service_type ORDER BY GrandTotal
SELECT distinct on (p.id) p.id as postid, (CASE WHEN user_id = 1 THEN true ELSE false END) as upvoted FROM post p LEFT OUTER JOIN upvoted u ON u.post_id = p.id ORDER BY p.id, upvoted desc;
TwitterObjectFactory.getRawJSON(status);
select sys_context ( 'userenv' , 'instance_name' ) from dual
class MyService { def dataSource void addNewRecord(String data) { groovy.sql.Sql sql = new Sql(dataSource) sql.execute("insert into my_table(my_anydata_clomn) values(sys.anyData.convertVarchar2(?))",[data]) } }
InnerException: Oracle.DataAccess.Client.OracleException Message="ORA-02049: timeout: distributed transaction waiting for lock"
SELECT DISTINCT product_id FROM oc_product_attribute t1 WHERE EXISTS(SELECT * FROM oc_product_attribute t2 WHERE t1.product_id=t2.product_id AND attribute_id = 26 AND CAST(text AS UNSIGNED) >= '1' ) AND EXISTS (SELECT * FROM oc_product_attribute t3 WHERE t1.product_id=t3.product_id AND attribute_id = 29 AND text = 'Flange')
SELECT Description,EID,Basecode from table2 where EID<>7006 AND EID<>3456
select incidentid_uk, personid_uk, (select count(*) from table as t2 where t2.incidentid_uk = t.incidentid_uk and t2.personid_uk <= t.personid_uk ) as sequence from table as t;
;with mytmp (f1) as ( SELECT Col1 FROM Table WHERE Col1 = 123456 ORDER BY Col1 FOR XML PATH('col'),root('cols'),TYPE ) select isnull(f1, '<cols></cols>') from mytmp;
SELECT t1.plan_id, STUFF(( SELECT '; ' + t2.reason FROM orders AS t2 WHERE t1.plan_id = t2.plan_id FOR XML PATH('') ), 1, 2, '') as reason FROM dbo.orders AS t1 GROUP BY plan_id
SELECT MIN(OriginalBeginDate) as OriginalBeginDate, MIN(OriginalEndDate) as OriginalEndDate, [START DATE], [END DATE] FROM myTable GROUP BY [START DATE], [END DATE]
Select a.date,a.companyname,a.CompanyPrice,b.TodayPrice from DailyData a LEFT JOIN ReportData b ON a.CompanyId= b.CompanyId WHERE a.Date = '25-12-2011';
SELECT DISTINCT school_id, school_name FROM school WHERE school_id not in (SELECT school_id FROM school_teams)
SELECT p.usr_newref as reference, pag.tps_title as groupname, pag.pm_serial_number as serialnum FROM pm_process p OUTER APPLY (SELECT TOP 1 pa.pm_serial_number, g.tps_title FROM pm_process_assignment pa JOIN tps_group g ON g.tps_guid = pa.pm_group_guid WHERE pa.pm_process_guid = p.pm_guid ORDER BY pm_serial_number DESC ) pag
CHECKPOINT DBCC DROPCLEANBUFFERS
var innerQuery = from fb in FoorBar where fb.BarId = 1000 select fb.FooId; var result = from f in Foo where innerQuery.Contains(f.FooId) select f;
Select userid, COUNT(userid) as UserTotal From yourtable group by userid
_id int primary key autoincrement
Select d.doctor_id, coalesce(count(p.patient_id),0) as `patient_count` from doctor d left join patient p on d.doctor_id=p.registered_with group by d.doctor_id;
profile Table ID | username | stateID 0 | jack | 1 1 | ted | 2 states table ID | countryID | state 0 | 0 | Texas 1 | 0 | New york 2 | 1 | Alberta countries table ID | country 0 | United States 1 | Canada
awk 'NR==FNR{a[$1]=$0;next}a[$2]~/shipped/{print $0}' list.txt cpu.txt
@MySubject varchar(max)
SELECT count(*) FROM cuesheet_tx_dates td INNER JOIN cuesheets s ON td.cuesheets_id = s.id WHERE td.txdate BETWEEN '2015-01-01' and '2014-01-31' AND td.trans_station = 'HIS' AND s.status = 'C';
SELECT user_id, max(add_date) FROM my_table GROUP BY user_id HAVING -- no date outside of the requested range MIN(add_date) BETWEEN '2014-07-21' and '2014-07-22' AND MAX(add_date) BETWEEN '2014-07-21' and '2014-07-22'
select top 10 field1, field2, (select count(*) from table) as totalrows from table
SELECT item_id, SUM(vote_value) AS sum FROM votes GROUP BY item_id ORDER BY sum DESC LIMIT 1
SELECT *, SUM(... some SQL removed for brevity ...) AS Occurrences FROM some_table AS q WHERE criterion = 'value' GROUP BY q.P_id HAVING SUM(... some SQL removed for brevity ...) > 0 ORDER BY Occurrences DESC LIMIT 10;
Select a.userID, a.name, b.groupName from USERS a, GROUPS b, USERGROUPMAP c where c.userID = a.userID and b.groupID = c.groupID and c.userID = <searchID>
UPDATE r SET r.[FirstSeen] = GetDate() FROM [dbo].[Results] r INNER JOIN [dbo].[WebPages] p ON p.[Id] = r.[WebPages_Id] WHERE p.[WebSites_Id]=@SiteId
select (case when date >= date_sub(now(), interval 3 month) then '3month' when date >= date_sub(now(), interval 6 month) then '6month' when date >= date_sub(now(), interval 9 month) then '9month' when date >= date_sub(now(), interval 12 month) then '12month' end) as grp, sum(cost) as sumcost from table t where date >= date_sub(now(), interval 12 month) group by grp;
SELECT t1.* FROM DOCUMENT t1 INNER JOIN (SELECT NUMBER, REVISION, MAX(ITERATION) FROM DOCUMENT GROUP BY NUMBER, REVISION) t2 ON t1.NUMBER = t2.NUMBER AND AND t1.REVISION = t2.REVISION AND t1.ITERATION = t2.ITERATION
UPDATE bt SET EffectiveDate = st.EffectiveDate FROM dbo.BiggerTable bt INNER JOIN dbo.SmallerTable st ON bt.ID = st.ID -- maybe you also need this condition, if not *ALL* EffectiveDate values in the -- smaller table are indeed before the values in the bigger table WHERE st.EffectiveDate < bt.EffectiveDate
+ddl ....group1_ddl.sql ....group2_ddl.sql +procedures ---level1 ......single_sp.sql ......another_sp.sql ---level2 ......another_uses_level1_sp.sql ---leveln ......remaining_sp.sql +views --level1 ......group_of_views.sql
order by CASE WHEN "column"=1 THEN 1 WHEN "column"=2 THEN 2 ELSE 3 END
select DATEDIFF(mi,CONVERT(time(7),GETDATE()),CONVERT(time(7),'09:50:00'))
UPDATE your_table SET column_name = LPAD(column_name, 14, "0") WHERE LENGTH(column_name) < 14
SELECT b.* FROM ( SELECT MAX(mid) AS maxmid FROM messages WHERE chat_id IS NULL GROUP BY uid ) a INNER JOIN messages b ON a.maxmid = b.mid
SELECT * FROM Table_1 AS t1 WHERE EXISTS (SELECT * FROM Table_2 AS t2 WHERE t1.Id = t2.Id AND Name='p1') AND NOT EXISTS (SELECT * FROM Table_2 AS t2 WHERE t1.Id = t2.Id AND Name='p2')
SELECT B.idimpianto, B.CodiceImpianto, B.DescrizioneImpianto, B.CodiceCDC, B.descrizioneCDC FROM dbo.vImpianti b cross apply ITCOWBase.dbo.GetImpiantiUtente(B.idimpianto)
select a.*, coalesce(b.col1, c.col1) as col1, coalesce(b.col2, c.col2) as col2 from a left join b on a.categoryId = 'G' and a.bid = b.bid left join c on a.categoryid = 'B' and a.cid = c.cid;
SELECT plr_function( array_agg(array[s.id,s.latitude_decimal,s.longitude_decimal]) ) FROM climate.station s WHERE s.applicable AND s.latitude_decimal BETWEEN box.latitude_min AND box.latitude_max AND s.longitude_decimal BETWEEN box.longitude_min AND box.longitude_max
UPDATE tablename SET url = CONCAT( 'http://my.domain.com/wordpress/wp-content/uploads/', REPLACE( REPLACE( SUBSTRING_INDEX( SUBSTRING_INDEX(url, '/', -3), '-', 3), 'temp-', ''), '-', '/'), '/', SUBSTRING_INDEX(url, '/', -1));
DECLARE @myvariable VARCHAR(100) SET @myvariable = 'mytext' DECLARE @sql NVARCHAR(200) SET @sql = 'SELECT Name AS ' + QUOTENAME(@MyVariable) + ' FROM Customers' EXEC sp_executesql @sql
USE Master_DB CREATE PROCEDURE TransferData @tableFrom SYSNAME ,@tableTo SYSNAME ,@databaseTo SYSNAME AS DECLARE @sql NVARCHAR(MAX) SET @sql = 'INSERT INTO ' + @databaseTo+ '.dbo.' + @tableTo + ' SELECT * FROM Master_DB.dbo.' + @tableFrom EXEC sp_executesql @sql GO;
select file_id, count(*) from data group by file_id
UPDATE MainTable SET MainTable.Source = NewTable.Source FROM MainTable INNER JOIN NewTable ON MainTable.ID = NewTable .ID
SELECT CASE WHEN col LIKE ';%' THEN STUFF(col,1,1,'') ELSE col END FROM dbo.table;
import json from django.core.serializers.json import DjangoJSONEncoder json_data = json.dumps(list(Post.objects.values('author__user__username', 'text')[:10]), cls=DjangoJSONEncoder)
SELECT category_id, category_name, COUNT(film_id) FROM film_category JOIN category USING category_id GROUP BY category_id, category_name;
CREATE TABLE ClientCharges ( ClientChargeId INT IDENTITY(1,1) , ClientId INT , ChargeId INT ) INSERT INTO ClientCharges (ClientId, ChargeId) VALUES (1, 1), (1,2), (1,3), (1,4), (2,1), (3,1), (3,2), (4,3), (4,4)
select p.* from products p join products_to_employer pe on p.id_product = pe.id_product join employers e on pe.id_employer = e.id_employer join customers c on e.id_customer = c.id_customer where c.id_customer = 4
use Config qw( %Config ); my $off_t = $Config{lseeksize} > $Config{ivsize} ? 'F' : 'j'; ... print $index_file pack($off_t, $offset); ...
SELECT * FROM T_USER u WHERE NOT EXISTS (SELECT NULL FROM T_MESSAGE WHERE user_id = u.user_id AND msgType = 1 AND answered = 0)
movie_x_id movie_y_id ratings_until users_connecting users_connecting_same users_connecting_anti
SELECT values.value, values.datetime FROM values, ( SELECT DATE(datetime) AS date, MIN(ABS(_WANTED_TIME_ - TIME(datetime))) AS timediff FROM values GROUP BY DATE(datetime) ) AS besttimes WHERE TIME(values.datetime) BETWEEN _WANTED_TIME_ - besttimes.timediff AND _WANTED_TIME_ + besttimes.timediff AND DATE(values.datetime) = besttimes.date
SELECT name,v1,v2,v3 FROM my_table UNION ALL SELECT "total",sum(v1) as v1 ,sum(v2) as v2 ,sum(v3) as v3 FROM my_table;
SELECT m.member, mx.state, mx.country FROM Member m LEFT OUTER JOIN ( SELECT ma.state, ma.country, ma.member from MemberAddress ma INNER JOIN (SELECT Member, MAX(Modified) AS MaxDate FROM MemberAddress GROUP BY Member) AS m2 ON (ma.Member = m2.Member AND ma.Modified = m2.MaxDate) ) mx ON m.member = mx.member
SELECT a.ID AS a_ID, b.ID AS b_ID, b.Tag AS Tag FROM table_a a LEFT JOIN table_b b ON a.id = b.aID WHERE NOT EXISTS (SELECT * FROM table_b bin WHERE bin.aID = a.ID AND bin.Tag = 'hide')
update aliasName set aliasName.user_count =1 from new_user aliasName inner join users u on aliasName.userid = u.userid where email = 'j@j.co.uk'
-- Fetch all 'IN' records without a corresponding 'OUT' SELECT tp_in.* FROM timePunches tp_in LEFT JOIN timePunches tp_out ON tp_in.employeeID = tp_out.employeeID AND tp_in.punchDATETIME = tp_out.punchDTC_LINK WHERE tp_in.punchDIRECTION = 'IN' AND tp_out.punchDTC_LINK IS NULL;
SELECT table_catalog, table_schema FROM information_schema.tables WHERE table_name = 'student'
Insert Into Food2(Speciality2) SELECT Distinct Split.a.value('.', 'VARCHAR(100)') AS String FROM (SELECT CAST ('<M>' + REPLACE([Speciality], ',', '</M><M>') + '</M>' AS XML) AS String FROM food) AS A CROSS APPLY String.nodes ('/M') AS Split(a);
ALTER IGNORE TABLE `table_name` ADD UNIQUE (`hash`)
select Col1, Col2, Col3, Col4, Col5, max(isnull(Col6,0)), max(isnull(Col7,0)), max(isnull(Col8,0)), max(isnull(Col9,0)) from table1 group by Col1, Col2, Col3, Col4, Col5
select * from b where not exists (select no from A where A.id=B.id and date=@yourdate)
SELECT a.id, a.to_id, a.from_id, a.seen, a.date, a.message FROM `Chat_messages` a INNER JOIN ( SELECT MAX( `id` ) AS id FROM `Chat_messages` AS `alt` WHERE `alt`.`to_id` =7 OR `alt`.`from_id` =7 GROUP BY least(`to_id` , `from_id`), greatest(`to_id` , `from_id`) )b ON a.id = b.id
CREATE TRIGGER flag_order_complete AFTER UPDATE ON Sales_Order_Details FOR EACH ROW BEGIN DECLARE total_balance INT(10); SELECT SUM(Balance) INTO total_balance FROM Sales_Order_Details WHERE Order_ID = new.Order_ID; IF (total_balance = 0) THEN UPDATE Sales_Order SET Status = 'C' where Order_ID = new.Order_ID; END IF; END;
update table set CompanyName = LTRIM(RTRIM(CompanyName))
SELECT u.name AS user_name, l1.name as primary_location , l2.name as secondary_location FROM users u JOIN locations l1 ON(u.pri_location_id=l1.location_id) JOIN locations l2 ON(u.sec_location_id = l2.location_id);
SELECT w.WeekNumber, SUM(m.Value) FROM MyTable as m RIGHT OUTER JOIN WeeksInYear AS w ON DATEPART(wk, m.date) = w.WeekNumber GROUP BY w.WeekNumber
select a.ID, count(distinct b.id) childB, count(distinct c.id) childC, count(distinct d.id) childD from tableA a left join tableB b on b.parentID = a.ID left join tableC c on c.parentID = b.ID left join tableD d on d.parentID = c.ID where a.ID=1 group by a.ID;
from asset in MyAssetTable group asset by asset.AssetName into AssetNames where AssetNames.Count() > 1 select new { AssetNames.Key, AssetNames.Count() }
WITH Weeks AS ( SELECT CONCAT(DATEPART(YEAR, CreatedOn),DATEPART(WEEK, CreatedOn)) Week, Id, CreatedOn, Value FROM Table1 ), Ranked As ( SELECT Week, CreatedOn, Value, ROW_NUMBER() OVER (PARTITION BY Week ORDER BY Value DESC) Rnk FROM Weeks ) SELECT Week, CreatedOn, Value FROM Ranked WHERE Rnk = 1;
Select code, SUM(amount) from sales_order_tax group by code
`SET echo OFF` `SET feedback OFF` `SET pagesize 0` `SET term OFF` `SET trims ON` `SET timing OFF` `SET verify OFF` `SPOOL D:\result.txt` `select a.id || '|' || a.name || '|' || a.Country From Customer a, list b` `where a.id = b.id;` `SPOOL OFF` `quit`
SELECT c.Description, r.IsRead, r.UserID FROM dbo.Calls c LEFT JOIN dbo.TicketRead r ON c.CallID = r.TicketID AND r.UserID = 1
SELECT first.id, first.name, second.note FROM first LEFT JOIN second ON first.id = second.id ORDER BY first.id
SELECT TEST_CODE, TEST_MDL, CONVERT(varchar(20),ISNULL(TEST_MDL,'null')) FROM TEST;
ObjectContext objectContext = ((IObjectContextAdapter)context).ObjectContext; string dbScript = objectContext.CreateDatabaseScript();
select id from ( select `to` id, `from` contact from msg union all select `from`, `to` from msg ) t where contact = 2 group by id order by count(1) desc limit 2
m21_nr <> someval and m21_nr <> someval1 and ..m21_nr <> null
INSERT INTO friends (memberid) SELECT 1 FROM dual WHERE NOT EXISTS (SELECT memberid FROM friends WHERE memberid = 1)
DECLARE temp_status_id INT; SELECT status_id INTO temp_status_id FROM car_status; INSERT INTO cars (type, status_id) VALUES ('GM',temp_status_id), ('Toyota',temp_status_id), ('Honda',temp_status_id);
select p.* from Profile p join (SELECT UserID, MIN(ProfilePriority) AS ProfilePriority FROM Profile WHERE ProfileLanguage = 'en-US' OR ProfilePriority = 2 GROUP BY UserID) tt on p.userID = tt.UserID and p.ProfilePriority = tt.ProfilePriority
SELECT DISTINCT LEAST(field1, field2), GREATEST(field1, field2) FROM t
with approvals as ( update jobcard_has_approvals set approve = true where id = 27 returning id ) update unit_has_jobcard set status = 'approval' where id = (select id from approvals);
select y.[Day],count(Id) from @Daye y left join @Data d on y.[Day] = d.[Day] and d.Status=1 group by y.[Day]
sqlexec(gnCones,"select * from table","cr_sql_res") thisform.txtName.AutoCompTable=dbf("cr_sql_res") thisform.txtName.AutoCompSource="cr_sql_res.field_name"
SELECT id, title, date FROM news UNION ALL SELECT id, title, date FROM gallery ORDER BY date, id, title
SELECT * FROM(SELECT first_name, salary FROM Employees ORDER BY salary ) WHERE ROWNUM = 1
SELECT * FROM TABLEANME WHERE CHARINDEX('/',Date)=0
declare @year int @year = 1910 while @year <= 2014 begin insert into years (year) values (@year) @year = @year + 1 end
SET ARITHABORT OFF; SET ARITHIGNORE ON;
update tblToUpdate set columnToUpdate = '0000-0000-0000-' + right(columnToUpdate , 4)
SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
select t1.col1 as cola, t2.col1 as colb from (select t1.*, row_number() over (order by id) as seqnum from table1 t1) t1 full outer join (select t2.*, row_number() over (order by id) as seqnum from table2 t2) t2 on t1.seqnum = t2.seqnum;
1 - Job username and Job password must have full access and permission of windows. 2 - You must be logged In to user that you will use in the replication script to create replication.
alter table Example add NewColumn int identity(1,1)
;WITH T AS ( SELECT *, MAX(NULLIF(Column2,'')) OVER (PARTITION BY Column1) AS C2 FROM YourTable ) UPDATE T SET Column2 = C2 WHERE Column2 IS NULL OR Column2 = '';
SELECT A.name, COUNT(B.call_id) AS 'outgoing call count' FROM EmployeeTable A LEFT JOIN ( SELECT call_from_name, call_id FROM CallTable WHERE call_type LIKE 'outgoing' AND voice_mail = '0' AND /* other CallTable filters */ ) B ON A.name = B.call_from_name WHERE /* only EmployeeTable A filters */ GROUP BY A.name
SELECT * FROM cases c LEFT JOIN users u1 ON c.fk_supporter = u1.user_id LEFT JOIN users u2 ON c.fk_creator = u2.user_id
>>> words = ["secret", "hidden"] >>> db = set([hashlib.sha256(word).hexdigest() for word in words]) >>> db set(['2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b', 'e564b4081d7a9ea4b00dada53bdae70c99b87b6fce869f0c3dd4d2bfa1e53e1c']) >>> def word_exists(word): ... return hashlib.sha256(word).hexdigest() in db ... >>> word_exists("hello") False >>> word_exists("hidden") True
INSERT INTO myScheme.myTable(id, a, b, c) VALUES ($1, $2, $3, $4) ON CONFLICT (id) DO UPDATE SET a=$2, b=$3, c=$4;
SELECT HighestGroupId, COUNT(*) AS Members FROM ( SELECT m.UserID, MAX(m.GroupId) AS HighestGroupId FROM Membership m GROUP BY m.UserID ) sub GROUP BY HighestGroupId
CREATE TRIGGER dbo.TR_iu_MyTable__LastUpdated on dbo.MyTable after insert, update AS SET NOCOUNT on UPDATE dbo.MyTable set LastUpdated = getdate() where MyTableId in (select MyTableId from inserted)
EntityManager manager = getEntityManager(); Query q = manager.createNativeQuery("BEGIN " + sqlScript + " END;"); q.executeUpdate();
CREATE PROCEDURE LookupOrCreateProduct @BarCode VARCHAR(100), @ProductID BIGINT OUTPUT AS BEGIN SET NOCOUNT ON; SELECT TOP 1 @ProductID = ProductID FROM dbo.Products WHERE BarCode = @BarCode IF(@ProductID IS NULL) BEGIN INSERT INTO dbo.Products(Barcode) VALUES (@BarCode) SET @ProductID = SCOPE_IDENTITY(); END END
select paperid, string_agg(name, ' ') as authors FROM newpaperauthor GROUP BY paperid ORDER BY paperid;
void *sqlite3_trace(sqlite3*, void(*xTrace)(void*,const char*), void*);
SELECT TOP 1 Time FROM ( SELECT TOP 10 PERCENT [Time] FROM Scores WHERE Lesson = 1 ORDER BY Time ) as Top10 ORDER BY Time DESC
select * from (SELECT a, b, a+b as TOTAL FROM ( select 7 as a, 8 as b FROM DUAL UNION ALL select 8 as a, 8 as b FROM DUAL UNION ALL select 0 as a, 0 as b FROM DUAL) ) WHERE TOTAL <> 0 ;
SELECT * FROM YourTable t WHERE t.depositDate between StartRangeDate and EndRangeDate AND t.ID in(select ID from(SELECT s.id,sum(s.depositAmount) as total from YourTable s where s.date between ThisMonthStart and ThisMonthEnd group by s.id) order by total limit 10)
SELECT game_id, COUNT(*) AS roundsCount, COUNT(CASE WHEN winner = player1_id THEN 1 END) As p1WinsCount FROM games AS g INNER JOIN rounds AS r ON g.Id = r.game_id GROUP BY game_id
SELECT * FROM wp_usermeta t1 WHERE meta_value = 'tagowner' AND EXISTS (SELECT 1 FROM wp_usermeta t2 WHERE t2.meta_value = '999' AND t1.user_id = t2.user_id )
SELECT p.name FROM product p JOIN product_type pt ON p.id = pt.product_id WHERE pt.typeid IN (3, 5, 8) /*You can use a sub query to select the types*/ GROUP BY p.name ORDER BY COUNT(pt.type_id) DESC LIMIT 1
^([0-9]+[A-Za-z]+[0-9]*)|([A-Za-z]+[0-9]+[A-Za-z]*)$
SELECT t2.company, t2.type, t1.dt, t2.value FROM tbldata t1, tblfact t2 WHERE t2.dt <= t1.dt AND NOT EXISTS (SELECT top 1 1 FROM tblfact t22 WHERE t22.dt <= t1.dt AND t22.dt > t2.dt)
SELECT message.pk, contact.name FROM message m LEFT JOIN session s on m.session = s.pk LEFT JOIN contact c on s.contact = c.pk
merge into duty_rota d using (select * from duty_rota ) s on ((d.rowid = 'AA1' and s.rowid = 'AA2') or (d.rowid = 'AA2' and s.rowid = 'AA1')) when matched then update set d.duty_date = s.duty_date
<?php $query = "SELECT dateCol from table"; $result = $mysqli->query( $query ); while ($row = $result->fetch_assoc()){ echo $row["dateCol"]; } ?>
SELECT t.* FROM table t JOIN ( SELECT points FROM table r WHERE r.gameid = 2 ORDER BY r.points DESC LIMIT 3 ) tr ON t.points = tr.points WHERE t.gameid = 2
UPDATE TOP 10 table SET flag = 1 WHERE flag = 0 OUTPUT inserted.*
SELECT CASE Month WHEN '1' THEN 'January' WHEN '2' THEN 'February' WHEN '3' THEN 'March' WHEN '4' THEN 'April' ... END+'-'+Year FROM TABLE
select /*+ FIRST_ROWS(5000) */ account from fooTable where rownum <5000;
SELECT s.supplierno FROM supplier AS s JOIN part_supplier AS ps ON s.supplierno = ps.supplierno JOIN part AS p ON ps.partno = p.partno GROUP BY s.supplierno HAVING COUNT(DISTINCT p.color) = 1 -- only one color for all parts
select t1.*, t2.* from table t1 join table t2 on t1.b <> t2.b and t1.c <> t2.c;
select regexp_replace('12-MAR-2014,,1234,DATA,VALUE,12/03/14,,124,End','[[0-9]{2}-(JAN|FEB|MAR|APR|JUN|JUL|AUG|SEP|OCT|NOV|DEC)-[0-9]{4}]*|[^a-zA-Z]+|$','%') from dual
SELECT (IF(pos1 LIKE 'var%', 1, 0) + IF(pos2 LIKE 'var%', 1, 0) + IF(pos3 LIKE 'var%', 1, 0) + IF(pos4 LIKE 'var%', 1, 0) + IF(pos5 LIKE 'var%', 1, 0) + IF(pos6 LIKE 'var%', 1, 0)) AS done FROM customize WHERE id = 'core2'
select nvl(col1,col2) from table1
select count(*) from BadWords where @userName like '%'+theBadWord+'%'
select TeacherName from ( select TeacherName, CourseN from Teacher group by TeacherName, CourseN ) t1 group by TeacherName having count(*) >=2
SELECT P.ID ,Name ,Number ,Location ,InterviewNo FROM Person P INNER JOIN (SELECT ID ,COUNT(1) AS InterviewNo FROM Interview WHERE Year(InterviewDate) = 2013 GROUP BY ID HAVING COUNT(1)> 1) I ON P.ID=I.ID
select * from **albums** a where a.private = 'no' or exists ( select 1 from **album permission** p where p.album_id = a.album_id and p.user_id = 5 )
select module_title, module_credit from modules m, module_tutor mt where mt.module_id=m.id and mt.tutori_id=?
SELECT t.Student, t.Class, t.Marks FROM tableName t INNER JOIN ( SELECT Student, max(Date) as MaxDate FROM tableName) tm ON t.Student=tm.Student AND t.Date=tm.MaDate) WHERE "Subject ID"=givenSubjectID
declare @ ListCrc32 insert into @ (crc32) select ... put here what you need to insert with. exec UpdateAdsList @
WITH TableBoxesRanked AS ( SELECT *, BoxNumber = ROW_NUMBER() OVER (ORDER BY BoxCode) FROM TableBoxes ) SELECT b.BoxNumber, ItemNumber = ROW_NUMBER() OVER (ORDER BY i.ItemNo), i.ItemDesc FROM TableItems i INNER JOIN TableBoxesRanked b ON i.BoxCode = b.BoxCode WHERE a.BoxCode = 'X1'
select d.date, n.number from dbo.Dates(@start, @finish) cross join Numbers n
grant execute on dbms_flashback to public; grant flashback any table to public;
select Name from t where id in (select manager_id from t)
SELECT * FROM CARS WHERE ABS(price - $price) = ( SELECT MIN(ABS(price - $price)) FROM CARS )
table: Room roomno INT phone_number INT number_of_beds INT smoking_allowed BOOLEAN table: Occupancy client_id BIGINT (FK referencing Client) (part of PK) roomno INT (FK referencing Room) (part of PK) checkin_time DATETIME table: pastStays client_id BIGINT (FK referencing Client) (part of PK) roomno INT (FK referencing Room) (part of PK) checkin_time DATETIME checkout_time DATETIME
DATEADD (datepart , number , date ) SELECT DATEADD(YEAR, 1, CreatedDateTime) FROM dbo.YOURTABLE
WITH cte AS ( SELECT AppId, Start, LoggedOn, ROW_NUMBER() OVER (ORDER BY AppId) rn FROM Apps ) SELECT c.AppId, CASE WHEN c2.RN IS NULL THEN DATEDIFF(day,c.start,c.Loggedon) ELSE DATEDIFF(day,c2.Loggedon,c.Loggedon) END as TimeWanted FROM cte c LEFT JOIN cte c2 on c.AppId = c2.AppId AND c.rn = c2.rn + 1
select t1.* from table1 t1 join table2 t2 on t1.category = t2.category where t1.rating >= t2.minimum_rating;
(CASE WHEN SUBSTRING(article_code,1,4) IN (select article_code from temp_table) THEN 'X' ELSE 'Y' END) AS lup
UPDATE t SET t.[e-mail] = t2.[e-mail] from [vdb].[dbo].[FACT_Sales] t inner join DIM_Staff t2 on t.Name = t2.Name
select * from table where keyword in (select keyword from table group by keyword having count(keyword)>1)
$queryUP = $pdo->prepare("SELECT * FROM unitprices WHERE id_quot = ?"); $queryUP->execute(array($idQuotation)); //here you go $results = $queryUP->fetchAll(); if ($results) { // foreach($results as $rowup) { //... // } } else { // do another thing }
with bydays as (<your query here>) select bd.*, (select sum(NumMeasured) from (select top 100 * from bydays bd2 where bd2.date <= bd.date order by date desc) t ) as Measured100, (select sum(NumPassingd) from (select top 100 * from bydays bd2 where bd2.date <= bd.date order by date desc) t ) as Measured100 from bydays
select case when country in('Austria','Spain','Italy') then Country else 'Other' end as Country, sum(Jan) as Jan, sum(Feb) as Feb, sum(Mar) as Mar from t group by case when country in('Austria','Spain','Italy') then Country else 'Other' end
SELECT Team.team_id, Years.year, COALESCE(count(Event.event_id),0) events FROM Team JOIN (SELECT DISTINCT EXTRACT(YEAR FROM start_date_time) year FROM Event) Years ON 1=1 LEFT OUTER JOIN Event ON Event.team_id = Team.team_id AND EXTRACT(YEAR FROM Event.start_date_time) = Years.year GROUP BY Years.year, team_id ORDER BY year ASC, team_id ASC ;
select * from juices j where j.barcode = '000000000001' and not exists (select * from juice_ingredients ji inner join ingredients i on (i.ingredient_id = ji.ingredient_id and i.optional = true) where ji.juice_id = j.juice_id)
DECLARE @REQUEST_DATE varchar(10) SELECT @REQUEST_DATE = '1/9/2010' select t1.* from (select ForeignKeyId,AttributeName, max(Created) AS MaxCreated from YourTable where created < @REQUEST_DATE group by ForeignKeyId,AttributeName) t2 join YourTable t1 on t2.ForeignKeyId = t1.ForeignKeyId and t2.AttributeName = t1.AttributeName and t2.MaxCreated = t1.Created
-- 60x60x24x7x4 = 2419200 seconds in four weeks SET @unix_four_weeks_ago = UNIX_TIMESTAMP(curdate()) - 2419200; SELECT id FROM USERS WHERE timemodified >= @unix_four_weeks_ago;
$events = DB::table('events') ->join ('locations', 'events.location_id', '=', 'locations.id') ->join('orgs', 'events.org_id', '=', 'orgs.id') ->select('events.id', 'events.name as event_name', 'orgs.name as org', 'locations.name as location') ->get(); return response()->json($events);
CREATE TRIGGER my_table_trig AFTER UPDATE OF comment ON MYTABLE BEGIN update MYTABLE SET evaluation_date = datetime('now') WHERE comment = NEW.comment; END;
SELECT qry_HersheySAPMaxDate2.ID, qry_HersheySAPMaxDate2.item,
SELECT A.Alpha ,A.Zeta ,B.Alpha ,B.Zeta FROM TABLEA A INNER JOIN TABLEB B ON A.alpha = B.alpha
select dbo.TIME_TO_SEC('01:00:00') from TimeTable
select t.* from traffic t inner join data_table d on t.id = d.id and d.contition = 1
CREATE TRIGGER `before_insert_products_extra_fields` BEFORE INSERT ON `products_extra_fields` FOR EACH ROW BEGIN IF(NEW.name = 'color') THEN SET NEW.value = CASE WHEN NEW.value LIKE '%red%' THEN 'red' WHEN NEW.value LIKE '%blue%' THEN 'blue' ... ELSE 'other' END; END IF; END
select tp.id, NVL( t.description, tp.description) from task_priority tp left outer join task_priority_i18n t on t.id = tp.id and t.culture = :culture
SELECT e.Id [EmployeeId], e.MgrId [ManagerId], m.MgrId [ManagerManagerId] FROM Employees e LEFT JOIN Employees m ON e.MgrId = m.Id WHERE e.EmpId=@EmpId
def employeeMultiplier = column[BigDecimal]("employeeMultiplier", O.DBType("decimal(10, 4)"))
SELECT * FROM YourTable t WHERE t.date <= '2015-12-31 23:59:59' AND NOT EXISTS(SELECT 1 FROM YourTable s WHERE t.customer_id = s.customer_id AND t.date < s.date)
select * from visit where DATE_visit between CURRENT_DATE - interval 2 year and CURRENT_DATE - interval 1 year;
ALTER TRIGGER [dbo].[HashTags_BeforeDelete] ON [dbo].[HashTags] FOR DELETE AS BEGIN INSERT INTO HashTagsArchive(Id, HashTagId, delete_date) SELECT d.Id, d.HashTagId, GETUTCDATE() FROM deleted d END GO
- table user - id - username - password - etc - table groups - id - name - etc - table usergroups - userid - groupid
merge into old_customer_source t1 using (select t2.custid, t2.firstname, t2.lastname from new_customer_source t2 ) t2 on (t1.custid = t2.custid) when matched then update set t1.firstname = t2.firstname, t1.lastname = t2.lastname ;
SELECT t.GalaxyId As TraceGalaxyId, m.GalaxyId as MainGalaxyId, m.umag, m.imag FROM trace JOIN main m ON m.galaxyId BETWEEN t.GalaxyId AND t.lastProgenitorId AND m.snap = 'Specific Value'
select * from COLUMNS where TABLE_SCHEMA='yourschema' and TABLE_NAME='yourtable' and EXTRA like '%auto_increment%'
UPDATE SUPPLY set sprice=(1.1*SPRICE) WHERE SUPPLY.SID IN (SELECT SID FROM Supplier WHERE Supplier.CITY='DC');
select x.* ,n.* from dbo.news n join ( select pk_news ,[rwn] = row_number() over(partition by pk_service order by pk_news asc) from dbo.news ) x on n.pk_news=x.pk_news and x.rwn < 6 order by n.pk_service, x.rwn
SELECT PERSONID FROM T_PERSON WHERE CCODE = ( CASE WHEN @CCODE = 'ALL' THEN CCODE ELSE @CCODE END ) AND EMPCODE = ( CASE WHEN @EMPCODE = 'ALL' THEN EMPCODE ELSE @EMPCODE END )
select * from table1 a where a.USER_ID in (select b.FROM from table2 b where exists (select c.id from table2 c where b.id = c.id and b.FROM = c.TO) )
select d.id, d.distance, d.time_s, (case when d.distance = 0 then sum(case when d.distance = 0 then d.time_s end) over (partition by grp order by id) end) as StopTime from (select d.*, sum(case when distance = 0 then 0 else 1 end) over (order by id) as grp from data d ) d;
.extra( where=["""history_date = (SELECT MAX(history_date) FROM historical_record hr WHERE hr.history_id = historical_record.history_id AND hr.history_date < %s)"""], params=[month_end] )
library(RJDBC) drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver","/sqljdbc4.jar") con <- dbConnect(drv, "jdbc:sqlserver://server.location", "username", "password") dbGetQuery(con, "select column_name from table")
SELECT * /* TODO - actual columns */ FROM visits WHERE date_out IS NULL AND date_in >= DATEADD(day,DATEDIFF(day,0,CURRENT_TIMESTAMP),0)
UPDATE #T1 SET CURRENTPOS = (SELECT SUM(ORDERQUANTITY) - SUM(RECEIVEQUANTITY) FROM #POS) WHERE CURRENT OF CURPO
mymetadata: tablename varchar(50) description varchar(2000)
create table GroupMembership ( ComputerID int not null, GroupID int not null, --here you can add info that concearns the Membership, like expiry date and such-- )
select t1.x, t2.y, s.count from (values(1),(2),(3),(4),(5)) t1(x) cross join (values(1),(2),(3),(4),(5)) t2(y) left join #temp s on t1.x = s.x and t2.y = s.y
select sysdate, trunc(sysdate, 'mm') + 13 date_to_query_before from dual; SYSDATE DATE_TO_QUERY_BEFORE --------------------- --------------------- 25/06/2015 15:23:55 14/06/2015 00:00:00
With rs .CursorLocation = adUseClient .CursorType = adOpenKeyset .LockType = adLockTypeOptimistic .Source = strSQL .ActiveConnection = dbConn .Open End With
Select ProductID, tblProduct.ProductType, Price, ((Price *.20)+Price) AS 'Increased Price' From tblProduct join tblCompany On tblProduct.CompanyID = tblCompany.CompanyID Where tblCompany.CompanyID IN (Select CompanyID From tblCompany Where City = 'Kalamazoo') Order By ProductID
Select Book_Name,Client_Name, max(date) From table A Group By Book_Name,Client_Name HAVING max(date) < any (select.. ...)
select u.fname from users u join students s on u.user_id = s.user_id join sections sec on s.section_id = sec.section_id where sec.section_id = 1 and sec.year_level_section = 1
SELECT m.*, COUNT(mo_member_id) mo_count FROM cd_members m LEFT JOIN cd_members_offers mo ON mo.mo_member_id = m.m_id WHERE (m.m_fname LIKE '%Richie%' OR m.m_lname LIKE '%Richie%' OR m.m_email LIKE '%Richie%') AND m.m_signupdate >= '2013-08-07' AND m.m_signupdate <= '2013-08-10' AND m.m_add_state = 'QLD' GROUP BY m.m_id HAVING mo_count BETWEEN 0 AND 5
COPY ( SELECT e.tposted, e.patient_recid, d.fileoninsurance FROM encountertimes e JOIN daysheets d USING(tposted, patient_recid) ) TO '/some/file'; -- or STDOUT ... COPY charges (tposted, patient_recid, fileoninsurance) FROM '/some/file';
SELECT AVG(T.col2) FROM (SELECT DISTINCT col1, col2 FROM yourtable) as T
SQL> rename old_table to something_else; SQL> rename new_table to old_table; SQL> drop table something_else;
select case when MyVarcharColumn NOT LIKE '%[^0-9]%' then convert(decimal(18,2), MyVarcharColumn) else MyVarcharColumn end as MyVarcharColumn from x
SELECT STAFFNAME, COUNT(*) as PERIODS FROM TABLE GROUP BY STAFFNAME
for(int i = 0; i < listView.getAdapter().getCount(); i++) SaveThing(listView.getAdapter().getItem(i));
SELECT EMPLOYEEID, LASTNAME || ', ' || FIRSTNAME As Employee_Name, HIREDATE, SALARYWAGE, CASE WHEN (SALARYWAGE > 1000) THEN (salarywage / 2000) ELSE salarywage END AS hourlywage FROM EMPLOYEE ORDER BY hourlywage DESC;
declare newTable myTable; begin newTable := myTable(); newTable.extend(2); -- The desired size of the collection -- Oracle collections begin at index 1, not 0 newTable(1) := myObject(50, 5); newTable(2) := myObject(40, 7); myProcedure(newTable); end;
Example of “noorder” sequence in 10g RAC: Session 1 on node-A: nextval -> 101 Session 2 on node-A: nextval -> 102 Session 1 on node-B: nextval -> 121 Session 1 on node-B: nextval -> 122 Session 1 on node-A: nextval -> 103 Session 1 on node-A: nextval -> 104
SELECT i.name as name, v1.value as value_1, v2.value as value_2 FROM item i INNER JOIN item_value iv ON iv.item = i.id INNER JOIN property p ON iv.property = p.id LEFT JOIN value v1 ON p.name = 'prop1' AND v1.id = iv.value LEFT JOIn value v2 ON p.name = 'prop2' AND v2.id = iv.value
val firstSpan = df.head()(0) val twoRows = df.filter("SPAN ='"+firstSpan+"'").orderBy("TIMESTAMP").take(2) val period = twoRows(1).getInt(2)-twoRows(0).getInt(2)
SELECT REPLACE(acctID, '.', '') AS ACCOUNT_ID FROM TABLE
SELECT null AS a, null AS b, null AS c FROM dual WHERE false UNION ALL SELECT <expr>, <expr>, <expr> FROM <realtable>...
WITH x AS (<subquery>) SELECT * FROM data WHERE f1 IN (SELECT * FROM x) OR f2 (SELECT * FROM x)
DATEPART ( datepart , date ) DATEPART( MM, GETDATE())
IF newEmployeeToBeInserted.IsManager AND Project_table.ContainsManager return errorCode ELSE doInsert
[SandwichT].[SandwichPrice] * [OrderDetailT].[SandwichQuantity] * [OrderDetailT].[Discount]
SELECT * FROM yourtableName WHERE UID NOT IN (SELECT UID FROM #test WHERE PID = 2)
DECLARE TYPE VarAssoc IS TABLE OF varchar2(200) INDEX BY varchar2(30); vars VarAssoc; BEGIN FOR r IN (SELECT table_name,tablespace_name FROM user_tables) LOOP vars(r.table_name) := r.tablespace_name; END LOOP; dbms_output.put_line( vars('JAVA$OPTIONS') ); END;
select * from dm_name WHERE regexp_like(last_name, '([^A-Za-z ''-])');
SELECT `date` FROM eventlog GROUP BY `date` HAVING COUNT(DISTINCT event) = 3
SELECT COMMON_NAME FROM Test_T WHERE XMLExists( 'CATALOG/PLANT[ZONE<=3]/COMMON[text()]' PASSING COMMON_NAME )
Select 'Yes' as "label", Count(*) FROM Table1 Where "date" between '2014-03-01' And '2014-03-05' AND col3 = 'Y' AND NOT (col1='A' AND col2 IS NOT NULL AND col2='N')
select * from (select * from Product_types t START WITH T.Parent = 20 CONNECT BY PRIOR t.Product_ID = t.PARENT) t_result left join Products p on T_RESULT.Product_ID = P.Product_ID AND P.Customer = 2;
insert into HISTORYTEACHES select '2', course_id, '1', 'Spring', '2016' from HISTORYCOURSE where course_id like '2%'
SELECT project_id ,SUBSTRING_INDEX(GROUP_CONCAT(employee_id),',',1) AS employee_id1,SUBSTRING_INDEX(SUBSTRING_INDEX(GROUP_CONCAT(employee_id),',',2),',',-1) AS employee_id2, SUBSTRING_INDEX(SUBSTRING_INDEX(GROUP_CONCAT(employee_id),',',3),',',-1) AS employee_id3, SUBSTRING_INDEX(SUBSTRING_INDEX(GROUP_CONCAT(employee_id),',',4),',',-1) AS employee_id4 FROM my_table GROUP BY project_id;
select a.part_no, a.cust, a.work_order from thetable as a inner join thetable as b on a.part_no = b.part_no where a.work_order = 111;
SELECT pet_id, pet_name, pet_age, pet_dead FROM person JOIN person_pet ON person.id = person_pet.person_id JOIN pet ON pet.id = person_pet.pet_id WHERE person.first_name = 'Zed'
SELECT * FROM dbo.Employees e CROSS APPLY( SELECT TOP 1 p.HourlyRate FROM dbo.PayScales p WHERE e.Takings BETWEEN p.Starting AND p.Ending OR e.Takings > p.Ending ORDER BY p.Ending DESC ) t
with cte as (select convert(datetime,'2014-01-01') dates union all select dateadd(dd,1,dates) from cte where dates < convert(datetime,'2014-01-30')) select * from cte
SELECT c.* FROM conversations c INNER JOIN (SELECT p.conversation_id FROM participants p INNER JOIN users u ON p.user_id = u.user_id AND u.banned = 0 GROUP BY p.conversation_id HAVING COUNT(DISTINCT p.user_id) >= 2 ) AS A ON c.conversation_id = A.conversation_id
update #a_table set names = replace(names, 'C;', 'X;Y;')
select * from datetest where coldate in (select coldate from datetest group by coldate having count(*) > 1)
AND [GROUP] NOT IN (SELECT [GROUP] FROM mytable WHERE FILTER1 = '22337755' OR FILTER2 = '22337755')
SELECT m.id, GROUP_CONCAT(distinct(g.loc)) FROM mutations m JOIN genes g ON m.id = g.id GROUP BY m.id;
<cfoutput>#myQuery["XML_F52E2B61-18A1-11D1-B105-00805F49916B"][1]#</cfoutput>
select c.*, m._id, m.message from (select c.*, (select max(_id) as maxid from message m where c._id = m.conversationid ) as messageid from conversation c ) c join message m on c.messageid = m._id;
$sql = "SELECT news.*, SUM(news_points.points) as total FROM news left join news_points ON news.news_id = news_points.news_id GROUP BY news.news_id ORDER BY total DESC, news.news_id ASC";
SELECT a.ename, b.ename, c.ename FROM emp a LEFT OUTER JOIN emp b ON a.mgr=b.empno; LEFT OUTER JOIN emp c ON b.mgr=c.empno
SELECT table.* FROM table JOIN (SELECT field FROM table GROUP BY field HAVING COUNT(field) > 1) newtable ON table.field = newtable.field;
model.m2m_through_set.all() # this would work model.m2m_through_set.create(target=target_instance)
SELECT [Column], COUNT(*) AS [Count] FROM( SELECT [Column] FROM TableA UNION ALL SELECT [Column] FROM TableB )t GROUP BY [Column]
SELECT Note, COUNT(*) as 'NumberOfRepeating' FROM Notes GROUP BY Note HAVING count(*) < ( SELECT max(t.maxi) FROM (select Note, COUNT(Note) maxi FROM Notes GROUP BY Note ) as t ) AND count(*) > ( SELECT min(t.min) FROM (select Note, COUNT(Note) min FROM Notes GROUP BY Note ) as t )
(T.Mode IN (@MODE))
SELECT (CASE WHEN date <= DateAdd("d", -1, getdate) THEN score ELSE 0 END) as sum1, (CASE WHEN date <= DateAdd("d", -2, getdate) THEN score ELSE 0 END) as sum2, etc.
"SELECT CDate as 'Date',AName as 'Applicant Name' FROM tbl_applicant WHERE AName LIKE '%" & txtSearchBar1.Text & "%'"
UPDATE [tablename] SET lab_no = REPLACE(lab_no, 'EPI8', 'EPI80');
select tablespace_name from all_indexes where owner = 'MYSCHEMA' and index_name = 'MYINDEX';
Private WithEvents DgwNewLayout As DataGridView Private Sub DgwNewLayout_CellFormatting(sender As Object, e As DataGridViewCellFormattingEventArgs ) Handles DgwNewLayout.CellFormatting If e.ColumnIndex = 5 Then e.Value = CDbl(e.Value).ToString("0.00") & " " & CStr(DgwNewLayout.Rows(e.RowIndex).Cells(9).Value) e.FormattingApplied = True End If End Sub
SELECT DISTINCT t.b FROM your_table t INNER JOIN your_table s ON t.b = s.c AND t.id <> s.id
SELECT TMP1.emp, TMP1.TOTALSECONDS, ('0' || (TMP1.TOTALSECONDS) / 3600) || ':' || ('0' || (MOD(TMP1.TOTALSECONDS, 3600) / 60) ':' || MOD(TMP1.TOTALSECONDS, 60) AS TOTALTIMETAKEN FROM (SELECT EMPID emp, SUM(DURATION) AS TOTALSECONDS FROM table GROUP BY EMPID) TMP1
select l.linkProductId, min(linkPrice + linkShippingPrice) as minPrice from linkProductSeller l, (select linkProductID, linkSellerId, max(linkDateTime) as linkDateTime from linkProductSeller group by linkProductID, linkSellerId) m where l.linkProductID = m.linkProductID and l.linkSellerID = m.linkSellerID and l.linkDateTime = m.linkDateTime group by linkProductId
select first_name + ' ' + last_name as SalesRep_Name, Sales_Rep_ID, CommClass as Commission_Class, CommRate as Commission_Rate from your_table order by last_name asc -- ascending is the default and doesn't need to be specified
CREATE TABLE KeyAssignment ( key_id INT PRIMARY KEY, emp_id INT NOT NULL, FOREIGN KEY (key_id) REFERENCES keys (key_id), FOREIGN KEY (emp_id) REFERENCES emp (emp_id) );
SELECT SUM(HOURS) FROM RESOURCE WHERE DATE = '02/08/2013';
select name, count(distinct [user]) from myshows recommend inner join tvshows on recommend.show = tvshows.showid where [user] in ( select other.[user] from ( select show from myshows where [User] = @user ) my, ( select show, [user] from myshows where [user] <> @user ) other where my.show = other.show ) and show not in ( select show from myshows where [User] = @user ) group by name order by count(distinct [user]) desc
SELECT `language`, COUNT(`id`) FROM `words` GROUP BY `language`
SELECT TRUNC(TRUNC(SYSDATE, 'Q') -1, 'Q') AS startLastQuarter, TRUNC(SYSDATE, 'Q')-1/(24*60*60) AS endLastQuarter, TRUNC(SYSDATE, 'Q') AS startThisQuarter FROM DUAL;
select * from mytable@my_ms_sql_server;
select t1.AP_NBR, count(distinct t1.LOC_NBR), count(distinct t2.ITM_ID) from TAB1 t1 join TAB2 t2 on t1.LOC_NBR = t2.LOC_NBR group by t1.AP_NBR
select EmployeeID from T where Date > sysdate() - 70 days and to_char(Date, 'd') = '4' group by EmployeeID having count(*) >= 3
psql -qAt ....
TableAttribute AttributeID AttributeType AttributeValue
SELECT DATEADD(HOUR, DATEPART(HOUR, TimeStamp), DATEDIFF(DAY, 0, TimeStamp)) [TimeStamp], SUM(TotalOffered) [TotalOffered] FROM [My Table] GROUP BY DATEADD(HOUR, DATEPART(HOUR, TimeStamp), DATEDIFF(DAY, 0, TimeStamp)) ORDER BY [TimeStamp]
select COUNT( distinct o.OrderId) as Orders from Orders o join [Order Details] od on o.OrderID = od.OrderID
to_char(sysdate, 'YYYY-mm-DD"T"HH24:MI:SS."0Z"')
SELECT dt.PurchaseDate, i.Value as ItemName, SUM(ISNULL(Quantity,0)) as Quantity FROM Items i CROSS JOIN ( SELECT DISTINCT PurchaseDate FROM Purchase ) dt LEFT OUTER JOIN Purchase p ON i.Value = p.ItemName AND dt.PurchaseDate = p.PurchaseDate GROUP BY dt.PurchaseDate, i.Value ORDER BY dt.PurchaseDate, i.Value
select t.product as tshirt, j.product as jeans, count(distinct bj.codeUser) from (select distinct product from buys where product like 'tshirt%') t cross join (select distinct product from buys where product like 'jeans%') j left join buys bt on bt.product = t.product left join buys bj on bj.product = j.product and bj.codeuser = bt.codeuser group by t.product as tshirt, j.product;
SELECT userid, substring_index(substring_index(l.ActiveLinks, '||', n.n), '|', -1) as link FROM (select 1 as n union all select 2 union all select 3 union all select 4) n join ipadminuserslinks l on length(l.ActiveLinks) - length(replace(l.ActiveLinks, '||', '')) + 1 <= n.n WHERE userid = 242;
INSERT INTO X SELECT * FROM Y LEFT JOIN X ON X.field1 = Y.field1 AND X.field2 = Y.field2 AND ... WHERE X.field1 IS NULL
declare @sql varchar(max) select @sql = 'SELECT * FROM MyTableName_' + v.version from dbo.Version as v where v.id = 1 exec (@sql)
SELECT ... FROM ads WHERE [search criteria]
select ref, ((max(to_date) - min(from_date)) - sum(to_date - from_date) ) as total_gaps from t group by ref;
SELECT name FROM table_name GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT TOP (100) PERCENT Room, Subject, COUNT(Subject) AS Expr1 FROM dbo.Timetable GROUP BY Room, Subject UNION ALL SELECT TOP (100) PERCENT Room, 'Not Used', 60 - COUNT(Subject) AS Expr1 FROM dbo.Timetable GROUP BY Room ORDER BY t.Room
SELECT TOP 1000 x,y,z, COUNT(*) OVER () AS TotalCount FROM dbo.table
function call | result ---------------------------------|----------------------------------- APEX_UTIL.HOST_URL() | http://example.com:5883 APEX_UTIL.HOST_URL('SCRIPT') | http://example.com:5883/pls/apex/ APEX_UTIL.HOST_URL('IMGPRE') | http://example.com:5883/i/
SELECT Pracas.Zona, SUM(CASE WHEN Motoristas_Praca.PracaID IS NULL THEN 0 ELSE 1 END) AS 'Ocupantes' FROM Pracas LEFT JOIN Motoristas_Praca ON Motoristas_Praca.PracaID=Pracas.PracaID GROUP BY Pracas.Zona
Private Sub frmClientDetails_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load Dim ds As New DataSet objdataadapter.SelectCommand = New MySqlCommand() objdataadapter.SelectCommand.Connection = objconnection objdataadapter.SelectCommand.CommandType = CommandType.Text objdataadapter.SelectCommand.CommandText = "SELECT * FROM Client_Details" objdataadapter.Fill(ds, "Client_Details") bind_dataset_DGVClient() count_records() rowposition = 0 DGVClient.DataSource = ds.Tables("Client_Details")
select ST.ColumnName1, JT.ColumnName2, SJT.ColumnName3 from SourceTable ST inner join JoinTable JT on JT.SourceTableID = ST.SourceTableID inner join SecondJoinTable SJT on ST.SourceTableID = SJT.SourceTableID where ST.SourceTableID = X and JT.ColumnName3 = Y and JT.Column3 = SJT.Column4
SELECT r.RouteId,di.PatrolID,r.TagId FROM Routes r INNER JOIN (SELECT DISTINCT RouteId, PatrolID from DataImport) as di on di.RouteId = r.RouteId EXCEPT SELECT RouteId,PatrolID,TagId FROM DataImport
SELECT [tblTeams].[Department], [tblTeams].[Team], [tblTeams].[Group] FROM [tblTeams] WHERE [tblTeams].[group]= '" & lstGroup.Value & "'" ORDER BY [tblTeams].[Department]
select country.name, city.name, city.population from country join ( select country, name, population, row_number() over ( partition by population desc) as rn from city ) city on city.country = country.code and city.rn = 1 order by country.name
SELECT id, CASE round(dbms_random.value(1,4)) WHEN 1 THEN 'Basic' WHEN 2 THEN 'Silver' WHEN 3 THEN 'Gold' WHEN 4 THEN 'Premium' END AS type FROM table
SELECT Country, City, COUNT(*) AS [Count] FROM CountiresAndCities GROUP BY grouping sets ( ( Country, City ), ( Country ) ) ORDER BY grouping(City), Country, City
SELECT AVG(AEBill.[TotalCost]) ,AEEnc.ProviderID ,AEEnc.Date INTO #TotalCostAccuteCareAE FROM EncDetail AEEnc INNER JOIN [EncBilling] as AEBill ON AEBill.[SK_EncID] = AEEnc.[SK_EncID] AND AEBill.ProviderID = AEEnc.ProviderID WHERE AEEnc.Date <= DATEADD(year,-1,GETDATE()) GROUP BY AEBill.ProviderID
select ColA, ColB, ColC, ColD, (select ColE from table where colA=120) ColE from table where colA = 122
select vehicleID, max(vehicleSpeed) from vehicleData group by vehicleID
select * from teams where name = 'mi equiñerolico' collate utf8_bin
CREATE PROCEDURE `validate_class`(IN `class` CHAR(1)) BEGIN if(class NOT IN ('A','B','E') ) then select 1; else select 0; end if; END
select c.id, c.customername, sum(isnull(p.price, 0)) as sumprice from tblcustomers c left join tblpurchases p on c.id = p.customerid group by c.id, c.customername
SELECT p.* FROM Proofs p WHERE p.Proof <> 'All proofs'
select a.* from a where a.id in (select id from b where b.id = a.id) select a.* from a where a.id in (select id from b)
select name, max(userid) as max_userid from users group by name order by max(userid) asc
SELECT @SearchFilter.value('(/KeywordSearch/SelfEmployed/text())[1]', 'varchar(100)')
profile = EnterpriseProfile.objects.get(pk=1) # or whatever to get the object # next returns all users related to that enterprise in the M2M profile.enterprise.users.all()
select case when (effectivethrutime is null and senttime >= effectivefromtime) then orgid when (effectivethrutime is not null and senttime >= effectivefromtime) then orgID when (effectivethrutime is not null and senttime between effectivethrutime and effectivefromtime) then orgid end as orgid from ac left join op on ac.clinicalidentifier=op.clinicalidentifier where ac.senttime>op.effectivefromtime and ac.senttime<=isnull(op.effectivethrutime,ac.senttime)
INSERT INTO restaurant (id_restaurant, id_category) SELECT id_rest, id_cat FROM restaurant_menu rm, category_menu cm WHERE rm.name = "discount" AND cm.name = "beach";
CREATE TRIGGER pickDate BEFORE UPDATE ON order_master FOR EACH ROW BEGIN SET NEW.order_pick_date = COALESCE(old.order_pick_date, now()) ; END;
select p1.product_id, p1.product_name, p2.product_code, (decode(p3.product_type, null, 'N/A', p3.product_type) as product_type from products p1 join product_descriptions p2 on p1.product_id = p2.product_id left join product_descriptions p3 on p3.product_age = p2.product_age and p3.product_type = p2.product_type and p3.status = 'VALID';
timestampfield > current_timestamp - interval '1' hour
select t1.id , t1.customer , t1.quantity , sum(t2.itemqty) from table1 t1 join table2 t2 on t1.id = t2.orderid group by t1.id , t1.customer , t1.quantity having t1.quantity <> sum(t2.itemqty)
select SessionSID , TargetID --, TargetName , FEDSurveyName , SupplierID , ClientLK_ResponseStatusID from BI_Sessions (nolock) WHERE EntryDate BETWEEN '05-15-2012' AND '05-16-2012' AND SupplierID = 336
USING (SELECT 1 as 'key', 1 as 'val' where 1 = 0) AS src (key, val)
select g from Game g join fetch g.teams t join fetch t.players p join fetch p.skills s where ...
select t.* from (select t.*, row_number() over (partition by year, weekno order by versionno desc) as seqnum from t ) t where seqnum <= n -- Your value goes here
select to_char(32.00, '999990D999') from dual;
select name, sum(votes) as total_votes from mytable group by 1 order by 2 desc
select userid, videoid from (SELECT userid, videoid, count(distinct videoid) over (partition by userid) as cnt FROM table_play_list WHERE SOME CONDICTION ) t where cnt > 2;
select datepart(wk, DateCreated) , sum(UserHits) from UserData group by datepart(wk, DateCreated)
SELECT ID FROM Table1 WHERE ([Field1]+[Field2])=( SELECT Max([Field1]+[Field2]) AS Expr1 FROM Table1)
SELECT * FROM table2 INNER JOIN WITH table1 ON table2.id = table1.id AND (table1.value1 = table2.value1 OR table1.value1 IS NULL) AND (table1.value2 = table2.value2 OR table1.value2 IS NULL)
DECLARE @DeletedMyEntityTransaction table ( TransactionID int ); DELETE dbo.MyEntityTransaction OUTPUT deleted.TransactionID INTO @DeletedMyEntityTransaction WHERE MyEntityID = @MyEntityID; DELETE dbo.[Transaction] WHERE TransactionID IN ( SELECT TransactionID FROM @DeletedMyEntityTransaction ); DELETE dbo.MyEntity WHERE MyEntityID = @MyEntityID;
<cfoutput query="myQry" group="date"> <cfoutput group="category"> <cfoutput group="description"> #date# #category# #description# <cfoutput> #detail# </cfoutput> </cfoutput> </cfoutput> </cfoutput>
select Cust.value('*[1]', 'int') AS 'ItemID', Cust.value('*[2]', 'Varchar(50)') AS 'Customer Name' from @xmlval.nodes('/ArrayOfCustomers/Customer') as AOC(Cust)
SELECT board.*, `user`.username, numlikes FROM board INNER JOIN `user` ON board.user_id = `user`.user_id LEFT JOIN ( SELECT pins.board_id, COUNT(source_user_id) AS numlikes FROM likes INNER JOIN pins ON pins.id = likes.pin_id GROUP BY pins.board_id ) likes ON board.id = likes.board_id WHERE who_can_tag='' ORDER BY numlikes DESC LIMIT 10
select DISTINCT salesperson, SUM(sales_amt) from sales GROUP BY salesperson
connection = New System.Data.OleDb.OleDbConnection("Provider = Microsoft.Jet.OLEDB.4.0 ;Data Source=" & Filepath & " ;Extended Properties='Excel 8.0;HDR=Yes;IMEX=1;'")
val rdd = new JdbcRDD[Email](sc, () => {DriverManager.getConnection( "jdbc:sqlserver://omnimirror;databaseName=moneycorp;integratedSecurity=true;")}, "SELECT * FROM TABLE_NAME Where ? < X and X < ?", 1, 100000, 1000, (r:ResultSet) => { SomeClass(r.getString("Col1"), r.getString("Col2"), r.getString("Col3")) } )
Select B.* From ( Select UserID,ActionTime=max(ActionTime) From SomeTable Group By UserID ) A Join SomeTable B on A.UserID=B.UserID and A.ActionTime=B.ActionTime
SELECT col, COUNT(*) FROM ( SELECT col1 AS col FROM Table1 UNION ALL SELECT col2 FROM Table1 ) T1 GROUP BY col
alter table <Table Name> add constraint <constraint name> default <relevant date here> for [RecordDate] <run the bulk insert...> alter table <Table Name> drop constraint <Constraint Name>
SELECT TOP 1 Id FROM [TABLENAME] ORDER BY Id DESC
Select B1.A_Id, B2.A_Id From ( Select Data, A_Id, Count(Id) A_Count From B Group By Data, A_Id ) b1 inner join ( Select Data, A_Id, Count(Id) a_count From B Group By Data, A_Id ) b2 on b1.data = b2.data and b1.a_count = b2.a_count and b1.a_id <> b2.a_id
SELECT * FROM MyTable WHERE CONTAINS(Message, @Keyword, langauge 1033)
SELECT COUNT(*) as totaloccurs, COUNT(@conditions@) as suboccurs FROM (@total@ as t1)
SELECT Entity, MAX(CASE WHEN Type1 = 'A' THEN Type2 ELSE NULL END) AS AType2, MAX(CASE WHEN Type1 = 'A' THEN Balance ELSE NULL END) AS ABalance, MAX(CASE WHEN Type1 = 'B' THEN Type2 ELSE NULL END) AS BType2, MAX(CASE WHEN Type1 = 'B' THEN Balance ELSE NULL END) AS BBalance, MAX(CASE WHEN Type1 = 'C' THEN Type2 ELSE NULL END) AS CType2, MAX(CASE WHEN Type1 = 'C' THEN Balance ELSE NULL END) AS CBalance FROM ... GROUP BY Entity
Mplaces.objects.filter(name__endswith='press', city__endswith=myn)
WHERE CONTAINS(OBJEKTUM_NEV, 'C%')>0;
CREATE TABLE users { user_id int UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, user_type int NOT NULL REFERENCES user_types(user_type_id), ssn char(10) NOT NULL, password varchar(40) NOT NULL, first_name varchar(30) NOT NULL, last_name varchar(30) NOT NULL, address varchar(80) NOT NULL, admin_id int REFERENCES users(user_id) } engine = InnoDB;
select least(col_1, col_2, col3_3) from . . .
SELECT t1.listing_id , t1.listing_value as listing_value1 , t2.listing_value as listing_value2 FROM table t1, table t2 where t1.listing_id = t2.listing_id AND t1.field_id = "Fruit" AND t2.field_id = "Color"
select computer, max(time), avg(cpu) from ( select @row_number := case when @computer = computer then @row_number + 1 else 0 end as row_number, @computer := computer as computer, time, cpu from mytable cross join (select @row_number := -1, @computer := '') as t order by computer, time ) as t group by computer, row_number div 3 order by computer, row_number div 3;
SELECT P.Ext_item_id, P.Ext_shop_id, P.Ext_date_id, S.SALES FROM PROMO P INNER JOIN SHOP SH ON P.Ext_shop_id = SH.Ext_shop_id INNER JOIN ITEM I ON P.Ext_item_id = I.Ext_item_id INNER JOIN [DATE] D ON P.Ext_date_id = D.Ext_date_id INNER JOIN SALES S ON SH.shop_id=S.shop_id AND I.item_id = S.item_id AND D.date_id = S.date_id
SELECT p.desc AS Product, m.name AS mfg FROM product p INNER JOIN lot l ON p.lot_id = l.id INNER JOIN mfg m ON l.mfg_id = m.id
SELECT LEFT(customers.name,1) AS 'name', COUNT(*) AS NumberOfCustomers FROM customers WHERE customers.name LIKE '[a-z]%' GROUP BY LEFT(customers.name,1)
INSERT INTO Tbl2(UserId, TimesTamp) SELECT u.Id,'2016-01-31 23:59:59' FROM tbl1 AS u;
select cast(cast(@datetime1 as date) as datetime) + cast(cast(@datetime2 as time) as datetime)
db.system.js.save( { _id : "foo" , value : function( x , y ){ return x + y; } } );
WITH num AS (SELECT TOP 36 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) i FROM master.dbo.spt_values), chr AS (SELECT i,CASE WHEN i <= 10 THEN CHAR(i+47) ELSE CHAR (i+54) END c FROM num) SELECT t3.c + t2.c + t1.c + t0.c FROM chr t3, chr t2, chr t1, chr t0 ORDER BY t3.i, t2.i, t1.i, t0.i
CREATE TABLE example (ID int IDENTITY(1,1), Stuff VARCHAR(255)) INSERT INTO example (Stuff) VALUES ('Hello World!')
SELECT CASE WHEN amount > 0 THEN amount END as posAmount, CASE WHEN amount < 0 THEN amount END as negAmount, correction FROM booking
SELECT a , MAX( CASE seq WHEN 1 THEN (b) ELSE '' END ) + MAX( CASE seq WHEN 2 THEN (', ' + b) ELSE '' END ) + MAX( CASE seq WHEN 3 THEN (', ' + b) ELSE '' END ) + MAX( CASE seq WHEN 4 THEN (', ..') ELSE '' END ) AS b FROM (SELECT t1.a , t1.b , (SELECT COUNT(*) FROM t t2 WHERE t1.a = t2.a AND t2.b <= t1.b) AS seq FROM t t1) AS temp GROUP BY a
ALTER DATABASE YourDatabase CHARACTER SET utf8;
INSERT INTO [#tblEntity1] ([Value]) OUTPUT [inserted].[ID] AS [entity1ID], @entity2ID AS [entity2ID] INTO #tblIntersect VALUES ('One')
select table1.*, (case when table1.id > 10 then 1 else 0 end) as value from table1
SQL> select to_char(sysdate, 'mm/dd/yyyy hh24:mi:ss') from dual; TO_CHAR(SYSDATE,'MM ------------------- 01/21/2015 11:02:27 SQL> select to_char(sysdate, 'mm/dd/yyyy hh:mi:ss am') from dual; TO_CHAR(SYSDATE,'MM/DD ---------------------- 01/21/2015 11:03:04 am SQL>
set ROWCOUNT (numberOfRecordsOnYourDB - 1000 ) delete from hugetable Go
select * from ( SELECT * FROM (select * from ppl_table where age>30 and age<40 order by rand() limit 10) as Momo1 union SELECT * FROM (select * from ppl_table where age>25 and age<40 order by rand() limit 20) as Momo2 ) as FinalMomo limit 10
SELECT 2*C AS DOUBLE_C, T.* FROM T
SELECT (selloff1 / weekavg) AS procent FROM ( SELECT selloff1, IF(daycode=1,(SELECT...),(SELECT...)) AS weekavg FROM ... )
SELECT fields FROM MyTable WHERE stuff EXCEPT -- This excludes the below results SELECT fields FROM MyTable WHERE (Col1 + Col2 + Col3....) IS NULL
SELECT Limit AS Val1, Lower AS Val2, Upper AS Val3 FROM TableName UNION ALL SELECT SELECT Deviation AS Val1, Lower AS Val2, Upper AS Val3 FROM TableName
select USER, max(case when ITEM='I1' then QTY END) As I1, max(case when ITEM='I2' then QTY END) as I2, max(case when ITEM='I3' then QTY END) as I3 from yourtable group by USER
select cid, uid, min(aid), min(gid), min(name), min(evn) from t group by cid, uid;
SELECT 'TABLE1' || ID AS PRIMARY_ID ... FROM TABLE1 SELECT 'TABLE2' || ID AS PRIMARY_ID ... FROM TABLE2
select * from ( select e.*, row_number() over (order by sal desc) rn from emp e ) where rn = 2;
db.users.createIndex({email: 1}, {unique: true})
SELECT COUNT(*) INTO @rowcount FROM ...
select r.* from rankings r inner join ( select alternative_id, indicator_id from rankings group by alternative_id, indicator_id having count(distinct rank) > 1 ) differ on r.alternative_id = differ.alternative_id and r.indicator_id = differ.indicator_id order by r.alternative_id, r.indicator_id, r.analysis_id, r.rank
UPDATE Departments SET numberOfEmployees=(SELECT COUNT(Employees.nameOfEmployee) FROM Employees WHERE Departments.numberOfDepartment=Employees.numberOfDepartment)
SELECT article_id, count(*) as common_term_count FROM ( SELECT article_id FROM tags WHERE tag IN (SELECT tag FROM tags WHERE article_id = :YourArticle) UNION ALL SELECT article_id FROM categories WHERE category IN (SELECT category FROM categories WHERE article_id = :YourArticle) ) AS accumulator_table GROUP BY article_id ORDER common_term_count DESC
select pr.* from products pr left join posts po on post_title like concat('%', pr.model, '%') where post_title is null
SELECT a.NAME, a.phoneNumber FROM PATIENT a JOIN PATIENT b ON a.phoneNumber = b.phoneNumber AND a.NAME <> b.NAME
select sum(case when date between '9/9/2013' and '9/15/2013' then 1 else 0 end) from Flight group by Site order by Site;
SELECT DISTINCT state FROM mytable WHERE state NOT IN ( SELECT DISTINCT state FROM mytable WHERE type = 'river' )
SELECT Item, SUM(qty) as Qty FROM ( SELECT Item, qty FROM warehouse_1 UNION SELECT Item, qty FROM warehouse_2 ) as a GROUP BY item;
(SELECT table1.*, 0 AS TMP_ORDER FROM table1 ORDER BY fieldA ASC LIMIT 3) UNION (SELECT table1.*, 1 AS TMP_ORDER FROM table1) ORDER BY TMP_ORDER ASC, CASE WHEN TMP_ORDER = 0 THEN fieldA ELSE 0 END ASC, CASE WHEN TMP_ORDER = 1 THEN fieldB ELSE 0 END DESC
SELECT U.FirstName + ' ' + U.LastName AS Name, COUNT(F.ID) AS 'Open Requests' FROM Users U INNER JOIN Roles R ON U.RoleID = R.ID LEFT JOIN ( SELECT * FROM FRrequests WHERE Status IN ('Submitted','Delayed')) F ON U.ID = F.UserID WHERE R.Name = N'Field Rep' GROUP BY U.FirstName, U.LastName
(Group of logical expressions) OR (Group of logical expressions)
SELECT t1.username FROM ip_table AS t1 JOIN ip_table AS t2 ON t1.`username` = t2.`username` AND t1.ip = <ip1> AND t2.ip = <ip2> ... etc
with cte as ( select Email, Name, Surname, row_number() over (partition by Email order by Name) as rn from tab ) select Email, Name, Surname from tab where rn = 1
char* query = "SELECT * FROM table WHERE LOWER(notes) LIKE '%' || ? || '%'";
select count(*) from ( select usr from table_like_below where pn in (2,3) group by usr having count(distinct pn) = 2 -- this guarantees that usr have at least one 2 and at least one 3 in column pn ) T
SELECT month, value_2013, value_2014 FROM (SELECT fiscalyear, month, value FROM your_table) PIVOT (SUM (value) AS value FOR (fiscal_year) IN ('2013', '2014'))
SELECT t1.ID AS t1ID, t2.ID AS t2ID, SUM(t1.count*t2.count) AS s FROM mytable AS t1 INNER JOIN mytable AS t2 ON t1.ID < t2.ID AND t1.k = t2.k GROUP BY t1.ID, t2.ID
select ename from emp where sal > any (select avg(sal) from emp group by deptno) and deptno in (select deptno from emp group by deptno having count(deptno) > 4);
var ids = new List<int>() { 2, 10, 16, 24, 32 }; var rows = Table.Where(t => ids.Contains(t.id)).ToList();
select * from emp where emp.id in(1,2,3) and (design.type<>'Labor' OR emp.sal>10000)
SELECT SUM(subsum) / 15 FROM ( SELECT SUM(column1) AS subsum FROM table UNION ALL SELECT SUM(column2) AS subsum FROM table UNION ALL ... SELECT SUM(column10) AS subsum FROM table )
select operatorid, sum(if(status="good",1,0)) as good, sum(if(status="bad",1,0)) as bad, sum(if(status="ugly",1,0)) as ugly from table group by operatorid
SELECT c.CustomerID, c.Name, (case when exists (select 1 from orders o where o.CustomerID = c.CustomerID) then 1 else 0 end) as HasOrders FROM Customers c;
SELECT PointsFor.user_id, sum(PointsFor.score) as pointsfor, sum(PointsAgainst.score) as pointsAgainst FROM TABLE_NAME PointsFor JOIN TABLE_NAME PointsAgainst on PointsFor.match_id = PointsAgainst.match_id and PointsFor.user_id <> PointsAgainst.user_id GROUP BY PointsFor.user_id
SELECT Prgm_ID, COUNT(ID) AS Subprgm_Count FROM ( SELECT a.prgm_type_a_ID AS ID, Prgm_ID FROM TableA a UNION ALL SELECT b.prgm_type_b_ID, b.Prgm_ID FROM TableB b UNION ALL SELECT c.prgm_type_c_ID, c.Prgm_ID FROM TableC c )t GROUP BY Prgm_ID HAVING COUNT(ID) >= 5 --Your limit here
DECLARE @Column varchar(25) SET @Column = 'Name' -- This can be another column also SET @sqlText = N'SELECT ' + @Column + ' FROM MyTable' EXEC (@sqlText)
CREATE TABLE new_table ( ...columns... ) INSERT INTO new_table SELECT * FROM OLD_TABLE
SELECT Service_Availability.Service_Product, Service_Availability.Specificity FROM Service_Availability INNER JOIN ( SELECT Service_Availability.Service_Product, MAX(Service_Availability.Specificity) AS Spec FROM Service_Availability WHERE (Service_Availability.State = "TX" OR Service_Availability.State = "CW") GROUP BY Service_Availability.Service_Product ) max_spec ON Service_Availability.Service_Product = max_spec.Service_Product AND Service_Availability.Specificity = max_spec.Spec WHERE Service_Availability.Available = TRUE
SELECT FROM_UNIXTIME(post_date, '%Y %D %M') AS POST_DATE, COUNT(post_id) AS POST_COUNT FROM posts GROUP BY POST_DATE
SELECT convert(varchar(13), [DateTime], 120) as dt , SUM(KW) as SumKwPerHour FROM POWER WHERE [DateTime] >= '2014-04-14 06:00:00' AND [DateTime]< '2014-04-21 06:00:00' GROUP BY convert(varchar(13), [DateTime], 120) ORDER BY dt
SELECT * FROM TableName WHERE bit_column_value IS NULL OR bit_column_value = 0
CREATE TRIGGER update_notes BEFORE UPDATE ON table1 FOR EACH ROW BEGIN IF :new.status = 'Active' THEN :new.notes = null; END IF; END;
SELECT col FROM table WHERE col COLLATE Latin1_General_CS_AS = 'value'
SELECT * FROM ( SELECT customer.company_name, COUNT (item.pickup_reference) as "Number of Pickups" FROM customer JOIN item ON (customer.reference_no=item.pickup_reference) GROUP BY customer.company_name, item.pickup_reference ORDER BY COUNT (customer.company_name) DESC ) WHERE rownum <= 10
SELECT m.ID_Material, m.Material_Name, m.[Type] FROM Detail_Material dm INNER JOIN Material m ON dm.ID_Material_MadeOf = m.ID_Material WHERE dm.ID_Material = 'DXTR1000'
CREATE TRIGGER triggername ON table1 FOR UPDATE AS Begin INSERT INTO table2(name) SELECT d.name FROM Deleted d End
SELECT * FROM users INNER JOIN cities ON users.id = cities.user_id INNER JOIN hobbies ON users.id = hobbies.USER_ID WHERE Hobbies.Hobby = 'swimming'
begin exam; end;
Select * from WORKER where Name Like '%' + @name + '%'
SELECT t.user_id, max(t.modified) as modified, t.status FROM table t JOIN ( SELECT user_id FROM table WHERE action_id <> 1 and status = whatever )t1 ON t1.user_id = t.user_id GROUP BY t.user_id
SELECT q1.chr, COUNT(*), q2.cnt FROM ( SELECT SUBSTR(C1, 1, 1) AS chr FROM tab UNION ALL SELECT SUBSTR(C1, 2, 1) AS chr FROM tab UNION ALL SELECT SUBSTR(C1, 3, 1) AS chr FROM tab ) AS q1, ( SELECT COUNT(C1) AS cnt FROM tab ) AS q2 WHERE q1.chr != '' GROUP BY q1.chr
#!/usr/bin/perl use strict; use warnings; my $result = qx { isql -Uxx -Pxxxxxxx -Dxxxx <<EOF set nocount on select count(*) from XXX go exit EOF }; print "result is :"; print $result; print "\nbye bye\n";
select * from posts where (user in (select following from following where user ='patrick') or user='patrick') and id < 75 order by id desc limit 5
select t.* from team t inner join schedule s on t.schedule_id = s.schedule_id inner join event e on s.event_id = e.event_id left outer join signup sp on t.team_id = sp.team_id where e.event_id = 183 and sp.team_id is null
select (select count(*) from tasks where completed = 1) / (select count(*) from tasks where completed = 0) from dual
SELECT date, COUNT(*) FROM inventory WHERE status != 'shipped' GROUP BY date ORDER BY date;
SELECT DISTINCT a.Code, a.Designation, a.Standard, a.Quantity FROM Table_621 AS a WHERE NOT EXISTS (SELECT * FROM Components where Components.Code = a.Code) UNION ALL SELECT DISTINCT a.Code, a.Designation, a.Standard, a.Quantity FROM Table_333 AS a WHERE NOT EXISTS (SELECT * FROM Components where Components.Code = a.Code) UNION ALL SELECT DISTINCT a.Code, a.Designation, a.Standard, a.Quantity FROM Table_853 AS a WHERE NOT EXISTS (SELECT * FROM Components where Components.Code = a.Code)
Declare @Temp Table(Data nvarchar(100)) Insert Into @Temp Values(N'izla') Insert Into @Temp Values(N'İZLA') Insert Into @Temp Values(N'IZLA') Insert Into @Temp Values(N'Izla') Select Data, Count(*) From @Temp Group By Data Select Data Collate Latin1_General_CI_AI, Count(*) From @Temp Group By Data Collate Latin1_General_CI_AI
where value ilike 'foo%'
select PERIOD_NAME from gl_periods where :l_date_from <= end_date and :l_date_to >= start_date
DELIMITER $$ CREATE TRIGGER second_table BEFORE INSERT ON first_table FOR EACH ROW BEGIN IF (EXISTS(SELECT * FROM first_table WHERE sp = NEW.sp)) THEN INSERT INTO second_table (col1,col2,col3) VALUES (NEW.col1, NEW.col2, NEW.col3); END IF; END$$ DELIMITER ;
SELECT * FROM _01769_jobs WHERE user_id != 163084 AND status = 'QC_COMPLETE' AND job_id NOT IN ( SELECT job_id FROM blind_qc_get_worked_on_jobs_by_project_by_user(1769, 163084) )
SELECT RA1.RATE, RA1.EFFECTIVE_DATE FROM RATES_ALL RA1 WHERE RA1.EFFECTIVE_DATE = add_months(&&EFF_DATE, -5) OR (RA1.EFFECTIVE_DATE = add_months(&&EFF_DATE, -5)-1 AND NOT EXISTS(SELECT * FROM RATES_ALL RA2 WHERE RA2.EFFECTIVE_DATE = add_months(&&EFF_DATE, -5))
INSERT INTO quick (date, num, name, account, amount) SELECT invdate, case when accnt.accno < '7000' then code else invno end , ven, accno, amnt FROM accnt WHERE ISNULL(accnt.imported, '') = ''
select substring(name from 1 for 12) from your_table
SELECT * FROM Students s WHERE EXISTS (SELECT * FROM Enrollment WHERE studentId = s.StudentId AND ClassId = 'x') AND EXISTS (SELECT * FROM Enrollment WHERE studentId = s.StudentId AND ClassId = 'y') AND EXISTS (SELECT * FROM Enrollment WHERE studentId = s.StudentId AND ClassId = 'z') AND NOT EXISTS (SELECT * FROM Enrollment WHERE studentId = s.StudentId AND ClassId IN ('a', 'b', 'c')
Formula int id String name BasicFormula extends Formula String variable Operator operator // something like <=, contains, ... String value CompoundFormula extends Formula Formula leftFormula Operator operator // and, or Formula rightFormula
SELECT files.Id, files.Name, links.Id, links.Name FROM files, links INNER JOIN folder_files ON files.Id = folder_files.File_Id INNER JOIN links ON links.Id = folder_files.Folder_Id WHERE files.Id = 10 ORDER BY folder_files.File_Id ASC, links.Id ASC LIMIT 1;
delete from yourtable where ID_Table1 not in (select MIN(ID_Table1) from yourtable group by ID_Table1LinkTable2, ID_Table1LinkTable2)
CREATE TABLE students (name VARCHAR(64), age INT, gpa DECIMAL(3, 2)); INSERT INTO TABLE students VALUES ('fred flintstone', 35, 1.28), ('barney rubble', 32, 2.32);
SELECT L.LinkName, G.GroupName, ISNULL(SG.SubGroupName, 'NotExist') AS SubGroupName FROM Link L ....
UPDATE UserSetting SET isUnsubscribedFromSystemEmails = 1 WHERE userID in (SELECT userID from [User] WHERE emailAddress in (SELECT emailAddress FROM BadEmailAddresses))
SELECT * FROM folderFolder ff INNER JOIN folderFolder ff_child ON ff_child.parentFolderID = ff.childFolderID INNER JOIN folder f ON f.folderID = ff.childFolderID OR f.folderID = ff_child.childFolderID WHERE ff.parentFolderID='112'
select id from table order by kills/deaths desc limit 1;
select t.LINE_NUMBER || '.' || t.shipment_number line_number from oe_order_lines_all t WHERE T.HEADER_ID = &header_id;
CREATE TABLE [dbo].[Foo]( [bar] [nvarchar](50) NOT NULL ) ALTER TABLE [dbo].[Foo] WITH CHECK ADD CONSTRAINT [CK_Foo] CHECK (([bar]<>N''))
SELECT recordID, GroupIdentifier, COUNT() AS total, SUM(intActingAsBoolean = 1) AS Approved FROM table WHERE date_format(Datevalue, '%Y%m%d') BETWEEN 'startDate' AND 'endDate' GROUP BY groupIdentifier
SELECT * FROM alumnidetails ad INNER JOIN alumwork aw ON ad.username = aw.username WHERE ad.firstname = ‘Pete’;
select COUNT(*) from Employee emp where (@@SERVERNAME = 'Server1' AND emp.LocationID in (1,2,3)) OR (@@SERVERNAME = 'Server2' AND emp.LocationID in (4,5,6)) OR (@@SERVERNAME = 'Server3' AND emp.LocationID in (7,8,9))
mysql> SELECT CHAR(104), ASCII('h'), ORD('h'); +-----------+------------+----------+ | CHAR(104) | ASCII('h') | ORD('h') | +-----------+------------+----------+ | h | 104 | 104 | +-----------+------------+----------+
SELECT T.* FROM MyTable T LEFT JOIN TblCountries C ON(T.Country = C.Country AND T.CountryCode = C.CountryCode) WHERE C.CountryId IS NULL -- Assuming you have a column by that name that's not nullable.
select * from orders where to_char(OrderDate,'MM') = to_char(add_months(sysdate,-1),'MM')
CREATE TABLE TestTable (ID INT, FirstCol VARCHAR(100), CONSTRAINT FirstCol CHECK (FirstCol NOT LIKE '%[^a-zA-Z\_-]%' ESCAPE '\'))
"[Flags]public enum Permission{ VIEWUSERS = 1, // 2^0 // 0000 0001 EDITUSERS = 2, // 2^1 // 0000 0010 VIEWPRODUCTS = 4, // 2^2 // 0000 0100 EDITPRODUCTS = 8, // 2^3 // 0000 1000 VIEWCLIENTS = 16, // 2^4 // 0001 0000 EDITCLIENTS = 32, // 2^5 // 0010 0000 DELETECLIENTS = 64, // 2^6 // 0100 0000}"
INSERT INTO Table1 (ColList) SELECT ColList FROM SourceTable WHERE Column1 = 0; INSERT INTO Table2 (ColList) SELECT ColList FROM SourceTable WHERE (Column1 <> 0 OR Column1 IS NULL);
select ti.id, ti.title, group_concat(t.title) from table_items ti inner join tag_to_items tti on (ti.id = tti.itemid) inner join tags t on (t.id = tti.tagid) group by ti.id, ti.title
UPDATE person SET name = CASE id WHEN 1 THEN 'Jim' WHEN 3 THEN 'Precious' ELSE name END, sex = CASE id WHEN 1 THEN 'female' WHEN 2 THEN 'male' ELSE sex END WHERE id IN (1,2,3)
WITH CTE AS (SELECT [DepartmentName], [Gender], [BaseRate] FROM [AdventureWorks].[dbo].[DimEmployee]) SELECT [DepartmentName], [M], [F] FROM CTE PIVOT (Avg(BaseRate) FOR [Gender] IN ([M], [F])) AS P
NOT ( `date` < 20120102 OR `date` > 20120204 OR ( `date` = 20120102 AND `time` < 1000 ) OR ( `date` = 20120204 AND `time` > 930 ) )
SELECT SUM(DATEDIFF(minute, R.ArrivalDate, R.DepartureDate)) / 60 as TotalHours , SUM(DATEDIFF(minute, R.ArrivalDate, R.DepartureDate)) % 60 as TotalMinutes FROM TableWithDates R
Select * From table Where (@Column = 'name' and name is null) or (@Column = 'surname' and surname is null) or (@Column = 'name and surname' and surname is null and name is null)
WITH q AS ( SELECT table1.NAME AS label, COUNT(table1.id) AS count_id, ROW_NUMBER() OVER (ORDER BY COUNT(table1.id) DESC) AS rn FROM table1 WHERE table1.name LIKE 'D%' GROUP BY table1.name ) SELECT label, count_id FROM q WHERE rn <= 9 UNION ALL SELECT 'Other' AS label, SUM(count_id) AS count_id FROM q WHERE rn > 9 GROUP BY 'Other';
SELECT NAME, SUM(CASE WHEN GRADE = 1 THEN 1 ELSE 0 END) AS GRADE1, SUM(CASE WHEN GRADE = 2 THEN 1 ELSE 0 END) AS GRADE2, SUM(CASE WHEN GRADE = 3 THEN 1 ELSE 0 END) AS GRADE3 FROM Rodzaj GROUP BY NAME
select city, sum(case when active = 'true' then 1 else 0 end) active, sum(case when blacklist = 'true' then 1 else 0 end) blacklist, sum(case when license = 'true' then 1 else 0 end) license, sum(case when married = 'true' then 1 else 0 end) married from TableName group by city
SELECT Count(serial_number) most_popular, serial_number FROM tablename GROUP BY serial_number HAVING Count(serial_number) = (SELECT Count(serial_number) ss FROM from tablename GROUP BY serial_number ORDER BY ss DESC LIMIT 1)
1,000 * 10,000 * 1,000,000 = 10,000,000,000,000 = 10 TB
CREATE INDEX IX_call_company_date ON call (company_id, date)
UPDATE mytable t1 LEFT JOIN mytable t2 ON t1.type = t2.type AND t2.name = 'barney' SET t1.name = CASE WHEN t2.name IS NULL THEN 'barney' ELSE t1.name END, t1.status = CASE WHEN t2.name IS NULL THEN t2.status ELSE 'DEL' END WHERE t1.name = 'fred';
select item from data,generate_series(0,1000) where generate_series<qty order by item;
SELECT a.callerFName, a.callerLName, a.callerDOB, a.createdOn, a.phoneNoteId FROM phoneCallNotes as a LEFT JOIN phoneCallNotes as b ON b.callerFName = a.callerFName AND b.callerLName = a.callerLName AND b.callerDOB = a.callerDOB AND b.createdOn > a.createdOn WHERE a.callerLName LIKE 'Public' AND b.phoneNoteId IS NULL
SELECT REGEXP_INSTR('Test!ing','[^[:alnum:]]') FROM dual;
; WITH myTable([Date], [Name]) AS ( SELECT * FROM source_name WHERE [Date] BETWEEN DATEADD(day, (@no_of_days*-1), @date) AND DATEADD(day, @no_of_days, @date) AND [Date] != @Date ) .... do something here.
<workflow> <if test="not-equal" value1="{$parameters.claims_id}" value2=""> <then> <set-field field="parameters.claim_id" value="{$parameters.claims_id}"/> </then> </if> </workflow>
select timestampdiff(SECOND, t1.col1, t2.col2);
START a=node({self}) MATCH a<-[:FOLLOW]-(b) RETURN b
select c.SerialNumber, b.ReadDate, d.RegisterTypeCode, e.IntervalStatusCode, d.UOM_Code, e.IntervalPeriodTimestamp, e.IntervalValue from MarketMessage as a LEFT JOIN MessageType341 as b ON a.PK = b.FK LEFT JOIN Meter as c ON b.PK = c.FK LEFT JOIN ChannelInformation as d ON c.PK = d.FK LEFT JOIN IntervalInformation as e ON d.PK = e.FK where b.CustomerNo = '12348750528' and b.ReadDate BETWEEN '01 nov 2014' AND and b.ReadDate <= '30 nov 2014' order by b.ReadDate
CREATE TABLE foo SELECT bar FROM xyz;
:com -range C <line1>,<line2>yank | $ | put | .,$ !rev
HR.HRPKG.ADD_JOB_HISTORY
SELECT u.user_email, m.meta_value FROM wp_users u INNER JOIN wp_usermeta m ON m.user_id = u.ID && m.meta_key = 'agent_name' && m.meta_value IS NOT NULL
DECLARE @Location … DECLARE @SQL varchar(max) If (@InputVariable = 1) BEGIN @Location = '[DatabaseA].dbo.MyTable' END ELSE BEGIN @Location = '[DatabaseB].dbo.MyTable' END BEGIN SET @SQL = 'UPDATE '+@Location+ ' WHERE … ' END EXECUTE (@SQL)
select UPPER(last_name) as Last_Name_In_UpperCase from employees where credit_limit > 25;
select foo, bar from bortz order by case foo when 'E' then 1 when 'C' then 2 when 'T' then 3 else 4 end
select u.* from dbo.Users u join dbo.Form f on u.? = f.formId join dbo.FormEmployment fe on fe.formId = f.formId join dbo.Grade g on g.gradeId = fe.gradeId join dbo.ShiftGrade shg on shg.gradeId =g.gradeId join dbo.Shift sh on sh.shiftId = shg.shiftId where sh.shiftId = -- recently added shift id and g.gradeId == -- recently added grade id
CREATE TABLE #table (Column1 varchar(10), Column2 varchar(10)) INSERT INTO #table VALUES ('column1', 'column2') DECLARE @Check bit; SET @Check = 0 IF @Check = 1 (SELECT Column1, Column2 FROM #table) ELSE (SELECT Column1 FROM #table)
while 1 = 1 BEGIN UPDATE top (1000) tableToUpdate SET IsVegetable = 1 WHERE Date = '2011-07-23 14:00' AND IsNull(IsVegetable, 0) = 0 if @@ROWCOUNT < 1000 BREAK END
SELECT name FROM table2 WHERE name IN(SELECT name FROM table1 WHERE...)
WHERE (A <> 1 OR B <> 1 OR C <> 1)
SELECT DISTINCT ON (1) (date / 5000) * 5000 AS truncated, price FROM data WHERE date >= [some_time_in_the_past] ORDER BY 1;
new Mongo("mongodb://host/db", array("username" => $username, "password" => $password));
CREATE UNIQUE INDEX ix ON Person.EmailAddress(BusinessEntityID)
select * from FirstTable inner join SecondTable on SecondTable.District = FirstTable.District And (SecondTable.Age - FirstTable.Age) between -1 and 1 where FirstTable.Name = 'AAA';
UPDATE [MyTable] SET HelpLink = CASE ID WHEN 2 THEN 'MKSDefectsChart.png' WHEN 6 THEN 'EPMRisks.png' WHEN 7 THEN 'DCTSHardwareChanges.png' ELSE NULL END WHERE ID IN (2, 6, 7)
WHERE (CURDATE() BETWEEN 1/1/2013 AND 3/1/2013 AND Staff."Code" IN (1,2,3)) OR (CURDATE() BETWEEN 3/1/2013 AND 5/1/2013 AND Staff."Code" IN (2,3,4))
+ (id)defaultValueForProperty:(NSString*)propertyName;
select season, episode, group_concat(channel) from status where tvseriesid = 1 group by season, episode order by season desc, episode desc limit 1;
SELECT NVL2( m.first_name ||m.last_name , m.first_name || ' ' || m.last_name, 'No One' ) || ' supervises ' || w.first_name || ' ' || w.last_name FROM employees w, employees m WHERE w.manager_id = m.employee_id(+);
SELECT dateadd(month, ISNULL(t.float_column,0), t.date_column1) as newDate , * FROM ( SELECT a.guid_column1, b.guidID_column1, c.date_column1, d.guid_column1, a.float_column ROW_NUMBER() OVER (PARTITION BY a.guid_column1, b.guid_column1 ORDER BY c.date_column1 DESC) as rn ... -- JOINS AND WHERE STUFF HERE .... ) t WHERE t.rn = 1 ORDER BY newDate ASC
UPDATE tableName a INNER JOIN ( SELECT id, MAX(percentage) AS maxPercentage FROM tableName GROUP BY id ) b ON a.ID = b.ID SET a.percentage = b.maxPercentage;
IF EXISTS(SELECT * FROM Table1 T1 INNER JOIN Table3 T3 ON T1.ID=T3.ID) SELECT * FROM Table1 AS t1 INNER JOIN Table2 AS t2 ON t1.ID = t2.ID LEFT JOIN Table3 AS t3 ON t1.ID = t3.ID LEFT JOIN Table4 AS t4 ON t3.ID = t4.ID ELSE SELECT * FROM Table1 AS t1 INNER JOIN Table2 AS t2 ON t1.ID = t2.ID
SELECT foo, GROUP_CONCAT(DISTINCT bar ORDER BY bar) AS bars FROM foo_table LEFT JOIN bar_table ON bar_table.foo_id = foo_table.foo_id
SELECT GREATEST(col1, col2, col3, col4, col5, col6, col7, col8) AS max_date FROM YOUR_TABLE
WITH fruitStatus AS ( SELECT fruit, quality, [timestamp], ROW_NUMBER() OVER (Partition BY Fruit ORDER BY [TimeStamp] DESC) rn FROM tableName ) SELECT fruit, quality FROM fruitStatus WHERE rn = 1
AND (state != 'PENDING' OR state IS NULL)
CREATE UNIQUE NONCLUSTERED INDEX [IX_DefaultRecord] ON [dbo].[FooXRef] ( [BarID] ASC, [DefaultRecord] ASC ) WHERE ([DefaultRecord]=(1))
SELECT ID, MIN(CASE WHEN Cat = 'Small' THEN 'Small' END) Small, MIN(CASE WHEN Cat = 'Medium' THEN 'Medium' END) Medium, MIN(CASE WHEN Cat = 'Large' THEN 'Large' END) Large FROM YourTable GROUP BY ID
SELECT [Name], SUM ( CASE WHEN [Values]='VAL1' THEN 1 ELSE 0 END ) AS Val1Count, SUM ( CASE WHEN [Values]='VAL2' THEN 1 ELSE 0 END ) AS Val2Count FROM [table1] GROUP BY [Name]
DECLARE @cols VARCHAR(MAX) = (SELECT TOP 1 KeyOne+','+KeyTwo FROM TableA) ,@sql VARCHAR(MAX) SET @sql = 'SELECT '+@cols+' FROM TableB' EXEC (@sql)
owa_util.get_cgi_env('HTTP_USER_AGENT')
SELECT t2.TYPE [TYPE], t3.Status [STATUS], t4.COMPANY, T5.STATE FROM ASSETINFO t1 INNER Join TYPEINFO t2 on t1.TYPEID = t2.TYPEID INNER Join STATUSINFO t3 on t1.STATUSID = t3.STATUSID INNER Join VENDORINFO t4 on t1.VENDORID = t4.VENDORID INNER Join stateINFO t5 on t4.State = t5.StateId
select coalesce(c.State, 'default value') from a left join b on a.id = b.A_id left join c on b.B_id = c.B_id
SELECT personName, age FROM table WHERE country = 'U.S.'
select * from ( select * from tableName order by id desc ) where ROWNUM <= 4;
SELECT DISTINCT a, b, c FROM first WHERE (a, b, c) NOT IN (SELECT a, b, c FROM second)
select dbo.GetHighestDrop( ((clmnA/clmnB)-1)*100, 2, 3) as Col1 from dbo.tstTable
SELECT Name, 'Joined' AS [ACTION], JOIN_DT AS ACTION_DATE FROM SomeTable UNION ALL SELECT Name, 'Started' START_DTTM FROM SomeTable UNION ALL SELECT Name, 'ended', END_DT FROM SomeTable
SELECT p.* FROM ( SELECT project_id FROM write_permissions WHERE user_id = 1 UNION SELECT project_id FROM read_permissions WHERE user_id = 1 ) sub JOIN projects p USING (project_id);
SELECT Sum(Case When AcknowledgmentStatus <> 'Complete' Then 1 ELSE 0 END) as NonAckd ,Sum(Case When InvoiceStatus <> 'Complete' Then 1 ELSE 0 END) as NonInvoiced FROM PurchaseOrder WHERE CustomerID = IsNull(NullIf(@CustID, 0), CustomerID)
decimal total = /* get value from database */; decimal fraction = decimal.Remainder(total, 1m);
select sched.id, max(txn.dttm), acc.id from PaymentSchedulePeriod sched ,(PaymentSchedulePayment pay right outer join AccountTransaction txn on pay.accountTransactionFk=txn.id right outer join Account acc on txn.accountFk=acc.id) where sched.accountFk=acc.id group by sched.id, acc.id
UPDATE TableName SET ColName = REPLACE(ColName, '"', ''); WHERE ColName SIMILAR TO '%"%'
var query = (from solvedPuzzle in db.SolvedPuzzles where solvedPuzzle.UserID == user.ID order by NumberOfMoves ascending group solvedPuzzle by solvedPuzzle.PuzzleID into filtered select filtered.First());
select a.*, sum(case when b.release_date > a.death then 1 else 0 end) as post_mortem_books, max(case when b.release_date > a.death then release_date end) as last_post_mortem_book from author a left outer join books b on a.author_id = b.author_id group by a.author_id
SELECT sp.user_id, SUM(dw.weight) FROM summing_period sp, diet_watch dw WHERE dw.user_id = sp.user_id AND dw.entry_date >= sp.start_date AND dw.entry_date <= sp.end_date GROUP BY sp.user_id
UPDATE otheTableName SET address = "Route 666" WHERE id = 37;
SELECT p.post_id, p.post_title, GROUP_CONCAT(t.tag_name ORDER BY t.tag_name SEPARATOR ', ') FROM POSTS p JOIN TAGMAP tm ON tm.post_id = p.post_id JOIN TAGS t ON t.tag_id = tm.tag_id GROUP BY p.post_id, p.post_title
exec("mysql -u ".\Config::get('database.mysql.user')." -p".\Config::get('database.mysql.password')." ".\Config::get('database.mysql.database')." < script.sql")
select o.callId , o.timestamp , o.duration ,o.callNote , o.state,o.contactId, j.firstName , j.lastName ,j.company Id as company, j.email, j.contactNote, r.number from calls o left outer join contacts j on o.contactId =j.contactId left outer join numbers r on j.contactId=r.contactId;
WITH t AS (SELECT ROW_NUMBER() OVER(PARTITION BY ID ORDER BY PK) n FROM MyTable) DELETE FROM t WHERE n > 1
from django.db import Q search_content = kwargs.get('search_content', '') myfilter = Q() for term in search_content.split('+'): myfilter |= Q(content__icontains=term) result = BlogPage.objects.filter(myfilter).select_related('ImageMedia')
SELECT carId ,carName,carPrice FROM Car ORDER BY CASE WHEN carId = @th5thid THEN 0 ELSE 1 END, Carid
SELECT "date", "status", SUM(CASE WHEN "type"='typeA' THEN "count" ELSE 0 END) typeA_count, SUM(CASE WHEN "type"='typeB' THEN "count" ELSE 0 END) typeB_count, SUM(CASE WHEN "type"='typeC' THEN "count" ELSE 0 END) typeC_count, SUM(CASE WHEN "type"='typeD' THEN "count" ELSE 0 END) typeD_count FROM mytable GROUP BY "date", "status" ORDER BY "date", "status"
SELECT CASE WHEN (Period = 9) THEN 9 WHEN (Age >= 94) THEN 5 WHEN (Age >= 63) THEN 4 WHEN (Age >= 32) THEN 3 WHEN (Age >= 1) THEN 2 WHEN (Age >= -30) THEN 1 ELSE 0 END AS CalcPeriod FROM SomeTableWithFieldsPeriodAndAge
update Book set author2 = (select from Author where name = $parent.current.author ) update Book set author = author2 update Book remove author2
BEGIN TRANSACTION SELECT * FROM TABLE WITH (ROWLOCK, READPAST, UPDLOCK) WHERE Locked = 0 UPDATE TABLE SET Locked = 1 WHERE Locked = 0 COMMIT TRANSACTION
$this->db->where("DATE_FORMAT(from_unixtime(channel_titles.entry_date), '%Y-%m-%d')", $yesterday, false);
declare @str varchar(100) set @str='xxxxx(aaa)' ---- extracts xxxxx select SUBSTRING(@str,0,CHARINDEX('(',@str)) ---- extracts aaa select SUBSTRING(@str,CHARINDEX('(',@str)+1,CHARINDEX(')',@str)-CHARINDEX('(',@str)-1)
SELECT u.UserName FROM Users u INNER JOIN Options o ON o.User_ID = u.ID WHERE o.Flag in (1, 2) GROUP BY u.UserName HAVING COUNT(o.Flag) = 2
SELECT OpptName, OpptName, ISNULL([1], 0) AS '1', ISNULL([2], 0) AS '2' ... etc
UPDATE Student SET age = 28 WHERE name = "Jhon";
update contacts set combination = CONCAT_WS (',', Address, Address2, Address3);
SELECT 'LastName', 'FirstName', 'Username', 'IsActive', 'Graduation' UNION ALL SELECT a.last_name, a.first_name, username, is_active, graduation INTO OUTFILE 'yourFile.csv' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' FROM auth_user a INNER JOIN userprofile_userprofile u ON a.id = u.user_id WHERE a.id>39 AND a.is_active=1 ORDER BY last_name
Select table1.id, Table1.name, group_concat(Table2.tags) FROM Table1 inner join Table2 on Table1.id = Table2.table1_id group by table1.id, table1.name;
select id as fk_id, 'first_name' as attribute, first_name as value from one union all select id as fk_id, 'last_name', last_name from one order by fk_id, attribute
SELECT a.itemName, COALESCE((SELECT itemImageName FROM amgb b WHERE a.userId = b.userId AND a.itemId = b.itemId LIMIT 1 ), 'default.jpg') AS itemImageName FROM amga a WHERE a.userId = 1 AND a.itemId = 'US1';
select el.* from event_log el where 2 >= (select count(*) from event_log el2 where el2.customer_id = el.customer_id and el2.event_time >= el.event_time );
select sum(case when sold_date > DATE_SUB(NOW(), INTERVAL 1 DAY) then price else 0 end) as "day", sum(case when sold_date > DATE_SUB(NOW(), INTERVAL 1 WEEK) then price else 0 end) as "week", sum(case when sold_date > DATE_SUB(NOW(), INTERVAL 1 MONTH) then price else 0 end) as "month" from sales where sold_date > DATE_SUB(NOW(), INTERVAL 1 MONTH);
select player from (select player , sum(runs) from test group by player,runs order by sum(sal) desc) where rownum=1;
select sum(case when priority = 1 and state = 1 then 1 end) as OpenQuestionHighPriority , sum(case when priority = 1 and state = 2 then 1 end) as ClosedQuestionHighPriority .... from dbo.question
SELECT Supplier_Name, MAX(CASE WHEN STATUS = 'Unavailable' THEN Count ELSE 0 END) as Unavailable, MAX(CASE WHEN STATUS = 'Refunded' THEN Count ELSE 0 END) as refunded, MAX(CASE WHEN STATUS = 'Shipped' THEN Count ELSE 0 END) as shipped FROM YourTable GROUP BY Supplier_Name
SELECT my_id, my_date FROM My_Table WHERE my_date >= '2008-01-01'
SELECT FunctionNbr,FunctionDesc, MAX(CAST(date_altered AS DATETIME) FROM Persontable WHERE FunctionNbr IN ('00000001','00000002','00000003') AND LEN(RTRIM(FunctionDesc)) > 0 GROUP BY FunctionNbr,FunctionDesc
update res_partner_address rpa set name = left(rp.name,64) from res_partner rp where rpa.partner_id = rp.id and rpa.name is NULL
for /f "tokens=1,2,3 delims= " %%i in (input.txt) do ( echo %%i >> long.txt echo %%j >> lat.txt )
SELECT * FROM `form_data` WHERE `clientid` IN ( SELECT DISTINCT `clientid` FROM `form_data` WHERE `data` RLIKE '[[:<:]]motor oil[[:>:]]' );
SELECT C.[COUNTRY_ID], C.[COUNTRY], COUNT(S.[STUDENT_ID]) AS StudentCount FROM [T_COMMON_COUNTRY] C LEFT JOIN [T_HEI_STUDENTDATA] S ON C.[COUNTRY] = S.[STDCOUNTRY] GROUP BY C.[COUNTRY_ID], C.[COUNTRY];
DECLARE @t TABLE (oID int, nID int); MERGE T s USING ( SELECT TID, name, address FROM T [s] ) d on 0 = 1 WHEN NOT MATCHED THEN INSERT (name, address) VALUES (name, address) OUTPUT d.TID as oID, Inserted.TID as nID INTO @t;
select time_decimal ,cast(cast(cast(time_decimal as int) as varchar)+ ':'+cast(cast((time_decimal - cast(time_decimal as int)) * 60 as int) as varchar)+ ':'+cast(cast(((time_decimal - cast(time_decimal as int)) * 60- cast((time_decimal - cast(time_decimal as int)) * 60 as int)) * 60 as int) as varchar) as time) as real_time from time1
DECLARE @Result Table(Value varchar(50)) DECLARE @x XML SELECT @X = CAST('<A>' + REPLACE(@StringList, '|', '</A><A>') + '</A>' AS XML) INSERT INTO @Result SELECT t.value('.', 'varchar(50)') as inVal FROM @X.nodes('/A') AS x(t)
SELECT NAME, SUM(VALUE), TIME.MONTH FROM (SELECT DISTINCT MONTH FROM TIME_TABLE WHERE MONTH BETWEEN 12 MONTHS AGO AND NOW) TIME LEFT OUTER JOIN TABLE ON (TIME.MONTH = TABLE.MONTH) GROUP BY TIME.MONTH, NAME
Select CAST( CONVERT(VARCHAR(10), GETDATE(), 120) + ' ' + CONVERT(VARCHAR(8), TargetDate, 108) AS DATETIME) AS [SomeCalculatedField] from TableName
SELECT listings.id, listings.name, media.image_url FROM listing LEFT JOIN media ON media.listing_id = listings.id
DELETE FROM your_table_name a WHERE EXISTS( SELECT 1 FROM your_table_name b WHERE a.fid = b.fid AND a.unique_id < b.unique_id )
$mysqli = new mysqli($host, $username, $password, $db); $mysqli->set_charset("utf8");
select m.title, g.genre, a.name, a.surname from Manga m inner join Author a on m.idauthor=a.idauthor inner join Genre g on m.idgenre=g.idgenre
SELECT guest_no, hotel_no, room_no, COUNT(1) AS BookingCount FROM booking GROUP BY guest_no, hotel_no, room_no ORDER BY MAX(date_to) DESC;
SELECT COUNT(CASE WHEN DATEPART(wk, time) = DATEPART(wk, getdate()) THEN SALES ELSE NULL END) weeksales, COUNT(CASE WHEN MONTH(time) = MONTH(getdate()) THEN SALES ELSE NULL END) monthsales, COUNT(CASE WHEN YEAR(time) = YEAR(getdate()) THEN SALES ELSE NULL END) yearsales FROM salesdairy WHERE propertytype in ('item1')
select column1, column2, column3, column4, column5, group_concat(column6) as column6 from query q group by column1, column2, column3, column4, column5;
ALTER TABLE dbo.YourTable ADD CONSTRAINT UC_ID_BriefID UNIQUE(ID, BriefID, Name)
SELECT fileNumber FROM File_Transfer WHERE TO_NUMBER(REGEXP_SUBSTR(filenumber, '^(\d+)(\D*)$', 1, 1, 'x', 1)) >= 57 AND TO_NUMBER(REGEXP_SUBSTR(filenumber, '^(\d+)(\D*)$', 1, 1, 'x', 1)) < 60
SELECT delivery_name FROM orders WHERE CONCAT('a',orders_id) = CONCAT('a','985225a')
SELECT A.* FROM TableA A LEFT JOIN ( TableB B INNER JOIN TableC C ON B.CID = C.CID AND C.PassesTest ) ON B.BID = A.BID
SELECT COUNT(*) FROM ( SELECT id_employee, COUNT(*) AS CNT FROM Department_Employee GROUP BY id_employee ) AS T WHERE CNT > 1
select dateadd(hour, datediff(hour, 0, CounterDateTime), 0), avg(CounterValue) from mopsxactthroughput group by dateadd(hour, datediff(hour, 0, CounterDateTime), 0) having count(*) > 1
SELECT registrations.registration_no, vaccination_type.vaccine_id, vaccination_type.name, vaccination.date FROM registrations CROSS JOIN vaccination_type LEFT JOIN vaccination ON registrations.registration_no = vaccination.registration_no AND vaccination_type.vaccine_id = vaccination.vaccine_id WHERE registrations.registration_no = 1111
WHERE MONTH(app_date) = 7 AND YEAR(app_date) = YEAR(NOW())
ORDER BY CASE NAME WHEN 'English' THEN 0 WHEN 'Mathematics' THEN 1 ELSE 2 END, NAME, Stuyear DESC
select top(1) with ties InstructorNo, COUNT(InstCourses.CourseNo) as NoTeachableCourses from ... group by InstructorNo order by NoTeachableCourses desc;
SELECT R.Country_CD, COUNT(*) AS d_null FROM Reimbursement R WHERE R.Country_CD = @Country_CD AND R.Effective_End_DT IS NULL
OPEN my_cursor; LOOP FETCH my_cursor INTO my_details; EXIT WHEN sll_cur%NOTFOUND; -- Do processing utl_file.putf(logfile,'%s ',my_details); -- Call the FFLUSH proc here..And contents are available immediately. utl_file.FFLUSH(logfile); END LOOP;
select string_agg(st_no,',') as st_no, string_agg(st_name,',') as st_name, string_agg(directions,',') as directions, string_agg(others,',') as others from table1 group by st_no
SELECT BuildID,Product, Program, sum(CASE WHEN State = 'Running' THEN cast(TotalTime as INT) ELSE 0 END) AS Running , sum(CASE WHEN State = 'Break' THEN cast(TotalTime as INT) ELSE 0 END) AS Breakt FROM Line1Log GROUP BY BuildID,Product, Program
dbadmin=> select 1,2; ?column? | ?column? ----------+---------- 1 | 2 (1 row) dbadmin=> \x Expanded display is on. dbadmin=> select 1,2; -[ RECORD 1 ] ?column? | 1 ?column? | 2 dbadmin=> select 1,2; ?column? | ?column? ----------+---------- 1 | 2 (1 row) dbadmin=> \x Expanded display is on. dbadmin=> select 1,2; -[ RECORD 1 ] ?column? | 1 ?column? | 2
select convert(datetime, left(stuff(stuff(created_time, 1, 4, ''), 8, 0, right(created_time, 4) + ' '), 20), 100)
SELECT tm.userid, ty.courseid, CASE WHEN tx.cid IS NULL THEN 'not done' ELSE 'done' END AS 'F' FROM tablem tm JOIN tabley ty ON 1=1 LEFT JOIN tablex tx ON tm.userid = tx.userid AND ty.courseid = tx.cid ORDER BY tm.USERID
SELECT 'xxxxxxxxxxx' as 'tel', count(*) as 'count' from CDR where did = 'xxxxxxxxxxx'
CURRENT_TIMESTAMP = July 10th timestamp + 2 days worth of seconds = 1000000 + 86400 * 2
SELECT MIN(timediff(t1.`time`, t2.`time`)) AS delta_t, FROM temperatures t1 JOIN temperatures t2 ON t1.`time` < t2.`time`
SELECT id ,title ,qty/(select sum(qty) from cars) FROM cars GROUP BY id
SELECT item_id, COUNT(*) AS count FROM ratings GROUP BY item_id ORDER BY count DESC;
CREATE NONCLUSTERED INDEX [IX_Index] ON [dbo].[mytable] ( [CreateTime] )
INSERT INTO #Table SELECT X.Category, null, 0.00, 'Summary' FROM #Table X LEFT JOIN #Table Y ON Y.Category = X.Category AND Y.Type = 'Summary' WHERE Y.Category IS NULL
IIf(IsDate(a.exit_date), date1, date2) As hire_date
l_user varchar2(500) := v('APP_USER');
select '£'+replace(replace('YourText','x','s'),'You','U')
SELECT * From ( SELECT DISTINCT e.* , (6371 * acos( cos( radians(9.977364864079215) ) * cos( radians( latitude ) ) * cos( radians( longitude ) - radians(76.58620953448485) ) + sin( radians(9.977364864079215) ) * sin( radians( latitude ) ) ) ) as distance FROM schools e LEFT JOIN geodata g ON e.id=g.id WHERE (e.type = 'preprimary') AND ( e.title LIKE '%government%' ) ) as s Where s.distance < 20 Order by s.distance
SELECT Reason, COUNT(Reason) AS Number, CAST(COUNT(Reason) AS float) / CAST(t.Total AS float) AS percentage FROM DeletedClients, (SELECT COUNT(*) As Total FROM DeletedClients) t GROUP BY Reason, Total
UPDATE Table SET temp_col = CASE WHEN value=1 THEN 'yes' ELSE 'no' END
with tab as (select distinct category title, null parent from test union all select title, category from test) select lpad(' ', (level * 2 - 1), '-' ) || title as title from tab start with parent is null connect by prior title = parent;
UPDATE TableName SET JoinDate = CASE WHEN NextLevel = 'Hour' THEN DATEADD(HH,1,ISNULL(ModifiedDate,CreatedDate)) WHEN NextLevel = 'Day' THEN DATEADD(DD,1,ISNULL(ModifiedDate,CreatedDate)) WHEN NextLevel = 'Min' THEN DATEADD(MI,1,ISNULL(ModifiedDate,CreatedDate)) END
INSERT INTO NewTable(CHILDNAME, CURRENTPAR_NAME, PREVIOUSPAR_NAME) SELECT c.CHILDNAME, p1.PARENTNAME, p2.PARENTNAME FROM Child c JOIN Parent p1 ON (p1.PARENTID = c.CURRENTPARENTID) JOIN Parent p2 ON (p2.PARENTID = c.PREVIOUSPARENTID) ;
SELECT * FROM sys.databases ORDER BY create_date
1 A XYZ 3 B UUI 2 C 8XU 4 F 6XK 6 E 9XU 5 D 7XP
var min = class3List.SelectMany(x => x.Class2List).Min(x => x.myClass1.Price);
SELECT Marks FROM ( SELECT Marks, DENSE_RANK() OVER (ORDER BY Marks DESC) AS MarksRank FROM yourtable ) WHERE MarksRank <= 4
SELECT UserID, SUM( CASE WHEN [DATE] = @Date2 THEN Count ELSE -1*Count END ) AS Counter FROM [CountTable] WHERE (([Date] = @Date) OR ([Date] = @Date2)) GROUP BY UserID
select enrollment.*, student.*, course.* from enrollment inner join Student on enrollment.studentId = student.studentId inner join Course on enrollment.courseId = course.courseId
SELECT THDR.filename, THDR.txn_header_id, THDR.txn_header_ext_id, THDR.txn_header_dttm, THDR.upload_dttm, Nvl(Sum(TDTL.txn_vol), 0) TOTAL_VOLUME, FROM ci_txn_header THDR LEFT JOIN ci_txn_detail TDTL ON THDR.txn_header_id = TDTL.txn_header_id
Select POTYPE, Count(POTYPE) From TableA Group By POTYPE
SELECT SUM(colx) OVER (PARTITION BY Col1) AS [All of col1], SUM(colx) OVER (PARTITION BY Col2) AS [All of col2], SUM(colx) OVER (PARTITION BY Col1, Col2) AS [PerCol1Col2Pair], SUM(colx) OVER () AS [All of col1 and All of col2] FROM MyTable
UPDATE (PB INNER JOIN Noeuds ON PB.NOEUD = Noeuds.NOEUD) INNER JOIN ColInfo ON Noeuds.NUM_COL = ColInfo.NUM_COL SET PB.FORFAIT = "E" WHERE (((ColInfo.INTEREXTER)=2));
select workerid from tags where name in ('foo', 'bar') group by workerid having count(distinct name) = 2
create or replace view_name as select col1, col2, 'schema1' as schema_name from schema1.table union all select col1, col2, 'schema2' from schema2.table union all select col1, col2, 'schema3' from schema3.table ...
select ItemSizeNm from MstItemSize where SizeTypeNm ='Ring' and ItemSizeNm in (select ringSize from @tblRingSize)
class Tag(tagging_tag): #id = models.AutoField(primary_key=True) objects=TagManager() class Meta: proxy = True
select * from productattributes p1 where not exists (select 1 from productattributes p2 where p1.product_id = p2.product_id and p2.attribute_id = 136)
SELECT CASE WHEN LEN(comments) <= 60 THEN comments ELSE LEFT(comments, 60) + '...' END As Comments FROM myView
SELECT trunc(SALE_DATE) as sale_date FROM sales GROUP BY trunc(SALE_DATE) ORDER BY trunc(SALE_DATE);
select cust_id , avg(orderdate - lag_orderdate) as avg_time_between_orders from ( select cust_id , orderDate , lag(orderdate) over (partition by cust_id) as lag_orderdate from orders )
select concat ("insert into `Country` (`country`) values (\"", country, "\");") from Country order by id;
with t as (select stage from metrics where name = 'member') select (select count(*) from t) as total, stage, count(*) from t group by stage
Select T.course_id From course as T Where (Select Count(*) From section as R Where T.course_id = R.course_id and R.year = 2009) = 1;
proc rank data=etude.Presta_cluster_panier out=outranks groups=10; var FR; ranks Quantile; by Cluster Age; run; proc means data=outranks; var FR; ways 3; class Cluster Age Quantile; output out=outmean; run;
select Sales.id, Max(Sales.price) Sales_price, Sum(Payment.price) Payment_price from Sales, Payment where Sales.id = Payment.sale_id group by Sales.id having Max(Sales.price) = Sum(Payment.price)
DENSE_RANK() OVER (PARTITION BY ScanName ORDER BY ScanDate DESC) AS Rnk
UPDATE menu_items mi JOIN inventory_items ii ON mi.bin_number=ii.bin_number AND mi.location_id=ii.location_id SET mi.inventory_item_id = ii.id
SELECT ListID, SUM(IF(Status="YES",1,0)) FROM yourtable GROUP BY `ListID`
select k.id from keytemp as k left outer join keys as kk on (k.hash=kk.hash and kk.sourceid=10) where kk.hash is null;
USE PHARMA UPDATE item SET item_uom = pos.uom FROM item i INNER JOIN POSDB.dbo.Items pos ON i.item_name = pos.item_desc
select name , case when sum(amount1 - amount) < 0 then -sum(amount1 - amount) end as amount , case when sum(amount1 - amount) >= 0 then sum(amount1 - amount) end as amount1 from YourTable group by name
select * from myTable where CHARINDEX(cast(mycol as varchar), @myVar) > 0
SELECT first_name,last_name, total FROM ( SELECT customer_id, SUM(amount) AS total FROM sakila.payment JOIN sakila.customer USING(customer_id) WHERE YEAR(payment_date)=2005 GROUP BY customer_id ) total_alias INNER JOIN sakila.customer scu ON total_alias.customer_id=scu.customer_id ORDER BY total DESC LIMIT 1;
SELECT x.searchterm, b.* FROM (SELECT $s[0 ... 20] AS search_term) x LEFT JOIN BOOKS b ON MATCHES(b.title) AGAINST (x.searchterm)
SELECT DISTINCT Identy, COUNT(clnt_ntnlty) OVER (PARTITION BY Identy) Counts FROM ( SELECT 0 Val, 'Aboriginal' Identy UNION SELECT 1 Val, 'Torres Strait Islander' Identy UNION SELECT 2 Val, 'Both Aboring & Torres Strait' Identy UNION SELECT 3 Val, 'Neither Aboring OR Torres Strait' Identy ) x left join dbo.clientInfo t on t.clnt_ntnlty=x.Val
declare Contador number; begin ATUALIZAR_VAL_MAT_PENDENTES(Contador); if Contador = 0 then dbms_scheduler.set_attribute('JOB_ATUALIZAR_VAL_MAT_PEND', 'end_date', systimestamp + 1); end if; end;
UPDATE MyTable SET MyTable.Found = True WHERE MyTable.NameField LIKE "*abc*";
IF EXISTS (SELECT * FROM tblOne WHERE field1 = @parm1 AND field2 = @parm2) OR EXISTS (SELECT * FROM tblTwo WHERE field1 = @parm5 AND field2 = @parm3) PRINT 'YES'
select from_unixtime(unix_timestamp('2016/06/01','yyyy/MM/dd'),'yyyy-MM-dd') from table1;
Select Top 1 * From Data Where status = "not Dialled" ;
sp_configure 'two digit year cutoff', 2015 reconfigure
update phone set IsValid=0 where id in (select id from phone where id not in ( select MAX(id)id from phone group by phoneNo)) and IsValid=1
select b.Country, b.AnotherCode, a.Code from Country1 a left join Country2 b on a.Country=b.Country
CREATE TABLE Test ( Id INT, Name NVARCHAR(50) UNIQUE ) INSERT INTO Test VALUES (1, 'Jh_123') SELECT * FROM Test
select a.AID , a.City , a.IndividualScore , a.IndividualScore + sum(case when oa.IndividualScore > a.IndividualScore then oa.IndividualScore - a.IndividualScore else 0 end) as RelativeScore from tblActor a left join tblActoroa on a.City = oa.City-- other actor where a.AID != oa.AID group by a.AID , a.City , a.IndividualScore
SELECT LISTAGG(name, ', ') WITHIN GROUP (ORDER BY name) "name_list" FROM TABLE1;
SELECT TableName FROM DBC.Tables WHERE Tablekind = 'V' AND requestText LIKE '%yourtablename%' GROUP BY 1 ORDER BY 1;
WHERE town like concat('%',@userinput,'%') OR street like concat('%',@userinput,'%') OR other like concat('%',@userinput,'%')
SELECT DISTINCT * FROM ( SELECT CASE WHEN ... GROUP BY messages.id ORDER BY messages.time DESC ) AS inner_q ORDER BY messages.time DESC
SELECT year(holidaydate),month(holidaydate), sum(case Weekend when true then 1 else 0 end) wkEnd, sum(case PublicHoliday when true then 1 else 0 end) pubHol FROM Holiday GROUP BY year(holidaydate),month(holidaydate)
SQL> SELECT SYSDATE FROM DUAL; SYSDATE --------- 24-JUN-13 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD'; Session altered. SQL> SELECT SYSDATE FROM DUAL; SYSDATE ---------- 2013-06-24
select xyz from theTable where not regexp_like(mycolumn,pattern)
$select = new Select($this->tableGateway->getTable()); $paginatorAdapter = new DbSelect( $select, $this->tableGateway->getAdapter(), $this->tableGateway->getResultSetPrototype() ); $paginator = new Paginator($paginatorAdapter); return $paginator;
REGEXP_LIKE(col, '[^[:alnum:] _,-]')
SELECT 'v1'::text AS source, clothingid, shoes, shirts FROM view1 UNION ALL SELECT 'v2'::text AS source, clothingid, shoes, shirts FROM view2;
DELETE FROM Table1 AS t1 WHERE Exists ( SELECT t2.column1 FROM Table1 AS t2 WHERE t2.column2 = "ok" And t2.column1 = t1.column1);
select au.userId from active_users au where au.teamId in (1, 2, 4) group by au.userId having count(*) = 3;
where (',' || replace(A.colX,' ','') || ',') LIKE ('%,' || B.colY || ',%')
NSURL *myURL = [NSURL URLWithString:@"http://www.myserver.com/results.php"]; NSArray *sqlResults = [[NSArray alloc] initWithContentsOfURL:myURL];
SELECT member_id, max(last_accessed) FROM member_track GROUP BY member_id
SELECT MIN(created_timestamp), MAX(resource_id), MAX(price), MIN(CASE WHEN event_type IN (1704, 1701, 1703) THEN found_value WHEN event_type = 1707 THEN 1707 ELSE NULL END) FROM subscriptions GROUP BY guid ;
select c.id from customer c join account a on c.id = a.ind_id where c.status = 'A' group by c.id having max(last_purchase) >= date_add(month, -2, getdate());
SELECT t1.Col1, t1.Col2 FROM t t1 JOIN t t2 ON t1.Col1 = t2.Col1 and t1.Col2 >= t2.Col2 Group by t1.Col1, t1.Col2 ORDER BY Count(t2.Col2), t1.Col1;
"SELECT name FROM names WHERE id=" + this.id; "SELECT name FROM names WHERE id=" + this.id + " AND age=" this.age;
SELECT AwardAction.strActionName, AwardType.strAwardName, Award.strStudentId,Award.iCount FROM [dbo].[Awards] Award inner join [dbo].[AwardAction] AwardAction on AwardAction.Action=Award.Action inner join [dbo].[AwardTypes] AwardType on AwardType.Type=Award.Type WHERE AwardType.ApplicationId=@ApplicationId and Award.ID=@ID
select * from information_schema.columns where table_name = 'Foo'
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id group by f.title order by count(*) desc
select sum(house_number) from yourtable where house_name is null and po_box is null
select car from Car car where car.keywordName like :k1 or car.keywordName like :k2 or car.keywordName like :k3 ...
select datepart(yyyy, t1.odate) as oyear, t2.oitem from table1 t1 inner join table2 t2 on t1.groupid = t2.groupid
declare @t varchar(20) set @t='200012011200' select cast(stuff(stuff(@t, 11,0,':'),9,0,' ') as datetime)
SELECT SR_NO, CASE WHEN [Attribute -X] = 'A' THEN A ELSE NULL END AS 'A', CASE WHEN [Attribute -X] = 'B' THEN B ELSE NULL END AS 'B', CASE WHEN [Attribute -X] = 'C' THEN C ELSE NULL END AS 'C', [Attribute -Z] AS 'ATTR-Z' FROM yourtable
ALTER TABLE LinkTable ADD CONSTRAINT LinkTable_Unique UNIQUE (TableA_id, TableB_id);
SELECT name,SUM(price) as price FROM table GROUP BY name HAVING SUM(price) = 0
SELECT Table1.ID, COALESCE(Table2.Alias, Table1.Name) AS Name, Table1.Location FROM Table1 LEFT OUTER JOIN Table2 ON Table1.ID = Table2.ID AND Table2.AliasType = 2
with temp as ( select 'Number' Name , '123-456,654-321,098-765' AS val from dual ) select distinct t.name, trim(regexp_substr(t.val, '[^,]+', 1, levels.column_value)) as val from temp t, table(cast(multiset(select level from dual connect by level <= length ( regexp_replace(t.val, '[^,]+')) + 1) as sys.OdciNumberList)) levels order by name;
select COUNT(*) from ( select brandID from MyTable where productID in (1, 2) group by brandID having count(distinct productID) = 2 ) a
Declare @recordsPerPage AS int SELECT @recordsPerPage = 10000; SELECT *, ROW_NUMBER() OVER (PARTITION BY NumeroDeclaration ORDER BY NumeroTransaction ASC) AS Tempnum, NumeroDeclaration+1 AS Page FROM numbered
ORDER BY CASE WHEN field LIKE 'VA%' THEN 0 WHEN field LIKE '%VA%' THEN 1 ELSE 2 END
from u in context.aspnet_Users join m in context.aspnet_Membership on u.UserId equals m.UserId select new { u.UserName, m.IsApproved};
SELECT CITY, SUM(MECHANIC.SALARY) AS COMBINED_SALARY FROM MECHANIC join AIRPORT on MECHANIC.AIRNAME=AIRPORT.AIRNAME WHERE AIRPORT.STATE = 'California' GROUP BY AIRPORT.CITY
SELECT o.order_number, o.item_quantity, p.price,(o.item_quantity * p.price) AS subtotal, SUM( o.item_quantity * p.price) AS total FROM order AS o LEFT JOIN product AS p ON product_number = idproduct_detail;
SELECT playerID, COUNT(playerID) AS Total FROM ( SELECT playerID FROM scores WHERE score1='10' UNION ALL SELECT playerID FROM scores WHERE score2='10' UNION ALL SELECT playerID FROM scores WHERE score3='10' UNION ALL SELECT playerID FROM scores WHERE score4='10' UNION ALL SELECT playerID FROM scores WHERE score5='10' ) AS thetable GROUP BY playerID
select id from user where id IN (2, 3, 1) ORDER BY FIELD(id, 2, 3, 1);
select substr(col, 1, instr(col, '-') - 1) || substr(col, instr(col, '-'), 7) as result from tbl
val invoker = q.invoker val statement = q.selectStatement
mysql_query(" SELECT * FROM `table` WHERE `column` LIKE '%{$needle}%' ");
if @datafield = 1 set ColumnA.table2=1 else if @datafield = 2 AND @datafield2 = 3 set ColumnA.table2= 0 else return (SELECT ColumnA.table2 FROM table1 INNER JOIN table2 on table1.id and table2.id Where @datafield3 = 0)
select c.Cid , с.name , group_concat(ci.ImgId separator ',') from customer c join CustomerImage ci on c.Cid = ci.Cid group by c.Cid , c.name
CREATE TRIGGER batterystat_trigger AFTER INSERT ON batterystat BEGIN DELETE FROM batterystat where _id NOT IN (SELECT _id from batterystat ORDER BY insertion_date DESC LIMIT 100) END
SELECT t1.Project-ID, t1.Name FROM Project AS t1 JOIN ( SELECT Project-ID FROM Works_on GROUP BY Project-ID HAVING COUNT(*) >= 3 ) AS t2 ON t1.Project-ID = t2.Project-ID
SELECT col1,col2,.. FROM pages WHERE slug = 'about' UNION SELECT col1,col2,.. FROM posts WHERE slug = 'about'
BEGIN TRANSACTION INSERT INTO msgs (publisherid, msg) VALUES(@publisherid, @msg) SET @messageid = SCOPE_IDENTITY() INSERT INTO msqqueue (recipientid, messageid, status) SELECT subscriberid, @messageid, 0 -- unread FROM subscribers WHERE subscribers.publisherid = @publisherid COMMIT TRANSACTION
select * from t t1 join ( select distinct carBrand from t limit 2 ) s on t1.carBrand = s.carBrand
order by to_number(substr(column, 1, instr(column, ' ')))
declare @s varchar(50)= 'Hell0 c@t$' select @s = REPLACE(@s, CharacterToFilter, ReplacementCharacter) from CharacterMappings select @s
Private Sub CommandButton1_Click() CommandButton1.Caption = "true" DoEvents Application.ScreenUpdating = True For i = 1 To 2 Application.Wait (Now + TimeValue("0:00:1")) Next i CommandButton1.Caption = "False" End Sub
UPDATE comm_call_count c SET c.messageCountFri = 0 WHERE c.messageCountFri IS NULL;
SET mycol = replace( replace(mycol, '{1}', 'myoneval'), '{2}', mytwoval)
SELECT a.ID, a.FirstName, a.Lastname, CASE WHEN COUNT(b.CustID) > 0 THEN 'YES' ELSE 'NO' END AS HasOrders FROM Customer a LEFT JOIN Orders b ON a.ID = b.CustID -- <<== the linking column on both tables GROUP BY a.ID, a.FirstName, a.Lastname
MATCH p=(:Collective:Company)<-[tree*0..4]-(downline:Collective) WHERE ALL(x in relationships(p) WHERE x.activeFrom <= '2015-08-31 23:59:59' AND (x.activeTo IS NULL OR x.activeTo > '2015-08-31 23:59:59')) AND ALL(x in nodes(p) WHERE x.activeFrom <= '2015-08-31 23:59:59' AND (x.activeTo IS NULL OR x.activeTo > '2015-08-31 23:59:59')) RETURN p
INSERT INTO assigned_lists (contact_id, list_id) SELECT contact_id, 24 FROM Contacts WHERE contact_id NOT IN ( SELECT DISTINCT contact_id FROM assigned_lists )
SELECT Table4.company, table1.id, table1.value FROM Table1 INNER JOIN Table1 ON Table2.table1_id = Table1.id INNER JOIN Table3 ON Table3.table2_id = Table2.id INNER JOIN Table4 ON Table4.table3_id = Table3.id
SELECT DISTINCT PRODUCTID FROM [ORDERHISTORY] oh WHERE oh.OrderID IN (SELECT ORDERID FROM ORDERHISTORY WHERE PRODUCTID = 4 )
select leftside.cust, leftside.year, count(survey.cust) from (select * from customers, years) as leftside left join survey on leftside.cust = survey.cust and leftside.year = survey.year group by leftside.cust, leftside.year
select r.*, o.name as owner_name, p.name as reported_name from report r join person o on o.id = r.owner_id join reporteduser ru on ru.report_id = r.id join person p on p.id = ru.user_id where r.active = true
(SELECT id FROM posts ORDER BY rates DESC LIMIT 0,8) UNION ALL (SELECT id FROM posts ORDER BY views DESC LIMIT 0,8)
UPDATE tableName SET ImagePath = REPLACE(ImagePath, '/project/images/', '/projects/project-a/images')
SELECT A, B, C, SWITCH ( A IS NOT NULL, A, B IS NOT NULL, B, C IS NOT NULL, C ) AS Final FROM T;
SELECT id, SUM(score) FROM user group by id having id = 33 or id = 44
UPDATE tableB SET Solution = (SELECT Solution FROM tableA WHERE ID = tableB.ID), SolutionImage = (SELECT Solution FROM tableA WHERE ID = tableB.ID);
update MemberTable set id = concat('00-', case Type when 'A' then '00' when 'B' then '01' when 'C' then '02' end, substr(id, 2))
Company.objects.annotate(total_investments=models.Sum('investments__amount')).filter(raising__gt=models.F('total_investments'))
SELECT tsgroup FROM master GROUP BY tsgroup ORDER BY RIGHT(RTRIM(tsgroup), 3), LEFT(RTRIM(tsgroup), 3)
DELETE c1 FROM tblm_customer c1 , tblm_customer c2 WHERE c1.FirstName = c2.FirstName AND c1.LastName = c2.LastName AND c1.CustomerID < c2.CustomerID
select event_id, max(case when place = 1 then money end) first, max(case when place = 2 then money end) second, max(case when place = 3 then money end) third from prize where event_id is not null group by event_id
CREATE VIEW MyView as select * from users inner join userlevels where users.userlevel = userslevel.permissions;
replace( replace( utl_raw.cast_to_varchar2( UTL_ENCODE.base64_encode(utl_raw.cast_to_raw(...)) ), chr(10), '' ), chr(13), '' )
SELECT p.user, SUM(IF(g.id IS NOT NULL, p.point, 0)) As points, SUM(IF(g.id IS NOT NULL, 1, 0)) Correct, SUM(IF(g.id IS NULL, 1, 0)) Wrong FROM Games g RIGHT JOIN Picks p ON g.id = p.game AND p.team = IF(g.score1 > g.score2 , g.team1, IF(g.score1 < g.score2, g.team2, NULL)) GROUP BY p.user;
SELECT * FROM (SELECT * FROM (SELECT *, IF(@shop = (@shop:=p.shop_id), @id:=@id + 1, @id := 1) temp FROM `product` p, (SELECT @shop:=0, @id:=1) AS A ORDER BY p.shop_id, p.updated DESC) AS B WHERE temp <= 3) AS C INNER JOIN `shop` s ON C.shop_id= s.id;
SELECT Adid, SUM(New = 1) new FROM Message WHERE (MesFrom = 1 OR MesTo = 1) AND (MesFrom = 2 OR MesTo = 2) GROUP BY Adid
SELECT callid, (SELECT calling_pty FROM Log l WHERE Log.callid = l.callid AND segment = (SELECT MIN(segment) FROM Log l2 WHERE l.callid = l2.callid) )[calling_pty], dialed_num, disposition, dispvdn, segment, ucid FROM Log WHERE disposition = 3
select username,default_tablespace from dba_users
SELECT * FROM dbo.mytable t OUTER APPLY ( SELECT * FROM dbo.fnSplit(t.mycolumn) y ) y
ParseCloud.callFunctionInBackground("check_duplicate", new HashMap<String, String>{"period_ref":"001/2015"};, new FunctionCallback<String>() {
Select * from PmtHist Where REPLACE(Confirmation, 'voided', '') in( Select Str1 as ConfirmationCode From @ConfListTable )
--- SSMS --- .... .... set transaction isolation level read committed CPU: 7797 Reads: 338,425 Writes: 1685 Duration: 7,912 --- Application --- .... .... set transaction isolation level serializable CPU: 46,531 Reads: 241,202 Writes: 0 Duration: 46,792
Insert into Table2(stock_name,temple,quantity) SELECT a.stock_name, a.temple, SUM(Case when Type='purchase' then quantity else (quantity*-1) End) AS quantity FROM Table1 a GROUP BY a.stock_name, a.temple
WITH T1 AS ( SELECT id, grp, LAG(grp) OVER (ORDER BY id) IS DISTINCT FROM grp AS changes FROM yourtable ) SELECT id, grp, SUM(changes::int) OVER (ORDER BY id) FROM T1
SELECT u.id, COUNT(p.post_id) AS num_post FROM tbl_user u LEFT JOIN tbl_post p ON u.id = p.user_id GROUP BY u.id
select sum(price) from calci group by (rn- freq)
/*Finds a table across multiple dBs and returns the dB(s) in which the table was found*/ SELECT DISTINCT DB_NAME(database_id) FROM [sys].[dm_db_index_operational_stats](NULL,NULL,NULL,NULL) WHERE OBJECT_NAME(object_id,database_id) = 'table name'
SELECT news.*, votes.vote_type FROM news LEFT OUTER JOIN votes ON votes.`hash` = news.`hash` AND votes.`user_id` = #
SELECT COUNT (enrollment_id) AS enrollments, SUM (CASE WHEN result IS NULL THEN 1 ELSE 0 END) AS null_results, MAX (result) AS highest_result, AVG (result) AS average_result, MIN (period_code) AS earliest_enrollment FROM enrollment
SELECT material_code FROM table1 LEFT JOIN table2 ON table1.material_code = table2.material_code WHERE status = 0
GRANT SELECT ON table1 TO user1;
mysql> SELECT WEEK('2008-02-20'); -> 7 mysql> SELECT WEEK('2008-02-20',0); -> 7 mysql> SELECT WEEK('2008-02-20',1); -> 8 mysql> SELECT WEEK('2008-12-31',1); -> 53
SELECT COUNT(*) AS Total FROM TableName WHERE Date >= DATEADD(HOUR, 9, CONVERT(DATETIME, CONVERT(DATE, GETDATE())))
set timing on; select * from table_name where customer_id=1;
SELECT p1.nr_pickl, sum(IIF(LEFT(p1.platz_von, 2) = "03", 1, 0) as Gang_03, sum(IIF(LEFT(p1.platz_von, 2) = "04", 1, 0) as Gang_04, sum(IIF(LEFT(p1.platz_von, 2) = "05", 1, 0) as Gang_05 FROM Pickauf_0110 as p1 GROUP BY p1.nr_pickl
with aaa as ( SELECT ROW_NUMBER() OVER (ORDER BY score ) AS 'ROW_NUMBER', score, user_id ) select * from aaa where ROW_NUMBER between (select ROW_NUMBER-2 from aaa where user_id = 25) AND (select ROW_NUMBER+2 from aaa where user_id = 25)
Select ( (SELECT COUNT(social_users.id) FROM social_users LEFT JOIN socials ON social_users.id = socials.social_user_id WHERE socials.social_user_id IS NULL) / (select count(social_users.id) FROM social_users))*100 as Percentage
SELECT PersonId FROM TheTable GROUP BY PersonId HAVING COUNT(PlaceName) = 0
insert into table1 (col1,col2,col3) select 11, 23, VAL from table2 where id='4'
SELECT id FROM mytable GROUP BY Id HAVING COUNT(*) = (SELECT COUNT(DISTINCT date) FROM mytable)
SELECT TO_DATE('MAR 2012', 'MON YYYY') dt FROM dual;
select empcode, coode, finyear, wef, max(cl_opn_bal) as cl_open_bal, . . . from table t group by empcode, coode, finyear, wef;
$this->db->like('title', $query); $res = $this->db->get('film');
SQL> with tbl(str) as ( select 'Owens 1245 Coning COM CO LTD. INC CORP. INC' from dual ) select str original, '[' || trim(regexp_replace(upper(str), '(\d+|CO|LTD|INC|CORP)([[:punct:]])?( |$)', '')) || ']' CLEARTEXT from tbl; ORIGINAL ----------------------------------------- CLEARTEXT -------------------------------------------------------------------------------- Owens 1245 Coning COM CO LTD. INC CORP. INC [OWENS CONING COM] SQL>
select o.id, b.book as bookId from orders o inner join books b on o.bookid = b.bookid where o.id = 1;
SELECT Posts.id, Comments.id FROM Posts LEFT OUTER JOIN Comments on (Posts.id = Comments.refId) WHERE Comments.create IS NULL OR ( Comments.create = (SELECT create FROM Comments WHERE refID = Posts.id ORDER BY create DESC LIMIT 1) ) /* add ORDER BY &c to taste;-) */
SELECT tor.road_name, SUM(population) as popn FROM Towns t JOIN TownsOnRoads tor ON t.town_name = tor.town_name group by tor.road_name
grant select on table to public;
SELECT users.username, SUM(lists.lists_var), FROM users INNER JOIN lists ON users.userid = lists.user_id INNER JOIN (SELECT list_id, SUM(multiplier) mult_total FROM details GROUP BY list_id) d ON d.list_id = lists.list_id and d.mult_total > 3 GROUP BY users.username
with prodref as ( select 'product1' as prod union all select 'product2' as prod union all select 'product5' as prod union all select 'product7' as prod ) select p.prod, count(*) from prodref pr left outer join product p on ','+p.col+',' like '%,'+pr.prod+',%' group by p.prod;
select name from sysobjects where type='U'
select datepart(hour,myDate), SUM(Offered) from myTable group by datepart(hour,myDate), dateadd(d, 0, datediff(d, 0, myDate))
select * from ( select tb.*,rownum t_count from table_name tb ) ss where ss.t_count >= @min_value and ss.t_count <= @max_value
select id from your_table where typeid in (1,2) group by id having count(distinct typeid) = 2
variable := 'trigger_name'; EXECUTE format('DROP TRIGGER %I ON my_table', variable);
select concat_ws(' ', substring_index(field, ' ', 3), replace(substring_index(substring_index(field, ' ', 7), ' ', -4), -1, 0), substring_index(field, ' ', -3) )
SELECT users.*, codes.code, Sum(users.downloads) AS _downloadscount FROM users LEFT JOIN (codes INNER JOIN codes_users ON codes.id = codes_users.code_id) ON users.id = codes_users.user_id GROUP BY users.id;
class MyModel(models.Model): a = models.IntegerField() b = models.IntegerField() c = models.IntegerField() def save(self): try: # Check values in model here except: raise ValueError("Cannot save more than 3 Cs with an A") super(MyModel, self).save(*args, **kwargs)
SELECT i.equip_pk, i.request_pk, NVL(MY_ALIAS.EQUIP_ALIAS_ID, 'Nothing' FROM tableOne i LEFT OUTER JOIN table2 MY_ALIAS ON (i.EQUIP_PK = MY_ALIAS.EQUIP_PK) WHERE i.request_pk=:requestPk
select * from (select ticket_number, route_id from ticket_header union select ticket_number, route_id from ticket_detail ) t where route_id > (select route_id from ticket_detail where id = 4)
insert into docuse (docid,cnt, mindate, maxdate, name ) SELECT x.documenttypeID, x.cnt, x.mi, x.mx, ( SELECT DocName d from documenttype where d.documenttypeid = x.documenttypeID) FROM ( select documenttypeID, count(documenttypeID) as cnt, min(Creation_Date) as mi, max(Creation_Date) as mx from AllDocs a group by documenttype ) x;
SELECT A.category_id, A.name AS category, B.name AS parent FROM "Category" A JOIN "Category" B ON A.parent_cat=B.category_id WHERE A.parent_cat IS NOT NULL ORDER BY A.name
select u.id from users u left outer join actions a on a.user_id = u.id where a.user_id is null
UPDATE tblMain SET [Name] = "John Doe", [DATE] = #9/30/2009#, [TYPE] = "TypeA" WHERE RecordID = 958;
delete from table where table.ID NOT IN ( select MAX(ID) from table group by customer_id, your_function(data) )
SELECT r.* FROM Roles INNER JOIN UserRoles ur ON r.Id = ur.RoleId WHERE ur.UserId = @userId OR @userId = 1
DECLARE @UserIDs TABLE (ID nvarchar(50)) INSERT INTO @UserIDs VALUES ('userOne'), ('userTwo') SELECT ui.userID FROM userInfo ui JOIN userAuthentication ua ON ui.userinfoseqid = ua.userinfoseqid WHERE ui.userID IN (SELECT ID FROM @UserIDs)
WITH MEMBER [LTII_NIRS_E] AS 'Sum({[DIM TIME].[YEAR - QUARTER - MONTH].currentmember.firstchild.lag(3): [DIM TIME].[YEAR - QUARTER - MONTH].currentmember.firstchild}, [Measures].[LTII NIRS E])' SELECT [LTII_NIRS_E] ON COLUMNS, { [DIM TIME].[YEAR - QUARTER - MONTH].[2006], [DIM TIME].[YEAR - QUARTER - MONTH].[2007], [DIM TIME].[YEAR - QUARTER - MONTH].[2008]} on ROWS FROM [NH_INCID] WHERE [Business Component].[Region].[Novelis North America]
select Time, max(Value1) as value1, max(Value2) as value2, max(Value3) as value3, max(Value4) as value4 from MyTable group by Time
SELECT * FROM Table 1 JOIN Table2 2 on 2.ID = Table1.ID UNION SELECT * FROM Table 1 JOIN Table2 22 on 22.ParentID = Table1.ID
select * from (select col1, SUM(col2) from table1 group by col1) t1 INNER JOIN (select col1, col2 from table2) t2 ON t1.col1 = t2.col1 where t1.col2 <> t2.col2
select PID, count(*) as PIDCount from sales group by PID;
Create view YOURviewName as select a.aid, a.name as aname, u.aid as uid, u.name as uname, u.description as udescription from a inner join u on a.aid = u.aid
select monthname(DATE_ARRIVAL),sum(TOTAL_EARN) from RESERVATIONS where DATE_ARRIVAL between '2010-01-01' and '2010-12-31 23:59:59' group by monthname(DATE_ARRIVAL);
select name, sum(case when year = 2012 then revenue else 0 end) revenue2012, sum(case when year = 2012 then qty else 0 end) qty2012, sum(case when year = 2013 then revenue else 0 end) revenue2013, sum(case when year = 2013 then qty else 0 end) qty2013 from yourtable group by name
select mfg_name, code, case when sum(fail) > 0 then 'FAIL' else 'PASS' end as result from tbl group by mfg_name, code
SELECT @Average = case when convert(int, @hour) <> 0 then convert(varchar(9), convert(int, @hour)) + ':' else '' end + right('00' + convert(decimal(10,0), convert(decimal(18,2), @Mns)), 2) + ':' + right('00' + CONVERT(decimal(10,0), convert(varchar(10), @second)), 6)
SELECT count(id), state FROM table_name WHERE id IN (SELECT id FROM table_name GROUP BY id having count(id) = 1) and state = 'Alabama' GROUP BY state
select ... ,[Date] ,CASE WHEN YEAR([Date]) = YEAR(GETDATE()) - 1 THEN 1 ELSE 0 END as [IsLastYear] into #myTempTbl from RowsDocs
update category cat inner join old on cat.book_id = old.id inner join new on old.isbn = new.isbn set cat.book_id = new.id
SELECT date, SUM(answer-1) * 100 / COUNT(answer) as NPS FROM yourTable GROUP BY date
SELECT ROWID,ROWNUM,name from ITEMS;
select * from YourTable yt1 where 5 < ( select count(*) from YourTable yt2 where yt2.thread_id = yt1.thread_id and yt2.msg_id < yt1.thread_id )
SELECT a.id FROM a LEFT JOIN b ON a.id = b.id WHERE b.id IS NULL SELECT b.id FROM b LEFT JOIN a ON b.id = a.id WHERE a.id IS NULL
SELECT DISTINCT concat(c.fname," ", c.lname) AS fullname, s.description FROM customer c INNER JOIN orders o ON c.customer_num = o.customer_num INNER JOIN items i ON o.order_num = i.order_num INNER JOIN stock s on s.stock_num = i.stock_num WHERE i.manu_code = 'ANZ'
SELECT a.label_a FROM TABLE_A a UNION ALL SELECT b.label_b FROM TABLE_B b
select s.beginRange, s.endRange, u.id from SalaryRange s inner join UserInfo u on u.salary > s.beginRange AND u.salary < s.endRange
WITH X (ProductId, CategoryId) AS ( SELECT ProductId, CategoryId FROM #ProductCategory UNION ALL SELECT X.ProductId, C.ParentCategoryId FROM X INNER JOIN #Category C ON X.CategoryId = C.CategoryId ) SELECT ProductId, CategoryId FROM X ORDER BY CategoryId, ProductId
select empid,sessionid, min(created),max(created), datediff(mi,min(created),max(created)) from a group by empid,sessionid
SELECT * FROM stations WHERE station_group_id = 1 ORDER BY if(line_id in('2','X','Y','Z'),0,1)
select e.* from employees e left join managers m on e.emp_id = m.emp_id where m.emp_id is null
for i=0 to fields_changed.count { sql = sql + fields_changed(i).field_name + " = " + fields_changed(i).new_value if i < fields_changed.count { sql = sql + ", " } } sql = sql + " WHERE ..."
newThread.conversation.add(savedMessage.id);
SELECT m.maxdate, t.*, u.* FROM ( SELECT topic_id, MAX(messages.date) AS maxdate FROM messages GROUP BY topic_id ) AS m INNER JOIN topics t ON t.id = m.topic_id INNER JOIN users u ON t.user_id = u.id WHERE t.forum_id = " . $forumid . " ORDER BY m.maxdate DESC
;WITH n(n) AS ( SELECT TOP (14) ROW_NUMBER() OVER (ORDER BY [object_id]) FROM sys.objects ORDER BY [object_id] ) SELECT Dates = DATEADD(DAY, -n, DATEDIFF(DAY, 0, GETDATE())) FROM n ORDER BY n;
SELECT SERVERPROPERTY('Edition');
SELECT CASE WHEN edition = 'STAN' THEN CASE WHEN has9 = 1 THEN '9' WHEN has8 = 1 THEN '8' WHEN has7 = 1 THEN '7' WHEN hasOLD = 1 THEN 'OLD' END WHEN edition = 'SUI' THEN CASE WHEN has9 = 1 THEN 'S9' WHEN has8 = 1 THEN 'S8' END ELSE 'S7' END AS version
alter table user_movies add primary key (user_id, movie_id) partition by hash(user_id) partitions 100;
SELECT CASE WHEN Date1 >= Date2 AND Date1 >= Date3 THEN Date1 WHEN Date2 >= Date1 AND Date2 >= Date3 THEN Date2 WHEN Date3 >= Date1 AND Date3 >= Date2 THEN Date3 ELSE Date1 END AS MostRecentDate
$info =& JFactory::getApplication(); $info->getCfg('host'); $info->getCfg('user'); $info->getCfg('db'); // defined in libraries/joomla/application/application.php (380) function getCfg( $varname ) { $config =& JFactory::getConfig(); return $config->getValue('config.' . $varname); }
select cast(round(@num/@vat,3) as decimal(18,2))
select * from table1 where ... /* query 1 conditions */ union all select * from table2 where ... /* query 2 conditions */ and not exists (select 1 from table1 where ... /* query 1 conditions */)
UPDATE t SET id = t2.id FROM table1 t JOIN table2 t2 ON t.foo = t2.foo AND t.bar = t2.bar AND t.buzz = t2.buzz
Select CAST(CONCAT(YEAR(`timestamp`),'-',MONTH(`timestamp)) AS CHAR) as `month`, COUNT(*) as `hits` FROM db.table WHERE `username`='<the_username>' GROUP BY `month`;
BEFORE or AFTER
SELECT first.name, ( SELECT COUNT(*) FROM second WHERE second.first_id=first.id ) as entries FROM first
SELECT DISTINCT a.idPrimary, a.idPerson, a.idSchool FROM MyTable a LEFT OUTER JOIN MyTable b ON a.idPerson = b.idPerson AND b.idSchool IN (2,3) WHERE a.idSchool = 6 AND b.idSchool IS NULL
SELECT a.Article_ID , c.value , a.published FROM art_lang a LEFT JOIN contents c ON c.article_id = a.article_id AND c.content_type_id = 9 AND c.content_field_id = 2 ORDER BY c.value IS NULL, c.value
SELECT CASE WHEN min(score) <= 150 THEN '*-150' WHEN min(score) <= 350 THEN '151-350' ELSE '350-*' END AS scorerange, #A comma is needed here right after scorerange count(*) FROM scores GROUP BY score <= 150, score <= 350;
SELECT Team.teamID FROM Team WHERE (@teamid = 0 AND Team.teamID > 0) OR (@teamid <> 0 AND Team.teamID = @teamid)
SELECT t1.r1, t1.n, t2.r2, CASE WHEN t1.r1 = t2.r2 THEN t2.m ELSE 0 END AS m FROM t1 CROSS JOIN t2 ORDER BY t1.r1, t2.r2;
select WorkerID, TaskID FROM ( SELECT Workers.WorkerID, Tasks.TaskID, row_number() over (partition by Workers.WorkerID order by Tasks.TaskID) AS rn FROM Workers LEFT JOIN Tasks ON Workers.WorkerID = Tasks.WorkerID WHERE Workers.WorkerName LIKE '%Browne%' ) where rn <= 4
SELECT DISTINCT id, crm2.user_id, name, admin, FROM ChatRoomMap crm1 JOIN ChatRoom ON crm1.chatroom_id = ChatRoom.id LEFT JOIN ChatRoomMap crm2 ON crm2.chatroom_id = crm1.chatroom_id AND crm2.user_id != crm1.user_id -- only other users WHERE crm1.user_id = $1
select dbms_metadata.get_ddl('INDEX','DEPT_IDX','SCOTT') from dual;
SELECT JNumber, (SELECT SUM(Quantity * Weight) / SUM(Quantitiy) FROM SPJ JOIN Part USING (PNumber) WHERE JNumber = Project.JNumber ) AS AvgParts FROM Project
select ein.edl_EmployeeID, ein.edl_LogDate, ein.edl_LogTime as [Out], eout.edl_LogTime [Out] from T_EmployeeDTRLogs ein inner join T_EmployeeDTRLogs eout on ein.edl_EmployeeID = eout.edl_EmployeeID and ein.edl_LogDate = eout.edl_LogDate where ein.edl_LogType = 'IN' and eout.edl_LogType = 'OUT'
select ... from ... where to_char(date_time,'HH24') = '17'
SELECT p.name, p.address, p.city, sum(v.price) as total FROM VISIT v JOIN PATIENT p ON p.Pat_Number = v.Pat_Number WHERE Date(Visit_Date) < '01/01/2012' GROUP BY p.name, p.address, p.city, p.Pat_Number, v.Pat_Number HAVING SUM(v.price) > 1000 ORDER BY total DESC;
SELECT tb1.booking_ref, tb1.investor, tb2.cost FROM tb1 left join tb2 on tb1.booking_ref = tb2.booking_ref and tb1.investor = tb2.investor WHERE tb1.investor = ''12345''
select count(case when T.Name = 0 then 1 end) as NameCount, count(case when T.Dept = 0 then 1 end) as DeptCount, count(case when T.Project = 0 then 1 end) as ProjectCount from YourTable as T
row_number() over (order by YEAR(TourTbl.DT_Started) asc, MONTH(TourTbl.DT_Started) asc ) + min(YEAR(TourTbl.DT_Started)*12+MONTH(TourTbl.DT_Started)-1) OVER () % 12 as Row
SELECT TO_Char(ordered_date,'DD-MON-YYYY') as ordered_date, order_number, customer_name FROM order_tbl WHERE NVL(:P_ORDER_NUMBER, order_number) = order_number AND ordered_date between NVL(TO_DATE(:P_FROM_DATE,'DD-MON-YYYY'),TO_DATE('01-MAR-1900','DD-MON-YYYY')) and NVL(to_date(:P_TO_DATE,'DD-MON-YYYY'),TO_DATE('31-DEC-2100','DD-MON-YYYY')) AND NVL(:P_CUSTOMER_NAME, customer_name) = customer_name
select * from event_detl where START_DT between to_timestamp('02-07-2014 14:24:03', 'dd-mm-yyyy hh24:mi:ss') and to_timestamp('02-07-2014 14:24:05', 'dd-mm-yyyy hh24:mi:ss'
select empid, employeename from Employee where deptid in ( select deptid from Employee group by deptid having count(*) > 3 )
SELECT * FROM Employee WHERE Employee.Id = X'a8828ddfef224d36935a1c66ae86ebb3';
select (case when TransDate < '2012-06-30' then TransAmt else 0 end) . . .
order by (case when c2 = 11 then 1 else 0 end) + (case when c3 = 15 then 1 else 0 end) + (case when c7 = false then 1 else 0 end) desc
array('name' => 'Smith')
;WITH CTE as (SELECT row_number() over (order by pk) rn, items FROM dbo.TEST) SELECT @Name = Lower(items) FROM CTE where rn = @i
SELECT JobNo FROM MyTable GROUP BY JobNo HAVING SUM(IIF(Status = 'Delivered', 0 , 1)) = 0
CREATE TABLE ADDRESSES ( addressID VARCHAR2 (15 CHAR) NOT NULL , address_line1 VARCHAR2 (30 CHAR) NOT NULL , address_line2 VARCHAR2 (30 CHAR) , city VARCHAR2 (20 CHAR) NOT NULL , post_code VARCHAR2 (10 CHAR) NOT NULL , OWNERS_ownerID VARCHAR2 (15 CHAR) NOT NULL ) ; ALTER TABLE ADDRESSES ADD CONSTRAINT ADDRESSES_PK PRIMARY KEY ( addressID ) ;
SELECT CASE WHEN CHARINDEX('333',[ACType Iata]) > 0 THEN 'Big AC' WHEN CHARINDEX('340',[ACType Iata]) > 0 THEN 'Big AC' WHEN CHARINDEX('332',[ACType Iata]) > 0 THEN 'Big AC' ELSE '' END AS MyColumn FROM [MyTable]
;WITH CTE AS ( SELECT *, ROW_NUMBER() OVER(PARTITION BY a ORDER BY b) Corr FROM my_table ) SELECT * FROM CTE WHERE Corr = 1
select QUIZ.quiz_name ,QUESTION.question_name ,ANSWER.answer_name ,MCQ_ANSWER.mcq_answer_name from QUIZ left join QUESTION on QUESTION.quiz_id_fk = QUIZ.quiz_id left join ANSWER on ANSWER.question_id_fk = QUESTION.question_id left join MCQ_ANSWER on MCQ_ANSWER.question_id_fk = QUESTION.question_id //where QUIZ.quiz_id = ...
update Transaction set total = ( select SUM(sale.quantity * Item.price) from Sale inner join Item on Sale.I_ID = Item.I_ID where Sale.T_ID = Transaction.T_ID )
$html = str_replace('{WIDGET_FORM}', $form->__toString(), $html);
UPDATE someTable SET Due_Date = DATEADD(day,1,Created_Date) WHERE ...
SELECT ararnr, ararir, pyarnr, pypykd, pyarpy FROM ar left join py on ar.ararnr = py.pyarnr and py.pypykd ='C' WHERE ar.ararnr in ('1002032', '1904140', . . .) ORDER BY case when ararnr='1002032' then 1 ararnr ='1904140' then 2 etc... end";
int habitId = cursor.getInt(cursor.getColumnIndexOrThrow(GoalTable.COLUMN_HABIT_ID)); for(int pos = mAdapter.getCount(); pos >= 0; pos--) { if(mAdapter.getItemId(pos) == habitId) { mHabitSelect.setSelection(pos); break; } }
SELECT table2.store, table1.* FROM table1 INNER JOIN table2 ON table2.id_product=table1.id_product WHERE table1.id_product='p1' INTO OUTFILE 'file_name'
CREATE TABLE Categories ( Code CHAR(4) NOT NULL PRIMARY KEY, CategoryName VARCHAR(63) NOT NULL UNIQUE ); CREATE TABLE Courses ( CourseID INT NOT NULL PRIMARY KEY, BookID INT NOT NULL, CatCode CHAR(4) NOT NULL, CourseNum CHAR(3) NOT NULL, CourseSec CHAR(1) NOT NULL, ); ALTER TABLE Courses ADD FOREIGN KEY (Course) REFERENCES Categories(Code) ON DELETE CASCADE;
SELECT CASE WHEN F2 = '0' THEN '(No Phone Number)' ELSE F2 END AS Phone ...
SELECT ROW_NUMBER() OVER(PARTITION BY [Group] ORDER BY Record) AS GroupSequence1, RANK() OVER(PARTITION BY [Group] ORDER BY Record) AS GroupSequence2, DENSE_RANK() OVER(PARTITION BY [Group] ORDER BY Record) AS GroupSequence3, Table1.Group, Table1.Record FROM Table1
SELECT search_location, SUM(num_searches) as total_searches FROM my_table GROUP BY search_location ORDER BY total_searches DESC LIMIT 100;
INSERT INTO @CID select * from ( select 'Temp' + convert(char(1), row_number() over (order by (select 0))) as columnName, INPUT_PARM_VAL_TX as Value from TBL_RPT_JOB_INPUT_PARAM where USER_REQ_JOB_ID = @ID ) d pivot ( max(value) for columnname in (Temp1, Temp2, Temp3, Temp4, Temp5) ) piv;
SELECT @testValue = (SELECT 'NOTUSED' where 1 > 2);
DECLARE @tmpTable TABLE (ID UNIQUEIDENTIFIER) INSERT INTO @tmpTable EXEC dbo.up_proc2 ..........
... WHERE m.definition Like '%\[ABD\]%' ESCAPE '\'
SELECT to_date(TO_CHAR(sysdate, 'DD/MM/YY HH:MI:SS AM'),'DD/MM/YYYY HH:MI:SS AM') FROM dual;
FilmRole( FilmId INT, RoleId INT) these 2 columns would make your PK and they are also FK's to their FilmPeople (FilmId INT, PeopleId INT) respective source tables. FilmUsers( FilmId INT, UserId INT)
SELECT PortfolioBaseCode, COUNT( portfoliobasecode) AS Pcount FROM APXFirm.AdvApp.vPerformance WHERE rowtypecode = 'd' AND DetailKeyCode is NOT NULL AND NetOrGrossCode = 'n' AND DetailKeyCode <> 'us' AND PortfolioBaseCode IN ('test', 'test2') GROUP BY PortfolioBaseCode HAVING SUM(marketvalue) > 1;
SELECT u.userID, u.username, u.userAvatar, u.accessLevel, al.titleColor FROM CMS_AccessLevels al INNER JOIN CMS_Users u ON u.accessLevel = al.accessLevel WHERE u.userID = 3
SELECT numberOfThings, TypeOfThings FROM thingsTable tt UNION ALL SELECT 24, 'Fake Type of Things'
select * from ( select salary-2000 as deducted_salary , * from EmployeeDetails ) SubQueryAlias where Deductedsalary > 5000
SELECT `typeID`, AVG(IF(`bid`, `price`, 0)) AS `average_buy_price`, AVG(IF(`bid`, 0, `price`)) AS `average_sell_price`, AVG(IF(`bid`, `price`, 0)) - AVG(IF(`bid`, 0, `price`)) AS `difference` FROM `orders` GROUP BY `typeID` LIMIT 100 ORDER BY `difference` DESC;
SELECT * FROM mytable m WHERE m.id = (SELECT MAX(m2.id) FROM mytable m2 WHERE m2.ID < 2);
SELECT a.CSTId, sum(CASE WHEN Processed = 'Yes' THEN 1 ELSE 0 END) as num_yes, count(cst_id) as num_total FROM #temp a INNER JOIN cst b ON a.caseSeveranceID = b.CaseSeveranceID GROUP BY a.CSTId
SELECT * FROM table1 JOIN table2 ON table1.champs = table2.champs JOIN table3 ON table2.champs = table3.champs
SELECT DISTINCT a.username as q2, b.username as q3 FROM dbo.tablea as a FULL OUTER JOIN dbo.tableb as b ON a.username = b.username AND (a.appname = b.appname) WHERE a.appname = 'app1' OR b.appname = 'app1'; -- or SELECT DISTINCT a.username as q2, b.username as q3 FROM dbo.tablea as a FULL OUTER JOIN dbo.tableb as b ON a.username = b.username AND (a.appname = b.appname) WHERE 'app1' IN (a.appname, b.appname);
WITH CTE AS( SELECT n.*, NameOcc = ROW_NUMBER() OVER (PARTITION BY Name, City ORDER BY Name, City, Day) FROM dbo.Names n ) SELECT * FROM CTE
SELECT a.field_1, a.field_2, b.field_3, b.field_4 FROM tbl_a AS a, tbl_b AS b WHERE a.field_1 = b.field_3 AND ( CASE WHEN a.field_1 IN (1,2,3,4) THEN CASE WHEN A.FIELD_DATE = NOW() THEN 1 ELSE 0 END ELSE 1 END) = 1
WITH DistinctCounts AS ( SELECT invoiceNumber, COUNT(DISTINCT itemNumber) AS distinctItems FROM transactions GROUP BY invoiceNumber ) SELECT AVG(distinctItems) FROM DistinctCounts
select CURRENCY, RATE, XDATE, lead(XDATE) over(partition by CURRENCY order by XDATE) from CURRENCY_RATE ;
select city, state, substring_index(group_concat(stores SEPARATOR ', '), ', ', 2) stores from yt -- ^ number of values to limit group by city, state;
select length(' '::character(1)); length -------- 0 (1 row)
=DLookUp("[LastName]", "Employees", "[EmployeeID] = 7")
select location, sum(qty) as total from (select case when Location in ('Location A','Location B') then Location else 'Container' end as location, qty from tablename) group by location
SELECT TOP 1 o.CustomerID ,ups.UPSAccount as UPSAccount1 ,ups.CID as UPSCID ,ups.Address as UPSAddress1 ,ups.DesiredService UPSDesiredService1 ,ups.Address2 as UPSAddress2 ,ups.Suit as UPSSuite ,ups.city as UPSCity ,ups.Country as UPSCountry ,ups.SP as UPSState ,ups.Zip as UPSZip FROM dbo.orders o LEFT OUTER JOIN UPSAccountInfo ups ON ups.cid = o.customerid WHERE o.OrderNumber = @ordernum ORDER BY ups.date DESC
var typed = from row in cxt.SomeFunction(123) select new MyType {Id = row.Id, Name = row.Name, ...}
SELECT (33.333 / 2) FROM dual; 16,6665 SELECT (16.6665 * 2) FROM dual; 33,333
SELECT ca.id_imdb AS IMDb_ID , caat.id_collection AS collection_ID , ca.data_name AS actors_name FROM collection_actors AS ca INNER JOIN collection_actors_assignedto AS caat ON ca.id_imdb = caat.id_collection WHERE caat.id_collection = 'tt1104001'
WITH NumberedMyTable AS ( SELECT Id, Score, ROW_NUMBER() OVER (ORDER BY score) AS RowNumber FROM MyTable ) SELECT SUM(score)/COUNT(*) FROM NumberedMyTable WHERE RowNumber BETWEEN @From AND @To
SELECT DATE_FORMAT(t1.LogDate, '%d/%c/%Y') AS LogDate, t1.EmployeeName , t1.LogTime AS Login , ( SELECT MIN(t2.LogTime) FROM myTable t2 WHERE t2.LogType = 'LOGOUT' AND t2.LogDate = t1.LogDate AND t2.EmployeeName = t1.EmployeeName AND t2.LogTime > t1.LogTime ) AS Logout FROM myTable t1 WHERE t1.LogType = 'LOGIN'
SELECT foo1, foo2, foo3, field_etc, max(Score) MaxScore from (select foo1, foo2, foo3, field_etc, Score1, Score2, Score3, Score4, Score5 from SomeTable) base unpivot (Score for WhichScore in (Score1, Score2, Score3, Score4, Score5)) upvt group by foo1, foo2, foo3, field_etc
select p.post_id,u.fname,u.lname, case when sum(upvotes)+sum(downvotes) is null then 0 else sum(upvotes)+sum(downvotes) end as vote from post p left join ( SELECT post_id, CASE WHEN vote_type = 'upvote' then 1 ELSE 0 END as "upvotes", CASE WHEN vote_type = 'downvote' then -1 ELSE 0 END as "downvotes" FROM vote ) t on p.post_id = t.post_id left join user_info u on p.user_id = u.id group by p.post_id order by vote desc, sum(upvotes) desc, sum(downvotes) desc limit 10;
... Loop BEGIN UTL_FILE.GET_LINE(F1,V1); IF (TRIM(V1) is not null) AND ((TRIM(V1) <> CHR(10)) OR (TRIM(V1) <> CHR(13))) THEN dbms_output.put_line(V1); END IF; ...
select CustomerId, VoucherId, MinimumSpendAmount, ValidFromDate, ValidToDate from dbo.discountvoucher where ValidFromDate <= 15/11/2013 and ValidToDate >= 15/11/2013 and CustomerId in (select CustomerId from dbo.discountvoucher where ValidFromDate <= 15/11/2013 and ValidToDate >= 15/11/2013 group by CustomerId having sum(case when MinimumSpendAmount > 0 then 1 else 0 end) = 1 and sum(case when MinimumSpendAmount = 0 then 1 else 0 end) = 1 ) order by CustomerId
CREATE TABLE [dbo].[Categories] ( [Id] INT NOT NULL PRIMARY KEY IDENTITY, [Name] NVARCHAR(50) NOT NULL, [ParentId] INT NOT NULL , ---llow NULL FK_Parent for top-level CONSTRAINT [FK_Parent] FOREIGN KEY ([ParentId]) REFERENCES [Categories]([Id]) )
select a.nid ,a.revID ,a.version from `revision_history` a JOIN (SELECT nid, MAX(version) as version FROM `revision_history` GROUP BY nid)b ON a.nid=b.nid AND a.version=b.version
SELECT * FROM [Live].[Test] WHERE [_fk_RoadMapKey] = @_fk_RoadMapKey SELECT S.* FROM [Live].[SetofTestGrades] S INNER JOIN [Live].[Test] T ON S.[_fk_TestKey] = T.[TestKey] WHERE t.[_fk_RoadMapKey] = @_fk_RoadMapKey
create table #a ( X varbinary(24) null ) create table #k ( K varbinary(24) null ) select X,K abs(substring(X,1,8)&cast(substring(K,1,8) as bigint)) +abs(substring(X,9,8)&cast(substring(K,9,8) as bigint)) +abs(substring(X,17,8)&cast(substring(K,17,8) as bigint)) as result from #a,#K
select * from ( select *, rn = ROW_NUMBER() over (partition by empnumber, year(createddate), month(createddate) order by createddate desc) from t ) x where rn = 1
SELECT a_id, j.b_id, k.b_id FROM a LEFT JOIN b j ON a.x BETWEEN j.n AND j.m LEFT JOIN b k ON a.y BETWEEN k.n AND k.m
WITH MostRecentData AS ( SELECT MAX(dateImported) dateImported, month, year FROM header GROUP BY month, year ) SELECT ... FROM detail d INNER JOIN header h ON h.[key] = d.[key] INNER JOIN MostRecentData r ON h.month = r.month AND h.year = r.year AND h.dateImported = r.dateImporter
SELECT CsvLocation, MAX(ExportedDate) FROM your_table GROUP BY CsvLocation
SELECT isnull(column1, 'abs') + ',' + isnull(column2, 'abc') + ',' + isnull(column3, 'abc') as OneColumnResult from TABLE
SELECT id FROM queryOneTable WHERE id NOT IN ( SELECT id FROM queryTwoTable )
DECLARE CURSOR name_cursor IS SELECT id, name FROM Location WHERE REGEXP_LIKE(name, '[!@#$%^&*=+/<>?|]') FOR UPDATE OF name; BEGIN FOR loc_rec IN name_cursor LOOP DBMS_Output.Put_Line(loc_rec.name); UPDATE Location SET name = 'whatever' WHERE CURRENT OF loc_rec; END LOOP; END;
SELECT id, col1, col2, '12:48' AS tempCol
Select c.Name, Count(Distinct b.UserName) Votes From ballot_table b Right Join candidate c On c.Name = b.Vote Group By c.Name
insert into tableNew select keyC, keyA, keyB, atrC1, atrC2 from tableC c join tableA a on a.atrA1 = c.atrA1 and a.atrA2 = c.atrA2 join tableB b on b.atrB1 = c.atrB1
CREATE TABLE BankAccount ( BankAccountID INT PRIMARY KEY, EmployerCode VARCHAR(20) NOT NULL, Amount MONEY NOT NULL, CONSTRAINT FK_BankAccount_Employer FOREIGN KEY (EmployerCode) REFERENCES Employer )
SELECT a.id, REPLACE(REPLACE(REPLACE( ( SELECT TEXT FROM FlagTable AS b WHERE a.flags & b.flag <> 0 ORDER BY b.text FOR XML Raw ) , '"/><row value="', ', '), '<row value="', ''), '"/>', '') AS 'attributes' FROM FlagMappingTable AS a ORDER BY a.id;
Select * from users u where 'appl1' in (u.app1, u.app2, u.app3, . . . u.app20)
SELECT items.member_id, items.item_id, items.title, photo.photo_id, photo.blob_id, photo.image_width, photo.image_height FROM items JOIN photos on items.item_id = photos.item_id JOIN (SELECT item_id, min(sort_order) as min_sort_order FROM photos GROUP BY item_id) min_photo on photos.item_id=min_photo.item_id and photos.sort_order=min_photo.min_sort_order WHERE items.member_id=1 ORDER BY items.title;
select * from emp_history where emp_no in (select * from table(your pipelined function))
SELECT M.mName, SUM(S.sodSeats) SoldSeats FROM Movie M LEFT JOIN Prog P ON M.movieID = P.movieID LEFT JOIN Show S ON P.showID = S.showID GROUP BY M.mName
SELECT * FROM myTable WHERE ... ORDER BY CASE WHEN myDate IS NULL THEN 1 ELSE 0 END, myDate;
SELECT c.climberid AS oakid, STATS_MODE(r.rating) AS skill FROM climbs c INNER JOIN routes r ON (c.routename = r.name) GROUP BY c.climberid;
WITH C as ( select Tracker.*, ROW_NUMBER() OVER (PARTITION BY GroupId ORDER BY Id) as RN FROM Tracker ) UPDATE CT SET CT.topSort=CTU.topSort, CT.sideSort=CTU.sideSort FROM C as CT JOIN C as CTU ON (CT.rn=CTU.rn) and (CTU.GroupID=1) WHERE CT.GroupID=2
START TRANSACTION; SELECT * FROM table WHERE id = 1 FOR UPDATE; -- lock rows -- Or call this select to insert and lock rows -- INSERT INTO table_output SELECT * FROM table WHERE id = 1 FOR UPDATE; -- Make modifications UPDATE table SET column1 = '111' WHERE id = 1; COMMIT;
select yt.id, yt.tcpAddress, yt.analog, yt.discrete, yt.counter, yt.date from xactions yt inner join ( select tcpAddress, max(date) date from xactions where tcpAddress in ('192.168.1.161', '192.168.1.162') group by tcpAddress ) ss using (tcpAddress, date);
Declare @Start DateTime='02-03-2014 14:25:00' Declare @End DateTime='02-03-2014 20:29:00' SELECT DATEDIFF(s,@Start,@End)/3600.00
SELECT 'True' WHERE ' ' = ''
--Bye Users! FOR i IN (SELECT t.username FROM DBA_USERS t WHERE t.username LIKE 'WIN%') LOOP EXECUTE IMMEDIATE 'drop user '|| i.username ||''; END LOOP;
SELECT * FROM eshop_items AS ite WHERE ItemId IN ( SELECT attItemId FROM eshop_items_attributes WHERE attType=5 AND attValue='20') ORDER BY itemAdded DESC LIMIT 0, 18
SELECT 'ID;LASTNAME;FIRSTNAME;DOB' FROM dummy; OUTPUT TO 'C:\\temp\\sometable.csv' FORMAT ASCII DELIMITED BY ';' QUOTE '';
Begin IF (LTRIM(RTRIM(:field1)) = LTRIM(RTRIM(:field2))) OR (:field1 IS NULL AND :field2 IS NULL) THEN Show_Message('Fields Match'); ELSE Show_Message('Fields DO NOT Match'); END IF; End;
WITH sequenced AS ( SELECT ROW_NUMBER() OVER (PARTITION BY sensor_id, Date_Reading ORDER BY DateTimeStamp DESC) AS daily_sequence_id, * FROM dbo.NewLogTable ) SELECT * FROM sequenced WHERE sensor_id = '12345' AND Date_Reading BETWEEN '2012-08-01' AND '2012-08-31' AND daily_sequence_id = 1
select a.name as name,b.name as represon from table1 a inner join table1 b on a.code=b.rperson
SELECT aisle, bin, ( SELECT MAX(sequence) FROM myTable WHERE t.aisle != aisle and sequence < t.sequence) + ROW_NUMBER() OVER(PARTITION BY aisle ORDER BY sort_order * bin) as newsequence FROM myTable t
select main_cat_id , count(*) as total from category where ( main_cat_id in (select categoryid from products) OR sub_cat_id in (select categoryid from products) ) group by main_cat_id order by total desc
SET @searchthis="lumia"; SELECT CAST((LENGTH(`documents`.`file`) - LENGTH(REPLACE(`documents`.`file`, @searchthis, ""))) / LENGTH(@searchthis) AS UNSIGNED ) AS searchthis_count FROM documents ;
/* SQL 2005/2008 */ USE [master] GO CREATE LOGIN [cactistats] WITH PASSWORD=SomePassword, DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english], CHECK_EXPIRATION=OFF, CHECK_POLICY=OFF GO EXEC sys.sp_addsrvrolemember @loginame = N'cactistats', @rolename = N'processadmin' GO CREATE USER [cactistats] FOR LOGIN [cactistats] WITH DEFAULT_SCHEMA=[dbo] GO GRANT SELECT ON [sys].[dm_os_performance_counters] TO [cactistats] GO /* END */
SELECT ABS(DATEDIFF(HOUR, CA.TheDate, CB.TheDate)) AS HoursBetween FROM dbo.Customers CA INNER JOIN dbo.Customers CB ON CB.Name = CA.Name AND CB.Code = 'B' WHERE CA.Code = 'A'
SELECT S.*, F.id AS Fid FROM messages AS S LEFT JOIN Friends AS F ON s.id = F.UserId
SELECT subject_ID , Date , Test_id , MIN(value) FROM YourTable GROUP BY subject_ID , Date , Test_id
SELECT test_col FROM a WHERE REGEXP_LIKE(test_col, '^[^ ]{2}.*$');
declare @RoleName varchar(50) = 'RoleName' declare @Script varchar(max) = 'CREATE ROLE ' + @RoleName + char(13) select @script = @script + 'GRANT ' + prm.permission_name + ' ON ' + OBJECT_NAME(major_id) + ' TO ' + rol.name + char(13) COLLATE Latin1_General_CI_AS from sys.database_permissions prm join sys.database_principals rol on prm.grantee_principal_id = rol.principal_id where rol.name = @RoleName print @script
SELECT col1, MAX(col2) col2_max FROM Table1 WHERE col3 = 'X' GROUP BY col1 ORDER BY col2_max
SELECT a.* FROM tableName a INNER JOIN ( SELECT AssetID, MAX(TRANSFER_DATE) maxDATE FROM tableName GROUP BY AssetID ) b ON a.AssetID = b.AssetID AND a.Transfer_Date = b.maxDATE
UPDATE c SET NextCallTime = dbo.GetNextCallTime(CallID) OUTPUT deleted.* --Which returns the copy of the row before the change is made FROM (SELECT TOP 1 * FROM Calls ORDER BY NextCallTime) c ;
select * from log l where minute = (select max(x.minute) from log x where x.probeid = l.probeid)
SELECT COUNT(DISTINCT productId) from table_name WHERE keyword='$keyword'
SELECT parent, RANK() OVER (ORDER BY MIN(id)) [ranking] FROM t1 GROUP BY parent ORDER BY [ranking]
var db = Database.Open("SmallBakery"); var count = db.QueryValue("SELECT COUNT(*) FROM Product WHERE Id = @0", 123); if (count > 0) { // the record exists }
SELECT v.id, sum(case when a.atype_ref in (1,3,4) then a.amount else 0 end) as "fv", sum(case when a.atype_ref = 2 then a.amount else 0 end) as "ivo", sum(case when a.atype_ref = 5 then a.amount else 0 end) as "iio", sum(a.amount * a.mvalue) as "vw" FROM productvariant v LEFT JOIN artjournal a ON a.variant_ref = v.id WHERE storage_ref = 1 GROUP BY v.id;
SELECT qt.question_id, GROUP_CONCAT(t.tag_name SEPARATOR ',') FROM question_tag qt LEFT JOIN tag t ON t.tag_id = qt.tag_id GROUP BY qt.question_id;
SELECT item._id, item.description, item.dateadded, seller.sellername, seller.profileimgfilepath, group_concat(photo.thumbnailpath, ":") AS photopaths FROM item JOIN seller ON seller._id = item.sellerid LEFT OUTER JOIN photo ON item._id=photo.itemid GROUP BY item._id ORDER BY item.date DESC;
table document (id, common, columns, current_revision) table revision (id, doc_id, content, version)
Declare @maxval int = ( select max(cast ( right(col, 4) as int)) from TableA ) Select * from TableA where cast ( right(col, 4) as int) = @maxval
exec spYourProc @firstINvar, @firstOUTvar output
select (column_name + ' ' + data_type + (case when character_maximum_length is not null then '('+character_maximum_length+')' else '' end) + ',' ) as ColumnDef from Information_Schema.columns order by ordinal_position
SELECT t.[Date], t.[Time], t.TransactionNumber, t.[Exception], e.ExceptionReason FROM [Transaction] AS t LEFT JOIN Exceptions AS e ON t.[Date] = e.[Date] AND t.TransactionNumber = e.TransactionNumber
SELECT id, GROUP_CONCAT(string SEPARATOR ' ') FROM table GROUP BY id;
select ID ,NAME ,COLOR ,COMPANY_SHORT_NR from table1 LEFT OUTER JOIN table2 ON ( COMPANY_SHORT_NR = SHORT )
CASE RANK() OVER (PARTITION BY li.catnr, li.av_part_no, li.artist, li.title, li.i_status ORDER BY bom.av_part_no) WHEN 1 THEN nr.c_catnr END AS comp_part_AW
select TICKET_TTR_START_DTT - TICKET_TTR_STOP_DTT HOUR(4) TO SECOND(0)
select * from ( select id, title, reg_time as time from tbl_music union all select id, title, time_log as time from tbl_movie ) results order by time
insert into empty_table select id ,count(distinct name) ,min(date) from existing_table where date >= DATE '2015-03-01' and date < DATE '2015-04-01' group by id;
client = new LiveConnectClient(App.MicrosoftAccountSession); client.UploadCompleted += MicrosoftAccountClient_UploadCompleted; client.UploadProgressChanged += MicrosoftAccountClient_UploadProgressChanged; client.UploadAsync("me/skydrive", Binder.Instance.CurrentlyUploading, stream, OverwriteOption.Overwrite);
SELECT 'Miles' AS Type, SUM(CASE WHEN date = lastweek THEN miles ELSE 0 END) as lastweek , SUM(CASE WHEN date = thisweek THEN miles ELSE 0 END) as thisweek SUM(CASE WHEN date = lastweek THEN miles ELSE 0 END) - SUM(CASE WHEN date = thisweek THEN miles ELSE 0 END) as variance FROM yourtable UNION SELECT 'Cost' AS Type, SUM(CASE WHEN date = lastweek THEN cost ELSE 0 END) as lastweek , SUM(CASE WHEN date = thisweek THEN cost ELSE 0 END) as thisweek SUM(CASE WHEN date = lastweek THEN cost ELSE 0 END) - SUM(CASE WHEN date = thisweek THEN cost ELSE 0 END) as variance FROM yourtable
DELETE FROM t WHERE rowid NOT IN ( SELECT min(rowid) FROM t GROUP BY orderid, type )
select col1, sum(col2) from table_name group by col1
SELECT l.locations, l.telephone, l.address, COUNT (u.userID) as `location_count` FROM location AS l LEFT OUTER JOIN users AS u on l.locations = u.location_chosen GROUP BY l.locations ORDER BY `location_count` DESC
SELECT DISTINCT a.id, a.name FROM jobs as a INNER JOIN logs b ON b.job_id = a.id INNER JOIN logs c ON c.job_id = a.id WHERE b.event = 'initialized' AND c.event = 'failed'
ROUND(AVG(CAST(e.employee_level as float)), 3)
SELECT "date", SUM(CASE WHEN title = 'foo' THEN "count" END) AS foo, SUM(CASE WHEN title = 'bar' THEN "count" END) AS bar FROM yourTable GROUP BY "date" ORDER BY "date"
SELECT 10 AS my_num, (SELECT my_num) * 5 AS another_number FROM table
SELECT yourTable.Area, yourTable.Name FROM yourTable INNER JOIN ( SELECT MIN(Id) AS MinId FROM yourTable GROUP BY Area) M ON yourTable.Id = M.MinId
Select * //never do this really From Table Where MYINDEX = (Select Max(MYINDEX) From Table Where Name = [InsertNameHere]
(select * from Service where cusId='$cusId' and serviceType = 1 order by date desc limit 1) UNION (select * from Service where cusId='$cusId' and serviceType = 2 order by date desc limit 1)
SELECT * FROM table t1 JOIN table t2 ON t1.Title = t2.Title WHERE t1.Codes = '020' AND t2.Codes = '021'
insert into user_notification(user_id, notification_id) select s.user_id, @notification_id from tbl_subscriber s where s.product_id = @productX
Date >= dateadd(month, @period-1, dateadd(year, @yr-1900, 0))
WITH MyCTE AS ( --insert sub query here... ) DELETE FROM MyCTE
select host from information_schema.processlist WHERE ID=connection_id();
INSERT INTO #tempTable (Col1, col2, .....) EXEC TestSP
$data = file_get_contents("/PATH/testing.html"); $data = mysql_real_escape_string($data); $query = "INSERT INTO FILE VALUES('','C','000001','$data')"; mysql_query($query);
SELECT b.Name as CustNameFrom, a.Product_Name, a.Product_Desc, a.ETA, c.Name as CustNameTo FROM Products a INNER JOIN Customer b ON a.cust_from = b.ID INNER JOIN Customer c ON a.cust_to = c.ID
select * from tblTable order by (case id when 10 then 0 else 1 end), dbo.id desc
SELECT replace(name,'__',' ') as name, value FROM OPENXML (@idoc, '/user/additionalfields/*',1) WITH ( Name nvarchar(4000) '@mp:localname', value nvarchar(4000) './text()' )
SELECT PhoneNumber FROM YourTable GROUP BY PhoneNumber
SELECT * FROM TableA a JOIN TableB b ON b.id = a.pkid AND a.deleted IS NULL AND b.deleted IS NULL JOIN TableC c ON c.id = b.pkid AND c.deleted IS NULL
DECLARE @SQL NVARCHAR(MAX) DECLARE @FieldName sysname = 'name' DECLARE @FieldValue NVARCHAR(MAX) SELECT @SQL = 'SELECT TOP 1 @FieldValue =' + QUOTENAME(@FieldName) + ' FROM sys.objects' EXEC sp_executesql @SQL, N'@FieldValue nvarchar(max) OUTPUT', @FieldValue =@FieldValue OUTPUT SELECT @FieldName + ' - ' + @FieldValue
select id, time, row_number() over(partition by id order by time) sequence, (case when (lag(id) over (order by id, time)) = id then time - (lag(time) over (order by id, time)) else 0 end) diff from mytable t1 order by id, time
select s.identification, s.name, s.`shoe size`, p.price, p.year from shoes s join payment p on p.paymentid = s.identification
select INSTR(columnname, '-', -1) from tablename
SELECT COALESCE(email, number) FROM tableName
SELECT (customer_data->>'frameMenuData'->>'frameElement' IS NULL) AS has_frame,
criteria.add(Restrictions.sqlRestriction("to_char({alias}.CREATE_DATE, 'yyyy') = ?", year, Hibernate.STRING));
select distinct t.serialNo, e.controlNo, t.addDate from tst_EquipmentItem e join ( select serialNo, max(addDate) as addDate from tst_EquipmentItem group by serialNo ) t on t.serialNo = e.serialNo and t.addDate = e.addDate
select td.id, listagg(tt.val, ',') within group (order by td.id) from test_data td left join temp_table2 tt on td.col like '%,' || tt.col || '%,' group by td.id;
SELECT image_id, count(image_id) as vote_count, SUM(IF(user_id = 18,1,0)) > 0 AS hasUser18 FROM votes GROUP BY image_id ORDER BY vote_count DESC
SELECT table1.field1, IIf((Left(field1,1)='S' Or Left(field1,1)='R' Or Left(field1,1)='A'),Mid(field1, 2, Len(field1)-1) ,field1) AS Expr1 FROM table1;
cast([AFNumberOfMajors] as float)/([AFTotalMajor]-[AFMajorNA])
SELECT TableA.Type, SUM(b.HreReelles) AS HreReellesTotales, b.NoProjet_Short FROM TableA LEFT JOIN (SELECT * FROM TableB WHERE TableB.ColumnName = 'SomeValue') b ON TableA.IDType = b.IDType WHERE TableA.Categorie = 'Electrique' GROUP BY b.NoProjet_Short,TableA.Type
Set dbs = CurrentDb dbs.Execute "DELETE * FROM TMP WHERE diaMes = " & _ Format(tmp7, "\#mm\/dd\/yyyy\#")
UPDATE Products_Joined SET TechSpecs = ISNULL(CAST(TechSpecs AS VARCHAR(MAX)), '') + 'test'
SELECT COALESCE(MAX(cid), 0) FROM itemconfiguration
SELECT MAX(my_number) as Max_Number, my_location FROM TABLE GROUP BY my_location
SELECT DISTINCT c.Cust, options = ((SELECT c2.opt1 + c2.opt2 FROM dbo.myDB AS c2 WHERE c2.Cust = c.Cust FOR XML PATH(''), TYPE).value('.[1]', 'nvarchar(max)')) FROM dbo.myDB AS c;
SELECT MAX(CASE WHEN t.innings = 1 THEN t.name END) as 1stInn, MAX(CASE WHEN t.innings = 2 THEN t.name END) as 2sndInn, t.Order FROM YourTable t GROUP BY t.order
SELECT * FROM mytable WHERE descendant = @descendant AND hops < ( SELECT hops FROM mytable WHERE descendant = @descendant AND ancestor = @ancestor )
select actiondate, ( select sum(qty) from table t2 where t2.actiondate <= t1.actiondate) as qty from table t1 group by actiondate
select item_month, count(*), sum(amount) from ( select opportunity_id, item_date, amount, to_char(item_date, 'yyyy-mm') as item_month, row_number() over (partition by opportunity_id, to_char(item_date, 'yyyy-mm') order by item_date desc) as rn from opportunity_history ) t where rn = 1 group by item_month order by 1;
create table X ( id int CONSTRAINT x_is_unique UNIQUE ) create table Y ( id int ) create unique index y_is_unique on Y(id) select name, is_unique, is_unique_constraint from sys.indexes where object_id in (object_id('X'), object_id('Y')) and name is not null drop table X drop table Y
create procedure proc_name as set nocount on ;with allOrders as ( Main query[With a lot of Joins] ) select * into #allOrders from allOrders; SELECT [Manupulated_Resultset_1] FROM #allOrders; SELECT [Manupulated_Resultset_2] FROM #allOrders; SELECT [Manupulated_Resultset_3] FROM #allOrders; GO
with cte as ( select p.policy_id, 0 as num_priors from policies p where prior_policy_id is null union all select p.policy_id, 1 + cte.num_priors from cte join policies p on p.prior_policy_id = cte.policy_id ) select * from cte;
SELECT jobid, Worker=Sum(WorkerPaidAmountTotal), Company=Sum(CompanyPaidAmountTotal) FROM tablename GROUP BY jobid HAVING Sum(WorkerPaidAmountTotal) = 0 AND Sum(CompanyPaidAmountTotal) > 0
SELECT the_date,start_stop FROM ( SELECT id , date_from as the_date , start_from as start_stop FROM my_table WHERE start_from=1 UNION ALL SELECT id , date_to as the_date , stop_to as start_stop FROM my_table WHERE stop_to=1 ORDER BY id ) tmp
select max(c.character_name) character_name, max(a.name) || ' ' || max(a.surname) actor, group_concat(distinct m.title) other_movies from cast c join actors a on c.actor_id = a.actor_id left join cast omc on c.actor_id = omc.actor_id and c.movie_id <> omc.movie_id left join movies m on omc.movie_id = m.movie_id where c.movie_id = ? group by a.actor_id
SELECT a.Emp,b.orders, RN = ROW_NUMBER () OVER (ORDER BY a.Emp,b.orders) FROM table as a inner join table1 b on a.ID=B.ID
SELECT empno, ename, sal, CASE WHEN sal < 900 THEN 'LOW' WHEN sal < 1500 THEN 'MEDIUM' ELSE 'HIGH' END AS category FROM emp
BEGIN FOR aTab IN (SELECT table_name FROM all_tables WHERE owner = 'MY_SCHEMA') LOOP execute IMMEDIATE 'GRANT ALL ON MY_SCHEMA.'||aTab.table_name||' TO MyUser'; END LOOP; END;
CREATE TABLE lotsofdata ( id INT UNSIGNED AUTO_INCREMENT, int_val INT UNSIGNED, the_timestamp TIMESTAMP, PRIMARY KEY(id)); -- CREATE VIEW FROM SELECT id,int_val,the_timestamp FROM lotsofdata WHERE the_timestamp = MAX(the_timestamp) AND MAX(int_val) LIMIT 0,1;
SELECT TRUNC(END_DATE) - TRUNC(START_DATE) + 1 AS ELAPSED_DAYS FROM A_TABLE
With CTE as ( --Insert Existing query without rollup here ) Select * From CTE Union All Select 'Grand Total' as County , null as Year , SUM(Total) as Total , SUM(Q1) as Q1 , SUM(Q2) as Q2 , SUM(Q3) as Q3 , SUM(Q4) as Q4 From CTE
Select left(yourcolumn, charindex(' ',yourcolumn)) ...
SELECT tmp.t1.a, tmp.t2.b, realdb.real3.c FROM tmp.t1 ^^^ ^^^ ^^^^^^ JOIN tmp.t2 ON tmp.t1.somefield=tmp.t2.otherfield ^^^ ^^^ ^^^ JOIN realdb.real3 ON tmp.t2.yetanotherifeld = realdb.real3.yetanotherotherfield ^^^^^^ ^^^ ^^^^^^ etc...
var idsToDelete = ids.Split(",").Select(x => Convert.ToInt32(x)); var clientsToDelete = _DB.Clients.Where(x => idsToDelete.Contains(x.Id)); foreach(var client in clientsToDelete) { client.IsDeleted = true; } _DB.SubmitChanges();
type Procedures\*.sql >> proc.sql type Views\*.sql >> view.sql type proc.sql >> Build.sql type view.sql >> Build.sql
LOGFILE=$(echo /path/oraInventory/logs/$(ls -t /path/oraInventory/logs | head -n 1)) ./runInstaller -silent -responseFile /path/db.rsp -ignorePrereq grep -q 'INFO: Shutdown Oracle Database' $LOGFILE while [[ $? -ne 0 ]] ; do tail -1 $LOGFILE grep -q 'INFO: Shutdown Oracle Database' $LOGFILE done
SELECT * FROM interests WHERE NOT EXISTS ( SELECT person_interests.interest_id FROM person_interests WHERE person_id = 66 AND interests.id = person_interests.interest_id )
INSERT INTO faults(id, fault_name) VALUES (...), (...) ...
WHERE (e.TotalCount = 1 OR e.LastThreeMonths = 1) AND OINV.[TaxDate] >= (GETDATE() - 7)
alter table tags add unique (vid_id, name);
valid_state_logic=paste0("(",paste0("'",state.abb,"'", collapse=","),")") print(valid_state_logic) [1] "('DC','AL','AK','AZ','AR','CA','CO','CT','DE','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY')"
columnNames, err := rows.Columns() if err != nil { log.Fatalln(err) // or whatever error handling is appropriate } columns := make([]interface{}, len(columnNames)) columnPointers := make([]interface{}, len(columnNames)) for i := 0; i < len(columnNames); i++ { columnPointers[i] = &columns[i] } if err := rows.Scan(columnPointers...); err != nil { log.Fatalln(err) }
Select table1.Stuff, B.Vales as Value1, C.Values as Value2 From table1, table2 as B, table2 as C Where table1.foreing = B.id_table and table1.foreing2 = C.id_table
c) If the implied <comparison predicate> is true for at least one row RT in T, then "R <comp op> <some> T" is true. d) If T is empty or if the implied <comparison predicate> is false for every row RT in T, then "R <comp op> <some> T" is false. e) If "R <comp op> <quantifier> T" is neither true nor false, then it is unknown.
SELECT l.* FROM leads l JOIN keywords k on instr(leads.name, word) > 0
select event from table t group by event having count(distinct (case when thema in (1, 2, 3) then thema end)) = 3;
db.collectionName.stats(1024) //for output in kb
CREATE TEMPORARY TABLE tempTable(identityValue BIGINT(20) UNSIGNED ) engine=memory;
userid month question answer 1 1 1 A 1 1 2 C 1 1 3 B etc...
UPDATE ingredient_aliases SET a.ingredient_id = (SELECT MAX(ingredient_id) AS max_id FROM ingredient_aliases WHERE name LIKE '%WATER%' AND ingredient_id IS NOT NULL) WHERE name LIKE '%WATER%' AND ingredient_id IS NULL
select companies.id companies.name, companies.slots, count(persons.id) from companies left outer join persons on companies.id = persons. ... where companies.city_id = 3 group by companies.id, companies.name, companies.slots
(.*?)\s(\d{5})\s(.+?)\s?(FINLAND|SUOMI)?$
select TOP 30 * from orders o inner join store s on o.Retailer_ID = s.ID where s.Name='XXXX' order by newid();
update TableName set ColumnName = 'www.mypizza.com/' + ColumnName
UPDATE Person SET City=(SELECT City FROM Country WHERE Country_id = 2) WHERE Person_Name = 'Peter'
SELECT a.id, a.state, a.msg, a.userid, a.time FROM tableA a INNER JOIN (SELECT a.userid, MAX(a.id) id FROM tableA a WHERE a.state = 'unread' GROUP BY a.userid ) AS b ON a.userid = b.userid AND a.id = b.id;
management.call_command('reset', 'mainapp', interactive=False)
select * from your_table where organization_no in (select organization_no from your_table group by organization_no having count(*) > 1)
WITH tokenkeys as ( select regexp_substr('A set of words from other side','[^ ]+', 1, level) WORDSPLIT from dual connect by regexp_substr('A set of words from other side', '[^ ]+', 1, level) is not null ) select distinct p.* from people p join tokenkeys on p.name in (tokenkeys.wordsplit) or UTL_MATCH.EDIT_DISTANCE_SIMILARITY(p.lastname, tokenkeys.wordsplit) > 60
select data from tableName where id in (select MAX(id) from tableName group by key)
SELECT ... ... CASE WHEN LEFT(ver_klass, 1) <> 'S' AND LEFT(ver_klass, 1) <> 'M' THEN ver_klass ELSE NULL END AS ver_rayon, CASE WHEN LEFT(ver_klass, 1) = 'M' THEN ver_klass ELSE NULL END AS ver_metier, CASE WHEN LEFT(ver_klass, 1) = 'S' THEN ver_klass ELSE NULL END AS ver_secteur,
UPDATE tab SET col1 = regexp_replace(col1, '(.)', '\1\s*');
select regexp_replace('[[good|12345]] [[bad1 [[bad2 [[bad3 [[bad4 [[bad5 [[good|12345]]', '\[\[([^\|]+?(?=\[\[|\Z))', '\1', 'g')
CREATE TABLE test AS SELECT TIMESTAMP WITH TIME ZONE '2012-07-30 07:00:00-07' AS tstamp; SELECT tstamp FROM test WHERE extract(hour from tstamp) > 0;
CREATE TABLE OriginalTable ( original_id SERIAL PRIMARY KEY, author_id INT, author_date DATETIME, summary TEXT, body TEXT ) ENGINE=InnoDB; CREATE TABLE SearchTable ( original_id BIGINT UNSIGNED PRIMARY KEY, -- not auto-increment -- author_id INT, -- author_date DATETIME, summary TEXT, body TEXT, FULLTEXT KEY (summary, body) ) ENGINE=MyISAM;
^.*\?comeFrom\=([^&]+)&jobId\=([0-9]+)&distance\=([0-9]+).*$
SELECT Department_number ,[January] ,[February] ,[March] FROM ( SELECT Department_number, Amount, datename(date_created) AS month_created from <Your_Table> ) AS SOURCETABLE PIVOT(SUM([Amount]) FOR month_created IN ([January],[February],[March])) AS PIVOTTABLE
SELECT D.Id,C.Country,COUNT(CU.Id) [number of creation] FROM Country C CROSS JOIN [Date] D LEFT JOIN customer CU on D.Dates.Id = CU.Date_Creation_Id And C.Country.Id = CU.Country_Id GROUP BY D.Id,C.Country ORDER BY D.Id,C.Id
select t1.id, t1.time2-case when status='HOLD' then t2.time else 0 end-t1.time1 from t1 left join t2 on t1.id=t2.id and t2.status='HOLD'
select * from users where name > 'bolahan' ORDER BY name ASC;
SELECT p.ProjectName, p.Oid as Oid, p.[Views] as [Views], pb.Bids FROM Project p LEFT OUTER JOIN ( select count(*) Bids, ProjectID, ProjectName from ProjectContractorBid group by ProjectID, ProjectName ) pb ON p.Oid = pb.ProjectID AND p.ProjectName = pb.ProjectName WHERE p.Oid='A8704DA9-999B-4B13-806B-E8490C480F57'
SELECT keyword FROM KeywordTest a inner join split('alpha, beta, charlie',',') b on a.keyword like '%'+Value+'%'
SELECT us.* FROM UsersSample us INNER JOIN UsersSearching uss ON uss.UserId = us.UserId
create table ... ( ... ..., unique(slot, player));
select * from purchaseorders where (case when IsNumeric(purchase_order_number) = 1 then cast(purchase_order_number as int) else 0 end) >= 7
declare @directorId int select @directorId = DirectorID from dbo.tblDirector where DirectorName='Steven Spielberg'
update plantfunctiontable set decommissioned=1 where plantunitid between 49 and 57
DECLARE @OP INT = 1; SELECT * FROM Table WHERE (@OP = 1 AND Table.[status] IN (5,6)) OR (@OP !=1 AND Table.[status] IN (12))
select f.feature_id from features f inner join feature_groups fg on f.feature_id = fg.feature_id and not exists ( select group_id from group_orgs gor where fg.group_id = gor.group_id )
SELECT T1.COD, T1.NAME, MAX(T2.DATA) AS ENDDATA FROM dbo.TAB1 AS T1 WITH (NOLOCK) JOIN dbo.TAB2 T2 WITH (NOLOCK) -- Assumed ON T2.COD = T1.COD GROUP BY T1.COD, T1.NAME
with codes as (select rownum code from dual connect by level <= 160) select distinct t.id, t.description from mytable t, codes c where t.description like '%' || chr(c.code) || '%' and c.code >= 128;
SELECT o.value, d.date FROM day_table o left join other_table d on o.date=d.date and key = "bar" group by d.date;
select count(*) from dbo.study where study_datetime >= cast(getDate() As Date) and study_datetime < cast(DATEADD(day,1,getdate()) as Date)
SELECT DISTINCT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(columnA, '/', ' '), '.', ' '), ',', ' '), '+', ' '), '-', ' '), ' ', ' '), ' ', ' ') FROM tableA;
-- to add another tricky example mysql> insert into foo values(" \" ' "), ("''"); Query OK, 1 row affected (0.06 sec) mysql> select bar, quote(bar) from foo; +-------+------------+ | bar | quote(bar) | +-------+------------+ | | ' ' | | | ' ' | | | ' ' | | " ' | ' " \' ' | | '' | '\'\'' | +-------+------------+ 4 rows in set (0.00 sec)
SELECT SUBSTRING(x.SecurityNumber,1,3) + 'xxxxx' + SUBSTRING(x.SecurityNumber,LEN(x.SecurityNumber) - 2, LEN(x.SecurityNumber)) AS column1 FROM underlyingTable x
import java.util.regex.Matcher; import java.util.regex.Pattern; String regex = "\\$\\{([^}]+)\\}"; SQLQuery = vars.get("SQLQuery"); Pattern pattern = Pattern.compile(regex); Matcher matcher = pattern.matcher(SQLQuery); while(matcher.find()) { String token = matcher.group(); //${var} String tokenKey = matcher.group(1); // var SQLQuery = SQLQuery.replaceFirst(Pattern.quote(token), Matcher.quoteReplacement(vars.get(tokenKey))); } vars.put("SQLQuery", SQLQuery);
SELECT dev_site_name, site_acreage FROM development_site WHERE site_acreage < ( SELECT site_acreage FROM development_site WHERE dev_site_name = 'First Ave' ) ORDER BY site_acreage DESC;
SELECT DISTINCT Things.Prefix, Things.Baseletter, Things.suff, Things.CSCcode, Things.WT, Mapping.BNO-CSCcode, Mapping.EID FROM Things INNER JOIN Mapping ON Things.BNO-CSCcode = Mapping.BNO-CSCcode
if t1.area >= 20, 10 and 30 .....(t1.area = 20)
select ID, Var1, Var2, cvRate, Var1 / sum(Var1) over () as NewCol from (<query that generates the first table>);
WITH CTE AS( SELECT Id, Name, Type, RN = ROW_NUMBER() OVER ( PARTITION BY Type ORDER BY ID ) FROM dbo.Table1 ) SELECT Id, Name, Type FROM CTE WHERE RN = 1
create table Names ( ID MEDIUMINT NOT NULL AUTO_INCREMENT, Name VARCHAR(30) NOT NULL, PRIMARY KEY (ID), UNIQUE (Name) ); create table ChildParentNames ( ChildName MEDIUMINT, ParentName MEDIUMINT, FOREIGN KEY (ChildName) REFERENCES Names(ID), FOREIGN KEY (ParentName) REFERENCES Names(ID) )
select firstdate ,frequency from sampledata WHERE CASE WHEN frequency = 'week' THEN DATEDIFF(DD,firstdate,getdate()) % 7 WHEN frequency = 'fortnight' THEN DATEDIFF(DD,firstdate,getdate()) % 14 WHEN frequency = 'month' AND Day(firstdate) = Day(getdate()) THEN 0 WHEN frequency = 'year' AND Day(firstdate) = Day(getdate()) AND Month(firstdate) = Month(getdate()) THEN 0 END = 0
delete x from myTable x join myTable z on x.field = z.field where x.id > z.id
select player ,avg(case when day BETWEEN '02-01-2014' AND '02-03-2014' then score else null end) as period_1_score ,avg(case when day BETWEEN '02-04-2014' AND '02-06-2014' then score else null end) as period_1_score from <your data> group by player
select d.ID, max(Name) as Name from tagdefinitions d join tags t on d.ID = t.tagid group by d.ID order by count(t.ID) desc, d.ID
$Ptr = [System.Runtime.InteropServices.Marshal]::SecureStringToCoTaskMemUnicode($password) $clearpassword = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($Ptr) [System.Runtime.InteropServices.Marshal]::ZeroFreeCoTaskMemUnicode($Ptr)
SELECT student, count(1) FROM Exam E join StudentTable S on E.student=S.id_student WHERE result='true' GROUP by student ORDER by 2 DESC LIMIT 0,1
SELECT ScheduleID, Ordinal, Duration, SUM(Duration*7) OVER (ORDER BY Ordinal) - Duration*7 as StartDate FROM ScheduleRotationDetail srd ;
select week(post_timestamp) as Week, adddate(date(post_timestamp), INTERVAL 1-DAYOFWEEK(post_timestamp) DAY) as StartDate, count(distinct post_id), count(comment_id) from posts left join comments on comments.posts_post_id = posts.post_id group by Week, StartDate
select d.fundid, d.symbol, d.date, coalesce(mp.price, mpdef.price) as price from t_data d left join t_markprice mpdef on mpdef.symbol = d.symbol and mpdef.date = d.date and mpdef.fundid = 0 left join t_markprice mp on mp.symbol = d.symbol and mp.date = d.date and mp.fundid = d.fundid;
SELECT RL.Link_ID, max(RLG.ZLevel) FROM RDF_Link AS RL JOIN RDF_Link_Geometry AS RLG USING (Link_ID) WHERE RL.Bridge = 'Y' OR RL.Tunnel = 'Y' GROUP BY RL.Link_ID
SELECT MAX(t1.Id) as ID, t1.code, t1.sequence_number FROM mytest t1 INNER JOIN mytest t2 ON t1.id <> t2.id AND t1.code = t2.code AND t1.sequence_number = t2.sequence_number GROUP BY t1.code, t1.sequence_number ORDER BY ID
interface IMyEntityDbContext { Entity GetEntity(int id, int userId); int Insert(Entity entity); void Delete(int id, int userId); void Update(Entity entity); //or if possible in EF void Update(Entity entity, int userId); }
Convert(varchar, 10, FieldName)
select club, count(*) as NumAppears from (SELECT home_club AS club FROM matches UNION ALL SELECT away_club FROM matches ) m group by club;
select a.datecreated,a.sale from salesummary a inner join calendar c on a.datecreated = c.fulldatekey and c.IsLastDayOfMonth = 1 group by a.datecreated,a.sale
select u.*, c.minage from users u join (select city, min(age) as minage from users group by city ) c on u.city = c.city;
update your_table_name set x=20 where x is null;
update vars join table2 on vars.id = table2.id set unq = 1;
Select (bCounts.Broswer_counts * 100 / total.total) percentage, bCounts.broswer FROM ( Select Count(timestamp) broswer_counts, browser From table Where timestamp > '12/1/2010' Group by Browser) bCounts, (SELECT COUNT(TimeStamp) total From Table WHERE timestamp > '12/1/2010') Total
select sum(x.col2) as sum from ( select case when col1 in (select letter from letters_table) then col2 else 0 end as col2 from YourTableName ) x
select store, count(distinct Transaction) as NumTransactions, count(*) as NumItems from t group by store;
UPDATE table1 SET table1.STATUS = table2.STATUS FROM table1 JOIN table2 ON table1.ID = table2.ID
ID Version 1 1 2 2 3 3 1 4
WITH qry AS ( SELECT afield1, afield2, b.field1 AS bfield1, ROW_NUMBER() OVER(PARTITION BY a.id ORDER BY field1) rn FROM sometable a LEFT JOIN anothertable b ON b.aForeignKey = a.id ) SELECT * FROM qry WHERE rn = 1
WITH RECURSIVE num AS (VALUES (50)) , num2 AS (SELECT column1 * 2 AS value FROM num) , t(n) AS ( VALUES (1) UNION ALL SELECT n+1 FROM t WHERE n < (SELECT * FROM num2) ) SELECT sum(n) FROM t;
SQL> create table numcheck(a number(3)); Table created. SQL> insert into numcheck values (-999); 1 row created. SQL> insert into numcheck values (999); 1 row created. SQL> select a, vsize(a), dump(a) from numcheck; A VSIZE(A) DUMP(A) ---------- ---------- ------------------------------ -999 4 Typ=2 Len=4: 61,92,2,102 999 3 Typ=2 Len=3: 194,10,100
select @RUNS = count(*), @WON = sum(case when PosNum = 1 then 1 else 0 end) from tvf_horse_going('Allow Me', 'HEAVY') set @PERC = (@WON * 100) / @RUNS
select isnull(a.Town, b.Town) Town, isnull(a.TileRoofs, b.TileRoofs) TileRoofs, isnull(a.[Brick wall], b.[Brick wall]) [Brick wall], isnull(a.Flats, 0) Flats, isnull(b.Houses, 0) Houses from ViewOne a full outer join ViewTwo b on a.Town = b.Town and a.TileRoofs = b.TileRoofs and a.[Brick wall] = b.[Brick wall]
SELECT BlogPosts.id, BlogPosts.title, Readers.name, Readers.comment FROM BlogPosts RIGHT JOIN Readers ON BlogPosts.id = Readers.blog_post_id AND Readers.name = 'joe'
Client c; c.Customer.[...] c.Supplier.[...]
http://localhost/SomeDataService.svc/SomeStoredProcedure
select id, max(gender), max(age), max([highest weight]), min([lowest weight]), max(abc) from SomeTable group by id
SELECT * FROM emp WHERE convert(datetime, date, 101) BETWEEN (Getdate() - 6) AND Getdate() ORDER BY date
REVOKE ALL ON accounts FROM joe; GRANT SELECT ON accounts TO joe;
select t.column1 from @tablea t inner join @words w on charindex(w.word, t.column1) > 0 group by t.column1 having count(distinct w.word) = (select count(*) from @words)
SELECT Users.Name FROM Users WHERE Users.ID IN -- Get names that belongt to ID's (SELECT FriendID FROM Friends WHERE UserID = -- All ID's of the Friends of (SELECT UserID FROM Users WHERE Name = 'John')) -- Johns ID
CREATE TABLE public.test ( datetime TIMESTAMPTZ NOT NULL ); COPY public.test (unix_timestamp FILLER VARCHAR(15), datetime AS TO_TIMESTAMP(unix_timestamp)) FROM STDIN; >> 1388552400 >> 1391230800 >> \. SELECT * FROM public.test;
SELECT DATE_FORMAT(NOW(), '%d %m %Y') AS your_date;
DECLARE @FirstNamesString nvarchar(256) SELECT @FirstNamesString = ( SELECT CASE WHEN ROW_NUMBER() OVER (ORDER BY (p.SortOrder)) = 1 THEN '' ELSE ',' END + p.FirstName + ISNULL(' ' + p.LastName, '') FROM Person p ORDER BY p.SortOrder FOR XML PATH(''), TYPE ).value('.[1]','nvarchar(256)') PRINT @FirstNamesString
SELECT * FROM friends WHERE ( friend1 = USER_ID AND friend2 = FRIEND ) OR ( friend1 = FRIEND AND friend2 = USER_ID )
C:\mysql\bin C:\Program Files\MySQL\MySQL Server 5.1\bin Installation Folder~\xampp\mysql\bin
IF(@ildPais =0 AND @ildRegion =0) SELECT <THE DATASET> FROM THE TABLE WHERE t.iDdPais = @iIdPais AND t.iIdRegion = @iIdRegion AND t.dtFecha BETWEEN @dtStart AND @dtEnd ELSE SELECT <THE DATASET> FROM THE TABLE --no where clause
SELECT * FROM TABLE_ONE WHERE NOT EXISTS (SELECT * FROM TABLE_TWO WHERE TABLE_ONE.Bill = TABLE_TWO.Bill AND TABLE_ONE.SubRow BETWEEN TABLE_TWO.IinitialRange AND TABLE_TWO.FinalRange)
SELECT a,b,c,d FROM (SELECT a, b, (A VERY LONG AND COMPLICATED SUBQUERY) AS c, (ANOTHER VERY LONG AND COMPLICATED SUBQUERY) AS d FROM table ) AS T1 WHERE c AND d
UPDATE dbo.YourTable SET YourColumn = DATEADD(H, 1, YourColumn) WHERE (some condition here)
insert into tag_relations(tag1, tag2, degree) select a1.tag_name, a2.tag_name, max(article_id) as maxid from articles a1 join articles a2 on a1.article_id = a2.article_id and a1.tag_name < a2.tag_name group by a1.tag_name, a2.tag_name
SQL> SELECT 24 * 60 * (to_date('02:05:58', 'HH24:MI:SS') 2 - TRUNC(to_date('02:05:58', 'HH24:MI:SS'))) min 3 FROM dual; MIN ---------- 125,966666
update myTable set code = cast(code as int) * 10000 where curr_qtr = 'q1_2014'
select * from mytable t1 inner join ( select A, max(b) B from mytable where b >50 group by a ) t2 on t1.a = t2.a and t1.b = t2.b where t1.b >50
CREATE PROCEDURE Find_Text_In_SP @StringToSearch varchar(100) AS SET @StringToSearch = '%' +@StringToSearch + '%' SELECT Distinct SO.Name FROM sysobjects SO (NOLOCK) INNER JOIN syscomments SC (NOLOCK) on SO.Id = SC.ID AND SO.Type = 'P' AND SC.Text LIKE @stringtosearch ORDER BY SO.Name GO
SELECT img.*, collections.* FROM collections JOIN ( select *, row_number() over (partition by collection_id order by something) as rn from images ) img ON img.collection_id = collections.id AND img.rn <= 3 WHERE ....;
SELECT DISTINCT so.name,so.xtype FROM syscomments sc INNER JOIN sysobjects so ON sc.id=so.id WHERE sc.TEXT LIKE '%YOUR TABLE%'
select t.testid, t.distanceaf3, x.buildnumber from tbl t left join (select buildnumber, min(testid) as testid from tbl group by buildnumber) x on t.testid = x.testid
SELECT "group_id",count(*) , count(distinct "p_id" || '-' || "version") FROM tbl group by "group_id"
'YYYY-MM-DD HH:MI:SS AM'
SELECT * FROM `table` where ID in (5263, 5625, 5628, 5621)
ORDER BY CASE @OrderByColumn WHEN 1 THEN Forename END DESC, Date, Location, CASE @OrderByColumn WHEN 2 THEN Surname END ASC
UPDATE YourTable SET newcolumn = LPAD(REPLACE(FORMAT(Price,0),',',''),5,'0')
MERGE INTO A USING ( SELECT col1, col2, col3 FROM B GROUP BY col1, col2, col3 HAVING COUNT(*) > 7 ) b ON (A.col1 = b.col1 AND A.col2=b.col2 AND A.col3= b.col3) WHEN MATCHED THEN UPDATE SET A.col4 = 0;
$query = " SELECT p.name AS project_name , role.name AS role_name FROM projects AS p JOIN projects_users_roles AS a ON a.project_id = p.id JOIN users_roles AS role ON role.id = a.role_id WHERE a.user_id = 23 "; $result = mysql_query($query); var_dump($result);
SELECT products.id FROM products LEFT JOIN sale_products ON sale_products.product_id = products.id WHERE sales_products.product_id IS NULL GROUP BY products.id
SELECT MAX(CASE WHEN strength >= 100 THEN level END) m1, MAX(CASE WHEN strength < 100 THEN level END) m2 FROM players WHERE premium_account = 1
INSERT INTO [users_perm] SELECT [uid] = u.[uid] , [pid] = p.[pid] FROM [users] u , [permission] p
SELECT RIGHT(left_to_right, 8) AS right_to_left FROM Table1
select a.period_start, (select count(*) from all_periods b where b.period_start < a.period_start ) as result from all_periods a;
SELECT @NEWID = max(convert(int,SUBSTRING(status, 8, 2))) FROM myTable WHERE [status]='Waiting'
with cte as( select LOWER(REPLACE('.ABC,.123,.FGH,.QDG', '.', ' ')) as val from dual) select regexp_replace(val,' ',' and ',instr(val ,' ',-1)) from cte;
create function someFunction(@someParam varchar(100)) returns @table (field1 type, field2 type, ...) as begin declare @tempvar varchar(100) set @tempvar = ''--Set the var to something useful insert @table select * from sometable where somecolumn = ( select top 1 someColumn from sometable where somecolumn = @tempvar ) return end
select 'Total_amount', SumTotal, case when SumTotal > 100000 then 'Good' else 'Not good' end from dbo.BusinessUnits bun OUTER APPLY (select SUM(Total) from dbo.Invoices i where i.BU = bun.BU) CA(SumTotal)
Select lid, count(distinct IP) as uhits from hits group by lid
SELECT q.keyword FROM Table1 t CROSS JOIN ( SELECT 'oh' keyword UNION ALL SELECT 'xxx' UNION ALL SELECT 'foo' UNION ALL SELECT '41' ) q WHERE INSTR(CONCAT_WS(' ', firstname, lastname, anotherCol1, anotherCol2), q.keyword) > 0
SELECT m.*, ROW_NUMBER() OVER (ORDER BY column) AS rn FROM mytable m
ALTER TABLE [ database_name . [ schema_name ] . | schema_name . ] table_name { ALTER COLUMN column_name { ... } | ADD { ... } [ ,...n ]
select date_part('second',date1) - date_part('second',date2)
TRANSFORM Sum(XTabTable.Quantity) AS SumOfQuantity SELECT XTabTable.Company FROM XTabTable GROUP BY XTabTable.Company PIVOT XTabTable.Item;
Select Count(*) TotalPurchases, Sum(Case When c.transaction_id Is Not Null Then 1 Else 0 End) MatchablePurchases From unmatched_purchases u Join purchases p On p.purchases_id = u.unmatched_purchases_id Left Join credit_card_transactions c On customer_id = p.customer_id And item_id = u.item_id And trans_timestamp - purchase_date < @DelayThreshold Where Location_id = @Location
with query as ( select avg(price) as ave from product) select price, name from product p2, query where p2.price > query.ave
SELECT car, MAX(CASE WHEN state = 'new' THEN tstamp END) AS new, MAX(CASE WHEN state = 'old' THEN tstamp END) AS old, MAX(CASE WHEN state = 'scrap' THEN tstamp END) AS scrap FROM table GROUP BY car;
select *From Table where DATEPART(hh,yourdatefield)>=17 and and convert(date,yourdatefield,103)='2014-04-03'
declare l_newtablename varchar2(50); begin l_newtablename := 'TABLE_LERO_' || TO_CHAR (SYSDATE, 'MM_DD_YYYY'); execute immediate 'ALTER TABLE TABLE_LERO RENAME TO ' || l_newtablename; end; /
SELECT Total_Amount * Exchange_Rate AS Value FROM Transactions, Rates WHERE Rates.Currency_Name = 'Sek' and Transaction_id = 001
SELECT COUNT(CASE WHEN AGE >= 26 AND AGE <= 27 THEN 1 ELSE NULL END) AS [total26To27] , COUNT(CASE WHEN AGE >= 28 AND AGE <= 30 THEN 1 ELSE NULL END) AS [total28T30] , COUNT(CASE WHEN AGE >= 31 AND AGE <= 33 THEN 1 ELSE NULL END) AS [total31T33] FROM Persons
TABLE accounts (id,name,email..) TABLE posts (id,title,text,account_id[FK]..) TABLE likes (id,value,post_id[FK]) TABLE comments (id,tect,datetime,post_id[FK])
create table ip ( ip int(10) unsigned default 0); insert into ip values ( inet_aton('255.255.255.255')), (inet_aton('0.0.0.0')); select * from ip;
select * from ( select date, value, unit from ( select * from t1 ) x unpivot ([value] for unit in ([unita], [unitb], [unitc])) u ) a pivot ( sum(value) for date in ([2010], [2011], [2012]) ) p
insert into Cars (Name, Option) select distinct Name, 'AC' from Cars
SELECT * FROM your_table WHERE email LIKE '%@%@%';
$sql = "SELECT DATE_FORMAT(NOW(), '%%Y') - DATE_FORMAT(DOB, '%%Y') - (DATE_FORMAT(NOW(), '00-%%m-%%d') < DATE_FORMAT(DOB, '00-%%m-%%d')) AS age from test where user_name = '%s'";
Product id type_id name 1 2 candy 2 2 car 3 3 yard work Type id name 1 digital 2 physical 3 service
select * from table ORDER BY case WeekDay when 'Monday' then 1 when 'Tuesday' then 2 when 'Wednesday' then 3 when 'Thursday' then 4 when 'Friday' then 5 when 'Saturday' then 6 when 'Sunday' then 7 else 8 END ;
Select (case when row_number() over (partition by po.BranchOrderNumber order by pod.ItemCode) = 1 then po.BranchOrderNumber else '' end) as BranchOrderNumber pod.ItemCode, pod.ItemDescription From RetailPosOrders po INNER JOIN RetailPosOrderDetails pod ON po.BranchOrderID = pod.OrderID Order by po.BranchOrderNumber, pod.ItemCode;
SELECT DISTINCT ON (id) sysid, id, val, ord FROM my_table ORDER BY id,ord DESC;
select * from tblArea where AreaDescription in (AreaDescription,'Processing1','Geology 66','Site Infrastructure')
SELECT s.ID, s.ProductId, s.Name, OtherData = COALESCE(s.OtherData, r.OtherData) FROM dbo.Products AS s LEFT OUTER JOIN dbo.Products AS r ON s.ProductId = r.ID;
select * from tblUser t1 inner join ( SELECT UserId FROM tblUser GROUP BY UserId having count(distinct UserName) > 1 ) t2 on t1.UserID = t2.UserID
alter table2 add foreign key (username) references table1 (username) on update cascade;
SELECT count(*), created_at FROM Order GROUP BY payment_option_id, created_at
create table usertable ( userID integer unsigned not null auto_increment primary key, userName varchar(64) ); create table jobtable ( jobID integer unsigned not null auto_increment primary key, jobDesc text, posterUserRef integer not null ); create table bidtable ( bidID integer unsigned not null auto_increment primary key, bidAmount integer, bidDesc text, bidTime datetime, bidderUserRef integer not null references usertable(userID), biddingOnJobRef integer not null reference jobtable(jobID) );
UPDATE call_list_row SET emailed='0' WHERE id IN ('1','2','3');
SELECT * FROM user_constraints WHERE WHERE table_name='<your_table_name>'; SELECT * FROM user_cons_columns WHERE table_name='<your_table_name>';
AND (t."FieldID"::text LIKE '01%' OR t."FieldID"::text LIKE '123%' OR t."FieldID"::text LIKE '5555%' OR t."FieldID"::text LIKE '44444%' OR t."FieldID"::text LIKE '99%')
SELECT KC.Column_Name, t.Table_Name, tc.Constraint_Name FROM information_schema.table_constraints tc LEFT JOIN information_schema.tables t ON tc.Table_Name = t.Table_Name LEFT JOIN information_schema.KEY_COLUMN_USAGE kc ON kc.CONSTRAINT_NAME = tc.CONSTRAINT_NAME WHERE constraint_type = 'FOREIGN KEY' AND TABLE_TYPE = 'BASE TABLE'
where (ID1 is not null or ID1 <> '-1' ) or (ID2 is not null or ID2 <> '-1' ) or (ID3 is not null or ID3 <> '-1' )
Delete Table t Where TxType = 'resp' And Not Exists (Select * From Table Where timestamp = t.timestamp and TxType = 'req')
CREATE TRIGGER trg_Table1_INSERT ON dbo.Table1 AFTER INSERT AS BEGIN INSERT INTO dbo.Table2(SerialNo, Name) SELECT SerialNo, Name FROM Inserted INSERT INTO dbo.Table3(SomeOtherCol) SELECT SomeOtherCol FROM Inserted END
select domain from test_table group by domain having sum(case when status = 'COMPLETE' then 0 else 1 end) = 0
create table test1 (col1 char(4)); alter table test1 add constraint t1_chk check (length(trim(col1)) = 4); -- the following inserts ok insert into test1 values ('1234'); -- the following fails insert into test1 values ('112 '); commit;
SELECT phone_number, REGEXP_SUBSTR(phone_number, '[^.]*$') FROM employees;
SELECT c1.color as color1, c2.color as color2 FROM CAR car INNER JOIN COLOR c1 ON c1.id = car.color1 INNER JOIN COLOR c2 ON c2.id = car.color2
SELECT COUNT(ProjectIndentID) AS NoOfProjects, BranchID, DATEPART(year, PIDate) AS yr FROM dbo.ProjectIndent WHERE DATEPART(year, PIDate) = 2016 GROUP BY BranchId, DATEPART(year, PIDate) ;
;with cte as ( select *, row_number() over(partition by yourfields order by yourfields) rn from yourTable ) delete from cte where rn > 1
DECLARE @Counter INT SET @Counter = 0 DECLARE @TotalPrints INT SET @TotalPrints = (LENGTH(@script) / 8000) + 1 WHILE @Counter < @TotalPrints BEGIN -- Do your printing... SET @Counter = @Counter + 1 END
select c1, group_concat(c3 separator ' ') from t group by c1;
Update Product Set Value2 = Value1 + Value2 Where ProductId = @Parameter
SELECT table1.*, table2.column, table2.column FROM table1 LEFT JOIN table2 ON table2.a = table1.a WHERE ...
from : string to : string subject: string date (range): datetime attachments (names & types only) : Object Array message contents : string (optional) mailbox / folder structure: string for example: from: from@gmail.com to: to@gmail.com subject: "test subject" date: "current date", attachments: { [0]=>{ names: "attachments1", types: "text" }, [1]=>{ names: "attachments2", types: "pdf" } }
SELECT count(a.account_id), b.meal_id, b.meal_name FROM mdw_meals_menu b LEFT JOIN mdw_customer_accounts a on b.meal_id=a.meal_id and a.start_date BETWEEN to_date('01-APR-2013','DD-MON-YYYY') AND to_date('30-JUN-2013','DD-MON-YYYY') GROUP BY b.meal_id, b.meal_name ORDER BY count(a.account_id) desc, b.meal_id;
If(Double.TryParse(ds.Tables.Item(0).Rows.Item(i).Item(i).ToString, Nothing), _ ds.Tables.Item(0).Rows.Item(i).Item(i).ToString, _ "'" & ds.Tables.Item(0).Rows.Item(i).Item(i).ToString & "'")
SELECT a.id, a.attribute FROM A a WHERE EXISTS ( SELECT 1 FROM B b WHERE a.id = b.parent_id AND b.attribute = 'Test' );
select PM17, WORKORDER.PMNUM, WORKORDER.ASSETNUM, ASSET.DESCRIPTION, ASSET.MANUFACTURER, EQASSETNUM, WORKORDER.LOCATION, LOCATIONS.DESCRIPTION, PM.ROUTE, TARGSTARTDATE, TARGCOMPDATE, PM.NEXTDATE from WORKORDER LEFT JOIN ASSET ON WORKORDER.ASSETNUM = ASSET.ASSETNUM JOIN PM ON WORKORDER.PMNUM = PM.PMNUM JOIN LOCATIONS ON WORKORDER.LOCATION = LOCATIONS.LOCATION WHERE WORKORDER.WONUM='1011';
include "secret.conf"
select MasterAccNumber from ( select MasterAccNumber from ACE_AccsLevelTran where CAST(timstmp as DATE) = '02/06/2013' union all select m.AccountNumber from ACE_InvLevelTran i left join ACE_InvLevelMaster m i.MasterInvNumber=m.InvoiceNo where CAST(i.timstmp as date) ='02/06/2013' ) e group by MasterAccNumber having COUNT( MasterAccNumber) < 2
SELECT DATE(FROM_UNIXTIME(columName)), COUNT(ID) totalCOunt FROM tableName WHERE DATE(FROM_UNIXTIME(columName)) BETWEEN CURDATE() + INTERVAL -7 DAY AND CURDATE() GROUP BY DATE(FROM_UNIXTIME(columName))
dsCustomers.Tables("Customer_Information").Rows
UPDATE tablename SET col3 = CAST(LEFT(col1, 10) + " " + col2 + ":00", DATETIME)
SELECT YEAR(custDecDate), SUM(valueXX), SUM(valueYY) FROM bids WHERE forBid = "For Contract" GROUP BY YEAR(custDecDate)
SELECT a.post_id FROM meta_table AS a JOIN meta_table AS b ON a.post_id = b.post_id WHERE a.meta_value = 'value2' AND b.meta_value = 'value4'
// The index in the 'get...'-method determines the column String title = cursor.getString(0); String place = cursor.getString(1);
SELECT term FROM tablename GROUP BY term ORDER BY COUNT(*) DESC
select top 1 * from CdCl order by abs(datediff(ms, ReadTime, <yourdatetime>))
SELECT RIGHT([String],CHARINDEX('_',REVERSE([String]),0)-1)
String[] columnNames = new String[] { "NAME", "DELIVERY_STREAM", "NUMBER_OF_FEET", "RETICULATED", ... }; int columnNumber = ...; String sql = "UPDATE Project SET " + columnNames[columnNumber] + " = ? WHERE ...";
SELECT Blah_Blah from Table1 WHERE <some condition> UNION SELECT Blah_Blah from Table2 WHERE <some contition>
Insert into [MyTable] (Max,Value1,Value2,Value3) values((select Max(Number) from Table1),@p1,@p2,@p3)
update color_table set color = (case when color = 'Blue' then 'Red' when color = 'Red' then 'Blue' end) where color in ('Blue', 'Red');
UPDATE companies cmp LEFT JOIN company_adv cma ON cmp.id = cma.company_id SET cmp.adv = IF(cma.image1 IS NULL, 0, 1)
LOAD DATA LOCAL INFILE 'file.csv' INTO TABLE my_table FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '\n' (name, address, @var1) set dateOfBirth = STR_TO_DATE(@var1, '%d-%b-%y')
select * from messages msg join users m on msg.sender = m.user_id AND m.user_gender='M' join users f on msg.receiver = f.user_id AND f.user_gender='F'
select fs.*, (select max(o.odometer) from odohis o where o.vehicleId = fs.vehicleId and o.reading_date <= fs.pos_date ) odometer, (select max(o.reading_date) from odohis o where o.vehicleId = fs.vehicleId and o.reading_date <= fs.pos_date ) reading_date from fs_pos fs;
SELECT Manager, COUNT(IndID) as EmployeeCount, SUM(CASE WHEN TermDate BETWEEN @StartDate AND @EndDate THEN 1 ELSE 0 END) as Terminations, SUM(COUNT(*)) OVER () as TotalEmployees FROM myTable WHERE HireDate <= @EndDate AND TermDate BETWEEN @StartDate AND @EndDate OR StartDate <= @EndDate AND TermDate IS NULL GROUP BY Manager;
SELECT c1. * , COUNT( c2.parent_id ) FROM comments c1 LEFT JOIN comments c2 ON c2.parent_id = c1.comment_id WHERE c1.parent_id IS NULL AND c1.thread_id =122 GROUP BY c1.comment_id ORDER BY c1.date_comment ASC
WHERE Keywords.Word IN ('$search[0]','$search[1]',...)
SELECT * FROM tbl WHERE publishdate = (SELECT MAX(publishdate) FROM tbl)
DATEADD(hh,DATEDIFF(hh,GETUTCDATE(),GETDATE()),dateScheduled)
SELECT DISTINCT date, user_id, SUM(count) OVER (PARTITION BY user_id ORDER BY date) AS count FROM actions WHERE action IN ('Call', 'Email');
DELETE FROM table_y WHERE id>1176
SELECT IF(`column1` != 0,1,0) + IF(`column2` != 0,1,0) + IF(`column3` != 0,1,0) + IF(`column4` != 0,1,0) AS `results_sum` FROM `table` HAVING `results_sum` > 1
CREATE SEQUENCE TestSequence START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 5 NO CYCLE; SELECT NEXT VALUE FOR TestSequence;
SELECT address_arr[1] AS streer_name, address_arr[2] AS street_number FROM (SELECT REGEXP_SPLIT_TO_ARRY(address, ' ') AS address_arr FROM my_table) t
SELECT * FROM tv_programs WHERE start_time <= NOW() ORDER BY start_time DESC LIMIT 1;
SELECT DENSE_RANK() OVER (ORDER BY TotCnt DESC) AS TopCustomers, CustomerID, TotCnt FROM (SELECT CustomerID, COUNT(*) AS TotCnt FROM Orders Group BY CustomerID) AS Cust
SELECT a.name, COUNT(*) AS num FROM table2 b INNER JOIN table1 a ON b.status_id=a.id GROUP BY status_id
select case when substr1 is null then '????' when substr1 in ('000', '010', '018') then '100L' when substr1 = '123' and substring(A, 8, 3) = 'abc' then 'xxx' end from ( select substring(A, 4, 3) as substr1 from MyTable ) a
SELECT dt, count(q2.YourDate) FROM (SELECT DISTINCT CONVERT(varchar,YourDate,101) dt FROM YourTable) t1 JOIN YourTable q2 ON DATEADD(d,-1,CONVERT(varchar,YourDate,101)) < dt GROUP BY dt
Subscriber ---------- SubscriberID (PK) SubscriberName etc... Service ------- ServiceID (PK) ServiceName etc... SubscriberService ----------------- SubscriberID (PK) ServiceID (PK)
SELECT S.stu_fname, S.stu_lname, GT.grade_type_name, (sum(SG.grade_earned)/sum(G.grade_possible) * GT.grade_weight) AS Calculated Grade FROM Student S INNER JOIN StudentGrade SG ON SG.stu_id = S.stu_id INNER JOIN Grade G ON SG.grade_id = G.grade_id INNER JOIN GradeType GT ON G.grade_type = GT.grade_type GROUP BY S.stu_fname, S.stu_lname, GT.grade_type_name;
SELECT "col1" columname FROM Table WHERE primary_key = input1 AND col1 = input2 UNION SELECT "col2" FROM Table WHERE primary_key = input1 AND col2 = input2 UNION SELECT "col3" FROM Table WHERE primary_key = input1 AND col3 = input2 and so on
INSERT INTO attribute_list (id, value, name) SELECT id, 'Y', 'is_leveled' FROM value_list WHERE val >= 50
INSERT INTO [Product] SELECT DISTINCT PT.[Name],PT.[Description] FROM [Producttemp] AS PT LEFT OUTER JOIN [Product] AS P ON P.[Name] = PT.[Name] AND P.[Description] = PT.[Description] WHERE P.[Name] IS NULL
select s.StudentId,s.FirstName,s.LastName from Stundent s join StudentLanguage sl on s.StudendID=sl.StudentId join @LanguageTable on sl.LanguageId=@LanguageTable.LanguageId group by s.StudentId,s.FirstName,s.LastName having count(*)=(select count(*) from @LanguageTable)
SELECT rooms.id, rooms.name, niceDate, room_transcripts.date, group_concat(long) as long FROM room_transcripts JOIN rooms ON room_transcripts.room=rooms.id JOIN transcript_users ON transcript_users.room=rooms.id AND transcript_users.date=room_transcripts.date JOIN users ON transcript_users.user=users.id WHERE room_transcripts.deleted=0 AND rooms.id IN (1,2) GROUP BY room_transcripts.id ORDER BY room_transcripts.id DESC
SELECT msg.messageid, msg.message, msg.sentby, msg.adddate, group_concat(p_i.image_id separator ';') imageids, group_concat(p_i.small_pic_path separator ';') picpaths FROM ...
cmd.Parameters.Add("@CustomerId",SqlDbType.Int).Value=CustomerID;
UPDATE custTab a INNER JOIN zipTab b ON a.cust_city = b.city AND a.cust_state = b.state SET a.cust_zip = b.zip WHERE a.cust_zip IS NULL
SELECT DATE_PART('YEAR', period_start) as Year, DATE_PART('MONTH', period_start) as Month, COUNT(*) as Entries FROM activity_log WHERE action = 'create_entry' GROUP BY Year, Month;
$stmt = $conn->prepare('SELECT a.*, IFNULL((SELECT SUM(amount) FROM bankaccounts b WHERE b.owner=a.id),0) AS BANK_MONEY, (IFNULL(a.money,0) + IFNULL((SELECT SUM(amount) FROM bankaccounts c WHERE c.owner=a.id),0)) AS ARESULT FROM users a ORDER BY ARESULT DESC LIMIT 0, 10');
WITH AllDates AS ( SELECT @MinDate AS xDate UNION ALL SELECT Dateadd(day, 1, xDate) FROM AllDates AS ad WHERE ad.xDate < @MaxDate ) SELECT 'playing' AS activity ,min(ad.xDate) -- or max or the week number, whichever you like best ,Isnull(sum(t.TimePerDay), 0) AS TimePerDay FROM AllDates AS ad WITH (NOLOCK) LEFT JOIN @test AS t ON ad.xDate = t.DATE GROUP BY datepart(wk, ad.xDate);
CREATE TABLE output (Selection INT, Avg_Height FLOAT) GO DECLARE @intFlag INT SET @intFlag = 1 WHILE (@intFlag <=5) BEGIN WITH cte AS (SELECT TOP 4 * FROM Table1 ORDER BY NEWID()) INSERT INTO output SELECT @intFlag, AVG(Height*1.0) FROM cte SET @intFlag = @intFlag + 1 END GO
CREATE TABLE MyTable ( col1 varchar(20), col2 varchar(50) ) INSERT INTO MyTable VALUES ('ABCD:123', 'Value 123'), ('1234:1234', 'Value 1234'), ('xyz:1234', 'should not be selected'), ('cdef:abcd', 'should not be selected too') SELECT * FROM MyTable WHERE CHARINDEX(':', col1, 0) = 5 AND ISNUMERIC(SUBSTRING(col1, CHARINDEX(':', col1) + 1, 20)) = 1
SELECT [2010] AS 'year1', [2011] AS 'year2', .... FROM ( SELECT ... ) ...
SELECT t.customerId FROM ( SELECT t.CustomerId, COUNT(DISTINCT artistId) as artists FROM trans t INNER JOIN work w ON w.workid = t.workid) t INNER JOIN ( SELECT COUNT(DISTINCT artistId) artists FROM work) a ON t.artists = a.artists
with tmp as ( select unitId, parentId, unitName, 0 as iteration from t where unitId = 7 union all select parent.unitId, parent.parentId, parent.unitName, child.iteration + 1 from tmp child join t parent on child.parentId = parent.unitId where parent.parentId != 0 ) select top 1 unitId, parentId, unitName from tmp order by iteration desc
SELECT user_id, MAX(CASE WHEN month = '2013-03-01' THEN value END) AS '2013-03-01', MAX(CASE WHEN month = '2013-02-01' THEN value END) AS '2013-02-01', MAX(CASE WHEN month = '2013-01-01' THEN value END) AS '2013-01-01' FROM mytable GROUP BY user_id
SELECT ID FROM atable EXCEPT SELECT MIN(ID) FROM atable GROUP BY Name
SUBSTR(SYN_NO,1,4)
SELECT recipes.id, votes.date, votes.perc FROM recipes RIGHT JOIN (select weekly.id_rec, d.date, perc from (SELECT weekly.id_rec, date FROM weekly where YEAR(date) = 2014 group by date) as d left join weekly on d.date = weekly.date) as votes ON votes.id_rec = recipes.id
INSERT INTO Table2 SELECT t1.* FROM Table1 t1 WHERE NOT EXISTS ( SELECT 1 FROM table2 t2 WHERE t2.col1 = t1.col1 AND t2.col2 = t1.col2 )
SELECT ID,name,level FROM sample ORDER BY level DESC,NEWID()
SELECT SUM(imps.[Count]) AS A , COUNT (imps.Interest_Name) AS B, ver.Vertical_name FROM Impressions imps INNER JOIN Verticals ver ON imps.Campaign_id = ver.Campaign_id WHERE ver.Vertical_name = 'Retail' OR ver.Vertical_name = 'Travel' GROUP BY ver.Vertical_name;
select count(distinct data) as cnt, (SELECT data FROM data_table GROUP BY data WHERE param='xxx' ORDER BY rand() LIMIT 1) as random from data_table WHERE param='xxx'
select id, make, model, type from ( select id, make, model, type, row_number() over (partition by id order by make) as rn from the_table where type = 'coupe' ) t where rn <= 2 order by id, make;
SELECT * FROM `my_table` ORDER BY `name` ASC
UPDATE t1 SET t1.id = t2.id FROM table1 t1 JOIN table1 t2 ON (t1.id = 1 AND t2.id = 2) OR (t1.id = 2 AND t2.id = 1)
SELECT * FROM Users WHERE Users.isDeleted = 0 AND ( (@intUserType = 1) OR (@intUserType = 4 AND Users.UserType <> 1) OR (@intUserType = 3 AND Users.UserType IN (1,3,4)) )
select v.item_id, (case when sum(u.weight) > 0 then sum(u.weight * v.vote) / sum(u.weight) end) as weightedVote from vote v join user u on v.user_id = u.id group by v.item_id
ALTER TABLE fileinfo ADD INDEX FileHash (FileHash)
UPDATE my_table SET `name` = REPLACE(`name`, '_t_', '_c_')
UPDATE YourTable p JOIN(SELECT t.id,t.name,count(*) as rnk FROM YourTable t INNER JOIN YourTable s on(t.name = s.name and t.id <= s.id) GROUP BY t.id,t.name) f ON(p.id = f.id) SET p.name = concat(p.name,'-',f.rnk) WHERE rnk > 1
set linesize 10000 pagesize 0 embedded on set heading off feedback off verify off trimspool on trimout on termout off set underline off SPOOL myfilename.sql SELECT 'SELECT table_name||'',''||column_name FROM USER_TAB_COLS WHERE ROWNUM < 10;' gen_sql_ FROM DUAL; SPOOL OFF spool results.csv @myfilename.sql SPOOL OFF
SELECT o.customer_id AS customer ,io.id AS item FROM orders o INNER JOIN item_orders io ON io.order_id = o.order_id
;with cte as ( select companyname, sum(credited) sum_credited, sum(used) sum_used from tmptichistory1 group by companyname ) select t1.id, t1.companyname, t1.credited, t1.used, case t1.credited when 0 then 0 else cte.sum_credited end sum_credited, case t1.used when 0 then 0 else cte.sum_used end sum_used from tmptichistory1 t1 join cte on t1.companyname = cte.companyname
/^(?!.*\-\-)(?!.*\/\*)(?!.*\*\/)(?!.*;)(?!.*CREATE)(?!.*DROP)(?!.*ALTER)(?!.*UPDATE)(?!.*DELETE).*$/s
SELECT employee_id SUM(ROUND(CAST(DATEDIFF(MINUTE, start_time, finish_time) AS NUMERIC(18, 0)) / 60, 2)) AS total_h FROM Timesheet t WHERE t.employee_id = @employee_id AND date_worked BETWEEN DATEADD(ww, DATEDIFF(ww,0,GETDATE()) - @Week, 0) AND DATEADD(ww, DATEDIFF(ww,0,GETDATE()) - @Week, 0) + 7
select b.id, sum(case when h.type <> 10 and h.time between '2016-06-01' and '2016-06-31' then h.points else 0 end) as points from brands b left join histories h on b.id = h.brandid and h.userId = $userId and b.active=1 and b.id=$brandId group by b.id
SELECT vg.* FROM video_groups vg WHERE EXISTS (SELECT 1 FROM videos v WHERE v.groupid = vg.id)
SELECT * FROM auctions AS a LEFT JOIN (select auction_id from winners order BY auction_id limit 1) AS w ON a.auction_id = w.auction_id WHERE a.active = 1 AND a.approved = 1 GROUP BY a.auction_id ORDER BY a.start_time DESC
SELECT ProjectEndDt , ProjectRenewalDt , ProjectUpgradeDt FROM tbl_project WHERE CONVERT(VARCHAR(10), DATEADD(DAY, 2, ProjectEndDt)) >= CONVERT(VARCHAR(10), GETDATE());
CREATE TABLE #Temp ( [@name] VARCHAR(200), [Value] VARCHAR(200) ) INSERT INTO #Temp ([@name], [Value]) SELECT 'Fruit', 'Apple' UNION SELECT 'Fruit', 'Orange' UNION SELECT 'Fruit', 'Grape' UNION SELECT 'Building', 'house' Select [@Name], ( SELECT [Value] FROM #Temp t2 where t2.[@Name] = t1.[@Name] FOR XML PATH (''), TYPE ) FROM #Temp t1 GROUP by [@Name] FOR XML PATH ('Produce'), ROOT('ProduceMaster'), TYPE
SELECT VARCHAR_FORMAT(TIMESTAMP_FORMAT(CAST(20121119 AS CHAR(8)), 'YYYYMMDD'), 'MM/DD/YYYY') FROM SYSIBM.SYSDUMMY1
select /* index_ffs (a [name of index]) */ id, rowid from a where id is not null order by id, rowid;
UPDATE Employee SET OrgCode = 4 WHERE OrgCode IS NULL
package My::Schema::Result::Artist; __PACKAGE__->table('artist'); __PACKAGE__->add_columns(id => { ... }, name => { ... }) sub sqlt_deploy_hook { my ($self, $sqlt_table) = @_; $sqlt_table->add_index(name => 'idx_name', fields => ['name']); } 1;
select sort_id, level, security from (select t.*, min(case when authorized = 'U' then id end) over (partition by grp) as minuid from (select t.*, (row_number() over (order by id) - level) as grp from table t ) t ) t where id > minuid;
**USER TABLE** NAME AGE TYPE FK Grant 25 Adult 1 Susan 4 Child null John 65 Adult 2 **EXTRA TABLE** FK CREDITCARD OTHER 1 234234... blah 2 2334... blah
UPDATE _table_ SET Firstname = CONVERT(NVARCHAR(MAX), CONVERT(XML, FirstName)), Lastname = CONVERT(NVARCHAR(MAX), CONVERT(XML, LastName))
SELECT b.acct_no, b.name FROM accounts a INNER JOIN accounts b ON FIND_IN_SET(b.acct_no, a.connected_acct) WHERE a.acct_no = 1;
SELECT st.Id, st.Name, GROUP_CONCAT(ct.ClassId) AS ClassList FROM StudentTable st INNER JOIN ClassTable ct ON st.Id = ct.Id GROUP BY st.Id, st.Name
DECLARE @FirstSaturday DATETIME DECLARE @ENDDATE DATETIME SELECT @FirstSaturday = min(RED1.DATE) FROM REDFRIDAYDATES..TBLREDFRIDAYALLDATES RED1 WHERE Period = 9 AND year = 2009 SELECT @ENDDATE = CASE WHEN getdate() < @FirstSaturday THEN getdate() ELSE @FirstSaturday END
select columns from tablename where columnname like 'A%' and substring(columnname from 5 for 2) in ('AB','CD','EF')
INSERT INTO B SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'A'
select emplid, code, sum(change) over (order by dt) as rnk, dt from ( select emplid, code, case when lag(code) over (order by dt) = code then 0 else 1 end as change, dt from t order by dt );
HOUSEHOLD_ATTRIBUTE_RELATIONSHIP HouseholdID | AttributeID 0 | 0 3 | 2 etc ...
SELECT order_id, item_id FROM orders INNER JOIN items ON (orders.color IS NULL OR orders.color = items.color) AND (orders.size IS NULL OR orders.size = items.size)
select ur1.* from (select u.* from users u order by rank1 desc limit 1000 ) ur1 join (select u.* from users u order by rank2 desc limit 1000 ) ur2 on ur1.username = ur2.username order by ur1.rank1 + ur1.rank2 desc limit 25;
select ct.CountryId,max(ct.Name) from Country ct left join City c on ct.CountryId=c.CountryId left join Airport a on a.CityId=c.CityID group by ct.CountryId HAVING max(a.AirportID) IS NULL
EXPLAIN SELECT * FROM `test` USE INDEX (number) WHERE (`text` = 'bbbb' AND `number` = 1); or EXPLAIN SELECT * FROM `test` USE INDEX (text_number) WHERE (`text` = 'bbbb' AND `number` = 1);
SELECT P.[Name]+' - '+P.[Description] AS Sprint, ISNULL(S.Number, 'KanBan') AS Story, T.[Name] AS Task FROM DailyTaskHours D INNER JOIN Task T ON D.TaskId = T.PK_Task INNER JOIN Story S ON T.StoryId = S.PK_Story LEFT JOIN Sprint P ON S.SprintId = P.PK_Sprint GROUP BY P.[Name], P.[Description], S.[Number], T.[Name]
l_res := DBMS_LDAP.simple_bind_s(ld => l_session, dn => l_domain || '\' || l_account_name, passwd => l_password)
| ADD {INDEX|KEY} [index_name] [index_type] (index_col_name,...) [index_option] ...
select AEType,count(*) from Table_Name group by AEType;
SELECT PR.*, ( SELECT PM.image FROM project_media PM WHERE PR.project_id = PM.project_id ORDER BY PM.project_media_id DESC LIMIT 1 ) AS image FROM ( SELECT P.project_id, P.completed FROM project P ORDER BY P.completed DESC LIMIT 5 ) AS PR
select * FROM MyTable where (housenr !~ '^[0-9]+$')
SELECT user_id,name,GROUP_CONCAT(value SEPARATOR ',')as field FROM users u JOIN fields f ON u.user_id=f.unser_id GROUP BY user_id
CREATE TABLE table1( id1 INT(11) NOT NULL, id2 INT(11) NOT NULL AUTO_INCREMENT, PRIMARY KEY (id1, id2) ); INSERT INTO table1 VALUES (1, NULL); INSERT INTO table1 VALUES (1, NULL); INSERT INTO table1 VALUES (2, NULL); INSERT INTO table1 VALUES (2, NULL); SELECT * FROM table1; +-----+-----+ | id1 | id2 | +-----+-----+ | 1 | 1 | | 1 | 2 | | 2 | 1 | | 2 | 2 | +-----+-----+
SELECT * FROM table1 WHERE (( chapter = 1 AND sentence >= 3 ) OR chapter > 1) AND (( chapter = 3 AND sentence <= 4 ) OR chapter < 3)
DELETE FROM Table t1 WHERE EXISTS (SELECT 1 from Table t2 WHERE t1.Column2 = t2.Column2 AND t2.Id + 1 = t1.Id)
select player_id, runs, count(*) as numruns from (select p.*, (row_number() over (partition by player_id order by match_date) - row_number() over (partition by player_id, runs order by match_date) ) as grp from players p ) pg group by grp, player_id, runs order by numruns desc limit 1;
select item, date, ruunit, fdhunit, difference from t union all select item, date, null, null, runit - fdhunit from t order by item, (case when runit is not null then 1 else 2 end);
select mytable.Title, MAX(mytable.Date) from mytable group by mytable.Title
Select o.date_created, o.buyer_name, (select max(date_created) from orders where buyer_name = o.buyer_name) as most_recent_date From ORDERS o Order By most_recent_date, o.buyer_name, o.date_created Desc
For example, to specify two parameters, “ReportMonth” and “ReportYear”, defined in a report, use the following URL for a native mode report server: http://myrshost/ReportServer?/AdventureWorks 2008R2/Employee_Sales_Summary_2008R2&ReportMonth=3&ReportYear=2008
SELECT * FROM Hotels H INNER JOIN ( SELECT hotel_id FROM hs_hotel_options WHERE option_id IN (1, 3, 5) GROUP BY hotel_id HAVING COUNT(*) = 3) req_options ON h.hotel_id = req_options.hotel_id
SELECT u.NAME, (SELECT (RTRIM(XMLAGG(xmlelement(X, APPLICATIONS.APPLICATION||',')order by APPLICATIONS.APPLICATION).extract('//text()'),',')) FROM HAS_APPLICATIONS LEFT JOIN APPLICATIONS ON HAS_APPLICATIONS.USER_ID = APPLICATIONS.ID WHERE HAS_APPLICATIONS.USER_ID = u.ID) FROM USERS u
WITH sq1 AS (SELECT company, COUNT (*) AS count FROM (SELECT CASE WHEN COUNT (*) OVER (Partition By company) > 5 THEN company ELSE 'other' END AS company, id FROM table) GROUP BY company) SELECT null link, company label, count value FROM sq1 ORDER BY count desc
SQL> SELECT to_number('00123') num FROM dual; NUM ---------- 123 SQL> SELECT * FROM dual WHERE to_number('00123') = 123; D - X
SELECT max( P.PROD_DESC), SUM(O.QTY) FROM PRODUCTS_TBL AS P LEFT JOIN ORDERS_TBL AS O ON P.PROD_ID = O.PROD_ID GROUP BY P.PROD_ID ORDER BY P.PROD_ID;
INSERT INTO parenttest (mydata) VALUES ('rootnode'), ('child1'), ('child2'), ('child2.1'), ('child2.2'); UPDATE parenttest SET parent = (select id from parenttest pt where (pt.mydata = 'rootnode' and parenttest.mydata in ('child1','child2')) or (pt.mydata = 'child2' and parenttest.mydata in ('child2.1','child2.2'))) WHERE mydata in ('child1', 'child2', 'child2.1', 'child2.2');
INSERT INTO table VALUES ('this is a string with a newline');
SELECT lvl, unique_code, ( SELECT max(p.unique_code) FROM tree p WHERE p.lvl = t.lvl - 1 AND p.unique_code < t.unique_code ) AS parent_unique_code FROM tree t
SELECT string_agg(tags::text,',')::hstore FROM mapfeatures_20120813;
R1 <(E M), {E → M}> R2 <(E L T), {L T → E, E T → L}>
SELECT ID, Code, CompareWithField FROM `data` WHERE Indexed = 0 and code = 142 and NULLIF(CompareWithField,2.26) is not null
select Kode_AK, dateTime_entry, Nama from ( select ROW_NUMBER () over ( partition by Kode_AK order by dateTime_entry desc ) rn, Kode_AK, Nama, dateTime_Entry from LOG_NAMA ) A where rn = 1
SELECT CONVERT(date, GetDate() - 912) AS calcDate ,DATEDIFF(DAY, GetDate() - 912, GetDate()) diffDays ,DATEDIFF(DAY, GetDate() - 912, GetDate()) / 365.0 diffDaysCalc ,DATEDIFF(MONTH, GetDate() - 912, GetDate()) diffMonths ,DATEDIFF(MONTH, GetDate() - 912, GetDate()) / 12.0 diffMonthsCalc ,DATEDIFF(YEAR, GetDate() - 912, GetDate()) diffYears
SELECT C.custid, COUNT(DISTINCT O.orderid) as numorders, SUM(OD.qty) as totalqty FROM Sales.Customers AS C INNER JOIN Sales.Orders AS O ON C.custid = O.custid INNER JOIN Sales.OrderDetails AS OD ON O.orderid = OD.orderid WHERE country = 'USA' GROUP BY C.custid ORDER BY C.custid;
SELECT ename, deptno, sal, comm FROM emp WHERE (sal, comm) IN (SELECT sal, comm FROM emp WHERE deptno = 30)
SELECT id, start_datetime, end_datetime, arena_surface_id FROM gce_arena_surface_booking WHERE ('2012-11-23 6:00' > start_datetime) AND ('2012-11-23 2:00' < end_datetime) AND arena_surface_id = 2
;With OrgChart as ( SELECT id,id as BaseID FROM employee WHERE Active=1 UNION ALL SELECT e.ID, g.BaseID as BaseID FROM employee e JOIN OrgChart g on e.supervisorid=g.id WHERE e.Active=0 ), ForUpd as (SELECT ID,BASEID FROM OrgChart WHERE ID<>BAseID) UPDATE A SET empid = B.baseID FROM component A JOIN ForUpd B ON A.empid = B.id
INSERT INTO BATCH_ID (distinct_bench), number) SELECT benchID as distinct_bench, COUNT(*) number FROM big_table GROUP BY BATCH_ID
select table_name , column_name ,to_number(extractvalue( xmltype(dbms_xmlgen.getxml( 'select count(*) c from '||owner||'.'||table_name ||' WHERE extract(year from ' || column_name || ') < 1753' )) ,'/ROWSET/ROW/C')) as count1 from all_tab_cols where data_type = 'DATE' and OWNER = 'OWNER_NAME'
sqlplus username/password@database @myscript.sql >/dev/null 2>&1
SELECT Name FROM Names n WHERE EXISTS (SELECT NameIDs FROM NameList nl WHERE n.nameID LIKE '%'+nl.nameIDs+'%');
select v.text_value as volume_value, i.text_value as issue_value from ( select item_id, text_value from metadatavalue where metadata_field_id = 90) v full join ( select item_id, text_value from metadatavalue where metadata_field_id = 91) i using (item_id)
select t1.pID, t1.name, t1.period, CASE t1.period WHEN 1 THEN t2.p1 WHEN 2 THEN t2.p2 WHEN 3 THEN t2.p3 END as NewVal from t1 inner join t2 on t2.pID = t1.pID;
SELECT TRUNC(SYSDATE - (LEVEL * 7), 'IW') TheDate FROM dual CONNECT BY LEVEL <= 7
RAISERROR (N'Running...', 0, 0) WITH NOWAIT;
SELECT * FROM messages WHERE MessageId IN ( SELECT DISTINCT CASE WHEN m2.MessageId IS NULL THEN m1.MessageId WHEN m1.MessageId > m2.MessageId THEN m1.MessageId ELSE m2.MessageId END FROM messages m1 LEFT JOIN messages m2 ON (m1.FROMUSERID = m2.ToUserId AND m2.FROMUSERID = m1.ToUserId AND m1.MessageId != m2.MessageId) ) -- AND (messages.FROMUSERID = 123 or messages.ToUserId = 123)
select (case when code is not null then row_number() over (partition by (case when code is not null then 1 else 0 end) order by . . . ) end) as id
SELECT A.ICAO, A.IATA, A.AIRPORT_NAME, A.CITY, A.COUNTRY, A.REVISED_DATE FROM AIRPORT_CHECKLIST A LEFT JOIN AIRPORT_CHECKLIST_SELECTED B ON A.ICAO = B.ICAO WHERE A.COMPANY = 'TOM' AND B.ICAO IS NULL;
select Users.user_id, Photo.photo_id from Photo inner join Users on Users.user_id = Photo.user_id where Users.user_name = 'YOUR NAME HERE'
GROUP BY YEAR(t.summaryDateTime), MONTH(t.summaryDateTime) DESC;
SELECT DocNum, STUFF((SELECT ', ' + CAST(DocEntry AS VARCHAR(MAX)) AS [text()] FROM Temp5 b WHERE a.DocNum = b.DocNum FOR XML PATH('')), 1, 2, '') AS DocEntry FROM Temp5 a GROUP BY DocNum
select Candidate, CPEVENT, Test_Number, DosedTime, DoseTime, ExpectedTime, s.Timepoint as tmpt, t.Timepoint as tmpt1, CASE WHEN t.Timepoint IS NULL THEN 'Not Collected' WHEN s.timepoint IS NULL THEN 'Not Collected' ELSE 'Collected' END as Timepoint_Collection, case when t.timepoint is null THEN s.timepoint WHEN s.timepoint IS NULL THEN t.Timepoint WHEN s.timepoint = t.TIMEPOINT THEN s.timepoint END as Timepoint from vw_data s FULL OUTER JOIN lu_pk_Timepoint t on s.PCTPT = t.Timepoint AND s.STUDY=t.Study
select tableName, (select sum(numallocatedpages * pagesize) from new org.apache.derby.diag.SpaceTable('APP', t.tablename) x) as size from SYS.SYSTABLES t order by size desc
SELECT ( SELECT SUM(col1 + col2) FROM tableA ) - ( SELECT SUM(total) FROM tableB WHERE color NOT LIKE '%black' AND model NOT LIKE 'CF%' ) AS result
mysqldump --defaults-extra-file=/home/username/.my.cnf database table > table.sql
select el.data from event_list el join event_default ef on el.id = ef.default_id
WITH mycte AS ( SELECT DATEADD(ww, DATEDIFF(ww,0,CAST('2010-12-01' AS DATETIME)), 0) DateValue UNION ALL SELECT DateValue + 7 FROM mycte WHERE DateValue + 7 < '2016-12-31' ) SELECT DATEPART(iso_week, DateValue) as week, DATEPART(year, DateValue) as year, DateValue FROM mycte OPTION (MAXRECURSION 0);
SELECT p.ProductID, p.ProductTypeID, m.Margin, d.BiggestDiscount, m.Margin - d.BiggestDiscount AS AdjustedMargin FROM Product p INNER JOIN Discounts m ON (p.ProductID = d.ProductID) INNER JOIN ( SELECT ProductTypeID, MAX(discount) as BiggestDiscount FROM SellingPriceRules GROUP BY ProductTypeID ) d ON (p.ProductTypeID = d.ProductTypeID) WHERE p.ProductID IS NOT NULL
SELECT sales_person_id, CASE WHEN sales > 30000 AND city = 'Georgia' THEN 10 WHEN sales > 50000 and city = 'Atlanta' THEN 7 WHEN sales > 25000 and city = 'Tampa' THEN 5 END AS value FROM promotions
SELECT col1, col2, col3, count(*) AS ct FROM tbl GROUP BY 1, 2, 3 ORDER BY 1, 2, 3;
WHERE YEAR(dtColumn) between 2003 and 2005
SELECT * from table1 WHERE md5sum LIKE '00%' AND status = 'Ok' ORDER BY md5sum, status ;
SELECT SUBSTRING_INDEX(code, ':', 1) AS dept SUBSTRING_INDEX(code, ':', -1) AS sr_no FROM mytable ORDER BY sr_no
Script Table as -> CREATE To -> New Query Editor Window
my $var = $ARGV[3]; # Copying your example my $sql = "select * from table1 where key1=?"; my $sth = $dbh->prepare($sql); # You forgot 'my' in your code! $sth->bind_param( 1, $var ); # 1 is the first instance of "?" in query. $sth->execute();
<changeSet author="ME" id="PK_CREATION"> <createIndex tableName="MY_TABLE" indexName="MY_INDEX" unique="true"> <column name="ID" /> </createIndex> <addPrimaryKey tableName="MY_TABLE" columnNames="ID" constraintName="MY_PK" forIndexName="MY_INDEX" /> <rollback> <dropPrimaryKey tableName="MY_TABLE"/> </rollback> </changeSet>
SELECT TableA.Id FROM TableA WHERE NOT EXISTS ( SELECT 1 FROM TableB WHERE TableB.Month_Id = TableA.Month_Id AND TableB.Customer_Id = TableA.Customer_Id AND TableB.Total_Amount = TableA.Total_Amount )
SELECT a.EMPLOYEENUMBER, b.DATE, a.ABSENCETYPE, a.APPROVED FROM Table1 a JOIN Calendar b ON b.Date BETWEEN a.FIRSTDAYOFABSENCE AND a.LASTDAYOFABSENCE
Update table_name set col1='some_value' output inserted.*
SELECT COUNT(*)-COUNT(A) As A, COUNT(*)-COUNT(B) As B, COUNT(*)-COUNT(C) As C FROM YourTable;
select n from ( select rownum n from dual connect by level <= 25) where n not in (select id from table);
UPDATE <table> SET expiry_date = DATE_ADD(expiry_date , INTERVAL 7 DAY) WHERE DATE(expiry_date) >= DATE(NOW());
select cast(created as date), count(*) from users group by cast(created as date)
SELECT t1.*, t2.company AS default_insurance_company FROM default_profiles t1 LEFT JOIN default_insurance t2 ON t1.uid = t2.id WHERE t1.uid = 1
Table: Region Cols: ID, RegionName, State, etc... Table: NewsLetter Cols: ID, NewsLetterName, ect... Table: Map_Region_NewsLetter Cols: ID, RegionID, NewsLetterID
Select Precincts.precinctid,Residences.unique_resadd,Precincts.count_prcnt,(Precincts.precinctID::float8 / Residences.precinctID::float8) AS PCT From Residences,Precincts Where Precincts.precinctID = Residences.precinctID ORDER BY Precincts.precinctid;
SELECT AllocationBalance.SecondRef, StockItem.Code, MAX(dbo.BomRecord.Description) as Description FROM [YOUR_TABLES] -- including joins WHERE (AllocationBalance.RecipientName = 'BOM') AND (StockItem.Code LIKE '%ZW01008%') GROUP BY AllocationBalance.SecondRef, StockItem.Code
SELECT i.* FROM invoices i JOIN (SELECT order_id, MAX(created_at) created_at FROM invoices GROUP BY order_id) ii ON ( i.order_id = ii.order_id AND i.created_at = ii.created_at )
INSERT INTO FOO (ID, TotalQuantity) SELECT e.ID, SUM(e.Quantity) as TotalQuantity FROM (select o.ID, h.n.value('TotalQuantity[1]/.', 'int') as TotalQuantity FROM dbo.OtherTable o INNER JOIN FOO f ON o.ID = f.ID CROSS APPLY o.XmlColumn.nodes('(item/.../salesorder/)') h(n) WHERE f.ID = null ) as E GROUP BY e.ID
(case when left(str1, 10) = left(str2, 10) then 10 when left(str1, 9) = left(str2, 9) then 9 ... when left(str1, 1) = left(str2, 1) then 1 else 0 end)
declare @name varchar(45) set @name = 'johnson' IF( @name LIKE '%John%' ) BEGIN print 'like' END ELSE BEGIN print 'dislike' END
Dim command As New SqlCommand command.CommandText = "SELECT * FROM tblMeter WHERE (Date >= @startDate) AND (Date < @endDate)" command.Parameters.AddWithValue("@startDate", startDateTimePicker.Value) command.Parameters.AddWithValue("@endDate", endDateTimePicker.Value)
> user = db.users.findOne({'nickname': 'user1'}) > user.nickname = 'userX' > delete user['_id'] > db.users.insert(user)
update table1 set expiration_date = effective_date + 1/24/3600 where <somecondition> and for next row: effective_date = old_exp_date + (1/24/3600)+rownum , expiration_date = effective_date + (1/24/3600)+rownum
SELECT ISNULL(p.someValue, d.someValue) FROM DepartmentRelatedTable d LEFT JOIN ProductRelatedTable p on (d.ProductId = p.ProductId) WHERE d.ProductId = <some id here>
var result = tableName.Where(x => (from t in tableName group t by t.MyID into g where g.Max(y => y.MyDate) == x.MyDate select 1).Any())
SELECT GROUP_CONCAT(id_count SEPARATOR ', ') FROM (SELECT CONCAT('id(', id, ') = ', count(type)) id_count FROM T GROUP BY id) data
select bid.* from (select itemid, substring_index(group_concat(id order by amount desc, updateddate asc, tiebreak desc), ',', 1) as id from bid group by itemid ) b join bid on b.itemid = bid.itemid and b.id = bid.id;
set echo off set feedback off set linesize 1000 set pagesize 0 set sqlprompt '' set trimspool on set headsep off spool output.csv select 'col1,col2,col3' from dual; select col1 || ',' || col2 || ',' || col3 from bigtable; spool off
SELECT COUNT(*) FROM member inner join mmship ON member.member_Id = mmship.member_Id INNER JOIN mshipstatus ON mshipstatus.mshipstatus_Id = mmship.mshipstatus_Id WHERE mshipstatus.mshipstatusname = 'prospective' AND MONTH(mmship.mmshipstart_date) = MONTH(GETDATE())
UPDATE [Temp].[dbo].[OfficeFloor] SET [floor]= '32' + nchar(0x207F) + nchar(0x1d48) + ' floor' WHERE [Name] = 'Paul D.';
where g.group_id = :p2_x
SELECT g.* , r.rol_display_name , u.usr_fname FROM groups g JOIN groups_roles gr on g.id = gr.groups_id JOIN roles r on r.id = gr.roles_id LEFT JOIN users u on g.grp_manager_id = u.id
SELECT COUNT(customerid) AS `count`, datecreated, SUM(`recordtype` = 'C') AS CountOfC, SUM(`recordtype` = 'L') AS CountOfL FROM `tbl_customers` WHERE `datecreated` BETWEEN '$startdate."' AND '".$enddate."' GROUP BY `datecreated` ASC
SELECT * FROM Vehicle v INNER JOIN Info i ON v.id = i.vehicle_id INNER JOIN Axle1 a1 ON i.vehicle_id = a1.vehicle_id INNER JOIN Axle2 a2 ON a1.vehicle_id = a2.vehicle_id
select t.*, maxcol from t cross apply (select max(col) as maxcol from (values (fieldA), (fieldB), (fieldC) ) v(col) ) m;
SELECT * FROM tabl WHERE val COLLATE Latin1_General_BIN LIKE '%[^A-Za-z0-9 _]%'
SELECT * FROM Availability WHERE NOT EXISTS ( SELECT 1 FROM Appointment WHERE Appointment.AppointmentTime = Availability.AvailabilityTime AND Appointment.EmployeeID = Availability.EmployeeID )
SELECT * FROM ( select c.lastname, sum(cs.amount) from customersales cs join customers c on c.idcustomer=cs.idcustomer /* where 1=0 */ group by c.idcustomer, c.lastname ) x WHERE 0=1
SELECT a.width, a.height FROM assigned_ads aa INNER JOIN ads a ON aa.ad_id = a.id WHERE aa.id = 123 -- Your value goes here.
ORDER BY STR_TO_DATE(date,'%d/%m/%Y') DESC
-- CREATE A STRING TO SPLIT WITH OVER 100 DELIMITERS DECLARE @s VARCHAR(1000) = 'a' SELECT @s = @s + ',a' FROM master..spt_values WHERE type= 'p' AND number BETWEEN 1 AND 150 --SPLIT LONG STRING SELECT * FROM dbo.splitString(@s, ',') OPTION (MAXRECURSION 0) -- NO LIMIT
Update [dbo].[Category] SET ProductGroup_Keywords = coalesce( ProductGroup_Keywords, '') + 'football' WHERE Category_ID = 101'
SELECT user_id, average_score = AVG(score) FROM ( SELECT user_id, score FROM test_score1 UNION ALL SELECT user_id, score FROM test_score2 ) AS subquery GROUP BY user_id
EXEC sp_rename 'Stu_Table', 'Stu_Table_10'
class Foo(Base): id = Column(Integer, Sequence('foo_seq', optional=True), primary_key=True) ...
select t2.*, case when t1.deal_id is null then 'do not exist' else 'exists' end as status from lookup_table as t1 left join deals as t2 on t1.deal_id=t2.deal_id and t1.deal_id and t2.run_id = 2550 where ('4385601', '4385602', ...) ;
create table special_number (id serial, num varchar(100) not null); create unique index special_number_num on special_number(num); copy special_number(num) from '/tmp/data.txt'; -- 1 special number per file line create sequence num_seq; select num from special_number where id = (select nextval('num_seq'));
SELECT ( SELECT [customer] ,( SELECT [id] AS [@id], [Item] AS [data()] FROM @OrderDetail od WHERE od.fk_Order = ot.id FOR XML PATH('d'),TYPE ) FROM @OrderTbl ot FOR XML PATH('c'),TYPE ) FOR XML PATH('b'), ROOT('a')
CASE WHEN status = 3 THEN 'Done' WHEN status = 0 THEN 'Pending' END
SELECT * FROM posts p WHERE NOT EXISTS( SELECT 1 FROM comments c WHERE c.comment_date >= 'deadline' AND p.post_id = c.post_id )
SELECT salesperson, SUM(total), SUM(Units) FROM ( SELECT salesperson, Amount as total, Units FROM Transactions UNION ALL SELECT salesperson, Profit as total, 0 as Units FROM Connections ) T GROUP BY salesperson
where (@FromDate is null or ([Created] between @FromDate and @ToDate)) or ((@requestId is null or Id=@requestId) and @FromDate is null) ----mix @requestId & @FromDate
DVD_Id Genre_Id 1 4 1 5 1 6
SELECT QO.Question_ID, QO.Option_Label as Choice, COUNT(*) as VotesMale FROM Question_Options QO LEFT JOIN Session_Answers SA ON QO.ID = SA.Option_ID JOIN [Session] S ON S.ID = SA.Session_ID AND S.Gender = 'M' WHERE QO.Question_ID = 10114<---the Question ID GROUP BY QO.Question_ID, QO.Option_label
WHERE COALESCE(child_tab.parent_id, child_tab2.parent_id) IS NOT NULL
SELECT A.UserName, A.HostName, B.ServerName FROM Table1 AS A INNER JOIN Table2 AS B ON A.ServerID = B.ServerID
SELECT * FROM users WHERE DATE_ADD(signup_date, INTERVAL 30 DAY) <= NOW()
select p.*, coalesce(t1.p_count,0) from post_categories p left join ( select post_category_id, count(*) p_count from posts group by post_category_id ) t1 on t1.post_category_id = p.id
WITH uniquez as (SELECT timestamp, drivers_license, rank() over (ORDER BY timestamp, drivers_license) as counterz FROM ticketTable) UPDATE ticketTable TT SET stop_id = uniquez.counterz WHERE uniquez.timestamp = TT.timestamp AND uniquez.drivers_license = TT.drivers_license
CREATE PROC P @Date DATE AS BEGIN SELECT Cast(count(*) as varchar(8)) + ',' + Cast(Sum(trans_amount) as varchar(8)) as SalesData FROM PD_Transaction WHERE pd_Trans_CreatedOn BETWEEN CONVERT(datetime, CONVERT(VARCHAR(10), @Date, 121) + ' 00:00:00', 121) and CONVERT(datetime, CONVERT(VARCHAR(10), @Date, 121) + ' 23:59:59', 121) END
with anchor as ( select @y as num ), progression as ( select num from anchor union all select num * @z from progression where num * @z <= @x ) select case when exists (select 0 from progression where num = @x) then 1 else 0 end
create table Student StudentId int primary key MendtorId int foreign key references Student.StudentId
SELECT * FROM countries ORDER BY title='Italy' DESC, title
SELECT u.id, u.user_name, u.first_name, u.last_name, g.* FROM vtigercrm600.vtiger_users u LEFT JOIN vtigercrm600.vtiger_users2group ug on u.id = ug.userid LEFT JOIN vtigercrm600.vtiger_groups g on ug.groupid = g.groupid WHERE u.id = 5;
SELECT * FROM (SELECT to_char(n) as n, s FROM t) UNPIVOT (anywhere FOR col IN (...));
SELECT to_char(trunc(request_date),'YYYY-MM-DD HH24:MI:SS') date_time
UPDATE table1 SET col1 = YourCount, col2 = YourAverage, col3 = YourSum FROM table1 t1 INNER JOIN ( SELECT table2Id, COUNT(*) AS YourCount, AVG(someCol1) YourAverage, SUM(someCol2) YourSum FROM table2 GROUP BY table2Id ) t2 ON t1.table1Id = t2.table2Id
WHERE hashtag REGEXP (select GROUP_CONCAT(name SEPARATOR '|') from hashtags where hid = 1)
where itemId = @itemId
select * from my_table where field rlike 'apple|orange';
scale ≡ fractionDigits precision ≡ totalDigits
time_created < (NOW() - INTERVAL if(WEEKDAY()=..., 5, else if 6, else if 7) DAY)
SELECT account, telephone, "<a href='"+communityURL+"'>"+community+"</a>" as CommunityCol, status FROM myTable ORDER BY account
;with cte as ( select top (@MaxRecords) status from Messages where Status = 'N' and InsertDate >= getdate() order by ... ) update cte set status = 'P' output inserted.*
SELECT foo FROM bar JOIN quux WHERE x = y;
SELECT * from tblname where amount=FLOOR(amount)
SELECT CHR(ASCII('a') + 1) FROM dual
CREATE TRIGGER product_increase_likes AFTER INSERT ON Likes FOR EACH ROW BEGIN UPDATE Products SET likes_count=likes_count+1 WHERE id=NEW.product_id END; CREATE TRIGGER product_decrease_likes AFTER DELETE ON Likes FOR EACH ROW BEGIN UPDATE Products SET likes_count=likes_count-1 WHERE id=OLD.product_id END;
(((A - B) U B) - A)
//define parameter command.Parameters.Add("@shape", SqlDbType.NVarChar); // //code in between omitted // //set value of parameter command.Parameters["@shape"].Value = feature.Geometry.AsText();
SELECT * FROM Users WHERE id >= 34 ORDER BY id ASC LIMIT 20
SELECT row_number,value FROM <table> t1 WHERE value is not NULL OR EXISTS (select * FROM <table> t2 where t2.value is not null and t2.row_number < t1.row_number)
DECLARE @sql varchar(4000); SET @sql = 'INSERT INTO provaxml (arquivo) SELECT CAST(BulkColumn AS XML) FROM OPENROWSET(BULK ''' + @nome + ''', SINGLE_BLOB) as arquivo'; EXEC( @sql );
RAISERROR( 'Just to print everything',0,1) WITH NOWAIT
select rownum from dba_objects, dba_objects where rownum <= 9000;
SELECT * FROM MyTable WHERE LOWER(name) LIKE '%jack%';
SELECT MAX( CAST( SUBSTRING(CourseNumber, 4) AS UNSIGNED) ) FROM courses WHERE CourseNumber RLIKE 'ZZ'
UPDATE Team SET GroupID = CAST(RAND(CHECKSUM(NEWID()))*10000000 AS INT) WHERE GroupID IN (SELECT GroupID FROM Team GROUP BY GroupID HAVING COUNT(GroupID)<4)
abort; *** ABORT signal received. *** Warning: Canceling the rest of the output. BTEQ -- Enter your SQL request or BTEQ command:
SELECT * FROM TABLE( REGEXP_SPLIT_TO_TABLE('2625 1410', '2625 1410', '[ \t\r\n\v\f]' , 'i') RETURNS (outkey VARCHAR(250) CHARACTER SET UNICODE ,token_ndx INTEGER ,token VARCHAR(220) CHARACTER SET UNICODE ) ) AS t1;
SELECT a.id, X.chapterno, X.mid, X.hitcount FROM (select chapterno, max(hitcount) as hitcount from chapter WHERE mid = 2524 group by chapterno)X INNER JOIN chapter a ON (a.chapterno = X.chapterno AND a.mid=X.mid) ORDER BY X.chapterno DESC
var result = from timesheet in reslandentity.TIMESHEET join tlog in reslandentity.TIMESHEET_LOG on timesheet.ID equals tlog.TIMESHEET_ID group tlog by tlog.STAT into g select new { Stat = g.Key, Count = g.Count() };
select Student_Name, Student_Email, (select count(*) from Enrollment e where e.student_id = s.student_id ) Number_Of_Enrollments from Student e
SELECT t1.column_name, ch.id FROM information_schema.Columns t1 LEFT JOIN checkbox ch ON t1.column_name = ch.column WHERE t1.table_name = 'tab_col' ORDER BY t1.column_name;
create table #SearchSet(Item varchar(10) primary key); insert into @SearchSet(Item) values(('AA'),('BB'),('CC'),('DD22'),('AC123'),('456AA'),('125AA15'),('A154A'),('DDSSAA'),('55KKAA'));
CREATE TABLESPACE MYAPP DATAFILE '/mnt/data/app/oracle/oradata/MYAPP_02.dat' SIZE 100M AUTOEXTEND ON; alter tablespace MYAPP add datafile '/mnt/data/app/oracle/oradata/MYAPP_01.dat'; drop tablespace MYAPP including contents and datafiles;
alreadyExists bool (string _firstName, string _lastName) { //implement a connection (con) //implement a command (cmd) cmd.CommandText = @"SELECT firstName, lastName, age, height from yourTableName WHERE firstName = _firstName AND lastName = _lastName"; //^ it will return firstName, lastName, age, and height from the table if it already contains a record in names you ve given in parameters //return true if command has returned something //or return false otherwise }
SELECT DeviceName, SUM(CASE WHEN JobType = 'copy' THEN PageCount ELSE 0 END) AS Copy, SUM(CASE WHEN JobType = 'print' THEN PageCount ELSE 0 END) AS Print FROM Tracking GROUP BY DeviceName
SELECT (SUM(happy_or_sad = 'no') / COUNT(*)) * 100 AS percentage_no, (SUM(happy_or_sad = 'yes') / COUNT(*)) * 100 AS percentage_yes, (SUM(happy_or_sad = 'sometimes') / COUNT(*)) * 100 AS percentage_sometimes, FROM survey_result
SELECT GetName (empno) name , amount FROM bonus;
SELECT * FROM myTable WHERE gender = 1;
where Docstatus = 'A' AND DateDiff(day, GETDATE(), ProposedComplete) = 9
SELECT A.Month, ISNULL(B.countvalue,0) Count FROM (SELECT 1 AS MONTH UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION SELECT 11 UNION SELECT 12 ) A LEFT JOIN (SELECT datepart(month,Startdate) AS Month, Count(ID) as countvalue FROM yourTable GROUP BY datepart(month,Startdate))B ON A.month = B.month
WITH RECURSIVE recursetree(level_id, levelparent) AS ( SELECT level_id, parent_level FROM level WHERE level_id = 197 UNION ALL SELECT t.level_id, t.parent_level FROM level t JOIN recursetree rt ON rt.levelparent = t.level_id -- join condition fixed and ANSI-ified above ) SELECT * FROM recursetree;
mysql -u... -p my_database < file.sql
select c1.comment_content, c1.comment_date, c1.comment_author from comments c1 left join comments c2 on c1.comment_author = c2.comment_author and c1.comment_date < c2.comment_date where c2.comment_author is null order by c1.comment_date desc limit 10
Update table set a= 0-a where a >0
SELECT Y.UserID, Y.UserName, QuestionName = 'AnswerToQuestion' + X.Which, Response = CASE X.Which WHEN '1' THEN AnswerToQuestion1 WHEN '2' THEN AnswerToQuestion2 WHEN '3' THEN AnswerToQuestion3 END FROM YourTable Y CROSS JOIN (SELECT '1' UNION ALL SELECT '2' UNION ALL SELECT '3') X (Which)
street|zip ----------- 'a' |0 'b' |0 'c' |null null |0 null |null 'f' |1
select table_name from information_schema.tables where table_schema="yourDbName" and table_name like '" . $tbl . "_gw%' order by create_time;
SELECT T1.* FROM (SELECT TOP X Id, Title, Comments, CreatedDate FROM MyTable WHERE CreatedDate > @OlderThanDate ORDER BY CreatedDate) T1 ORDER BY CreatedDate DESC
create table VersionHistory ( Version int primary key, UpgradeStart datetime not null, UpgradeEnd datetime );
select COUNT(distinct ss.year_ordered) as sales_count, ss.userID from subscriber_sub ss where ss.date_deleted is null and ss.year_ordered > 2007 group by ss.userID having COUNT(distinct ss.year_ordered) >= ( select 2014 - 2008 )
UPDATE Test SET isNotGood = 1 WHERE te_id in (select employee_id from [Big Table] bt left join table1 as W on W.s_id = bt.employee_Id left join table2 as K on K.s_id = bt.employee_Id left join table3 as R on R.s_id = bt.employee_Id where (bt.status <> W.status and W.status is not null) or (bt.status <> K.status and k.status is not null) or (bt.status <> R.status and R.status is not null);
SELECT value FROM settings WHERE name = 'servername'
select maker from table where type = 'pc' and model >= 700 -- Should be Speed in this line? group by maker having count(distinct model) >= 2
select count(*) from ( select to_there from edges where from_here = 1 union select from_here from edges where to_there = 1 ) as whatever
SET @oldTable = 'a_b'; SET @newtable = 'b_b'; SET @sql = CONCAT('RENAME TABLE ', @oldTable, ' TO ', @newtable); PREPARE stmt1 FROM @sql; EXECUTE stmt1;
SELECT B.Department, DateAdd(month, (B.Year - 1900) * 12 + M.Mo - 1, 0) [Date], M.Balance FROM dbo.Budget B CROSS APPLY ( VALUES (1, Month1), (2, Month2), (3, Month3), (4, Month4), (5, Month5), (6, Month6), (7, Month7), (8, Month8), (9, Month9), (10, Month10), (11, Month11), (12, Month12) ) M (Mo, Balance);
SELECT COMPANY_NAME, ENROLLMENT_FEE, COUNT(COMPANY_NAME) AS NR_OF_MEMBER FROM COMPANY GROUP BY COMPANY_NAME, ENROLLMENT_FEE ORDER BY NR_OF_MEMBER DESC LIMIT 1;
SELECT a.question, a.answer_id, a.user_id, a.totalvotes FROM ( SELECT a.question, b.answer_id, c.user_id, COUNT(d.vote_id) AS totalvotes FROM questions a LEFT JOIN answers b ON a.question_id = b.question_id LEFT JOIN users c ON b.user_id = c.user_id LEFT JOIN votes d ON b.answer_id = d.answer_id GROUP BY a.question, b.answer_id ORDER BY RAND() ) a GROUP BY a.question
select * from ( select id , substr(id,0,3),rank() over ( partition by substr(id,0,3) order by id) rank from mytable WHERE ID LIKE 'R43%' OR ID LIKE 'D32%' OR ID LIKE 'F22%') where rank = 1
select requirements.description from requirements inner join advancement_requirements on requirements.requirement_id = advancement_requirements.requirement_id inner join advancements on advancement_requirements.advancement_id = advancements.id WHERE advancements.id = 1;
SELECT people.fname, hats.hat FROM people INNER JOIN hats_collection ON hats_collection.person_id = people.person_id INNER JOIN hats ON hats_collection.hat_id = hats.hat_id WHERE people.person_id = 1;
select convert(date, left('29-01-2008 AM 12:00:00', 10), 105)
SELECT id, SUM(amount) AS amount FROM yourtable GROUP BY id
lv.setOnItemClickListener(new OnItemClickListener(){ public void onItemClick(AdapterView<?> parent, View view, int position, long id) { String rowData = (String) lv.getItemAtPosition(position); //you'll need to make the lv as final String[] data = rowData.split(" "); //split the result using the spaces (so you could obtain the name, hotness and the other string you use) entry.createEntry(data[0], data[1]); }
declare @userId table (uid int) declare @feedId table (id int) insert into @userid(uid) select id from Users where name = @userName insert into @feedid(id) select feedid from userstofeed where userid in (select uid from @userId) select * from feed where id in (select id from @feedId)
SELECT u.*, p1.* FROM users u INNER JOIN ( SELECT p.user_id, p.created_at, p.id FROM posts p WHERE p.type IN ('post', 'page', 'file') GROUP by p.user_id ORDER BY p.created_at DESC LIMIT 30 )xxx ON xxx.user_id = u.id INNER JOIN posts p1 ON (p1.id = xxx.id)
SELECT item_id FROM my_table WHERE image_id = 1 AND item_id IN (SELECT item_id FROM my_table GROUP BY item_id HAVING COUNT(*) > 1);
SELECT extract(year from DATE) as yr, extract(month from date) as mon, ITEM, SUM(QUANTITY) FROM SALES WHERE DATE BETWEEN "DATE1" AND "DATE2" group by extract(year from DATE), extract(month from date) order by 1, 2
SELECT <xmlfield>.value('(/xml/fields/field/@name)[1]', 'varchar(60)') FROM <table> WHERE <xmlfield>.value('(/xml/fields/field/value/)[1], 'int') = 1
CREATE TABLE "102S" ( col1 number ); SELECT * FROM "102S"
select the_date, amount, ( select v.interest from value v where v.the_date <= h.the_date order by v.the_date desc limit 1 ) as interest from history h;
Select q.name, sum(q.value) from (YOUR_SELECT_QUERY) q group by q.name
adb shell cd /data/data cd <your.application.java.package> cd Databases rm <your db name>
SELECT COUNT(*) FROM tbl1
SELECT CAST(REGEXP_SUBSTR (str, '(.*?)(~|$)', 1, level, null, 1) AS CHAR(12)) output FROM (select 'How~do~I~do~this' as str from dual) CONNECT BY level <= regexp_count(str, '~') + 1;
Select StudentId, Count(*) DupCount From Table Group By StudentId Having Count(*) > 1 Order By Count(*) desc,
SELECT o.`bid_id`,o.`buyer_id`,o.`item_id`,o.`amount`,o.`time` FROM `offers` o JOIN (SELECT MIN(`bid_id`) AS `bid_id`,`buyer_id`,`item_id`,`amount`,`time` FROM `offers` GROUP BY `buyer_id`,`item_id`)x ON x.bid_id=o.bid_id AND x.buyer_id=o.buyer_id
SELECT Count(resource_id) AS cnt, resource_name FROM the_table GROUP BY resource_name HAVING cnt = (SELECT Count(DISTINCT resource_id) FROM the_table);
CREATE TABLE t1 ( id integer PRIMARY KEY, txt character varying(30)); CREATE TABLE t2 ( id integer PRIMARY KEY, t1_id integer, FOREIGN KEY (t1_id) REFERENCES t1(id)); CREATE VIEW t2ANDt1 AS SELECT id, t1_id, t1.txt FROM t2 INNER JOIN t1 ON t2.t1_id = t1.id
with unioncte as ( select name, value from table1 union select name, value from table2 ) select name, value from unioncte minus select name, null from unioncte where value is not null;
CREATE TEMPORARY TABLE tmp (AssociateID INT); INSERT INTO tmp (AssociateID) SELECT AssociateID FROM tbl_HR_Auditing_Reports WHERE DocumentName = 'Termination Statement (*)'; DELETE FROM tbl_HR_Auditing_Reports WHERE DocumentName = 'Restrictive Covenant Letters' AND NOT EXISTS ( SELECT 1 FROM tmp WHERE tmp.AssociateID = tbl_HR_Auditing_Reports.AssociateID )
CREATE VIEW vw_CurrentTherapists AS WITH CurrentTherapist AS ( SELECT SID, TID, [Date], RowNum = ROW_NUMBER() OVER(PARTITION BY SID ORDER BY Date DESC) FROM dbo.SessionList ) SELECT SID, TID, [Date] FROM CurrentTherapist WHERE RowNum = 1
CREATE TABLE IF NOT EXISTS " + DB_TABLE + "("+ KEY_NAME + " TEXT," + KEY_IMAGE + " BLOB);"; ContentValues cv = new ContentValues(); cv.put(KEY_NAME, name); cv.put(KEY_IMAGE, image); database.insert( DB_TABLE, null, cv );
SELECT customer_balance, credit_limit, customer_balance - credit_limit as overage FROM your_table WHERE customer_balance > credit_limit
SELECT gcm_registration_token FROM orders o INNER JOIN customer_details d ON o.customer_id = d.customer_id WHERE order_id IN (4646, 4647, 4648)
INSERT INTO tbdetail (detail, views) SELECT detail, SUM(views) AS viewsall FROM tb GROUP BY detail ON DUPLICATE KEY UPDATE views = views + VALUES(views);
public class DatabaseCommand { private OracleCommand _command = null; public DatabaseCommand(string sql, OracleConnection connection) { _command = new OracleCommand(sql, connection) { BindByName = true }; } public int ExecuteNonQuery() { return _command.ExecuteNonQuery(); } // Rest of impl removed for brevity }
CREATE TRIGGER [TriggerName] ON [Scope (Server|Database)] FOR [EventName...], AS -- code for your trigger response here
Product as p join fetch p.inventories as i join fetch i.inventoryUser as iu join fetch iu.user as u where u.name=:name
WHERE Yourdatefield >= Cast(('08/15/2013' (Date,Format 'mm/dd/yyyy')) As Date)
Sub Save_Click() Range("C3:C9").Copy Dim curRange As Range Dim curCol As Integer: curCol = 7 Dim completed As Boolean: completed = False Do curCol = curCol + 1 Set curRange = Range(Cells(3, curCol), Cells(9, curCol)) If (WorksheetFunction.CountA(curRange) = 0) Then Exit Do End If Loop While (Not completed) curRange.PasteSpecial End Sub
SELECT CASE WHEN PATINDEX('%[([<{]%', column1) = 0 THEN column1 ELSE LEFT(column1, PATINDEX('%[([<{]%', column1)) + 'XXXXX' + SUBSTRING(column1, ISNULL(NULLIF(PATINDEX('%[)>}]%', column1), 0), CHARINDEX(']', column1)), 1) END FROM myTable
Move 2 to 99 Move 3 to 2 Move 99 to 3
SELECT * FROM TRANSACTION_TABLE WHERE transaction_id NOT IN ( SELECT transaction_id FROM CANCELED_TABLE);
Dim results = db.Orders.Where(Function(n) n.CustomerId = customerId).GroupBy(Function(n) n.Date.Year, Function(key, values) New With {.Year = key, .NetTotal = values.Sum(Function(n) n.NetPurchase * n.Quantity * (1 + (n.Discount/100))), .GrossTotal = values.Sum(Function(n) n.GrossPurchase)})
UPDATE [TempUpdateTable] SET RecentActivityDate = Customers.MaxCreatedDate FROM (SELECT MAX(CreatedOnDate) as MaxCreatedDate, CA.CustomerId FROM CustomerActivity CA WHERE CA.CustomerId = CustomerId GROUP BY CA.CustomerId ) Customers WHERE TempUpdateTable.CustomerId = Customers.CustomerId
SELECT t1.IPAddress, t1.DNSRecord, t2.SerialNo, t2.IPAddress FROM tableA t1 JOIN tableB t2 ON t1.IPAddress = t2.NetworkAddress WHERE IPAddress LIKE '%' +@IPAddress + '%' AND ( SerialNo LIKE '%' +@SerialNo +'%' OR SerialNo is NULL)
Users Table: UserId UserName ...Etc Groups Table: GroupId Name ...Etc User_Groups Table: UserId GroupId
DECLARE @condition BIT IF @condition = 1 BEGIN EXEC MyProc1 END ELSE BEGIN EXEC MyProc2 END
ORDER BY post_status ASC, CASE post_status WHEN 'future' THEN POST_DATE END ASC, CASE WHEN post_status <> 'future' THEN post_date END DESC
select t1.* from mytable t1 join ( select max(z) max_z, x from mytable group by x ) t2 on t2.x = t1.x order by t2.max_z desc, t1.x, t1.z desc, t1.y desc
LOAD DATA INFILE 'c:/load/CW_COMPLIANCE.csv' APPEND INTO TABLE tbl_name FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' ( COMPLETED_ON DATE 'DD Month, YYYY HH:MI:SS AM', )
select max(pay) from table_name where pay NOT IN(select max(pay) from table_name) LIMIT 0,1
SELECT st.*, ft.rate FROM second_table st LEFT JOIN first_table ft ON (MONTH(acct_date) = MONTH(eff_date) AND YEAR(acct_date) = YEAR(eff_date) )
COLUMN LAST_NAME FORMAT A10
select distinct sr.SrcLngId, sr.SupplierId into #myTable99 from SupplierLangs sl select SrcLngId, count(SrcLngId) as [count] from #myTable99 temp group by SrcLngId drop table #myTable99
SELECT * FROM SONGS s WHERE accesstype='public' OR (accesstype='whitelist' AND EXISTS (SELECT null FROM WHITELIST wl WHERE wl.songid = s.id AND wl.userid=s.userid)) OR (accesstype='blacklist' AND NOT EXISTS (SELECT null FROM BLACKLIST bl WHERE bl.songid = s.id AND bl.userid= s.userid))
With CTE as ( select task,status,DATE,flag,RANK() over (partition by task order by date asc, status asc) as Rnk from tblTask ), CTE1 as ( select * from CTE where Rnk = 1 and status = 'Complete' ), CTE2 as ( select tblTask.* from CTE1 left join tblTask on CTE1.task = tblTask.task where tblTask.status <> 'Complete' ) update CTE2 set flag = 'To remove'
Option Compare Database Option Explicit Sub test() Dim cdb As DAO.Database, rst As DAO.Recordset, newID As Long Set cdb = CurrentDb cdb.Execute "INSERT INTO Users (Email) VALUES (""gord@example.com"")", dbFailOnError Set rst = cdb.OpenRecordset("SELECT @@IDENTITY", dbOpenSnapshot) newID = rst(0).Value rst.Close Set rst = Nothing Set cdb = Nothing Debug.Print newID End Sub
SELECT t.* FROM m_conservationsetting AS t WHERE NOT EXISTS ( SELECT cs.FacilityId,Cs.Unit,cs.CategoryId FROM m_conservationsetting AS cs LEFT JOIN l_maintelog ml on (cs.FacilityId=ml.FacilityId and cs.Unit=ml.Unit) WHERE ml.Status=0 group by cs.CategoryId )
select top 0 * into #mytemptable from myrealtable
SELECT * FROM TABLE1 WHERE wavelenght BETWEEN 341 AND 348 OR wavelenght BETWEEN 551 AND 664 OR wavelenght BETWEEN 998 AND 1021
SELECT * FROM SomeTable a JOIN ( SELECT fk_b, MAX(timestamp) as latest FROM SomeTable GROUP BY fk_b ) b ON a.id = b.id WHERE a.fk_a = @someIdA
SELECT author, [count], sum_score, PERCENT_RANK() OVER(ORDER BY sum_score DESC) percentile_sum_score, FROM ( SELECT [by] author, COUNT(1) [count], SUM(score) sum_score, FROM [bigquery-public-data:hacker_news.stories] GROUP BY author )
DECLARE @startDate DATETIME DECLARE @endDate DATETIME SET @startDate = '2013-01-01' SET @endDate = GETDATE() ;WITH CTE_Dates AS ( SELECT @startDate AS DT UNION ALL SELECT DATEADD(DD,1,DT) FROM CTE_Dates WHERE DT <= @endDate ) SELECT * FROM CTE_Dates OPTION (MAXRECURSION 0)
Update table1 SET field2 = field2 -1 where feild2 > (SELECT t.feild2 FROM (SELECT feild2 from table1 WHERE id = 129) t)
select r.registration, r.recent, t.id, t.unittype from ( select registration, max([date]) recent from @tmp group by registration ) r left outer join @tmp t on r.recent = t.[date] and r.registration = t.registration
/* --create numbers table if don't already have one... select top 1000000 row_number() over(order by t1.number) as N into dbo.Numbers from master..spt_values t1 cross join master..spt_values t2 */ DECLARE @table TABLE (id int IDENTITY(1,1),code varchar(10), codeStatus varchar, qty int, val money) INSERT INTO @table SELECT '12345', 'T', 2, 1 select t.id, t.code, t.codeStatus, t.qty, t.val from @table t inner join dbo.Numbers n on n.N <= t.qty
SELECT mt.id, COALESCE(yt1.id, yt2.id) FROM MYTABLE mt LEFT JOIN YOURTABLE yt1 ON yt1.id = mt.id AND yt.id = 2 LEFT JOIN YOURTABLE yt2 ON yt2.id = mt.id
with recursive cat_tree (id, parent_id, name, full_path) as ( select id,parent_id,name, '/'||name as full_path from categories where parent_id is null union all select c.id,c.parent_id,c.name,p.full_path||'/'||c.name from categories c join cat_tree p on p.id = c.parent_id ) update categories set path = c.full_path from cat_tree c where c.id = categories.id;
[[put code here that sets up @DBname]] DECLARE @stmt NVARCHAR(MAX) = 'SELECT column FROM ' + @DBname; EXEC sp_ExecuteSQL @stmt;
ALTER TABLE Tab ALTER COLUMN LastModified datetime2 not null
select sum(price) as total_price, name, max(surname) as surname, max(address) as address from table1 a group by a.name;
SELECT a.id, a.company_id, (CASE WHEN p.teacher_status = '1' THEN 'YES' ELSE 'NO' END ) AS teacher, (CASE WHEN p.student_status = 1 THEN 'YES' ELSE 'NO' END ) AS student, p.teacher_status, /* for testing purpose only to view the field value */ p.student_status /* for testing purpose only to view the field value */ FROM company a LEFT JOIN person p ON a.company_id = p.company_id
SELECT ARGUMENT_NAME , PLS_TYPE , DEFAULT_VALUE FROM USER_ARGUMENTS WHERE OBJECT_NAME = '<my_stored_proc>'
select case when CHARINDEX('A', columnName, 1) > 0 then 1 else 0 end has_a, case when CHARINDEX('B', columnName, 1) > 0 then 1 else 0 end has_b, case when CHARINDEX('C', columnName, 1) > 0 then 1 else 0 end has_c, case when CHARINDEX('D', columnName, 1) > 0 then 1 else 0 end has_d from tableName
... ( skip_1 FILLER, skip_2 FILLER, skip_3 FILLER, skip_4 FILLER, skip_5 FILLER, nickname1, nickname2, class CONSTANT '10', Address CONSTANT 'NA' )
open FSharp.Data [<Literal>] let connectionString = @"Data Source=MyServer\MyInstance;Initial Catalog=MyDatabase;Integrated Security=SSPI;" [<Literal>] let query = "select Id, Name from MyTable" type OptionQuery = SqlCommandProvider<query, connectionString> let cmd = new OptionQuery() cmd.AsyncExecute() |> Async.RunSynchronously |> Seq.iter (fun row -> printfn "Found row: %d %s" row.Id row.Name) System.Console.Write("Done") System.Console.ReadKey()
select MAX(uid_proc) from( (SELECT MAX(uid_proc) as uid_proc FROM LOG_MIG) UNION ALL (SELECT MAX(uid_proc) FROM log_mig_error) )
SELECT CONCAT(CONCAT('+', LISTAGG(Employee.Name, '+')), '+') FROM Employee WHERE Salary >= 10000
select count(0) from messages as m join files as f on f.messageid=m.messageid where m.datesent>'2014-07-01'
SELECT yt.* FROM your_table yt INNER JOIN ( SELECT [id], MIN([datetime]) first_datetime FROM your_table GROUP BY [id] ) f ON yt.id = f.id AND yt. [datetime] > f.first_datetime
SELECT * FROM yourtable WHERE LOWER(col1)=LOWER(col2);
PeopleServiceLink: PersonID, ServieTicketID, PRIMARY KEY (PersonID, ServieTicketID)
SELECT `inmate`.`fname` , `inmate`.`lname` , `facility`.`name` FROM inmate LEFT JOIN `prison`.`facility_inmate` ON `inmate`.`inmate_id` = `facility_inmate`.`inmate_id` LEFT JOIN `prison`.`facility` ON `facility_inmate`.`facility_id` = `facility`.`facility_id`
SELECT Product, MAX(Price) FROM YourTable GROUP BY Product
Cursor cursor = db.rawQuery("SELECT s.name, a.street FROM students_name s LEFT JOIN student_address a ON a.student_id = s.student_id", null);
-- Updated statement SELECT ordernum, COUNT(orderref) as Total FROM orders GROUP BY ordernum HAVING COUNT(orderref) = 1 ORDER BY ordernum
SELECT CONCAT(RTRIM(LTRIM(A.col1)),RTRIM(LTRIM(B.col2)),RTRIM(LTRIM(C.col3)),RTRIM(LTRIM(D.col4))) FROM yourTable A CROSS JOIN yourTable B CROSS JOIN yourTable C CROSS JOIN yourTable D
ExecuteSQL (" SELECT M::MovieName FROM Movies M INNER JOIN Genres G ON M::GenreId=G::GenreId WHERE M::Rating = (SELECT MAX(M2::Rating) FROM Movies M2 WHERE M2::GenreId = M::GenreId) "; "" ; "")
select index_name, parameters from user_xml_indexes; <parameters> <structured> <group name="YYY"> <xmltab name="TABLE_NAME"> &apos;&apos;/entity/year&apos;&apos; columns &quot;year&quot; integer PATH &apos;&apos;text()&apos;&apos; </xmltab> </group> </structured> </parameters>
select * from MyTable as T where T.XmlField.exist('/dictionary[item[key/int/text() = 1 and value/string/text() = "Web"] and item[key/int/text() = 2 and value/string/text() = "Email"]]') = 1
SELECT a.* FROM tableName a INNER JOIN ( SELECT title, MIN(DATE) minDate FROM tableName GROUP BY title ) b ON a.title = b.titleAND a.date = b.maxDate
I dont think because GUID are unique.
month(update_user_timestamp) = month(current timestamp - 1 month)
net start mysql
row.setTag(counter); // use counter or index for tag, so you can get the data from LocWiseProfile later row.setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { int tag = (Integer)view.getTag(); LocWiseProfileBeans cn = LocWiseProfile.get(tag); // Perform delete action here // ... } });
SELECT * FROM "faq" WHERE ((LOWER("Question") LIKE '%what%' OR LOWER("Question") LIKE '%is%' OR LOWER("Question") LIKE '%a%' OR LOWER("Question") LIKE '%duck%')) order by case when LOWER("Question") LIKE '%what%' then 1 else 0 end + case when LOWER("Question") LIKE '%is%' then 1 else 0 end + case when LOWER("Question") LIKE '%a%' then 1 else 0 end + case when LOWER("Question") LIKE '%duck%' then 1 else 0 end descending;
cmd.CommandText = ("select physical_name from sys.master_files where type = 1 and database_id = DB_ID('" + "mydatabasename" + "')");
SELECT A.id FROM Article A LIMIT 10 SELECT A, C FROM Article A LEFT JOIN A.comments C WHERE A.id IN (4, 8, 15, 16, 23, 42, ...)
create view myview as select avg(old_foo.stuff), foo.person_id, foo.date_ as this_date, offset from generate_series(1, 100) as offset, foo, join ( select stuff, person_id, date_ from foo) as old_foo on old_foo.date_ < foo.date_ and old_foo.date_ > foo.date_ - offset group by person_id, this_date, offset ; select * from myview where offset = 10;
select name, text from (SELECT name, text, row_number() over (partition by name order by random()) as seqnum FROM testing t INNER JOIN users u ON u.id = t.id ) t where seqnum = 1;
select [Student Name], [Date of Birth] from <however your table is named> where DateDiff(month, [Date of Birth], [Notice Date]) between 3 * 12 and 5 * 12 + 1
count(case when severity = 1 then 1 else null end) as one
SELECT CASE WHEN COUNT(ID) >=1 THEN 1 WHEN COUNT (ID) <1 THEN 0 END FROM table WHERE Column2=4
with dates as (select trunc(sysdate, 'mm') - 10 + level dt from dual connect by level <= 40) select dt from dates where dt >= trunc(sysdate, 'iw') and dt <= sysdate; -- only needed if the dates in the column could be beyond now.
SELECT GROUP_CONCAT(FirstName + ' ' + LastName ORDER BY FirstName, LastName SEPARATOR ', ') AS Names FROM People;
EXEC sp_xp_cmdshell 'trendsgen.exe [param1], [param2]'
select distinct t2.FId, t2.UId, t2.Version from ( select FId, max(Version) as "Version" from MyTable group by FId ) t1 inner join MyTable t2 on (t1.FId = t2.FId and t1.Version = t2.Version) order by t2.FId, t2.UId
select a1.prod_id,p.name,count(*) as num_attr_in_common from attr_rel as a1 inner join ( select attr_id from attr_rel where prod_id = 3) as a2 on a1.attr_id = a2.attr_id and a1.prod_id <> 3 inner join products as p on p.id = a1.prod_id group by a1.prod_id order by num_attr_in_common desc
SELECT datetime_up, logic_id, eqp_name, max(ack), created ... GROUP BY datetime_up, eqp_name, logic_id, created
SELECT COUNT(*) FROM DB where EXP_DATE < DATEADD(month, -1, GETDATE())
... SELECT SUM(CASE survived WHEN 'Y' THEN 1 ELSE 0 END) / COUNT(r.call_date) AS NormalisedEvents, ....
SELECT * FROM tablename WHERE SUBSTR(timestampcolumn, 9, 4) BETWEEN '1800' AND '2000';
SELECT userId, COUNT( id ) AS count FROM X GROUP BY userId HAVING COUNT(id) = (SELECT MIN(cnt) FROM (SELECT COUNT(id) as cnt FROM X GROUP BY userId ) xx );
SELECT a.ID, CASE WHEN a.OVER_80 = 'Y' THEN 'OVER80' WHEN a.OVER_60 = 'Y' THEN 'OVER60' END FROM MY_TABLE WHERE a.OVER_60 = 'Y'
(LENGTH(`my_column`) - LENGTH(REPLACE(`my_column`, 'my word', '')))/LENGTH('my word')
;WITH d AS ( SELECT TOP (366) d = DATEADD(DAY, ROW_NUMBER() OVER (ORDER BY object_id), '20111231') FROM sys.all_objects ) INSERT dbo.[a table]([Date]) SELECT d FROM d WHERE d NOT IN (SELECT [Date] FROM dbo.[a table]) AND d <= DATEADD(DAY, 0-DATEPART(WEEKDAY, GETDATE()), GETDATE());
update Scheme.MyTable set DateTime = getutcdate() where ID= 1
truncate table Contrinex.GPOQA.dbo.PrinterSet go insert into Contrinex.GPOQA.dbo.PrinterSet select * from Contrinex.GPO.dbo.PrinterSet
SELECT * FROM Test LIMIT 10, 15
No Action Cascade SET NULL SET Default
select id, x, sum(new_group) over (order by id) as group_no from ( select id, x, case when x-prev_x = 1 then 0 else 1 end new_group from ( select id, x, lag(x) over (order by id) prev_x from mytable ) );
SELECT a.UserId, a.ActionId, b.ActionTypeName, COUNT(*) AS ActionCount FROM Activity a INNER JOIN ActionType b ON a.ActionId=b.ActionId GROUP BY a.UserId, a.ActionId, b.ActionTypeName
set x = case when x is null then '' else x, y = case when y is null then '' else y, z = case when z is null then '' else z ...
SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, IS_NULLABLE, COLUMN_DEFAULT FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = 'tbl_name' [AND table_schema = 'db_name'] [AND column_name LIKE 'wild']
SELECT COUNT(EmployeedID) as non_brazilians FROM Employees WHERE Nationality <> 'Brazil';
$teachers2 = DB::connection('moodle')->select(DB::raw("SELECT DISTINCT u.firstname, u.lastname FROM mdl_user u JOIN mdl_user_enrolments ue ON ue.userid = u.id JOIN mdl_enrol e ON e.id = ue.enrolid JOIN mdl_role_assignments ra ON ra.userid = u.id JOIN mdl_role r ON r.id = ra.roleid AND r.shortname = 'editingteacher' WHERE e.status = 0 AND u.suspended = 0 AND u.deleted = 0 AND (ue.timeend = 0 OR ue.timeend > NOW()) AND ue.status = 0"));
SELECT DAYNAME("DAY", 'CLDR 1.5:en_US'), FORM, COUNT(*) AS UniqueTimeAppeared FROM formhist -- where DAYNAME("DAY", 'CLDR 1.5:en_US')='Monday' GROUP BY DAY, FORM;
SELECT COUNT(DISTINCT postid) FROM `table`
create trigger mytable_trg before insert or update on mytable for each row begin :new.col1 := upper(:new.col1); :new.col2 := upper(:new.col2); end;
select * from ( select vendor_id, to_char(invoice_dt, 'yyyy-q') yyq, sum(gross_amt) amt from ps_voucher group by vendor_id, to_char(invoice_dt, 'yyyy-q') ) pivot ( sum(amt) for yyq in ('2013-1', '2013-2', '2013-3', '2013-4', '2014-1', '2014-2', '2014-3', '2014-4') ) order by vendor_id;
SELECT club, COUNT(club) FROM sport GROUP BY club ORDER BY COUNT(club) DESC LIMIT 1
WITH Full_Table AS (---Long Sub Query---) SELECT A,B,C FROM Full_Table WHERE RATIO=(SELECT MAX(RATIO) FROM Full_Table);
// categories table id name user_id parent_id
SELECT p.id,p.email,IF(COUNT(s.category_id)>0,1,0) as is_subscribed FROM person as p LEFT JOIN subscription as s ON s.person_id=p.id GROUP BY p.id
select c.CourseNum, c.CourseName, c.CreditHours from course c left join studentcoursecomplete cc on cc.CourseID = c.CourseID and cc.SID = 1 where c.TypeID=1 and cc.CourseID is null
SELECT m1.cod_menu FROM menu m1 WHERE NOT EXISTS(SELECT NULL FROM MENU m2 WHERE m1.cod_menu = m2.cod_menu_parent) AND m1.isSubMenu = 'T'
SET @alias = (SELECT Alias FROM Aliases WHERE id = 1); SET @sql = CONCAT('INSERT INTO ', @alias, ' (somevalue) VALUES (value)'); PREPARE stmt1 FROM @sql; EXECUTE stmt1;
Select ISNULL(a, b)
select unit_id, time, diag from ( select unit_id, time, diag, rank() over (partition by unit_id order by time desc) as rank from diagnostics.unit_diag_history ) as dt where rank = 1
select count(*) as users from table where from_unixtime(lastonline) >= now() - interval 30 day
SELECT * FROM [Purchasing].[Vendor] WHERE ( (@url IS null OR @url = '' OR @url = 'ALL') and PurchasingWebServiceURL LIKE '%') or ( @url = 'blank' and PurchasingWebServiceURL = '') or (@url = 'fail' and PurchasingWebServiceURL NOT LIKE '%treyresearch%') or( (@url not in ('fail','blank','','ALL') and @url is not null and PurchasingWebServiceUrl Like '%'+@ur+'%') END
WITH RankedResults AS ( SELECT id, keyword, shortcode, ROW_NUMBER() OVER (PARTITION BY keyword ORDER BY DATEDIFF(n, datefrom, dateto) DESC) rank FROM keywordschedules ) SELECT id, keyword, shortcode FROM RankedResults WHERE rank = 1 AND keyword = 'gig'
SELECT t.City FROM (SELECT City, COUNT(sup_id) as [totalSuppliers] FROM tb_supplier GROUP BY City HAVING COUNT(sup_id) > 1) as t
SELECT `Line`, `Order`, Sum(Qty) From MyTable Group by `Line`, `Order` order by `Line`, `Date`, `Time`, `Order`;
SELECT a.Id, a.Title, a.Description, HasCommented = CASE WHEN COUNT(c.Id) > 0 THEN 'True' ELSE 'False' END FROM tbl_Posts p LEFT JOIN tbl_postsComment c on c.PostId = p.Id AND c.UserId = @userId GROUP BY a.Id, a.Title, a.Description
SELECT i.invoice_id FROM invoice_table i LEFT JOIN (SELECT invoice_id, SUM(bill_amt) AS sum_bill_amt FROM bill_table GROUP BY invoice_id) b ON i.invoice_id = b.invoice_id LEFT JOIN (SELECT invoice_id, SUM(credit_amt) AS sum_credit_amt FROM credit_table GROUP BY invoice_id) c ON i.invoice_id = c.invoice_id WHERE b.sum_bill_amt - c.sum_credit_amt > 0;
INSERT INTO newtable SELECT * FROM oldtable ON DUPLICATE KEY column1=oldcolumn1, ...
SELECT c.[id_Cust] ,[Name] ,[Omset] ,[Colour] ,[seq] ,(SELECT a.[Address],a.[no1],a.[no2] FROM address_BSM a WHERE a.id_cust = c.id_cust FOR XML PATH ('address_bsm'), TYPE) FROM [dbo].[Customer_BSM] c FOR XML PATH ('customer_bsm')
CREATE FUNCTION [dbo].[GetAliasesById] ( @userID int ) RETURNS varchar(max) AS BEGIN declare @output varchar(max) select @output = COALESCE(@output + ', ', '') + alias from UserAliases where userid = @userID return @output END GO SELECT UserID, dbo.GetAliasesByID(UserID) FROM UserAliases GROUP BY UserID GO
DECLARE @xml XML = '....' SET @xml.modify('delete //root/*[not(@ln)]')
SELECT LEFT( FORMAT_UTC_USEC(UTC_USEC_TO_DAY(timestamp*1000000)),10) as date_day, AVG (download_speed)avg_download, AVG (upload_speed)avg_upload, GROUP_CONCAT(real_address)as real_address_list FROM [xxxxxxx:xxxxx.xxxxx] GROUP BY date_day ORDER BY date_day ASC
select bool_and(someBool) from myTable where someKey = $1 group by someKey;
with fact as( select Id,digit1,digit2,digit3,digit1*digit2*digit3 as [mult],digit1+digit2+digit3 as [sum] from Data),part as( select Id,digit1,digit2,digit3,[mult],[sum],row_number() over(partition by [mult],[sum] order by [mult],[sum]) as [Part] from fact ) select Id,digit1,digit2,digit3,(select count(*) from fact f where f.[mult]=p.[mult] and f.[sum]=p.[sum]) as amount from part p where part=1
SELECT Name, Filter1, Filter2 FROM (SELECT Name, Attribute, Value FROM PivotEx) AS SourceTable PIVOT ( MAX(Value) FOR Attribute IN (Filter1, Filter2) ) AS PivotTable
1001 1002 1001 1003 1002 count(person.person.BusinessEntityID) = 5 // all count(distinct person.person.BusinessEntityID) = 3 //1001, 1002, 1003 min(person.person.BusinessEntityID) = 1001 min( distinct person.person.BusinessEntityID) = 1001
User.all(:joins => [:user_follows, :reverse_user_follows ], :conditions => ["user_follows.user_b_id = ? AND reverse_user_follows_users.user_id = ?", current_user.id, current_user.id])
DELIMITER | CREATE TRIGGER default_yearly BEFORE INSERT ON employee FOR EACH ROW BEGIN SET NEW.employeeyearly = NEW.employeemonthly * 12; END; | DELIMITER ;
insert into Table (txt) values ('It\'s an "example" with a backslash(\\).')
SELECT (mytable.field1 + 10) AS x FROM `mytable` WHERE (mytable.field1 + 10) < 50;
Delete from [TableName] as T1 Where Exists( SELECT [log],[name],Max([date]) FROM [TableName] Where [log] = T1.[log] And [name] = T1.[name] Group By [log],[name] Having T1.[date] < Max([date]))
select user_id, max(case when `key` = 'name' then value end) as name, max(case when `key` = 'url' then value end) as url, max(case when `key` = 'email' then value end) as email from your_table group by user_id
SELECT * FROM Articleprice WHERE '2007-12-31' >= from_Date AND to_date > '2007-01-01'
select * from (select round(dbms_random.value(1000000000,10000000000)) num from dual connect by rownum < 10), (Select round(dbms_random.value(1,5)) num1 from dual connect by rownum = 1)
UPDATE table SET two = one WHERE LENGTH(one) = 2
select customer, count(*) as freq from table_1 group by customer order by 2 desc, 1 limit 10
select d.SeriePolita, d.NumarPolita, d.Status, v.CascoCategorieVehicul, v.NumarInmatriculare from Document AS d inner join Vehicle AS v on v.Id = d.VehicleId where EndDate>'2015-06-30' and d.Class='CASCO' and Status in ('Polita', 'Anulat');
with q as ( select array[ status::text, log ] as x from a() as (status bool, log text) ) select x[1], x[2] from q;
(?<=\[StupidHtml\]\:)(.*?)(?=\^)
SELECT top (@top)
CREATE VIEW A AS SELECT * FROM A_underlying CREATE VIEW B AS SELECT * FROM B_underlying
select * from employees where employee_id not in ( select employee_id from job_history) /
select sequence_name from user_sequences;
create unique index on tableName (lower(columnName))
SELECT AgeGroups.GroupID, AgeGroups.GroupTitle, COUNT(1) AS MemberCount FROM AgeGroups JOIN Events ON EventID = 1 JOIN Members ON DATEDIFF(year, Members.DOB, Events.EventStart) >= AgeGroups.MinAge AND DATEDIFF(year, Members.DOB, Events.EventStart) <= AgeGroups.MaxAge ORDER BY AgeGroups.GroupID
select st134.area,st134.status from (select area from mytable where status = 2) st2, mytable st134 where st134.area = st2.area
SELECT routes.route_date, time_slots.name, sum(time_slots.openings), sum(time_slots.appointments) FROM routes INNER JOIN time_slots ON routes.route_id = time_slots.route_id WHERE route_date BETWEEN 20140109 AND 20140115 AND time_slots.openings > time_slots.appointments group by routes.route_date, time_slots.name ORDER BY route_date, name
SELECT * FROM Contacts C LEFT JOIN ( SELECT * FROM Invoices WHERE Product = 'EADP Package') I ON C.ContactID = I.ContactID
DECLARE @StartDate date SELECT @StartDate = GETDATE(); WITH cte AS ( SELECT -1 AS idx, DATEADD(d,-1,@StartDate) AS idxDate UNION ALL SELECT idx -1, DATEADD(d,-1,idxDate) FROM cte WHERE idx >-30 ) SELECT idx DateValue, CONVERT(VARCHAR(10),idxDate,110) + ', ' + CAST(idx as nvarchar(max)) DateLabel FROM CTE OPTION (MAXRECURSION 0)
select * from table1 a join table2 b on (a.userid = b.userid) join table3 c on (a.userid = c.userid) left join table4 d on (a.userid = d.userid) left join table5 e on (a.userid = e.userid) where d.userid is null and e.userid is null;
select f.room from facilities f where f.facility in ('Computer', 'DVD Player') group by f.room having count(distinct f.facility) = 2;
select substring(notes, 13, 4) filledby -- should be -G J- if I counted right , count(*) records from invoice where notes like '% ' + @date + '%' group by substring(notes, 13, 4)
select type_of_source.description as type_of_source_description, origin.descripotion as origin_descripotion from ....
Query query = em.createNativeQuery("SELECT rgt FROM nested_category WHERE name = 'TELEVISIONS';"); List<Object> rightSiblings = query.getResultList(); for (Object sibling : rightSiblings) { Integer siblingId = (Integer) sibling; query = em.createNativeQuery("UPDATE nested_category SET rgt = rgt + 2 WHERE rgt >"+siblingId); query.executeUpdate(); }
cb.selectCase(). when(cb.greaterThanOrEqualTo(fromT.get("xValue"), fromS.get("yValue")), fromT.get("xValue")). //-- If T has max value otherwise(fromS.get("yValue")); //-- Else, by default select value from S
select t2.id, f1.description, f2.description from table2 t2 left join table1 f1 on f1.id = t2.fruit1 left join table1 f2 on f2.id = t2.fruit2
SELECT COUNT(Activity) AS "Day-wise total", SUM(CASE WHEN Activity = 0 THEN 1 ELSE 0 END) AS "0's", SUM(CASE WHEN Activity = 1 THEN 1 ELSE 0 END) AS "1's", `Date` AS "Date" FROM Table GROUP BY `Date`;
SELECT MIN(YYYYMM) AS CMonth_Start, MAX(YYYYMM) AS CMonth_End, Mbr_ID, Product_ID FROM ( SELECT Mbr_ID, Mbr_ID, Product_ID, ROW_NUMBER() OVER (PARTITION BY Mbr_ID ORDER BY YYYYMM) - ROW_NUMBER() OVER (PARTITION BY Mbr_ID, Product_ID ORDER BY YYYYMM) AS grp FROM mytable ) AS t GROUP BY Mbr_ID, Product_ID, grp
WITH x AS -- eliminate all duplicates,set up a counter for each distinct record -- as well as flag for WI (SELECT DISTINCT studentID, STATE, 1 AS cnt, CASE WHEN STATE = 'WI' THEN 1 ELSE 0 END WI FROM DataTable) SELECT studentID, CASE WHEN MAX(wi) = 0 THEN 'OUT' -- this student is not in WI at all WHEN MAX(wi) = 1 AND SUM(cnt) > 1 THEN 'MULTI' -- this student is in WI as well as another state WHEN MAX(wi) = 1 AND SUM(cnt) = 1 THEN 'IN' END AS Status -- this student is in WI and and no other state FROM x GROUP BY studentID
create trigger log_date before insert on log for each row begin set new.date = current_date() end;
SELECT email, COUNT(*) AS occurs WHERE provider = x AND YEARMONTH(date) = y GROUP BY email HAVING occurs > 1
select dbms_utility.port_string from dual;
SELECT DATE(DATE_SUB('Date', INTERVAL 15 HOUR)), SUM(VAL) FROM tblVals WHERE TIME(DATE_SUB('Date', INTERVAL 15 HOUR)) < '19:00' GROUP BY DATE(DATE_SUB('Date', INTERVAL 15 HOUR))
select owner, table_name, last_analyzed, stale_stats from all_tab_statistics where owner = 'ML' and table_name = 'OBS'; select owner, index_name, last_analyzed, stale_stats from all_ind_statistics where owner = 'ML' and table_name = 'OBS';
Select greatest(Name,Friend),least(Name,Friend) from Friends group by greatest(Name,Friend),least(Name,Friend) having count(1)=1
SELECT SUM(AMOUNT) SUM_AMOUNT FROM <table> WHERE VoucherDt >= DATEADD(MONTH, DATEDIFF(MONTH, 0, CURRENT_TIMESTAMP), 0) AND VoucherDt < DATEADD(DAY, DATEDIFF(DAY, 0, CURRENT_TIMESTAMP), 1)
sql $db <<< "select 'TRUE' from iitables where table_name like '$tablename%' \p\g" | grep 'TRUE' > /dev/null result=$?
select c.id from conversation_participant cp1 inner join conversation_participant cp2 on cp1.conversation_id=cp2.conversation_id and cp2.user_id=2 inner join conversation c on cp1.conversation_id=c.id and c.type=0 where cp1.user_id=1;
SELECT patient_id ,CASE WHEN r.rank = 1 THEN 1 ELSE 0 END , order_number FROM ( SELECT order_number ,patient_id ,ROW_NUMBER() OVER (PARTITION BY patient_id ORDER BY order_number)[rank] FROM PatientTable )r
select p.* from product p join product_category_maping pcm on p.id = pcm.productid join category c on c.id = pcm.categoryid where dbo.[checkcharindex](@keyword, p.name + ' ' + c.name) = 1
select c.code, count(*) from codes c join table t on find_in_set(c.code, t.codehwos) > 0 group by c.code;
SELECT * FROM Table1 WHERE DATEADD ( year, -DATEDIFF(year,'19000101',dateField), dateField ) BETWEEN'19000801' AND'19000818'
copy pricing_cache (column_1, column_2) from stdin with csv col_1_value,col_2_value col_1_value,col_2_value \.
SELECT field1, (SELECT COUNT(*) FROM yy Where zz AND t.value = xx ) as field2 FROM xx t GROUP BY field1;
SELECT SUBSTRING_INDEX(col1, ' ', -1) FROM table
UPDATE `record` t SET t.is_cheap = 1 WHERE DAYOFWEEK(t.date_time) = 2 AND DATE_FORMAT(t.date_time,'%H:%i:%s') BETWEEN '14:00:00' AND '14:45:00' AND YEAR(t.date_time) = 2016
SELECT p.desc, p.price, m.title FROM products AS p LEFT JOIN manufacturer AS m ON m.id = p.manufacturer_id ORDER BY m.title
declare @Testdata table ( Data varchar(max)) insert @Testdata select '1¬2¬4¬5¬7' ;with tmp(DataItem, Data) as ( select LEFT(Data, CHARINDEX('¬',Data+'¬')-1), STUFF(Data, 1, CHARINDEX('¬',Data+'¬'), '') from @Testdata union all select LEFT(Data, CHARINDEX('¬',Data+'¬')-1), STUFF(Data, 1, CHARINDEX('¬',Data+'¬'), '') from tmp where Data > '' ) select * from tmp
// config/bootstrap.js exports.bootstrap = function (done) { YourModelName.native(function (err, collection) { // define index properties collection.ensureIndex( { "createdAt": 1 }, { expireAfterSeconds: 3600 } ); // be sure to call the bootstrap callback to indicate completion done(); }); }
UPDATE Parent SET (Number_Of_Children, Average_Child_Age, Oldest_Child_Age, Youngest_Child_Age, MODE_EYE_COLOR, BLOODTYPES_THAT_CAN_BE_ACCEPTED, SOMETHING_COMPLEX ) = ( SELECT COUNT(*), AVG(Age), MAX(Age), MIN(Age), STATS_MODE(EYE_COLOR), ListBloodTypes(BLOODTYPE), ComplexCombine(SOMETHING_COMPLEX) FROM Child WHERE Parent.ID = Child.Parent_ID )
SELECT round((julianday(Date('now')) - julianday(Dates))/30) as MonthsDiff from demo; | MonthsDiff | -------------- | 11.0 | | 2.0 |
SELECT table_name, table_rows FROM `information_schema`.`tables` WHERE table_schema = '<Your Database Name>' ORDER BY table_rows DESC
SELECT date, occurrences, diagnosecode, FROM (SELECT diagnosecode, date, COUNT(*) as occurrences, ROW_NUMBER() OVER (PARTITION BY date ORDER BY COUNT(*) DESC) as seqnum FROM diagnoses GROUP BY diagnoses, date ) dd WHERE seqnum <= 5 ORDER BY date DESC, occurrences DESC;
SELECT stock_groups.name FROM stock_groups_styles_map, stock_groups WHERE stock_groups_styles_map.style ='N26';
SELECT * FROM ( SELECT t.*, ROW_NUMBER() OVER ( PARTITION BY t.1st_num,t.2nd_num,t.3rd_num order by t.cancel_flag asc,t.opening_date desc) as row_num FROM YourTable t ) as tableTempName WHERE row_num = 1
curl -XGET 'localhost:9200/foo/_search?search_type=scan&scroll=10m&size=50' -d ' { "query" : { "match_all" : {} } }'
SELECT LEFT(Column1, LEN(Column1) - 2) Edited_Column1, RIGHT(Column1, 2) + ' ' + Column2 Edited_Column2 FROM table1
select * from A join (select B.a_id, sum(B.cost) as cost from B group by B.a_id) B on A.id = B.a_id left join (select C.keyword_id, sum(C.clicks) as clicks from C group by C.keyword_id) C on A.keyword_id = C.keyword_id group by A.id having sum(cost) > 10
^(?:(?:'[^\r\n']*'|[^,\r\n]*), ){6}('[^\r\n']*'|[^,\r\n]*)
meter_number, num_records, summation.
SELECT * FROM 'veg_tech' v LEFT JOIN table_2 t2 ON v.BOR_ID= t2.BOR_ID LEFT JOIN table_3 t3 ON v.FERTILIZER_KG_ROP_ID = t.FERTILIZER_KG_ROP_ID LEFT JOIN table_4 t4 ON v.DOR_DISTANCE_ID = t4.DOR_DISTANCE_ID ;
SELECT a.ItemID, a.Name FROM things a WHERE name IN (SELECT name FROM things WHERE itemID = 1)
select @TransactionTypeName = TT.Name from inserted as i left outer join TransactionTypes as TT on TT.TransactionTypeId = i.TransactionType_TransactionTypeId
select S.userName, S.firstName, S.lastName, A.actionDetails, A.actionDate from Departments D join Staff S on d.departmentID=s.departmentID join Actions A on s.staffID=A.staffID WHERE D.departmentID = YourDeparmentID;
SELECT fly.codeAirport1, a1.value as valueAirport1, fly.codeAiport2, a2.value as valueAirport2 FROM fly LEFT JOIN airports a1 ON a1.code = fly.codeAirport1 LEFT JOIN airports a2 ON a2.code = fly.codeAirport2
SELECT * FROM forum.comments AS c JOIN forum.posts AS p ON (comments.post_id = posts.post_id) JOIN forum.users AS u1 ON (posts.user_id = users.user_id) JOIN forum.users AS u2 ON (comments.user_id = users.user_id)
SELECT * FROM tbl_loyalty_card WHERE TRIM(CUSTOMER_ID) != '';
SELECT A,B,max(Date) GROUP BY Text
select ID, Name, Order from tbl where Order = @order OR (@order IS NULL AND order IS NULL)
SELECT BoxNo, MAX(MuffinType) AS MuffinType, MAX(FrostingType) AS FrostingType FROM MuffinData WHERE FrostingTimeApplied >= CONVERT(date, GETDATE()) GROUP BY BoxNo
SELECT * from job where Id not in (SELECT JobId from item where Status <> 'PROCESSED');
SELECT * FROM table_name WHERE user_id=('11') AND to_char(effective_date, 'Dy, Mon DD, YY') = trim('Fri, Nov 26, 10');
SELECT table1.name, table1.timetag, table1.status, table2.timetag AS theothertimetag, table2.description FROM
DELETE a FROM a -- first table INNER JOIN b -- second table ON b.ID = a.ID AND b.Name = a.Name AND b.Foo = a.Foo AND b.Bar = a.Bar
DELETE a, b, c, d FROM a LEFT JOIN b ON b.a_id = a.a_id LEFT JOIN c ON c.a_id = a.a_id LEFT JOIN d ON d.b_id = b.b_id WHERE a.a_id = 1 ;
INSERT INTO users ( name, email, [password] ) SELECT 'newUser' AS name , 'email@example.com' AS email , 'fsfsfs' AS [password] FROM users HAVING COUNT(*) < 100000;
select * from tableA where cloInAB in (select colInAB from tableB where colB = 5);
SELECT * FROM yourTable WHERE is_gallery IS NOT 1
select b.title, b.retail from books b join bookauthor ba using (bookid, authorid) join author a using (authorid) join (select max(retail) highestprice from books bb join bookauthor ba using (bookid, authorid) join author aa using (authorid) where aa.lname = 'WHITE' and aa.fname = 'LISA' group by bb.bookid) temp on retail = highestprice where a.lname = 'WHITE' and a.fname = 'LISA'
UPDATE A SET OAP.GradeRange = CASE WHEN (ABS(CAST(A.GRADE_FROM AS INT) - CAST(A.GRADE AS INT)) > 1) AND ((grade_from NOT IN ('13','15')) OR (GRADE NOT IN ('13','15'))) THEN 'Y' ELSE 'N' END FROM dbo.Table A
SELECT next_day(((to_date(20140203, 'yyyymmdd') - 90) -7), 'SUNDAY') FROM DUAL;
SET NOCOUNT ON GO CREATE PROC #temporaryStoredProcedure AS BEGIN Do Work Here END GO DROP PROC #temporaryStoredProcedure GO
<% @bees.each do |b| %> <%= b.a.name %>, <%= b.a.date %> <% end %>
SELECT * FROM my_table ORDER BY ABS(2.5-num1) + ABS(10.2-num2) LIMIT 1
strace -f -s 1000 -tt sqlite3 newDatabase.db < myschema.sql
WHERE begin_execution >= DATEADD(MINUTE, -5, GETDATE())
select col_a, col_b from t group by col_a, col_b order by max(col_c), col_a
select deptno,max(sal),min(sal),max(rand_sal) from( select deptno,sal,first_value(sal) over(partition by deptno order by dbms_random.value) rand_sal from emp) group by deptno /
ORDER BY region_id, regs
set rowcount 1 select * from data order by timestamp desc
SELECT * FROM appts WHERE timeStart <='$timeEnd' AND timeEnd >='$timeStart' AND dayappt='$boatdate'
UPDATE @salestbl SET @RunningTotal = RunningTotal = sales + CASE WHEN daycount=@lastday THEN @RunningTotal ELSE 0 END ,@lastday=daycount FROM @salestbl
select pdi.height, pdi.width, pj.jobnum, SUM(CASE pdi.alternaterating WHEN 'PARTICLE' THEN 1 ELSE 0 END) particleqty, SUM(CASE pdi.alternaterating WHEN 'PARTICLE' THEN 0 ELSE 1 END) laminatedqty from productiondoorinformation pdi inner join view_productionjobs pj on pj.ctr=pdi.productionjobsctr where pj.jobnum='' + @Jobnum + '' group by pdi.height, pdi.width, pj.jobnum
DECLARE @StudentGrades TABLE(StudentId INT, ClassId INT, Grade DECIMAL(4,2)) -- Sample Entries: INSERT INTO @StudentGrades (StudentId, ClassId, Grade) VALUES (1, 1, 60.0), (1, 2, 70.0), (2, 1, 75.0), (2, 2, 90.0); -- Check table values. SELECT * FROM @StudentGrades; -- This is the report you were looking for. SELECT StudentId, CONVERT(DECIMAL(4,1), AVG(Grade)) As [GPA] FROM @StudentGrades GROUP BY StudentId ORDER BY GPA Desc; <---- EDITED BY FOXDONUT (GPA in descending order)
SELECT t1.object FROM table t1 INNER JOIN table t2 ON t1.object = t2.object WHERE t1.attribute = 'country' AND t1.value = 'Germany' AND t2.attribute = 'position' AND t2.value IN (12,5)
select * from dbo.Items i LEFT JOIN dbo.tags t INNER JOIN @input in on in.[input] = left(t.Tag, len(in.[input])) on i.ID = t.ID where (t.ID is not null or not exists(select 1 from @input))
(SELECT * FROM entrancequestion WHERE Subject='Abstract Reasoning' ORDER BY RAND() LIMIT 10) UNION (SELECT * FROM entrancequestion WHERE Subject='English' ORDER BY RAND() LIMIT 30) UNION (SELECT * FROM entrancequestion WHERE Subject='Mathematics' ORDER BY RAND() LIMIT 30) UNION (SELECT * FROM entrancequestion WHERE Subject='Science' ORDER BY RAND() LIMIT 30 )
CREATE FUNCTION CheckDuplicateValues(@value1 INT, @value2 INT) RETURNS INT AS BEGIN RETURN ( SELECT COUNT(*) FROM Table1 WITH (READCOMMITTEDLOCK) WHERE Value1 = @value1 AND Value2 = @value2 ); END; GO
declare @maxcoord int; declare @rowid int; set @rowid = 35395 select @maxcoord = max(value) from table where row = @rowid update table set value = @maxcoord - value where row = @rowid
SELECT id, name, ROW_NUMBER() OVER (ORDER BY name) FROM dbo.color ORDER BY name;
SELECT CustomerNum, CustomerName, StateProv FROM tblCust WHERE StateProv IN(SELECT StateProv FROM tblState WHERE StateProvDesc LIKE 'co%')
SELECT post.post_id, website.website_id FROM test_posts post JOIN test_posts website ON website.website_id NOT IN ( SELECT sl.website_id FROM test_posts f INNER JOIN test_smartlink_to_websites sl ON f.post_id = sl.post_id WHERE f.post_id = post.post_id ) ORDER BY post_id
raw = LOAD '/foo/input' USING PigStorage('\t') AS (ngram:chararray, year:int, count:int, pages:int, books:int); filtered = FILTER raw BY year >= 1980; grouped = GROUP filtered BY ngram; counts = FOREACH grouped GENERATE group AS ngram, SUM(filtered.count) AS count; sorted = ORDER counts BY count DESC; limited = LIMIT sorted 10000; STORED limited INTO '/foo/output' USING PigStorage('\t');
SELECT * FROM Post p JOIN (SELECT * FROM Comment WHERE comment_creation_date > ? and comment_creation_date < ? AND 'stringlist' LIKE '%'||comment_type||'%' )c ON c.post_id = p.post_id
SELECT * FROM out_of_offer o, (SELECT offer_id, MIN(ABS(hour-hour_offer)) AS diff FROM out_of_offer GROUP BY offer_id) x WHERE o.offer_id = x.offer_id AND ABS(o.hour-o.hour_offer) = x.diff;
select m.sup_email, r.sup_rating from (select substr(value, 1, length(value) - length('_email') as sup_name, info as sup_email from table where value like '%_email') as m left join (select substr(value, 1, length(value) - length('_rating') as sup_name), info as sub_rating from table where value like '%_rating') as r on m.sup_name = r.sup_name order by sup_rating desc limit 1;
select coalesce(job, 'Total') status, count(*) status_numbers, coalesce(job, 'Total') status2, count(*) status_numbers2 from jobs group by rollup(job) order by grouping_id(job) desc;
SELECT * FROM TABLE WHERE keyword = 'guy' AND name in (SELECT name FROM TABLE WHERE keyword = 'developer')
create index myindex on table2(starttime, starttime + Duration / 24);
:setvar dbname "MyNewDatabaseName" IF DB_ID('$(dbname)') IS NULL BEGIN DECLARE @SqlQuery NVARCHAR(1000); SET @SqlQuery = N'CREATE DATABASE ' + QUOTENAME('$(dbname)') + ' COLLATE SQL_Latin1_General_CP1_CI_AS' EXEC(@SqlQuery) END GO USE $(dbname) GO
WHERE DATEPART("w", yourField, vbMonday) >= 6
SELECT weight/1000000 as Weight FROM yourtable
class Account(db.Model): __tablename__ = 'accounts' id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(100), nullable=False) questions = relationship("Question", backref="accounts") class Question(Base): __tablename__ = 'questions' id = db.Column(db.Integer, primary_key=True) account_id = db.Column(db.Integer, db.ForeignKey('accounts.id')) body = db.Column(db.String(500), nullable=False)
select datediff(DateReturned, DateRented) . . .
SELECT company_info.t_id, company_info.company_name, company_info.remark, CASE WHEN tender.company_selected =company_info.company_name THEN tender.company_selected ELSE '' END, CASE WHEN tender.company_selected =company_info.company_name THEN company_info.company_document ELSE '' END FROM company_info LEFT OUTER JOIN tender ON company_info.t_id = tender.t_id
SELECT x.movieid, x.score, COUNT(x.userid) / y.score_count AS percentage FROM YOUR_TABLE x JOIN (SELECT t.movieid, COUNT(t.score) AS score_count FROM YOUR_TABLE t GROUP BY t.movieid) y ON y.movieid = x.movieid GROUP BY x.movieid, x.score
SELECT id, date_modified, value FROM ( SELECT id, date_modified, value, ROW_NUMBER() OVER (PARTITIOn BY Id ORDER BY date_modified DESC) RN FROM tbl ) A WHERE RN = 1
... FROM drives LEFT OUTER JOIN clients ON drives.client = clients.id LEFT OUTER JOIN drivers ON drives.driver = drivers.id LEFT OUTER JOIN vehicles ON drives.vehicle = vehicles.id WHERE ....
selected = FOREACH AB GENERATE science_score, math_score;
SELECT TOP(1) * FROM your_table WHERE date_time_field >= '20120101' AND date_time_field < '20120201' ORDER BY date_time_field DESC
SELECT * FROM person JOIN invited USING (pid) JOIN event USING (pid, eid) JOIN friend_of ON friend_of.sharer = invited.pid WHERE friend_of.viewer = 'AA'
1.Log into your Virtual control panel 2.Select the domain that the MySQL database belongs to 3.Click on the Edit Databases link towards the left and then click import database.
--Product info-- CREATE TABLE PRODUCT ( PRODUCTID INT NOT NULL, PRODUCT_NAME VARCHAR2(20) NOT NULL, CONSTRAINT PRODUCT_PK PRIMARY KEY(PRODUCT_ID) ); --sales info-- CREATE TABLE SALES ( RECIPT_ID SMALLINT DEFAULT (0) NOT NULL, PRODUCTID INT DEFAULT (0) NULL, CONSTRAINT SALES_PK PRIMARY KEY(RECIPT_ID), CONSTRAINT SALES_PRODUCT_FK FOREIGN KEY(PRODUCTID) REFERENCES PRODUCT(PRODUCT_NAME) );
INSERT INTO homework_completion (student_fk, homework_fk) SELECT s.student_id, :homework_id FROM student s WHERE s.student_id = :student_id AND s.teacher_fk = :teacher_id
UDPATE orders JOIN CARS ON orders.Vrm = cars.VRM SET orders.Mileage = cars.mileage WHERE orders.mileage = ''
select c as Result, count(1) as Counter from ( select ColumnA c from TableA union all select ColumnB c from TableA union all select ColumnC c from TableA ) t group by c
select * from history where entry_id in (45,234,435)
SELECT * FROM tblQuestions Q WHERE EXISTS (SELECT * FROM tblAnswers A JOIN tblFeedback F ON A.Submission_ID = F.Submission_ID WHERE Q.Q_ID = A.Q_ID AND F.Module_ID = @moduleID)
SELECT T1.User FROM MyUnnamedTable T1 LEFT OUTER JOIN MyUnnamedTable T2 ON T2.Region = T1.Region AND ( T2.Points > T1.Points OR (T2.Points = T1.Points AND T2.Last_Updated > T1.Last_Updated) ) WHERE T2.User IS NULL AND T1.Region BETWEEN x AND y
SELECT TableA.n AS ColumnA, TableB.n AS ColumnB, (TableA.n + TableB.n) as [Sum] FROM MyTable AS TableA CROSS JOIN MyTable AS TableB WHERE TableA.n < TableB.n AND TableA.n <= 3 AND TableB.n <= 3 ;
CONSTRAINT check_column_name CHECK (REGEXP_LIKE(column-name, '^[A-Z]+$'));
SELECT ID, 'YourTable' TableName FROM YourTable UNION ALL SELECT ID, 'YourOtherTable' FROM YourOtherTable ....
select xmlagg(xmlelement("r", ch)).extract('//text()').getstringval() from ( select distinct first_value(ch) over (partition by lower(ch)) as ch from ( select substr('abcdefghijklmnpqrstuvwxyzABCDEFGHIJKLMNPQRSTUVWXYZ123456789', level, 1) as ch from dual connect by level <= 59 order by dbms_random.value ) where rownum <= dbms_random.value(10,13) );
select * from department where Name like "%Samsung" or (Name like "%Tv%" and Name like "%Samsung%") UNION select from department where Name like "%tv" or (Name like "%Samsung%" and Name like "%TV%")
select id, id_pedido, p.id_articulo, p.descripcion, p.fecha, u.nombre, p.local, case when a.tipo = 'X' then a.inicia+a.entra-a.sale end Existencias, a.tipo from pedidos p join usuarios u on p.id_usuario=u.id_usuario join articulos a on a.id_articulo=p.id_articulo where estado='activo'
create or replace trigger Trig_test AFTER INSERT OR UPDATE OF name ON people AFTER EACH ROW begin if inserting then null; elsif updating then null; end if; end;
SELECT product_id,product_name, min(c) Qty FROM ( SELECT p.product_id, p.product_name, p.material_id, count(sd.product_id) c FROM product p LEFT JOIN scaledata sd ON p.product_id=sd.product_id AND p.material_id = sd.material_id GROUP BY product_id, p.product_name, p.material_id ) a GROUP BY product_id
Products: --id --name --code --price Products_Variants: --id --id_product --id_feature --value Features: --id --name
WITH cte AS ( SELECT DISTINCT a.SET_ID aid, b.SET_ID bid, a.EntriesPerSet FROM mysets a JOIN mysets b ON a.EntriesPerSet = b.EntriesPerSet AND a.SET_ID < b.SET_ID ) SELECT aid, bid FROM cte WHERE EntriesPerSet = ( SELECT COUNT(*) FROM ( SELECT K1,K2 FROM mysets WHERE SET_ID=aid INTERSECT SELECT K1,K2 FROM mysets WHERE SET_ID=bid ) a )
^[A-Za-z]?(\d+)$
select * from attributes a where attribute_id := given_attribute_id and version_id = ( select max( version_id ) from attributes b where attribute_id := given_attibute_id and b.id = a.id )
DECLARE @DBName varchar(255) DECLARE @q varchar(max) CREATE table #tempTable(myParam1 int, -- other params) SET @DBName = 'my_db_name' SET @q = 'insert into #tempTable exec ['+@DBName+'].[dbo].[my_procedure]' EXEC(@q) SELECT * FROM #tempTable drop table #tempTable
UPDATE db1.table1 JOIN db2.table2 on db1.table1.movie_name = db2.table2.movie_name AND db1.table1.year = db2.table2.year SET db1.table1.synopsis = db2.table2.synopsis, db1.table2.AKA = db2.table2.AKA
SELECT VendorID,VendorName,VendorType,FirstName,LastName, VendorCompany,Contact,Phone,AltContact,Email, OpeningBalance,OpeningDate,VendorAccountNo ,Photo,VendorNotes FROM Vendor inner JOIN VendorTypeTable ON Vendor.VendorTypeID=VendorTypeTable.VendorTypeID UNION SELECT VendorID,VendorName,FirstName,LastName, VendorCompany, Contact,Phone,AltContact,Email,OpeningBalance,OpeningDate, VendorAccountNo ,Photo,VendorNotes FROM Vendor WHERE VendorTypeID IS NULL;
select t.* from table1 t inner join (select name, count(*) as cnt from table1 group by name order by count(*) desc limit 2) as c on t.name = c.name order by c.cnt desc
SELECT TYPEOFPRODUCT ,SUM( CASE WHEN BRANCH IN('Mumbai1','Mumbai2') THEN 1 ELSE 0 END) AS Mumbai ,SUM( CASE WHEN BRANCH IN('Delhi1', 'DelhiMain') THEN 1 ELSE 0 END) AS Delhi FROM los_ext GROUP BY TYPEOFPRODUCT
SELECT c.ID, d.BookPrice, d.PriceDate FROM Material as c INNER JOIN (SELECT MaterialID, BookPrice, PriceDate FROM Price as a WHERE PriceDate = (SELECT MAX(PriceDate) FROM Price as b WHERE a.MaterialID = b.MaterialID ) ) as d ON c.ID = d.MaterialID
ResultSet rset = stmt.executeQuery(); OracleResultSet orset = (OracleResultSet) rset; XMLType qRes = XMLType.createXML(orset.getOPAQUE(1));
SELECT FirstName AS First, LastName AS Last FROM ( SELECT ROW_NUMBER() OVER (ORDER BY ID) AS RowNum, FirstName FROM FirstName ) t1 INNER JOIN ( SELECT ROW_NUMBER() OVER (ORDER BY ID) AS RowNum, LastName FROM LastName ) t2 ON t1.RowNum = t2.RowNum
SELECT DISTINCT FirstName, LastName, BirthDate FROM YourTable;
SELECT count(t1.id) FROM mytable t1 INNER JOIN (SELECT id_conv, MAX(id) id FROM foo GROUP BY id_conv) t2 ON t1.id = t2.id WHERE t1.associated_statut = 2
select * from yourtable where id in ( select min(y.id) from yourtable as y inner join ( select [TKG], max([CAP]) as [CAP] from yourtable group by [TKG] ) as y2 on y2.[TKG] = y.[TKG] and y2.[CAP] = y.[CAP] group by y.[TKG] )
cast((COUNT(v.id) * r.res_cpm/1000)as decimal (10,2))
select p.name from parts p inner join workorders_parts wp on wp.partId = p.partId where wp.workorderId = x;
SELECT name FROM city_i18n WHERE (name != (SELECT name FROM city_i18n WHERE ID = 2745 AND culture = 'es_ES') OR culture = 'es_ES') AND ID = 2745 AND culture IN ('es_ES', 'en_GB');
EXEC sp_spaceused 'TableName'
Data ftest; Merge ftest tryf1 ; By ticker month; Run;
Select * from (with mytable as (select something from sometable) select somestuff from mytable connect by level <= 50) B
UPDATE employee SET E.image = '123.jpg' FROM employee,personal_data where employee.emp_id = personal_data.emp_id
protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Entity<buildingInfo>().HasMany(b=>b.curRooms).WithRequired().HasForeignKey(r=>r.buildingId); }
SELECT p1.PASS_NUMBER FROM PASS p1 WHERE p1.PASS_LOCATION = 'A' AND EXISTS (SELECT * FROM PASS p2 WHERE p1.PASS_NUMBER=p2.PASS_NUMBER AND p2.PASS_LOCATION='B') ;
DECLARE @Float FLOAT SET @Float = 41819.3798611111 SELECT DATEADD(ms, 500 - DATEPART(ms, CAST(@Float AS DATETIME) + '00:00:00.500'), CAST(@Float AS DATETIME))
select ts.system, town.owner from (select system, row_number() over (order by system) as seqnum from (select distinct system from t ) ts ) ts full outer join (select owner, row_number() over (order by owner) as seqnum from (select distinct owner from t ) town ) town on ts.seqnum = town.seqnum
select distinct wt.operation from words_table wt where YOURSTRING like '%' || wt.words || '%';
DELETE t1 FROM Table1 t1 inner join ( select col1, col2 from other_table where ... ) t2 on t2.col1 = t1.col1 and t2.col2 = t1.col2
SELECT userid, SUM(total_hours) - SUM(missed_hours) AS hours FROM mytable WHERE startdate >= cast( cast(year(dateadd(MM,-6,getdate())) as varchar(4)) + '-07-01' as date ) and startdate < cast( cast(year(dateadd(MM, 6,getdate())) as varchar(4)) + '-07-01' as date ) GROUP BY userid
SELECT studentName, COUNT(lessonCode) FROM Lessons GROUP BY studentName HAVING COUNT(lessonCode) = 10
SELECT u.firstname, u.lastname, u.username, u.alt_id, u.email, cg.group_name FROM user u LEFT JOIN class_group cg ON find_in_set(u.id, list_students_id) > 0;
declare @StartValue int SELECT @StartValue = MAX(UserFile) FROM tbl_Users INSERT INTO tbl_Users (UserFile,Name) SELECT (@StartValue + ROW_NUMBER() over (order by (select 1))) as IncrementNumber, Name FROM tbl_ContactPerson WHERE (ContactType = 'U')
SELECT user_id, IFNULL((q_count+1) % 4, 0) AS next FROM users LEFT JOIN ( completed_quizes NATURAL JOIN ( SELECT user_id, MAX(completion_date) AS completion_date FROM completed_quizes GROUP BY user_id ) AS t ) USING (user_id)
;WITH x AS (SELECT ID, OrderValues, rn = ROW_NUMBER() OVER (ORDER BY ID) FROM dbo.tablename ) UPDATE x SET OrderValues = rn;
declare @ColumnAVal varchar(20); declare @ColumnBVal varchar(20); select @ColumnAVal = ColumnA , @ColumnBVal = ColumnB from TableA where....
-- Field_table (list_id, field_name, field_value)
update TABLENAME set columnname = replace(columnname, ' And ', ' and ');
SQL> select * from V$OBJECT_PRIVILEGE where object_type_name = 'PROCEDURE'; OBJECT_TYPE_NAME OBJECT_TYPE_ID PRIVILEGE_ID PRIVILEGE_NAME -------------------- -------------- ------------ --------------- PROCEDURE 7 12 EXECUTE PROCEDURE 7 26 DEBUG
SELECT kid_id, status, MAX(`timestamp`) as `timestamp` FROM actions WHERE DATE(`timestamp`) = CURDATE() GROUP BY kid_id, status
mysqladmin extended -r -i 10 | grep Handler_read_rnd_next -- ignore the first line of output... | Handler_read_rnd_next | 429224 |
SELECT DISTINCT c.* FROM categories c, categories p WHERE c.status<>0 and (c.parent_id = 0 OR (c.parent_id=p.id and p.parent_id=0)) ORDER BY c.id,c.position
DECLARE @T01 TABLE([2 37] text, [2 37 Floor] int, [2 37 Ceiling] int) INSERT @T01 ([2 37]) VALUES('1.5') INSERT @T01 ([2 37]) VALUES('4.1') INSERT @T01 ([2 37]) VALUES('5.9') update t set [2 37 Floor]=floor(CONVERT(decimal(8,2),(CAST([2 37] AS varchar(10)))) ) , [2 37 Ceiling] =ceiling(CONVERT(decimal(8,2),(CAST([2 37] AS varchar(10))))) from @T01 t WHERE [2 37] LIKE '%.%' select * from @T01
SELECT name FROM pizzas WHERE toppings LIKE '%cheese%'
SELECT E.id, E.time, E.title, E.body, E.type, C.comments, E.googleID, L.likeCount FROM elements E LEFT JOIN( SELECT elementID, GROUP_CONCAT(body SEPARATOR '|-|') AS comments FROM comments GROUP BY elementID ) C on C.elementID = E.id LEFT JOIN ( SELECT elementID, COUNT(id) AS likeCount FROM likes GROUP BY elementID ) L ON L.elementID = E.id;
SELECT animal_id, (SELECT owner_name FROM Owners WHERE owner = Animals.owner_id) FROM Animals
with cte as ( select t.Id, t.Amount, t.Id as [Parent Id] from Table1 as t union all select c.Id, t.Amount, t.Id as [Parent Id] from cte as c inner join Table1 as t on t.[Parent Id] = c.[Parent Id] ) select Id, sum(Amount) as Amount from cte group by Id
SELECT REPLACE(SUBSTRING(CreateDate,2,8),'/','')
SELECT CAST(colname AS time) FROM tablename;
SELECT Phases_ID, Project, Customer FROM ( SELECT Phases_ID, Milestones_PhaseID, Milestones_Category FROM Phases INNER JOIN Milestones ON Phases_ID = Milestones_PhaseID ) AS src PIVOT ( COUNT(*) FOR Milestones_Category IN ([Project], [Customer]) ) AS pvt
SELECT MAX(c.name), COUNT(distinct e.student_id) FROM Enrollment e INNER JOIN Course c ON c.id = e.course_id GROUP BY e.course_id, c.name
SELECT macs_sales.Date, (MacsSold - WindowsSold) AS sales_difference FROM ( SELECT Date, Sold as MacsSold FROM computer_sales WHERE Products="Mac" ) macs_sales INNER JOIN ( SELECT Date, Sold as WindowsSold FROM computer_sales WHERE Products="Windows" ) windows_sales ON macs_sales.Date = windows_sales.Date
select id, a, b from table where id in (1,2,5)
select employeename, IDs = STUFF((SELECT ','+ CAST(e2.[ID] AS VARCHAR(10)) FROM emp e2 WHERE e2.employeename = e1.employeename For XML PATH('') ),1,1,'') FROM emp e1 GROUP BY employeename having COUNT(*) > 1
SET @MinOrder = SELECT MIN(UnitPrice) FROM [Order Details] WHERE CustomerNumber = 'ALFKI'
SELECT tom08/tom, tom920/tom, tom2135/tom, tom3650/tom, tom51/tom FROM table1 t1, table2 t2 WHERE t1.ppoint = t2.ppoint;
SELECT DISTINCT Orders.OrderID FROM Orders INNER JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID WHERE OrderDetails.ProductID IN ('ProductX', 'ProductY', 'ProductZ') GROUP BY Orders.OrderID HAVING COUNT(*) = 3
.... WHERE id IN (3, 9, 100, ...)
WITH rownums(TIMESTAMP, ECGVALUE, RN) AS ( SELECT TIMESTAMP, ECGVALUE, ROW_NUMBER() OVER(ORDER BY TIMESTAMP) AS RN FROM EKLUND.DEV_RAWECG ) SELECT allrows.TIMESTAMP, allrows.ECGVALUE, allrows.RN FROM rownums allrows CROSS JOIN rownums rown WHERE rown.RN = n AND allrows.RN >= n AND rown.TIMESTAMP + offset >= allrows.TIMESTAMP;
INSERT INTO Match (Team1,Team2) SELECT Team1,Team2 FROM Match WHERE ID='1';
Option Compare Database Option Explicit Private Sub chkMyCheckbox_AfterUpdate() Me.txtMyIntAsBoolean.Value = IIf(Me.chkMyCheckbox.Value, 1, Null) End Sub Private Sub Form_Current() Me.chkMyCheckbox.Value = (Not IsNull(Me.txtMyIntAsBoolean)) End Sub
SELECT COUNT(CASE OPP WHEN 'FOO' THEN 1 END), COUNT(CASE OPP WHEN 'BAR' THEN 1 END) FROM tablename WHERE OPP IN ('FOO', 'BAR') AND date = 'BAZ'
SELECT Message.* FROM Message WHERE Message.MessageID IN (SELECT MAX(MessageID) FROM Message GROUP BY CASE WHEN ReceivingUserID > SendingUserID THEN ReceivingUserID ELSE SendingUserID END, CASE WHEN ReceivingUserID > SendingUserID THEN SendingUserID ELSE ReceivingUserID END )
select MONTH('10/15/1981') --10 select DAY('10/15/1981') --15 select YEAR('10/15/1981') --1981 Select Dates from tablename Where MONTH(Dates) = 10
MWATSON@> set serveroutput on MWATSON@> !cat test.sql BEGIN IF 1 = 1 THEN DBMS_OUTPUT.PUT_LINE('ABOUT TO EXIT'); RETURN; END IF; DBMS_OUTPUT.PUT_LINE('DID NOT EXIT'); END; MWATSON@> @test 8 / ABOUT TO EXIT PL/SQL procedure successfully completed. MWATSON@>
select p.Product_Name Product , p.Purchase_Qty , isnull(sum(i.qty),0) Issue_Qty , p.Purchase_Qty-isnull(sum(i.qty),0) InStock from (select p.id, p.Product_Name, isnull(sum(d.qty),0) Purchase_Qty from product p left join purchase_dtl d on p.id = d.Product_ID group by p.id, p.Product_Name) p left join issue_dpt i on i.Product_ID = p.id group by Product_Name, p.Purchase_Qty
SELECT ID, Name, Properties = STUFF(( SELECT ',' + PropertyName FROM dbo.Properties WHERE ID = x.ID FOR XML PATH(''), TYPE).value('.[1]', 'nvarchar(max)'), 1, 1, '') FROM dbo.ViewName AS x GROUP BY ID, Name;
SELECT DISTINCT customer FROM tblname t1 WHERE EXISTS (SELECT * FROM tblname WHERE product = 'Pen' AND customer = t1.customer) AND EXISTS (SELECT * FROM tblname WHERE product = '19" LCD Screen' AND customer = t1.customer)
SELECT * FROM table WHERE keywords REGEXP '[[:<:]]rid[[:>:]]'
select * from dba_sys_privs where privilege = 'CREATE TABLE' or privilege = 'CREATE ANY TABLE';
select hour(StartTime), count(StartTime) from table1 group by hour(StartTime)
SELECT * FROM EMPLOYEES WHERE EID=...
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY col2) rn FROM mytable WHERE col1 = condition ) q WHERE rn = 4
SELECT name FROM student WHERE (SELECT COUNT(*) FROM grade WHERE grade = 'F' AND id = student.id) = 0
update Persons set Birthday='2001-09-19';
SELECT r.* FROM room r LEFT JOIN `reservationroom` rr ON r.`hotelID` = rr.`hotelID` AND r.`roomID` = rr.`roomID` WHERE ( rr.`reservationroomID` = '' OR rr.`reservationroomID` IS NULL );
current_user.fragile_records.find(params[:id]).destroy
select transferId, userId, subDeptId from (select t.*, row_number() over (partition by userid order by TransferId desc) as seqnum from t ) t where seqnum = 1
select saalry from emp where INSTR( ',' || :id || ',' , ',' || TRIM(TO_CHAR(emp_id)) || ',' ) > 0;
SELECT name, process_code AS Status, CASE process_code WHEN '7' THEN 'Rejected' ELSE 'Approved' END FROM association
class Book(models.Model): (...) class Meta: ordering = ['author', 'title']
SELECT o.CustomerID, null emptyColumn, o.ShipFirstName, case when o.ShipCountry = 'United States' then 'US' when o.ShipCountry = 'Canada' then 'CA' end, c.EmailAddress FROM Orders o, Customers c WHERE o.CustomerID = c.CustomerID
UPDATE VARS V SET (B,C) = (SELECT B, B+10 AS C FROM (SELECT A*A AS B, ROWID AS X FROM VARS) WHERE V.ROWID = X );
select sys_context('userenv', 'instance_name') from dual
USE YourDatabaseName; GO EXEC sp_recompile N'Product'; GO
SELECT CONTACTS.name, EMAILS.email FROM CONT_EMAIL INNER JOIN CONTACTS ON CONT_EMAIL.name_ID = CONTACTS.ID INNER JOIN EMAILS ON CONT_EMAIL.email_ID = EMAILS.ID ORDER BY CONTACTS.name;
SELECT `date`, SUM(pageviews) AS pageviews FROM (SELECT DATE_FORMAT(`date`, "%Y-%m") AS `date`, SUM(pageviews) AS pageviews FROM `domains_data` GROUP BY `date`) AS Ref GROUP BY `date` ORDER BY `date` DESC
select sensor_id, event_type, value, date from table1 T1 where date>= all ( select max(date) from table1 T2 where T1.sensor_id = T2.sensor_id and T1.event_type = T2.event_type) order by sensor_id, event_type
SELECT COUNT(il.DocumentNumber) AS TotalNumberIncomingLetters FROM IncomingLetter il INNER JOIN Department d on d.ID = il.Assigned_To_Department WHERE d.Short_Name="My Department Name";
SELECT similarity((SELECT a FROM users a WHERE a.id=123), (SELECT b FROM users b WHERE b.id=456));
SELECT "IDpupil", "name", "class" FROM "pupils"
with t as ( select city as c, destination as d from thetable ) select c, d from t;
SELECT account.acno, account.Name,Sum(agro.Price*agro.qty) FROM account INNER JOIN data ON account.acno= data.acno; INNER JOIN agro On data .BillNo = agro.BillNo GROUP BY account.acno, account.name
select artist.name, album.title, song.title from artist inner join album on album.artistid = artist.artistid inner join albumsongs on albumsongs.albumid = album.albumid inner join songs on songs.songid = albumsongs.songid where artist.name = 'Pere Ubu'
CREATE TABLE IF NOT EXISTS `table` ( id INT(10), word VARCHAR(500) ); INSERT INTO `table` VALUES (NULL,"1234");
SELECT sum(y*x) / sum(x*x) as slope FROM findslope INTO slope_variable
SELECT QUOTENAME(field1,'''')+ case when row_number() over(order by (select 1))= count(*) over () then '' else ',' end AS [1] FROM <table>
Public Function GetBarFooByBaz(ByVal Baz As String) As String Dim sql As String = "SELECT foo FROM bar WHERE baz= @Baz" Using cn As New SqlConnection("Your connection string here"), _ cmd As New SqlCommand(sql, cn) cmd.Parameters.Add("@Baz", SqlDbType.VarChar, 50).Value = Baz Return cmd.ExecuteScalar().ToString() End Using End Function
select year, month, fixes, fixes - lag(fixes) over (order by year, month) as increase, from the_table;
CREATE OR ALTER TRIGGER YOUR_TABELE_BIU0 FOR YOUR_TABELE ACTIVE BEFORE INSERT OR UPDATE POSITION 0 AS begin IF (CHAR_LENGTH(new.YOURFIELD)=0) THEN exception E_NOT_EMPTY 'field can not be empty'; end
SELECT SKU, COUNT(*) AS Ranking FROM tblKeyWords T1 -- or whatever the name WHERE Keyword IN ('Lord', 'Ring') -- here the keywords AND KeywordType = 'T' -- Optionally be specific on type AND SKU IN ( -- filter to only take items that are DVDs SELECT SKU FROM tblKeywords WHERE KeywordType = 'X' AND Keyword = 'DVD' ) GROUP BY SKU ORDER BY COUNT(*) DESC
select t.*, (select 1 + count(distinct foo + ':' + bar) from table t2 where t2.foo < t.foo or t2.foo = t.foo and t2.bar < t.bar ) as rank from table t;
created_on = db.Column(db.DateTime, server_default=db.func.now()) updated_on = db.Column(db.DateTime, server_default=db.func.now(), onupdate=db.func.now())
SELECT ColumnA, COUNT(*) TotalCount FROM TableA INNER JOIN TableA_1 on fID = hID WHERE dateCreated > '2013-05-08 00:00:00' GROUP BY ColumnA HAVING COUNT(DISTINCT ColumnE) > 1 ORDER BY COUNT(*) DESC
SELECT BRANCH, Stuff((SELECT ',' + CLIENTIDS FROM CLIENTDETAILS a WHERE a.BRANCH = t.BRANCH FOR xml path('')), 1, 1, '') AS ClientId FROM CLIENTDETAILS t GROUP BY BRANCH
SELECT CurrentSelectedCost, PreviousCost, NextCost FROM ( SELECT cost as CurrentSelectedCost, 0 as PreviousCost, 0 as NextCost FROM A UNION SELECT 0 as CurrentSelectedCost, cost as PreviousCost, 0 as NextCost FROM B UNION SELECT 0 as CurrentSelectedCost, 0 as PreviousCost, cost as NextCost FROM C ) as COSTS
OR f_name + ' ' + l_name = user-input
SELECT letter, Name, COUNT(*), SUM(CASE WHEN price>10 THEN 1 ELSE 0 END) FROM TableThatShouldHaveAppearedInTheQuestionInTheFromClause GROUP BY letter, Name
WHERE col1 = isnull(@col1, col1) and col2 = isnull(@col2, col2) ...etc
EXECUTE 'SELECT count(*) FROM ' || tabname::regclass;
SELECT comp.companyid, count(distinct emp.employee_id), FROM Tbl_Company comp , Tbl_Employee emp WHERE emp.company_id = comp.company_id AND emp.company_id = 1234 GROUP BY comp.companyid
SELECT DISTINCT T1.UserId, Stuff( (SELECT N', ' + T2.Str_Value FROM t T2 WHERE T2.userId = T1.userid ORDER BY T2.Str_Value FOR XML PATH(''),TYPE).value('text()[1]','nvarchar(500)'),1,2,N'') AS Str_Value FROM t T1
SELECT g.gift_id, COUNT(v.gift_id) AS given_count FROM gifts AS g LEFT OUTER JOIN gifts_given AS v USING (gift_id) GROUP BY g.gift_id;
SELECT * FROM table WHERE id NOT IN (SELECT c2 FROM table GROUP BY c2 HAVING Count(c2) = 2)
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %> .... <fmt:formatDate value="${det.fecha}" pattern="dd-MMM-YYYY" />
select * from (select e.user_id, sum(e.points) as total_points, sum(points) filter (where extract(month from created) = 1) as month_points, rank() over (order by sum(points) desc) from event e group by e.user_id ) as inner_query where user_id = 1;
select * from sys.indexes select * from sys.index_columns
SELECT RowNum,store_ID,businessType,createDate,expirationDate FROM (SELECT IF(@businessType = @businessType:=businessType, @ctr := @ctr + 1, @ctr := 1) as RowNum, businessType, store_ID, createDate, expirationDate FROM stores, (SELECT @ctr := 1, @businessType := 0) AS a WHERE businessType IN (1,2,3) AND ZIP = '11217' AND state = 'NY' ORDER BY businessType, createDate DESC ) AS b WHERE RowNum in (1,2,3);
SELECT PartNum, OrderNum, NeedDate FROM SomeTable ORDER BY MIN(NeedDate) OVER (PARTITION BY PartNum), PartNum
MERGE INTO regions r USING regions_temp t ON (r.id_region = t.id_region) WHEN MATCHED THEN update set r.region_name = t.region_name
SELECT KeywordId,currentposition,PsnUpdateDate,PsnUpdateBy FROM seo.Tbl_KeywordPosition WHERE psnupdatedate = '2015-01-22' UNION SELECT KeywordId,currentposition,PsnUpdateDate,PsnUpdateBy FROM seo.Tbl_KeywordPosition WHERE psnupdatedate ='2015-01-23';
SELECT Manufacturer FROM Tbl GROUP BY Manufacturer HAVING MAX(CASE WHEN Size = '10mm' THEN Cost END) > MAX(CASE WHEN Size = '5mm' THEN Cost END)
SELECT * FROM HR_CATEGORY INNER JOIN (SELECT CATEGORY FROM PEA_TEMPLATE WHERE TEMP_ID = 000001 AND TEMP_VERSION = 2) PEA ON PEA.CATEGORY LIKE '%'''+CAT_CODE+'''%'
SELECT ISNULL(a.one,'') + ' test ' + ISNULL(b.two , '') from table1 a right join table1 b on a.id =b.id
select PayType = 'PDC' union all select PayType = 'NoPDC' union all select PayType = 'ECS'
declare @S varchar(20) set @S = '1,2,3,4,5' declare @tempTable as table (col1 varchar(max), col2 varchar(max)) While len(@s) > 0 begin insert into @tempTable(col1) select left(@S, charindex(',', @S+',')-1) set @S=stuff(@S, 1, charindex(',', @S+','), '') end select * from @tempTable
javax.persistence.criteria.CriteriaBuilder cb = getEntityManager().getCriteriaBuilder(); javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery(); javax.persistence.criteria.Root<Person> e = cq.from(perdon.class); cq.where(cb.equal(e.get("idCompany").get("idCategory"), cat)); cq.orderBy(cb.desc(e.get("idPerson"))); return getEntityManager().createQuery(cq).getResultList();
SELECT * FROM pledger WHERE dcno <> 1 OR pledger.etype <> 'sale'
select * from exam_2011.score_07 union all select * from exam_2011.score_08 union all select * from exam_2011.score_09 union all select * from exam_2011.score_10 union all select * from exam_2011.score_11 union all select * from exam_2011.score_12 union all select * from exam_2012.score_01 union all select * from exam_2012.score_02 where day <= 2
SELECT ads.*, c.description as categoryDescription, sc.description as subcategoryDescription, FROM ads INNER JOIN category c ON c.categoryID = ads.categoryID INNER JOIN subcategory sc ON sc.subcategoryID = ads.subcategoryID
create or replace function F0416B RETURN VARCHAR2 is V_STMT VARCHAR2(1999); V_RESULT VARCHAR2(1999); BEGIN V_STMT := 'INSERT INTO TEST0411(FIELD1, FIELD2) VALUES ( :"A.1" , :"A.2")'; EXECUTE IMMEDIATE V_STMT USING 'AS201', 'AS202'; RETURN 'INSERT-OK'; COMMIT; EXCEPTION WHEN OTHERS THEN RETURN SQLERRM; END;
UPDATE table SET column = REPLACE(column, 'Street', 'St');
SELECT ... FROM rooms WHERE dates LIKE '%09/08/10%' Or dates LIKE '%08/08/10%'
select ID from tablename where 'Twinkle, twinkle, little star, How I wonder what you are! Up above the world so high, Like a diamond in the sky.' LIKE CONCAT('%', word, '%');
SELECT u.userid, u.username, max(lt.lastlogin) FROM user u, logintrack lt WHERE u.userid = lt.userid GROUP BY u.userid, u.username
SELECT operator_no, log_in_time, TIME_FORMAT( TIMEDIFF(log_in_time, log_out_time), '%H:%i hrs' ) AS Duration
select count(distinct substring_index(col, '-', 1)) from t;
SELECT TOP 1 [Value] FROM [MyTable] WHERE [Postcode] = 'AB12 1AA';
UPDATE Template_Structure SET StructureTypeRef = (SELECT StructureTypeRef FROM dbo_StructureType WHERE StructureType = 'External Areas') WHERE StructureType = 0
SELECT CAST([Date] AS Date) AS [Date], COUNT(CASE WHEN DATEPART(hour, [Date]) BETWEEN 9 AND 11 THEN 1 ELSE NULL END) AS [Sales 9am-12pm], COUNT(CASE WHEN DATEPART(hour, [Date]) BETWEEN 12 AND 14 THEN 1 ELSE NULL END) AS [Sales 12pm-3pm], COUNT(CASE WHEN DATEPART(hour, [Date]) BETWEEN 18 AND 20 THEN 1 ELSE NULL END) AS [Sales 6pm-9pm] FROM Table GROUP BY CAST([Date] AS Date) /*For SQL2008*/
select a.ID as "Article-Number", a.Name as "Name" from Articles a where (a.ID = '3264')
select regexp_replace('temp_a, temp_b, temp_c', '([a-zA-Z0-9_]+)(,?)', 'e.\1\2') from dual;
Select Action.* From Action Left Join Pro ON Action.ActionConnectionID=Pro.ProID and ActionTypeID=1 Left Join Project ON Action.ActionConnectionID=Project.ProjectID and ActionTypeID=2
Select id, count(case when no1='B' then 1 END) + count(case when no2='B' then 1 END) + count(case when no3='B' then 1 END) AS count_all From yourtable Group by id
create table t1 (time_of_day interval day (0) to second(0)); insert into t1 values (TO_DSINTERVAL('0 23:59:59')); select date '2009-05-13'+time_of_day from t1;
;WITH CTE AS( SELECT CAST (xmlData as nvarchar(max)) as X FROM SampleTable ) SELECT SUBSTRING(X,CHARINDEX(N'Þ',X),50) as [String] FROM CTE WHERE CHARINDEX(N'Þ',X)>0
Select a.AccountID, a.AccountTitle, t.DateTime as TranasactionDateTime, t.Amount, sum(t.Amount) over (partition by t.Account_Id order by t.DateTime) as RunningAmount from Payments.Accounts a Inner Join Payments.Transactions t on a.AccountID = t.Account_ID where t.Account_ID = 1;
select type, sum(if(approval is null, 1, 0)) as pending, sum(if(approval=0, 1, 0)) as denied, sum(if(approval=1, 1, 0)) as approval from test group by type
$and_1 = db_and()->condition('b.date' , $date, '=')->condition('b.time', $begin_time, '>'); $and_2 = db_and()->condition('b.date' , $tomorrow, '=')->condition('b.time', '00:00', '>=') $query->condition(db_or()->condition($and_1)->condition($and_2));
select u.id_user, u.name, (select p.filename from user_picture as p where p.id_user=u.id_user and ord=1) as userpicture, (select max(s.id_sticker) from user_sticker as s where s.id_user_to=u.id_user) as userstickerid from user as u where u.id_user = $$$$
SELECT PARTNER_WORKORDER.statusNo as number, count(statusNo) as total FROM PARTNER_WORKORDER inner join PARTNER_WORKORDER_ADDRESS ON PARTNER_WORKORDER.salesOrderNo = PARTNER_WORKORDER_ADDRESS.salesorder_no WHERE orderDt <= '2012-11-20 00:00:00.000' AND country_code <> 'US' group by PARTNER_WORKORDER.statusNo ORDER BY total desc LIMIT 1
/(?:"(?:[^\x5C"]+|\x5C(?:\x5C\x5C)*[\x5C"])*"|'(?:[^\x5C']+|\x5C(?:\x5C\x5C)*[\x5C'])*'|[^"',]+)+/g
SELECT * FROM MyTable A JOIN MyTable B ON (A.TranID + 1) = B.TranID WHERE A.Code1 = 1 AND B.Code2 = 'SR'
var str = JSON.stringify(req.projectTemplate) req.projectTemplate._doc.taskTemplates = req.projectTemplate.taskTemplates str = JSON.stringify(req.projectTemplate) res.send(JSON.stringify(req.projectTemplate))
CREATE TRIGGER [dbo].[TableInsert] ON [Table] AFTER INSERT AS --Do your magic
SELECT table1.*, table2.EID
select v.* from (select v.*, rank() over (partition by month order by [rank] desc) as rankrank from view v ) v where rankrank = 1;
false OR false => false false OR true => true true OR false => true true OR true => true
#!/bin/sh echo 'postgres:newpassword' | chpasswd
IF(Field = "" or Field IS NULL,'b',concat(Field,'_b'))
oExcel = CreateObject("Excel.Application") oExcel.Visible = False oBooks = oExcel.Workbooks oBook = oBooks.Open(Dts.Variables("filePath").Value.ToString()) //Your macro here: oExcel.Run("Yourmacro")
<query> <team>college</team> <studies>=="mathematics"</studies> </query>
DATEDIFF(d, RunOutDate, ResupplyDate) + 1
SELECT e.id, e.name, s.name FROM Employee e LEFT JOIN Supervisor s ON e.supervisor = s.id
DECLARE @SpecCount INT DECLARE @BrandCount INT SELECT @SpecCount = COUNT(*) FROM @SPEC SELECT @BrandCount = COUNT(*) FROM @BRAND SELECT p.*, s.*, b.* FROM @PRODUCT p LEFT JOIN @BRAND b ON b.BRANDID = p.BRANDID LEFT JOIN @SPEC s ON s.SPECID = p.SPECID WHERE ((s.SPECID IS NOT NULL OR @SpecCount = 0) AND (b.BRANDID IS NOT NULL OR @BrandCount = 0))
SELECT b.FirstName Patient_FirstName, b.LastName Patient_LastName, b.Address Patient_Address, c.FirstName Responsible_Firstname, c.LastName Responsible_LastName, c.Address Responsible_Address FROM Patient a INNER JOIN Person b ON a.PersonID = b.PersonID INNER JOIN Person c ON a.ResponsiblePersonId = c.PersonID
set pagesize 1000;
SELECT * FROM dbo.yourTable t WHERE EXISTS ( SELECT 1 FROM dbo.yourTable t2 WHERE t2.Column3 = t.Column3 HAVING COUNT(*) = 1 )
------------------------------------ C50B0567-F8CC-4219-A1E1-91C97BD9AE1B (1 row(s) affected) -------------------- 7423352504965404994 (1 row(s) affected) ------------------------------------ C50B0567-F8CC-4219-0000-000000000000 (1 row(s) affected)
select coalesce(t3.id,t2.id, t1.id) as deepChildId, concat_ws('->', t.name ,t1.name, t2.name, t3.name ) as childList from Table1 t left join Table1 t1 on t.id = t1.parent_id left join Table1 t2 on t1.id = t2.parent_id left join Table1 t3 on t2.id = t3.parent_id where t.parent_id =0
SELECT x.*, COUNT(y.ID) AS y_count FROM tableX x LEFT JOIN tableY y ON y.xFK = x.ID GROUP BY x.ID HAVING y_count > 1
ALTER TABLE `test`.`UniqueKeys` DROP INDEX `InputOutputConfigurationServerAccountId`, ADD UNIQUE INDEX `CompositeKey` (`InputOutputConfigurationServerAccountId`, `Identifier`,`TimeStampReceived`) ;
SELECT * FROM RestaurantName ORDER BY RestaurantTime ASC;
- Entity = User, in your Wordpress Example - Attribute = 'First Name', 'Last Name', etc - Value = 'John', 'Smith', etc
SELECT event, count(event) as event_count, count(event) * 100.0 / (select count(*) from event_information) as event_percent FROM event_information group by event
SELECT * FROM cities where name REGEXP '^[A-Za-z]';
SELECT wp_posts.*, GROUP_CONCAT(meta_value SEPARATOR ', ') FROM wp_posts INNER JOIN wp_postmeta USING post_id GROUP BY wp_posts.post_id;
SELECT name, to_order FROM Table1 ORDER BY ( CASE WHEN to_order = 1 THEN 0 WHEN to_order = 3 THEN 1 ELSE 2 END ), to_order
Select * From ServerName.DbName.SchemaName.TableName
CREATE PROCEDURE `SynchroniseMessages` () LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA SQL SECURITY DEFINER BEGIN DELETE FROM `mydb2`.`messages`; INSERT INTO `mydb2`.`messages` SELECT * FROM `mydb1`.`messages`; END
select items.id, tags.id from items left join itemTags on (items.id=itemTags.itemId) left join tags on (tags.id=itemTags.tagId) where not exists( select 1 from tagSearch left join itemTags on (itemTags.tagId=tagSearch.tagId) where itemTags.tagId is null and tagSearch.searchId=? )
select s.shareId, s.shareName, s.shareCategory, T.AvgPrice from share_tbl s join ( select shareCategory, avg(ShareSellPrice) as AvgPrice from share_tbl group by shareCategory )T on s.shareCategory = T.shareCategory and s.ShareSellPrice >= T.AvgPrice
UPDATE table1 SET a = t2.a, b = t2.b, (...) FROM ( SELECT ..... with join ... WHERE .... ) t2 WHERE table1.id = table2.id
select top 10 s.SALESID, SUM(sp.LINEAMOUNT) as 'TotalLineamount' from AX_CUSTPACKINGSLIPJOUR as s right outer join AX_SALESLINE as sp on s.SALESID=sp.SALESID left outer join AX_INVENTTRANS as p on sp.ITEMID=p.ITEMID where s.SALESID is not null group by s.SALESID
SELECT petid1, petid2, (a.total + b.total) as combinedtotal FROM (SELECT petid1, COUNT( * ) AS total FROM cdc_padchat WHERE petid1 !=0 GROUP BY petid1) a INNER JOIN (SELECT petid2, COUNT( * ) AS total FROM cdc_padchat WHERE petid2 !=0 GROUP BY petid2) b ON a.petid1 = b.petid2 ORDER BY combinedtotal DESC
SELECT department, ( SELECT salary FROM my_table t2 WHERE t2.department = t1.department ORDER BY salary DESC LIMIT 2, 1 ) FROM my_table t1 GROUP BY department
SELECT count(distinct(sale_id)) FROM sale_items WHERE item_id='<your_item_id>'
SELECT Calendar.Date, Stores.Store, COUNT(T1.transaction_id) AS Number FROM Calendar, Stores LEFT JOIN Transactions T1 ON T1.date_of_transaction = Calendar.date AND T1.store = Stores.store GROUP BY Calendar.Date, Stores.Store
WITH malePatrons AS ( SELECT name, m.movID FROM movie JOIN ticket tic ON movie.movID = tic.movID JOIN patron pat ON pat.PID = tic.patronID WHERE pat.gender = "male" ), femalePatrons AS ( SELECT name, m.movID FROM movie JOIN ticket tic ON movie.movID = tic.movID JOIN patron pat ON pat.PID = tic.patronID WHERE pat.gender = "female" ) Select * FROM malePatrons JOIN femalePatrons fem ON malePatrons.movID = fem.movID
; WITH cte AS ( SELECT RelationID, ROW_NUMBER() OVER (PARTITION BY ConID, ProID ORDER BY [INT]) AS rnum FROM YourTable ) DELETE FROM YourTable WHERE RelationID in (SELECT RelationId FROM cte WHERE cte.rnum > 1)
SELECT col1, col2 FROM ( SELECT col1, col2, ROW_NUMBER() OVER (ORDER BY ID) AS RowNum FROM MyTable ) AS MyDerivedTable WHERE MyDerivedTable.RowNum BETWEEN @startRow AND @endRow
MERGE INTO KEYWORDS masterList USING ( SELECT COUNT(*) AS OCCURRENCE,KEYWORDS.KEYWORD AS KEYWORD FROM KEYWORDS AS keywordList CROSS JOIN PHRASES AS phraseList WHERE (dbo.RegExIsMatch('.*' + keywordList.KEYWORD + '.*',phraseList.PHRASE,1) = 1) GROUP BY KEYWORD ) frequencyList ON (masterList.KEYWORD = frequencyList.KEYWORD) WHEN MATCHED THEN UPDATE SET masterList.OCCURRENCE = frequencyList.OCCURRENCE;
WITH cte AS ( select pc.CategoryId, pp.LanguageId, pp.ProductId, pp.Price, rnk = RANK() OVER(PARTITION BY pc.CategoryId ,pp.LanguageId ORDER BY pp.Price) from ProductCategory as pc join Product as p on pc.ProductId = p.Id join ProductPrice as pp on p.Id = pp.ProductId ) SELECT CategoryId, LanguageId, ProductId, Price FROM cte WHERE rnk = 1;
select t1.HitDate, t1.City, t1.Client, SUM(t1.NumVisits) - IFNULL((SELECT SUM(t2.NumVisits) FROM PAGE_HITS t2 WHERE t2.HitDate = t1.HitDate-1 AND t2.City = t1.City AND t2.Client = t1.Client), 0) as rate_of_change from PAGE_HITS t1 WHERE t1.Client='C' group by HitDate, City ORDER BY HitDate;
SELECT DISTINCT a.cID , a.firstname , a.lastname , b.typeId , b.email FROM TableA a INNER JOIN ( SELECT cID, MIN(typeID), MIN(email) FROM TableA GROUP BY cID ) b ON b.cID = a.cID
finalsql := 'SELECT a, b FROM table_abc' || whereClause; RAISE INFO 'Final sql is: % ', finalsql; for r in EXECUTE finalsql LOOP return next r; END LOOP;
select person, A, rank() over (order by A) as A_RANK, B, rank() over (order by B) as B_RANK, C, rank() over (order by C) as C_RANK from sales
SELECT * FROM table WHERE activitiesids REGEXP '[[:<:]][0-9]+[[:>:]]';
UPDATE table_1 SET premium_photos = IF(premium_photos+2>4, 4, premium_photos+2) WHERE number = '1234'
CREATE OR REPLACE TRIGGER COSO_BT BEFORE UPDATE ON BASE_INFORMATION REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW BEGIN if :new.balance != :old.balance then update USER_TABLE set balance = :new.balance where account_no = :new.account_no; end if; END; /
update table t set pin = lpad(pin, 3, '0') where length(pin) < 3;
select trunc(created_date), count(*) as num_created from the_table group by trunc(created_date);
select T2.id, coalesce((T1.classement=T2.classement),0)+ coalesce((T1.aptitude=T2.aptitude),0)+ coalesce((T1.A=T2.A),0)+ coalesce((T1.B=T2.B),0)+ coalesce((T1.C=T2.C),0) match_count from Temp T1 cross join Temp T2 where T1.id = 1 and T2.id <> 1 order by 2 desc
SELECT * FROM parentTable p WHERE NOT EXISTS( SELECT 1 FROM childTable1 c1 WHERE c1.parentId = p.id) AND NOT EXISTS( SELECT 1 FROM childTable2 c1 WHERE c1.parentId = p.id)
With Ints(n) As (Select 1 Union All Select n + 1 From Ints Where n < 1000) Select t.Name, i.n from myTable t join Ints i on i.n <= t.Quantity option(MaxRecursion 1000)
SELECT m.date, m.sponsor, m.match_no, GROUP_CONCAT(m.team, SEPARATOR ' vs ') FROM MATCH_NO m GROUP BY m.date, m.sponsor, m.match_no
groups = models.ManyToManyField(Group, through='GroupMember')
SELECT DATE(20150101) FROM dual;
@pre_data=MgMultiSelect.where(:mg_details_id=>params[:id]) @selected_data=params[:team_id_new] if params[:team_id_new].present? params[:team_id_new].each do |id| obj = @pre_data.where(:team_id_new => id).first if obj.present? obj.update_attributes(:mg_details_id => @task_data.id,:is_deleted => 0 ) end end end
select month(order_date) as orderMonth, count(*) as orderCount from order where year(order_date) = 2009 group by month(order_date) order by month(order_date)
declare @myid int INSERT INTO table (field) VALUES ('value') SELECT @myid = SCOPE_IDENTITY()
SELECT TOP 1 (pay) as incentivePay FROM incentive WHERE yearsOfService <= '10' ORDER BY yearsOfService desc
SET @rownum := 0; SELECT rank, userId, point FROM ( SELECT @rownum := @rownum + 1 AS rank, userId, point FROM user ORDER BY point DESC ) as result WHERE userId = xxxxxxxx
CREATE PROCEDURE dbo.foo WITH ENCRYPTION AS BEGIN SELECT 'foo' --Try this just to make sure END
SELECT parent_id FROM children GROUP BY parent_id HAVING MIN(Status) = 'TRUE' AND MAX(Status) = 'TRUE'
UPDATE dsopi_person_addr_rule ADDR SET new_col = addr.src_address_line1 WHERE regexp_like (UPPER(addr.src_address_line1), 'DEP|DPT$|ABT|DIP.|DIPART|AFDEL|AVDEL|AVD.|DIV|PGRD|PGP|PPG')
UPDATE checkins SET status = 0 WHERE HOUR(checked_in) NOT BETWEEN 9 AND 17 OR HOUR(checked_out) NOT BETWEEN 9 AND 17
SELECT to_char((EVENT_DURATION) + trunc(sysdate), 'HH24:MI:SS') FROM (SELECT (DATE_DT - LEAD(DATE_DT) OVER (ORDER BY DATE_DT DESC)) AS EVENT_DURATION FROM TEST_CHRIS ) tc WHERE ASSET_ID = 4380 AND EVENTTYPE = 1 AND trunc(DATE_DT) = trunc(SYSDATE);
SELECT * FROM bfproduct WHERE productid IN (23,5,54,3132,32) ORDER BY CASE productid WHEN 23 THEN 0 WHEN 5 THEN 1 WHEN 54 THEN 2 WHEN 3132 THEN 3 WHEN 32 THEN 4 END
SELECT DISTINCT Pr.SKU, Pr.Title, Pr.Weight_GM, MIN(PO.Postal_Charges) as PO_Charges FROM Products Pr JOIN Postage Po ON Pr.Weight_GM <= Po.Weight_GM GROUP BY Pr.SKU, Pr.Title, Pr.Weight_GM
$select = ... $select->columns( "id" => "id", "value" => new Zend_Db_Expr( "COALESCE(number_column_name, string_column_name, bool_column_name)" ) );
SELECT .... FROM (SELECT *, MID(t1.f1, 1, 13) KeyValue FROM T1) as t1 LEFT JOIN (SELECT *, MID(t2.f2, 1, 13) KeyValue FROM T2) as t2 ON t1.KeyValue = t2.KeyValue
UPDATE tblFinalOrder SET Status = Switch ( System_Qant = 1, "won", System_Qant = 2, 'cancelled' );
select a.id, a.name, count(b.id) as contact_email_total_count from tablea a left join tableb b on a.id = b.id group by a.id, a.name
SELECT internal.ParticipantID, Max(internal.Internal) AS MaxOfInternal FROM internal GROUP BY internal.ParticipantID;
update top 1 table set col1 = XYZ where col1 = ABC
SELECT Table1.productNr, Table1.info2 FROM Table1 INNER JOIN Table2 ON Table1.productNr=Table2.productNR WHERE Table1.info2 <> Table2.info2
select SUM(ISNULL(CAST(A.ODENEN_ANAPARA AS FLOAT),0)+ISNULL(CAST(A.FAIZ AS FLOAT),0)+ ISNULL(CAST(A.BSMV AS FLOAT),0)+ISNULL(CAST(A.GECIKME_FAIZ AS FLOAT),0)+ ISNULL(CAST(A.GECIKME_BSMV AS FLOAT),0)) + dbo.fngcodeme(@HESAP,@BAS,@BIT,@DOV) from ...
User ---------------- userID userName ... ... ... Messages --------------- messageID title body User_Messages ---------------- senderID (userID of sender) recieverID (userID of reciever) messageID (messageID of relative message)
SELECT * FROM Categories WHERE EXISTS( SELECT NULL FROM products JOIN SubCategories ON products.fkSubCatID = SubCategories.PkSubCatID WHERE SubCategories.fkCatID = Categories.pkCatID HAVING Count(*) > 2)
SELECT DISTINCT PO_NUMBER, PO_TRACKING_NO FROM tableName
SELECT TOP 1 ID FROM TABLE WHERE Name = 'ABC' GROUP BY ID,Name HAVING COUNT(ID) > 2 ORDER BY MAX(Date) DESC
sh pan.sh -file=my_cassandra_transformation.ktr -level=Rowlevel
select ( count(*)/20000.0 ) from table
ORDER BY MAX(AMOUNT) OVER (PARTITION BY VOUCHER_NO) DESC, -- voucher with highest amount first VOUCHER_NO, -- all rows of that voucher CASE WHEN JOURNAL_TYPE = 'CREDIT' THEN 0 ELSE 1 END, -- credit first AMOUNT DESC
SELECT x, y FROM Table1 WHERE x IN (SELECT word FROM word_table) OR y IN (SELECT word FROM word_table)
**Owner** ID **Car** ID OwnerID
select pairs.from_person, pairs.to_person, count(*) from links pairs join grp_affil fromga on fromga.person_id = pairs.from_person join grp_affil toga on toga.person_id = pairs.to_person and toga.grp_id = fromga.grp_id group by pairs.from_person, pairs.to_person;
SELECT year, type, COUNT(type) FROM table_name GROUP BY year, type;
DECLARE @id VARCHAR(100) = 'contactTitle'; SELECT *, T.Content.value('(/XmlDataPairDocument/dataitem[@id=sql:variable("@id")]/@value)[1]', 'VARCHAR(100)') FROM tblApplications T;
select * from ( select StaffId, max(AssignedFromDate) as adate from StaffDepartmentAssgnment group by staffid ) x inner join StaffDepartmentAssgnment y on y.staffid = x.staffid and adate = y.AssignedFromDate where DepartmentId = 'dept2'
SELECT name,capital FROM world WHERE capital LIKE '%name&'
select col from (select 'Header' as col, 0 as ordering union select Col1, 1 from table union select Col2, 1 from table ) t order by ordering;
select count(*) from TMP_ORDER_ACTION_PSTN_CP_11035 where STATUS is null;
SELECT u.UserId, u.FullName, u.Location FROM [User] U WHERE NOT EXISTS (SELECT 1 FROM ClubSponsorRelation csr WHERE u.UserId = csr.SponsorId AND csr.ClubId = @clubId) AND u.UserType = 'Sponsor'
SELECT DATEPART(wk, DateField) AS WeekNumber, COUNT(*) AS HitsForWeek FROM SomeTable WHERE DateField >= '20090101' AND DateField < '20100101' GROUP BY DATEPART(wk, DateField)
CREATE TABLE EMAIL_AUDIT_TRAIL ( EMAIL_SEND_TIME AS DATETIME NOT NULL, EMAIL_SUMMARY AS VARCHAR(100) )
INSERT INTO `performers`(col1, col2, col3, piano, singing) SELECT col1, col2, col3, singing, singing FROM `performers`
select sim.id ,base.id ,base.name ,base.latex ,similar.id ,similar.name ,similar.latex from similarity as sim join symbol as base on base.id=sim.base_symbol_id join symbol as similar on similar.id=sim.similar_symbol_id
and exists(select 1 from SurveyResponse SR2 where QuestionId = 24 and QuestionPossibleAnswerId = 111 and SR2.SurveyId = s.Id)
weekday(date)
select * from Table1 as T1 join ( select distinct num from Table1 order by num limit 2 ) as T2 on T1.num = T2.num ;
if isnull(@d_email,'') <> isnull(@i_email,'') begin update server2.database2.dbo.Table2 set email = @i_email from server2.database2.dbo.Table2 t2 inner join server2.database2.dbo.Table1 t1 on (t1.user_id = t2.user_id) where t1.login = @login end
select... from ( select { beauty,general-health,pregnency } as health from table) t group by health
using System.Data.Objects; EntityFunctions.AsNonUnicode( myUnicodeParam)
close PROC_FILE_EXISTS;
select a.`ID_CLIENT` from clienti a where a.`ClientName` LIKE '%blue%' union SELECT b.`ID_CLIENT` FROM Details b WHERE b.`Details` LIKE '%blue%';
WITH CTE AS( SELECT * ,ROW_NUMBER() OVER (ORDER BY [DATE] ) - ROW_NUMBER() OVER (PARTITION BY NUMBER ORDER BY [DATE] ) AS ROW_NUM FROM TABLE1) SELECT NUMBER,MIN(DATE) AS DATE FROM CTE GROUP BY ROW_NUM,NUMBER ORDER BY DATE
CREATE TABLE `SALE` ( `SALE_ID` int(11) NOT NULL AUTO_INCREMENT , `SALE_TYPE` enum('Cash','Card') CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL , `SALE_AMOUNT` decimal(18,4) NULL DEFAULT NULL , `CUSTOMER_ID` int(11) NULL DEFAULT NULL , PRIMARY KEY (`SALE_ID`) ) ENGINE=InnoDB DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci AUTO_INCREMENT=1 ROW_FORMAT=COMPACT ;
SELECT TMP.S, TMP.my_count FROM ( SELECT T1.something S, COUNT(*) my_count FROM table T1, table2 T2 WHERE T1.value = T2.value GROUP BY T1.something ) TMP Where TMP.my_count = (select max(count(*)) from table1 T3 group by t3.something)
;with cte ( rn, id, date, mileage ) as ( select row_number() over ( partition by id order by id, date ) , id , date , mileage from cars where mileage is not null ) select "current".id , "current".date , delta = isnull( "current".mileage - predecessor.mileage, "current".mileage ) from cte as "current" left join cte as predecessor on "current".id = predecessor.id and "current".rn - 1 = predecessor.rn
SELECT a, b, c, d FROM ( SELECT rn, 0 AS rk, (x[rn]).* FROM ( SELECT x, generate_series(1, array_upper(x, 1)) AS rn FROM (SELECT ARRAY(SELECT tbl FROM tbl) AS x) x ) y UNION ALL SELECT generate_series(3, (SELECT count(*) FROM tbl), 3), 1, (NULL::tbl).* ORDER BY rn, rk ) z
EXAMPLE CREATE OR REPLACE PROCEDURE target_deletion IS number_of_the_job NUMBER; BEGIN DBMS_JOB.submit (number_of_the_job, 'begin stored_procedure_for_deletion; end;', SYSDATE); END; /
if dbinfo('sqlca.sqlerrd2') = 0 then return 0; else return 1; end if;
INSERT INTO your_table_name(parent_id,priority,text,shortname,weighting,g_or_a, dept,ksf,day_start,day_end,date_start,date_end,depends_on,is_question,budget, ccode,responsible,accountable,consulted,informed) (SELECT parent_id,priority,text,shortname,weighting,g_or_a,dept,ksf, day_start,day_end,date_start,date_end,depends_on,is_question,budget,ccode, responsible,accountable,consulted,informed FROM your_table_name);
ORDER BY CAST(noticeBy AS CHAR)
SELECT e.Lname, e.ssn FROM Employee e JOIN works_on w ON e.ssn = w.essn JOIN Project p ON w.pno = p.pnumber GROUP BY e.ssn HAVING SUM(CASE WHEN p.plocation = 'Cleveland' THEN 1 ELSE 0 END) = 0 AND COUNT(*) >= 3
select name, max(expirationdate) from contracts t group by name;
/website/sub1 /website/sub2
select t1.SKU SKU, concat(t1.SerialNo, " ", t1.grade) SerialGrade from yourTable t1 join tempTable t2 on t2.SerialNo = t1.SerialNo orderby t1.SerialNo ASC
WHERE TripStopID = (SELECT T.TripStopID FROM TripStopOrder O INNER JOIN TripStop T ON O.TripStopID = T.TripStopID WHERE OrderID = @OrderID AND StopTypeCode = 'Drop')
select name, count(when_logged) from user_logins where when_logged >= curdate() - interval 14 day group by name, date(when_logged)
ALTER TABLE TableName ENGINE=MyISAM
SELECT languageUsed, SUM(UnitsSold) FROM yourTABLE GROUP BY languageUsed
select s.id as id, s.msts as msts, s.action as action from ( select min(named_struct('msts', msts, 'id', id, 'action', action)) as s from A group by id ) t;
select PSProjectId,CodePattern,NCR,sum(totaltime)/60.0 as totaltime --totaltime is in minutes from ct2 group by PSProjectId,CodePattern,NCR
SELECT Name FROM YOUR_TABLE GROUP BY Name HAVING COUNT(Name) > 1 ORDER BY Name DESC
update T set bus_day_mtd = ( select sum(bus_day) from T t2 where t2.ymd <= T.ymd --or cast(bus_day_flag as int) if referencing the bit column )
select sum(case when ws.ID_WorkflowType = 1 then 1 else 0 end) as cntCM_PRWK , sum(case when ws.ID_WorkflowType = 3 then 1 else 0 end) as cntCM_CMQ from dbo.CaseWorkflow cw join vew_CasePersonnelSystemIDs vcps on cw.ID_Case = vcps.ID_Case join dbo.WorkflowStates ws on ws.ID_WorkflowState = cw.ID_WorkflowState where CMSUID = @nSUID
SELECT user_data.alternative_mail FROM user_data RIGHT OUTER JOIN users_map ON users_map.user_id = user_data.user_id WHERE users_map.service_id = 1 AND users_map.service_user_id = 0 AND user_data.alternative_mail NOT LIKE '%@info.com'
SELECT CURRENCY_SK_FROM, (SELECT CURRENCY_NAME FROM CURRENCY WHERE CURRENCY_SK = CURRENCY_SK_FROM) AS CURRENCY_NAME, CURRENCY_SK_TO, (SELECT CURRENCY_NAME FROM CURRENCY WHERE CURRENCY_SK = CURRENCY_SK_TO) AS CURRENCY_NAME_TO, CONVERSION_RATE FROM CONVERSION_RATE_TABLE;
SELECT item_id, item_name, catid FROM (SELECT t1.*, COUNT(*) cnt FROM items t1 LEFT JOIN items t2 ON t2.catid = t1.catid AND t2.item_id <= t1.item_id GROUP BY t1.catid, t1.item_id ) t WHERE cnt < 6 -- LIMIT 20
select inStation.name as TapInStation , outStation.name as TapOutStation, count(trx.passengerCount) as PassengerCount, sum(trx.amount) as Fare, (select sum(passengerCount) from transactions iTrx) as PassengerPercent
BEGIN FOR c IN (SELECT field1, field2 FROM mytable) LOOP my_proc(c.field1, c.field2); END LOOP; END;
SELECT c.currency_id, c.currency_name, c.currency_symbol, c.currency_active, er.exchange_rate_id, er.exchange_rate_date, er.exchange_rate_value FROM currencies c LEFT JOIN (SELECT * FROM (SELECT er1.exchange_rate_id, er1.currency_id, er1.exchange_rate_date, er1.exchange_rate_value FROM exchange_rates er1 ORDER BY er1.exchange_rate_date DESC) AS A GROUP BY currency_id ) AS er ON er.currency_id=c.currency_id WHERE c.currency_active='1'
CREATE UNIQUE INDEX idx_dup_active ON <<table name>>( CASE WHEN is_active = 1 THEN question_no ELSE NULL END );
SELECT s.* FROM section s INNER JOIN archive_to_section ats ON s.id = ats.section_id WHERE ats.archive_id = 1
SELECT u.UserID, SUM(CASE WHEN Success = 1 THEN 1 ELSE 0 END) AS Successful, SUM(CASE WHEN Success = 0 THEN 1 ELSE 0 END) AS Unsuccessful, MAX(LoginDate) AS LastLogin FROM Users u INNER JOIN Logins l on u.UserID = l.UserID GROUP BY u.UserID
SELECT w.*, e.* FROM workers w LEFT JOIN events e ON w.id = e.workerID AND e.id = ( SELECT MAX(e2.id) FROM events e2 WHERE e2.workerID = w.id )
SQL> select * from v$version; BANNER ----------------------------------------------------------------------------- Oracle Database 11g Enterprise Edition Release 11.1.0.6.0 - Production PL/SQL Release 11.1.0.6.0 - Production CORE 11.1.0.6.0 Production TNS for 32-bit Windows: Version 11.1.0.6.0 - Production NLSRTL Version 11.1.0.6.0 - Production SQL> create table mls (id number, lbl mlslabel); Table created. SQL>
SELECT SUBSTR(LOWER(col), 1, 1) AS letter, COUNT(*) FROM mytable GROUP BY SUBSTR(LOWER(col), 1, 1);
SELECT s.studentName, sc.score, sc.subject FROM students s JOIN scores sc ON sc.studentID = s.studentID WHERE NOT EXISTS ( SELECT 'a' FROM scores ss WHERE ss.studentID = s.studentID AND ss.studentScore > 30 )
SELECT e.id, e.name , s.salary FROM employees e INNER JOIN salary s ON e.id=s.id ORDER BY e.id ASC
SELECT t1.col1, t1.col2, ..., t1.col10 FROM table1 t1 WHERE pVar = 1 and ... UNION SELECT t2.col1, t2.col2, ..., t2.col10 FROM table1 t2 WHERE pVar <> 1 and ...
<cfquery name="getRows" datasource="XXXX"> SELECT pe.prodtree_element_name_l, MAX(rs.resource_value) AS resource_value FROM prodtree_element pe LEFT JOIN resource_shortstrings rs ON pe.prodtree_element_name_l_rk = rs.resource_key WHERE rs.language_id = '5' AND pe.prodtree_element_name_l <> '' GROUP BY prodtree_element_name_l </cfquery>
SELECT * FROM TABLE_NAME ORDER BY RIGHT([Month], 4) DESC , SUBSTRING([Month], 5, 2) DESC
SELECT * FROM category ORDER BY (CASE WHEN cat_name LIKE 'Level%' THEN 0 ELSE 1 END)ASC, LEFT(cat_name,LOCATE(' ',cat_name)), CAST(SUBSTRING(cat_name,LOCATE(' ',cat_name)+1) AS SIGNED), cat_name ASC
SELECT a.* FROM Table1 a JOIN (SELECT RecordT, ReadLoc FROM Table1 GROUP BY RecordT, ReadLoc HAVING COUNT(*) > 1 )b ON a.RecordT = b.RecordT AND a.ReadLoc = b.ReadLoc
SELECT COALESCE(b1.ToyId, b2.ToyId) AS ToyId, b1.Price AS PriceTab1, b2.Price AS PriceTab2, (b2.Price-b1.Price) AS Diff FROM Bucket1 AS b1 FULL JOIN Bucket2 AS b2 ON b1.ToyId = b2.ToyId ;
SELECT id, first_value as attribute FROM(SELECT id, FIRST_VALUE(attribute) OVER(PARTITION BY id ORDER BY random() ROWS BETWEEN unbounded preceding AND unbounded following) FROM dataset) GROUP BY id, attribute ORDER BY id;
SELECT val ,campaign FROM VALUES LEFT JOIN ( SELECT 'Spring 2104' campaign ,'2014-05-01' start ,'2014-08-01' [end] UNION ALL SELECT 'Winter 2014' ,'2014-08-01' ,'2014-12-31' ) AS campaign_table ON VALUES.DATE > campaign_table.start AND VALUES.DATE < campaign_table.[end]
SELECT players.id, events.id as event_id, player_one_name=player_one.name, player_tow_name=player_two.name FROM events INNER JOIN games on events.id = games.event_id INNER JOIN players player_one on games.first_player_id = player_one.id INNER JOIN players player_two on games.second_player_id = player_two.id
SELECT t2.*, u1.name as user1name, u2.name as user2name FROM table2 t2 LEFT JOIN users u1 ON u1.user_id = t2.user_one LEFT JOIN users u2 ON u2.user_id = t2.user_two;
update table t set col1 = coalesce(col1, 0), col2 = coalesce(col2, 0), col3 = coalesce(col3, 0) where col1 is null or col2 is null or col3 is null;
SELECT * FROM tablename WHERE CONCAT(from_y, LPAD(from_m, 2, 0)) <= '201201' AND CONCAT(to_y, LPAD(to_m, 2, 0)) >= '201201'
SELECT movie.*, count(DISTINCT similar.tag) as shared_tags FROM movie INNER JOIN ( tagged AS this_movie INNER JOIN tagged AS similar USING (tag) ) ON similar.movie = movie.id WHERE this_movie.movie=<current_movie_id> AND movie.id != this_movie.movie GROUP BY movie.id ORDER BY shared_tags DESC
SELECT * FROM `mc_region` AS r LEFT JOIN `mc_region_flags` AS f ON r.`id` = f.`id_region` WHERE r.`is_subregion` = 'false' AND r.`lastseen` < CURDATE() - INTERVAL 20 DAY AND COALESCE(f.`flag`, '-') <> 'expire' LIMIT 0, 30;
SELECT a.name, GROUP_CONCAT(s.name SEPARATOR '|') store_name FROM agents a JOIN stores s ON (a.id = s.agent_id) GROUP BY a.id
SELECT DBMS_METADATA.GET_DDL('SEQUENCE', u.sequence_name, decode(u.sequence_owner,'SYS','',sequence_owner)) ddl FROM all_sequences u where sequence_owner = 'SOE' order by sequence_owner, sequence_name;
INSERT INTO `skadate`.`ow_base_user_online` (`id`, `userId`, `activityStamp`, `context`, `misc`) VALUES (NULL, '1402', UNIX_TIMESTAMP(), '1', '1');
SELECT * FROM table_2 WHERE ID IN (SELECT ID FROM table_1 WHERE parent_ID = 'x')
SET IDENTITY_INSERT [table name] ON GO INSERT INTO table (ID, Name) VALUES (1, 'value') GO SET IDENTITY_INSERT [table name] OFF GO
Exec somedb.dbo.sp_GetTableDocumentation Exec anotherdb.dbo.sp_GetTableDocumentation
$value = '1'; if($variable == '1') { $select = "select users.user, table2.total1, table2.total2 "; } else { $select = "select users.user, table2.total "; } $conn->query( $select . " FROM users LEFT JOIN table2 on users.user = table2.total AND $table2.date = CURDATE() WHERE users.user = 'marketing' OR users.user = 'sales' ");
SELECT lower (field_id_90) FROM exp_channel_data;
order by 3
select task_name, to_char(ses_start, 'DD-MON-RR') DATE, to_char(ses_start,'HH:MI PM') START, to_char(ses_end, 'HH:MI PM') END, round((ses_end - ses_start) * 24, 2) DURATION_IN_HOUR ...
SELECT TeacherID, Class, SUM(CASE WHEN PassFail = 'Fail' THEN Count ELSE 0 END) * 100.0 /SUM(Count) as FailPersent FROM tbl GROUP BY TeacherID, Class
select accounts.id, count(distinct s1.id) as num_req, count(distinct s2.id) as num_grab from accounts left join subs as s1 on accounts.id = s1.requester_account_id left join subs as s2 accounts.id = s2.grabber_account_id group by accounts.id
SELECT (COALESCE(ONE, 0) + COALESCE(TWO, 0)) FROM (TABLE)
SELECT (CASE WHEN params IS NULL THEN '' ELSE params END) as params FROM Table1
DECLARE @NewID INT INSERT INTO Customer(LastName,FirstName,......) VALUES(Value1, Value2, .....) SELECT @NewID = SCOPE_IDENTITY() INSERT INTO Employment(CID,Employer,.....) VALUES(@NewID, ValueA,..........)
INSERT INTO persons(Column1, col2, ...) VALUES (16, 'First Name', ...)
SELECT NVL(IR16, 'N/A') AS CODE, NVL(IR15, 'N/A') AS AMOUNT from table a LEFT JOIN table b ON a.pk = b.pk and regexp_substr(ir16,'\d+$') = regexp_substr( ir15,'\d+$')
SELECT ORDINAL_POSITION FROM information_schema.columns WHERE table_name = 'YourTableName' AND COLUMN_NAME = 'YourColumnName'
CONVERT(VARCHAR(10),OrderDate,10) as OrderDate
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER(PARTITION BY peh_pmt_id ORDER BY eh_id DESC) Corr FROM employer_history WHERE eh_pmt_id in (131,3725)) t1 WHERE Corr = 1
SELECT * FROM Test1 WHERE condition = 't1' UNION ALL SELECT * FROM Test2 WHERE condition = 't2'
START TRANSACTION; select * from tablename where IsRead=0 ORDER BY created_or_whatever_column limit 10 for update; update tablename set IsRead = 1 ORDER BY created_or_whatever_column LIMIT 10; COMMIT;
ServiceController sc = new ServiceController("MSSQLSERVER", serverName); string status = sc.Status.ToString();
WHERE ta.id=tb.id and ta.price <> tb.price
SELECT count(*) FROM sqlite_master WHERE type='table' AND name='table_name';
UPDATE GeneralTable g JOIN ClientTable c ON g.invoice_number = c.invoice_number SET g.date = c.date, g.accno = c.accno
SELECT COUNT(DISTINCT USER) FROM assigned_roles WHERE ROLE = 1
SELECT x.id , ( SELECT COUNT(y.id) FROM y WHERE y.id = x.id ) as YCount FROM x WHERE value = 1 ORDER BY YCount;
SELECT DATEADD(dd, -DAY(DATEADD(m,1,@Today)), DATEADD(m,1,@Today))
SELECT u.id, u.name FROM Unit as u LEFT JOIN UnitCategoryIndex as uci ON u.id = uci.UnitId where uci.id is null
$database = $_SESSION['username']; $mysqli = new mysqli("localhost", "db_user", "db_pass", $database);
strPath = DLookup("Path" , "Paths" , "Tool = 'Eclipse'") Shell(strPath)
;with cte as ( select *, cast([Item] as nvarchar(max)) as [path] from IndentedBOM where Depth = 0 union all select i.*, c.[path] + '/' + i.[Item] from cte as c inner join IndentedBOM as i on i.[Assembly] = c.[Item] ) select * from cte order by [path]
SELECT ROW_NUMBER() OVER (ORDER BY beatle_name ASC) AS ROWID, * FROM beatles
select a.ID, a.DATE, b.name, c.price FROM tablea a INNER JOIN ( SELECT Id, MIN(Date) AS MinDate FROM tablea GROUP BY Id ) As minA ON a.date = mina.mindate AND a.id = mina.id inner join tableb b on a.ID = b.ID inner join tablec c b.ID = c.ID
SELECT . . . FROM . . . SomeTable MIDDLE JOIN . . .
update t set xml = updateXML(xml, '/a/b', XMLType('<b>gaga</b>'))
select name, count(distinct value) from table group by name having count(distinct value) > 1
WHERE (table2.encoded_value = 1 AND table1.value_1 = 'a') OR (table2.encoded_value = 2 AND table1.value_1 = 'b') OR (table2.encoded_value = 3 AND table1.value_1 = 'c') OR (table2.encoded_value = 4 AND table1.value_1 in( 'd', 'e', 'f'))
SELECT * FROM WorkItems w JOIN ( SELECT [System.Id],MAX([System.RevisedDate]) FROM WorkItems WHERE ([System.WorkItemType] = 'Change Request') AND ([System.CreatedDate] >= '09/30/2008') AND ([System.TeamProject] NOT LIKE '%Deleted%') AND ([System.TeamProject] NOT LIKE '%Sandbox%') GROUP BY {System.Id] ) x ON w.[System.Id] = x.[System.Id] AND w.[System.DateRevised] = x.[System.DateRevised]
SELECT date_pkp, date_pkp_delete CASE WHEN ((date_pkp IS NULL AND date_pkp_delete IS NULL) OR (date_pkp IS NOT NULL AND date_pkp_delete IS NOT NULL)) THEN 'Non PKP' WHEN (date_pkp IS NOT NULL AND date_pkp_delete IS NULL) THEN 'PKP' END AS status FROM my_table
select * from prospects p where not exists (select null from assignments a where a.prospectid = p.id)
select * from mytable order by case when country = @country then 0 else 1 end, first_name
CREATE PROCEDURE SumDistances AS BEGIN SELECT SUM(Distance) FROM MyTable END
select DISTINCT master.item from master left join [Size List] master.[item] = [Size List].[item] where [Size List].subItem is null UNION SELECT DISTINCT [Size List].subitem FROM [Size List]
select name, attribute from users inner join attributes on users.qualification in (attributes.qual1, attributes.qual2) group by attribute, name having count(*)=2
SELECT pf.timestamp, tf.timestamp, date FROM stnrain s join puyforecast pf on date(pf.timestamp) = s.date and hour(pf.timestamp) = 18 join tacforecast tf on date(tf.timestamp) = s.date and hour(tf.timestamp) = 18
delete from posts where timestampdiff(hour, current_timestamp, time_published)>=4
SELECT empGrunt.ename Employee , empGrunt.empno EmpNum , empSuper.ename SupervisorName , empSuper.empno SupervisorName FROM emp empGrunt LEFT OUTER JOIN emp empSuper ON empGrunt.super = empSuper.empno
select Col_2, count(*) from your_table group by Col_2 having count(*) > 1
select trunc(5.3574585) days, trunc(mod((5.3574585) * 24, 24)) hours, trunc(mod((5.3574585) * 24 * 60, 60)) minutes, trunc(mod((5.3574585) * 24 * 60 * 60, 60)) seconds from dual;
... ORDER BY CASE WHEN YourColumn = 4 then 0 WHEN YourColumn = 2 then 1 ELSE 2 END, yourcolumn
SELECT TOP (SELECT COUNT (DISTINCT Name) FROM Logg WHERE Id= 1) * -- Need to specify columns FROM Logg WHERE Id= 1;
START TRANSACTION; Select * from Burgers where ID = 299; Select * from BurgerIngredients where BurgerID = 299; COMMIT;
select r.longName, a.Country, count(*) from ises.tbarticles a INNER JOIN ref.tbRegions r On a.RegionCode = r.regionCode group by r.longName, a.Country order by longName
select 'SRN='+left(stuff(@S, 1, charindex('SRN=', @S)+3, ''), patindex('%[^0-9]%', stuff(@S, 1, charindex('SRN=', @S)+3, '')+' ')-1)
SELECT COUNT(*) + 1 AS rank FROM tbl WHERE point > (SELECT point FROM tbl WHERE id = 5)
mysql> create table daten (a date, b date); mysql> insert into daten values ('2011-04-14', '2011-04-12'); mysql> insert into daten values ('2011-04-14', '2011-04-22'); mysql> select * from daten where (week(a)=week(b) and year(a)=year(b)) or a<b; +------------+------------+ | a | b | +------------+------------+ | 2011-04-14 | 2011-04-12 | +------------+------------+
public IEnumerable<UserViewModel> GetUserList() { DatabaseProviderFactory factory = new DatabaseProviderFactory(); Database db = factory.Create("MySqlConnection"); IEnumerable<UserViewModel> results = db.ExecuteSprocAccessor<UserViewModel>("uspGetUserList"); return results; }
insert into Transaction Set Trans_id = your_transaction_id , Buying_ID = (select (rate + (3*Rate)/100) as ratepos from Currency where currency_code = 'euro'), Selling_ID = (select (rate - (3*Rate)/100) as rateneg from Currency where currency_code = 'euro' )
ID | TYPE | VALUE 1 | PET | BIRD 2 | PET | DOG 3 | PET | FISH 4 | SEASON | FALL 5 | SEASON | WINTER 6 | SEASON | SPRING 7 | SEASON | SUMMER
select * From( select * from YourTable ) PIVOT (sum(DISTANCE) for (ID_DEST) IN (101, 102, 103));
declare @userVar varchar(30) declare users cursor for select name from sys.database_principals where type = 's'; open users fetch next from users into @userVar while @@FETCH_STATUS = 0 begin exec sp_change_users_login 'auto-fix', @userVar fetch next from users into @userVar end close users deallocate users
SELECT name, COUNT(posts.pk), COUNT(replies.pk) FROM owners, OUTER (posts, OUTER replies) WHERE owners.pk = posts.owner_pk AND posts.pk = replies.post_pk AND (posts.post_date BETWEEN ? AND ? OR replies.reply_date BETWEEN ? AND ?) GROUP BY name
SELECT Id, Value FROM(SELECT Id, Value, COUNT(*) OVER (PARTITION BY Id) cnt, SUM(DECODE(Value, 'X', 1, 0)) OVER (PARTITION BY Id) sumx FROM your_table ) WHERE cnt = 1 OR sumx = 0;
from sqlalchemy import * db = create_engine('sqlite:///people.db') metadata = MetaData() user = Table('people', metadata, Column('ID', Integer, primary_key = True), Column('name', String(16), nullable = False), Column('area', String(16)), Column('job', String(60)) )
select *, row_number() over (order by complaints desc) as sno into #temp from ( SELECT a.StoreName ,COUNT(b.StoreID) AS [Complaints] FROM Stores a LEFT JOIN ( SELECT StoreName ,Complaint ,StoreID FROM Complaints WHERE Complaint = 'yes') b on b.StoreID = a.StoreID GROUP BY a.StoreName ) as t ORDER BY [Complaints] DESC select storename,complaints from #temp where sno<4 union all select 'other',sum(complaints) as complaints from #temp where sno>=4
A (id, name) B (id) includes (class, std) C (id) includes (result) D (name) includes (grade)
index -> destination index (within the collection) diff_to_index -> index - current_index items_to_fetch -> (current_index + 1) + items_to_fetch >= total_count ? total_count - (current_index + 1) : max(diff_to_index, fetch_size)
select (regexp_split_to_array(registrationno, '\.'))[3] from subscriber
T1(id,c1_tbl,c1_id,c2_tbl,c2_id)
String[] list = context.databaseList(); for(String name : list){ if (!name.equals(MyDatabaseOpenHelper.DATABASE_NAME)) context.deleteDatabase(name); }
SELECT CAST(ROUND(RAND(),0) AS BIT)
SELECT relname FROM pg_class JOIN pg_namespace ON (pg_class.relnamespace = pg_amespace.oid) WHERE relpages = 0 AND pg_namespace.nspname = 'public';
SELECT DISTINCT addresses.email FROM addresses JOIN user_group ON user_group.id_user_groups = adresses.USER_ID JOIN news_group ON news_group.groupid_newsg = user_group.id_group_groups WHERE newsid_news_good = 1
update GCCC_ATCOM_CLOSING_REASON_I18N a set a.DESCRIPTION = (select b.CLOSING_REASON_DESCRIPTION from GCCC_ATCOM_CLOSING_REASON b where b.ID_CLOSING_REASON = a.ID_PARENT) WHERE a.DESCRIPTION ='I HAVE A CAR'
(select name, value from <your_table_name> where domain = 'example.com') union (select name, value from <your_table_name> where domain is null and name not in (select name from <your_table_name> where domain = 'example.com'))
select s.name, u.* from site s outer apply ( select top(1) * from user u where u.phone like '+01%' and u.id in (select userId FROM siteUser su WHERE su.SiteId = s.Id) order by u.registrationDate ) as u
(CASE WHEN [Control_ClosedDateRev] IS NULL AND DateDiff(day,opendate,getDate()) > 4 THEN '1' ELSE '0' END)
SELECT itemid, COUNT(*), CASE WHEN uid = 1001 THEN TRUE ELSE FALSE end AS toggled FROM unlikes WHERE itemid IN ('9999', '8888') GROUP BY itemid;
SELECT file_name FROM file_info WHERE file_id IN ( SELECT file_id FROM index_group WHERE word_id IN ( SELECT word_id FROM word_index WHERE word IN ('abc','def','ghi') ) GROUP BY file_id HAVING COUNT(DISTINCT word_id) = 3 -- all three words );
select yourfields -- or delete from userroles where userid in (select userid from userroles join etc where system.name = the one you want except select userid from userroles join etc where system.name <> the one you want )
select Name, min(Direction), max(Direction) from table group by Name having min(Direction) <> max(Direction)
SELECT COUNT(v.FK_patients) FROM visit v JOIN Diagnosis d on d.ID_Diagnosis = v.FK_diagnosis --Here is where you connect the tables WHERE v.Date_Visit BETWEEN TRUNC(ADD_MONTHS(SYSDATE,-12),'YEAR') AND TRUNC(SYSDATE,'YEAR')-1 ;
declare plsql_table scd_type_table; begin select VALUE(t) bulk collect into plsql_table from scd_table t; -- do stuff end; /
create table users_cartoons (user_id int, cartoon_id int)
SELECT username, SUM(outcome) AS wins, COUNT(*) - SUM(outcome) AS losses FROM tblBattleHistory WHERE battle_type = '0' GROUP BY username ORDER BY wins DESC, losses
ON formas.id_f = SMS_SERVISI.IDTICKET
CREATE TABLE TEST02 AS SELECT COL1 AS COL3 , CAST(COL2 AS VARCHAR2(20)) AS COL4 , CAST(NULL AS DATE) AS COL5 FROM TEST01;
INSERT INTO gender (sex, date) VALUES ( 'male are allowed \\ female are not allowed', "2012-10-06")
SELECT * FROM results r WHERE NOT EXISTS (select 1 from results r2 where r2.user_id = r.user_id and r2.id > r.id) ORDER BY score DESC;
SELECT T.* FROM mytable T WHERE T.effective_date = (SELECT MAX(T2.effective_date) FROM mytable T2 WHERE T2.groupname = T.groupname AND T2.effective_date <= GETDATE()) OR T.effective_date > GETDATE()
RowID <100 on t1.ColA=t2.ColB UNION ALL If RowID >=100 on t1.ColA=t2.ColB+1
SELECT name,create_date FROM sys.triggers ORDER BY create_date DESC
begin temp_proc; end;
ROUND(CAST(DATEDIFF(MINUTES, CAST(CAST(dbo.QuickLabDump.[Date Entered] AS DATE) AS DATETIME) + CAST(dbo.QuickLabDump.[Time Entered] AS TIME), CAST(CAST(dbo.QuickLabDump.[Date Completed] AS DATE) AS DATETIME) + CAST(dbo.QuickLabDump.[Time Completed] AS TIME)) AS FLOAT)/60,0) AS [Hours TurnAround]
SELECT f.fleet_id, Count(pof.id) AS onboard FROM fleets f LEFT JOIN personnel_onboard_fleets pof ON f.fleet_id = pof.fleet_id GROUP BY f.fleet_id ORDER BY f.status;
SELECT * FROM ( SELECT NAME, DATE, ROW_NUMBER() OVER (ORDER by DATE) AS RowNum FROM LIST WHERE NAME = 'BLABLA' ) X WHERE RowNum = 1;
select c.ID, c.LastName from Clients c join Orders o on o.ClientId=c.Id join Payments p on p.OrderId=o.Id where p.PaymentDate >= '2011-01-01' group by c.ID, c.LastName having sum(p.PaymentAmount) > 1000
SELECT a.name, a.age, a.recordDate, SUM(a.weight - b.weight) as WeightDiff FROM Details a JOIN Details b ON (b.age = a.age AND b.name = a.name AND b.recordDate = dateadd(dd, -1, a.recordDate) ) GROUP BY a.age, a.name, a.recordDate WITH ROLLUP
WHERE lastname NOT IN ('Hansen', 'Pettersen')
UPDATE employees SET is_valid = (CASE WHEN datecolumn1 IS NULL THEN 1 ELSE 0 END) WHERE empid IN (SELECT e.empid FROM employees e GROUP BY emempid HAVING COUNT(*) > 1)
SELECT (host(thetablename.ipaddress::inet) || thetablename.firstname::text || thetablename.age::integer) AS personal_details FROM thetablename
SELECT * FROM someTable WHERE (someTable.Field NOT LIKE '%RISK%') AND (someTable.Field NOT LIKE '%Blah%') AND someTable.SomeOtherField <> 4;
SELECT t1.serialNumber, value, masterID FROM TABLE t1 INNER JOIN ( SELECT MAX(masterID) AS maxid, serialNumber FROM TABLE GROUP BY serialNumber ) t2 ON t1.masterid = t2.maxid AND t1.serialNumber = t2.serialNumber
where from_time < '0920' and to_time > '0850'
SELECT * FROM date_table WHERE start_date < '2013-06-10' AND to_date > '2013-04-01'
Update brugere Set trydato = DateAdd(Day,30,GetDate())
SELECT L.Title Listing_Title, LC.Title ListingCategory_Title, ... all your other columns ... FROM ListingCategory_Listings LCL LEFT JOIN Listing L ON LCL.ListingID = L.ID LEFT JOIN SiteTree_Live STL ON L.ID = STL.ID LEFT JOIN ListingCategory LC ON LCL.ListingCategoryID = LC.ID LEFT JOIN File F ON LC.IconID = F.ID
DECLARE @Today DATE SET @Today = GETDATE() IF EXISTS (SELECT 'x' FROM MyTable WHERE CAST(ColumnName as DATE) = @Today) BEGIN EXEC Sproc Here END
select (ID, Value) from table as table1 join inner join table as table2 on table1.ID = (table2.ID -1)
SELECT value.*,mapping.* FROM value JOIN mapping JOIN ( SELECT value.id , MIN(ABS((value.value1+value.value2)-mapping.value))min_abs FROM value JOIN mapping GROUP BY id ) x ON x.id = value.id AND x.min_abs = ABS((value.value1+value.value2)-mapping.value) ORDER BY id;
update t1 set t1.curr_value_datetime = t2.curr_value_datetime from #temp t1 join #temp t2 on t1.curr_value_datetime - 1 = t2.curr_value_datetime
select regexp_replace(col, '.*([a-zA-Z]).*', '\1') from yourTable
SELECT * FROM ( SELECT ... FROM tableX WHERE created_at > @CheckDate ORDER BY created_at ASC, id ASC LIMIT 5 ) AS tmp ORDER BY created_at DESC, id DESC
create unique index on my_table (actual) where actual = true;
select ( select get_name(:id) from dual ) from your_table
select name, max(initial) as initial, max(followup) as followup from t group by name;
SELECT A.PRODUCTCODE, A.STOCKLEVEL, SUM(A.QUANTITY) FROM PRODUCT A INNER JOIN PRODLINE B ON A.PRODUCTCODE=B.PRODCODE GROUP BY A.PRODUCTCODE
DECLARE @myF NVARCHAR(4), @FromDate DATE SET @myF = 'abc4'
ColumnName >= select DATEADD(MILLISECOND, ((DATEPART(hh, GETDATE())*3600000)+(DATEPART(mi, GETDATE())*60000)+(DATEPART(s, GETDATE())*1000) +DATEPART(MILLISECOND,GETDATE()))*-1, GETDATE())
[nz@netezza group_concat]$ ls -1 GroupConcat.cpp GroupConcatSep.cpp install [nz@netezza group_concat]$ ./install testdb CREATE AGGREGATE Created uda Done CREATE AGGREGATE Created uda Done
LEN([email]) - LEN(REPLACE([email], "@", ""))
$id = 1; // Your event id $repository = $this->getDoctrine() ->getRepository('AcmeDemoBundle:Entity'); $query = $repository->createQueryBuilder('g') ->select('e') ->leftJoin('g.events', 'e', 'WITH', 'e.id = :id') ->setParameter('id', $id) ->getQuery(); $events = $query->getResult();
SELECT OrderID, OrderNum, Amount , SUM(Amount) OVER (PARTITION BY OrderID) as Total FROM OrderLine
output$download <- downloadHandler(filename = function() {paste(Sys.time(), ' Fltered_data.csv', sep='')}, content = function(file) {write.csv(sqlOutput()[input$table_rows_all, ], file, row.names = FALSE)})
SELECT * FROM `users` where mail REGEXP '([^.]*\\.){2}'
"SELECT * FROM [" & FROM [FORMS]![DASHBOARD]![Combo0] & "]"
SELECT d.DocumentID FROM tmpDocument d LEFT JOIN tmpBatchDocument bd ON bd.DocumentID = d.DocumentID LEFT JOIN tmpBatch b ON b.BatchID = bd.BatchID WHERE d.IsVoid = 0 GROUP BY d.DocumentID HAVING COUNT(bd.BatchDocumentID) = 0 OR COUNT(CASE WHEN b.IsVoid = 0 THEN 1 END) = 0
Q> Is this a structurally sound design? A> Yes Q> Is it inadvisable to have columns besides foreign keys in a linking table? A> It's common to have additional columns
with cte as (select t2.*, count(t1.field1) over (partition by t1.field2) t1c, count(t2.field1) over (partition by t2.field2) t2c from table1 t1 full join table2 t2 on t1.field2 = t2.field2) select distinct field1 from cte where t1c=t2c
DENY SELECT ON schema::[dbo] TO [user_name] DENY SELECT ON schema::[other_schema] TO [user_name] GRANT SELECT ON schema::[safe_schema] TO [user_name]
SELECT * FROM forms LEFT OUTER JOIN records ON forms.form_id = records.form_id WHERE records.form_id IS null
UPDATE employees SET ls_pnm = list_surname('<list of values>') WHERE name ='<conditions>';
select month ,year ,subcategory ,privatelabel ,sum(price) as [total sales] from a inner join b ... where any where clauses group by month ,year ,subcategory ,privatelabel
insert into CatProduct(CatID, ProductID) select 1, ProductID from Product where Cat1 = 'Y' union all select 2, ProductID from Product where Cat2 = 'Y' union all select 3, ProductID from Product where Cat3 = 'Y'
select isnull(t1.name,t2.name) as name, isnull(t1.Tpens, 0) as Tpens, isnull(t1.Tpencils, 0) as Tpencils, isnull(t1.Tbooks, 0) as Tbooks, isnull(t2.Dpens, 0) as Dpens, isnull(t2.Dpencils, 0) as Dpencils, isnull(t2.Dbooks, 0) as Dbooks from table1 as t1 full outer join table2 as t2 on t1.name = t2.name
with recursive all_redirects as ( select from_url, to_url, 1 as level from redirects where from_url = 'orange' union all select c.from_url, c.to_url, p.level + 1 from redirects c join all_redirects p on p.to_url = c.from_url ) select to_url from all_redirects order by level desc limit 1;
delete from customer where not exists (select 1 from sale where sale.custId = customer.CustNo and sale.saledate >= date '2009-01-01')
SELECT ((myField*100)+RIGHT(myField,2))/60 || ':' || RIGHT('00'(((myField*100)+RIGHT(myField,2))#60),2) From myTable
DECLARE @sample TABLE (id int, boost int) INSERT @sample VALUES (1, 1), (2, 2), (3, 7) SELECT RAND(CHECKSUM(NEWID())) * boost AS weighted, SUM(boost) OVER () AS boostcount, id FROM @sample GROUP BY id, boost ORDER BY weighted DESC
d = DateTime.today p = d.prev_month py = d.prev_year last_month = Data.all(:date => (DateTime.new(p.year, p.month)..DateTime.new(d.year, d.month)) last_year = Data.all(:date => (DateTime.new(py.year)..DateTime.new(d.year))
select a.key from anothertable a where exists (select 1 from tbl_keys_link p pairs.key_1 = a.key and pairs.key_2 = 1) or exists (select 1 from tbl_keys_link p pairs.key_2 = a.key and pairs.key_1 = 1);
select o.customer_email, a.prefix from sales_flat_order o left JOIN (Select distinct a.prefix, a.parentid from sales_flat_order_address) a on o.entity_id = a.parent_id
select count(RowId) from table1 where StartTime > (select MAX(EndTime) from table1) and EndTime IS NULL
declare @uploadedBy varchar(50) declare @anothervariable whatevertype select @uploadedBy=uploadedBy, @anothervariable=anotherColumn from CommonImport where CommonImportID=@CommonImportID
Declare @SDate DateTime ='06-Jan-2009' Declare @EDate DateTime ='12-Oct-2009' select case when DateDiff(M,@sDate,@EDate) <=12 then DateDiff(M,@sDate,@EDate) else Round( ( Convert(Decimal(18,0) ,DateDiff(M,@sDate,@EDate)/12.0)),0) end
SELECT mdate, team1, SUM(CASE WHEN teamid = team1 THEN 1 ELSE 0 END) AS score1, team2, SUM(CASE WHEN teamid = team2 THEN 1 ELSE 0 END) AS score2 FROM game LEFT JOIN goal ON (id = matchid) GROUP BY mdate,team1,team2 ORDER BY mdate, matchid, team1, team2
SELECT * FROM sometable WHERE ID BETWEEN 10 AND 11 UNION ALL SELECT * FROM sometable WHERE ID BETWEEN 20 AND 21 UNION ALL SELECT * FROM sometable WHERE ID BETWEEN 30 AND 31 ...
DECLARE @test TABLE ( id int IDENTITY, value int ) INSERT INTO @test (value) VALUES (1), (2), (3), (95), (140), (141), (193), (240), (300), (301) SELECT value, CASE WHEN value <= 90 THEN 1 WHEN value <= 140 THEN 2 WHEN value <= 190 THEN 3 WHEN value <= 300 THEN 4 ELSE 5 END AS group FROM @test
select distinct r from Route r inner join r.places p left join fetch r.places where p.city = :city
;With Cte As ( Select ID, ACCT, TYPE, Sum(Case When TYPE = 'A' Then 1 Else 0 End) Over (Partition By ID) NumA From YourTable ) Select ID, ACCT, TYPE From Cte Where NumA < 2
MATCH (u:user{id:1})-[]->(e:event) OPTIONAL MATCH (e)-[]->(x) RETURN coalesce(x, e) as n;
SELECT t.ID, t.Field1, t.Field2 INTO NewTable FROM (SELECT a.ID, a.Field1, a.Field2 FROM Table1 A UNION SELECT x.ID, x.Field1, x.Field2 FROM Table1 x IN 'C:\docs\db2.mdb' WHERE x.ID NOT IN (SELECT ID From Table1)) t
SELECT COUNT(*), CASE Type WHEN "I" THEN "V" ELSE Type END as NewType FROM Table GROUP BY CASE Type WHEN "I" THEN "V" ELSE Type END
SELECT substring( Parameters, charindex('ServicePW=', Parameters) + 10, -- len('ServicePW=') charindex('&', substring(Parameters, charindex('ServicePW=', Parameters), len(Parameters))) - 11 -- (- len('ServicePW=') - 1) ) FROM Table WHERE TestID = 8
/* set up a few parameters */ DECLARE @table_name AS nvarchar(100) DECLARE @column_name AS nvarchar(100) DECLARE @SQLQuery AS NVARCHAR(1000) /* set the parameter values */ SELECT @table_name=TheTable, @column_name=TheColumn FROM TestTable WHERE -- ADD SOME LOGIC HERE TO GET SINGLE ROW /* Build SQL String with parameters */ SET @SQLQuery = 'SELECT ' + @column_name + ' FROM ' + @table_name -- + ' WHERE clause if required' /* Execute SQL */ EXECUTE(@SQLQuery)
SELECT * FROM ( SELECT ... FROM mytable t LEFT OUTER JOIN mytable2 t2 ON t2.attr = t.attr1 LEFT OUTER JOIN mytable3 t3 ON t3.attr = t.attr3 ... LEFT OUTER JOIN mytableN tN ON tN.attr = t.attrN ) WHERE tK_attrP LIKE '%Something%';
INSERT INTO tb_products SELECT NULL id, field1, field2, field3, ... FROM tb_products WHERE id IN (id1, id2, id3, ...)
select * from table as x where x.field1 = 1 AND x.field2 = x.field3 union [ALL] select * from table as y where x.field1 = 2 AND y.field4 = y.field5
Retest Estimate ----------------- defect_id estimate_date ready_date
CREATE TABLE users ( id INT NOT NULL PRIMARY KEY, name VARCHAR(64), user_id INT, CONSTRAINT fk_users_user_id FOREIGN KEY (user_id) REFERENCES users (id) ); CREATE TABLE accounts ( id INT NOT NULL PRIMARY KEY, user_id INT NOT NULL, email VARCHAR(64), password VARCHAR(32), CONSTRAINT fk_accounts_user_id FOREIGN KEY (user_id) REFERENCES users (id) );
select * from users u join sportClub sc on u.ClubId = sc.ClubId and (u.NumberApproved > 3 or u.NumberApproved = (select Count(*) from users us where us.Name <> "Name Variable")) where u.Name = "Name Variable"
foo like '%ab_d'
CREATE TABLE posts_tags ( id serial PRIMARY KEY, post_id integer REFERENCES posts, tag_id integer REFERENCES tags ); INSERT INTO posts_tags (post_id, tag_id) SELECT p.id, t.id FROM posts p, regexp_split_to_table(p.tags, ',') AS x(tag), tags t WHERE btrim(x.tag) = t."text";
select EmpID, replace(replace(EmpName,'"', ''),'''','') Empname, replace(replace(CompName,'"', ''),'''','') CompName from table
select 'There were a total of ' + cast(count(*) as varchar(10)) + ' invoice(s) on ' + convert(varchar(12), yourDateCol, 107) from invoices group by convert(varchar(12), yourDateCol, 107)
SELECT t1.id, t1.value FROM temp1 t1 WHERE NOT EXISTS(SELECT NULL FROM temp2 t2 WHERE t2.value BETWEEN DATEADD(MINUTE, -1, t1.value) AND DATEADD(MINUTE, 1, t1.value))
Select EmailAddress,Birthday From table1 Where Birthday Between to_date('01-01-1946','MM-DD-YYYY') AND to_date('01-01-1988','MM-DD-YYYY');
$datetime = // your timestamp ->where('t.somefield < ?', date('Y-m-d H:i:s', strtotime($datetime))
Proc SurveySelect data=Have out=Want noprint Method = urs N = 1 outhits rep = 1; Strata Id ; run;
delete from table1 where not exists ( select null from table2 where table2.word = table1.word )
SELECT student, DATE_FORMAT(ApplicationDate,'%m/%Y') as Month count(id) as Applications from YourTable group by ApplicationDate
SELECT Customer, answer, answer & POWER(2,0) pos1, answer & POWER(2,1) pos2, answer & POWER(2,2) pos3, answer & POWER(2,3) pos4, answer & POWER(2,4) pos5, answer & POWER(2,5) pos6, answer & POWER(2,6) pos7 from ( SELECT 1 Customer, 6 answer union all SELECT 1 Customer, 2 answer union all SELECT 1 Customer, 62 answer ) F
DateTime now = DateTime.Now; var data = from d in dc.GAMEs where (d.GAMEDATE > now.Date) || (d.GAMEDATE == now.Date && d.GAMETIME.Value.TimeOfDay >= now.TimeOfDay) select d;
SELECT IFNULL(COUNT(cf.id), 0) AS reserved, f.id FROM flights f LEFT JOIN clientflights cf ON f.id = cf.idFlight GROUP BY f.id
SELECT CustomerId, OrderDate FROM Orders as ExtOrders WHERE OrderId IN ( SELECT TOP 4 OrderId FROM Orders WHERE CustomerId LIKE ExtOrders.CustomerId ORDER BY OrderDate DESC) ORDER BY CustomerId; -- Might not work in SQLFiddle if CustomerId is text
SELECT position_id FROM trades GROUP BY position_id HAVING COUNT(*)=COUNT(exit_date)
//parse records = new XmlSlurper(false,false).parseText(payload) //find Party with type XXXXXXXX party = records.Parties.Party.find { e -> e.PartyType.text().equals('XXXXXXX') } //set data party.Zip.replaceBody(flowVars['zip']) party.City.replaceBody(flowVars['city']) //rebuild the xml import groovy.xml.XmlUtil import groovy.xml.StreamingMarkupBuilder streamingMarkupBuilder=new StreamingMarkupBuilder() result = XmlUtil.serialize(streamingMarkupBuilder.bind{mkp.yield records})
SELECT * FROM my_table WHERE kind = 'type1' UNION ALL SELECT * FROM my_table WHERE kind IS NULL;
SELECT ID, CASE (ID % 2) WHEN 1 THEN Enlish ELSE '***' END, CASE (ID % 2) WHEN 0 THEN Polish ELSE '***' END FROM Translations
select name_col, min(case when extract(year from date_col) = 2014 then size_col end) - min(case when extract(year from date_col) = 2013 then size_col end) from <your table> group by name_col order by name_col;
SELECT t1.NAME, t2.ITEMS FROM t1 INNER JOIN t2 ON t1.id = t2.names_id
with cte as ( select cast('2015-07-01' as date) as dte union all select dateadd(day, 1, dte) from cte where dateadd(day, 1, dte) <= cast('2015-08-01' as date) ) select loft from t join cte on cte.dte between t.startdate and t.enddate group by loft having count(distinct cte.dte) = (select count(*) from cte);
UPDATE tableA SET B = 'abcd', C = CASE WHEN C = 'abc' THEN 'abcd' ELSE C END WHERE column = 1;
SELECT Item_ID FROM xyz WHERE User_ID IN ('A','B') GROUP BY Item_ID HAVING COUNT(distinct user_id) = 2
select group_concat(id, ',') as ids, name, surname, sum(time) as time from table t group by name, surname;
select jsdate, jsn, junit, jmyear, jmake, jmodel, jseries, jbuyid from vehicle_mgmt.AA0888 where jfinowngp = 'B1' and jfinownbr = '99' and CAST(jsdate - 19000000 AS DATE FORMAT 'mm/dd/yyyy') between CAST('2015/11/05' AS DATE) and CAST('2015/12/31' AS DATE)
... FOREIGN KEY(FIELD_1,FIELD_2) REFERENCES regioni(FIELD_1,FIELD_2) ...
SELECT StateCode, Count(*) As StateCodeCount FROM ZipCodeTerritory Group By StateCode HAVING COUNT(*) > 300
con = DriverManager.getConnection(Module.url, Module.username, Module.password); String sql3 = "Update resume set DateDifference=cast(DATEDIFF(End, Now()) as char(50))"; ps3 = con.prepareStatement(sql3); ps3.executeUpdate();
DELETE FROM `History` WHERE ID = '3' AND Date NOT IN (select mindate from (SELECT min(Date) as mindate FROM `History` WHERE ID = '3') )
SELECT col1, col2, CONCAT('(', REPLACE(col2, ',', '(\\,|$)|'), '(\\,|$))') AS regex, col1 REGEXP CONCAT('(', REPLACE(col2, ',', '(\\,|$)|'), '(\\,|$))') AS intersect FROM tbl
SELECT ROUND(CAST( Mins AS FLOAT)/60,2) AS [hour] FROM ( SELECT DATEDIFF(minute, CAST(StartTime AS TIME),CAST(EndTime AS TIME)) AS Mins FROM Data ) A
select t.*, (select sum(t2.qte) from table as t2 where t2.id <= t.id) as QteLevel from table as t;
select distinct(report_number) from reports where report_type='A' and report_number not in (select report_number from reports where report_type='B')
SELECT Date, From, To, Data FROM Ccustomers WITH (NoLock) WHERE MSGowner = 'ABC' AND Data LIKE '%ABCDEF%' AND ( ([From] = 'Customer' AND [To] = 'CSservice') OR ([From] = 'CSservice' AND [To] = 'Customer') ) ORDER by Date
with fnames as ( select fname Name, ROW_NUMBER() over (order by fname,lname) rank from myTable ), lnames as ( select lname Name, 0.5 + ROW_NUMBER() over (order by fname,lname) rank from myTable ), merged as ( (select * from fnames) union (select * from lnames) ) select Name from merged order by rank
before_action :check_admin, only: [:admin_actions_array] before_action :check_user, only: [:create, :delete] def check_user return false unless current_user end def check_admin return true if current_user.admin end
INSERT INTO shared (type, account, id) SELECT 'twitter' type, 'my-twitter-account' account, MIN(a.id) ID FROM items a LEFT JOIN shared b ON a.id = b.id WHERE b.id IS NULL
FOR tbl IN (SELECT owner, table_name FROM dba_tables WHERE table_name = 'MYTABLE') LOOP EXECUTE IMMEDIATE 'update ' || tbl.owner || '.' || tbl.table_name || ' set field1 = ''N'', ' || ' field2 = null '; END LOOP;
SELECT REQUESTS.CUST, SUM(PRICE.COST) FROM REQUESTS JOIN PRICE ON REQUESTS.SERV = PRICE.SERV GROUP BY REQUESTS.CUST ORDER BY REQUESTS.CUST ASC
declare @startdate date, @enddate date set @startdate = '20140101' set @enddate = '20140103' select cusip from asset_data where t >= @startdate and t <= @enddate group by cusip having count(distinct t) = datediff(d, @startdate, @enddate) + 1
ALTER PROCEDURE [dbo].[SPSample] @gender varchar(20) = null @username varchar(20) = null AS SELECT per.firstName, per.lastName, per.gender FROM person per LEFT JOIN account ac ON @username is not null AND @username = ac.username AND ac.idPerson = per.idPerson WHERE --( gender = @gender --AND (@username is null or (@username is not null and @username = acc.username))
SELECT Col1, Col2, Col3, COUNT(*) AS Total FROM TableA GROUP BY Col1, Col2, Col3
select count(*) as position from town t where t.name <= (select t2.name from t2 where t2.idtown = 9961)
<cfscript> if (cgi.path_info contains "dwtest") { dsn = "AntibioticsTest"; } else { dsn = "Antibiotics"; } </cfscript> <cfquery name="GetLastInsertDates" datasource="#dsn#"> sql not relevent </cfquery>
select DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'tableName' and COLUMN_NAME = 'ColumnName'
SELECT p.* FROM ( SELECT dnId, propertyName, propertyValue FROM myTable ) AS t PIVOT( MAX(propertyValue) FOR propertyName IN (objectsid, _objectclass, cn, samaccountname, name) ) AS p;
SELECT * FROM foo f where f.id IN (2, 3, 1) ORDER BY FIELD(f.id, 2, 3, 1);
SELECT (Format([Date_Consumption],"mmm")) AS Date_Cons, Consumption FROM Cons where Date_Consumption > '08-Feb-2012'(if you run your report today)
UPDATE T1 SET ID = T2.Value FROM Table_1 AS T1 INNER JOIN Table_2 AS T2 ON T1.ID = T2.post_id WHERE T2.pos_key = 'E_key' UPDATE T2 SET post_id = NewIDs.Value FROM Table_2 AS T2 INNER JOIN Table_2 AS NewIDs ON T2.post_id = NewIDs.post_id WHERE NewIDs.pos_key = 'E_key'
private System.Data.Linq.Link<String> _content; [Column(Name = "content", DbType = "NVarChar(MAX) NOT NULL", Storage = "_content")] public String Content { get { return this._content.Value; } set { this._content.Value = value; } }
BEGIN TRANSACTION UPDATE accounts set balance = balance - amount WHERE ac_num = 101 UPDATE accounts set balance = balance + amount WHERE ac_num = 102 COMMIT TRANSACTION
SELECT t.last_date_chckin, COUNT(DISTINCT t.emp_id) AS CountEmp FROM ( SELECT emp_id, MAX(checkin_date) AS last_date_checkin FROM empcheckin GROUP BY emp_id ) AS t GROUP BY t.last_date_chckin
create table test(cola varchar(10),colb varchar(10),colc varchar(10)) insert into test select 'a','b','123' ;WITH CTE AS( select cola,colb,LEFT(colc,1) colc,RIGHT(colc,len(colc)-1) as rem from test union all select cola,colb,LEFT(rem,1) colc,RIGHT(rem,len(rem)-1) as rem from CTE where LEN(rem) >= 1 ) select cola,colb,colc from CTE
update countryb set gnppercap = gnp/population
TINYTEXT up to 2^8-1 bytes TEXT up to 2^16-1 bytes MEDIUMTEXT up to 2^24-1 bytes LONGTEXT up to 2^32-1 bytes
;WITH Numbers (Number) AS ( SELECT 0 UNION ALL SELECT 1 + Number FROM Numbers WHERE 1 + Number <= 14 ) INSERT INTO [campusMap].[dbo].[zoom_levels] ([zoom_start],[zoom_end]) SELECT n1.Number, n2.Number FROM Numbers n1 CROSS JOIN Numbers n2 WHERE NOT (n1.Number = 0 AND n2.Number = 14)
SELECT * FROM products p LEFT JOIN tvs tvs ON tvs.id=p.idProduct AND p.type="tv" LEFT JOIN phones phones on phones.id=p.idProduct AND p.type="phone" WHERE (tvs.id IS NOT NULL OR phones.id IS NOT NULL)
SELECT * FROM test s WHERE ( SELECT COUNT(*) FROM test f WHERE f.name = s.name AND f.score >= s.score ) <= 2
SET @XML.modify('delete (/person/@MobileNumber)[1]')
UPDATE T1 SET Indicator = 1 WHERE Indicator = 0 AND EXISTS (SELECT * FROM T1 AS T2 WHERE T2.Indicator = 1 AND T1.ID = T2.ID)
CREATE TRIGGER CountriesTrigger ON Countries AFTER INSERT AS BEGIN SET NOCOUNT ON UPDATE Countries SET Countries.CountryRegion = inserted.Country FROM Countries, inserted WHERE Countries.ID = inserted.ID AND inserted.CountryRegion is null END
DECLARE @MyCSV Varchar(200) = '' SELECT @MyCSV = @MyCSV + CAST(faulttype AS Varchar) + ',' FROM @Simfaults GROUP BY faultType SET @MyCSV = LEFT(@MyCSV, LEN(@MyCSV) - 1) SELECT @MyCSV
SELECT T1.VchID, T2.CustomerName FROM Table1 T1 LEFT JOIN Table2 T2 ON T1.CustomerID = T2.CustID
SELECT whatever FROM ( SELECT whatever, COUNT(*) As NumRecords FROM MyTable WHERE something = myQuery GROUP BY whatever HAVING NumRecords = 1 )
SELECT s.s_id, s.t_id, c.c_id, c.desc, sm.user_id, MAX(sm.user_id = @userid) AS does_user_own_product FROM s s INNER JOIN c c ON s.c_id=c.c_id INNER JOIN sm sm ON s.t_id = sm.t_id WHERE s.c_id=8 GROUP BY s.s_id;
SELECT MeasureDate, col1, col2 FROM Table1 WHERE Col3 = 2 or (Col3 = 1 AND Col4 = 7000); SELECT sum(col1) / sum(col2) AS Percentage , GROUP BY MeasureDate FROM Table1 WHERE Col3 = 2 or (Col3 = 1 AND Col4 = 7000) GROUP BY MeasureDate;
SELECT pm.id FROM r2r.partmaster pm WHERE pm.id NOT IN (SELECT pd.part_num FROM wpsapi4.product_details pd)
select atheletename from table order by time limit 0,10
CURDATE() BETWEEN start_date AND DATE_ADD(end_date, INTERVAL 1 DAY)
INSERT INTO newTable SELECT tb1.userID, tb1.SongID, tb1.Rating, tb2.GenreID FROM tab1 LEFT JOIN tab2 ON tab1.SongID = tab2.SongID
SELECT e.Company, COUNT(l.LeadId) AS Actions FROM Exhibitors AS e LEFT JOIN Leads AS l ON l.ExhibitorID = e.ExhibitorID AND l.ContractorID = 100 AND l.ShowID = "20120228AB" GROUP BY e.Company ORDER BY Actions DESC LIMIT 20;
select t1.* from ( select if( count(*) > 0, 1, 2 ) IncludeType from tbl t2 where t2.type = 1 ) preCheck, tbl t1 where t1.type = preCheck.IncludeType
Set Identity_Insert [TableName] On -- -------------------------------------------- Insert TableName (pkCol, [OtherColumns]) Values(pkValue, [OtherValues]) -- ---- Don't forget to turn it back off ------ Set Identity_Insert [TableName] Off
MATCH n RETURN n.Name, n.City, 'yes' AS status
SUM(currency_Amount * IF(Tran_type = "Bought", 1, -1))
SELECT p.product_code AS "Product Code", p.description AS "Description", SUM(CASE WHEN ri.quantity IS NULL THEN 0 ELSE ri.quantity END) AS "Quantity" FROM products AS p LEFT JOIN receipts_items AS ri ON ri.product_code = p.product_code GROUP BY p.product_code ORDER BY SUM(ri.quantity) DESC
Food ( food_id, foodName, foodType ) favoriteFoods ( favoritefood_id, fkfood_id )
SELECT `Reg.No`, SubjectCode, SUM(`Pass/Fail` = 'Pass') FROM results GROUP BY `Reg.No`, SubjectCode HAVING SUM(`Pass/Fail` = 'Pass') = 0;
UPDATE table SET HatSize = CASE WHEN HatSize = '3' THEN '4' WHEN HatSize = '4' THEN '3' END
// Get the books you want to copy //using your query or you can also use (distinct()) to get unique records // iterate through the books that have a unique name foreach ($products as $product){ // save them in your music table using either your model or an insert query $song = Music::create(array($product->name ...etc...)); }
declare @OrderStatus as int = 10 Select Case When @OrderStatus = 10 Then 'Pending' When @OrderStatus = 20 Then 'Processing ' When @OrderStatus = 30 Then 'Completed ' When @OrderStatus = 40 Then 'Cancelled' Else '' End
SELECT MAX(SALARY) FROM TABLE1 WHERE ROLE = 'MANAGER' OR ROLE = 'DEVELOPER'
declare @fromDate date = null declare @toDate date = null select * from Mytable where date between coalesce(@fromDate,date) and coalesce(@toDate,date)
SELECT channels.* FROM channels LEFT JOIN items_channels ON channels.id = items_channels.channel LEFT JOIN items ON items_channels.item = items.id AND items.active = 1 WHERE channels.active = 1 GROUP BY channels.id HAVING COUNT(items.id) = 0
SELECT coalesce(1 = any(null), true) a, coalesce(1 = any(array[1,2,3]), true) b, coalesce(1 = any('{1,2,3}'), true) c; a | b | c ---+---+--- t | t | t (1 row)
select * from t where dt between date_sub('2015-03-01',interval 5 month) and date_sub('2015-03-01',interval 1 month)
select dt.theyear, dt.themonth, sum(t1_count) from DateTable DT left outer join table1 t1 on dt.theyear = t1.t1_year and dt.theMOnth = t1.t1_month group by dt.theyear, dt.themonth
Create Table admin.dupes( col1, col2, col3 ) AS select col1, col2,right(rtrim(col3),1) as col3 FROM table GROUP BY col1, col2,right(rtrim(col3),1) having COUNT(NULLIF(ltrim(col4), '')) =1 and COUNT(*)=2 delete from table where table.col4 is not null and LTRIM(table.col4)<>'' and exists (select 1 from dupes d where table.col1 = d.col1 and table.col2= d.col2 and right(rtrim(table.col3),1) = d.col3 ) Drop Table admin.dupes
DECODE(controlNumber, NULL, myOldNUmber, (SELECT myNewNumber FROM (SELECT myNewNumber FROM tableA A, tableB B WHERE A.control_id = B.control_id AND A.other_id = B.other_id ORDER BY createdTime) WHERE rownum=1) AS finalnumber
SELECT 'Number of Female users from table 2:' as Msg, count(*) as Entries FROM table1 WHERE age >57 UNION ALL SELECT 'Number of users over the age of 57 from table 1:' as Msg, count(*) as Entries FROM table2 WHERE gender = "female"
SELECT DATE(timestamp), IFNULL(sum(case when satisfaction = 0 then 1 end), 0) as 'unhappy', IFNULL(sum(case when satisfaction = 5 then 1 end), 0) as 'neutral', IFNULL(sum(case when satisfaction = 10 then 1 end), 0) as 'happy' FROM feedback GROUP BY DATE(timestamp)
;WITH LastEmails AS ( SELECT *, ROW_NUMBER() OVER(ORDER BY Timestamp DESC) rownum FROM Emails WHERE Contact = @emailId AND (IsSent is null OR isSent = 0) ) SELECT * FROM LastEmails WHERE rownum = 1;
"INSERT INTO `"+tableName+"` (`ADUC`, `DHCP`, `DISK`, `DNS`, `Exchange`, `HOSTNAME`, `HWID`, `IP`, `OS`) values (@aduc,@dhcp,@disk,@dns,@exchange,@hostname,@hwid,@ip,@os)"
INSERT INTO book_author(book_id,author_id) SELECT book.id, author.id FROM book JOIN author WHERE book.name = 'Mody Dick' AND author.name = 'Melville'
WITH WGS ( WORKGROUPID, NAME ) AS ( SELECT WORKGROUPID, NAME FROM WORKGROUPS START WITH WORKGROUPID = :top-lev-dept CONNECT BY WORKGROUPID = PRIOR PARENTWORKGROUPID ) SELECT DISTINCT T.* FROM TASKS INNER JOIN WGS W ON (T.WORKGROUPID = W.WORKGROUPID)
SELECT A.meta_value, A.meta_id FROM `wp_postmeta` A INNER JOIN wp_posts B ON meta_id = id WHERE A.`meta_key`= 'destination' AND B.post_status = 'publish' GROUP BY A.meta_value
Declare v_avgSal employees.salary%TYPE; Begin SELECT AVG(salary) into v_avgSal FROM employees WHERE employee_id = 10 And (payDate >= To_Date('01012015', 'MMDDYYYY') AND payDate < To_Date('01012016', 'MMDDYYYY')); Dbms_Output.Put_Line(v_avgSal); End;
SELECT page_title, page_text, page_footer, page_blah FROM page_table WHERE page_id = 123 AND lang = 'FR'
def list(request, cat): c = example.objects.filter(category__catname=cat)
(SELECT id FROM table WHERE columnName is not null GROUP BY columnName ) union all (select id from table where columnName is null )
SELECT SERVERPROPERTY('EDITION')
SELECT staff.name, staff.designation_id_designation, staff.status_id_status, GROUP_CONCAT(Concat_Ws('=', leave_remain.leave_type_id_leave_type, leave_remain.days)) AS remain FROM staff INNER JOIN leave_remain ON staff.id_staff = leave_remain.staff_id_staff GROUP BY staff.name, staff.designation_id_designation, staff.status_id_status
select * from your_table order by (mor + even), even;
SELECT a.id, a.content, w.name FROM articles a LEFT JOIN articles_to_writers atw ON a.id = atw.article_id LEFT JOIN writers w ON w.id=atw.writer_id WHERE a.content LIKE '%the%'
WITH CTE_Testtable AS ( SELECT Cust_Name, Contract, Status FROM TESTTable WHERE Status = 'Active' GROUP BY Cust_Name, Contract, Status ) SELECT Cust_Name, COUNT(Cust_Name) Active_Count, STUFF((SELECT ', ' + Contract FROM TESTTable B WHERE B.Cust_Name = A.Cust_Name AND Status = 'Active' GROUP BY Contract FOR XML PATH('')), 1, 2, '') FROM CTE_Testtable A WHERE Status = 'Active' GROUP BY Cust_Name
select F.FacilityId, F.[Address], F.CountryCode, STUFF( (SELECT Distinct ', '+E.mail from Facility F1 inner join ManagementDivision MD on F1.CountryCode=MD.CountryCode inner join Manager M on MD.ManagementDivisionId=M.ManagementDivisionId INNER JOIN Employee E ON M.ManagerID=E.EmployeeId WHERE F1.Address=F.Address AND F1.CountryCode=F.CountryCode AND F1.FacilityId=F.FacilityId FOR XML PATH ('')) ,1,2,'') AS Email from Facility F
SELECT Source , Event, max(Qty) --or min of qty ,DateName(WEEKDAY,( TranDate )) As DayOfWk FROM OurDB GROUP BY Source, Event, DateName(WEEKDAY,( TranDate ))
select to_char(rate, '999.99'), to_char(amount, '999,999,999,999,999') from tt_table
imageClient.Style("Width") = "100px" imageClient.Style("Height") = "100px"
storeDb.Albums.Where(a => a.Genre.Name == genre).OrerBy(a => a.Artist.Name)
SELECT r.* FROM rooms r LEFT JOIN availability a ON (r.id = a.room_id AND a.date_occupied BETWEEN :start_date AND :end_date) WHERE a.id IS NULL
UPDATE foo SET text = concat('-', text) WHERE substring(text, 1, 1) <> '-'
CASE WHEN nature_sites is null THEN '' else REPLACE ( ( SELECT VALUE FROM view_params WHERE parameter = 'nature_sites_url'), '[nature_sites]', nature_sites) END
SELECT TG.RecordNumber FROM TestGroup TG LEFT JOIN Test T ON TG.RecordNumber = T.TestGroupRecordNumber LEFT JOIN Result R ON T.RecordNumber = R.TestRecordNumber GROUP BY TG.RecordNumber HAVING COUNT(R.TestRecordNumber) < X
insert into mytable(EmpId, EmpName, Salary, Version) values ($EmpId, $EmpName, $Salary, $Version) on duplicate key update EmpName = (case when Version > 20 then Values(EmpName) else EmpName end), Salary = (case when Version > 20 then Values(Salary) else Salary end);
Content-Length: 3495
select ('Q' + datename(quarter, [Evaluation Date]) + ' ' + datename(year, [Evaluation Date]) ) as QYYYY
select aprime.* from (select cast (id as varchar(3))+cast (x as varchar(3)) c from a) aprime where aprime.c='1a';
UPDATE data_tab tab1 SET value = (SELECT tab2.value FROM data_tab tab2 WHERE tab1.id = tab2.id AND tab2.sub_id = 3 ) WHERE tab1.id in (select id from ids_table) and tab1.sub_id = 2;
select (case when substr(termnum,1,3) = '011' then substr(termnum,4) else termnum end) as newTermNum from reject
user table room table item table relational user->item (id, user_id, item_id, room_id) OR: relational item->room
SELECT page_id, count(distinct string_id) FROM lang_strings WHERE string_id != 'content' GROUP BY page_id HAVING count(distinct string_id) = 1
SELECT * FROM Products WHERE ProductID LIKE 'FrobBar%'
SELECT company_name FROM companies WHERE UPPER(companies) IN ('ABC', 'DEF', 'BDE', 'MNO');
select column_name+' is null or ' from information_schema.columns c where c.table_name = 'table_name'
update tableName set columnName = case when LENGTH(columnName) > 1 then select concat(columnName, ',NEW DATA') else select 'NEW DATA' end
WITH q AS ( SELECT TOP 10000 * FROM mytable WITH (ROWLOCK, READPAST) WHERE batch_id IS NULL ORDER BY date ) UPDATE q SET batch_id = @myid
pg_dump -Fp -t some_table -h localhost -d thisDB -f /some_dir/bkup ^^^^
SELECT Foo.*, ROW_NUMBER() OVER ( ORDER BY NULL ASC, Foo.MeetingDate DESC ) AS RowOrder
Select ... From cs_post Inner Join cs_group_member On cs_post.group_id = cs_group_member.group_id Where cs_group_member.member_id = $MY_MEMBER_ID
DECLARE v_fexists BOOLEAN; v_file_length NUMBER; v_block_size BINARY_INTEGER; BEGIN UTL_FILE.FGETATTR ('MY_DIR', 'filename.extension', v_fexists, v_file_length, v_block_size); DBMS_OUTPUT.PUT_LINE (v_file_length); END;
SELECT CASE WHEN OverdueBy >= 50 THEN '50+' WHEN OverdueBy >= 40 and OverdueBy < 50 THEN '40-49' WHEN OverdueBy >= 30 and OverdueBy < 40 THEN '30-39' ..... ELSE 'Less than that' END AS OverdueRange, Count(*) as OverdueCount, Sum(Amount) as [Total Amount] From yourtable group by CASE WHEN OverdueBy >= 50 THEN '50+' WHEN OverdueBy >= 40 and OverdueBy < 50 THEN '40-49' WHEN OverdueBy >= 30 and OverdueBy < 40 THEN '30-39' ..... ELSE 'Less than that' END
SELECT MAX((SELECT MAX(_modification) FROM clientes), (SELECT MAX(_modification) FROM phones )) AS lastS
SELECT c.uid info.fname, info.lname, info.phone, info.email, info.country, info.date_create, COUNT(c.fid) AS [NoOfFriends] FROM coin AS c JOIN users AS friend ON c.fid = friend.id LEFT JOIN users AS info ON c.uid = info.id WHERE friend.date_create < '20121031' GROUP BY c.uid
SELECT pa.albumId, pa.title, p.src FROM Album pa LEFT JOIN Photo p ON p.photoId = (SELECT MIN(photoId) FROM Photo WHERE albumId = pa.albumId) WHERE pa.userId = 1
SELECT * FROM ( SELECT Emp_id, Dept_id, 'Column' + CAST(RowNum AS VARCHAR(10)) AS ColumnName FROM ( SELECT Emp_id, Dept_id, ROW_NUMBER() OVER(PARTITION BY Dept_id ORDER BY Emp_id) AS RowNum FROM myTable ) AS mainTable )d PIVOT ( MAX(Emp_id) FOR ColumnName IN ([Column1],[Column2],[Column3]) ) piv
;WITH x AS ( SELECT rowid, rownumber() OVER (PARTITION BY user_id,productid ORDER BY times) AS rn FROM tbl ) DELETE FROM x WHERE rn > 1;
SELECT * FROM tbl t1 join tbl t2 ON (t1.date=DATE_ADD(t2.date, INTERVAL 1 DAY)) WHERE t1.date>=start_date and t1.date<end_date -- plus all the candle restrictions here --
select x."Number of orders placed",count(x.CustomerName) as "Number of customers that have purchased this many orders" from (select count(OrderNumber) as "Number of orders placed", CustomerName from PURCHASES group by CustomerName ) x group by x."Number of orders placed"
SELECT MI.* FROM ( SELECT USER_ID,CUSTOMER_NAME, RANK() OVER (ORDER BY CREATION_DATE DESC) AS the_rank FROM ELEC_AUTO_MERC ) MI WHERE the_rank BETWEEN 2 AND 4;
select TO_NUMBER(SUBSTR(OBJNAME,INSTR(OBJNAME,'.',-1)+1,LENGTH(OBJNAME))) as LAST_VERSION, OBJNAME from MY_TABLE order by LAST_VERSION
SELECT * FROM Posts LEFT JOIN Promotions ON Promotions.post_id = Posts.id WHERE Posts.author_id = $userId OR Promotions.promoter_id = $userId
select timezone, group_concat(name) as names FROM users GROUP BY timezone;
select table_name.*, case score1 when -1 then 1 else 0 end + case score2 when -1 then 1 else 0 end + case score3 when -1 then 1 else 0 end + case score4 when -1 then 1 else 0 end + case score5 when -1 then 1 else 0 end as score_count from table_name;
SELECT PlanId, ClientId, PlanDate FROM ( SELECT ROW_NUMBER() OVER (PARTITION BY ClientId ORDER BY PlanDate DESC) rn, * FROM [dbo].[tblPlan] ) AS T1 WHERE rn <=2
REGEXP_LIKE(PROD_NUM, '^[[:digit:]]{9}$')
var a = from b in table where b.something = 5 select b; var isMatch = a.Any();
"SELECT cd_id, SUM(tracks) as tracks FROM my_table GROUP BY cd_id"
order by to_date(date, 'dd/mm/yyyy'), id
SELECT * FROM A INNER JOIN ( SELECT * FROM A WHERE A.FIELD1='X' ORDER BY A.FIELD2 LIMIT 10) X ON (A.KEYFIELD=X.KEYFIELD) LEFT JOIN B ON (A.FIELD = B.FIELD) LEFT JOIN C ON (A.FIELD = C.FIELD)
SELECT * FROM person WHERE dob <= TRUNC(ADD_MONTHS(SYSDATE, -12));
SELECT * FROM image WHERE id NOT IN (SELECT image_id FROM user_image WHERE user_id = THE_USER_ID);
SELECT * FROM report_1 r1 FULL OUTER JOIN report_2 r2 ON r1.SAMAccountName = r2.SAMAccountName OR r1.NetbiosName = r2.NetbiosName OR r1.DisplayName = r2.DisplayName WHERE r2.NetbiosName IS NULL OR r1.NetbiosName IS NULL
WITH OrderedByName AS ( SELECT Name1, Name2, ROW_NUMBER() OVER(ORDER BY Name2, Name1) as 'RowNum' FROM YourTable ) UPDATE YourTable SET Sequence = obn.RowNum FROM OrderedByName obn WHERE obn.Name1 = YourTable.Name1 AND obn.Name2 = YourTable.Name2
UPDATE dbo.table SET initTime = '2012-08-20T09:30:00.000' WHERE id = '0124'
$columnExist->next(); $columnExist->getInt('count')
SELECT ROW_NUMBER() OVER (ORDER BY column1) AS row_num, t.* FROM ( SELECT column1, columns2 ... FROM table1 WHERE myCondition UNION SELECT column1, column2 ... FROM table2 WHERE myCondition UNION SELECT column1, column 2.... ) t;
SELECT * FROM DD WHERE DateAdd(DAY, 2, ResponseBegin) <= ResponseEnd
/etc/init.d/postgresql-8.4 stop datadir=/var/lib/postgresql/8.4/main rm -rf "$datadir" cp -aR /<mount_dir>/etc/postgresql/8.4/main/ "$datadir" chown -R postgres:postgres "$datadir" /etc/init.d/postgresql-8.4 start
IF @id = 1 THEN SELECT code ... ELSE SELECT Cast(Code AS int) as Code
select c.kupon,count(*) as count from kuponbahis c join bahis b on b.sonuc = c.secim and b.ID=c.bahis AND c.durum=0 group by c.kupon
SELECT COUNT(*) FROM `items` WHERE `fields` like '%"id":"2","value":"2"%'
INSERT INTO ATab(Tab1Id, Tab2Id) (SELECT Tab1.Id, Tab2.Id FROM Tab1, Tab2 WHERE Tab1.Name = 'Foo' AND Tab2.Name = 'Bar')
SET tmp = (SELECT C2 From proc_http_post(adr.AdrId) with (C1 long varchar,C2 long varchar) WHERE C1 = 'Body');
UPDATE games SET winner = CASE WHEN score1 > score2 THEN visitor WHEN score2 > score1 THEN home ELSE 'tie' END;
SELECT S.*, SI.* FROM SALE S JOIN SALE_ITEM SI ON S.id = SI.sale_id JOIN (select SALE_ITEM.sale_id, min(item_name) as min_name from SALE_ITEM group by SALE_ITEM.sale_id) SI_MIN ON S.id=SI_MIN.sale_id ORDER BY SI_MIN.min_name, SI.id
SELECT STR_TO_DATE('20141012','%Y%m%d') FROM `table`
SELECT null, sum(IIF(layer='key info',1,0)) AS [Key Info], sum(IIF(layer='approaches',1,0)) AS [Approaches], sum(IIF(layer='research',1,0)) AS [Research] FROM resources
SET ANSI_NULLS ON GO SET QUOTED_IDENTIFIER ON GO CREATE PROCEDURE sp_Transfer_RegionData AS BEGIN INSERT INTO Region (regionName) SELECT column1 FROM openquery(ITDB, 'select * from db.table1') END GO EXEC sp_Transfer_RegionData
create table dbo.Foo ( StartDate int, CallDT AS (CONVERT([datetime],dateadd(second,[StartDate],'01/01/1970'),(0))) ) select definition from sys.computed_columns where name='CallDT' and object_id=object_id('dbo.Foo')
SELECT col1 ,col2 ,col3 FROM yourTable1 AS t1 INNER JOIN yourTable2 AS t2 ON t1.Id = t2.Id WHERE col1 = 'aaaa' AND col2 = 'bbbb' ORDER BY col1
SELECT top 1 Title, ExpiryDate FROM Table1 WHERE PublishDate<=Date() AND ExpiryDate>=Date() ORDER BY ExpiryDate ASC
CREATE PROCEDURE sp_SalesTaxV3(@ship_zip varchar(20)) AS BEGIN DECLARE @tax_rate INT SET @tax_rate = 0 SELECT * FROM tax_rate WHERE zip = ''+@ship_zip+'' END
SELECT q1.question AS Question1, q1.answer AS Answer1, q2.question AS Question2, q2.answer AS Answer2, u.password AS Password FROM User u JOIN owner o ON u.id = o.userID LEFT JOIN secretQA q1 on o.secretQA1 = q1.id LEFT JOIN secretQA q2 on o.secretQA2 = q2.id WHERE owner.id = 1
LOGID (PK) ACTIVITYID SOURCE DATELOGGED ---------- ---------- ------ ----------
SELECT * FROM ( SELECT b.*, ROW_NUMBER() OVER (PARTITION BY BillID ORDER BY Lang) as num FROM Bills b WHERE Account = 'abcd' ) tbl WHERE num = 1
SELECT TABNAME FROM SYSCAT.COLUMNS WHERE TABNAME IN ('table name 1', 'table name 2') AND COLNAME = 'column_name';
CREATE TABLE #StockedTbl ( PONo varchar(10), Stocked varchar(5), PONoMatch AS CONVERT(CHAR(5), RIGHT(LEFT(PONo,6),5)) PERSISTED ); CREATE CLUSTERED INDEX x ON #StockedTbl(PONoMatch);
div{ white-space: pre; }
Child.Tag + COALECE('@' + Parent.Tag, '')
SELECT * FROM mytable WHERE date_part('year', mydate) = date_part('year', CURRENT_DATE);
Select studentId from student where subject_Id in ('1', '3', '4') group by studentId having count(distinct subject_Id) = 3
WITH Cte AS( SELECT *, ZeroRatio = SUM(CASE WHEN Ratio = 0 THEN 1 ELSE 0 END) OVER() FROM TestData ), CteRN AS( SELECT *, RN = ROW_NUMBER() OVER(ORDER BY CASE WHEN ZeroRatio >= 5 AND Ratio = 0 THEN NumContracts END DESC, Ratio ) FROM Cte ) SELECT RN, Vehicle, NumContracts, SaleAmount, Ratio FROM CteRN ORDER BY RN
WITH tbl2 AS (SELECT DISTINCT ON (Name) Name,Nickname FROM table2 ORDER BY Name) SELECT tbl1.Name, tbl2.Nickname, tbl1.col2, tbl1.col3 FROM table1 tbl1 INNER JOIN tbl2 ON tbl1.Name = tbl2.Name
SELECT L.LectID, Fname, Lname FROM Lecturers L JOIN Lecturers_Specialization S ON L.LectID=S.LectID GROUP BY L.LectID, Fname, Lname HAVING COUNT(S.Expertise)>=ALL (SELECT COUNT(Expertise) FROM Lecturers_Specialization GROUP BY LectID)
;with c as ( select *, row_number() over(partition by [Key] order by Number desc) as n from YouTable ) delete from c where n > 1
create table Person ( Age int not NULL check( Age > 0) , Height numeric(10,2) not NULL check( Height > 5), Gender varchar(5) not null check( Gender in ('M', 'F', 'O')), BirthDate datetime null, ) DECLARE @schema xml SET @schema = (SELECT * FROM Person FOR XML AUTO, ELEMENTS, XMLSCHEMA('PersonSchema')) select @schema
CREATE TABLE A (C VARCHAR(100)) CREATE TABLE B (C VARCHAR(100)) SELECT TOP 1000 C FROM A UNION ALL SELECT TOP 1000 C FROM B ORDER BY C GO CREATE VIEW V AS SELECT TOP 1000 C FROM A UNION ALL SELECT TOP 1000 C FROM B ORDER BY C GO SELECT * FROM V GO DROP TABLE A DROP TABLE B DROP VIEW V
mysql> create trigger insert_check_associations before insert on associations -> for each row -> begin -> if new.email1>new.email2 then -> set @a = new.email2; -> set new.email2 = new.email1; -> set new.email1 = @a; -> end if; -> end;//
before :save do if self.created_at.strftime('%T') == "00:00:00" self.created_at = ((self.created_at.to_time+1)-3600).to_datetime end end
SELECT Tournament_Result.*, (select <<Col1>> from Tournament_Type where Tournament_Type.intTournamentType=t.intType) FROM Game inner join Tournament on Tournament.intGameId = Game.intGameId inner join Tournament_Result on Tournament_Result.intTournamentId = Tournament.intTournamentId WHERE Tournament.strStatus = 'live' ORDER BY dtmCreated DESC
proc sql; select tab.v1, tab.v2, coalesce(t1.v3, t2.v3) as v3 from tab left join t1 on tab.v2 = 1 left join t2 on tab.v2 = 2;
CREATE TABLE dbo.YourTable ( ... isDeleted AS CASE WHEN DeleteDate IS NULL THEN 0 ELSE 1 END );
SELCT people.id, people.name, GROUP_CONCAT(goods.name) FROM people LEFT JOIN goods_owned ON goods_owned.person_id = people.id LEFT JOIN goods ON goods.g_id = goods_owned.good_id WHERE people.id = 3 GROUP BY people.id
SELECT "id","name" from( SELECT "stylists"."id", "stylists"."Name",count(stylists.id) as cnt FROM "stylists" INNER JOIN "category_stylists" ON "category_stylists"."stylist_id" = "stylists"."id" WHERE category_stylists.category_id IN (1,2) group by "stylists"."id", "stylists"."Name") order by cnt desc
select q.quizNum, q.quizName, count(sa.stuNum) as attempedstudent from Quiz q left join studentassessment sa on sa.quizNum = q.quizNum group by q.quizNum;
declare @temp table ( S int, D nvarchar(10) ) insert into @temp values (1,'01') insert into @temp values (2,'01') insert into @temp values (2,'03'); SELECT D, STUFF( (SELECT ',' + CAST(S AS VARCHAR(10)) FROM @temp WHERE D = a.D FOR XML PATH ('')) , 1, 1, '') AS Remark FROM @temp AS a GROUP BY D
SELECT ppl.FirstName + ' ' + ppl.LastName AS ReferredBy
SELECT users.*, payments.method, payments.id AS payment_id FROM payments NATURAL JOIN ( SELECT user_id, MAX(id) AS id FROM payments GROUP BY user_id ) t RIGHT JOIN users ON users.id = t.user_id
SELECT A_Date, LEFT(A_Interval,2) + ':' + RIGHT(A_Interval,2) + ' - ' + LEFT(A_Interval,2) + ':' + CASE WHEN RIGHT(A_Interval,2) = '30' THEN '59' ELSE '29' END A_Interval, Acc_name FROM Time_Summary
SELECT players.player, -- Use correlated subselects to count goals / assists (SELECT COUNT(*) FROM actions WHERE goal = players.player) goals (SELECT COUNT(*) FROM actions WHERE assist = players.player) assists -- Get all distinct players (UNION = DISTINCT, here). Of course, if you -- have an actual players table, use that one instead! FROM ( SELECT goal player FROM actions UNION SELECT assist FROM actions ) players
select * from test1 where to_char(datecol,'yyyy')= '2015'
CREATE TABLE locs( id INTEGER PRIMARY KEY AUTOINCREMENT, lat TEXT, lng TEXT, num INTEGER )
$length = sizeof($image_list); for ($i = 0; $i < $length; $i++) { if ($i == $length) print "<img src=\"icon-goes-here.png\" />\n"; printf("<img src=\"%s\" />\n", $image['image']); }
IMP SCOTT/TIGER SHOW=Y FILE=import_file.dmp
WITH calendar(mon) AS ( SELECT 1 UNION ALL SELECT mon + 1 FROM calendar WHERE mon < 12 ) SELECT itemID, mon, SUM(value) FROM calendar c, t_item i LEFT OUTER JOIN t_value v ON v.itemID = i.itemID AND MONTH(date) = mon GROUP BY i.itemID, mon
-- t-sql SELECT a.name FROM table1 a INNER JOIN ( SELECT t1.name FROM table1 t1 JOIN table2 t2 ON t1.name = t2.name ) b ON a.name = b.name OR SUBSTRING(a.name, 1, CHARINDEX('-', a.name)) <> SUBSTRING(b.name, 1, CHARINDEX('-', b.name))
SELECT * FROM [DS_PROD].[dbo].[Q04_ImportDetails] q04 WHERE Q04.ImportId = 680 AND q04.AccountNumber NOT IN (SELECT AccountNumber FROM [DS_PROD].[dbo].[T01_TransactionMaster] t01 WHERE t01.BatchNumber = '270864')
$ sqlite3 sqlite> CREATE TABLE date_test(date DATE); sqlite> INSERT INTO date_test VALUES('2012-01-01'); sqlite> INSERT INTO date_test VALUES('2012-02-01'); sqlite> INSERT INTO date_test VALUES('2012-03-01'); sqlite> SELECT date FROM date_test WHERE date < '2012-02-15'; 2012-01-01 2012-02-01
INSERT INTO `table3` ( `ID`, `Nn` ) SELECT `t1`.`ID`, `t2`.`Nn` FROM `table1` as `t1` CROSS JOIN `table2` as `t2`;
select distinct name from user_source where type = 'PROCEDURE' and lower(text) like lower('%the_text_you_want%');
regexp_replace(string, '^.*?-(\d+)[LR].*$', '\1')
select o.id, o.date, o.customer, o.status, group_concat(i.item_name, ' (item id ', i.item_id, ')' separator ' ') as item_list from order o inner join order_items i on o.id = i.order_id where o.status = 'open' group by o.id, o.date, o.customer, o.status order by date asc;
SELECT to_number(val.number_value), min(val.variant_number) from val left join mad on mad.id = val.madid where val.id = 227753377 and mad.fk_parent =18468 and (val.language_id = 6003 or val.language_id is null) and mad.identifier = 'IDENTIFIER2' group by to_number(val.number_value)
INSERT INTO TableName (Column1, Column2, Column3.....) OUTPUT inserted.Column1 , inserted.Column2 INTO @TableName SELECT Column1, Column2, Column3..... FROM Table_name
SELECT permits.zipCode, SUM(payments.payment) FROM permits JOIN payments ON permits.permitID = payments.permitID GROUP BY permits.zipCode
SELECT IF(@Subject = @Subject:=X.id, '', X.name) AS `Subject`, IF(@Semester = @Semester:=Y.id, '', Y.name) AS `Semester`, Z.name FROM X INNER JOIN Y ON Y.x_id=X.id INNER JOIN Z ON Z.y_id=Y.id CROSS JOIN (SELECT @Subject:=0, @Semester:=0) A ORDER BY X.id, Y.id, Z.id
INSERT INTO location VALUES(1,'Delhi') INSERT INTO location VALUES(2,'Noida') INSERT INTO [USER] VALUES(1,'Sandeep',1) DECLARE @result table(UserName varchar(50), OldLocationId Int,NewLocaionId Int) UPDATE [USER] SET locationid=2 OUTPUT INSERTED.UserName, DELETED.locationid,INSERTED.locationid INTO @result WHERE userid=1 SELECT * FROM @result
declare @p_FR as char(6), @fr as varchar(6) set @p_FR = '8534' set @fr = right('000000' + rtrim(@p_FR), 6) select @fr
C_Initialize C_GetFunctionList C_GetInfo C_GetSlotList C_OpenSession C_Login C_CloseSession C_Finalize C_GenerateKey C_FindObjectsInit C_FindObjects C_FindObjectsFinal C_EncryptInit C_Encrypt C_DecryptInit C_Decrypt C_CloseSession
SELECT ID, Foo, Bar FROM (SELECT ROW_NUMBER() OVER (ORDER BY ID ASC) AS Row, ID, Foo, Bar FROM SomeTable) tmp WHERE Row >= @RowRangeStart AND Row <= @RowRangeEnd
SELECT a.id FROM table AS a LEFT OUTER JOIN table AS b ON a.id = b.id+1 WHERE b.id IS NULL;
SELECT t.*, @i:=IF(id=@id, @i+1, 1) AS num, @id:=id FROM t CROSS JOIN (SELECT @i:=0, @id:=0) AS init ORDER BY id
SELECT Shippers.ShipperName,COUNT(Orders.OrderID) AS NumberOfOrders FROM Shippers LEFT JOIN Orders ON Orders.ShipperID=Shippers.ShipperID GROUP BY ShipperName LIMIT 8 ORDER BY NumberofOrders DESC;
SELECT ns.Name, MAX(ns.Score) AS Score FROM NameScore AS ns GROUP BY ns.Name ORDER BY ns.Name ASC
@i_DocumentID varchar(MAX) SELECT a.DocumentID, a.DocumentName, a.ClientID, b.AttachmentName from Documents a join Attachments b on a.DocumentId = b.DocumentId where a.DocumentID IN (SELECT * FROM dbo.CSVToTable(@i_DocumentID))
SELECT Switch(MyTable.[MyCol]='1','Terrestrial', MyTable.[MyCol]='2','Value is two',MyTable.[MyCol]='3','Value is three', True,'Error') AS ColumnName FROM MyTable;
specific_date + (number_of_years || ' years')::INTERVAL
DECLARE @PageNumber INT, @PageSize INT SET @PageNumber = 3 SET @PageSize = 5; WITH CTE AS ( SELECT *, ROW_NUMBER() OVER(ORDER BY RateID) Corr FROM Rate WHERE Hourly = 0 ) SELECT * FROM CTE WHERE Corr BETWEEN @PageNumber*@PageSize AND @PageNumber*@PageSize+@PageSize-1
UPDATE table2 SET total = ( SELECT value2 FROM table1 WHERE name = value1 ) WHERE table2.type = Name2
SELECT ROUND(SUM(pixeldatafilesize)/1048576,2) AS studysizemb,CONVERT(varchar(50),DateTime ,101) AS DateTime FROM filename WHERE DateTime BETWEEN '2014-05-01' AND '2014-06-01' GROUP BY CONVERT(varchar(50),DateTime ,101)
with months as ( select BeginDate , EndDate , Payment = Payment / 12.0 from MyTable union all select BeginDate = dateadd(mm, 1, BeginDate) , EndDate , Payment from months where dateadd(mm, 1, BeginDate) < EndDate ) select BeginDate , EndDate = dateadd(dd, -1, dateadd(mm, 1, BeginDate)) , Month = datename(mm, BeginDate) , MonthlyAmount = Payment from months order by BeginDate
SELECT TOP 1 POS FROM TEST ORDER BY LASTDATE DESC
select count(distinct Party_Code) from tradeFile
select tenant, name, date, months from (select t.*, row_number() over (partition by t.tenant, t.name order by t.months desc, t.date desc) as rn from TableName t) x where rn = 1
SELECT l.levcode, levnaam, levadres, levwoonplaats FROM leverancier l WHERE l.levcode NOT IN (SELECT b.levcode FROM bestelling b)
select foriegn_column_name,COUNT(foriegn_column_name) from table_name group by foriegn_column_name having COUNT(foriegn_column_name) > 1
set feedback off
INSERT INTO newdb.postattribute (id, attribute, value) SELECT postid, 'post-body', body FROM olddb.post;
SELECT * FROM (select * from users order by joined DESC) u where rownum<=5
WITH myDate AS ( SELECT name, rD FROM YourTable WHERE d = e ) SELECT t.*, m.rD as expectedCol FROM YourTable t JOIN myDate m ON t.name = m.name
TRUNCATE tablex, tabley, tablez;
SELECT name FROM people WHERE age > 15
SELECT C.DropShipperID, D.DropShipper, SUM(S.Quantity) AS Quantity, SUM(C.Cost) AS Cost, SUM(S.Quantity * C.Cost) AS SubCost FROM C INNER JOIN D ON C.DropShipperID = D.DropShipperID INNER JOIN S ON S.ProductID = S.ProductID WHERE (C.DropShipperID IN (1, 2, 3, 4, 5)) AND (S.CartID = @cartid) GROUP BY C.DropShipperID, D.DropShipper
UPDATE table2 t2 SET date_col = (SELECT t1.date_col FROM table1 t1 WHERE t1.id = t2.id) WHERE EXISTS ( SELECT 1 FROM table1 t1 WHERE t1.id = t2.id )
CREATE INDEX event_creation_time_date_idx ON event ((creation_time::DATE));
Select RowNumber,NewsId,InnerCount From ( Select Row_Number() Over (ORDER BY FirstVisit) as 'RowNumber', NewsId , COUNT(*) OVER () AS InnerCount From ( Select Distinct NewsId,FirstVisit,PublishDate From VwNewsPack ) as t ) as tt Where NewsId between 10 and 20
select * from tableB union all select * from tableA where tableA.pk not in (select pk from tableB)
SELECT member_id, MAX(login_timestamp) FROM logins GROUP BY member_id HAVING MAX(login_timestamp) <= 1329461087 ORDER BY MAX(login_timestamp) DESC
select distinct on (product_id) o.* from offers o order by product_id, amount desc;
INSERT INTO table2 (fullName, todaysdate) SELECT firstName + ' ' + lasName AS FullName, CONVERT(char(10), GetDate(),126) FROM table1
SELECT 'images' as `columns`, SUM(images <> 0) as counts, SUM(images) as `sum` FROM dpsreport where publisherId = 91 UNION ALL SELECT 'videos', SUM(videos <> 0), SUM(videos) FROM dpsreport where publisherId = 91 UNION ALL SELECT 'reviews', SUM(reviews <> 0), SUM(reviews) FROM dpsreport where publisherId = 91;
SELECT T_PK FROM (SELECT T_PK FROM table WHERE col1= 'text' AND col2 IS NULL ORDER BY T_PK DESC ) t WHERE ROWNUM < 100;
SEL sumtran.acc_nbr, sumtran.error, latest.latest_dt FROM ( SEL acc_nbr, SUM(tran_amt) AS error FROM DATABASE.TRAN_TBL WHERE tran_typ = 'xx' GROUP BY acc_nbr HAVING sum(tran_amt)<0 ) AS sumtran INNER JOIN ( SEL acc_nbr, MAX(tran_dt) AS latest_dt FROM DATABASE.TRAN_TBL GROUP BY acc_nbr ) AS latest ON sumtran.acc_nbr = latest.acc_nbr
set CLASSPATH=%CLASSPATH%;c:/jt400.jar
With x as ( Select reference_subjektu, min(reference_subjektu) over (partition by ico) nval from expozitura ) update x set reference_subjektu = nval where reference_subjektu != nval;
SELECT a.Name AS 'Area', t.Name AS 'Town', SUM(CASE v.votingyn WHEN 'Y' THEN 1 ELSE 0 END) AS 'Yes' SUM(CASE v.votingyn WHEN 'N' THEN 1 ELSE 0 END) AS 'No' FROM VOTES AS v JOIN TOWN AS t ON v.townid = t.id JOIN AREA AS a ON v.areaid = a.id GROUP BY (a.Name, t.Name)
WHERE time >= date_trunc('minute', now()) AND time < date_trunc('minute', now()) + INTERVAL '1 minute';
SELECT * FROM Quests WHERE Quest_ID NOT IN ( SELECT DISTINCT(Quest_ID) FROM Questing WHERE User_ID = 14)
CREATE UNIQUE NONCLUSTERED INDEX [IX_INDEXNAME] ON [dbo].[TABLENAME] ( [Description] ASC ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] GO
SELECT Max([ID]) FROM [Table]
select shop_id, count(1) from TABLE_NAME group by shop_id
update <tablename> set widget_id = widget_id + "somenumber/" where row_id = X and widget_id not like "%/somenumber/%" and widget_id not like "somenumber/%";
SELECT t2.quotes_user, t2.email_address, t2.Sent_at AS '________Sent_at________' FROM ( SELECT quotes_user, MAX(Sent_at) AS MaxDate FROM Table GROUP BY quotes_user ) t1 INNER JOIN Table t2 ON t1.quotes_user = t2.quotes_user AND t1.Sent_at = t2.MaxDate
SELECT p.name as name, f.stuff AS stuffF, d.stuff AS stuffD, e.stuff AS stuffE FROM tableOne p JOIN tableTwo f on (p.id = f.id AND f.stufftype = 'F') JOIN tableTwo d on (p.id = d.id AND d.stufftype = 'D') JOIN tableTwo e on (p.id = e.id AND e.stufftype = 'E')
SELECT u.uacc_username, max(m.msg_id) as LatestMsg FROM messages m JOIN user_accounts u on m.msg_from_uacc_fk = u.uacc_id WHERE m.msg_to_uacc_fk = ? GROUP BY u.uacc_username
CREATE TABLE sorting (sid numeric(10,10), rn int); INSERT INTO sorting (sid, rn) SELECT SortID, RecordNumber FROM Beleg WHERE Year ( Valuta ) = 2016 AND Ursprungskonto = 1210 ORDER BY SortID; UPDATE Beleg SET SortID = (SELECT rn FROM sorting WHERE sid=Beleg.SortID) WHERE Year ( Valuta ) = 2016 AND Ursprungskonto = 1210; DROP TABLE sorting;
select to_date('2/12/15', 'mm/dd/rrrr') from dual;
select p.*, group_concat(ps.url_little SEPARATOR ', '), group_concat(ps.url_big SEPARATOR ', ') from product p LEFT join product_photos ps on (p.id_prod = ps.id_product) group by p.id_prod
SELECT * FROM comments c JOIN users u ON c.user_id = u.id_user_coms JOIN posts p ON c.post_id=p.id JOIN pages pa ON p.page_id=pa.id WHERE c.text LIKE "%iphone%" AND pa.name LIKE "%iphone%"
DECLARE @A Table(Val1 Int) Insert Into @A Values(1),(2),(3),(4),(5) DECLARE @B Table(Val2 Int) Insert Into @B Values(1),(2),(3),(4),(5),(6) DECLARE @C Table(Val3 Int) Insert Into @C Values(1),(2),(3),(4),(5),(6),(7) SELECT COUNT(*) FROM @A a, @B b, @C c WHERE a.Val1 = b.Val2 AND b.Val2 = c.Val3
SELECT COUNT(*) FROM Table1 WHERE Value < (SELECT AVG(Value) FROM Table1)
SELECT `group_id`, group_concat(`element_value`) as value, date FROM `table_name` group by `form_id`
SELECT CASE isMale WHEN 'True' THEN 'Male' ELSE 'Female' END AS Gender ,CAST(left(round(count(isMale) * 100.00 /(select count(*) from gendertable), 0),2) AS VARCHAR) + '%' AS GenderPercent FROM genderTable GROUP BY isMale
select the first record from skucompetition where creationdate is before (input date + one day) order by creationdate so most recent record comes first
;WITH cte (Col1, Col2, Col3) AS ( Select 1, 'a','2001-01-01 12:00' UNION ALL Select 83, 'z','2011-09-30 13:27' UNION ALL Select 777, 'k','1997-04-25 09:27' ) SELECT * INTO NewTable FROM cte
INSERT INTO table (column) SELECT a_column FROM a_table --- optional (multiple) JOINs --- and WHERE --- and GROUP BY --- any complex SELECT query
select * from tbl_item where substr(tbl_item.`Product Group Code`, 1, 6) LIKE ':shopprodid%'
;with infoCte as ( select pid, hid, count(*) as visitcount from visits group by pid, hid ) select * from infocte i where visitcount > ( select count(*) / 2 as midcount from visits v where v.pid = i.pid )
select * from ( select *, datepart(minute, yourDate) mn, row_number() over(partition by datepart(minute, yourDate) order by yourDate) rn from yourTable ) x where (mn % 5) = 0 and rn = 1
SELECT CASE WHEN LEFT(val, 1) = '(' THEN -1 * CAST( REPLACE((val, '(', ''), ')', '') AS DECIMAL(10,4)) ELSE CAST( val AS DECIMAL(10,4) ) END AS num_val FROM val_table
create procedure updateColumn (pkey int, columnName varchar2, value int) as begin execute immediate 'update YOUR_TABLE set ' || columnName || ' = ' || TO_CHAR(value) || ' where KEY = ' || TO_CHAR(pkey); end;
select t.employeeid as employee_id, t.manager_id as manager_id, t2.contact_id as manager_contact_id from mytable t left outer join mytable t2 on t.managerid = t2.employeeid
SELECT g.subgroup AS Subgroup, mg1.maingroup AS G1, mg2.maingroup AS G2, mg3.maingroup AS G3 FROM (SELECT DISTINCT subgroup FROM Groups) g LEFT JOIN Groups mg1 ON mg1.maingroup = 1 AND mg1.subgroup = g.subgroup LEFT JOIN Groups mg2 ON mg2.maingroup = 2 AND mg2.subgroup = g.subgroup LEFT JOIN Groups mg3 ON mg3.maingroup = 3 AND mg3.subgroup = g.subgroup WHERE g.subgroup IN ('A','B','C');
select m.organization from isMember m join geo_desert d on m.country = d.country group by m.organization having count(distinct m.country) = (select count(distinct d.country) from geo_desert);
select count(u.id) as ile, d.day from generate_series('2013-09-23'::date, '2013-09-29'::date, '1d') as d(day) left outer join users as u on u.date_created >= d.day and u.date_created < d.day + '1d'::interval -- or left outer join users as u on date_trunc('day', u.date_created) = d.day -- but I think that >= and < will be faster if you have index on `date_created` group by d.day
select grantee from dba_role_privs where granted_role='LANDING_R'
CREATE TEMP TABLE tbl AS SELECT a.run_uid, s.object_uid FROM dt.table_run_group a JOIN dt.table_segment s ON a.group_uid = s.object_uid;
update your_table set id = rownum
SELECT field1, field2 FROM myTable ORDER BY field1 ASC LIMIT 10
SELECT SUM(CASE WHEN CoumntA < 0 THEN 1 ELSE 0 END) AS LessThanZero, SUM(CASE WHEN CoumntA > 0 THEN 1 ELSE 0 END) AS GreaterThanZero FROM TableA
SELECT a.numRows, b.id, b.NAME FROM xe.emp b INNER JOIN ( SELECT COUNT(*) AS numRows, dept_id FROM xe.dept GROUP BY dept_id ) a ON b.id = a.dept_id
INSERT INTO [Book] (BookName) SELECT DISTINCT Book FROM [Source] WHERE Book NOT IN (SELECT BookName FROM Book) INSERT INTO [Employee] (EmployeeName) SELECT DISTINCT Employee FROM [Source] WHERE Employee NOT IN (SELECT EmployeeName FROM Employee) INSERT INTO [BookEmployee] (BookID, EmployeeID, StartDate, EndDate) SELECT Book.ID, Employee.ID, Source.StartDate, Source.EndDate FROM [Source] INNER JOIN Book ON Book.BookName = Source.Book INNER JOIN Employee ON Employee.EmployeeName = Source.Employee
select date, hour, v1, v2, count(*) over (partition by date, v1, v2, groupkey) as cons from ( select mytable.*, hour - row_number() over (partition by date, v1, v2 order by hour) as groupkey from mytable where cnt <> 0 ) grouped union all select date, hour, v1, v2, 0 as cons from mytable where cnt = 0 order by date, hour, v1, v2;
CREATE TRIGGER checkFieldsValid BEFORE INSERT ON employee_comments FOR EACH ROW BEGIN DECLARE errmsg VARCHAR(255) DEFAULT "REQUIRED DATA NOT FOUND"; IF NOT NEW.franchise_branch_id = 0 XOR NEW.corporate_branch_id = 0 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = errmsg; END IF; END;
select spisznacka, VdruhStavRizeni from (select spisznacka, VdruhStavRizeni, row_number(VdruhStavRizeni) over (partition by spisZnacka order by id desc) as seqnum from isirshort where VdruhStavRizeni <> '' ) sv where seqnum = 1;
SELECT c.car_id FROM `car` c INNER JOIN `car_selected_options` AS o ON c.car_id = o.car_id WHERE (o.key = 'exterior_color' AND o.value = 10) OR (o.key = 'electronics' AND o.value = 100) OR (o.key = 'electronics' AND o.value = 101) OR GROUP BY c.car_id HAVING COUNT(*) = 3;
(charindex('0000000171', Codes) > 0 or charindex('0000000172', Codes) > 0 or charindex('0000000173', Codes) > 0)
print @Phone print @Fax
updatE myTable set newColumn = newValue where oldColumn = 'something';
CALL CSVWRITE( '#DELTA_CSV_DIR#/DELTA.csv', 'SELECT ccc from temptemp', 'fieldSeparator=| fieldDelimiter= escape=');
BEGIN DBMS_FGA.ADD_POLICY( object_schema => 'HR', object_name => 'FOO', policy_name => 'my_policy', policy_owner => 'SEC_MGR', enable => TRUE, statement_types => 'DELETE', audit_condition => 'USER = ''myuser''', audit_trail => DBMS_FGA.DB); END; /
DECLARE @Param3 bigint exec dbo.MySPName @Param1, @Param2, @Param3 output SELECT @Param3 --gives you output value --This will give you the names and data types of all output parameters in this SP SELECT p.name, t.name as [type], p.max_length, is_output FROM sys.parameters p JOIN sys.types t ON p.user_type_id = t.user_type_id WHERE p.object_id = OBJECT_ID(N'MySPName') AND p.is_output = 1
SELECT date, action_id, inc_id, (select top 1 usr_n from table t2 where t2.inc_id < t.inc_id order by t2.inc_id desc ) AS prevusr, FROM table t;
;WITH CTE AS( SELECT *, rn = ROW_NUMBER() OVER(PARTITION BY code ORDER BY (SELECT NULL)) FROM #TEMP_RESULTS WHERE result LIKE '<%' ) DELETE FROM CTE WHERE rn > 1
mysql> show variables like "datadir"; +---------------+-----------------+ | Variable_name | Value | +---------------+-----------------+ | datadir | /var/lib/mysql/ | +---------------+-----------------+
select count(distinct registered), count(distinct attended), SessionId from (select AttendantId registered, null attended, SessionId from registered union all select null registered, AttendantId attended, SessionId from Attended) sq group by SessionId
declare l_count pls_integer; begin for r_cur in ( select columnname from shiv_tab_col ) loop execute immediate 'select count(1) from ser_shiv_syn where '||r_cur.columnname||' is null' into l_count; dbms_output.put_line(l_count); dbms_output.put_line(r_cur.columnname); end loop; end; /
where PerformanceDate between case when month(getdate())>=9 then cast(year(getdate()) as char(4)) + '0901' else cast(year(getdate())-1 as char(4))+ '0901' end and case when month(getdate())>=9 then cast(year(getdate())+1 as char(4)) + '0901' else cast(year(getdate()) as char(4))+ '0901' end
SELECT Host FROM HostSoftware WHERE NOT EXISTS ( SELECT * FROM HostSoftware AS InnerSoftware WHERE InnerSoftware.Host = HostSoftware.Host AND InnerSoftware.Software ='Title2' )
select flag1 as flag, flag1_column1 as c1, flag1_column2 as c2, flag1_column3 as c3 from t where flag1=1 union select flag2 as flag, flag2_column1 as c1, flag2_column2 as c3, flag2_column3 as c3 from t where flag2=1
doCountQuery <- function(con, table) { query <- paste("SELECT COUNT(message_id) FROM ", table, sep = "") t <- dbGetQuery(con, query) return(t) } list <- dbListTables(con) counts <- numeric(0) # this will store the counts for all tables for (i in 1:length(list)) { count <- doCountQuery(con, list[i]) counts[i] <- count[[1]] }
SELECT pdate FROM table 1 WHERE pdate >= Date(NOW()) - INTERVAL 1 DAY AND pdate < Date(NOW())
select IIF(MyColumn<>'CCC', 'AAA+BBB', 'CCC'), 100*count(MyColumn='CCC')/(select count(*) from MyTable) from MyTable group by MyColumn='CCC'
(SELECT * FROM myTable WHERE STR_TO_DATE('07.11.1986', '%d./%m./%Y') < data ORDER BY data ASC LIMIT 1) UNION ALL (SELECT * FROM myTable WHERE STR_TO_DATE('07.11.1986', '%d./%m./%Y') > data ORDER BY data DESC LIMIT 1)
SELECT COUNT(offers_id) AS offers, image1, product_type, product.amount, product.price, description, product.product_id FROM product INNER JOIN offers ON product.product_id = offers.product_id WHERE product_type LIKE '%$product_type%'" GROUP BY image1, product_type, product.amount, product.price, description, product.product_id
SELECT trip_id, stop_id, COUNT(*) as cnt FROM operation_ticket_part_stops GROUP BY trip_id, stop_id ORDER BY cnt DESC LIMIT 1
WHERE email_address IN ('foo@bar.com' COLLATE utf8_general_ci, 'test@test.com' COLLATE utf8_general_ci)
select customerId, count(*) from mytable group by customerId having count(*) >= 2
UPDATE t2 SET t2.field2 = t1.field2 and t2.field3 = t1.field3 FROM table2 AS t2 INNER JOIN table1 AS t1 ON t2.field1=t1.field1
select main_table.user_id, concat(s1.meta_value, ' ', s2.meta_value) as name from main_table left join secondary_table s1 on main_table.user_id = s1.user_id and s1.meta_key = 'first_name' left join secondary_table s2 on main_table.user_id = s2.user_id and s2.meta_key = 'last_name' where referrer = $referrer
SELECT regions.*, a.max_status FROM regions JOIN (SELECT id, MAX(status) as max_status FROM auditoria WHERE entidade_tipo = 'Terceiro' GROUP BY id) AS a ON regions.id = a.id ORDER BY regions.id
Group By Name having sum(money) > 500
ALTER TABLE <your_table> ADD CONSTRAINT TWO_FILLED CHECK(NVL2(F_NAME, 1, 0) + NVL2(L_NAME, 1, 0) + NVL2(BIRTH_DATE, 1, 0) >= 2);
SELECT Top 1 WITH TIES c.CustomerName, SUM(s.SUM) AS TotalSum FROM Customer c JOIN Sales s ON s.CustomerId = c.CustomerId GROUP BY c.CustomerId, c.CustomerName ORDER BY SUM(s.SUM) DESC
SELECT * FROM (SELECT t.*, row_number() over (order by column1 ASC) rnk FROM tableName t) WHERE rnk BETWEEN 10 and 20
SELECT a.username as User_1, b.username as User_2 FROM table_A t JOIN table_B b on b.id = t.id_B JOIN table_B a ON a.id = t.id_A
DELETE TABLE_NAME FROM TABLE_NAME A INNER JOIN FUNCTION_NAME B ON A.PTC_CD = B.PTC_CD OR A.PTC_PTCID = B.PTC_CD
select date, product, price from table t1 where date = (select max(date) from table t2 where t1.product = t2.product)
(SELECT first_column, last_column FROM MyTable WHERE last_column = 'text' ORDER BY first_column LIMIT 80) UNION ALL (SELECT first_column, last_column FROM MyTable WHERE last_column = 'NO text' ORDER BY first_column LIMIT 80);
select key , max( case value-name when 'color' then value else NULL end) as color , max( case value-name when 'heght' then value else NULL end) as height , max( case value-name when 'whatever' then value else NULL end) as whatever from table group by key
WITH AgeOrderedPersons AS ( SELECT usr.* ,ROW_NUMBER() OVER (ORDER BY Age) AS Number FROM Users usr ) SELECT * FROM AgeOrderedPersons WHERE Number = 11
SELECT name_normalized, count(*) as c FROM ( SELECT CASE WHEN FIRSTNAME < LASTNAME THEN FIRSTNAME||LASTNAME ELSE LASTNAME|| FIRSTNAME END as name_normalized FROM names ) X GROUP BY name_normalized
SELECT [1] as 1,[2] as 2,[3] as 3,[4] as 4 FROM ( SELECT top 4 dovizId ,satis FROM tblKur ORDER BY tarih DESC )PivoitData PIVOT ( SUM(satis) for dovizId in ([1],[2],[3],[4]) ) AS Pivoting
SELECT Employee_Table.Full_Name, Left([Full_Name],InStr([Full_Name]," ")-1) AS First_Name, mid([Full_Name],InStr([Full_Name]," ")+1) as Last_Name FROM Employee_Table;
select images.image_id, ... from images inner join favs on images.image_id = favs.image_id inner join users on users.user_id = favs.user_id where users.user_id = [...]
SELECT invoiceId, total FROM invoice WHERE total = (SELECT Round(SUM(unitPrice),2) FROM invoiceLine WHERE invoiceId = 5)
//{@MonthToDate} If {table.paiddate} IN MonthToDate Then {table.revenue} Else 0 //{@YearToDate} If {table.paiddate} IN YearToDate Then {table.revenue} Else 0 //{@OtherPeriodToDate} //no clue what LYTD means; demonstrate a custom-range instead; substitute actual logic for Date(YYYY,MM,DD) If {table.paiddate} IN Date(YYYY,MM,DD) TO Date(YYYY,MM,DD) Then {table.revenue} Else 0
("INSERT INTO network_data (DateTime, Signal, GPSLat, GPSLong, NetLat, NetLong) VALUES (datetime()||' GMT', '" +Signal+ "', '" +GPSLat+ "', '" +GPSLong+ "', '" +NetLat+ "', '" +NetLong+ "');");
$sql = "SELECT * FROM vendor"; $result = mysqli_query($conn, $sql); $resulyArray = array(); if (mysqli_num_rows($result) > 0) { while($row = mysqli_fetch_assoc($result)) { array_push($resulyArray , $row); } } echo"<pre>"; print_r($resulyArray); echo "</pre>";
select p_id, userid, min(the_date) from table group by p_id, userid
SELECT * FROM ( SELECT name AS 'Asset' FROM Table1 WHERE name NOT LIKE '%.%' ) AS A JOIN ( SELECT name AS 'Files' FROM Table1 WHERE name LIKE '%.%' ) AS B ON A.Asset = SUBSTRING(B.Files, 1, INSTR(B.Files, '.') - 1)
select * from @temp where [timestamp] in (select top 4 [timestamp] from @temp order by [TimeStamp])
INSERT INTO SpatialTable (GeogCol1) VALUES (geography::STGeomFromText('POINT(122 47)', 4121));
SELECT m.state, m.landArea FROM Map m LEFT JOIN Map m2 on m2.landArea > m.landArea GROUP BY m.state, m.landArea HAVING count(*) < 5 ORDER BY m.landArea DESC
EXEC sp_MSforeachtable 'DECLARE @Chars VARCHAR(MAX) SELECT @Chars = ISNULL(@Chars + '', '' +COLUMN_NAME, COLUMN_NAME) FROM INFORMATION_SCHEMA.TABLES TAB INNER JOIN INFORMATION_SCHEMA.COLUMNS COL ON TAB.TABLE_NAME = COL.TABLE_NAME AND TAB.TABLE_SCHEMA = COL.TABLE_SCHEMA WHERE TAB.TABLE_NAME =PARSENAME(''?'',1) SELECT ''SELECT ''''newvalue'''' as department, ''+@Chars+'' INTO ? FROM ? WHERE department =''''old_value'''''''
select cast(received as date),status FROM Notification -- or convert(date,received) WHERE project='proj001' GROUP BY cast(received as date),status ORDER BY cast(received as date);
update t1 set (a, b) = (select a,b from t2 where t2.id=t1.id) where t1.id in (select id from t2 where ...);
with offsets(n) as ( select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9 union all select 10 union all select 11 ) select top 5 dateadd(dd, n, cast(getdate() as date)) as dt from offsets where dateadd(dd, n, cast(getdate() as date) not in ( select dt from <exclude_dates> ) order by dt
public <T> T withTransaction( TxCallback<T> closure ) throws Exception { Connection conn = getConnection(); try { boolean autoCommit = conn.getAutoCommit(); conn.setAutoCommit(false); T result = closure.call(conn); // Business code conn.commit(); conn.setAutoCommit(autoCommit); } catch( Exception e ) { conn.rollback(); } finally { conn.close(); } }
SELECT id, summary, status, date_submitted, last_updated, GROUP_CONCAT(value SEPARATOR ',') as values FROM table GROUP BY id, summary, status, date_submitted, last_updated
INSERT INTO userssteps (status,user_id,step_id) select 0, users.id, steps.id from users inner join steps
SELECT * FROM table WHERE column IS NOT DISTINCT FROM var
users('id', 'username', 'password'), posts('id', 'title', 'content', 'slug', 'user_id'), comments('id', 'content', 'date', 'post_id', 'user_id')
SELECT CASE WHEN Sender = 1 THEN Receiver ELSE Sender END `sender/receiver`, MAX(timestamp) time_stamp FROM tableName WHERE 1 IN (Sender, Receiver) GROUP BY CASE WHEN Sender = 1 THEN Receiver ELSE Sender END ORDER BY time_stamp DESC
select TO_CHAR('01-JAN-99', 'mm/dd/yyyy') from dual; --should return the string '01/01/1999' select TO_CHAR('20-APR-15', 'dd/mm') from dual; --should return '04/20'
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY mobileNumber ORDER BY year DESC, month DESC, recordId DESC) rn FROM mytable ) q WHERE rn = 1
-- {0} is your table name -- {1} is your identity value of the reset IF EXISTS (SELECT null FROM sys.identity_columns WHERE OBJECT_NAME(OBJECT_ID) = '{0}' AND last_value IS NOT NULL) DBCC CHECKIDENT ({0}, RESEED, {1});
DELETE FROM detail1 WHERE date < DATETIME('NOW', '-1 hours');
select UnitName, Requisition_No, max(14.11), max(14.141), max(14.144) from your_table group by UnitName, Requisition_No
SELECT DISTINCT ON (extension) start_time, stop_time, extension FROM tbl ORDER BY extension, (stop_time - start_time);
SELECT * FROM Inventory_NBP.v_dmnd_rsrv_dpnd_rqr_mrp WHERE plnt_id ='WA01' and mtrl_id in('G29329-001',CAST(CAST('000000000000909120' AS INT) AS VARCHAR(10)), '13-0006-001') and (mtrl_id, plnt_id) IN ( SELECT itm_cd, sap_plnt_cd FROM PDM_Analysis.v_itm_plnt_extn )
Select column1, column2, 'waiting for table' as dummy_column, column4 from your_table
select * from pos order by ((lat-48.00333)*(lat-48.00333)+(long-11.0)*(long-11.0)+(alt-652)*(alt-652));
update yourtable set locations = 'Mexico' where locations = 'Canada';
select distinct productName,description from ForgeRock;
CREATE VIRTUAL TABLE IF NOT EXISTS User USING FTS4(...)
WITH sorted_data AS ( SELECT ROW_NUMBER() OVER (PARTITION BY item_id ORDER BY item_date DESC) AS row_id, * FROM item_data WHERE item_date <= getDate() ) SELECT * FROM sorted_data WHERE row_id = 1
SELECT users.* FROM users LEFT OUTER JOIN images ON user.usid = images.usid AND images.status = 0 WHERE images.usid IS NULL AND us_status = 0
select * from ( select t2.id2, t1.date, t2.data, row_number() over (partition by t2.data order by t1.date desc) rn from table1 t1 join table2 t2 on t1.id = t2.id2 ) t where rn = 1
if(appDelegate.easymediumhard == 2 && gameVarLevel == 5){ globalScore = timeSeconds; scoreValid = YES; } else { scoreValid = NO; }
select * from test connect by col1 = prior col2 start with col1 = '3R9J' union select * from test connect by prior col1 = col2 start with col1 = '3RDT';
UPDATE a_customer_test SET a_customer_test.town = (SELECT TOP 1 b.town FROM dbo.postcodes b with(nolock) left join a_customer a with(nolock) on SUBSTRING ( b.postcode,1,3) = SUBSTRING ( a.postcode,1,3) WHERE a.postcode IS NOT NULL)
SELECT NOW() - INTERVAL 10329 SECOND
SELECT maker FROM product GROUP BY maker HAVING SUM(CASE WHEN type = 'PC' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN type = 'Laptop' THEN 1 ELSE 0 END) = 0
long millis = calendar.getTimeInMillis();
SELECT USER_ID,FIRST_NAME,LAST_NAME FROM m_user_info WHERE USER_ID IN (select m_groups.GROUP_CREATOR_ID as GROUP_ADMIN from m_groups where m_groups.GROUP_ID='6' union select m_group_admin.GROUP_ADMIN from m_group_admin where m_group_admin .GROUP_ID='6';)
SELECT ColName FROM myTable UNPIVOT ( COLName FOR col IN ( Col1, Col2, Col3, Col4, Col5, Col6 ) ) AS unpvt;
SELECT b.User, p.Period, a.Qty FROM (SELECT User FROM table WHERE Period = 11203) b CROSS JOIN (SELECT DISTINCT Period FROM table WHERE Period BETWEEN 11201 AND 11202) p LEFT JOIN table a ON a.User = b.User AND a.Period = p.Period
SELECT SUM(comission), token, DATE(transdate) FROM t GROUP BY token, DATE(transdate)
select a.* from table1 a left join table1 b on b.otherid = a.otherid and b.type = 5 where a.type = 4 and b.id is null
SELECT url, count(id) as CountOfId FROM ( SELECT distinct id, url FROM yourtable ) x GROUP BY url
$result = mysql_query("SELECT COUNT(`category_id`) as count FROM `products_has_product_category` WHERE `category_id`=1"); $row = mysql_fetch_object($result); $count = $row->count; echo $count;
select stuff(convert(varchar, getdate(), 105), 3, 1, '/') + ' ' + left(convert(varchar, getdate(), 8), 5)
SELECT S.STORE_ID ,S.FK_STORE_ID, C.STORE_ID AS CERTIFICATE_STORE_ID ,C.PERSON_ID ,CERTIFICATE_ID FROM CERTIFICATE C INNER JOIN STORE S ON C.STORE_ID = S.STORE_ID WHERE C.PERSON_ID = 100258 AND (C.STORE_ID = 1464 OR C.FS_STORE_ID = 1464)
DELETE from t1 where t1.ID not in (SELECT ID FROM t2)
select ku.* from INFORMATION_SCHEMA.table_constraints tc INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE ku ON (tc.CONSTRAINT_NAME = ku.CONSTRAINT_NAME and tc.CONSTRAINT_SCHEMA = ku.CONSTRAINT_SCHEMA ) where constraint_type='FOREIGN KEY' and ku.REFERENCED_TABLE_NAME = 'your_table_name'
INSERT INTO books (title, author_id, subject_id, combined) SELECT title, author_id+1, subject_id/2, author_id || ' ' || title FROM book_queue WHERE approved;
SELECT * FROM `message` `t` WHERE `to_user_id`='1' AND `date` = (SELECT MAX(`date`) FROM `message` `t2` WHERE `t2`.`from_user_id`=`t`.`from_user_id` AND `t2`.`request_id`=`t`.`request_id` );
select DateAdded, count(CustID) from Responses WHERE DateAdded >=dateadd(day,datediff(day,0,GetDate())- 7,0) GROUP BY DateAdded
WITH TEMP AS ( SELECT SM.Custnmbr AS Custnmbr, CONVERT (VARCHAR(10), MIN(LH.DateIn), 101) AS DateIn, CONVERT (VARCHAR(10), MAX(ISNULL(LH.DateOut,'9999-12-12')), 101) AS DateOut, FROM dbo.toCustomer SM LEFT OUTER JOIN dbo.toLocCustHist LH ON SM.CustomerId = LH.CustomerId GROUP BY SM.CustNmbr, SM.CustName, LH.LocationId ) SELECT Custnmbr,DateIn, CASE WHEN DateOut='9999-12-12' THEN NULL ELSE DateOut END FROM TEMP;
create function trigger_before_update_on_articles() ... if new.book_id <> old.book_id then update images set book_id = new.book_id where article_id = new.article_id ...
;with q as ( select *, row_number() over (order by id) - row_number() over (order by zoneid, id) as grp from thetable ) select id, sog, zoneid, min (id) over(partition by zoneid, grp) as grp from q order by id
OPTIONS (SKIP=11, errors=12000) LOAD DATA APPEND INTO TABLE abc fields terminated by "," ( year "trim (:year)", mon "trim (:mon)", day "trim (:day)", date1 EXPRESSION "to_date (:year||:mon||:day,'yyyymmdd')" )
INSERT INTO `table` (value1, value2) SELECT 'stuff for value1', 'stuff for value2' FROM `table` WHERE NOT EXISTS (SELECT * FROM `table` WHERE value1='stuff for value1' AND value2='stuff for value2') LIMIT 1
try { Query = "select id,Code,Description,Rate,Bottles,Supply,Empty,Amount,Received, Customer_New.Opening_Date,Customer_New.Clients_Title,Customer_New.Cust_Id from Items INNER JOIN Customer_New on Customer_New.Cust_Id=Items.Cust_Id"; dba = new SQLiteDataAdapter(Query, GlobalVars.conn); testDs = new DataSet(); dba.Fill(testDs, "Items"); ... } catch (Exception ex) { MessageBox.Show(ex.ToString()); }
SELECT * FROM A WHERE NOT EXISTS( SELECT * FROM B WHERE ' '+B.ExecID+' ' LIKE '% '+A.ExecID+' %')
SELECT COUNT(*) FROM TABLE_NAME WHERE DATE_INSERTED NOT BETWEEN '01-JAN-2015 00.00.00.00' AND '18-JAN-2016 00.00.00.00' AND DATE_INSERTED is not null;
UPDATE table SET role = CASE role WHEN 1 THEN 2 ELSE 1 END WHERE role = 1 OR role = 2;
SELECT count(distinct T1.ID) FROM T1 JOIN T2 on T1.ID = T2.ID WHERE T1.Name IS NULL AND T2.Status = 'happy'
insert into realtable select * from temptable where origin = 'import';
CREATE SEQUENCE LD_USER_ROLE_SEQ; INSERT INTO LD_USER_ROLE (USER_ROLE_ID,INS_USER,INS_DATE, USERNAME) VALUES (ld_user_role_seq.nextval, 'sp22',to_date('2003/05/03 21:02:44','yyyy/mm/dd hh24:mi:ss'),'JOHN BARRY', )
delete from [tbl] output deleted.* WHERE [id] > 6
#tempPriority(ID | OldPriority | NewPriority)
SELECT value FROM records ORDER BY value DESC LIMIT 2
FROM dbo.Activities act INNER JOIN ConvertCodeListToTbl(@Codes) i ON (act.ActivityCode = i.code OR @Codes = '')
select lge.emp_num, lge.emp_lname, lge.emp_fname, lgs1.sal_from, lgs1.sal_amount from ( select emp_num, max(sal_from) maxDate from lgsalary_history group by emp_num ) lgs2 join lgsalary_history lgs1 on lgs1.emp_num = lgs2.emp_num and lgs1.sal_from = lgs2.maxDate join lgemployee lge on lgs1.emp_num = lge.emp_num where lge.dept_num in ('300') order by lgs1.sal_amount desc
SELECT transaction_date, transaction_type, SUM(transaction_amount) FROM TableName -- WHERE customer_id = $customer_id GROUP BY transaction_date, CASE WHEN transaction_type = 'refund' THEN 1 ELSE RAND() END ORDER BY transaction_date DESC
update table2 join table1 on (table1.FEE, table1.FAI) = (table2.FEE, table2.FAI) set table2.id = table1.id
CREATE VIEW top_specialty_doctors AS SELECT DISTINCT ON (specialty) salary, name, specialty FROM doctor WHERE specialty IN ('family and community', 'psychiatry', 'Rheumatology') ORDER BY specialty, salary DESC, doc_number -- as tiebreaker
SELECT osuser, machine, NVL(DECODE (process, '1234', 'JDBC', substr(process, 1, instr(process || '@','@')-1)), 'NA') "PID" FROM v$session WHERE username IS NOT NULL;
UPDATE tbluser SET DateField = DATEADD(ss,numOfSeconds,DateField)
SELECT COUNT(*) FROM table_name;
select NAME from name UNION select NAME from name_old;
SELECT t.* FROM ( SELECT @lim := 2, @cg := '' ) vars, (select * from Table1 order by product,amount, make) t WHERE CASE WHEN @cg <> product THEN @r := @lim ELSE 1 END > 0 AND (@r := @r - 1) >= 0 AND (@cg := product) IS NOT NULL ORDER BY product,amount, make
using AutoMapper; //Create Map from Person to RegisteredPerson Mapper.CreateMap<Person, RegisteredPerson>(); //Load person from Database Person p = context.Persons.SingleOrDefault(predicate); //Map Person to RegisteredPerson RegisteredPerson r = Mapper.Map<Person, RegisteredPerson>(p); //Assign values to RegisteredPerson r.ProxyId = SomeValue; using (var context = new YourContext()) { context.Persons.Attach(r); context.SaveChanges(); } //Load new RegisteredPerson using (var context = new YourContext()) { RegisteredPerson rp = context.Persons.OfType<RegisteredPerson>().SingleOrDefault(predicate); }
select min(id) as id, col1, col2 from Tablex group by col1, col2
select * from your_table where @input between _begin and _end
SELECT `title` FROM `xyz` GROUP BY `year` , `title` ORDER BY `title
select row_number() over (partition by Meal order by Time) , * from YourTable
SELECT CAST(SUM(IF(create_month = MONTH(NOW() - INTERVAL 1 MONTH) AND create_year = YEAR(NOW() - INTERVAL 1 MONTH), 1, 0)) AS NUMERIC) AS lastmonth, CAST(SUM(IF(create_month = MONTH(NOW() - INTERVAL 2 MONTH) AND create_year = YEAR(NOW() - INTERVAL 2 MONTH), 1, 0)) AS NUMERIC) AS lastmonth2 FROM incident_view WHERE customer_company_name = "Company"
select col1, .... , case col5 when 0 then ... when 1 then ... , col6, .... Where ...
tags (id, userid, tag)
select firstname,lastname from table1 (nolock) left outer join table2 on table1.ID=table2.ID where isnull(billingaddress, shippingaddress) like 'Lake street'
SELECT REPLACE(REF_NO1,REF_NO2,'') as diff from mytable
SELECT c.Country, o.ExRate, (SELECT ExRate FROM exRates WHERE `From` = 'EUR' ) AS EUR FROM country c INNER JOIN exRates o ON c.country = o.country
SELECT o.OrderID As [Order Number], l.Name As Location , o.OrderDate As [Date Ordered], SUM(i.Cost) As [Order Total] FROM [Order] o INNER JOIN Office_Locations l on l.id = o.LocationID INNER JOIN OrderedItems oi on oi.OrderID = o.OrderID INNER JOIN OrderItem i ON i.ItemID = oi.ItemID GROUP BY o.OrderID, l.Name, o.OrderDate
SELECT r.name, r.network, r.namestring, i.name, r.rid, i.id, d.dtime, d.ifInOctets FROM router AS r INNER JOIN interface AS i ON r.rid = i.rid INNER JOIN 1278993600_1_60 AS d ON i.id = d.id AND d.dtime BETWEEN 1279027200 AND 1279029000 WHERE r.network = "ITPN" AND i.status = "active" AND i.id BETWEEN 1418 AND 1518
SELECT id, ref, DATEDIFF(day, MIN(date), MAX(date)) / NULLIF(COUNT(*) - 1, 0) FROM mytable GROUP BY id, ref
SELECT u.name FROM friends f JOIN users s ON (u.id = f.user_id_2) WHERE f.user_id_2 = 1234
SELECT GROUP_CONCAT((case when senderid = 1 then recid else senderid end) SEPARATOR ', ' ) AS trans FROM test WHERE senderid = 1 or recid = 1 ;
select * from customer_appdata c1 where appdata_id in (11,12) and exists ( select 1 from customer_appdata c2 where c2.appdata_id in (11,12) and c2.appdata_id <> c1.appdata_id and c2.customer_id = c1.customer_id )
CREATE OR REPLACE FUNCTION cs_get(_tbl_type anyelement, _colname text) RETURNS SETOF anyelement AS ...
SELECT * FROM foo WHERE DAYOFWEEK(bar) = 2
SELECT ... FROM <table> AS OF TIMESTAMP TO_TIMESTAMP('12-FEB-2010 10.55.00.000000');
Persons(id int, name varchar(40)...) Tags(id int, name varchar(40)....) PersonTags(id int, personid FOREIGN KEY References Persons(id), TagId FOREIGN KEY references Tags(id))
CREATE TRIGGER addCardForNewUser AFTER INSERT ON swiped.Users FOR EACH ROW BEGIN INSERT INTO swiped.Card (userid) VALUES (new.userid); END
SELECT P.productId, P.name FROM product AS P WHERE 2 = (SELECT COUNT(*) FROM product_option AS PO INNER JOIN option AS O ON PO.optionId = O.optionId AND PO.productId = P.productId AND O.name IN ('value1', 'value2'));
;WITH ranked AS ( SELECT *, rownum = ROW_NUMBER() OVER (PARTITION BY ClientID ORDER BY BillingDate DESC) FROM Billings ) SELECT ClaimID, ClientID, BillingDate FROM ranked WHERE BillingDate > @CutOffDate OR rownum BETWEEN 1 AND 3
Table artists ---- id (primary key), name description years_active otherinfo (whatever you need) Table albums ---- id (primary key) artistid (foreign key to artists table) name, releasedate genreid (foreign key to genres table) picture Table tracks ---- id (primary key) albumid (foreign key to albums table) name override_artist (overrides album artist if not null) playtime lyric otherstuff as needed Table genres ---- id (primary key) name description
WITH C AS ( SELECT T.id, T.name, T.pid FROM @tblPagePath AS T WHERE T.id = 3 UNION ALL SELECT T.id, T.name, T.pid FROM @tblPagePath AS T INNER JOIN C ON C.pid = T.id ) SELECT * FROM C --WHERE C.id <> 3
delete from t using ( select sensor_id, date_trunc('minute', "timestamp") as "minute", min((extract(epoch from "timestamp") / 12)::integer * 12) as "epoch" from t group by sensor_id, 2 ) s where sensor_id = s.sensor_id and date_trunc('minute', "timestamp") = s.minute and extract(epoch from "timestamp") / 12)::integer * 12 != s.epoch
select teamId from Player_Team where PlayerId in (P1_Id,P2_ID,P3_ID,P4_ID) group by teamId having count(PlayerId) = 4
DELETE FROM tbl WHERE tbl.id IN (WITH X AS (), Y AS (), Z AS () SELECT id FROM TBL WHERE TBL.ID IN (SELECT ID FROM Z));
declare @S varchar(100) = 'abc|123|test' declare @Name varchar(10) declare @Phone varchar(10) declare @Comment varchar(10) select @Name = X.value('x[1]', 'varchar(10)'), @Phone = X.value('x[2]', 'varchar(10)'), @Comment = X.value('x[3]', 'varchar(10)') from (select cast('<x>'+replace(@S, '|', '</x><x>')+'</x>' as xml)) as T(X) select @Name, @Phone, @Comment
SELECT Total FROM Table A ORDER BY CAST(Total AS FLOAT) ASC
class Country(models.Model): name = models.CharField(max_length=64) iso_code = models.CharField(max_length=2) users = models.ManyToManyField("auth.User") class MyModel(models.Model): country = models.ForeignKey(Country) ... MyModel.objects.filter(country__users=current_user)
for select id,date,particular from TABLE_NAME into :id, :date, :particular do begin suspend; end particular = null; for select id,date,payor from TABLE_NAME into :id, :date, :payor do begin suspend; end
SELECT Students.StudentID, Students.StudentName, Avg(Grades.Grade) AS StudentGradeAverage, qGradeAverage.OverallGradeAverage FROM qGradeAverage, Grades INNER JOIN Students ON Grades.StudentID = Students.StudentID GROUP BY Students.StudentID, Students.StudentName, qGradeAverage.OverallGradeAverage;
@Entity @Table(schema="SCHEMA", name="TABLE1") public class Table1Class { ... }
CASE WHEN 1 IN (1a,1b,1c,1d) THEN 1 ELSE 0 END As IsDealerType1
SQLFiddle demo select created,Previous_created, IF(tsd<>0,SEC_TO_TIME(tsd),0) as diff from ( select created, IF(@prev<>0,TIMESTAMPDIFF(second, @prev,created),0) tsd, @prev Previous_created, @prev:=created f2 from orders,(select @prev:=0) t1 WHERE created >= '2012-06-01' order by created ) t2 order by tsd desc limit 100
select cust_id, indicator, date, max(case when indicator = 'y' then date end) over (partition by cust_id order by date) as NewCol from table t;
create trigger albums_ins_trig on albums instead of insert as begin -- update albums which already exist and are being inserted again update albums set IsDeleted=0 where IsDeleted=1 and exists (select * from inserted where albums.name=inserted.name) -- insert new albums insert into albums select * from inserted where not exists (select * from albums where albums.id=inserted.id) end
SELECT stab.Name, COUNT(si.ID) FROM SurveyTable as stab INNER JOIN SurveyInfo si ON si.SurveyId = stab.SurveyId GROUP BY stab.Name
SELECT COUNT(*) FROM ( --your current query here ) WHERE `id`=9 GROUP BY `id`
SELECT a.names NAME, b.names DUPE_NAME, COUNT(*) NUM_DUPES FROM names_tbl a, names_tbl b, md5_tbl md5a, md5_tbl md5b WHERE a.id < b.id AND a.id = md5a.id AND b.id = md5b.id AND md5a.md5 = md5b.md5 GROUP BY a.names, b.names ORDER BY a.names
SQL> SELECT a.* 2 FROM dual a 3 JOIN (SELECT * FROM dual WHERE 1=1) b 4 ON (1=1); D - X SQL> quit Disconnected from Oracle9i Enterprise Edition Release 9.2.0.8.0 - Production With the OLAP and Oracle Data Mining options JServer Release 9.2.0.8.0 - Production
SELECT NVL(T8.COLLECTION_BALANCE_AMT, 0) FROM BV_COLLECTION_CLAIM T8 LEFT JOIN BV_CLAIM_LIABLE_INDV T2 -- here! ON T8.CLAIM_ID = T2.CLAIM_ID LEFT JOIN BV_CLAIM_RECOVERY T3 -- here too! ON T8.CLAIM_ID = T3.CLAIM_ID
declare @TblHoliday table (StrDate date, EndDate date) insert @TblHoliday values ('2016-03-26', '2016-03-26'), ('2016-04-07', '2016-04-09') -- Build a tally table using date range from the data ;with cte as ( select min(StrDate) as value, max(EndDate) as maxvalue from @TblHoliday union all select dateadd(day, 1, value), maxvalue from cte where dateadd(day, 1, value) <= maxvalue ) select value from cte -- filter out the dates where exists(select * from @TblHoliday where value between StrDate and EndDate) option(maxrecursion 0)
While (v_counter <= :v_total) do begin If (NOT <condition>) then BEGIN ... END end
select a.* from addressbook a left outer join users u on a.phone = u.phone1 where (u.phone1 is null)
SELECT * FROM employees START WITH employee_id = 123 CONNECT BY PRIOR employee_id = manager_id
SELECT Name FROM ( SELECT 'All' as Name UNION SELECT DISTINCT Manager FROM IS_Projects ) T ORDER BY CASE Name WHEN 'All' THEN 0 ELSE 1 END, Name
ORDER BY Year, CASE Month WHEN 'Jan' THEN 1 WHEN 'Feb' THEN 2 .... END
HAVING COUNT(*) > 1
WHERE [Last Call Back] = (SELECT MAX([Last Call Back]) FROM table_where_last_call_back_column_is)
INSERT INTO totals (id_gamer, name_gamer, total_points) SELECT p.id, p.name, IFNULL(SUM(g.points), 0) FROM players AS p LEFT JOIN games AS g ON p.id = g.id_gamer GROUP BY p.id
-- MERGE statement with the join conditions specified correctly. USE tempdb; GO BEGIN TRAN; MERGE Target AS T USING Source AS S ON (T.EmployeeID = S.EmployeeID) WHEN NOT MATCHED BY TARGET AND S.EmployeeName LIKE 'S%' THEN INSERT(EmployeeID, EmployeeName) VALUES(S.EmployeeID, S.EmployeeName) WHEN MATCHED THEN UPDATE SET T.EmployeeName = S.EmployeeName WHEN NOT MATCHED BY SOURCE AND T.EmployeeName LIKE 'S%' THEN DELETE OUTPUT $action, inserted.*, deleted.*; ROLLBACK TRAN; GO
SELECT * FROM mytable WHERE id NOT IN ( SELECT id FROM mytable GROUP BY id HAVING COUNT(*) > 1 ) AND time_created < current_timestamp - 1 month
SELECT tahminler.match_id, tahminler.tahmin_text,matches_of_comments.match_id FROM tahminler INNER JOIN matches_of_comments ON tahminler.match_id = matches_of_comments.match_id WHERE ( MONTH(STR_TO_DATE(matches_of_comments.match_date , '%m/%d/%Y'))= '07'//month variable AND YEAR(STR_TO_DATE(matches_of_comments.match_date , '%m/%d/%Y'))= '2013'//year variable ) AND tahminler.user_id =12
UPDATE b SET ComponentItemID = dbo.GetNewItemID(ComponentItemID) FROM BillOfMaterials b INNER JOIN Items I on I.ItemID = b.ComponentItemID WHERE i.ItemCategory = 1
SELECT names, subjects, SUM( CASE WHEN name_of_exam = 'First Weekly Test' THEN (score/full_marks)*20 WHEN name_of_exam = 'First Unit Exam' THEN (score/full_marks)*30 WHEN name_of_exam = 'Final Unit Exam' THEN (score/full_marks)*50 END) AS scored FROM marksheet GROUP BY names, subjects
insert into tblTemp (a, b) select a + offset, b from tblTemp2 cross join (SELECT 0 AS offset UNION ALL SELECT 1 UNION ALL SELECT 2) foo
SELECT DISTINCT col_name::date FROM table_name
SELECT COUNT(*) FROM table WHERE id = my_value
declare @QuestionInclude varchar(10), @stmt nvarchar(max), @params nvarchar(max) select @stmt = 'select @QuestionInclude = 1 from ##Stg_Prelim' select @params = '@QuestionInclude varchar(10) output' exec sp_executesql @stmt = @stmt, @params = @params, @QuestionInclude = @QuestionInclude output
var myAwesomeCursor = Inventories.find(/* selector */, { transform: function (doc) { _.each(doc.beverages, function (bev) { // use whatever method you want to receive these data, // possibly from some cache or even another collection // bev.fillTo = ... // bev.orderWhen = ... // bev.startUnits = ... } } });
SELECT * FROM Products p WHERE NOT EXISTS (SELECT * FROM Images i WHERE i.ProductId=p.ProductId)
SELECT p.id, p.name, COUNT(c.id) AS children_count FROM parent p LEFT JOIN children c ON p.id = c.parent GROUP BY p.id
R> library(RPostgreSQL) Loading required package: DBI R> drv <- dbDriver("PostgreSQL") R> con <- dbConnect(drv, password="....", dbname="beancounter") R> system.time(res <- dbGetQuery(con, +> "select * from fxprices where date >= '2005-01-01' limit 1000")) user system elapsed 0.030 0.000 0.113 R> dim(res) [1] 1000 8 R>
SELECT r.id, r.name, r.room_category_id, r.status, r.capacity, r.capacity - IFNULL(COUNT(res.id), 0) AS beds_available FROM room AS r LEFT JOIN reservation_room as rr ON rr.room_id = r.id LEFT JOIN reservation as res ON res.id = rr.reservation_id AND @range_start < res.end AND @range_end > res.start GROUP BY r.id
insert into table1 (Column1, Column2) select Column1, Column2 from table2
select coalesce(l.name, c.name) from cds c left join languages l on l.cd_id = c.id and l.language = 'de';
declare @files table ( db_name sysname, physical_name nvarchar(260) ) insert into @files exec sp_MSforeachdb 'select "?", physical_name from ?.sys.database_files' select db_name, physical_name from @files
SELECT SUPPNAME AS "Supplier Name", ( CASE WHEN STREET IS NULL THEN '' ELSE STREET || ', ' END || CASE WHEN TOWN IS NULL THEN '' ELSE TOWN || ', ' END || CASE WHEN COUNTY IS NULL THEN '' ELSE COUNTY || ', ' END || CASE WHEN POSTCODE IS NULL THEN '' ELSE POSTCODE END ) AS "Supplier Address" FROM SUPPLIERS
SELECT uName, COUNT(uId), MIN(PassDate) FROM UserDetails INNER JOIN PassDates ON PassDates.fkUser = uId GROUP BY uName, uId
CREATE TYPE col_sub_type IS TABLE OF VARCHAR2(50);
select movie.title, actor.name from movie inner join casting on movie.id = casting.movieid and casting.ord = 1 --Assuming this is the cast order flag inner join actor on casting.actorid = actor.id where movie.id in ( select movie.id from movie inner join casting on movie.id = casting.movieid and casting.actorid = {your actorID in this case Julie Andrew's id )
SELECT * FROM yourtable AS OF TIMESTAMP TO_TIMESTAMP('2004-04-04 09:30:00', 'YYYY-MM-DD HH:MI:SS');
SELECT * FROM tbl t WHERE MOD(DAYOFYEAR(currdate) - DAYOFYEAR(t.the_date) + 365, 365) <= 14 OR MOD(DAYOFYEAR(t.the_date) - DAYOFYEAR(currdate) + 365, 365) <= 14
UPDATE PersonalInfo SET Address = 'US' WHERE ID = (SELECT MAX(Id) FROM PersonalInfo WHERE Name = 'John' AND Address = 'UK' )
DECLARE @T1 TABLE (Title varchar(50), NewID int) INSERT INTO compositeTable (Title, date1, TextContent) OUTPUT inserted.Title, Inserted.ID INTO @T1 SELECT compositeTable (Title, date1, TextContent) FROM origArticleTable insert into ArticleMeta (compositeID, ArticleID, hasVideo, hasImage, author, date2) SELECT T1.ID, o.compositeID, o.ArticleID, o.hasVideo, o.hasImage, o.author, o.date2 FROM @T1 T1 INNER JOIN origArticleTable o ON T1.Title = o.Title
SELECT u_joinee.fb_id joinee_fb_id ,u_referer.fb_id referer_fb_id, u_joinee.name joinee_name, u_referer.name referer_name FROM users AS u_joinee LEFT JOIN referral AS r ON r.joinee = u_joinee.fb_id LEFT JOIN users AS u_referer ON r.referred_by = u_referer.fb_id
SELECT MIN(id), LABEL FROM table GROUP BY LABEL ORDER BY MIN(id)
INSERT INTO LOST_CUSTOMERS (CUST_NUM, CUST_NAME, STATUS) SELECT CUST_NUM, CUST_NAME, 'Cancelled' FROM CUSTOMERS WHERE END_DATE < now()
select ssn, name from YourTable a where organisation = 'Finance' and exists ( select * from YourTable b where organisation = 'IT' and a.ssn = b.ssn and a.name <> b.name )
select * from people p join ( select _id from people join offices on people.office = offices._id and offices.name = 'Beadle County' UNION select _id from people join specialtyareas on people.specialty_area_1 = specialtyareas._id and specialtyareas.name='Customer Service' ) as MatchingPeople on MatchingPeople._id = p._id
WITH sciezka AS ( (something) ) SELECT TOP 1 @ciag= miasta, @ciag2= odleglosci FROM sciezka WHERE ID_konca=@koniec;
element Things { for $thing in /Things/Thing let $name := local-name(($thing/*)[1]) order by $name return $thing }
SELECT T.DistrictName, T.TownName, T.CropName, avg(T.pest) FROM ( SELECT DistrictName, TownName, CropName, cast(Pests as float) as pest FROM [dw_staging].[dbo].[StagingTable] ) as T group by T.DistrictName, T.TownName, T.CropName GO
SELECT TableA.A1 - TableB.A1 AS A1, TableA.B1 - TableB.B1 AS B1 FROM TableA, TableB
delete t from table t join (select product, count(*) as cnt from table group by product ) tt on tt.product = t.product where tt.cnt > 1 and t.product_type = 'house';
alter system set db_create_file_dest = '/path/to/new/location';
SELECT * FROM pay_invoice_list p LEFT outer JOIN paimentDetl d ON p.invoice_no = d.invoiceNo WHERE p.invoice_no LIKE ' %$temp%' ORDER BY iid DESC
SELECT status FROM all_objects WHERE object_name = 'MYFUNCTIONNAME' AND object_type = 'FUNCTION';
where (upper(Company)=upper(@CompName) or @compName = 'ALL COMPANIES') and (OfficeID=@CompBranchId or @CompBranchId = 'ALL OFFICES') and (StateID=@StateID or @StateID = 'ALL States')
SELECT id, (CASE WHEN id=1 THEN 200 ELSE 100 END) AS NewCol ... FROM Table
GRANT select,insert,update,delete ON [MyDB].[dbo].[t1] TO [MyUser] GO GRANT select,insert,update,delete ON [MyDB].[dbo].[t2] TO [MyUser] GO GRANT select,insert,update,delete ON [MyDB].[dbo].[t3] TO [MyUser] GO GRANT select,insert,update,delete ON [MyDB].[dbo].[t4] TO [MyUser]
select q.Question_ID, q.Answer, count(*) as Total, count(*) * 100 / (select count(*) from questions as t where t.Question_ID = @question_id) as [Percentage] from questions as q where q.Question_ID= @question_id group by q.Question_ID, q.Answer
SELECT a.* FROM foo a INNER JOIN ( SELECT aaa, bbb, MAX(ccc) maxC FROM foo GROUP BY aaa, bbb ) b ON a.aaa = b.aaa AND a.ccc = b.maxC AND a.bbb = b.bbb
Get the results you're after in a select. SELECT EMP_ID, max(name), max(Dept), max(cat) FROM tableName GROUP BY EMPI_ID
select name, week, avg(parameter1), avg(parameter2) from data where week in ('29','30','31','32') group by name, week order by name
empid dept sal c emp001 d001 10000 3 emp004 d001 10000 3 emp002 d001 10000 3 emp006 d003 5000 2 emp005 d003 5000 2 emp003 d002 20000 1
declare @g geography = geography::STPointFromText( 'POINT(55.9523783996701 -3.2051030639559)', 4326 ).STBuffer(5); select * from dbo.yourTable where gCol.STIntersects(@g) = 1
var param = new DynamicParameters(); param.Add(name: "IinsValue", value: value, direction: ParameterDirection.Input); param.Add(name: "Id", dbType: DbType.Int32, direction: ParameterDirection.Output); param.Add(name: "Value", dbType: DbType.String, direction: ParameterDirection.Output); Connection.Execute("INSERT INTO Table(Id, Value) Values(1, :value) returning Id,Values into :id, :value", param ); var Id = param.get<int>("Id"); var Val = param.get<String>("Value");
SELECT S.*, R.* FROM Shipment S FULL JOIN Receipt R ON S.[SHIPMENT NO] = R.[SHIPMENT NO] AND S.[PART NO] = R.[PART NO]
SQL> show timing timing OFF SQL> -- save parameters into an os file SQL> store set param.sql create Created file param.sql SQL> -- run script SQL> SET TIMING ON SQL> show timing timing ON SQL> -- reset state SQL> @param.sql SQL> show timing timing OFF
select student_id, ntile(100) over (order by grade desc) from student
select id, max(result) <> 0 as [result2] from ( select id, sum(iif(a=b, 1,0)) > 0 as [result] from [table] group by id, a ) group by id
SELECT Name , Address , CASE WHEN REHIRE_DATE IS NULL THEN HIRE_DATE ELSE REHIRE_DATE END FROM Employee
SELECT LEFT(ColumnName,PATINDEX('%[^0-9]%', ColumnName+'a')-1) FROM TABLE
SELECT A.clientid, A.profileid, B.zone_ID, C.zone_name FROM tblad_clicks A INNER JOIN tblprofiles B ON A.profileid = B.profileid INNER JOIN tblzones C ON B.zone_id = C.zoneid WHERE A.profileid > 0;
INSERT INTO destinationTable (risposta, data_ins) SELECT STATUS risposta, DATETIME('now') data_ins FROM sourceTable
SELECT `price` FROM flight WHERE `source1` = 'delhi' AND `dest` = 'Bangkok' ORDER BY `price` ASC LIMIT 1
SELECT name, CAST(ADRESS1 AS VARCHAR(20)) + CAST(ADRESS2 AS VARCHAR(20)) AS columnz from table1
SELECT user.name, user.address, user.comment FROM user UNION ALL SELECT user_alias.alias, user.address, user.comment FROM user INNER JOIN user_alias on user.name = user_alias.name ORDER BY name
SELECT [Name], MAX(Col1) Col1, MAX(Col2) Col2, MAX(Col3) Col3, MAX(Col4) Col4, MAX(Col5) Col5 FROM #Temp GROUP BY [Name]
select c.maxid as chatID,d.from_user,d.to_user,c.convo_id,d.message from tblchat d inner join (select max(b.id) as maxID,b.convo_id from tblconv a inner join tblchat b on a.convo_id=b.convo_id group by b.convo_id) c on c.maxID=d.id
SELECT * FROM (yourquery) GROUP BY producer
SELECT ISNULL(SUM(mt.number), 0) AS number, mc.c_date FROM my_calendar mc LEFT JOIN my_table mt ON mt.c_date = mc.c_date WHERE mc.c_date between '11/6/2012' AND '11/12/2012' GROUP BY mc.c_date ORDER BY mc.c_date DESC
MERGE INTO swap USING (SELECT id FROM student WHERE number = '123' and id is not null) stu on (stu.id = swap.id) WHEN MATCHED THEN UPDATE SET swapped = 1, last_swap = sysdate WHEN NOT MATCHED THEN INSERT (student_id, swapped, last_swap) VALUES (stu.id , 1, sysdate);
SELECT * FROM `course` `c` INNER JOIN `section` `even` ON `c`.`course_id` = `even`.`course_id` INNER JOIN `section` `odd` ON `c`.`course_id` = `odd`.`course_id` WHERE `even`.`semester` % 2 = 0 AND `odd`.`semester` % 2 = 1;
SELECT p.PersonKey, pf.Description as 'MissingFieldDescription' FROM Person p, PersonField pf WHERE pf.PersonFieldKey NOT IN (select PersonFieldKey FROM PersonFieldValue WHERE PersonKey = p.PersonKey) AND (pf.IsRequired = 1 or pf.IsLateRequirement = 1)
SELECT (t2.function_row).id, (t2.function_row).cost FROM (SELECT _tmp_myfunction(t.id) as function_row FROM transactions t ) t2;
SELECT customer_id, MAX(time) FROM table_name GROUP BY customer_id ORDER BY MAX(time) DESC
SELECT P.pid FROM (select distinct Pi.pid, M.Director from Production Pi INNER JOIN Movie M ON Pi.mid = M.mid) P GROUP BY P.pid HAVING sum(case when P.Director in ('Ben Affleck', 'Peter Jackson') then 1 else 99 end) = 2
$admins = User::where('role_id', '=', 1);
SELECT product.product_name, GROUP_CONCAT(provider.provider_name SEPARATOR '/') FROM product, provider, provider_product WHERE product.id_product = provider_product.ref_product AND provider.id_provider = provider_product.ref_provider GROUP BY product.product_name
for(ParseObject vegetable : ob){ Log.d("TAG", "price: " + vegetable.getDouble("price")) }
SELECT g.*, ht.name, ht.tid, at.name, at.tid, ht.league FROM games g JOIN team_games htg ON htg.gid = g.gid AND htg.homeoraway = 1 JOIN team ht ON ht.tid = htg.tid JOIN team_games atg ON atg.gid = g.gid AND atg.homeoraway = 0 JOIN team at ON at.tid = atg.tid
SELECT COUNT(item_table.id_category) as total, category_table.name FROM category_table INNER JOIN item_table ON item_table.id_category = category_table.id_category GROUP BY id_category
select id, (select count(*) from T where DATE(startTime)=DATE(T1.startTime) AND StartTime<T1.StartTime ) as CountNumIDsBeforeThisIDOnSameDay, (select count(*) from T where DATE(startTime)=DATE(T1.startTime) AND EndTime<T1.StartTime ) as CountNumIDsThatEndedBeforeThisIDOnSameDay from T as T1 Order by StartTime
CONSTRAINT my_contraint_name UNIQUE ([userID], [data])
UPDATE table_a a INNER JOIN table_b b ON a.id = b.rel_id INNER JOIN table_c c ON a.id = c.rel_id SET a.date = b.date, a.valid = c.valid
IF (MONTH(GETDATE()-1) = MONTH(GETDATE())) BEGIN /* DO something here */ END ELSE BEGIN /* Else do something here*/ END
SELECT * FROM table1 ORDER BY CASE WHEN col2>=100 THEN 1 ELSE 0 END, col1, col2
SELECT Job.Job FROM Job LEFT JOIN Jobs ON Job.ID = Jobs.JobID WHERE Jobs.DepartmentID IS NULL;
SELECT O.EMP_ID FROM ORDERS O GROUP BY O.EMP_ID HAVING COUNT(distinct O.ITEM_ID) <> COUNT(*)
SELECT x,y,z FROM t WHERE Date(added)=Curdate()
select rel.id, rel.type, p1.id, p1.name, p2.id, p2.name from relation rel , person p1 , person p2 where rel.person1 = p1.id and rel.person2 = p2.id
UPDATE A SET A.[ResponseLetterSent] = 1 FROM [LenqReloaded].[dbo].[Enquiry] A WHERE A.[ResponseLetterSent] IS NULL AND EXISTS ( SELECT * FROM [LenqReloaded].[dbo].[Attachment] B WHERE A.[EnquiryID] = B.[EnquiryID] )
select s.site_id, count(*) as totalhits from sites s join hits h on s.site_id = h.site_id group by s.site_id
with cte as ( select *, row_number() over(order by id) as rn1, row_number() over(partition by status order by id) as rn2 from Table1 ) select id, status, dense_rank() over(order by rn1 - rn2) as status_index from cte order by id
Update [MM].[dbo].[Star] SET [Query Name]= SUBSTRING([File Name], LEN([File Name]) - CHARINDEX('\', REVERSE([File Name])) + 2, CHARINDEX('\', REVERSE([File Name])) - CHARINDEX(' ', REVERSE([File Name])) - 1)
-- Value from DB1 declare @B1 as int -- Value from DB2 declare @B2 as int -- Get value from DB1 select @B1 = Val from DB1.dbo.TBL1.Val where ID = 1 -- Get value from DB2 select @B2 = Val from DB2.dbo.TBL2.Val where ID = 1 -- Update value in DB1 update DB1.dbo.TBL1 set Val = @B2 where ID = 1 -- Update value in DB2 update DB2.dbo.TBL2 set Val = @B1 where ID = 1
UPDATE m SET m.flgType = f.FlagCategory FROM main_table m JOIN emp_flagdetails fd ON fd.ecode = m.emp_no JOIN flag_table f ON f.FlagType = fd.flag;
select "Id", case "Id" when 3 then 'foo' else 'bar' end AS "Results" from ( select TABLEA.SomeIDNumber AS "Id", from TABLEA );
select price from tabel1 union all select price from tabel2
select columnName from tableName order by convert(int, right(columnName, 5)) desc
update yourtable y join ( select id, scott, @prevNumericId:= if(scott REGEXP '^[0-9]+$', scott, @prevNumericId) prevNumericId from yourtable, (select @prevNumericId:=0) t order by id ) t on y.id = t.id and y.scott = t.scott set y.scott = concat(t.prevNumericId,y.scott) where y.scott not REGEXP '^[0-9]+$'
select b.name, count(db.DocumentArtifactID) as documents, -- count only completed count(case when d.Testcompleted = 1 then d.ArtifactID end) as reviewed, -- if the minimum = 1 there's no 0 or NULL case when min(cast(Testcompleted as tinyint)) = 1 then 'yes' else 'no' end as completed from #Batch b left join #DocumentBatch db on db.BatchArtifactID = b.ArtifactID left join #Document d on db.DocumentArtifactID = d.ArtifactID group by b.name;
select productId, sum(case when salesdate >= dateadd(month, -1, getdate()) then quantitysold else 0 end) as qs1m, sum(case when salesdate >= dateadd(month, -3, getdate()) then quantitysold else 0 end) as qs3m sum(case when salesdate >= dateadd(month, -12, getdate()) then quantitysold else 0 end) as qs12m from table t group by productId;
SELECT users.id as user_id, SUM(purchases.quantity) as quantity FROM users LEFT JOIN purchases ON (users.id=purchases.user_id) AND (purchases.state_id = 10) GROUP BY users.id ORDER BY quantity DESC
select order_number, dr_amount, dr_speed, oi_amount, oi_up from data where order_number in (select order_number from data where oi_amount IS NOT NULL group by order_number having count(*) < 2 ) and dr_amount is not null;
SELECT d.* FROM data d INNER JOIN data_tag ON data_tag.data = d.id AND (tag = 2136 OR tag = 8) WHERE d.category = 3 GROUP BY d.id HAVING COUNT(data_tag.id) >= 2 ORDER BY id ASC
SELECT column_name, CASE WHEN COLUMN_KEY = 'PRI' THEN 'y' ELSE 'n' END AS result FROM information_schema.columns WHERE table_schema = DATABASE() AND `table_name` = 'tab' -- table name ORDER BY `table_name`, ordinal_position
select row_number() over (order by BookId) - 1 as BookId, BookTitle from books b;
SELECT c_unit_code, COUNT(case when YOUR_CONDITIONS_FOR_ADVICE_EXPORT then 1 end) AS ADVICE_EXPORT, COUNT(case when YOUR_CONDITIONS_FOR_CONFIRMATION_EXPORT then 1 end) AS CONFIRMATION_EXPORT, COUNT(case when YOUR_CONDITIONS_FOR_ISSUANCE_STANDBY then 1 end) AS ISSUANCE_STANDBY FROM EXIMTRX.EPLC_MASTER GROUP BY c_unit_code
select ao.name,ao.type_desc,delete_referential_action_desc,* from sys.foreign_keys fk inner join sys.all_objects ao on fk.parent_object_id = ao.object_id where delete_referential_action_desc <> 'CASCADE'
with t1 as (select col1, row_number() over (order by col1) rn from tbl1 ), t2 as (select col2,col3, row_number() over (order by col2) rn from tbl2), t3 as ( select col4,col5, row_number() over (order by col4) rn from tbl3) select t1.col1,t2.col2,t2.col3,t3.col4,t3.col5 from t1 full outer join t2 on t1.rn = t2.rn t3 full outerjoin t2 on t2.rn = t3.rn
--update cats to felines Update "mammal attribute table" set AttributeID = 456 where AttributeID=234 go --delete cat attribute delete from attributetable where AttributeID=234 go --delete duplicate feline attribute delete from "mammal attribute table" where mammalattributeid in( select max(mammalattributeid) from "mammal attribute table" group by mammalid,attributeid having count(*)>1)
select c.firstname, c.lastname, concat(c.firstname, ' ', c.lastname) as fullname from customer c where c.cust_id = 1;
SELECT MIN(CAST(_id AS UNSIGNED)) FROM fts WHERE tbl_no=2 AND parent_id=6
Declare @Startdate DATE Declare @enddate DATE SET @Startdate='9/1/2013' SET @enddate='9/1/2013' SELECT (DATEDIFF(day,@Startdate,@enddate)+1)*1154
SELECT machinename, StatusCode, size, statusID FROM ( SELECT machinename, StatusCode, size, statusID, ROW_NUMBER() OVER (PARTITION BY MachineID ORDER BY size DESC) AS rn FROM machine WHERE MachineID IN ('33','22') AND StatusCode = 166 ) T1 WHERE rn = 1 ORDER BY size DESC
select c.CollectionID, isnull(d.MovieId, s.MovieId) MovieID from Collection c left join Director d on d.Director=c.DirectorId left join Studio s on s.Studio=c.StudioId
where ora_hash(rowid, 1200) = 1 where ora_hash(rowid, 1200) = 2 ...
SELECT rec_prison.location as 'Recieving Location', cur_prison.location as 'Current Location' FROM TransferRequest tr INNER JOIN Prison rec_prison ON rec_prison.prisonID = tr.receivingPrison INNER JOIN Prison cur_prison ON cur_prison.prisonID = tr.currentPrison;
CREATE TABLE [dbo].[deterministicTest]( [intDate] [int] NULL, [dateDateTime] [datetime] NULL, [castIntToDateTime] AS (CONVERT([datetime],[intDate],0)), [castDateTimeToInt] AS (CONVERT([int],[dateDateTime],0)), [castIntToVarchar] AS (CONVERT([varchar],[intDate],0)) ) ON [PRIMARY]
SELECT title,price FROM movies WHERE price >= (SELECT price FROM test WHERE title='Movie3')
SELECT *, DENSE_RANK() OVER (ORDER BY InvoiceNo) AS sequence FROM yourTable
UPDATE AOOBJECT SET NAME = CASE WHEN RIGHT(NAME , 2) = '_2' THEN LEFT(NAME , LEN(NAME) - 2) ELSE NAME END + '_GRP' WHERE ObjectDescription = 'Portfolio Group Description'
SELECT CHAR_LENGTH('Época Cosméticos_T2') AS _char_length , LENGTH('Época Cosméticos_T2') AS _length _char_length _length ------------ ------- 19 21
SELECT * FROM ( SELECT * FROM mytable ) as MY_TABLE;
SELECT s1.country, s1.age, COUNT(distinct s2.name) FROM stats s1 JOIN stats s2 ON s1.country=s2.country OR s1.age=s2.age GROUP by 1, 2;
...SELECT [PatientName] + ', ' + ....
SELECT COUNT(*) AS total_count, COUNT(CASE WHEN profile_visits.visit_time > '2012-07-30 18:53:16' THEN 1 END) AS visitors_count FROM profile_visits LEFT JOIN users ON users.user_id=profile_visits.user_id LEFT JOIN profile_info ON profile_info.user_id = users.user_id WHERE profile_user_id=5 AND users.restricted <> 1
SELECT MAX([order]) AS MaxOrd , value FROM Event GROUP BY value ORDER BY MaxOrd DESC
AND ( Orders.ShipDate >= DATEADD(Day, Datediff(Day,0, GetDate() -7), 0) AND Orders.ShipDate < DATEADD(Day, Datediff(Day,0, GetDate()), 0) )
SELECT SUM(SELECT amount FROM receipt WHERE type='euro') AS euro_amount, SUM(SELECT amount FROM receipt WHERE type='usd') AS usd_amount FROM receipt
CREATE PROCEDURE foo BEGIN DECLARE EXIT HANDLER FOR SQLWARNING SET @exiting=1 -- any statement will work here ; A; B; C; D; END//
SELECT a.id, a.name, b1.code, b2.code FROM tableA a JOIN tableB b1 ON b1.id = a.fk_1_table_B_1 JOIN tableB b2 ON b2.id = a.fk_2_table_B_2
It has no means to return any data (such as the number of affected rows). Instead, you're encouraged to use insert...
select column1 from table1 inner join table2 on table1.column = table2.column where table2.columne=0
SELECT CAST('abc' AS varchar(5)) COLLATE French_CS_AS
SELECT C.id_credito, SUM(M.monto), M.fecha_mov, ISNULL(min(tg.nombre),min(tp.NombComp)) AS Acreditados . . . GROUP BY C.id_credito, M.fecha_mov
SELECT statement_id, statement_value FROM statement_bank sr WHERE category_id=6 AND level=7 and exists (select 1 from statement_record sr where sr.user_id = sb.user_id and sr.statement_id = sb.statement_id and sr.date between '2013-01-01' and '2013-12-31' );
SELECT * FROM tbl t WHERE t::text LIKE '%999999%';
user_bids_on_product -------------------- product_id FK to product user_id FK to user price
SELECT col1, col2, myDate, DATE_ADD(myDate,daysDiff) as adjustedDate FROM DateSource JOIN ( SELECT DATEDIFF(FROM_UNIXTIME(UNIX_TIMESTAMP(),"yyyy-MM-dd"),maxDate) as daysDiff FROM ( SELECT max(myDate) as maxDate FROM DateSource ) maxDate ) diffDate;
, cast(null as datetime) as Column3
SELECT ID, NAME FROM PRODUCTS WHERE PRICE > 100;
select t21.text as subject, t22.text as description from table1 t1 join table2 t21 on t1.refidone = t21.id join table2 t22 on t1.refidtwo = t22.id
SELECT cust_name FROM t_customer c ORDER BY REGEXP_REPLACE(cust_name, '[0-9]', ''), TO_NUMBER(REGEXP_SUBSTR(cust_name, '[0-9]+'))
SELECT DISTINCT TABLE_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'Name of column';
SELECT * FROM table1 AS t1 FULL JOIN table2 AS t2 ON t1.key1 = t2.key2 WHERE t1.key1 IS NULL OR t2.key2 IS NULL
SELECT IFNULL(SUM(t.value), 0) FROM PLAYERS p JOIN ITEM_STAT_RELATION itr ON itr.player_id = t.player_id LEFT JOIN STATS s ON s.stat_id = itr.stat_id WHERE p.player_id = ? AND ...
UPDATE Table SET Field=CONCAT(Field,'your extra html');
Select * From TableName Where ColumnA Is Not NULL And ColumnA <> '' And ColumnB Is Not NULL And ColumnB <> '' .......
SELECT CAST(CAST(795.5921967249997 AS decimal(18, 9)) as decimal(18, 8))
SELECT T1.AppId, COUNT(*) FROM TABLE1 T1 WHERE T1.Req = r1 GROUP BY T1.AppId HAVING COUNT(distinct status) > 1
SELECT name, SUM(v) AS sum FROM table GROUP BY name ORDER BY SUM(v) DESC
SELECT *, GETDATE() AS CurrentDate from dbo.source
DELETE FROM S WHERE S.value < (SELECT MIN(value) FROM Y)
select at.Id , p.Name , e.Name , at.Start, at.End from Patient p inner join Attend at on p.Id = at.PatientId inner join Employee as e on at.DoctorId = e.Id;
var TagIds = new int[] {12, 32, 42}; var q = from map in Context.TagMaps where TagIds.Contains(map.TagId) select map.Items;
CREATE TRIGGER distributing_info_details AFTER INSERT ON Info FOR EACH ROW BEGIN INSERT INTO Household (personID, sons, daughters, ...) VALUES (new.PersonID, new.sons, new.daughters, ...) # use ^ this key word to access the newly inserted ID. INSERT INTO Person (firstName, lastName, ...) VALUES (new.firstName, new.lastName,...) END;
Select count(*) as rowcount from ( Paste your query here ) as countquery
SELECT t1.[Code], t1.[Name] FROM [#tmpTest1] t1 INNER JOIN ( SELECT [Code] FROM [#tmpTest1] GROUP BY [Code] HAVING COUNT(DISTINCT [Name]) > 1 ) t2 ON t1.[Code] = t2.[Code]
create table MyTable (Id int, Value varchar(100) not null default('01')) Insert into MyTable (Id) values (1) Select Value From MyTable will be '01'
CREATE FUNCTION check_sunday() RETURNS trigger AS $$ BEGIN IF EXTRACT(DOW FROM NOW()) = 0 THEN RAISE EXCEPTION 'You cannot do this on Sunday!'; END IF; RETURN NEW; END; $$ LANGUAGE plpgsql; CREATE TRIGGER foo_trigger ON foo BEFORE INSERT EXECUTE PROCEDURE check_sunday();
SELECT emp.name, emp.salary, COUNT(*) OVER () AS total_count FROM employees emp;
<cfset value = "\'; DROP TABLE tableName -- " /> <cfquery> select * from tableName where fieldName = '#value#' </cfquery>
CREATE UNIQUE INDEX my_index ON tbl_name (fk1, fk2)
SELECT o.Id, o.attrib1, o.attrib2 FROM table1 o JOIN ( SELECT DISTINCT Id FROM table1, table2, table3 WHERE ... ) T1 ON o.id = T1.Id
select p1.investigator, p2.investigator from proposals AS p1 cross join proposals AS p2 where p1.investigatorDepartment = 'CIS' and (( p2.investigatorDepartment = 'CIS' and p1.investigator < p2.investigator ) or ( p2.investigatorDepartment != 'CIS' or p2.investigatorDepartment is null )) and p1.proposalNum = p2.proposalNum;
select pallet_id, case when count(case when product_group not in ('LAMINAAT','ACCESSORIE') then 1 end) > 0 then '' when count(distinct product_group) > 1 then 'Mix' when count(case when product_group = 'LAMINAAT' then 1 end) > 0 then 'LAM' else 'ACC' end as label from mytable group by pallet_id
SELECT a.proID, GROUP_CONCAT(b.domainID) domainId, GROUP_CONCAT(b.domainName) domainName FROM projects a LEFT JOIN domain b ON a.domainID = b.domainID GROUP BY a.proID
SELECT Field1 AS FieldValue FROM MyTable UNION ALL SELECT Field2 AS FieldValue FROM MyTable UNION ALL SELECT Field3 AS FieldValue FROM MyTable
SELECT REVERSE( INSERT( INSERT(REVERSE(1234567890), 5, 0, '.'), 8, 0, '.')) AS formatted; +--------------+ | formatted | +--------------+ | 1234.56.7890 | +--------------+
select * from dba_data_files; -- The database files (this is where the tables live) select * from v$logfile; -- The online redo logs select * from v$controlfiles; -- The controlfiles
SELECT A.data, DT.startDate, DT.endDate FROM DateTable DT JOIN A ON A.StartDate >= DT.startDate And A.EndDate <= DT.endDate
SELECT "outbreaks".* FROM "outbreaks" INNER JOIN "bacterial_agents" ON bacterial_agents.outbreak_id = outbreaks.id INNER JOIN "bacteria" ON "bacteria".id = "bacterial_agents".bacterium_id WHERE (bacteria.name ILIKE E'%VTEC O157%') UNION SELECT "outbreaks".* FROM "outbreaks" INNER JOIN "viral_agents" ON viral_agents.outbreak_id = outbreaks.id INNER JOIN "virus" ON "virus".id = "viral_agents".virus_id WHERE (virus.name ILIKE E'%NOROVIRUS%')
select * from TABLE where cast(number as varchar(255)) like '11%';
update stackoverflow_employee set salary = case when hire_date>'1-Jan-2001' then salary+salary*0.1 when hire_date between ('1-Jan-1997') AND ('1-Jan-2000') then salary+salary*0.07 when hire_date < '1-Jan-1996' then salary+salary*0.04 end
result = db.rawQuery("SELECT col FROM tbl", new String[0]);
;WITH cteDedup AS( SELECT UserId ,FName ,LName ,ROW_NUMBER() OVER(PARTITION BY FName, LName ORDER BY UserID ASC) AS row_num FROM UserTable ) UPDATE rt SET UserId = original.UserId FROM ResultsTable rt JOIN cteDedup dupe ON rt.UserId = dupe.UserId JOIN cteDedup original ON dupe.FName = original.FName AND dupe.LName = original.LName WHERE dupe.row_num <> 1 AND original.row_num = 1
SELECT DISTINCT n.node_name, n.data FROM nodes n INNER JOIN nodeActivity na ON n.node_name = na.node_name AND na.time = '00:00:00'
"customer [cid] has name [firstname] [lastname] AND customer [cid] has a phone number [phonenumber] of type [type] ..." "customer [cid] can use credit card #[card_no]" "seat [seatid] is at row [row] and column [column]" "seat [seatid] is booked" "seat [seatid] is temporarily committed to an unfinished booking" ...
SELECT N1.CustomerID, COUNT(N2.OrderDate) FROM Northwind N1 INNER JOIN Northwind N2 ON N1.CustomerID=N2.CustomerID AND N1.OrderDate<=Dateadd(MONTH, 6, N2.OrderDate) GROUP BY N1.CustomerID HAVING COUNT(N2.OrderDate)>=3
SELECT t1.f1, t1.f2, GROUP_CONCAT(t2.value) AS values FROM TABLE_1 t1 JOIN TABLE_2 t2 ON FIND_IN_SET(t2.color, t1.f2) GROUP BY t1.f1, t1.f2
SELECT A.idA, A.idB, COALESCE(B1.Value, B2.Value) FROM tableA A WHERE idA = 1; LEFT JOIN TableB1 B1 ON B1.idB = A.idB LEFT JOIN TableB2 B2 on B2.idB = A.idB
select money_ex.StudentIdFrom, st_from.FirstName, st_from.LastName, money_ex.StudentIdTo, st_to.FirstName, st_to.LastName, money_ex.Amount from MoneyExchange as money_ex join Student as st_from on money_ex.StudentIdFrom = st_from.StudentId join Student as st_to on money_ex.StudentIdTo = st_to.StudentId order by money_ex.Amount asc limit 0 , 15;
SELECT * FROM 'Property Table' props LEFT JOIN 'Images Table' imgs ON imgs.PropertyID = props.PropertyID
SELECT ID, Score, ISNULL(convert(int, lead(Score) over(partition by id order by timestamp)), 0) - convert(int, Score) FROM RiskPredLog -- where ID = '1002010'
WITH recordsList AS ( SELECT Type, Charges, ROW_NUMBER() OVER (PArtition BY TYPE ORDER BY [ORDER] DESC) rn FROM tableName ) SELECT SUM(Charges) totalCharge FROM recordsLIst WHERE rn = 1
SELECT [T].* FROM ( SELECT [Name] , [DATE] , [OrderType] , ROW_NUMBER() OVER (PARTITION BY [Name] ORDER BY [Date]) AS [seq] FROM [TableA] ) AS [T] WHERE [T].[seq] = 1
SELECT c.c_id, c.c_name, SUM( p.p_sum ) AS sum FROM clients c, contracts_rent r, payments p WHERE c.c_id = r.c_id AND r.contract_id = p.contract_id GROUP BY c.c_id HAVING SUM( p.p_sum ) > 1300
ping server1 ping server2
SELECT g.* FROM game g WHERE EXISTS ( SELECT NULL FROM categories c WHERE c.name IN ('A', 'B') AND c.game = g.id LIMIT 1 OFFSET 1 )
select * from t order by item, bin;
SELECT Branch AS 'Branch Code', SUM(CASE WHEN CustomerStatus_Value = 'E' THEN 1 ELSE 0 END) AS 'Created', SUM(CASE WHEN CustomerStatus_Value = 'A' THEN 1 ELSE 0 END) AS 'Active', SUM(CASE WHEN CustomerStatus_Value = 'B' THEN 1 ELSE 0 END) AS 'Blocked', SUM(CASE WHEN CustomerStatus_Value = 'C' THEN 1 ELSE 0 END) AS 'Cancelled', COUNT(CustomerStatus_Value) AS 'All' FROM CustomerStatusEntries GROUP BY Id
select distinct p.team from player p where not exists (select * from player p1 where not exists (select * from player p2 where p.team=p2.team and p2.gid=p1.gid))
SELECT n.* FROM tblpm n INNER JOIN ( SELECT control_number, MAX(date_updated) AS date_updated FROM tblpm GROUP BY control_number ) AS max USING (control_number, date_updated);
WHERE (@BitInput = 0 AND DateColumn IS NULL) OR (@BitInput = 1 AND DateColumn IS NOT NULL) OR @BitInput IS NULL
select player_name, sport_played, count(*) from athlete group by player_name, sport_played having count(*) > 1
SELECT * FROM product WHERE ( SELECT count(*) FROM product AS p WHERE p.Product = product.Product AND p.Date >= product.Date ) <= 2 ORDER BY Product ASC;
SELECT * FROM books WHERE header LIKE 'dan%' OR header like '% dan%';
UPDATE AH SET [Booking Rating] = (CASE WHEN RLI.B_KEY IS NULL THEN '0' ELSE '1' END) FROM [H$Agency Header] AH LEFT JOIN #RatingLines RL1 ON RL1.[B_KEY] = AH.[Reservation No_] AND RL1.[RTD_COMMENT] <> ''-- If the Booking have a comment inDB2 WHERE AH.[Booking Rating] = '0' -- Get only Booking without Comments
;WITH goodlist AS ( SELECT child-id, image-url FROM relationstable left join imagetable on relationstable.child-id = relationstable.child-id and attribute-id = "goodimage" ) UPATE imagetable set imagetable.image-url = (SELECT top 1 image-url from goodlist where child-id = imagetable.object-id) WHERE imagetable.image-url = "no"
select t1.*, (select top 1 Y from table2 t2 where t2.id <= t.id order by t2.id desc ) as Y from table1 t1;
select convert(varchar(30), getdate(), 108) -- returns hh:mi:ss
Select Distinct SomeDay.SomeDayID,SomeDay.FolderName,SomeDay.FolderColor from SomeDay,SomeDayEvent where SomeDay.SomeDayID not in (4,3,2,1);
regress=> SELECT '192.168.1.19'::inet << '192.168.1.0/24'::cidr; ?column? ---------- t (1 row)
select previous.loser from table1 previous where previous.winner=CURRENTLOSER and ( select count(*) from table1 ancient where (ancient.winner=CURRENTWINNER and ancient.loser=previous.loser) or (ancient.loser=CURRENTWINNER and ancient.winner=previous.loser) ) = 0
SELECT c1.Color, c1.Value FROM colors c1 INNER JOIN ( SELECT Color, MIN(VALUE) AS minValue FROM colors GROUP BY Color ) c2 ON c1.Color = c2.Color AND c1.VALUE = c2.minValue
SELECT `bio_community_events`.`id`, `bio_community_events`.`begin_on`, `bio_community_events`.`name` FROM `bio_community_events` INNER JOIN `bio_contacts` on `bio_community_events`.user_id=bio_contacts.contact_id WHERE bio_contacts.user_id=33;
WHERE (Column1 = @Value AND @chk = 'Y') OR (@chk <> 'Y' AND Column1 IN (SELECT column2 FROM table2));
Dim milliseconds As Double milliseconds = (end - start).TotalMilliseconds
SELECT F1.Fighter as Fighter1, F2.Fighter as Fighter2 FROM FIGHT INNER JOIN FIGHTERS as F1 ON FIGHT.Fighter_ID1 = F1.ID INNER JOIN FIGTHERS as F2 ON FIGHT.Fighter_ID2 = F2.ID
SELECT `name`, group_concat(`description`) as `description`, sum(`amount`) as `amount` FROM `table_name` GROUP BY `name`
;with cte1 as ( select UniqueId , id , data ,case when isnumeric(data) = 1 THEN replicate(',-',data) ELSE ',' + data end as string from @t ) select id ,LTRIM(STUFF( ( SELECT ' ' + t2.String FROM Cte1 t2 WHERE t2.id = t1.id FOR XML PATH('') ), 2, 1, '' )) As concatenated_string from cte1 t1 group by t1.ID ,t1.ID
WHILE (1 = 1) BEGIN SET NOCOUNT ON; select * from [test_p] WAITFOR DELAY '00:00:02' END
SELECT NULLIF(MyColumn, '') FROM MyTable
SELECT b.url FROM table1 a INNER JOIN table2 b ON a.item_id = b.item_id WHERE a.name = '$name'
SELECT rep.ID FROM reparacoes rep INNER JOIN ( SELECT id_reparacao, MAX(Edit_Data) AS Edit_Data FROM reparacoes GROUP BY id_reparacao ) MaxRep ON MaxRep.id_reparacao = rep.id_reparacao AND MaxRep.Edit_Data = rep.Edit_Data;
Select Books.IdBooks, Books.Title, Books.Author, COUNT(Books.IdBooks) as NumberOfOrderedBooks Into NEW_TABLE From Books right join Orders on (Books.IdBooks = Orders.IdBooks) group by Books.IdSeminar, Books.Naziv
CREATE VIEW MyGuestsView SELECT id, firstname, lastname, CONCAT(firstname, lastname) AS fullname, email, reg_date FROM MyGuests
WITH CTE (USER_ID,USER_NAME,RPT_TO_USR,LV) AS ( SELECT USER_ID,USER_NAME,RPT_TO_USR,1 FROM USERTABLE WHERE RPT_TO_USR IS NULL UNION ALL SELECT A.USER_ID,A.USER_NAME,A.RPT_TO_USR,B.LV + 1 FROM USERTABLE A, CTE B WHERE A.RPT_TO_USR = B.USER_ID ) SELECT * FROM CTE;
select ed.name, e.title from event e join event_to_category etc on etc.event_id = e.id join event_category ec on etc.event_category_id = ec.id join event_to_date etd on e.id = etd.event_id join event_date ed on etd.event_date_id = ed.id where etc.category_id = 53 order by ed.name
SELECT DISTINCT tableA.group FROM tableB INNER JOIN tableA ON tableA.group LIKE CONCAT(tableB.groups, '%')
SELECT DivisionName as Division, StoreNum as Store, LeadName as Lead, Type, ChangeType,Changes, UpdatedBy, convert(varchar(10),UpdatedDate, 101) + right(convert(varchar(32), UpdatedDate,100),8) as UpdatedDate FROM m WHERE DivID!=0 ORDER by UPDATEdDate desc
SELECT Count(*) AS CountIfSexNull FROM DEMO WHERE DEMO.SEX Is Null
Select asgn.user_id, asgn.ticket_id, answ.answer from Assigned asgn inner join Answers answ on asgn.user_id = answ.id_per and asgn.ticket_id = answ.id_ticket and upper(answer) like '%YES%'
NULL LIKE 'X' NULL NOT LIKE 'X' NOT (NULL LIKE 'X') NOT (NULL NOT LIKE 'X')
ALTER TABLE tblname ADD UNIQUE (a,b)
select tablename, count(*) from (select 'table1' as tablename, someid from table1 union all select 'table2' as tablename, someid from table2 ) t where someid in ('1815972751', '1815751159', '1815752967', '1815756079') group by tablename;
delete from tableA where tableA.fk in ( select id from ( select id from tableB where tableB.column1='somevalue' and tableB.date between date1 and date2 and id in (select distinct fk from tableA.fk) ) where rownum < XXXX )
CREATE UNIQUE INDEX picture_homepage_uni ON picture (house_id) WHERE homepage;
SELECT * FROM ( SELECT ROW_NUMBER() OVER (ORDER BY ColumnName ASC) AS rownumber FROM TableName ) as temptablename WHERE rownumber IN (2,5)
CREATE TABLE dbo.SyncQueue ( QueueId INT IDENTITY(1,1), KeyForSync INT, -- Primary key value of record in dbo.SourceTable SyncStatus INT -- statuses can be: 0 - New, 1 - Synchronized, 2 - Error ) suppose you source table is CREATE TABLE dbo.SourceTable ( Key INT, -- primary key of the table Data varchar(xxx) )
INSERT INTO Totals([TOTAL VERIFIED FORMULARIES], [TOTAL AVAILABLE FOR IMPORT], [TOTAL SHOULD BE IMPORTED]) SELECT A.cnt, B.cnt, C.cnt FROM ( SELECT COUNT([FORMULARY ID]) as cnt FROM VerifiedFormularies ) AS A , ( SELECT COUNT([FORMULARY ID]) as cnt FROM ImportMetricsIDs ) as B , ( SELECT COUNT([FORMULARY ID]) as cnt FROM ShouldImportMetricsIDsTable WHERE [IMPORT STATUS]= 'Yes' ) AS C
SELECT id_towaru, nazwa_tow, 'it''s work' AS result FROM TOWAR WHERE ID_KATEGORIA = '00001'
SELECT trunc(event_date), sum(network_up) total_up, sum(network_down) total_down FROM agent_history WHERE event_date >= trunc(sysdate) - 30 GROUP BY trunc(event_date)
SELECT * FROM date_sargable WHERE YEAR(value) = YEAR (getDate()) AND MONTH(value) = MONTH(getDate()) ; SELECT * FROM date_sargable WHERE DATEDIFF(MONTH, value, getDate()) = 0 ; SELECT * FROM date_sargable WHERE DATEDIFF(MONTH, 0, value) = DATEDIFF(MONTH, 0, getDate()) ; SELECT * FROM date_sargable WHERE value >= DATEADD(MONTH, DATEDIFF(MONTH, 0, getDate()) , 0) AND value < DATEADD(MONTH, DATEDIFF(MONTH, 0, getDate()) + 1, 0) ;
SELECT ID, MAX(second_col) FROM table GROUP BY ID
SELECT DISTINCT postid FROM tablename ORDER BY RAND() LIMIT 2
UPDATE distinct_network_point SET altitude = altitude_of_point.altitude FROM altitude_of_point WHERE distinct_network_point.id= altitude_of_point.id
SELECT QUOTENAME(First, '"'), QUOTENAME(Last, '"'), QUOTENAME(Email, '"') FROM People
SELECT Fname, Lname FROM EMPLOYEE WHERE dno = 4 AND Ssn IN (SELECT essn FROM WORKS_ON);
(SELECT id, name_ar FROM tour_type ORDER BY order) UNION ALL (SELECT id, name_ar FROM hotel_type ORDER BY order) UNION ALL (SELECT id, name_ar FROM food_type ORDER BY order) UNION ALL (SELECT id, name_ar FROM cities WHERE id_parent = ? ORDER BY name_ar)
SELECT PupilID, Subject, [Year1], [Year2], [Year3], [Year4] FROM ( SELECT PupilID, Subject, Year, Score FROM Scores --Where (PupilID = 10016) ) AS DT PIVOT(SUM(Score) FOR Year IN ([Year1],[Year2], [Year3], [Year4])) AS PVT
mysql -h hostname -u user --password=password databasename < file_name.sql
select a.x, a.y from TableA a inner join TableB b on a.x = b.x
declare @Path varchar(100) set @Path = 'c:\CreatedFromSQL' EXEC master.dbo.xp_create_subdir @Path
WITH T AS ( SELECT TOP 20 name, row_number() OVER (ORDER BY id) AS RN FROM Products ORDER BY id ) SELECT MAX(CASE WHEN RN <=10 THEN name END) AS Col1, MAX(CASE WHEN RN > 10 THEN name END) AS Col2 FROM T GROUP BY RN % 10
select trainerID,count(trainerID) [Count] From ( select clientID,trainDate,trainerID, row_number()over(partition by clientID order by trainDate Desc) Rn From yourtable ) A where Rn=1 Group by trainerID
INSERT INTO OPENROWSET('SQLNCLI', 'Server=someserver.net\SQLEXPRESS2014;User=xxxx;Password=xxxx;', 'SELECT [Name], [Description], [ARXUrl], [IsDeleted], [CreatedDate] FROM [slic-test].[dbo].[ARXSystem]') SELECT [Name], [Description], [ARXUrl], [IsDeleted], [CreatedDate] FROM [dbo].[ARXSystem]
SELECT TAG_DESC as 'Description', COUNT(TAG_DESC) as 'Occurances' FROM table_name GROUP BY TAG_DESC
INSERT INTO table3 ( name, age, sex, city, id, number, nationality) SELECT name, age, sex, city, p.id, number, n.nationality FROM table1 p INNER JOIN table2 c ON c.Id = p.Id INNER JOIN table3 n ON n.Id = p.Id
WHERE (@Lastname is NULL or customer.lastname LIKE '%' + @Lastname + '%' ) or (@Street is NULL or address.street LIKE '%' + @Street + '%' )
select min(thetime) as start_time, max(thetime) as end_time from ( select thetime, count(gap) over (rows between unbounded preceding and current row) as groupid from ( select thetime, case when thetime - lag(thetime) over (order by thetime) > interval '30 minutes' then 1 end as gap from mytable ) times ) groups group by groupid order by min(thetime);
WHERE c.cart_id_pk IN ( SELECT ci.cart_id_fk FROM cart_item ci WHERE ci.item_name = "Apple") AND c.cart_id_pk IN ( SELECT ci.cart_id_fk FROM cart_item ci WHERE ci.item_name = "Banana") AND c.cart_id_pk IN ( SELECT ci.cart_id_fk FROM cart_item ci WHERE ci.item_name = "Carrot")
query { for h in dc.Table do where h.SectorId.HasValue select h }
where some_date between to_date('01/01/2015','MM/DD/YYYY') and to_date('12/31/2015','MM/DD/YYYY') and extract(month from some_date) in (1, 2, 3, 10, 11, 12);
SELECT b.name, a.title FROM book as a JOIN user as b ON b.id = a.userId WHERE SUBSTRING(LOWER(a.title), 1, 1) = 'a' ORDER by a.title
SELECT id_image, occurences FROM ( SELECT id_image, COUNT(id) AS occurences, 2 AS priority FROM images_bookmarks GROUP BY id_image UNION SELECT id_image, COUNT(id) AS occurences, 1 AS priority FROM images_likes il GROUP BY id_image ) AS favorites ORDER BY occurences DESC, priority DESC
SELECT Doc.Code,Doc.DataAccept,DocTypes.Name,Org.Name FROM Doc LEFT OUTER JOIN DocTypes JOIN Org ON Doc.Type=DocTypes.Code AND Doc.Org=Org.Code; WHERE Doc.Code < 1000 ; ORDER BY 1
select * from table where find_in_set(21, demo) > 0
IF NOT EXISTS ( select * from sys.objects where parent_object_id = object_id('MyTable') and type = 'PK' ) do <create index for rec_index>
select * from T2 T21 inner join T2 T22 on T21.ID = T22.ID inner join T1 T1 on T21.CombiIDs = T1.Combi1 and T22.CombiIDs = T1.Combi2
SELECT p.Prdnum, s.Brand, q.Data FROM PTable p JOIN STable s on p.Prdnum = s.Prdnum JOIN QTable q on p.Prdnum = q.Prdnum WHERE q.Pid != 2
WITH data AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Customer ORDER BY Quantity) rn FROM @Table1 ) SELECT Customer, Quantity FROM data WHERE rn = 2
SELECT a.Fo_Name as 'Larger', b.Fo_Name as 'Smaller', a.fo_Comp FROM Forest a INNER JOIN Forest b ON a.fo_Comp= b.fo_Comp AND a.fo_loc = b.fo_loc AND a.fo_name <> b.fo_name WHERE a.fo_size > b.fo_size
create table mydata( cars char(4)CONSTRAINT limit_cars_to CHECK (cars in ('bmw', 'audi')) ); insert into mydata values('bmw'); /*this insert works*/ insert into mydata values('xxx');/*this insert fails msg: ERROR: new row for relation "mydata" violates check constraint "limit_cars_to": insert into mydata values('xxx') */
@echo off :: this will execute the script into PROCESS.log sqlcmd -i Scripts\STEP01.sql -o PROCESS.log -S MYSERVER -E -d MYDATABASE :: this present the contents of PROCESS.log to the screen echo The result of the query was: type PROCESS.log pause CHOICE /C:YN /M "Is the result accord?" IF ERRORLEVEL 2 GOTO ENDWITHERROR IF ERRORLEVEL 1 GOTO STEP2
ALTER PROCEDURE [dbo].[test] @search_string varchar(50)
SET @rownumber = 0; UPDATE your_table SET your_column = (@rownumber := @rownumber + 1) ORDER BY the_column_that_defines_the_order_of_the_first_200_records LIMIT 200;
select id, match_date, team, lag(id) over (partition by team order by match_date) as prev_matchid from ((select id, match_date, home_team as team, 'home' as which from matches ) union all (select id, match_date, away_team as team, 'away' as which from matches ) ) m;
select m.*, r1.* from mail m inner join recipient r1 on m.pkm=r1.pkm left join recipient r2 on m.pkm=r2.pkm and r2.address<>'abc@domain.com' and r2.address like '%@domain.com' where r2.pkm is null and r1.address='abc@domain.com'
UPDATE yourTable SET YourField = LEFT("00", 3-LEN(YourField)) + YourField WHERE LEN(YourField)<3 AND Len(YourField)>0
SELECT MAX(NVL(END_DATE,SYSDATE + 1) ...
function Project_idValidTrigger return boolean is begin :project_id := 'BMDSA'; SELECT VALUE INTO :project_id --gets value into the parameter FROM WOS_REPORT_PARAM WHERE parameter = 'PROJECT_ID' AND SEQUENCE_NUM = :sequenceNum; --uses the parameter value in the AND clause return (TRUE); end;
--Do this select first for safety select c.CustomerName, m.CorrectedName from TableCustomers c join TableCustomerMapping m on c.CustomerName = m.WrongName --Update if okay update c set c.CustomerName = m.CorrectedName from TableCustomers c join TableCustomerMapping m on c.CustomerName = m.WrongName
select top 1 tblT.Tick, First(tblB.BDF) AS FirstOfBDF from FROM tblT INNER JOIN tblB ON tblT.Tick = tblB.Tick GROUP BY tblT.Tick Order by tblt.Tick ;
SELECT tableA.* ,(SELECT count(commentID) FROM tableB WHERE tableA.messageID = tableB.messageID) as commentcount FROM tableA
CREATE OR REPLACE AND RESOLVE JAVA SOURCE NAMED ipv6 as import java.net.Inet6Address; public class ipv6 ... create or replace function isProperIPv6Address (string varchar2) return number as language java name 'ipv6.isProperIPv6Address(java.lang.String) return int';
SELECT g.groupid, COUNT(*) AS user_count FROM dbo.Groups g JOIN dbo.Users u ON (g.groupid = u.groupid) GROUP BY g.groupid;
SELECT u.* , (SELECT COUNT(*) FROM notes WHERE notes.user_id=u.id) as amountnotes FROM users u ORDER BY amountnotes DESC
SELECT [Master Record].[Family ID], Max([Master Record].[Last Name]) AS [MaxOfLast Name], Max([Master Record].[Address 1]) AS [MaxOfAddress 1], Max([Master Record].[Address 2]) AS [MaxOfAddress 2], Max([Master Record].City) AS MaxOfCity, Max([Master Record].State) AS MaxOfState, Max([Master Record].Zipcode) AS MaxOfZipcode, Max([Family Members].Email) AS MaxOfEmail FROM [Master Record] LEFT JOIN [Family Members] ON [Master Record].[Family ID] = [Family Members].[Family ID] GROUP BY [Master Record].[Family ID] HAVING (((Count([Family Members].Email))=0));
select t.student, t.grade, t.expected, case when m.val > m1.val then 'Above Target' when m.val < m1.val then 'Below target' else 'on target' end as achievements from students t left join (select * from openquery(mysql, 'select * from Grade')) m on t.grade = m.grade left join (select * from openquery(mysql, 'select * from Grade')) m1 on t.expected = m1.grade
select 3258170 - 1 + row_number() over (order by (select NULL)) as idd
SELECT CASE GROUPING(d.name) WHEN 1 THEN 'All:' ELSE d.name END AS dept, COUNT(*) AS total_manager, SUM(p.salary) AS wages FROM dept d INNER JOIN office o ON d.id = o.dept_id INNER JOIN personnel p ON o.id = p.office_id GROUP BY d.name WITH ROLLUP
SELECT regexp_replace(some_column, '[^0-9]*', '') as clean_value FROM your_table
CREATE TABLE dbo.foo (bar decimal(18,0)) GO SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('foo') GO DROP TABLE dbo.foo GO
<?php $query2 = db_select('wp_votes','wpv'); $query2->join('node','n','wpv.nid = n.nid'); $query2->fields('wpv',array('nid','vote')); $query2->fields('n',array('title')); $alias = $query2->addExpression('AVG(vote)', 'average'); $query2->groupBy('wpv.nid'); $query2->sortBy($alias, 'DESC'); $rez = $query2->execute()->fetchAll();
LEAST()
SELECT * FROM item i INNER JOIN (SELECT itemno, Sum(qtyordered) FROM delivereditem GROUP BY itemno) d ON d.itemno = i.itemno INNER JOIN (SELECT itemno, Sum(qtyissued) FROM itemissued GROUP BY itemno) iss ON iss.itemno = i.itemno
SELECT DATENAME(MONTH, DATEADD(month, b_month - 1, 0)) + ' ' + SUBSTRING(CAST(b_year AS VARCHAR), 3, 4) FROM ( SELECT DISTINCT YEAR([BEGIN]) AS b_year, MONTH([BEGIN]) AS b_month FROM RECORDS ) q ORDER BY b_year, b_month
CREATE TRIGGER trg_sales_ai AFTER INSERT ON sales FOR EACH ROW BEGIN UPDATE publisher p CROSS JOIN book b SET p.`sales volume` = p.`sales volume` + NEW.amount_sold * b.price WHERE p.name = NEW.publisher AND b.ISBN = NEW.isbn END;
UPDATE coinvdept SET code = 'ABC123' WHERE coinv IN (SELECT coinvid FROM coinv WHERE itemnumber = '12345678')
select first_name, last_name, count(*) as DupeCount from table group by first_name, last_name having count(*) > 1
ALTER TABLE myTable ADD id INT IDENTITY CONSTRAINT id _pk PRIMARY KEY;
create table A (Id int not null primary key) go create table B (Id int not null primary key) go create table C (Id int not null primary key, A_Id int null, B_Id int null) go alter table C add constraint FK_C_A foreign key (A_Id) references A (Id) go alter table C add constraint FK_C_B foreign key (B_Id) references B (Id) go alter table C add constraint CK_C_OneIsNotNull check (A_Id is not null or B_Id is not null) go alter table C add constraint CK_C_OneIsNull check (A_Id is null or B_Id is null) go
SELECT Name,SUM(Amount)Amount FROM( SELECT Name, Amount FROM TableA UNION ALL SELECT Name, Amount FROM TableB) AS A GROUP BY Name
UPDATE (SELECT new_key, new_record, MAX(key) OVER(ORDER BY key) as minimumKey, COUNT() OVER(ORDER BY key ROWS UNBOUNDED PRECEDING) + 1 as offsetKey FROM MyTable) MyTable SET new_key = minimumKey + offsetKey WHERE new_record = 0;
SELECT [Date], SUM(Amount) TotalAmount FROM YourTable GROUP BY [Date]
SELECT b.* FROM books b INNER JOIN (SELECT book_id, COUNT(*) as cnt FROM user_has_book WHERE user_id IN ('Frank', 'Joe') GROUP BY book_id HAVING cnt=2)x ON (x.book_id = b.book_id)
SELECT c.id, c.name FROM Company c WHERE EXISTS (SELECT 1 FROM Branch b WHERE c.id = b.cid AND b.profit > 100)
;with T as ( select 0 as row, CHARINDEX('/', Col) pos, Col from page_data union all select row + 1, CHARINDEX('/', Col, pos + 1), Col from T where pos > 0 ) select distinct MIN(Col1) Col from( select row, Col, (case when row=2 then SUBSTRING(Col, 1, pos-1) else Col end) Col1 from T where pos > 0 and row<3 )x group by Col
ALTER TABLE tbl_Marks ADD total AS (Maths + English + Hindi) PERSISTED; ALTER TABLE tbl_Marks ADD Percentage AS CAST(CAST((Maths + English + Hindi) AS NUMERIC(8,2)) / 300 * 100 AS NUMERIC(8,2)) PERSISTED;
SQL> WITH main_table AS 2 (SELECT 1 ID FROM dual UNION ALL 3 SELECT 2 FROM dual), 4 lookup_table AS 5 (SELECT 1 ID, 'txt' txt FROM dual UNION ALL 6 SELECT 2 ID, '999' txt FROM dual) 7 SELECT m.id, l.txt 8 FROM main_table m, lookup_table l 9 WHERE m.id = l.id(+) 10 AND REGEXP_LIKE(l.txt(+), '^[A-Z]+'); ID TXT ---------- --- 1 txt 2
SELECT COUNT(*) AS attempts, CurrentSlideId, UserLessonProgressId, MAX(IsHint) FROM UserAnswers WHERE UserID = 169494 and UserLessonProgressId = 218629 GROUP BY CurrentSlideId, UserLessonProgressId ORDER BY CurrentSlideId, UserLessonProgressId
SELECT OrderHed.OrderNum, (CASE WHEN SUM(ShipDtl.OrderLine) > 1 then 'MIXED' else MAX(ShipDtl.PartNum) end) as [Item#] FROM dbo.OrderHed, dbo.ShipDtl WHERE ShipDtl.Company = OrderHed.Company AND ShipDtl.OrderNum = OrderHed.OrderNum GROUP BY OrderHed.OrderNum
select * from Likes like1 inner join Likes like2 on like1.UserID1 = like2.UserID2 and like1.UserID2 = like2.UserID1
SELECT c.CompanyName AS "Company Name", c.Address AS "Address", sum(od.Unitprice * od.quantity) as "Orders" FROM Customers c LEFT JOIN Orders o ON c.CustomerID = o.CustomerID left join [Order Details] od on od.orderid = o.orderid GROUP BY c.CompanyName, c.Address ORDER BY c.CompanyName, c.Address
if(databasePresent()){ Intent intent = new Intent(MainActivity.this, LoginActivity.class); startActivity(intent); }else{ Intent intent = new Intent(MainActivity.this, CreateProfileActivity.class); startActivity(intent); }
SELECT * FROM Chag.sys.columns c WHERE OBJECT_NAME(c.object_id, DB_ID('Chag'))='Aduser' SELECT * FROM Chag.sys.tables so WHERE so.name = 'Aduser' AND OBJECT_SCHEMA_NAME(so.object_id, DB_ID('Chag')) = 'Tref'
sysdate(3) returned '2014-01-07 10:52:07.252'
SELECT * FROM waypoint WHERE id NOT IN( (SELECT MIN(ID) FROM waypoint where booking_id="1"), (SELECT MAX(ID) FROM waypoint where booking_id="1") ) AND booking_id="1";
SELECT filename, SUM(CASE WHEN t = 28 THEN 1 ELSE 0 END) t28count, SUM(CASE WHEN t = 29 THEN 1 ELSE 0 END) t29count, SUM(CASE WHEN t = 30 THEN 1 ELSE 0 END) t30count FROM ( SELECT 28 AS t, filename FROM t28 UNION ALL SELECT 29 AS t, filename FROM t29 UNION ALL SELECT 30 AS t, filename FROM t30 ) q GROUP BY filename ORDER BY filename
SELECT STATUS, POSTAL_CODE, CITY_STATE, max(case when SERVICE = 1 THEN org_id end) AS WATER, max(case when SERVICE = 2 THEN org_id end) AS COFFEE, max(case when SERVICE = 3 THEN org_id end) AS FILTRATION FROM MAP WHERE POSTAL_CODE = '02216' GROUP BY status, postal_code, city_state
select cnt from ((SELECT COUNT(*) as cnt, 1 as ord FROM tb1) union all (SELECT COUNT(*), 2 FROM tb2) union all (SELECT COUNT(*), 3 FROM tb3) ) t order by ord
Criteria crit = session.createCriteria(Kite.class); crit.add(Restrictions.ge("length", new BigDecimal(1.0)) .createCriteria("boy") .add(Restrictions.eq("name", "Huck"))); List<Kite> list = crit.list();
select id , max(id) over (rows between 1 following and 1 following) as next_id from AnyTable
WHERE EmployeeName COLLATE Latin1_General_CI_AI LIKE '%[^a-z]%
SELECT * FROM mytable WHERE FIND_IN_SET('45', page) > 0
select ordernum from order_detail od join item_master im on im.itemnum = od.itemnum group by ordernum having count(case when im.item_type <> 'Phone' then 1 end) = 0 and count(*) = 1
=INDEX( $A$2:$A$6, SUMPRODUCT( ($B$2:$B$6 = "Biennial") * ($C$2:$C$6 = "Warning") * ROW($A$2:$A$6) ) - 1 )
WITH Temp AS ( SELECT emp.EMpID ,emp.DepID ,COUNT(OrderId) nb_order ,ROW_NUMBER() OVER(PARTITION BY emp.DepID ORDER BY COUNT(OrderId) DESC) Ordre FROM Order ord INNER JOIN Employee emp ON emp.EmpID = ord.EmpID GROUP BY emp.EMpID ,emp.DepID) SELECT * FROM Temp WHERE Ordre = 1
select salesperson, sum(case when Type='internet' then ItemCount else 0 end) as InternetItems, sum(case when Type='internet' then Sales else 0 end) as InternetSales, sum(case when Type='store' then ItemCount else 0 end) as StoreItems, sum(case when Type='store' then Sales else 0 end) as StoreSales, sum(ItemCount) as TotalItems, sum(Sales) as TotalSales ... group by 1
select Seasontime_seq.nextval, Month, Week, Day from ( select extract(Month from PDate) as Month, to_number(to_char(PDate, 'WW')) as Week, extract(Day from PDate) as Day From notmydatabase.performance );
DROP TRIGGER DiffByTerminal; GO CREATE TRIGGER dbo.DiffByTerminal ON dbo.SampleTable INSTEAD OF INSERT AS BEGIN SET NOCOUNT ON; INSERT dbo.RealTable(...) SELECT ActionCode, ActionTime, TerminalID FROM inserted WHERE TerminalID = 'C'; INSERT dbo.SampleTable(...) SELECT ActionCode, ActionTime, TerminalID FROM inserted WHERE TerminalID <> 'C'; END GO
SELECT GROUP_CONCAT(first_name SEPARATOR ' ') FROM table GROUP BY last_name HAVING COUNT(first_name) > 1
SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '<TABLE_NAME>' and IS_NULLABLE = 'NO'
var interval = 1000; setInterval(function(){ db.find(function(err, data){ // check data for changes }) }, interval);
SELECT sampling_point, time_sampling, CASE WHEN sampling_point = 'floor' THEN entero ELSE NULL END AS entero_floor, CASE WHEN sampling_point = 'wall' THEN entero ELSE NULL END AS entero_wall FROM SourceTable ORDER BY sampling_point DESC;
select teacher.name as Teacher, student.name as Student, lesson.time, lesson.place from lesson join person teacher on teacher.person_id = lesson.teacher_id join person student on student.person_id = lesson.student_id
select departmentid, sum(case status when 'active' then salary else 0 end) as active_salary_sum, sum(case status when 'passive' then salary else 0 end) as passive_salary_sum from t group by departmentid
SELECT * FROM tbl_name WHERE str_col=1;
select u.* from users u where exists (select 1 from checks c where c.user_id = u.id and c.checkin_date >= '2016-01-01' );
SELECT TOP 1 id, Company FROM Table1 WHERE id NOT IN( SELECT id FROM Table2 WHERE Criteria_A = 1 OR Criteria_B = 1 ) ORDER BY LatestOrder DESC
SELECT ID, COUNT(*) FROM( SELECT ID1 AS ID FROM MyTable UNION ALL SELECT ID2 AS ID FROM MyTable ) source GROUP BY ID ORDER BY ID ASC
LOAD DATA INFILE '/where/the/file/is' INTO TABLE table (email) FIELDS TERMINATED BY ',' LINES STARTING BY '';
CREATE USER 'testuser'@'10.0.2.2' IDENTIFIED BY 'testpassword'; GRANT ALL PRIVILEGES ON testdb.* TO 'testuser'@'10.0.2.2';
UPDATE prc.user, prc_test.user SET prc_test.user.pwd_user = prc.user.pwd_user WHERE prc_test.user.name_user = prc.user.name_user
public function first($columns = array('*')) { return $this->take(1)->get($columns)->first(); }
UPDATE `my_table` SET `my_column_1` = 0 WHERE `my_column_2` = 35 AND `my_column_3` = 3 AND `id` != 136
select f3.FruitName, f3.FruitCost, f.FruitName from @Fruit f inner join ( SELECT *, (Select max(productid) from @Fruit f2 where FruitCost is null and ProductID<=f.ProductID) as fgroup FROM @Fruit f ) f3 on f.ProductID = f3.fgroup where f3.FruitCost is not null
SELECT * FROM table_name WHERE Department = 'IT' AND 1000 BETWEEN `Start Amount` AND `End Amount` AND country IN ('India','*') AND `Sub Department` IN ('SD2','*') ORDER BY country = 'India' DESC, `Sub Department` = 'SD2' DESC LIMIT 1
-- do sumthin.. data is in @field1 and @field2 -- get next row fetch next from myCursor into @field1, @field2
SELECT s.Student_Name, a.Assignment_Name, sa.Score FROM Student s INNER JOIN StudentAssignment sa ON s.Student_PK = sa.Student_FK INNER JOIN Assignment a ON sa.Assignment_FK = a.Assignment_PK ORDER BY s.Student_Name, a.Assignment_Name
SELECT * FROM t1 WHERE NOT EXISTS (SELECT 1 FROM t2 WHERE t2.id = t1.id AND t2.Memo = 'myText')
Declare v1 number; v2 number; res number; Begin --initialise values v1 := 2; v2 := 2; res := v1 + v2; dbms_output.put_line(res); end;
WHERE theme LIKE '%math%' // math appears anywhere in the string WHERE theme LIKE 'math%' // math appears at the START of the string WHERE theme LIKE '%math' // math appears at the END of the string
SELECT *, `school`.`name` as school_name FROM (`school`) LEFT JOIN `school_semester` ON `school`.`id` = `school_semester`.`school_id` AND `school_semester`.`active` LEFT JOIN `semester` ON `semester`.`id` = `school_semester`.`semester_id`
SELECT p.plantnaam, o.levcode, o.offerteprijs FROM ( SELECT plantcode , MIN(offerteprijs) AS offprijs FROM offerte GROUP BY plantcode ) s INNER JOIN plant p ON s.plantcode = p.plantcode INNER JOIN offerte o ON s.offprijs = o.offerteprijs ORDER BY p.plantnaam, l.levcode
SELECT ID, 'Name' ColumnName, Name1 '1st', Name2 '2nd' FROM YourTable UNION SELECT ID, 'Description' ColumnName, Description1 '1st', Description2 '2nd' FROM YourTable UNION SELECT ID, 'Notes' ColumnName, Notes1 '1st', Notes2 '2nd' FROM YourTable
DECLARE @UpdateStatus nvarchar(20) SET @UpdateStatus='P' IF @UpdateStatus='P' BEGIN BEGIN TRAN Print 'A' --Update some table COMMIT END ELSE IF @UpdateStatus='F' BEGIN BEGIN TRAN Print 'B' --Update some table COMMIT END
select documentnumber from transactionheader where documentnumber LIKE 'RCV%'
; with CTE as ( select datepart(year, '2006-12-25') as yr union all select yr + 1 from CTE where yr < datepart(year, '2013-11-14') ) select yr from CTE
SELECT u.username, SUM(l.points) AS points FROM leaderboard l INNER JOIN yourUserTable u ON l.id = u.ColumnNameForTheUserId WHERE roundtime BETWEEN LOCALTIMESTAMP - INTERVAL '24 hours' AND LOCALTIMESTAMP GROUP BY u.username ORDER BY points DESC LIMIT 25
SELECT table_1.NAME FROM table_1 INNER JOIN table_2 ON table_2.fieldA like '%' + table_1.NAME + '%'
UPDATE tableB INNER JOIN tableA ON tableB.name = tableA.name SET tableB.value = IF(tableA.value > 0, tableA.value, tableB.value) WHERE tableA.name = 'Joe'
SELECT id FROM YourTable WHERE id In (16,18,15,20) ORDER BY Switch( id=16,1, id=18,2, id=15,3, id=20,4 );
order by date, case operation when 'INCOMING' then 1 when 'ACCEPT' then 2 when 'WITHDRAW' then 3 else 4 -- this is a fallback, anything else will be sorted at the end end
select leagues.id, leagues.name, sum(goals.num_goals) from leagues join teams on teams.id = leagues.id join players on players.id = teams.id join goals on goals.id = players.id group by leagues.id, leagues.name;
SELECT DISTINCT a.PolicyNumber FROM Policy_Office a INNER JOIN Office_Info b ON a.OfficeCode = b.OfficeCode WHERE b.officeName = 'Acme'
SELECT * FROM blog LEFT JOIN user ON blog.user_id = user.id LEFT JOIN photos ON blog.id = photos.blog_id
SELECT Patient_Name FROM Patients_Appointment_List WHERE CASE WHEN WEEKDAY(CURDATE() + INTERVAL 1 DAY) = 6 THEN appointment_Date BETWEEN NOW() AND NOW() + INTERVAL 2 DAY ELSE appointment_Date BETWEEN NOW() AND NOW() + INTERVAL 1 DAY END
SELECT `thread_subject`, COUNT(*) AS PostCount FROM `fusion_posts` JOIN `fusion_threads` ON fusion_posts.thread_id=fusion_threads.thread_id JOIN `fusion_users` ON fusion_posts.post_author=fusion_users.user_id GROUP BY fusion_posts.thread_id, `thread_subject` ORDER BY `post_id` DESC LIMIT 16
SELECT TaskId as ParentTaskId, ChildOf , (SELECT count(t2.TaskId) FROM Tasks t2 WHERE t2.ChildOf = t.TaskId) as CountChildren FROM Tasks t WHERE t.ChildOf = 0
SELECT * FROM table1 a WHERE a.d > COALESCE((SELECT b.d FROM table2 b WHERE a.id = b.id and a.Something = 1), '0')
select tbl3.* from tbl1 inner join tbl2 on tbl2.art_id = tbl1.art_id inner join tbl3 on tbl3.a1 like '%' || tbl1.project_line_id || '%' where tbl2.type = 3;
WHERE (year = @yearfrom AND month >= @monthfrom or year > @yearfrom) AND (year = @yearto AND month <= @monthto or year < @yearto)
insert into T_AUTHOR ( ID, FIRST_NAME, LAST_NAME, DATE_OF_BIRTH, YEAR_OF_BIRTH, ADDRESS) VALUES ( 1000, 'Lukas', 'Eder', '1981-07-10', null, null );
;WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY DocumentID ORDER BY DateCreated DESC) AS rn FROM DocumentStatusLogs ) SELECT * FROM cte WHERE rn = 1
DELETE s.* FROM spawnlist s INNER JOIN npc n ON s.npc_templateid = n.idTemplate WHERE (n.type = "monster");
declare @id int = 1 ;with cte as ( select PARENTCUSTOMERID, 0 as level from CUSTOMER_PROFILE where CUSTOMERID = @id union all select t.PARENTCUSTOMERID, cte.level + 1 as level from CUSTOMER_PROFILE t inner join cte on t.CUSTOMERID = cte.PARENTCUSTOMERID ) select top 1 PARENTCUSTOMERID from cte order by level desc
SELECT * FROM TableA INNER JOIN TableB on (a.Value = b.Value or a.Value = dateadd(second,30,b.Value))
SELECT CONVERT(VARCHAR(15),CAST(sa.StartDateTime AS TIME),100
SELECT votes.*, items.name, items.price FROM votes JOIN items ON items.id = votes.item_id WHERE user_id = #user# AND item_id = #item# ORDER BY votes.utc_time DESC LIMIT 1 ;
SELECT 'INSERT INTO myschema.mynewtable SELECT * FROM ' || table_schema || '.' || table_name || ';' FROM information_schema.tables WHERE table_schema='myschema' AND table_name LIKE 'old%';
insert into user_role(user_id, role_id) select u.user_id, r.role_id from user u cross join role r;
IF @Version = '1.0' BEGIN --Drop it if it already exists IF OBJECT_ID('uspCreateAccount', 'P') IS NOT NULL EXEC ('DROP PROCEDURE uspCreateAccount') --Recreate it. EXEC(' CREATE PROCEDURE uspCreateAccount AS BEGIN --The rest of the code goes here END ') END
declare @batchSize int = 10000; do while(1=1) begin delete top(@batchSize) from ProductInfo where productId = @productId; if (0 = @@rowcount) break; end
where coalesce(date1,date2) between '2010-01-01' and '2011-01-01'
[Date Order Finished] = CONVERT (VARCHAR(16), GETDATE(),111) +' '+ CONVERT (VARCHAR(16), GETDATE(),108)
select* into #temp from table1 union select* from table2 select id,sum(ppic) as ppic, sum(pcrt) as pcrt from #temp group by id
SELECT * from Table WHERE ISNULL(c1) + ISNULL(c2) + ISNULL(c3) + ISNULL(c4) + ISNULL(c5) <= 2
declare newId number; begin select nvl(max(person.pk),0) + 1 into newId from person; for x in ( select w.Name, p.Address from wife w inner join Person p on w.Person_id = P.pk) loop insert into Person(pk, Name,Address,Is_Married) values (newId ,x.Name ,x.Address,'Y'); newId := newId +1; end loop; commit; end
SELECT serv.NAME, serv.product, serv.provider, serv.data_source, serv.catalog, prin.name, ls_logins.uses_self_credential, ls_logins.remote_name FROM sys.servers AS serv LEFT JOIN sys.linked_logins AS ls_logins ON serv.server_id = ls_logins.server_id LEFT JOIN sys.server_principals AS prin ON ls_logins.local_principal_id = prin.principal_id
SELECT p.post_id, p.content_status, p.post_title, c.comment_id, c.content_status AS comment_status FROM post p LEFT JOIN comment c ON p.post_id = c.post AND c.content_status = 'Approved' WHERE p.content_status = 'Approved'
select to_char(column_name, '000') from ...
require 'lib/myclass' before do $MysqlDB = Sequel.connect('mysql://user:password@host:port/db_name') end class Myclass def self.find_by_domain_and_stub(domain, stub) # use $MysqlDB here end end
SELECT User, ReferredBy, COUNT(*) cnt FROM tbl GROUP BY User, ReferredBy
select * from TableA where exists (select null from TableB where TableB.Col1=TableA.Col1)
ORDER BY (IF(title='team1', 1, IF(title='team2', 3, 2)))
SELECT * FROM ( SELECT Sparte , Region , SUM(Umsatz) as S_Umsatz FROM Fakten GROUP BY Sparte , Region ) d WHERE S_Umsatz >= 50000
DATEADD(DD, DATEDIFF(DD, 0, STARTTIME), 0) BETWEEN DATEADD(DD, DATEDIFF(DD, 0, <DATE_TIME_PARAMETER>), 0) AND DATEADD(DD, DATEDIFF(DD, 0, <DATE_TIME_PARAMETER>), 0)
;WITH Q as ( SELECT id, text, date, ROW_NUMBER() OVER (ORDER BY date) as RowNumber FROM t ) SELECT * FROM Q WHERE RowNumber = 3
ALTER TABLE table_name ( ADD CONSTRAINT valid_dates CHECK (date2 >= date1) )
select a.author_id, a.author_name, count(*) as number_of_books from authors a inner join books b on b.author_id = a.author_id group by a.author_id, a.author_name order by number_of_books
SELECT o.name TABLE_name, c.name colimn_name, c.max_length, t.name type FROM sys.columns c JOIN sys.objects o ON c.object_id=o.object_id AND o.type='U' JOIN sys.types t ON c.system_type_id=t.system_type_id
SELECT YEAR(`date`) AS `year`, MONTH(`date`) AS `month`, COUNT(*) AS amount FROM `table` GROUP BY YEAR(`date`), MONTH(`date`) ORDER BY `date` DESC
SELECT COUNT(*) AS TotalReceipt, Format(MakeDate, 'yyyy') AS [Year], SUM(Total) AS Amount FROM ( SELECT SaleNo, SUM(ItemQty * ItemPrice) AS Total FROM SalesDetail GROUP BY SaleNo) DetailSum INNER JOIN Sales ON Sales.SaleNo = DetailSum.SaleNo GROUP BY Format(MakeDate, 'yyyy')
SELECT dtime, temperature, avg_temperature FROM temperatures JOIN ( SELECT DATE(dtime) AS date_dtime, AVG(temperature) AS avg_temperature FROM temperatures WHERE dtime >= '2012-11-15' AND dtime < '2012-12-01' GROUP BY DATE(dtime) ) AS avg_t ON date_dtime = DATE(dtime) WHERE dtime dtime >= '2012-11-15' AND dtime < '2012-12-01' ORDER BY dtime DESC
SELECT products.* , CASE WHEN isMainUser=1 THEN MainUser.emailAddress ELSE SubUser.emailAddress END FROM tblProducts as products LEFT OUTER JOIN MainUser mu ON mu.UserProductID = products.UserProductID LEFT OUTER JOIN SubUser su ON su.UserProductID = products.UserProductID WHERE product.intID = @id
SELECT name FROM myTable GROUP BY name HAVING COUNT(name) = 1
SELECT CASE WHEN csuseragent LIKE '%MSIE+8.0%' or csuseragent like '%Trident%' THEN 'IE' WHEN csuseragent LIKE '%Firefox%' THEN 'Firefox' WHEN csuseragent LIKE '%chrome%' THEN 'chrome' END AS Browser ,count(*) as num FROM logs.log GROUP BY Browser HAVING Browser IS NOT NULL ORDER BY num DESC
SELECT ROUND(3381.5786, 2, 1)
SELECT orders.* FROM orders INNER JOIN order_items AS bonus_items ON (bonus_items.order_id = orders.id) WHERE DATE(DATE_ADD(orders.created_at, INTERVAL 4 HOUR)) >= '2013-12-02' AND DATE(DATE_ADD(orders.created_at, INTERVAL 4 HOUR)) <= '2013-12-02' AND orders.status = 'payed' GROUP BY orders.id HAVING count(*) = 1 and MIN(bonus_items.user_id) = 0;
Use Test;
SELECT date, COUNT(id) FROM users GROUP BY MONTH(date_registered).
select Territory, G1.Group_Description as desc1 , G2.Group_Description as desc2 , G3.Group_Description as desc3 , G4.Group_Description as desc4 from Territory T left outer join [Territory_Group] G1 on T.Group_ID1 = G1.Group_ID left outer join [Territory_Group] G2 on T.Group_ID2 = G2.Group_ID left outer join [Territory_Group] G3 on T.Group_ID3 = G3.Group_ID left outer join [Territory_Group] G4 on T.Group_ID4 = G4.Group_ID
select e.lastname, e.firstname from emp as e where e.employee_id not in ( select c.employee_id from contributions as c where c.date_stamp >= convert(datetime, '20121127', 112) )
SELECT Abs(Sum(lunch)) AS SumofLunch, Abs(Sum(snacks)) AS SumofSnacks, Abs(Sum(Tea)) AS SumofTea FROM YourTable WHERE eventDate >= #2009/08/01# And eventDate < #2009/09/01#;
select modeldescription, count(modeldescription) from products group by modeldescription order by 2 desc
ALTER TABLE YourTable add CONSTRAINT YourTable_unique UNIQUE (B, C, D);
select t1.id,t1.c, t2.id, t2.c FROM t1 LEFT JOIN t2 on t1.id=t2.id UNION select t1.id,t1.c, t2.id, t2.c FROM t2 LEFT JOIN t1 on t1.id=t2.id
DATE_FORMAT(b.fecha, '%m-%d-%Y') as fecha
DECLARE @List varchar(100) SELECT @List = COALESCE(@List + ', ', '') + CAST(Value AS varchar(10)) FROM Rule_X_ListType WHERE Rule_ID = 1 and ListType_ID = 2 SELECT @List
db.Books.find({ISBN : "1234567890" }, { title : 1 } );
SELECT s.id, s.name, s.jobID, w.wage FROM Staff s LEFT OUTER JOIN Wages w ON s.jobID = w.jobID
alter table teacher_student add constraint s_t_fk_t foreign key (T_Id) references teachers (id) on delete cascade on update cascade; alter table teacher_student add constraint s_t_fk_s foreign key (S_Id) references students (id) on delete cascade on update cascade;
SELECT tableb.Name, tableb.Surname, tablea.col1, tableb.col2 FROM table1 as tablea LEFT JOIN table2 as tableb ON (tablea.Name LIKE '%' + tableb.Name + '%' OR tableb.Name LIKE '%' + tablea.Name + '%') AND (tablea.Surname LIKE '%' + tableb.Surname + '%' OR tableb.Surname LIKE '%' + tablea.Surname + '%')
WITH t AS ( UPDATE products SET price = price * 1.05 RETURNING * ) SELECT p.*, t.price, (t.price - old.price) as diff FROM products p JOIN t ON p.productid = t.productid;
SELECT table1.x FROM table1 INNER JOIN table2 ON table1.y = table2.z GROUP BY table1.x HAVING COUNT(*) = (SELECT COUNT(*) FROM table2 AS lookup) AND COUNT(*) = (SELECT COUNT(*) FROM table1 AS lookup WHERE x = table1.x)
SELECT p.date_recorded as date_recorded, p.id, p.userid, p.status, w.user_nicename, w.user_login, w.display_name FROM wp_bbpas AS p JOIN wp_users AS w ON w.id = p.userid WHERE date_recorded >= NOW() - INTERVAL 24 HOUR and (p.userid, p.date_recorded) in ( select userid, MAX(date_recorded) from wp_bbpas group by userid) ORDER BY date_recorded DESC
SELECT DISTINCT a.artist FROM artists a INNER JOIN paintings p ON a.artistID = p.artistID ORDER BY p.date_created desc
SELECT docs FROM docs JOIN tags IN docs.tags WHERE tags IN ("B", "C")
SELECT [Event_Id] FROM [Processing].[Event] WHERE [RefEventTypeId] = 8 AND CONVERT(nvarchar(max), [Description]) LIKE '%' + (SELECT CONVERT(nvarchar(32), [Guid]) FROM [Security].[WebUser] WHERE Login = 'test') +'%'
select * from INFORMATION_SCHEMA.COLUMNS where TABLE_CATALOG = <my-db-name> and TABLE_SCHEMA = <table-owner-schema> and TABLE_NAME = <table-name> order by ORDINAL_POSITION
OPENQUERY (relDatabaseServer, 'SELECT name FROM example.titles WHERE name = ''NewTitle''');
SELECT * FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY report_id ORDER BY (SELECT 0)) AS RN FROM top_keywords WHERE ym BETWEEN '2010-05' AND '2010-05') TK WHERE RN <= 10
select (select count(1) from bill) + (select count(1) from items);
i = 0 while i < 20: i++ show full processlist delay 4 sec
SELECT homes.* FROM homes LEFT JOIN members ON (members.home_id = home.id) WHERE members.home_id IS NULL
DATA outTable; Set Mydata; if _n_=1 then Set coefs; /* calculation */ run;
select * from product where productId in(25,36,40,1,50) order by find_in_set(productId, '25,36,40,1,50');
INSERT INTO TABLE(NAME, time) VALUES('newName', time) ON DUPLICATE KEY UPDATE NAME = (case when values(time) > time then values(name) else name end), time = (case when values(time) > time then values(time) else time end);
TO_CHAR(pAmount, '9,999,999.99');
update child set seq_no = (select count(*) from child c2 where c2.parent_id = child.parent_id and c2.id <= child.id );
CREATE VIEW B AS (SELECT a,b,c FROM X)
select (case when x = cast(x as int) then cast(x as int) else 1 + cast(x as int) end)
Select ... From T1 Join T2 On T2.Col1 = T1.Col1 Join T3 On T3.Col2 = T2.Col2 Join P1 On P1.Col1 = T1.Col1 Join P2 On P2.Col1 = P1.Col1 Join P3 On P3.Col2 = P2.Col2 Left Join X1 On X1.Col1 = T1.Col1
select * from your_table where group_id in ( select group_id from your_table group by group_id having count(distinct service) = 1 )
SELECT CHARINDEX((CHAR(97), fruit) FROM MyTable
create table t1 ( c10 char(10) ); insert into t1 values ('davyjones'); select * from t1 where c10 = 'davyjones'; -- yields 1 row select * from t1 where c10 like 'davyjones'; -- yields 0 rows
SELECT * FROM human WHERE bornOnUtc >= '2013-01-01 00:00:00'
UPDATE some_table SET some_column = some_column || '_more_data';
SELECT d.date FROM days d WHERE NOT EXISTS (SELECT 1 FROM filter f WHERE d.date BETWEEN f.start and f.end_time );
1. user-[:write]->comment 2. comment-[:about]->hotdog 3. comment-[:concern]->restaurant 4.restaurant-[serve]->hotdog
SELECT name FROM ( SELECT name, 1 as matched FROM nametable WHERE name MATCH 'fast' UNION ALL SELECT name, 1 as matched FROM nametable WHERE name MATCH 'food' UNION ALL SELECT name, 1 as matched FROM nametable WHERE name MATCH 'restaurant' ) GROUP BY name ORDER BY SUM(matched) DESC, name
T1.Department | T1.Employees| T1.Managers | T2.Managers | T2.Employees | T2.Department --------------+-------------+-------------+-------------+--------------+-------------- A | John | Bob | Sam | Sue | A A | Sue | Sam | Bob | John | A
;with cte AS (SELECT *,ROW_NUMBER() OVER(PARTITION BY AccountNumber ORDER BY ValueDate) AS RN FROM YourTable) SELECT a.*,a.Amount - b.Amount AS Diff FROM cte a LEFT JOIN cte b ON a.AccountNumber = b.AccountNumber AND a.RN = b.RN -1
SELECT *, DENSE_RANK() OVER (ORDER BY CASE WHEN From_Airport < To_Airport THEN From_Airport ELSE To_Airport END) FROM mytable
select id, date, max(userid1) as userid1, max(userid2) as userid2 from table t group by id, date;
SELECT TOP 1 WITH TIES rep_lname, COUNT(cust_num) FROM customer inner join salesrep ON customer.REP_NUM = SALESREP.REP_NUM GROUP BY rep_lname ORDER BY count(cust_num) DESC
SELECT p.* FROM products p JOIN product_child pc1 ON pc1.product_id = p.product_id and pc1.product_size in (5,9) JOIN product_child pc2 ON pc2.product_id = p.product_id and pc2.product_size = 6
CREATE PROCEDURE add_case (case_id, ...) AS BEGIN EXECUTE IMMEDIATE 'ALTER TABLE OptimizationRun ADD partition...'; /* repeat for each child table */ INSERT INTO Case VALUES (...); END;
UPDATE t SET SomeId = NULL FROM (SELECT t.*, ROW_NUMBER() OVER (PARTITION BY t.SomeId ORDER BY t.SomeId) as seqnum FROM dbo.TableName t WHERE t.Status = 960 ) t JOIN @Quantities q ON q.SomeId = ie.SomeId;
SELECT Product.title, User.username, Order.id FROM Order INNER join Product ON Order.ProductID = Product.ID INNER JOIN user ON Product.UserID = User.ID
GRANT SELECT ON DSN8A10.EMP TO SOME_USER; GRANT UPDATE (EMPNO, WORKDEPT) ON TABLE DSN8A10.EMP TO SOME_USER;
SELECT suborgs.* FROM wp_postmeta suborgs JOIN (SELECT '152' as post_id UNION ALL SELECT '162' UNION ALL SELECT '156' UNION ALL SELECT '154' UNION ALL SELECT '152' UNION ALL SELECT '162' ) p ON suborgs.meta_key = 'product_relationship' AND suborgs.post_id = p.post_id;
$stmt->bindParam('bind_var', $counter, SQLT_INT);
SELECT COALESCE(a.ID, B.ID) As ID, a.Value1, b.Value2 FROM TableA a FULL OUTER JOIN TableB b ON a.ID=b.ID
select u.ID, u.Name, case when p.value>0 then 'True' else '' end as IsPermissionEnabled from Users u left join permission p on p.UserID = u.ID and p.key='CanEdit'
select id, max(field1) as field1, max(field2) as field2, max(field3) as field3, max(field4) as field4, max(field5) as field5 from yourtable group by id;
UPDATE "Table A" AS A1 SET Col2 = ( SELECT 'Same as ' + MIN(A2.Col1) FROM "Table A" AS A2 WHERE A2.Col2 = A1.Col2 AND A2.Col1 < A1.Col1 ) WHERE EXISTS ( SELECT 1 FROM "Table A" AS A2 WHERE A2.Col2 = A1.Col2 AND A2.Col1 < A1.Col1 )
delete from news where idnews not in ( select idnews from ( select idnews from news join ( select title, text, min(date) as min_date from news group by title, text ) x on news.title = x.title and news.text = x.text and news.date = x.min_date ) a );
SELECT `values` FROM names WHERE `values` LIKE '\%%'
select name, min(datetime), max(datetime) from (select t.*, sum(case when name <> prevname then 1 else 0 end) over (order by datetime) as cnt from (select t.*, lag(name) over (order by datetime) as prevname from table t ) t ) t group by name, cnt;
select fName, sName, sum(convert(int, awards)) as awards, sum(convert(int, smart)) as smart, max([date]) as maxdate from tablename group by fName, sName
Select * from Employee as E Join EmployeeDate as ED on E.EmployeeID = ED.EmployeeID Join DateTable D on D.Dateid = ED.Dateid Where D.fulldate = <your full Date>
[Forms]![Enter Data]![comboCup] [Forms]![Enter Data]![comboCup].Value
Select b.BookingID, c.CustName + ' ' + c.CustEmail + ' ' + c.CustAdd As Cust from Booking b INNER JOIN Customer c ON b.CustID = c.CustID
DECLARE @ColNames VARCHAR(1000) SELECT @ColNames = COALESCE(@ColNames+', ', '') + QUOTENAME('tableName.'+NAME,'[') FROM SYS.COLUMNS WHERE OBJECT_id = OBJECT_id('tableName') SELECT @ColNames
SELECT a.id FROM applicant a JOIN applicantdeployment ad ON a.id = ad.applicantid JOIN ApplicantAttachment at7 ON a.id = at7.applicantid AND at7.tag = 7 JOIN ApplicantAttachment at8 ON a.id = at8.applicantid AND at8.tag = 8 WHERE a.applicanttype = 'TCN/LN' AND ad.groundlocation IN (4,8,14) AND ad.deploymentstatus = 1 AND ad.trainingdeploymentstatus = 6
WITH FilterOrders AS ( SELECT * , MinDatePrio = ROW_NUMBER() OVER (PARTITION BY YEAR(OrderDate), MONTH(OrderDate) ORDER BY OrderDate, PurOrderNum) , MaxDatePrio = ROW_NUMBER() OVER (PARTITION BY YEAR(OrderDate), MONTH(OrderDate) ORDER BY OrderDate DESC, PurOrderNum DESC) FROM Purchasing.PurOrder WHERE OrderDate BETWEEN '2013-02-28' AND '2014-12-29' ) SELECT PurOrderNum, OrderDate FROM FilterOrders WHERE MinDatePrio = 1 OR MaxDatePrio = 1
SELECT * FROM ( SELECT PONumber, count(RequestNumber) as "InNumOfRequests", sum(Amount) as "SumofAmounts" FROM tableView GROUP BY PONumber ) a, ( SELECT DISTINCT PONumber, (10 * ceiling((DATEDIFF(day, POApprovedDate, GETDATE()))/10)) AS "BINofDaysSincePOApproved" FROM tableView ) b WHERE a.PONumber = b.PONumber
ALTER TABLE TableName DROP COLUMN ColumnName;
UPDATE products SET update_id = '550b8d7f3ba477.82670719', date_update_started = UTC_TIMESTAMP() WHERE date_update_started < UTC_TIMESTAMP() - INTERVAL 1 HOUR AND updated = 1 ORDER BY some_date LIMIT 100
CREATE TRIGGER t BEFORE INSERT ON mytable FOR EACH ROW BEGIN IF COALESCE(NEW.email, NEW.phone_number) IS NULL THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Either email or phone_number must be non-null'; END IF; END
public partial class UserDefinedFunctions { [Microsoft.SqlServer.Server.SqlFunction(DataAccess = DataAccessKind.None, IsDeterministic = true)] public static SqlBoolean RegexMatch(string Pattern, string Expression) { return new Regex(Pattern).IsMatch(Expression); } };
SELECT gl.gameid, gl.type, ..., ul.userid, ul.username FROM ( SELECT gameid FROM game2users WHERE userid = a_certain_numeric_id ) AS ug INNER JOIN gamelist AS gl ON ug.gameid = gl.gameid INNER JOIN game2users AS g2u ON ug.gameid = g2u.gameid INNER JOIN userlist AS ul ON g2u.userid = ul.userid
select player, sum(case when result = 0 then 1 else 0 end) as result_00, sum(case when result = 1 then 1 else 0 end) as result_01, . . . sum(case when result = 50 then 1 else 0 end) as result_50 from t group by player;
WITH t AS ( SELECT InfoDate d,ROW_NUMBER() OVER(ORDER BY InfoDate) i FROM @d GROUP BY InfoDate ) SELECT MIN(d),MAX(d) FROM t GROUP BY DATEDIFF(day,i,d)
create trigger dbo.something after insert as begin if exists ( select * from inserted where ...check here if your data already exists... ) begin rollback transaction raiserror ('some message', 16, 1) end end
UPDATE Users u SET ValueToUpdate = 'some value' WHERE EXISTS (SELECT 1 FROM Subscribers S WHERE s.userid = u.userid);
select ename as name, sal as salary, (case when sal = max(sal) over () then 'max' when sal = min(sal) over () then 'min' end) as MaxOrMin from emp;
CREATE TABLE primary_entity ( id numeric PRIMARY KEY, -- some data fields ); CREATE TABLE weak_entity ( id numeric PRIMARY KEY REFERENCES primary_entity(id) ON DELETE CASCADE, -- some data fields );
select count(1) from YourTable where (@start < End and @end > Start)
words (w_id int, w_word varchar(50)) categories (c_id int, c_category) wordcategories (wc_wordid int, wc_catid int)
SELECT l.first_name, l.last_name, l.id, group_concat(n.name), n.description FROM leads AS l inner join notes as n on l.id = n.parent_id where l.deleted = 0 and n.deleted = 0 and l.id='104c4b25-adab-32f3-16ee-50d098a5dd5d' group by l.id
SELECT name FROM CONTACT_LIST WHERE mblDc || mbl = "+8801617634317";
SQL> DECLARE 2 blood_type CHAR DEFAULT 'O'; -- Same as blood_type CHAR := 'O'; 3 4 hours_worked INTEGER DEFAULT 40; -- Typical value 5 employee_count INTEGER := 0; -- No typical value 6 7 BEGIN 8 NULL; 9 END; 10 / PL/SQL procedure successfully completed. SQL>
WHERE ad.AdvertisementID IN (SELECT AdvertisementID FROM UDF_GetAdvertisements)
select product, max(case when rn = 1 then supplier end) as supplier_1, max(case when rn = 2 then supplier end) as supplier_2, -- ... -- max(case when rn = n then supplier end) as supplier_n, avg(price) as price, sum(qty) as sum from(select t.*, row_number() over (partition by product order by supplier) rn from your_table t ) group by product;
Select code-id, 'added' result from a Except Select code-id, 'added' result from b Union all Select code-id, 'removed' result from b Except Select code-id, 'removed' result from a Union all Select code-id, 'changed' result from a join b on a.code-id = b.code-id Where a.code-name-1 != b.code-name-1 or a.code-name-2 != b.code-name-2
WITH condition AS ( SELECT SUBSTRING(c.SplitValue, 1, 3) Criteria FROM dbo.fncSplit('111-1,112-2,113-3,114-4,115-1,116-1', ',') c ) SELECT SUM(t.QTY) FROM dbo.tblTest t INNER JOIN condition con ON con.Criteria = SUBSTRING(t.Value1, 1, 3)
SELECT CASE P.Type WHEN 'Individual' THEN P.Amount ELSE NULL END AS Salary, CASE P.Type WHEN 'Individual' THEN NULL ELSE P.Amount END AS Profit FROM Person p
SELECT * FROM test_table AS D0 WHERE ( SELECT TOTAL( file_size ) FROM test_table AS D1 WHERE D1.file_time < D0.file_time OR ( D1.file_time = D0.file_time AND D1.file_id <= D0.file_id ) ORDER BY file_time, file_id DESC ) BETWEEN 1 AND 9
select survey.worker_id, (Select Value from Code where ID = survey.code_number_of_days_id) as No_of_Days, (Select Value from Code where ID = survey.code_gender) as Gender, Info.Name, (Select Value from Code where ID = Info.code_category_id) as Category, (Select Value from Code where ID = Info.code_confirmed_status_id) as Confirmed, from Survey full outer join Info on Survey.worker_id = Info.id
SELECT t1.WO, t1.x - t2.x, t1.y - t2.y, t1.z - t2.z, t1.date FROM tab AS t1 JOIN ( SELECT tab.*, ROW_NUMBER() OVER (PARTITION BY WO ORDER BY date) AS rn FROM tab ) AS t2 ON t1.WO = t2.WO AND t1.date <> t2.date AND t2.rn = 1
Private Sub SearchButton_Click() Me.Subform_Name_Here.Form.Requery End Sub
ISNULL(CAST(SUBSTRING(BI.dbo.SKU.phl5,0,3) AS VARCHAR(13)),'Uncategorized') AS phl1
SELECT TRUNC(stoptime,'HH'), sum(eventcapacity) FROM yourtable GROUP BY TRUNC(stoptime,'HH');
begin htp.p('your textual content as respond body'); end
ArtistFans ArtistID (PK) UserID (PK)
select c.user from c group by c.user having sum(case when c.options = 'TA' then 1 else 0 end) > 0 and sum(case when c.options = 'PT' then 1 else 0 end) = 0
select ProductID, (inv.Inventory + s.Sales) as BalanceInventory from ( select ProductID, Inventory from [table] where xxx ) inv left outer join ( select ProductID, Sales from [table] where xxx ) s on (s.ProductID = inv.ProductID)
select exists ( select 1 from unnest(array[1, null]) s(a) where a is null ); exists -------- t
edit c:\users\dibya\projects\erp\logindetails.sql
SELECT t11.*,t12.*,t2.* FROM t2 LEFT JOIN t1 as t11 ON t1.ID = t2.ID1 LEFT JOIN t1 as t12 ON t12.ID = t2.ID2
WITH max_table as ( SELECT uid, max(timestamp) - 10000 as mx FROM listens GROUP BY uid ) DELETE FROM listens WHERE timestamp < (SELECT mx FROM max_table where max_table.uid = listens.uid);
select admissionId, calendarid, admitTime= (select top(1) admitTime from activity a1 where a1.admisionID=a.admissionID and a1.calendarID=a.calendarid), dischargeTime= (select top(1) dischargeTime from activity a1 where a1.admisionID=a.admissionID and a1.calendarID=a.calendarid) from activity a where calendarid=100
Cursor mCursor = db.query(true, DATABASE_TABLE, new String[] { KEY_id, KEY_ques,KEY_correctans,KEY_wrongans1,KEY_wrongans2,KEY_wrongans3,KEY_subject,KEY_subjectid }, KEY_id + "=" + rowId + " AND " + KEY_subjectid + "=" + subId,null, null,null, null,null);
DBMS_AQADM.CREATE_QUEUE_TABLE ( queue_table => 'aq.priority_msg', sort_list => 'PRIORITY desc,ENQ_TIME', queue_payload_type => 'aq.Message_typ');
select TO_CHAR(LAST_DAY(ADD_MONTHS(last_day(SYSDATE),-level)),'DD-MM-YYYY') month from dual connect by level<4;
declare @theName char(25) select @theName = 'dave' SELECT p.id, p.name FROM parent p LEFT OUTER JOIN child c -- OUTER in case there's no children ON p.id = c.parentid INNER JOIN grandchild g -- INNER because you say there's always children ON c.id = g.parentid WHERE p.name = @theName OR c.name = @theName OR g.name = @thename GROUP BY p.id, p.name -- GROUP BY to combine multiple hits
SELECT A.id, COALESCE( ( SELECT max(B.title) FROM B WHERE langcode = 'nl' AND B.table_a_id = A.id), A.name ) as name FROM A WHERE A.id = 5
INSERT INTO delete_subscriber (SubID,RandomCode,Email,FirstName,LastName, CreateDate,UpdateDate,DeleteDate,DeletingPerson) SELECT s.SubID,s.RandomCode,s.Email,s.FirstName,s.LastName, s.CreateDate,s.UpdateDate,NOW(),? FROM subscriber s , list_sub WHERE list_sub.ListID=? AND list_sub.SubID=s.SubID;
select * from ( .... here goes your statement ... ) t order by case STATUS when 'IN' then 1 when 'OUT' then 2 when 'FINISHED' then 3 end
AND (NVL(T.Col_One,'NuLl') NOT LIKE 'AString' OR NVL(T.Col_Two,'NuLl') NOT IN ('BString','CString'))
SELECT COUNT( DISTINCT user.id ) AS user FROM profile join user on user.id=profile.user_id WHERE ( profile.age BETWEEN 0 AND 14 ) AND user.enabled =1
[ColumnName] AS CASE WHEN (the formula for overall) <= 40 THEN 'fail' ELSE 'pass' END
SELECT t.Date, t.Visits, t.Purchases, SUM(r.Visits) AS CumVisits, SUM(r.Purchases) AS CumPurchases, SUM(r.Purchases)*1.0/SUM(r.Visits) AS Ratio FROM t JOIN t AS r ON r.Date BETWEEN SUBSTR(t.DATE, 1, 4) AND t.Date GROUP BY t.Date
SELECT pt.post_id FROM SEARCH s INNER JOIN post_tag pt ON pt.tag_id = s.tag_id AND pt.value = s.value GROUP BY pt.post_id HAVING COUNT(*) = (SELECT COUNT(*) FROM SEARCH)
SELECT re1.occured_at as started_at, re2.occured_at as finished_at, (re2.occured_at - re1.occured_at) as race_time, p.id, p.membership_id, p.race_id participant_id FROM PARTICIPANTS p INNER JOIN RACE_EVENTS re1 ON re1.participant_id = p.id AND re1.event_type = 'start' INNER JOIN RACE_EVENTS re2 ON re2.participant_id = p.id AND re2.event_type = 'finish'
var s = PetaPoco.Sql.Builder.Append("EXEC SP_FindCust @@last_name = @0", lname); s.Append(", @@first_name = @0", fName), s.Append(", @@last_name = @0", lName), s.Append(", @@dob = @0", dob); return db.Query<Cust>(s);
SELECT country, COUNT(country) as total FROM user GROUP BY country order by total desc
$parse_result = oci_parse($conn,$query_ora_update); $result = oci_execute($parse_result); $row_count = oci_num_rows($parse_result); oci_commit($conn); if($row_count > 0) { -------------------
INSERT INTO `closure_new` (subtypeId, subtype_effectiveTime, supertypeId, supertype_effectiveTime) SELECT subCon.id, subCon.effectiveTime, superCon.id, superCOn.effectiveTimed.effectiveTime FROM closure o, concept subCon, concept superCon where subcon.Id = o.subtypeId and supercon.Id = o.supertypeId
select * from table_1 t1 inner join table_2 t2 on t1.url like concat('%',t2.compname, '%')
select t1.*, ISNULL(t2.c, 0) AS CountOfB from table1 t1 left join ( select parttypes_uid_fk, count(*) c from table2 group by parttypes_uid_fk ) t2 on t2.PartTypes_uid_fk=t1.uid
$installer = new Mage_Catalog_Model_Resource_Setup(); $installer->startSetup(); $products = Mage::getModel("catalog/product")->getCollection()->addAttributeToSelect('*'); foreach($products as $product) { $product->setManufacturer(...); $product->save(); } $installer->endSetup();`
(from p in ctx.Products join c in cts.ProductsToCategories on c.ProductId join c2 in cts.ProductsToCategories on c.CategoryId = c2.CategoryId join p2 in ctx.Products on c2.ProductId = p2.id where p2.Id == id && p2 != p orderby p).FirstOrDefault();
SELECT p.weeknum, dateadd(day, n.n, p.date) as date, q.Key, q.ID, q.Score FROM tblWeeks p cross apply fnBenchmarkData(p.weeknum) q cross join (select 0 as n union all select 1 as n union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 ) n;
MERGE INTO contactassociations ca1 USING contactassociations ca2 ON ( ca1.contactid = ca2.contactid AND ca1.entitytable = 'EMPLOYER' AND ca2.entitytable = 'CLIENT' ) WHEN MATCHED THEN UPDATE SET parentid = ca2.id
SELECT col, COUNT(dupe_col) AS dupe_cnt FROM TABLE GROUP BY col HAVING COUNT(dupe_col) > 1 ORDER BY COUNT(dupe_col) DESC
select * from table where tableid in(select tableid from table1 where tableid like '%this%')
SELECT p.prod_id FROM products p LEFT JOIN product_keywords pk ON p.prod_id = pk.prod_id LEFT JOIN valid_keywords vk ON vk.keyword_id = pk.keyword_id GROUP BY p.prod_id HAVING COUNT(vk.keyword_id) = COUNT(pk.keyword_id); +---------+ | prod_id | +---------+ | 2 | | 4 | +---------+
INSERT INTO vartemp (SQLSyntax) VALUES ('UPDATE RegExample SET Field1 = ''abc'', Field2 = 123 WHERE whereCond1 = ''abc''')
CREATE TRIGGER application_limit_trigger ON ALL SERVER WITH EXECUTE AS '...' FOR LOGON AS BEGIN IF EXISTS (SELECT * FROM sys.dm_exec_sessions WHERE session_id = @@SPID AND program_name IN (N'Bad Program', N'Worse Program', N'Unmentionable') ROLLBACK; END;
select SUBSTR('350 M', 0, LENGTH('350 M') - 1) from dual;
MERGE INTO dates_temp_table trgt USING (SELECT * FROM master_dates_table WHERE e_id=100) src ON (trgt.prm_key = src.prm_key) WHEN NOT MATCHED THEN INSERT (trgt.col, trgt.col2, trgt.status) VALUES (src.col, src.col2, 'Modified');
create view Sample as select col_1, col_2, col3 from Sample_Table where Data_Owner = USER;
SELECT * FROM posts P INNER JOIN friends F ON P.id_user = F.id_friend WHERE F.id_user = :some_id_user
Select cityname, count(distinct userID) from User u inner join Person p on u.personID = p.personID inner join Adresse a on p.addressID = a.addressID inner join City c on a.cityID = p.cityID group by cityName
insert into table2 (Xid, configKey, ConfigVal) select id, 'doSomething', 'true' from table1
SELECT addeddate FROM status WHERE addeddate <= NOW() - INTERVAL 29 DAY
select NO, listagg(NAME, ',') within group (order by NAME) as name from TableName group by NO
ALTER TRIGGER dbo.OrderApprovedSms ON dbo.[Order] AFTER UPDATE AS BEGIN SET NOCOUNT ON; /*How can check approve date is updated*/ IF (UPDATE (ApproveDate)) BEGIN INSERT INTO office.SmsSendBuffer ( Number , Body ) SELECT 'xxxxxx','ORDER APPROVED!' END END
BEGIN FOR t IN (SELECT table_name, num_rows FROM user_tables) LOOP dbms_output.put_line( 'Table ' || t.table_name || ' has ' || t.num_rows || ' rows.' ); END LOOP; END;
SELECT date, product FROM ( SELECT date,SUM(orders.product) AS product FROM orders GROUP BY MONTH(date),YEAR(date) UNION select datefield AS date, '0' AS product from calendar WHERE (calendar.datefield BETWEEN (SELECT MIN(DATE(date)) FROM orders) AND (SELECT MAX(DATE(date)) FROM orders)) GROUP BY MONTH(date),YEAR(date) ) AS a GROUP BY MONTH(date),YEAR(date) ORDER BY date
DECLARE CURSOR ora_obj_rows IS (SELECT * FROM ALL_OBJECTS WHERE OWNER = '&owner_user' AND OBJECT_NAME LIKE 'ORA_ASPNET%' AND OBJECT_TYPE IN ('TABLE', 'PACKAGE', 'FUNCTION')); BEGIN FOR ora_obj IN ora_obj_rows LOOP EXECUTE IMMEDIATE 'CREATE SYNONYM "' || '&login_user' || '"."' || ora_obj.OBJECT_NAME || '" FOR "' || '&owner_user' || '"."' || ora_obj.OBJECT_NAME || '"'; END LOOP; END; /
SELECT DISTINCT t1.Ebeln, t2.Ebelp, t1.Ekorg, t2.belnr, t3.netpr FROM TABLE1 t1 RIGHT JOIN TABLE2 t2 ON t1.EBELN = t2.EBELN FULL JOIN table3 t3 ON t2.belnr = t3.belnr
SELECT Code, COUNT(Col_A) count_column_x, COUNT(Col_B) count_column_y FROM [your:list.of_codes] a LEFT JOIN EACH [your:sample.table] b ON a.Code=b.Col_A GROUP BY 1
countytable: state|county a aa a ab a ac b ba SELECT AVG(counties) FROM (SELECT state, COUNT(county) as counties FROM countytable GROUP BY state) as temp
SELECT CONVERT(NVARCHAR(MAX), @param); SELECT CAST(@param AS NVARCHAR(MAX));
WITH temps as ( SELECT city_id, date, high_temp, ROW_NUMBER() OVER (PARTITION BY city_id ORDER BY date DESC) RowNum FROM TemperatureHistory <-- use the real table name here ) SELECT city_id, date, high_temp FROM temps WHERE RowNum <= 3
SELECT OBJECT_SCHEMA_NAME(object_id) AS schema_name , name FROM sys.tables WHERE name LIKE '%[_]13[_]6[_]14%'; SELECT TABLE_SCHEMA , TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE '%[_]13[_]6[_]14%';
select firstname, lastname, scheduled, posted, eventadded from (select rs.*, row_number() over (partition by firstname, lastname order by (case when eventadded is not null then 1 else 2 end) ) as seqnum from ResultSet rs ) rs where seqnum = 1;
SELECT Schedule_ID FROM TBL_SCHEDULE WHERE CARD_NO = 1000058 AND yourDate BETWEEN FromDate AND ToDate
CASE WHEN (LEN(PartnerID) = 5 AND (PartnerID LIKE '11%' OR PartnerID LIKE '22%')) THEN stuff(PartnerID, 1, 2, '00') ELSE CONVERT(VARCHAR(5), PartnerId) END AS PartnerID
SELECT t.Email , t.StoreID FROM TransactionData t WHERE EXISTS (SELECT 1 FROM Subscribers WHERE t.Email = Email) AND NOT EXISTS (SELECT 1 FROM TransactionData WHERE t.Email = Email AND StoreID <> 50001) GROUP BY t.Email , t.StoreID
SELECT AVG(Price) AS PriceAverage FROM Products WHERE mfr = 'particularManufacter'
to_date('02/10/2015', 'mm/dd/yyyy')
SELECT DATE_FORMAT(date, '%Y-%m-01') as Months from Table GROUP BY Months;
SELECT player, COUNT(player) as count FROM ( SELECT homepom AS player FROM matches WHERE homepom IS NOT NULL AND homepom != '' AND league_id = xxx AND other_things UNION ALL SELECT awaypom AS player FROM matches WHERE awaypom IS NOT NULL AND awaypom != '' AND league_id = xxx AND other_things ) as players GROUP BY player ORDER BY count DESC LIMIT 5
SELECT UPDATE_RULE, DELETE_RULE FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME = 'FK_YourForeignKey';
select id, count(*) as multiplicity, if (count(*) > 1, 0, if(max(good) = 't', 1, 0)) as goodN from ...
SELECT CAT.AccountNo, SUM(CASE WHEN CAT.Balance1 <> 0 OR ISNULL(SAT.Balance2,0) <> 0 THEN 1 ELSE 0 END) CountTransactionId, SUM(CASE WHEN CAT.Balance1 <> 0 OR ISNULL(SAT.Balance2,0) <> 0 THEN CAT.Balance1+SAT.Balance2 ELSE 0 END) SumBalance1Balance2 FROM CAT LEFT JOIN SAT ON CAT.BalanceId = SAT.BalanceId
SELECT O.name, GROUP_CONCAT(SO.name) subOptionName FROM Options O LEFT JOIN SubOptions SO ON O.id = SO.option_id GROUP BY O.name;
SELECT date, SUM(CASE WHEN facility = 3 THEN 1 ELSE 0 END) `Facility 3 Count`, SUM(CASE WHEN facility = 1 THEN 1 ELSE 0 END) `Facility 1 Count` FROM badge WHERE xtype = 19 AND date BETWEEN 'some_date' AND 'some_date' GROUP BY date
select top n ... from ( select ... from table where ... order by ... )
SELECT invTypes.*, item_value.* FROM item_value INNER JOIN ( SELECT MAX(updated_on) AS `updated_on` FROM item_value GROUP BY DATE(updated_on) ) latest ON latest.updated_on = item_value.updated_on INNER JOIN invTypes ON invTypes.typeID = item_value.typeID ORDER BY item_value.updated_on
select u.userId, l.LastDayofMonth, coalesce(t.cnt, 0) as cnt from (select distinct userId from t) u cross join (select distinct LastDayofMonth from t) l left join t on t.userId = u.userId and t.LastDayofMonth = l.LastDayofMonth;
ALTER TABLE [dbo].[tblEventTurnJudgeStartValues] WITH CHECK CHECK CONSTRAINT [tblEventTurnJudgeStartValues_ExecutionToggle]
SELECT * FROM table2 WHERE table2.id NOT IN (SELECT DISTINCT table1.id FROM table1 WHERE table1.checkin > sysdate OR table1.checkout > sysdate) AND table2.id IN (SELECT DISTINCT table1.id FROM table1)
merge table2 as tgt using ( select * from table1 where logid in ( --Get the row which has the last status for that user-service combination select distinct max(logid) over (partition by userid, serviceid order by userid,serviceid) mid from table1) ) as src on tgt.userid = src.userid and tgt.serviceid = src.serviceid when matched then update set tgt.[status] = src.[status] when not matched then insert (userid,serviceid, [status]) values(src.userid, src.serviceid, src.[status]);
UPDATE Table SET Checked='Y' WHERE ID =(SELECT ID FROM Table WHERE Checked='N' ORDER BY ID LIMIT 1)
db.oshibka.remove( { date : { $lt : <now-900> } } )
SELECT atc.TABLE_NAME, atc.DATA_TYPE, count(distinct atc.column_name) cols, count(distinct acc.constraint_name) cons FROM all_tab_columns atc INNER JOIN all_cons_columns acc ON acc.COLUMN_NAME = atc.COLUMN_NAME AND acc.TABLE_NAME = atc.TABLE_NAME WHERE atc.OWNER = 'PARRANDEROS' GROUP BY atc.DATA_TYPE, atc.TABLE_NAME;
Select * From Tab1 Left Join Tab2 on Tab1.CompID = Tab2.CompID Where (Tab2.Status = 'open' or Tab2.Status is null) and Tab1.CompDate = '2012-03-02'
SELECT table_name FROM user_tab_cols WHERE column_name = 'IS_REVIEW_APPEALS'
SELECT DISTINCT m.id, m.name, m.description FROM menu_categories m JOIN dishes d ON d.menu_id = m .id
UPDATE System SET Value = (CASE WHEN Variable = 'Username' THEN 'myuser' WHEN Variable = 'Password' THEN 'mypass' END) WHERE Variable = 'Username' or Variable = 'Password'
select extract(hour from occurred) as hr, count(distinct name) from table t group by extract(hour from occurred) order by 1
SELECT * FROM users WHERE CHARINDEX(CHAR(6), CompanyName) <> 0
alter table toy_store ADD CHECK (EXTRACT(HOUR FROM store_opening_time) > 8 || NULL);
item_id (Foreign Key) category_id (Foreign Key)
SELECT INTERVAL '1 second' * 50000000000;
SELECT YEAR(T.TransactionDate) AS [YEAR], MONTH(T.TransactionDate) AS [MONTH], COUNT(T.Id) AS Transactions, SUM(CASE WHEN P.ProductType = 1 THEN 1 ELSE 0 END) AS TransactionsType1 FROM [Transaction] T INNER JOIN Product P ON P.Id = T.ProductId GROUP BY T.DepartmentId, YEAR(T.TransactionDate), MONTH(T.TransactionDate);
SELECT t.`Type 1`, t.`Type 2`, t.`Type 3`, (t.`Type 1` + t.`Type 2` + 2*t.`Type 3`) AS Total FROM ( SELECT FamID AS Family, SUM(CASE WHEN TicketType = 1 THEN Amt ELSE 0 END) AS `Type 1`, SUM(CASE WHEN TicketType = 2 THEN Amt ELSE 0 END) AS `Type 2`, SUM(CASE WHEN TicketType = 3 THEN Amt ELSE 0 END) AS `Type 3`, FROM Tickets GROUP BY FamID ) t ORDER BY t.Total DESC
SELECT t1.messageID, fromName.displayName as fromDisplayName, toName.displayName as toDisplayName FROM table1 t1 JOIN table2 t2 ON t1.messageID = t2.messageID JOIN table3 fromName ON t1.fromID = fromName.id JOIN table3 toName ON t2.toID = toName.id
Users.id | .name | .birthdate | .Gender | .someotherfixedattribute ---------------------------------------------------------- 1743 | Me. | 01/01/1970 | M | indeed Propertytpes.id | .name ------------------------ 234 | pet 235 | hobby Poperties.uid | .pid | .content ----------------------------- 1743 | 234 | Husky dog
SELECT customerID, lastName, firstName, companyName, email, citizenship, primaryLanguage FROM customers JOIN citizenships USING (citizenshipID) JOIN languages USING (languageID) LEFT JOIN paymentMethods USING (customerID) WHERE customerID = "1"
SELECT * FROM members a WHERE NOT EXISTS ( SELECT 1 FROM team_members b WHERE b.member_id = a.member_id )
MAX(<ShopId case clause>) OVER() as ShopId
SELECT agg_article_title,agg_article_link,agg_article_media,agg_article_description,agg_article_source_name, agg_source_tag_tag_name, agg_source_url FROM agg_article join agg_source ON agg_article_source_name = agg_source_name join agg_source_tag ON agg_source_name = agg_source_tag_source_name WHERE agg_source_included = 1 GROUP BY agg_article_title, agg_article_link
SELECT * FROM tableA WHERE (CASE priceType WHEN 1 THEN price WHEN 2 THEN price * (800000 / 1000) END) <= $price
select a.id "id", null "message", a.cityname "city", a.countryname "country", a.street "street", a.datecreated "dt" from dbo.appraisal a union all select s.id, s.message, null, null, null, s.datecreated from dbo.sub_appraisal s order by 6
insert into table2 (id, f1, f2, f3, f4, fdate, farbitrary) select id, field1, field2, field3, field4, SYSDATE, 'I put what I want here') from table1
SELECT p.id, p.name, CASE WHEN pp.Id IS NOT NULL THEN 'TRUE' ELSE 'FALSE' END AS ExistProjP FROM Project p LEFT JOIN ProjectPeople pp ON (pp.idProject = p.id AND pp.idPeople = @IDPEOPLE)
SELECT t, SUM(weight) AS sWeight FROM p_to_t WHERE p IN(1,2,4,5) GROUP BY t
SELECT ST.* , E.data, E.status FROM `students` ST LEFT JOIN `table2` E ON E.id_student=ST.id_student and E.data LIKE '$year-$month-%' WHERE ST.class='$class' ORDER BY ST.surname, ST.name, E.data
FROM Project, Member m, ProjectIterationMember, ProjectIterationID pid WHERE m.CompanyRole = 'Project Manager' AND Project.CompanyID = '" + co_id + "' AND m.MemberID = ProjectIterationMember.MemberID AND pid.projectIterationID=ProjectIterationMember.ProjectIterationID AND pid.ProjectID=Project.ProjectID`
select GROUP_CONCAT(columnName order by someColumn SEPARATOR '|') from tableName where fieldId = p.id
Dim strSQL As String = "If Not Exists (" & _ "Select * From tblDetail " & _ "Where PersonId = " & strPersonID & ")" & _ "INSERT INTO tblDetail VALUES('" & strPersonID _ & "','" & strForename & "','" & strSurname & "','" & strDateOfBirth & "'," & strCurrentlyWith & ",'" & strConditions & "')"
with todelete as ( select id, row_number() over (partition by GUID order by timestamp) as seqnum from mytable where GUID = 'xxx' ) delete from mytable where id in (select id from todelete where seqnum > 10);
SELECT Col1 = Col.value('(/XMLDoc/AAA/Value)[1]', 'varchar(255)') , Col2 = Col.value('(/XMLDoc/AAA/Value)[2]', 'varchar(255)') , Col3 = STUFF( (SELECT ',' + x.value('(Value)[1]', 'varchar(50)') FROM Col.nodes('/XMLDoc/AAA[position()>2]') AS Node(x) FOR XML PATH('')), 1, 1, '') FROM table
CREATE FUNCTION [dbo].[spsRouteRules_getNewNumber](@oldNumber NVARCHAR(15)) RETURNS NVARCHAR(15) AS BEGIN SET NOCOUNT ON; RETURN ISNULL(SELECT TOP 1 newTellNo FROM changedPhones WHERE oldTelNo = @oldNumber),0); END
SELECT orders.ID, orders.Quantity, items.Desc, stores.store_name, projects.Project_no FROM orders join items on items.item_id=orders.item_id join stores on stores.store_id=orders.store_id join projects on projects.project_id=orders.project_id
Select (select top 1 fieldname from table1 where id=mastertable.id order by fieldnamesort) result from mastertable.
SELECT country.country, count(customer_details.customer_id) AS customer_count FROM country INNER JOIN customer_details ON customer_details.country_id = country.country_id GROUP by country.country ORDER by country.country;
SELECT 'ALTER TABLE ' + TABLE_NAME + ' ALTER COLUMN ' + COLUMN_NAME + ' INT ' + CASE when IS_NULLABLE = 'NO' THEN 'NOT' END + ' NULL' + char(13) + 'GO' FROM INFORMATION_SCHEMA.COLUMNS WHERE DATA_TYPE = 'bigint'
CREATE TABLE Tasks( Practical_ID INTEGER NOT NULL REFERENCES Practicals(PracticalID), TaskNo INTEGER NOT NULL, Task_Topic TEXT, Description TEXT, Outcomes, PRIMARY KEY (PracticalID, TaskNo) );
Select start_date, end_date, other_columns From table Where end_date - start_date <= 15
DECLARE @input XML = '<suggestions> <suggestion> <description>plate.</description> </suggestion> <suggestion> <description>snack.</description> </suggestion> </suggestions>' DECLARE @Suggestions TABLE ([Description] VARCHAR(800)) INSERT INTO @Suggestions SELECT Sugg.value('(description)[1]', 'varchar(800)') FROM @input.nodes('/suggestions/suggestion') AS Tbl(Sugg) SELECT * FROM @Suggestions
TO_TIMESTAMP_TZ('2014-01-01 08:16:02 (+00:00)', 'YYYY-MM-DD HH24:MI:SS (TZH:TZM)')
;WITH T AS (SELECT TOP(1) * FROM Schedule WITH (ROWLOCK, READPAST) WHERE intScheduleType = @intScheduleType ORDER BY dtmLastRunDate) DELETE FROM T OUTPUT DELETED.intUserID, DELETED.dtmLastRunDate
create or replace function "ORDTEST"."DEPARTMENT_FULLPATH" (depId IN VARCHAR2) return VARCHAR2 as .... return path ;
SELECT Users.id, Users.username, COUNT(*) AS classes FROM Users LEFT OUTER JOIN Classes ON User.fk_class_id = Classes.id GROUP BY Users.id, Users.username
RichEdit.Changing
select (case when (@prev is null) then 0 else abs(value - @prev) end) as diff , concat(value, '-', @prev) , @prev := value from (select value, dt from table1 order by dt) ordered order by diff limit 1
SELECT t.* FROM dbo.TableName t WHERE t.language = 1 AND NOT EXISTS ( SELECT 1 FROM dbo.TableName t2 WHERE t.name = t2.name AND ( t2.language IS NULL OR t2.language <> 1 ) )
create table #tempA ( MailSize decimal ) insert into #tempA(MailSize) EXEC sp_msforeachdb @command1 = N' USE ? SELECT (size * 8)/1024.0 AS size_in_mb FROM sys.database_files WHERE data_space_id = 0' select * from #tempA drop table #tempA
SELECT SiteProductVariation.ProductVariationID , COUNT(CASE WHEN SiteProduct.ProductDisplay = 0 THEN SiteProduct.SiteProductID END) AS Expr1 , COUNT(CASE WHEN SiteProduct.ProductDisplay = 1 THEN SiteProduct.SiteProductID END) AS Expr2 FROM SiteProductVariation INNER JOIN SiteProduct ON SiteProduct.SiteProductID = SiteProductVariation.SiteProductID WHERE (SiteProductVariation.ProductVariationID = 159868) AND (SiteProduct.ProductDisplay = 0 OR SiteProduct.ProductDisplay = 1) GROUP BY SiteProductVariation.ProductVariationID
DELETE FROM datacache WHERE userId=@id SELECT @@ROWCOUNT
SELECT on_date,rate_id,type_id, MAX(substring(publish_flag, 1,1)) + MAX(substring(publish_flag, 2,1)) + MAX(substring(publish_flag, 3,1)) + MAX(substring(publish_flag, 4,1)) as publish_flag FROM YourTable GROUP BY on_date,rate_id,type_id
update YourTable set P_Type = rtrim(p_type)
SELECT count(distinct mytable.*) as total FROM mytable JOIN maps ON mytable.pid = maps.pid AND maps.tid = mytable.tid JOIN shop ON maps.node_id = shop.nid AND shop.value = 'selling' AND shop.parent = '170' AND shop.tid = mytable.tid JOIN users_pro ON mytable.pnumber = users_pro.pnumber AND users_pro.value = 'hulo' AND users_pro.tid = mytable.tid WHERE mytable.tid=1
begin dbms_output.put_line(packagename.functionname(paraname)); end;
db.execSQL("CREATE TABLE if not exists mytable (_id INTEGER PRIMARY KEY AUTOINCREMENT, mydate VARCHAR, mydata SMALLINT)");
insert ignore into `product_to_store` ( select a.product_id, 1 as store_id from (select distinct product_id from product_to_store where store_id=0) a )
with cte as ( select p.productcategory, p.ProductSubCategory, COUNT(*) cnt, ROW_NUMBER() over (partition by p.productcategory order by count(*) desc) rn from products p join sales s on p.ProductSubCategory = s.ProductSubCategory group by p.productcategory, p.ProductSubCategory ) select * from cte where rn = 1
dataGridView1.Columns[3].DefaultCellStyle.Format = "t"; // short time
WITH cte AS ( SELECT PNAME, SALARY, PROF1 PROF FROM programmer UNION SELECT PNAME, SALARY, PROF2 FROM programmer ) SELECT p1.PNAME, p1.PROF, p1.SALARY FROM cte p1 LEFT JOIN cte p2 ON p1.PROF = p2.PROF AND p1.SALARY < p2.SALARY WHERE p2.PNAME IS NULL;
SELECT Id FROM tbl GROUP BY Orig_Id HAVING SUM(CASE WHEN Type <> 'Internal' THEN 1 ELSE 0 END) = 0 AND SUM(CASE WHEN Type = 'Internal' THEN 1 ELSE 0 END) > 0
SELECT a.vehicle, a.vehicle_color, COUNT(b.vehicle) Number FROM master a LEFT JOIN data b ON a.vehicle = b.vehicle AND a.vehicle_color = b.vehicle_color GROUP BY a.vehicle, a.vehicle_color
SELECT t1.ID, t1.a, t1.b, t1.c, t2.d, t2.e, t2.f INTO t0 FROM t1 INNER JOIN t2 ON t1.ID = t2.ID;
function(doc) { if(doc.visible) emit(doc.created_at, doc) }
from django.db.models import signals import models def itemSaved(sender, **kwargs): obj = kwargs['instance'] colorMod = models.Color.get(name = obj.color) colorMod.count = colorMod.count + 1 colorMod.save() # listen to post_save event for model MyModel signals.post_save.connect(itemSaved, sender=models.MyModel)
declare @Temp nvarchar(max), @c int, @a nvarchar(max) declare @Temp_Table table (value nvarchar(max)) select @Temp = 'a,b,c,g,a' select @c = CHARINDEX(',', @Temp) while @c > 0 begin insert into @Temp_Table select LEFT(@Temp, @c - 1) select @Temp = right(@Temp, LEN(@Temp) - @c) select @c = CHARINDEX(',', @Temp) end select * from @Temp_Table
UPDATE I2 SET BVRTLPRICE01 = I1.BVRTLPRICE01 FROM INVENTORY I2 INNER JOIN INVENTORY I1 ON I1.CODE = REPLACE(LEFT(I2.CODE, 1), 'S', 'C') + SUBSTRING(I2.CODE, 2, LENGTH(I2.CODE))) WHERE I2.CODE LIKE 'S%'
select table_name from information_schema.columns where column_name = 'classtypeid'
SELECT x.subject , y.id IS NOT NULL has_accepted FROM qanda x LEFT JOIN qanda y ON y.related = x.id AND y.type = 1 AND y.acceptedanswer = 1 JOIN qanda z ON z.related = x.id WHERE x.type = 0 AND z.id = 5;
SELECT GROUP_CONCAT(id ORDER BY id DESC SEPARATOR ',') FROM temp;
select name from table1 where name regexp binary '^CU[0-9]'
SELECT Count(*) FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'PRIMARY KEY'
select CASE WHEN isExofficio = 1 THEN CAST 'Never Expires' ELSE CONVERT(varchar,boardDate,101) END from tableName
---Supply the ID and the Contact_ID DECLARE @ID INT = 1 ,@C_ID INT = 100; WITH OrdCte AS( SELECT ID,Contact_ID,ROW_NUMBER() OVER(PARTITION BY Contact_ID ORDER BY ID) ord FROM #sample ) SELECT B.ID,B.Contact_ID FROM OrdCte A JOIN OrdCte B ON A.Contact_ID = B.Contact_ID WHERE A.Contact_ID = @C_ID AND A.ID = @ID AND A.ord+1 = B.ord;
SELECT p.id AS id, p.name AS name FROM products p, products_sizes s WHERE p.id = s.product_id AND s.size_id IN (1, 3) GROUP BY s.product_id HAVING COUNT(DISTINCT s.size_id) = 2;
select floor(es.event_timestamp/(1000*60*60)) as hour_timestamp, sum(`count`) as cnt from metrics.event_summary es group by floor(es.event_timestamp/(1000*60*60)) order by hour_timestamp;
INSERT INTO table1(data_1, email) VALUES (SELECT data_1,email FROM table_2 WHERE table_1.email=table2.email)
Select TA.ColumnB,TB.ColumnB from TableC TC LEFT JOIN TableB TB ON (TC.ColumnA = TB.ColumnA) LEFT JOIN TableA TA ON (TB.ColumnA = TA.ColumnA)
DECLARE @Sectors TABLE ( Sector INT ); INSERT INTO @Sectors VALUES (40), (41), (42); DECLARE @Sector INT; DECLARE Sectors CURSOR FOR SELECT Sector FROM @Sectors; OPEN Sectors; FETCH Sectors INTO @Sector; WHILE (@@FETCH_STATUS = 0) BEGIN -- Do something here that cannot be batched PRINT @Sector; FETCH Sectors INTO @Sector; END CLOSE Sectors; DEALLOCATE Sectors;
select * from (select s.name, count(distinct p.idt) as vocsize, avg(count(distinct p.idt)) over () as avg_vocsize from series s join posting p on s.ids = p.ids group by s.name ) s where vocsize > avg_vocsize;
select Year,sum(iif(Type=1, value, 0))/sum(iif(Type=4, value, 0)) from data GROUP BY Year
SELECT add * ((CASE Fun1 WHEN 'Abc' THEN 1 ELSE 0 END) + (CASE Fun2 WHEN 'Abc' THEN 1 ELSE 0 END) + (CASE Fun3 WHEN 'Abc' THEN 1 ELSE 0 END)) AS total FROM mytable
use strict; use warnings; my $data_read = "T=3420499518 A=914 B=97 C=49 D=436 E=428 F=863 G=34 H=771 I=214 J=493 K=165"; my %data = split(/\s+|=/, $data_read); my @cols = keys %data; my $cols = join(', ', @cols); my $placeholders = join(', ', ('?')x scalar @cols ); my $query = "INSERT INTO table ($cols) VALUES ($placeholders)"; # execute like this: # $dbh->do($query, undef, @data{@cols}); print "$query\n";
SELECT name FROM yourtable WHERE (mark1>=60)+(marks2>=60)+(marks3>=60) >= 2
SELECT (SUM(r)/SUM(i)) AS tera FROM ((SELECT SUM(reflectance) AS r, 0 AS i FROM table WHERE wavelength BETWEEN 340 AND 345) UNION (SELECT 0 AS r, SUM(reflectance) AS i FROM table WHERE wavelength BETWEEN 350 AND 355)) AS total
SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE VIEW_DEFINITION like '%[YourTableName]%'
Year(CurrentDate())
Corresponding to SSIS ,oracle has oracle warehouse builder. Oracle data pump is an alternative to EXPORT and Import utility in SQL SERVER.
echo "update contact set email_address='foo@bar.com';" | /path/to/isql --your-favorite-switches
SELECT * FROM ( SELECT *, COUNT(*) OVER (PARTITION BY FirstName, LastName) AS cnt FROM Contacts WHERE ContactTypeId = 1 ) q WHERE cnt > 1 ORDER BY cnt DESC
SELECT t.* FROM table_name t INNER JOIN ( SELECT * FROM table_name AS OF TIMESTAMP SYSTIMESTAMP - INTERVAL '1' DAY ) p ON ( t.a = p.a AND ( t.d <> p.d OR t.e <> p.e OR t.f <> p.f ) );
SELECT d.id, d.name, l.message FROM device AS d LEFT JOIN ( SELECT l1.device_id, l1.message FROM log AS l1 WHERE l1.when = ( SELECT MAX(l2.when) FROM log AS l2 WHERE l2.device_id = l1.device_id ) l ON l.device_id = d.id WHERE d.active = 1 ORDER BY d.id ASC;
SELECT T.Thread_ID ,T.Thread_Title ,T.Description ,T.Posted_Time ,T.Subject ,COUNT(R.Reply_ID) AS No_of_replies FROM Thread T INNER JOIN Reply R ON T.Thread_ID = R.Thread_ID GROUP BY T.Thread_ID ,T.Thread_Title ,T.Description ,T.Posted_Time ,T.Subject
SELECT S.Product_Name, SPD.UnitPrice, SPD.Quantity, SPD.Quantity * SPD.UnitPrice Amount, (SPD.Quantity * SPD.UnitPrice)/(SUM(SPD.Quantity * SPD.UnitPrice) OVER()) * 100 [Cost %] FROM dbo.Stock_Purchase SP INNER JOIN dbo.Stock_Purchase_Details SPD ON SP.Purchase_ID = SPD.Purchase_ID INNER JOIN dbo.Store S ON SPD.Pro_ID = S.Pro_ID;
DROP PROCEDURE IF EXISTS `test`; DELIMITER // CREATE PROCEDURE TEST (IN_TEAM_ID varchar(30)) BEGIN SELECT t.* FROM TEAMS t WHERE t.team_id = IN_TEAM_ID; END // DELIMITER ;
INSERT INTO #Temp (id, id2, a, b) SELECT TABLE_A.ID, TABLE_B.ID2, TABLE_A.A, TABLE_B.B FROM TABLE_A INNER JOIN TABLE_B ON TABLE_A.[primary_key] = TABLE_B.[foreign_key]
select id, sum(amount) from ( select id,amount from table_1 union all select id,amount from table_2 union all select id,amount from table_3 ) x group by id
INSERT INTO the_table SELECT a, upper(a) FROM ( SELECT 'qwerty' a )
SELECT c.name, count(distinct p.id) provincecoutn, count(distinct city.id) citycount FROM country c LEFT JOIN province p on c.id = p.country_id LEFT JOIN City on p.id = city.province_id GROUP BY c.name
select payment_by, amount as debit, NULL as credit, added_on from order_payments_detail union all select cust_name, NULL, amount, added_on from orders order by added_on;
SELECT cast([dateTime] as date) as Your_Date,ChannelID, max(reading) as max_reading, min(reading) as min_reading, avg(reading) as avg_reading FROM YourTable GROUP BY cast([dateTime] as date) ,ChannelID
WITH cte AS ( SELECT [Date] AS WorkingDay, ROW_NUMBER() OVER (ORDER BY [Date] ASC) AS RN FROM DimDate WHERE IsHolidayUSA = 0 AND IsWeekday = 1 ) SELECT DateStarted, DateCompleted, c2.RN - c1.RN AS CycleTime FROM MyTable t INNER JOIN cte c1 ON t.DateStarted=c1.WorkingDay INNER JOIN cte c2 ON t.DateCompleted=c2.WorkingDay
SELECT * FROM myEntity join member on member.foreignKey = myEntity.foreignKey WHERE myEntity.foreignKey = {$myForeignKey};
SELECT v.users_id FROM pageviews v JOIN ( SELECT users_id, MIN(time_in) time_in FROM pageviews GROUP BY users_id ) q ON v.users_id = q.users_id AND v.time_in = q.time_in WHERE v.articles_id = 1
SELECT * FROM creatives WHERE creative_id IN (SELECT creative_id FROM term_relationship WHERE term_id IN (1, 2, 3) GROUP BY creative_id HAVING COUNT(*) = 3)
SELECT d1.attr AS ChildAttr, d2.attr AS ParentAttr FROM dependency AS dep INNER JOIN data AS d1 ON dep.child = d1.id INNER JOIN data AS d2 ON dep.parent = d2.id
SELECT TO_CHAR(time, 'mm/dd/yyyy hh24:mi:ss') from mytable
SELECT CONVERT(VARCHAR(10), CAST(value as datetime), 101) + ' ' + substring(convert(varchar(20), CAST(value as datetime), 9), 13, 5) + ' ' + substring(convert(varchar(30), CAST(value as datetime), 9), 25, 2) As dateValue FROM mytable WHERE ISDATE(mytable.Value) = 1
SELECT <non-pivoted column>, [first pivoted column] AS <column name>, [second pivoted column] AS <column name>, ... From Table PIVOT ( ... FOR ... )
select c.name,a.adress,a.postcode_id from customer c left join Adress a on c.customer_id=a.customer_id where c.customer_id>11
;WITH CTE AS ( --create list of all names and date combinations from both table SELECT DISTINCT A.LastName, A.FirstName, B.Date_col FROM Table1 A, Table2 B ) --select rows that are missing dates in your first table SELECT X.* FROM CTE X LEFT OUTER JOIN Table1 Y ON X.LastName = Y.LastName AND X.FirstName = Y.FirstName AND X.Date_col = Y.Date_Col WHERE Y.LastName IS NULL
SELECT * FROM ( SELECT * FROM table ORDER BY date DESC ) as t GROUP BY t.category;
create procedure [dbo].[usp_RecipientsSendCheck] ( @Type int, @RecipientsImports dbo.RecipientsImport READONLY ) as begin select i.Name from @RecipientsImports as i left outer join Recipients as r on r.Name = i.Name left outer join SendResults as s on s.RecipientId = r.id and s.[Type] = @Type where r.Name is null or s.id is not null end
select o.id OrderID, MIN(i.id) LineItemID from orders o inner join lineitems i on i.order_id = o.id where o.user_id= 1 group by o.id having count(*)=1
ALTER TABLE tableName ADD CONSTRAINT tb_uq UNIQUE (post_id, tag_id)
CREATE UNIQUE INDEX avatars_userid_state_0_idx ON avatars(user_id,(state<>0));
SELECT * FROM `Projectos` JOIN `Projectos-Sectores` ON `ProjectID` = `Pid` JOIN `Sectores` ON `SectorID` = `Sectores`.`ID` ORDER BY `Pid`
CREATE OR REPLACE PROCEDURE sp_test1( p_cursor OUT SYS_REFCURSOR ) AS BEGIN OPEN p_cursor FOR SELECT id, test1, test3 FROM test_table; END;
Select a.orig, a.dest, a.stuff, b.orig, b.dest, b.stuff from a inner join a as b on a.orig = b.dest and b.orig = a.dest where a.orig = 'ATL' Order by a.orig, a.dest
UPDATE table_blah SET column_blah = 0
function insertMajor($application_id, $major,$type, $conn){ //insert $query = "INSERT INTO [dbo].[Applicant_Majors] " . "([application_id]," . "[program]," . "[type])" . "VALUES('$application_id','$major','$type')"; //connection $stmt = sqlsrv_query($conn, $query); if ($stmt === false) {//start if die(print_r(sqlsrv_errors(), true)); }//end if }
INSERT INTO productsInCategories (categoryId, productId) SELECT id,@0 FROM Categories WHERE userId=@1 AND id=@2 @0=Last insert id (the product inserted prior to this query) @1=The user id @2=The category id supplied by the client
select count(*) into foo from blah where yVar = xVar if foo > 0 then ...
select t2.* from table2 t2 left join table1 t1 on t2.email = t1.email where t1.email is null
select orderid, Round(Sum(nz([Quantity]*[UnitPrice]*(1-[Discount])*100)/100)+ [RushCharge],2) AS TotalCost from from [order details] group by orderid
SELECT SUM(net_sales) FROM Sales_tb WHERE Store_number IN (SELECT Item FROM dbo.SplitStrings(@list, ','))
with cte as ( select row_number() over (order by name) RowNumber, row_number() over (order by newid()) RandomOrder, count(*) over() Total, * from sys.tables ) select * from cte where RowNumber <= 2 or Total - RowNumber + 1 <= 2 union all select * from ( select top 6 * from cte where RowNumber > 2 and Total - RowNumber > 2 order by RandomOrder ) tt
WHERE ROUND(Amount1,2) = Amount1
select sum(case when date between '2012-05-01' AND '2012-06-01' then value else 0 end) as sum1, sum(case when date between '2012-05-01' AND '2012-10-01' then value else 0 end) as sum2, sum(case when situation like 'Urgent' then 1 else 0 end) as count1 from mytable
select category, subcategory, `count` from ( select *, ( case category when @curCategory then @curRow := @curRow + 1 else @curRow := 1 AND @curCategory := category end ) + 1 AS rank from yourtable cross join (select @curRow:=0, @curCategory:='') c order by category, `count` desc ) t where rank <= 100
Select a.id, a.code, b.code from Table1 a LEFT OUTER JOIN Table2 b on a.code = b.code where a.id = '1';
tx.executeSql("SELECT P.* FROM PRODUCTS P INNER JOIN LISTS_HAS_PRODUCTS L ON P.id = L.productid WHERE listid " + listid, [], onSelectSupermarketsSuccess, onTxError);
DECLARE @FileName VARCHAR(50) SET @FileName = 'Attachments_21046_123400100473.pdf' SELECT REVERSE( SUBSTRING( REVERSE(@FileName), 5, -- Length of extension + 1. CHARINDEX('_', REVERSE(@FileName)) - 5 ) )
Select * From [Enterprise].[dbo].[Employee] WHERE ED_LVL > (Select AVG(ED_LVL) From [Enterprise].[dbo].[Employee])
With ShiftCounts As ( SELECT ope_id, count(ope_id) ShiftCount , ROW_NUMBER() OVER( ORDER BY Count(ope_id) Desc ) ShiftRank FROM operator_shift WHERE ope_shift_date >=to_date( '01-MAR-10','dd-mon-yy') and ope_shift_date <= to_date('31-MAR-10','dd-mon-yy') GROUP BY OPE_ID ) Select ope_id, ShiftCount From ShiftCounts Where ShiftRank = 1
SELECT BPIN, Name, @value:=IF(@bpin=BPIN, @value + 1, 1) AS value, @bpin:=BPIN FROM ( SELECT BPIN, Name FROM some_table ORDER BY BPIN, Name ) sub0 CROSS JOIN (SELECT @value:=0, @bpin:=0) sub1
function InsertSymbols() { $data = array(); foreach($this->input->post('symbols') as $symb) { $data[] = array('symbol_id' => $symb); } return $this->db->insert_batch('symbols', $data); }
CREATE VIEW VIEW_UNIQUE_MEETINGID WITH SCHEMABINDING AS SELECT ClubID , MeetingID , COUNT_BIG(*) FROM YourTable GROUP BY ClubID , MeetingID GO CREATE UNIQUE CLUSTERED INDEX UIX_VIEW_UNIQUE_MEETINGID ON VIEW_UNIQUE_CLUBID (MeetingID)
<select id="selectKeys" parameterType="list" resultMap="selectKeysResultMap"> SELECT COL1,COL2 FROM TABLE1 WHERE COL1 IN <foreach item="item" index="index" collection="list" open="(" separator="," close=")"> #{item} </foreach> </select>
SELECT t1.* FROM table1 t1 CROSS JOIN table2 t2
update table1 set table1.dt = table2.dt2 from table1 join ( select id,max(dt2) as maxDT from table2 group by id) as derivedTable2 on derivedTable2 .id = table1.id
Comments - CommentID - CommentText Posts - PostID - Other fields Pages - PageID - Other fields PostComments - PostID - CommentID PageComments - PageID - CommentID
SELECT TOP 1 name, email, phone, is_user = CASE WHEN ( isuser = 1 OR is_user = 1 OR cust_type LIKE 'USER%' OR cust_type = 'DIRECT USER') THEN 1 ELSE 0 END, is_reseller = CASE WHEN (...any condition that makes a customer a reseller...) THEN 1 ELSE 0 END FROM dbo.customer ...WHERE...
update (select t.*, row_number() over (order by id) as newid) toupdate set id = newid
SELECT A.PersonID, B.Date FROM (SELECT DISTINCT PersonID from myTable) A, (SELECT DISTINCT Date from myTable) B
-- MySQL dump 10.13 Distrib 5.5.14, for osx10.6 (i386) -- -- Host: huey Database: test -- ------------------------------------------------------ -- Server version 5.5.31-30.3-log
load data append into table schema.table fields terminated by '~' trailing nullcols ( line BOUNDFILLER, name "regexp_substr(:line, '^[^,]+')", phone_num "regexp_substr(:line, '[^,]+', 1, 2)", Address "regexp_replace(:line, '^.*?,.*?,')" )
SELECT fcs.category, fcs.numbers, fcs.points FROM some_table fcs WHERE fcs.object = 'T' AND fcs.this_db = strSelectedDB
SELECT * -- or DISTINCT * to fold duplicates like UNION does FROM TABLE ORDER BY random() LIMIT n;
ORDER BY CASE WHEN movieDate >= DATEADD(hour, -24, GETDATE()) THEN movieDate END DESC, CHECKSUM(NEWID())
Declare @V1 VarChar(Max), @V2 VarChar(Max), @V3 VarChar(Max) Select @V1 = ... Set @V2 = (Select ...) Select @V3 = ... Select @V1+@V2+@V3
SELECT placeId, name, lat, lng, ( 3959 * acos( cos( radians($user_latitude) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians($user_longitude)) + sin( radians($user_latitude)) * sin( radians( lat ) ) ) ) AS distance FROM myTable HAVING distance < 25 ORDER BY distance LIMIT 0 , 20
INSERT INTO users (user_id, name) SELECT 1 + coalesce((SELECT max(user_id) FROM users WHERE name='Bob'), 0), 'Bob';
SELECT p.* FROM parent p JOIN join_table j ON p.id=j.parent_id WHERE j.child_id=1 OR j.child_id=2 GROUP BY j.parent_id HAVING COUNT(j.child_id)=2;
select distinct CONSTRAINT_NAME from information_schema.TABLE_CONSTRAINTS where CONSTRAINT_SCHEMA = 'mysql'
SELECT a.* FROM tableName a INNER JOIN ( SELECT elem_ID, MAX(`Draft`) maxDraft FROM tableName GROUP BY elem_ID ) b ON a.elem_ID = b.elem_ID AND a.`draft` = b.maxDraft
SELECT CONCAT('[\n "id": ',POSTS.ID,', \n "body": "' ,BODY,'",\n "date": "' ,DATE,'"\n "user": [\n "id": ' ,USERS.ID,',\n "name": "', NAME,'",\n "gender": "' ,gender,'"\n ]\n ]') FROM USERS LEFT JOIN POSTS ON users.id=posts.user_id
select top 10 product_id, count(*) from request_list group by product_id order by count(*) desc
pg_dump -s mydatabase > dump.sql pg_dump -a -t table_i_want1 -t table_i_want2 -t table_i_want3 >> dump.sql
SELECT T1.GEST,T2.CODINTERN, SUM(T3.REST) AS Suma FROM mydb.t3 INNER JOIN mydb.t2 ON mydb.t3.CODOBIECT = mydb.t2.CODOBIECT INNER JOIN mydb.1 ON mydb.t3.CODNIR=mydb.t1.CODNIR WHERE T1.gest=738 and T3.REST>0 GROUP BY T2.CODINTERN, T1.GEST;
select scn_to_timestamp(max(ora_rowscn)) from table_name
select left('C', T.flag1)+ left('G', T.flag2)+ left('R', T.flag3) from TableA as T
SELECT t1.* FROM t1 LEFT JOIN t2 on t1.id = t2.id where t2.id is null;
for(i in result.reports){ result.reports[i].uid = 0; } result.save();
SELECT Date, Device, MAX(Configuration) AS Configuration FROM logData GROUP BY Date, Device
SELECT DEPARTMENT.Department_ID, DEPARTMENT.Department_Name, Count(EMPLOYEE.Employee_ID) As Employees FROM DEPARTMENT LEFT JOIN EMPLOYEE ON EMPLOYEE.Department_ID = DEPARTMENT.Department_ID GROUP BY DEPARTMENT.Department_ID, DEPARTMENT.Department_Name
SELECT *, (SELECT COUNT(id) FROM Comment WHERE id = id) AS Comments FROM User ORDER BY id DESC
select t1.PlaceID, t1.ItemID, t1.ItemCount , t1.Amount as 'AmtMe' , SumPlace.sum as 'AmtPlace' , SumPlace.sum - t1.Amount as 'AmtPlaceNoMe' from #test as t1 join (select PlaceID, sum(Amount) as 'sum' from #test group by PlaceID) as SumPlace on t1.PlaceID = SumPlace.PlaceID
select sectionid, count(sectionid) from WORDS2SECTION where id in (select id from WORDS where word in ('hello', 'foo', 'bar') ) group by sectionid
SELECT a.* FROM $marketdb a INNER JOIN ( SELECT seller, MAX(amount) amount FROM $marketdb WHERE price=$minprice GROUP BY seller ) b ON a.seller = b.seller AND a.amount = b.amount group by a.seller;
update ce set valor=valor/@total from #table1 ce inner join table2 m on ce.t2id=m.id where codigo in (10, 11)
SELECT month(saledate), SUM(sales.cost) FROM sales, products WHERE sales.productname=products.productname AND category='food' GROUP BY month(saledate) UNION ALL SELECT month(purchasedate), SUM(purchases.cost) FROM purchases, products WHERE purchases.productname=products.productname AND category='food' GROUP BY month(purchasedate)
UPDATE MT SET description = REPLACE(description, old_value, new_value) FROM dbo.My_Table MT INNER JOIN dbo.Fix_Table FT ON MT.description LIKE '%' + FT.old_value + '%'
SELECT *, 1 as sort_pref FROM table WHERE column LIKE 'CHAIR%' UNION SELECT *, 2 as sort_pref FROM table WHERE column LIKE '%CHAIR%' AND column NOT LIKE 'CHAIR%' ORDER BY sort_pref, column
SELECT "Yes" FROM dbsProfs HAVING MAX(dbsProfs.age) - MIN(dbsProfs.age) <= 5
SELECT * FROM mytable AS t INNER JOIN Main.dbo.SharedTable AS s ON t.Id=s.Id ....
select t2.val valofc1,t3.val valofc2,t4.val valofc3 from table1 t1 inner join table2 t2 on t1.C1 = t2.ids inner join table2 t3 on t1.C2 = t3.ids inner join table2 t4 on t1.C3 = t4.ids where tempId = 'ab'
$ db2 "values substr(current path,1,60)" 1 ------------------------------------------------------------ "SYSIBM","SYSFUN","SYSPROC","SYSIBMADM","IBJORHOV" 1 record(s) selected.
select d.loc, count(distinct d.deptno) depts, count(e.ename) emps from dept d left join emp e on d.deptno = e.deptno group by d.loc
TAB1.VARCHAR_COL = TO_CHAR( TAB2.NUMBER_COL, '000' )
select id, event, source, starttime, endtime from dbo.sysssislog
SELECT p.name, LISTAGG( s.name, ',' ) WITHIN GROUP ( ORDER BY s.name ) AS preferences FROM Person p INNER JOIN School s ON ( p.preference_id = s.school_id ) GROUP BY p.name
WITH SchoolsInState (id, state, schoolname) AS ( SELECT id, state, schoolname FROM Schools WHERE state = 'XX' ) SELECT * FROM SchoolsInState AS s JOIN Grades AS g ON s.id = g.id_schools WHERE g.Reading = max(g.Reading)
SELECT distinct c1.city_name FROM `city` c1 JOIN city c2 ON c1.city_name=c2.city_name AND c1.state_name!=c2.state_name
Dim emptyTextBoxes = From txt In Me.Controls.OfType(Of TextBox)() Where txt.Text.Length = 0 Select txt.Name If emptyTextBoxes.Any Then MessageBox.Show(String.Format("Please fill following textboxes: {0}", String.Join(",", emptyTextBoxes))) End If
db.execSQL("insert into your table name (order_id,doc_id,doc_name)" + "values("ordid+","+doci+"," + "\"" + docnam + "\"" + ") ;");
UPDATE table SET TotalMoney = Money1 + Money2;
UPDATE numberTable SET number = '0' + number WHERE LEN(number) = 9
select cname from table1 union all select cname + '*' from table1 union all select cname + '#' from table1 order by cname
with cte as ( select prodID, row_number() over (order by prodID) as rn from table ) update cte set prodID = rn + 9
select col, count(*) from table t group by col;
WHERE CLOSED_D > ETR_D
select d.tech_id, t.first_name, t.last_name, d.rt_completed as completed_id, t2.first_name as completed_first_name, t2.last_name as completed_last_name from RT_QUEUE_Delta d join Technician t on d.tech_id = t.tech_id join Technician t2 on d.RT_Completed = t2.tech_id
SELECT currency, SUM(price) totalPrice FROM tableName GROUP BY currency
CREATE OR REPLACE TRIGGER update_offering_status BEFORE UPDATE ON users FOR EACH ROW WHEN (NEW.status = 'i') BEGIN UPDATE offering SET status = 'i' WHERE userid = :NEW.id END;
RIGHT('00' + CONVERT(VARCHAR, MyNumber), 2)
SET @s = CONCAT('USE old_database; CALL old_database.dbCreate(', dbName,');'); PREPARE stmt FROM @s; EXECUTE stmt;
CREATE TABLE formula_relation ( formula_relation_id SERIAL PRIMARY KEY, formula1_id INT REFERENCES formulas (formula_id) ON DELETE CASCADE, formula2_id INT REFERENCES formulas (formula_id) ON DELETE CASCADE, CHECK (formula1_id < formula2_id) );
grant imp_full_database to p4ss;
(SELECT image FROM tab WHERE(first) ORDER BY RAND() LIMIT 1) UNION (SELECT image FROM tab WHERE(second) ORDER BY RAND() LIMIT 2) UNION (SELECT image FROM tab WHERE(third) ORDER BY RAND() LIMIT 2)
if( App::environment() === 'dev' ) { $this->call('UserTableSeeder'); }
DECLARE @UserId int ,@ClientCount int DECLARE @Clients as table (ClientId int not null) -- All clients for the "target" user INSERT @Clients select Clientid from MyTable where UserId = @userId -- Track how many there are SET @ClientCount = @@rowcount -- List all users that have those clients SELECT mt.UserId, count(*) HowMany from Mytable mt inner join @Clients cl on cl.ClientId = mt.Clientid where UserId <> @UserId group by mt.UserId having count(*) = @ClientCount
SELECT v.name, u._id as userId, vu._id as vaccineId FROM user u LEFT OUTER JOIN vacc_user vu ON u._id = vu.userId LEFT OUTER JOIN vaccine v ON ((v._id = vu.vaccineId) OR (v._id IS NULL)) WHERE u._id = 4;
CREATE OR REPLACE TYPE TKey AS OBJECT( name varchar2(240), value_text varchar2(2000), value_map_name varchar2(240));
SELECT strNum FROM your_table ORDER BY FIELD(strNum,'One','Two','Three','Four','Five','Six','Seven','Eight','Nine','Ten') ASC
Create Table #Cities(City varchar(200))
Decimal value Time Value Calculation ============= ========== =========== 0.00094444444 12:01:00 AM 1.0 / 24 / 60 (1 day/24 hours/60 minutes per hour) 0.01041666666 12:15:00 AM 1.0 / 24 / 60 * 15 0.02083333333 12:30:00 AM 1.0 / 24 / 60 * 30 0.04166666666 01:00:00 AM 1.0 / 24
DECLARE @input XML = '..... add your XML here........' SELECT NodeName = Nod.value('local-name(.)', 'varchar(50)'), NodeValue = Nod.value('.', 'varchar(50)') FROM @input.nodes('//*') AS TBL(Nod)
Command.CommandText = "SELECT COUNT([Product Number]) AS CNT, [Product Number] FROM TableXXX GROUP BY [Product Number] ORDER BY COUNT([Product Number]) DESC"
SELECT u.id, u.firstname, u.lastname, array_agg(r.name) FROM user u LEFT OUTER JOIN user_role ur ON (u.id = ur.user_id) LEFT OUTER JOIN role r ON (ur.role_id = r.id) GROUP BY u.id;
SELECT UPDATE_TIME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbname' AND TABLE_NAME = 'tabname'
SELECT * FROM GUITARS.FENDER WHERE EXISTS (SELECT 1 FROM GUITARS.GUITAR_TYPE WHERE GuitarColor = 'RED' AND FENDER.GUITARTYPE = GUITARTYPE.GUITARTYPE AND FENDER.GUITARSUBTYPE = GUITARTYPE.GUITARSUBTYPE );
This is the only supported index type
SELECT * FROM (SELECT accountid, procdate, type, value, LAG(type) OVER (ORDER BY procdate ASC) AS previousType FROM transaction) w WHERE previousType = 'RECOVERY';
select sys_context('USERENV','SERVICE_NAME') from dual
Select * from ( SELECT tbl.*, @counter := @counter +1 counter FROM (select @counter:=0) initvar, tbl ORDER BY ordcolumn ) X where counter <= (50/100 * @counter); ORDER BY ordcolumn
select componentid, (select sum(cs.weightkg) from component c2, componentstats cs where c2.componentstatsid = cs.componentstatsid start with c2.componentid = c1.componentid connect by prior c2.componentid = c2.fkcomponentid) sum_weightkg from component c1 start with c1.fkcomponentid is null connect by prior componentid = fkcomponentid;
select * from ( -- your original select without rownum and with order by ) WHERE ROWNUM = 1
CREATE OR REPLACE TRIGGER NumberOfBooks BEFORE INSERT ON book FOR EACH ROW BEGIN IF :new.nobook < 10 THEN :new.nobook = 10; END IF; END;
SELECT A.VAR1, B.VAR2 FROM A INNER JOIN B ON A.id1 = b.id1 INNER join ( SELECT DISTINCT id2 FROM c ) c1 ON b.id2 = c1.id2
INSERT [dbo].[Product] ([Id], [Name]) SELECT id, name FROM (VALUES (1, N'Product 1'), (2, N'Product 2') (3, N'Product 3') ) v(Id, Name) WHERE NOT EXISTS (SELECT 1 FROM Product P2 WHERE p2.id = v.id);
select t2.*, (t2.quantity * p.price) as sales from table2 t2 outer apply (select top 1 t1.price from table1 t1 where t1.product = t2.product and t1.date <= t2.date order by t1.date desc ) p
select * from table where timestamp > now() - interval '1 month'
DECLARE @test nvarchar
SELECT sID, SUM(CASE WHEN grade < 50 THEN 1 ELSE 0 END) AS noOfFails, AVG(grade) AS Average FROM studentTable GROUP BY sID
SELECT DISTINCT Table,Length,Height FROM Inventory WHERE ID IN (SELECT DISTINCT ID FROM Inventory WHERE length < x and Parent => 0) AND Parent = NULL
SELECT tt.* FROM topten tt INNER JOIN (SELECT home, MAX(datetime) AS MaxDateTime FROM topten GROUP BY home) groupedtt ON tt.home = groupedtt.home AND tt.datetime = groupedtt.MaxDateTime
SELECT v.user_id, SUM(v.points) as addedNum, if( v.points = 3, @a := 2, if(v.points = 2, @a := 1, @a := 0) ) as num_p_three_two FROM vote v JOIN (select @a := 0, @b := 0) as temp GROUP BY v.user_id ORDER BY addedNum DESC, num_p_three_two DESC;
select * from ( SELECT i.BOOK_ID , i.in_out , i.event_date AS in_time , LOCATION in_location , lag(event_date) over (partition by book_id order by event_date) out_date , lag(location) over (partition by book_id order by event_date) out_location FROM TRANSACTIONS i ORDER BY i.event_date) where in_out = 'I' and in_location != out_location;
SELECT @prev_item_id := NULL; SELECT MAX(@keyword_ids := IF(@prev_item_id = item_id, CONCAT_WS(',', @keyword_ids, keyword_ids), keyword_ids)), @prev_item_id := item_id FROM mytable GROUP BY item_id;
select bill_no, bill_month, ..., (consumption + consumption2 + consumption3) as tot_sum from ws_bill order by tot_sum desc
SELECT .... FROM .... ORDER BY COALESCE(rrp, wholesale, column3, column4)
SELECT DISTINCT TableA.ID FROM TableA INNER JOIN Ranges ON TableA.ID BETWEEN Ranges.id_lower AND Ranges.id_upper
DECLARE str VARCHAR2(20); BEGIN str:='Test'; FOR i IN 1..LENGTH(str) LOOP DBMS_OUTPUT.PUT_LINE('Character at index ' || i || ' is ' || SUBSTR(str, i, 1)); END LOOP; END;
SELECT a.field AS a_field, a.field2 AS a_field2, ...
select login as ID,(select COUNT(*) from users) as USERCOUNT from users;
select productname, sum(unitprice * quantity) / sum(quantity) as avg_unit_price, sum(quantity) as cnt from your_table group by productname
select order_slip,product_name,month from orders where month between '09/03/2015' and '09/09/2015'
select * from OPENQUERY(DB0PBB0,'select * from DB0PBB0.DM_CLICK where Date_stamp < to_date(''24-Jul-09'', ''dd-mon-rr'') and Date_stamp >= to_date(''23-Jul-09'', ''dd-mon-rr'')')
DELETE FROM A WHERE NOT EXISTS (SELECT * FROM B WHERE A.id = B.id)
declare @where_clause varchar(100) declare @sql_statement varchar(500) select @where_clause = 'date in (''2011-01-01'',''2012-01-01'',''2012-05-24'') AND doc = ''1''' select @sql_statement = 'select * from my_table where ' + @where_clause exec (@sql_statement)
LOAD DATA INFILE 'data.txt' INTO TABLE tbl_name FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '\r\n' IGNORE 1 LINES;
select v.* from ( select program, MAX(id) id from versions group by program ) m inner join versions v on m.program=v.program and m.id=v.id
CAST(REPLACE(CubeNumber,'AA-','') as INT) BETWEEN 1 AND 20;
DELIMITER $$ CREATE PROCEDURE procedureName(IN _uid VARCHAR(15)) BEGIN SELECT UID, COLLEGE_NAME name, COLLEGE_ADDRESS address FROM table1 WHERE uid = _uid UNION ALL SELECT UID, COMPANY_NAME name, COMPANY_ADDRESS address FROM table2 WHERE uid = _uid END $$ DELIMITER ;
SELECT id, MIN(dateA), MAX(dateB) FROM TableA GROUP BY id;
SELECT name, t2.score FROM Table1 t1 LEFT OUTER JOIN Table2 t2 ON t2.file_id = t1.id LEFT OUTER JOIN Table2 t2copy ON t2copy.file_id = t2.file_id AND t2.score < t2copy.score WHERE name LIKE :pattern AND t2copy.score IS NULL
with colors (hex_code) as ( values ('#112233'), ('#203040') ) select 'rgb('|| ('x'||substr(hex_code,2,2))::bit(8)::int||','|| ('x'||substr(hex_code,4,2))::bit(8)::int||','|| ('x'||substr(hex_code,6,2))::bit(8)::int||')' from colors ;
select * from my_table where not regexp_like(name,'\_sp[0-9]+$')
with sec_enrollment as ( select course_id, sec_id, count(ID) as enrollment from section natural join takes where semester = 'Fall' and year = 2009 group by course_id, sec_id) , max_enrollment as ( select max(enrollment) as maxenrollment from sec_enrollment) select course_id, sec_id from sec_enrollment s join max_enrollment m on s.enrollment = m.maxenrollment
Select q fom QuestionInfo q where q.name in (Select r.name from ResponseInfo q2 where r.isConflict = 'yes')
stringBuilder.append("CREATE TABLE IF NOT EXISTS tablename ( id INT NOT NULL AUTO_INCREMENT, article_id INT, "); for (int i=0; i<verbList.size(); i++){ stringBuilder.append("`"+verbList.get(i)+"`"+" SMALLINT, "); } stringBuilder.append("PRIMARY KEY (id))"); String finalString = stringBuilder.toString();
select count(*) from UserService where ServiceId = 3 and UserId in (select UserId from UserService where ServiceId != 3)
update [TEST-PH].[dbo].[Emp_PosDepartments] set Code = Code + 200
SELECT COALESCE( (SELECT ROUND(SUM([Time]*[Price]),0) FROM [tblTime] Y WHERE Y.[OwnerId] = <ID> AND Y.[Invoice] = 'True') , 0) -- value 0 is used only if SELECT returns NULL + COALESCE( (SELECT ROUND(SUM([Amount]*[Price]),0) FROM [tblMaterial] M WHERE M.[OwnerId] = <ID> AND M.[Invoice] = 'True') , 0) -- value 0 is used only if SELECT returns NULL
select * from table where col in ('foo1', 'foo2') select * from table where col = 'foo1' or col = 'foo2'
CREATE VIEW ProdLink.Users AS select * from dblink( (select conn_string from conn_string where conn = 'that_one'), 'select * from users' ) as t1 ( userid uuid, email varchar(50), alias varchar(50), fullname varchar(50), password varchar(100) );
SELECT v.* FROM vendors v WHERE NOT EXISTS ( SELECT * FROM vendor_styles vs1 INNER JOIN vendor_styles vs2 ON vs1.style_id = vs2.style_id AND vs1.vendor_id = 1 --- insert vendor id here WHERE vs2.vendor_id = v.id)
order by min("Date")
WITH ctTableA AS (Select * FROM tableA WHERE fldAID=A), ctTableB AS (Select * FROM tableB WHERE fldAID=A) SELECT * FROM ctTableA INNER JOIN ctTableB ON ctTableA.fldX=ctTableB.fldX
select l.loan_id, max(ph.received_d) as last_payment_date, max(case when ph.co = 1 then coalesce(ph.received_d, ph.month) end) as charge_off_date from loans l left join payment_history ph on ph.loan_id = l.loan_id group by l.loan_id;
WHERE semi_sentence NOT RLIKE '[[:<:]](to|a)[[:>:]]'
select t.*, g.tally from mytable t, (select count(*) as tally from mytable ) as g;
WHERE DateDiff(d, Received, GETDATE()) = 0
select a.col1, sum (case when a.YourDateColumn between to_date ('01/01/1900', 'DD/MM/YYYY') and to_date ('01/10/1990', 'DD/MM/YYYY') then a.a1 else 0 end) as a1total, sum (case when a.YourDateColumn between to_date ('01/01/1992', 'DD/MM/YYYY') and to_date ('01/10/1992', 'DD/MM/YYYY') then a.a2 else 0 end) as a2total from A group by a.col1
select t.* from table t where not exists (select 1 from table t2 where t2.col2 = t.col2 and t2.col3 = t.col3 and t2.id <> t.id );
select c.* from clients c where c.name < (select c2.name from clients c2 where c2.id = 123) order by c.name;
SELECT name,lastname,id,Position FROM ( SELECT name,lastname,id,base_layers.position AS Position FROM base_layers WHERE base_layers.section_id =1 UNION SELECT name,lastname,id,selects.position FROM selects WHERE selects.section_id =1 UNION SELECT name,lastname,id,subbases.position FROM subbases WHERE subbases.section_id =1 )x ORDER BY Position ASC
WHERE timestamp_b >= current_timestamp ORDER BY ABS(timestamp_c - timestamp_a)
DECLARE @tablename sysname SET @tablename = 'ps_vars' + @datasetid IF (OBJECT_ID(@tablename, 'U') IS NOT NULL) BEGIN SET @sql = ' UPDATE ' + QUOTENAME(@tablename) + ' SET programming_notes = replace(programming_notes, ''Some of the variables listed are source variables.'') '; EXEC sp_executesql @sql END
SELECT * FROM "HOSPITAL" H JOIN "HOSPITAL_SPECIALIZE" HS ON H."HOSPITAL_ID" = HS."HOSPITAL_ID" WHERE DECODE("MATERINITY", 'YES', 1, 0) + DECODE("ENT", 'YES', 1, 0) + DECODE("DERMATOLOGY", 'YES', 1, 0) + DECODE("ORTHOPEDICS", 'YES', 1, 0) >= 2
SELECT room.id_room , room.name_room , room.available_room - SUM(COALESCE(reservation.reserved_qty, 0)) AS remaining_rooms FROM room LEFT OUTER JOIN reservation ON room.id_room = reservation.id_room WHERE checkin_date IS NULL OR @day BETWEEN checkin_date AND checkout_date GROUP BY room.id_room, room.name_room;
SELECT CONVERT(INT,YourColumn) % 1000 FROM dbo.YourTable
where Year ='2013' and CAST(Calendarweek AS INT) >= datepart(week,getdate())-6
select case when c.ClientId <> @clientid then c.Name else '' end as ClientName, case when c.ClientId <> @clientid then @ClientId := c.ClientId else '' end as ClientId, p.ContactId, p.Name as ContactName from Clients c inner join Contacts p on p.ClientId = c.Clientid , (select @clientid := -1) x order by c.ClientId, p.ContactId
