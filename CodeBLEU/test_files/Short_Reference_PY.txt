with open("File1.txt") as fin1: lines = set(fin1.readlines()) with open("File2.txt") as fin2: lines.update(set(fin2.readlines())) with open("file3.txt", 'w') as fout: fout.write('\n'.join(list(lines)))
process = subprocess.Popen([path_to_acrobat, '/n', '/A', 'page=' + page, path_to_pdf], shell=False, stdout=subprocess.PIPE)
test[numpy.logical_or.reduce([test[:,1] == x for x in wanted])]
>>> import re >>> pattern = r"\t(\w+) -- (\w+)" >>> s = ' test1 -- test2' >>> a, b = re.search(pattern, s).groups() >>> a 'test1' >>> b 'test2'
class DummyClient: def __init__(self): def callback_get_login(realm, username, may_save): name = raw_input("Enter your svn login : ") password = getpass.getpass("Enter your svn password :") return True, name, password, False self.client.callback_get_login = callback_get_login
def main(): with open("in.txt", "rb") as f, open('out.txt','w') as output: byte = f.read(1) while byte != "": output.write(str(ord(byte))) byte = f.read(1) if __name__ == '__main__': main()
import itertools as it def vecAdd(v1, v2): return tuple(it.imap(add, v1, v2)) def vecMul(v1, f): return tuple(it.imap(mul, v1, it.repeat(f)))
def fields(cursor): results = {} column = 0 for d in cursor.description: results[d[0]] = column column = column + 1 return results
name = 'harold' order_id = driver.find_element_by_xpath('//div[@class="boxbody"]//table//tr[td[last()][text()="%s"]]/td[1]/a' % name) print order_id.text
os.path.dirname("http://www.google.com/test") # outputs http://www.google.com
def singleNumber(nums): unique = 0 for num in nums: unique ^= num return unique
user.email = Email.as_unique('foo@bar.com')
for tup in list: a,b,c,d,e = tup
>>> from __future__ import unicode_literals >>> s = 'hi' >>> type(s) <type 'unicode'>
from glob import glob from process import process_one_file for i in range(100): process_one_file(glob('prefix_foo_{}_*'.format(i)))
List = [(3,5,6,7,6),(3,5,3,2,6),(3,6,1,0,5)] X= [1,4,5,6] scores = [] for item in List: scores.append(tuple(map(lambda x: 0 if item[2] < x else 1, X))) result = [] for item, score in zip(List, scores): result.append(item + score) print(result) # [(3, 5, 6, 7, 6, 1, 1, 1, 1), (3, 5, 3, 2, 6, 1, 0, 0, 0), (3, 6, 1, 0, 5, 1, 0, 0, 0)]
import lxml.html t = lxml.html.fromstring("...") t.text_content()
>>> from decimal import * >>> getcontext().prec = 100 >>> Decimal(2).sqrt() Decimal('1.414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641573')
for i in x: print i
import urllib2 url="http://www.test.com/page.html" page=urllib2.urlopen(url) data=page.read() for item in data.split("</h3>"): if "<h3>" in item: print item.split("<h3>")[1]
import subprocess p = subprocess.Popen(['./script.sh', '-p', '1234'], stdin=subprocess.PIPE, stdout=subprocess.PIPE) stdout, stderr = p.communicate(input='password\nauth username\nauth password\n')
'test': fields.function(_get_value, type='integer', store=True, 'Test'),
Not very well documented outside of vim. In vim: help python Look at other python scripts at vim.org
# myvariables.py name = 'Steve' # main.py import myvariables print myvariables.name
mainwindow.setWindowFlags(QtCore.Qt.FramelessWindowHint) mainwindow.showFullScreen()
l = [[name_d, 5], [name_e, 10], [name_a, 5]] # copy l_sorted = sorted(l, key=lambda x: (x[1] * -1, x[0])) # in place l.sort(key=lambda x: (x[1] * -1, x[0])
from collections import Counter with open('ip.txt') as f: cnt = Counter(line.strip() for line in f) print('{:<20} {}'.format('IP Address', 'count(number of repeated)')) for ip, c in cnt.most_common(): print('{:<20} {}'.format(ip, c))
someXML = lxml.etree.XML(someString) if ns is None: ns = {"m": someXML.tag.split("}")[0][1:]} someid = someXML.xpath('.//m:ImportantThing//m:ID', namespaces=ns)
>>> lis = [1,-5,10,6,3,-4,-9] >>> sorted(lis, key=abs, reverse=True) [10, -9, 6, -5, -4, 3, 1]
import numpy import matplotlib.pyplot as plt x = numpy.random.randn(1000) values, bins, _ = plt.hist(x, normed=True) area = sum(numpy.diff(bins)*values)
import pygame from pygame.locals import * pygame.init() def circle_drawing(surf): pass #your circle drawing function using passed in surface DISPLAY = (1, 1) DEPTH = 32 FLAGS = 0 screen = pygame.display.set_mode(DISPLAY, FLAGS, DEPTH) work_surface = pygame.Surface((500,500)) count = 0 while True: ws = circle_drawing(work_surface.copy()) pygame.image.save(ws, "circles_" + str(count)+".png") count +=1
a = [] for q in sorted((set(q) for q in sort), key=len, reverse=True): if not any(q.issubset(Q) for Q in a): a.append(q) a = [list(q) for q in a] # Back to lists, if you want
class InternForm(ModelForm): # ... class Meta: model = Intern class ApplyInternForm(InternForm): class Meta: model = Intern exclude = ('is_active',)
print df col 0 20151028 193133 1 20151028 193133 2 20151028 193133 df['col'] = pd.to_datetime(df['col'], format="%Y%m%d %H%M%S") print df col 0 2015-10-28 19:31:33 1 2015-10-28 19:31:33 2 2015-10-28 19:31:33
from itertools import izip with open('data.txt', 'r') as f: for line1, line2 in izip(*(iter(f),) * 2): print line1, line2
im = ... # get image into PIL image instance dpi = im.info["dpi"] # retrive the DPI print dpi # (x-res, y-res) im.info["dpi"] = new dpi # (x-res, y-res) im.save("PNG") # uses the new DPI
def bar(self): assert isinstance(self, Foo) return self
class EnumChoices(views.APIView): class EnumPermission(permissions.BasePermission): def has_permission(self, request, view): # whatever permission logic you need, e.g. return request.user.has_perm("planning.view_enums") permission_classes = (permissions.IsAuthenticated, EnumPermission) def get(self, request): enums = {} return Response(enums)
from Tkinter import * def getvalue(): e1_var.get() l1 = Label(root, text=e1_var).grid() root = Tk() e1_var = StringVar e1 = Entry(root, textvariable=e1_var).grid() b1 = Button(root, command=getvalue).grid() root.mainloop()
$ . |-- happy_birthday/ |-- __init__.py |-- art.txt |-- MANIFEST.in |-- README.rst |-- setup.py
if len(the_entry_widget.get()) == 0: do_something()
In [1]: l = [122,423,134] In [2]: [int(str(val)[::-1]) for val in l] Out[2]: [221, 324, 431]
import itertools as it, operator as op summary_trees = [] for k,g in it.groupby(sorted_trees, key=op.itemgetter(0)) tempg=list(g) summary_trees.append([k, sum(i[2] for i in tempg), sum(i[3] for i in tempg)])
catString = "randomtextrandomtext (cats:1)=1 randomtext randomtextrandomtext (cats:3)=3 randomtext randomtext (cats:1540)=1,540 randomtextrandomtext randomtext (cats:85):85 randomtext" result = '' end = -1 try: while True: start = catString.index('(cats:', end+1) end = catString.index(')', start) result += catString[start:end+1] except ValueError: pass print(result)
if int(humidity)>75:
if line_num == 151: if self.run_count == 1: print(values[self.run_count-1]) elif line_num == 129: if self.run_count == 2: print(values[self.run_count-1]) elif self.run_count == 3: print("here") else: print(line_num) f.write(line)
try: while True: do_something() except KeyboardInterrupt: pass
tree = (5, (8, (12, None, None), (2, None, None)),(9, (7, (1, None, None), None), (4, (3, None, None), None))) def tree_depth(node): if not isinstance(node, tuple): return 1 else: return max(tree_depth(subnode) for subnode in node) + 1 print tree_depth(tree)
query = 'SELECT id,sing_name,bir_yr FROM singers_list WHERE bir_yr = %s' curs.execute(query, (year, ))
def sumD(num): if num == 0: return 0 return (num % 10) + sumD(num // 10)
>>> '\\' '\\' >>> len('\\') 1 >>> print '\\' \ >>> '\(' '\\(' >>> len('\(') 2 >>> print '\(' \(
print "I'm inside Python file %s" % __file__
_, FILENAME = os.path.split(infile)
path = os.path.join(os.path.dirname(__file__), '..', 'templates', 'myPage.html')
idle idle-python2.7
>>> from datetime import datetime as dt >>> date_str='12/20/2014 15:25:05 pm' >>> date_obj = dt.strptime(date_str, '%m/%d/%Y %H:%M:%S %p') >>> dt.strftime(date_obj, '%m/%d/%Y %I:%M:%S %p') '12/20/2014 03:25:05 PM'
for i,row in enumerate(Mtx): #same thing as `for i in range(len(Mtx)):` Mtx[i][i]=0 Mtx[i][i]=1-sum(Mtx[i]) ##could also use (if it makes more sense to you): #row[i]=0 #Mtx[i][i]=1-sum(row)
import sys, select, os i = 0 while True: os.system('cls' if os.name == 'nt' else 'clear') print "I'm doing stuff. Press Enter to stop me!" print i if sys.stdin in select.select([sys.stdin], [], [], 0)[0]: line = raw_input() break i += 1
<html> <header> <title>...</title> </header> <body> <header>...</header> <iframe src="bluetoothscript.php"></iframe> <footer>...</footer> </body> </html>
import numpy as np import pandas df = pandas.DataFrame(dict(x=['1', 'a5', 'cde9', '1', 'cde9'])) unique_vals, df['keys'] = np.unique(df.x, return_inverse=True) print df
@app.route('/api/v1/do/something', methods=['POST']) def api_v1_do_something(): return json_response(json.dumps({ "result": "success", "data": {"a": 1, "b": 2}, }))
>>> from google.appengine.ext.blobstore import BlobInfo >>> qry = BlobInfo.all() >>> for f in qry: ... print f.filename
if A == B and C >= D and C <= E:
from StringIO import StringIO import pycurl url = 'http://www.google.com/' storage = StringIO() c = pycurl.Curl() c.setopt(c.URL, url) c.setopt(c.WRITEFUNCTION, storage.write) c.perform() c.close() content = storage.getvalue() print content
class Student: # Constructor def __init__(self, name, homework, quizzes, tests): self.name = name self.homework = homework self.quizzes = quizzes self.tests = tests # Function to return average for this student def get_average(self): h = average(self.homework) ... return total_average
result = [my_list[idx:idx + 3] for idx in range(0, len(my_list), 3)] # [['text1', 'text1', 'text1'], # ['text2', 'text2', 'text2'], ['text3', 'text3', 'text3']]
Sub Macro1() ActiveWorkbook.Date1904 = True End Sub
from itertools import chain result = list(chain.from_iterable(foo(x) for x in arr))
def clean(self, data, initial=None): try: if data.size > somesize: raise ValidationError('File is too big') (junk, ext) = os.path.splitext(data.name) if not ext in ('.jpg', '.gif', '.png'): raise ValidationError('Invalid file type') except AttributeError: raise ValidationError(self.error_messages['invalid']) return FileField.clean(self, data, initial)
from pywinauto import application app = application.Application.start("C:\\EnergyPlusV7-2-0\\EP-Launch.exe") # open dialog here with pywinauto (see docs), it's bound to interface can't help here # press next button
import asyncio import time from concurrent.futures import ProcessPoolExecutor @asyncio.coroutine def coro(loop): ex = ProcessPoolExecutor(2) yield from loop.run_in_executor(ex, time.sleep, 10) # This can be interrupted. loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.wait_for(coro(loop), 1))
details = [x for x in myList if x[0] == prompt] if details: print details
def readDb(): ... #Fetch a lot of data from db, spends a lot time return aList def calculation(data): x=data ...process x... return y data = readDb() calculation(data) calculation(data) calculation(data)
>>> my_list = ['a','b','c'] >>> my_values = [1,2,3] >>> for k, v in zip(my_list, my_values): ... globals()[k] = v ... >>> a 1 >>> b 2 >>> c 3
>>> import time >>> time.mktime(time.strptime('02-12-2012', '%d-%m-%Y')) 1354424400.0
>>> class A(type): ... def __repr__(self): ... return '<this is not a class!>' ... >>> class B(object): ... __metaclass__ = A ... >>> print B <this is not a class!>
class PrintName: def __init__(self, value): self._value = value printName(self._value) def printName(value): for c in value: print c
from itertools import takewhile, dropwhile with open('logfile') as fin: start = dropwhile(lambda L: '03.Nov.2012' not in L, fin) until = takewhile(lambda L: '12.Oct.2013' not in L, start) query = (line for line in until if 'search string' in line) for line in query: pass # do something
from mapreduce import context def mapper(model_entity_instance, params_dict): """ my mapper function """ ctx=context.get() mapper_params=ctx.mapreduce_spec.mapper.params
SET character_set_client = x; SET character_set_results = x; SET character_set_connection = x;
def init(*args): global connection connection = Connection(*args) pPool = Pool(initializer=init, initargs=conargs)
>>> text = "Studies have shown that...[^title=Fish consumption and incidence of stroke: a meta-analysis of cohort studies]... Another experiment demonstrated that... [^title=The second title]" >>> re.findall(r"\[\^title=(.*?)\]", text) ['Fish consumption and incidence of stroke: a meta-analysis of cohort studies', 'The second title']
# The data x = np.linspace(0, 10, 1000) y = np.sin(2 * np.pi * x) # The colormap cmap = cm.jet # Create figure and axes fig = plt.figure(1) fig.clf() ax = fig.add_subplot(1, 1, 1) c = np.linspace(0, 10, 1000) ax.scatter(x, y, c=c, cmap=cmap)
class MainClass(): def __init__(self, another_class): self.another_class = another_class class AnotherClass(): def required_method(self): blah blah blah another = AnotherClass() main_class = MainClass(another_class) main_class.another_class.required_method()
class ProductFilter(django_filters.FilterSet): nameprice = NamePriceFilter() class Meta: model = Product fields = ['nameprice']
re.split(r',\t', line)
>>> int.from_bytes(b'hi', 'big', signed=False) % 3 2
#!/usr/bin/python
for line in open('myfile.dat'): if not line.rstrip(): continue # skip blank lines if line[0] in ('-', '#'): continue # skip lines with these prefixes line = line.replace('-sale', '') print line,
@api_view(['POST']) def store_feedback_view(request, store_id): serializer = FeedbackSerializer(data=request.DATA) if serializer.is_valid(): # this line added: serializer.object.content_object = get_object_or_404(Store, id=store_id) serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
import tempfile fh = tempfile.NamedTemporaryFile() # this creates an actual file in the temp directory fh.write(my_string) print fh.name call_other_thing(fh.name) fh.close() # file is now deleted
{% for x in y %} {{ x }} {{ forloop.counter }} #prints the number #if y = ['a', 'b', 'c'] #{{ forloop.counter }} will print 1, 2, 3
>>> original = [[1, 2, 3, 4], [1, 2, 3, 4], [2, 3, 4, 5]] >>> transposed = zip(*original) >>> transposed [(1, 1, 2), (2, 2, 3), (3, 3, 4), (4, 4, 5)] >>> original[2][3] 5 >>> transposed[3][2] 5
blurred = cv2.blur(img,(3,3))
trial_dict = {1:'ABC', 2:'PQR', 3:'DEF'} trial_dict_inv = {v: k for k, v in trial_dict.items()} trial_list = [['ABC','-','+','/','+','-','*'], ['DEF','-','+','/','+','-','*'], ['PQR','-','+','/','+','-','*']] print sorted(trial_list, key= lambda z:trial_dict_inv[z[0]])
books_w_author_count = Book.objects.annotate(num_authors=Count('authors')) # just a filter by number of objects books_w_author_count.filter(num_authors__gt=1) # just ordering on the count books_w_author_count.order_by('num_authors') class Author(modules.Model): # ... class Book(models.Model): # ... authors = models.ManyToManyField(Author)
def test(classToMimic): class Test(classToMimic): def methodToOverwrite(self): doStuffForTest return Test
lst2 = [max(x) for x in lst1]
class Test(object): def __init__(self): self.lists = [] def bind(self, value): self.lists.append(value)
import csv columns = [] #save the columns in this list with open('myfile.csv','r') as f: reader = csv.reader(f, delimiter='\t') ind = next(reader).index('Default') #find the index of 'Default' in the header for row in reader: columns.append(row[ind])
scores <- predict(results.rf, X, type="prob", norm.votes=FALSE, predict.all=FALSE, proximity=FALSE, nodes=FALSE)
self.UsrName = QLineEdit("username") self.UsrName.mousePressEvent = lambda event: self.UsrName.clear()
import _thread a_lock = _thread.allocate_lock() def certainFunction(): with a_lock: print("Here's the code that you don't want to execute at the same time as onSpecificKeyCall()") def onSpecificKeyCall(): with a_lock: print("Here's the code that you don't want to execute at the same time as certainFunction()")
>>> x = [1, 4, 6, 8, 3, 5, 7, 1, 5, 8, 3, 9, 2, 8] >>> x = sorted(x) >>> x[len(x)%2::2] + x[::-2] [1, 2, 3, 5, 6, 8, 8, 9, 8, 7, 5, 4, 3, 1]
with open("txt_files/input_data_set.txt") as f: reading_file_info = f.read()#reading lines exact content reading_file_info=f.read tdm = textmining.TermDocumentMatrix() tdm.add_doc(reading_file_info) tdm.write_csv('txt_files/input_data_set_result.txt', cutoff=1) for row in tdm.rows(cutoff=1): print row
QApplication app(argc, argv); // phonon initialization, and play app.exec()
class MyView(View): @my_decorator def dispatch(self, *args, **kwargs): return super(MyView, self).dispatch(*args, **kwargs)
import hashlib a = hashlib.md5('alsdkfjasldfjkasdlf') b = a.hexdigest() as_int = int(b, 16) print bin(as_int)[2:] # 11110000110010001100111010111001011010101011110001010000011010010010100111100
from .Line import Line
//tr[@class="ListRow1" and contains(td/a, "Media Analyst")]/td/input[@value="deactivate"]
url_pattern = 'ftp://ftp.cdc.noaa.gov/Datasets/ncep.reanalysis/surface/air.sig995.{}.nc' for year in range(2006, 2012+1): url = url_pattern.format(year) print(url)
In [4]: things = ["black", 7, "red", 10, "white", 15] In [5]: color = things[::2] In [6]: color Out[6]: ['black', 'red', 'white'] In [7]: size = things[1::2] In [8]: size Out[8]: [7, 10, 15]
import time import logging def profile(func): def wrap(*args, **kwargs): started_at = time.time() result = func(*args, **kwargs) logging.info(time.time() - started_at) return result return wrap @profile def foo(): pass
def toggle(fshow,fhide): fhide.pack_forget() fshow.pack() btn1 = Button(btnframe,text="screen1", command=lambda:toggle(myframe1,myframe2),width=9) btn1.pack(side=LEFT) btn2 = Button(btnframe,text="screen2",command=lambda:toggle(myframe2,myframe1),width=9) btn2.pack(side=LEFT)
from subprocess import Popen, PIPE proc = Popen(["halSummarizeMutations", hal_output], stdout=PIPE) summary_mutation = proc.communicate()[0]
set.seed(1) # for reproducability n <- 100000 # number of random variables # first beta distribution a1 <- 0.5 b1 <- 0.9 X <- rbeta(n, a1, b1) # second beta distribution a2 <- 0.9 b2 <- 0.5 Y <- rbeta(n, a2, b2) # calculate product Z <- X * Y # Have a look at the distributions plot(density(Z), col = "red", main = "Distributions") lines(density(X), lty = 2) lines(density(Y), lty = 2)
>>> from collections import Counter >>> Counter([d.rsplit('-',1)[0] for d in date_list]) Counter({'2016-03': 2, '2016-02': 2, '2016-01': 1})
import sys data = sys.stdin.read()
for i in range(100): b = np.arange(10) * np.random.randint(10) ax[0].clear() ax[1].clear() ax[0].bar(a,b,align='center') # ...
>>> '{:08b}'.format(250) '11111010' >>> '{:08b}'.format(2) '00000010' >>> '{:08b}'.format(7) '00000111' >>> '0x{:02X}'.format(7) '0x07' >>> '0x{:02X}'.format(250) '0xFA'
result = session.getbulk(0, 48, vars) for i in range(0, len(result), 3): print "ifind: "+result[i]+" ifdesc: "+result[i+1]+" status: "+result[i+2]
url = "file:///your/path/to/downloaded/file.html" dr.get(url)
>>> res = [] >>> arr1 = [1, 2, 3] >>> arr2 = [5, 0, 10] >>> res = map(lambda x, y: x - 0.5 * y, arr1, arr2) >>> res [-1.5, 2.0, -2.0]
$ module avail $ module unload python/2.6.6 $ module load python/2.7.9
import datetime def main(): print "Welcome To the Date Converter" print "Please Enjoy Your Stay" print date_string = raw_input("Please enter a date in MM/DD/YYYY format: ") d=datetime.datetime.strptime(date_string,'%m/%d/%Y') print(d.strftime('%B %d, %Y')) if __name__=='__main__': main()
from os from django.conf import settings import configparser class DynamicSettingsViewMixin(object): def dispatch(self, request, *args, **kwargs): config = configparser.ConfigParser() config.read(os.path.join(os.path.dirname(__file__), 'settings.ini')) settings.configure(**config['debug']) return super(DynamicSettingsViewMixin, self).dispatch(request, *args, **kwargs) class MyAwesomeAppView(DynamicSettingsViewMixin, TemplateView): pass
count = 0 def counter(x,y): global count count = count + 1 return cmp(x,y) sorted(mylist, cmp=counter) print count
import builtins def print(*args, **kwargs): builtins.print(" > ", *args, **kwargs)
for line in tailer.follow(open('test.txt')): print line
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('0.0.0.0', 0)) print('listening on port:', sock.getsockname()[1])
newList = [x[: 2] + y + x[-1:] for x, y in zip(l1, l2)]
def initWidget(self, items): listBox = QVBoxLayout(self) self.setLayout(listBox) scroll = QScrollArea(self) listBox.addWidget(scroll) scroll.setWidgetResizable(True) scrollContent = QWidget(scroll) scrollLayout = QVBoxLayout(scrollContent) scrollContent.setLayout(scrollLayout) for item in items: scrollLayout.addWidget(item) scroll.setWidget(scrollContent)
f = open("a.txt", "r") f.readline(size)
nums = str(12344444442) from itertools import groupby as gby if all (int(num) % 2 for num in nums): print("All are Odd numbers") else: m_list=max((list(g) for n,g in gby(nums,key=lambda x:int(x)%2) if not n),key=len) # ['4', '4', '4', '4', '4', '4', '4', '2'] Longest even sequence print(nums.index("".join(m_list))) # 3 Starting index
>>> import struct >>> struct.unpack('<i', 'o\xf2\x00\x00') (62063,)
for k in topology: for j in topology: if k == j: continue else: # compare values at key k and key j my_compare_function(topology[k], topology[j])
from module import *
def user_link(self, obj): return '<a href="%s">%s</a>' % ( urlresolvers.reverse('admin:auth_user_change', args=(obj.user.id,)), obj.user ) user_link.allow_tags = True user_link.short_description = 'User'
>>> import pymongo >>> c = pymongo.MongoClient() >>> c['admin'].command('serverStatus', workingSet=True)['workingSet'] {u'note': u'thisIsAnEstimate', u'computationTimeMicros': 4555, u'pagesInMemory': 7, u'overSeconds': 388}
import sys sys.stdout = open('/dev/stdout', 'w')
my_dict = {"Polic":("a","c","e"), "Batman":("b","d")} with open("my/File.txt", "w", encoding='utf-8') as file: for k,v in my_dict.items(): file.write('"{}","{}"\n'.format(k, '","'.join(v)))
>>> os.path.join(os.path.dirname("/home/user/folder1/folder2/name.txt"), "name2.txt") '/home/user/folder1/folder2/name2.txt'
>>> from itertools import permutations >>> a = [1, 2, 3] >>> list(permutations(a, 2)) [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]
checkList = set(['a', 'b', 'c']) for i in textList: check, rest = i.split(':', 1) if check.strip() not in checkList: continue data = rest.strip() # insert data into database; check is your column name.
def setup_django_env(path): import imp, os from django.core.management import setup_environ f, filename, desc = imp.find_module('settings', [path]) project = imp.load_module('settings', f, filename, desc) setup_environ(project) setup_django_env('/path/to/django/project/')
pip install pyinstaller
>>> from __future__ import division # not required in py3.x def func_apply(func_name, **kwargs): vals = [kwargs[key] for key in sorted(kwargs)] #sort the keys lexicographically return [func_name(*x) for x in zip(*vals)] ... >>> func_apply(my_minus, x=[2, 4, 5, 7], y=[1, 4, 3, 9]) [1, 0, 2, -2] >>> func_apply(my_divd, a=[2, 4, 5, 7], b=[1, 4, 3, 9]) [2.0, 1.0, 1.6666666666666667, 0.7777777777777778]
app=TkinterApp() def refreshApp(): app.update() return True gobject.idle_add(refreshApp) loop = gobject.MainLoop() loop.run()
class A: a = property(**attribute())
ssh.exec_command("/sbin/reboot -f > /dev/null 2>&1 &")
from urlparse import parse_qs from wsgiref.simple_server import make_server, demo_app def showresult(environ, start_response): status = '200 OK' # HTTP Status headers = [('Content-type', 'application/json')] # HTTP Headers start_response(status, headers) params = parse_qs(environ['QUERY_STRING']) # Here you get the values in a dict! print params # The returned object is going to be printed return "ok" httpd = make_server('', 8081, showresult) # Respond to requests until process is killed httpd.serve_forever()
import pymysql conn = pymysql.connect(host='127.0.0.1', unix_socket='/tmp/mysql.sock', user='root', passwd=None, db='mysql') cur = conn.cursor() cur.execute("SELECT Host,User FROM user") for response in cur: print(response) cur.close() conn.close()
>>> cmd = [ ... "Message %s", ... "Param %s" ... ] >>> msg = "foo" >>> param = "bar" >>> newcmd = [item % par for item,par in zip(cmd, (msg,param))] >>> newcmd ['Message foo', 'Param bar']
import glob for name in glob.glob('testing*08-05.txt'): print name
>>> with tempfile.NamedTemporaryFile() as temp: ... print temp.name ... /tmp/tmp7gjBHU
>>> lst = ['a', 'b', 'c'] >>> i = lst.index('b') # This raises ValueError if there's no 'b' in the list. >>> lst[i:i+1] = 'b1', 'b2', 'b3' >>> lst ['a', 'b1', 'b2', 'b3', 'c']
with open(name) as infile, open('output', 'w') as outfile: contents = infile.read() new_contents = re.sub(r'\s+([A-Z])', r'\n\1', contents) outfile.write(new_contents)
def jinjacms_get(self): # member function for JinjaCMS class .... if config.GDRIVE_HOOK: #optional multiple inheritance from jinjacms import drivecms JinjaCMS = type(str('JinjaCMS'), (drivecms.CmsDrive, cmsbase.CmsHandler), {'get': jinjacms_get}) else: JinjaCMS = type(str('JinjaCMS'), (cmsbase.CmsHandler, ), {'get': jinjacms_get})
for line in open('myfile.txt'): # opened in text-mode; all EOLs are converted to '\n' line = line.rstrip('\n') process(line)
# \b(\w+)(?:[ ]\1(?=[ ]|$)){3} \b ( \w+ ) # (1), One (?: # Plus [ ] \1 # Three (?= [ ] | $ ) ){3} # Four Total
import re str = '12-1 abcd fadf adfad' m = re.search('(\d+-\d+)', str) if m: found = m.group(0) print found
for i in range(len(t)): row = [[ e.a, e.b, e.c, ...] + [e.z[0], e.z[1], e.z[2], ...] for e in t[i]] t.writerow(row)
block_size = len(tickers) / size # this will be 40 in your example for i in range(block_size): ticker = tickers[rank * block_size + i] process(ticker) def process(ticker): # load data # process data # output data
>>> datetime.now().isoformat() '2012-06-16T19:34:05.418407' >>> sorted([datetime.now().isoformat(), (datetime.now() - timedelta(days=100)).isoformat()]) ['2012-03-08T19:34:06.802304', '2012-06-16T19:34:06.802288']
In [339]: df.apply(lambda x: x[x['Col']], axis=1) Out[339]: 0 20 1 10 2 15 3 4 4 1 5 10 dtype: int64
>>> dictionary1 = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'} >>> dictionary2 = {'value1': 'AAA', 'value3': 'CCC'} >>> {k: dictionary2.get(v, v) for k, v in dictionary1.items()} {'key3': 'CCC', 'key2': 'value2', 'key1': 'AAA'}
def x(cond): if cond: "dummy statement" print('Still running!')
os.system('x-terminal-emulator -t "Installing new packages" -e "sh -c \\"sudo tlmgr install %s; touch /tmp/install_completed\\""' % packagesString) while not os.path.exists("/tmp/install_completed"): time.sleep(0.1) os.remove("/tmp/install_completed")
>>> from itertools import zip_longest >>> [sum(i) for i in zip_longest(*l, fillvalue=0)] [2, 8, 2, 0]
def main(): done = False while not done: limit = ask_limit() speed = ask_speed() findfine(speed, limit) done = raw_input("Done? ") == "yes"
>>> for key, (num1, num2, num3) in mydict.iteritems(): ... print key, num1, num2, num3 ... a 0 1 2 c 6 7 8 b 3 4 5
import numpy as np k=1 # segmentation seg = np.zeros((100,100), dtype='int') seg[30:70, 30:70] = k # ground truth gt = np.zeros((100,100), dtype='int') gt[30:70, 40:80] = k dice = np.sum(seg[gt==k])*2.0 / (np.sum(seg) + np.sum(gt)) print 'Dice similarity score is {}'.format(dice)
def load(filename): features = [] with codecs.open(filename, 'rb', 'utf-8') as f: return f.readlines()
data_dict = {} for key, value in list: if key not in data_dict: data_dict.update({key: [value]}) else: data_dict[key].append(value)
#circle.circle_computation() if circle_create == True: #circle_list[i].draw_circle() for j in xrange(i): circle_list[j].draw_circle()
from flask import send_from_directory @app.route('/my-url/') def myurl(): return send_from_directory(app.static_folder, 'foo/bar/index.html')
import numpy as np W = np.maximum( A, A.transpose() )
def collatz(number): if number % 2 == 0: print(number // 2) return number // 2 elif number % 2 == 1: result = 3 * number + 1 print(result) return result n = input("Give me a number: ") while n != 1: n = collatz(int(n))
r'^t\d{4,5}$'
import re from bs4 import BeautifulSoup soup = BeautifulSoup(content) for x in soup.find_all('item'): print re.sub('[\[CDATA\]]', '', x.string)
class Brand(BaseModel): name = models.CharField(max_length=100, unique=True) website = models.URLField(max_length=500, blank=True, default='') def __unicode__(self): return self.name
import numpy as np no_index_df = df.reset_index() no_index_df['LONGITUDE'] = no_index_df['LONGITUDE'].apply(lambda x: [e for e in range(0, 361, longitude_bin) if e <= x][-1]) no_index_df['LATITUDE'] = no_index_df['LATITUDE'].apply(lambda x: [e for e in range(-90, 91, latitude_bin) if e <= x][-1]) avg_data = no_index_data.groupby( ['DATETIME', 'PLATFORM', 'OBTYPE', 'LONGITUDE', 'LATITUDE', 'PRESSURE'] ).mean()
from datetime import datetime from datetime import timedelta from calendar import timegm utc_dt = datetime.utcfromtimestamp(self.__modified_time) from_zone = tz.tzutc() to_zone = tz.tzlocal() utc = utc_dt.replace(tzinfo=from_zone) central = utc.astimezone(to_zone) unix_time_central = timegm(central.timetuple())
LoadFile "/usr/local/lib/libmylib.so"
import httplib from xml.dom import minidom http.request("POST", "/path/to/my/webservice", body=xml, headers = { "Host": "myservername", "Content-Type": "text/xml; charset=UTF-8", "Content-Length": len(xml) }) print minidom.parseString(http.getresponse().read())
import plotly.plotly as py url = py.plot(fig, filename='stacked-bar')
>>> from BeautifulSoup import BeautifulSoup >>> import urllib2 >>> url = 'http://www.immi.gov.au/skilled/general-skilled-migration/estimated-allocation-times.htm' >>> page = urllib2.urlopen(url) >>> soup = BeautifulSoup(page) >>> for row in soup.html.body.findAll('tr'): ... data = row.findAll('td') ... if data and 'subclass 885online' in data[0].text: ... print data[4].text ... 15 May 2011
#!/usr/bin/env python from subprocess import check_output from circuits.web import Controller, Server class Root(Controller): def index(self): return check_output("python hello.py", shell=True) app = Server("0.0.0.0:5000") Root().register(app) app.run()
with open("./the_file.txt", 'r') as f: answer = [ast.literal_eval(line.strip()) for line in f]
$ virtualenv --no-site-packages --python=/usr/bin/python2.6 myvirtualenv $ cd myvirtualenv $ source bin/activate $ cd lib/python2.6/ $ ln -s /usr/lib/pymodules/python2.6/gtk-2.0/ $ ln -s /usr/lib/pymodules/python2.6/pygtk.pth $ ln -s /usr/lib/pymodules/python2.6/pygtk.py $ ln -s /usr/lib/pymodules/python2.6/cairo/ $ python >>> import pygtk >>> import gtk
In [12]: df1 = pd.DataFrame(df.From.str.rsplit(' ',1).tolist(), columns=['Name','Email']) In [13]: df1 Out[13]: Name Email 0 Grey Caulfu <grey.caulfu@ymail.com> 1 Deren Torculas <deren.e.torcs87@gmail.com> 2 Charlto Youna <youna.charlto4@yahoo.com>
mod = __import__(module_name) fn = getattr(mod, fn_name) fn()
import subprocess stdoutdata = subprocess.getoutput("wc --lines /var/log/syslog") print("stdoutdata: " + stdoutdata.split()[0])
>>> a = ([1]) # equivalent to [1], not a tuple >>> b = ([2]) # equivalent to [2], not a tuple >>> list(zip(a,b)) [(1, 2)] >>> a = ([1],[2]) >>> b = ([3],[4]) >>> list(zip(a,b)) [([1], [3]), ([2], [4])]
>>> data = [[1, .45, 0], [2, .49, 2], [3, .98, 0], [4, .82, 1], [5, .77, 1], [6, .98, 2]] >>> List_1 = [2, 0, 1] >>> sorted(data, key=lambda e: (List_1.index(e[2]), -e[1])) [[6, 0.98, 2], [2, 0.49, 2], [3, 0.98, 0], [1, 0.45, 0], [4, 0.82, 1], [5, 0.77, 1]]
if __name__ == '__main__': try: main() except KeyboardInterrupt: print 'Killed by user' sys.exit(0)
from constraint import Problem prob = Problem() prob.addVariables(["a1", "a2"], range(10,41,2)) prob.addVariable("b1", [0, 2]) prob.addVariable("b2", range(5, 31, 5)) prob.addConstraint(lambda a1, a2: a2 <= a1, ["a1", "a2"]) prob.addConstraint(lambda b1, b2: b1 != 0 or b2 == 5, ["b1", "b2"]) for params in prob.getSolutionIter(): run_sim(**params)
for i in range(len(nestedlist)): for j in range(7): x = nestedlist[i][j] y = unicode(x, 'utf-8') nestedlist[i][j] = y.encode('cp1252')
client.get('/page/', {'filter': 'one and two'})
import csv with open("first.csv","a+") as f: r = csv.reader(f) wr = csv.writer(f,delimiter="\n") result = [] for line in r: # process lines/step 2 # append to result wr.writerow(result)
Article.objects.filter(category__in=self.object.categories.all())
def is_pal(c): return int(str(c)[::-1]) == c maxpal = 0 for a in range(999, 99, -1): for b in range(a, 99, -1): prod = a * b if is_pal(prod) and prod > maxpal: maxpal = prod print maxpal
import csv result = [] listFromCSV = [] names = ['alex','sherlock'] csvFile = open('yourFile.csv') reader = csv.DictReader(csvFile) fieldnames = reader.fieldnames for row in reader: listFromCSV.append(row) csvFile.close() for name in names: for row in listFromCSV: if name.strip() in row['surname']: result.append(row)
query = 'DELETE FROM boyd.%s WHERE teamid = %%s AND id = %%s AND year = %%s' % (statstype) self.executequery(query, values[0:3])
server { listen 80; server_name example.com; return 301 http://www.example.com$request_uri; }
from numba.compiler import compile_isolated # second argument specifies the argument types to the sum function cfunc = compile_isolated(sum, (types.int64, types.int64)) # get llvm IR as string llvm_code_str = str(cfunc.llvm_module)
>>> numpy.random.normal(size=[1, 2]) array([[-1.4734477 , -1.50257962]])
import os os.system( "google-chrome & disown " )
np.allclose(mat, np.tril(mat)) # check if lower triangular np.allclose(mat, np.triu(mat)) # check if upper triangular np.allclose(mat, np.diag(np.diag(mat))) # check if diagonal
import difflib words = ["Hi", "Hello", "Bye", "His", "Her"] print(difflib.get_close_matches('Hi', words)) # ['Hi', 'His']
import urllib import cv urllib.urlretrieve("http://192.168.0.10:8080/shot.jpg", "foto.jpg") imagen=cv.LoadImage('foto.jpg') cv.ShowImage('Image',imagen)
>>> import SimpleCV as scv >>> cam = scv.Camera() >>> del cam
k, v = next(d.items())
from django.db.models import Sum User.objects.all().annotate(total=Sum('submission__task__points'))
a = [['first', '41'], ['second', '0'], ['third', '12']] a = [[i[0], int(i[1])]for i in a] >>> print a [['first', 41], ['second', 0], ['third', 12]]
cols = [each for each in df2.columns if each not in ['name','bin']] df3 = pd.merge(df1, df2, how='left', on=['bin']) df3[cols] = df3.apply(lambda x:x['score']*x[cols],axis=1)
from IPython.display import display import sympy as sy sy.init_printing() # LaTeX like pretty printing for IPython r = sy.Symbol('r', real=True) c1 = sy.Symbol('c_1', positive=True) f = sy.exp(-c1*r) F = sy.integrate(f, (r, 0, sy.oo)) display(F)
A file_path1 R file_path2 R file_path3 A file_path4 M file_path5
def sortkey(row): return (row[5], row) def unwrap(key): sortkey, row = key return row from itertools import imap FILE_LIST = map(file, ['foo.csv', 'bar.csv']) input_iters = imap(sortkey, map(csv.csvreader, FILE_LIST)) output_iter = imap(unwrap, heapq.merge(*input_iters))
def runCommandWhenInitialized(): activeWindow = sublime.active_window() if activeWindow is not None: activeWindow.run_command("mkshelf") else: sublime.set_timeout(lambda: runCommandWhenInitialized(), 100) sublime.set_timeout(lambda: runCommandWhenInitialized(), 100)
match_region = [map(str, blob.sentences[i-1:i+2]) # from prev to after next for i, s in enumerate(blob.sentences) # i is index, e is element if search_words & set(s.words)] # same as your condition
from django.db.models import Count query = models.Host.objects.filter( host_id=host.id, timestamp__gt=datetime.datetime.strptime(from_time,'%Y-%m-%d'), timestamp__lt=datetime.datetime.strptime(to_time, '%Y-%m-%d'), server__isnull=False).values('server').annotate(server_count=Count('server'))
class SomeClass(object): # ... def __eq__(self, other): if not isinstance(other, SomeClass): return NotImplemented return self.attr1 == other.attr1 and self.attr2 == other.attr2 def __ne__(self, other): return not (self == other) # if __hash__ is not needed, write __hash__ = None and it will be # automatically disabled def __hash__(self): return hash((self.attr1, self.attr2))
>> zip([1, 2, 3], ['a', 'b', 'c']) [(1, 'a'), (2, 'b'), (3, 'c')]
from xlutils.copy import copy from xlrd import open_workbook # open the file you're interested rb = open_workbook('some_document.xlsx') # copy it to a writable variant wb = copy(rb) # find the index of a sheet you wanna rename, # let's say you wanna rename Sheet1 idx = rb.sheet_names().index('Sheet1') # now rename the sheet in the writable copy wb.get_sheet(idx).name = u'Renamed Sheet1' # save the new spreadsheet wb.save('new_some_document.xlsx') # done
sum(user.waitTime for user in self.done)/float(len(self.done))
def extract_params(line, names): words = line.split() result = {} for name in names: value = 0 for word in words: maybe_name, equals, maybe_value = word.partition('=') if maybe_name == name and equals == '=': value = maybe_value result[name] = value return result
>>> import re >>> re.search("(.*)\d{3,4}p", "Back.to.the.Future.1985.720p.BluRay.X264-AMIABLE.mkv").groups()[0] 'Back.to.the.Future.1985.'
def form_valid(self, form): post_to_api(form.cleaned_data) # now call superclass to save the form return super(UpdateProfileView, self).form_valid(form)
def model_saved(sender, **kwargs): send_mail('Subject here', 'Here is the message.', 'from@example.com', ['ndhiman08@gmail.com'], fail_silently=False) abc_obj = kwargs['instance'] #can use fields as #abc_obj.somefield print "SAVED",sender,kwargs
In [8]: import re In [9]: who, what = re.match(r'(.*) likes (.*)', 'tim likes kung pao').groups() In [10]: who Out[10]: 'tim' In [11]: what Out[11]: 'kung pao'
>>> x = 4 >>> print x 4 >>> import sys >>> sys.stdout.write(str(x)) # you have to str() your variables 4>>> # <- no newline
ServicePointManager.ServerCertificateValidationCallback = (a, b, c, e) => true ;
<record model="ir.actions.act_window" id="action_employee"> <field name="name">Employees</field> <field name="res_model">Employees.Employees</field> <field name="view_mode">tree,form</field> <field name="domain">[('user_id','=',uid)]</field> </record>
>>> class A: def x(): pass def y(): pass >>> globals().update(A.__dict__) >>> x <function x at 0x02AF1CB0> >>> y <function y at 0x022D8230> >>>
for object in mybucket.objects.all(): print(object)
import matplotlib.pyplot as plt from itertools import cycle lines = ["-","--","-.",":"] linecycler = cycle(lines) plt.figure() for i in range(10): x = range(i,i+10) plt.plot(range(10),x,next(linecycler)) plt.show()
from django.contrib.auth import authenticate, login, logout user = authenticate(username=request.POST['username'], password=request.POST['password']) if user is not None: if user.is_active: login(request, user) redirect('logged_in_url') else: redirect('user_not_active_url') else: redirect('bad_username_or_password_url')
>>> all(c=='-' for c in '-------') True >>> all(c=='-' for c in '------x') False
sql.execute(connection, """ INSERT INTO blah VALUES %s;""" % ( ", ".join("(%d)" % hid for hid in hids)))
final = [x[:2] + [[float(f) for f in x[2:]]] for x in woot]
a = ['house', 'bikeCT', 'car', 'bike', 'houseCT'] b = [x for x in a if 'CT' not in x]
from selenium import webdriver driver = webdriver.Firefox() driver.page_source
result = self.cur.executemany(sql, data)
>>> from bs4 import BeautifulSoup >>> >>> data = '<span class=H>宜家</span><span class=H>同款</span> 世纪宝贝儿童餐椅婴儿餐椅宝宝餐椅婴儿吃饭椅' >>> soup = BeautifulSoup(data) >>> soup.text '宜家同款 世纪宝贝儿童餐椅婴儿餐椅宝宝餐椅婴儿吃饭椅'
row[-3], row[-4] = 'http://www.foo.com/' + row[-3], 'http://www.foo.com/' + row[-4]
import sys for line in sys.stdin: print line
(r'/browse/article/([a-zA-Z0-9_-]+)(?:/([0-9]*))?', ArticleHandler),
>>> ''.join(str[i] for i in lOfIndexes) >>> 'elS'
from django.contrib.gis.db import models class Location(models.Model): ... objects = models.GeoManager()
filedata = filedata.replace('# DBENGINE=MYSQL', 'DBENGINE=PGSQL') filedata = filedata.replace('# DBNAME=DB1', 'DBNAME=DB1') filedata = filedata.replace('# DBRWUSER="user1"', 'DBRWUSER="user1"') ... f.write(filedata)
<script type="text/javascript" src="/<script_path_here>"></script>
for event, element in et.iterparse(f): if element.tag == 'interesting_part': # `element` is the complete <interesting_part> element, with children # process it break # ends parsing.
r'''(?: # Non-capturing group "[^"]*" # A quote, followed by not-quotes, followed by a quote | # or [^"#] # not a quote or a hash ) # end group * # Match quoted strings and not-quote-not-hash characters until... (#) # the comment begins! '''
#This is from the beginning for i in range(1, len(outputList)): # == could be what ever comparison you want. Any one in particular? if outputList[i] == outputList[i-1]: #do whatever you need to do
re.split(r'(?<!>)>(?!>)', 'ad>ad>ad>>ad')
# coding=utf-8 import csv words = ['يعمل','في','جامعة'] tags = ['verb','prep','noun'] with open('results.csv', 'w', encoding = 'utf-16', newline='') as outfile: rowlists = zip(words, tags) writer = csv.writer(outfile) for row in rowlists: writer.writerow(row)
color = getColor(rightPixel) setColor(leftPixel,color)
class params: a = 1 b = 2 c = 3 d = 4 def __call__(self): r = dict() for attr in dir(self): if not attr.startswith('_'): r[attr] = getattr(self, attr) return r p = params() function(**p())
import copy class Crazy(object): def __init__(self, body, weird=copy.copy): self.gomez = body self.cousinitt = weird def __mul__(self, n): return [self.cousinitt(x) for x in (self.gomez * n)] a = Crazy([[]]) * 3
easy_install -Z zopepackage.egg
>>> print var1[BOOT][0] trust\build\bin\AAAA\t.o
import sqlite3 conn = sqlite3.connect('example.db') c = conn.cursor() c.execute('''CREATE TABLE table_name {}'''.format(tuple(column_list)))
ax = [plt.subplot(gs[0]),] ax.append(plt.subplot(gs[1], sharey=ax[0])) ax.append(plt.subplot(gs[2], sharex=ax[0]))
import matplotlib.pyplot as plt import numpy as np col = ['c', 'm', 'g', 'y', 'k'] c_dash = [[0,[8, 4]], [0,[8, 4, 2, 4]], 'solid', [0,[8, 4, 2, 4, 2, 4]], 'solid'] for i in range(5): x, y = range(10), np.random.uniform(0., 10., 10) plt.plot(x, y, color=col[i], linestyle=c_dash[i])
g = gevent.spawn_later(5, function) g.kill()
import numpy as np x = [0,2,3,4] y = [23,4,34,67] m, __ = np.polyfit(x, y, 1) print m
def index(request): ..... return redirect('%s#club-title' % reverse('myapp:club_detail', pk=str(club.pk)))
import pandas as pd import StringIO from boto.s3.connection import S3Connection AWS_KEY = 'XXXXXXDDDDDD' AWS_SECRET = 'pweqory83743rywiuedq' aws_connection = S3Connection(AWS_KEY, AWS_SECRET) bucket = aws_connection.get_bucket('YOUR_BUCKET') fileName = "test.csv" content = bucket.get_key(fileName).get_contents_as_string() reader = pd.read_csv(StringIO.StringIO(content))
In [2]: df Out[2]: A B 0 p1 1 1 p1 2 2 p3 3 3 p2 4 In [3]: df.loc[df['B'] == 3, 'A'] Out[3]: 2 p3 Name: A, dtype: object In [4]: df.loc[df['B'] == 3, 'A'].iloc[0] Out[4]: 'p3'
if any(key in metakey for key in keywords for metakey in metakeywords): print 'ok'
>>> import re >>> re.sub('\nThis.*?ok','',a, flags=re.DOTALL) ' Example String'
import datetime from google.appengine.ext import db q = db.Query(DateTest) # This month month = datetime.datetime.today().replace(day=1, hour=0, minute=0, second=0, microsecond=0) q.filter('dateAdded >= ', month) results = q.fetch(10)
for dfn in tree.iter('dfn'): bu = dfn.text for sibling in dfn.itersiblings(): su = sibling.text if su != None and bu != None and re.findall(..,su): places.append(bu) break
from django.contrib.auth.models import User User.objects.get(username=the_username).pk
>>> new_array = my_array.astype(type('float', (float,), {})) >>> type(new_array[0]) <type 'float'>
arr = np.array([[1., 0., 0.], [1., 0., 0.], [0., 0.,1.], [0.,1.,0.]]) names = ['age01', 'age02', 'age03'] val = [float(names[ind][4:6]) for ind in np.where(arr == 1.)[1]]
job("someJobName") { {{#SP}} stringParameter('{{.}}', '', '') {{/SP}}}
MyOrder.objects.filter(order_date__year = 2010)
import matplotlib.patches as mpatches import matplotlib.pyplot as plt NA = mpatches.Patch(color='blue', label='North America') EU = mpatches.Patch(color='green', label='Europe') AP = mpatches.Patch(color='red', label='Asia/Pacific') SA = mpatches.Patch(color='yellow', label='South America') plt.legend(handles=[NA,EU,AP,SA], loc=2) plt.show()
ffmpeg -ss 00:00:05 -i /home/requiem/Desktop/t1.mp4 ....
humaninput = "This is me typing a whole bunch of say things with words after it" breakdown = humaninput.split() say = "say" if say in breakdown: split = breakdown.index(say) after = breakdown[split+1:] print(after)
{% for user in user_set %} {% ifequal user.session_ID access_token %} <a href="/logout">Logout {{user.user_name}}</a> {% else %} <!-- add in counter? --> {{forloop.counter}} <!-- current count --> {%endifequal%} {% endfor %}
for x in range(22): #Remember that the range function returns integers up to 22-1 exec "f%02d = open('file%02d.txt', 'w')" % (x, x)
from multiprocessing import Pool import sys if __name__ == '__main__': job_list = [xrange(10000000)]*6 if 'p' in sys.argv: p = Pool(2) print("Parallel map") print(p.map(sum, job_list)) else: print("Sequential map") print(map(sum, job_list))
{{ instance.number|default_if_none:"" }}
return '\n'.join([' '.join([str(x),str(y)]) for x,y in sorted_dict])
with open('mybackup.ab', 'rb') as f: f.seek(24) # skip 24 bytes data = f.read() # read the rest tarstream = zlib.decompress(data) tf = tarfile.open(fileobj=io.BytesIO(tarstream))
def foo(seq): if seq == None or seq == []: return [] outp = [seq[0]] for a in seq: if a > outp[-1]: outp.append(a) return outp
for address in guido.addresses: if address.type == 'work': address.street = "Main Street" address.city = "Timbuktu" guido.put()
{% if item.category == category %}
df = pd.DataFrame([['1', 0.0, 'P'], ...: ['2', 0.0, 'S'], ...: ['3', 64, 'M'], ...: ['4', 70, 'M'],], columns=['a', 'b', 'c']) df.loc[df['c']=='M','b':'c'] = 0 df Out[54]: a b c 0 1 0 P 1 2 0 S 2 3 0 0 3 4 0 0
with open('/pythonwork/thefile_subset1.csv', 'w') as outfile: writer = csv.writer(outfile) for row in data: if counter[row[11]] >= 500: writer.writerow(row)
df_together = pd.concat([df1, df2]).groupby('key').max()
import numpy as np import bokeh.plotting, bokeh.models bokeh.plotting.output_notebook() x = np.random.random(10) y = np.random.random(10) f = bokeh.plotting.figure() scatter = f.scatter(x, y, marker="square") asterisk_glyph = bokeh.models.glyphs.Asterisk(**scatter.glyph.changed_properties_with_values()) scatter.set(glyph=asterisk_glyph) scatter.glyph.size = 20 bokeh.plotting.show(f)
setup_http_proxy("THE_ADRESS", THE_PORT_NUMBER) # address of the Proxy, port the Proxy is listening on
vector<int> x = ...; vector<int> y = ...; x.insert(x.end(), y.begin(), y.end()); // append y to x
require_once 'google/appengine/api/taskqueue/PushTask.php'; use \google\appengine\api\taskqueue\PushTask; $task_name = (new PushTask('/worker/anchorextractor/1', array( 'content_id' => 'aa', 'content_type' => 'aa' )))->add("tagextractor"); syslog(LOG_INFO, "new task=".$task_name);
import random with\ open('vocablist.text') as input,\ open('vocab_out.txt', 'w') as output: lines = [line.rstrip('\n') for line in input.readlines()] random.shuffle(lines) zz = 0 for x in lines: zz += 1 if zz > 142: output.write('END OF SECTION' + '\n') zz = 0 output.write(x + '\n')
#Creator:JohnSmith #Date:.... #Columns:id,username,... 1,JohnSmith 2, ..
def find_fully_correct(answer, guess): res = [] for x, y in zip(guess, answer): if x == y: res.append("b") return res if res else None
for form in forms: d.update(form)
from social.backends.utils import load_backends import myprojectname.settings as settings backends = load_backends(settings.AUTHENTICATION_BACKENDS) login_urls = ['//%s/login/%s/' % (settings.MY_SERVER_HOSTNAME, name) for name in backend.keys()]
import scipy import scipy.signal as sig rr = [1.0, 1.0, 0.5, 1.5, 1.0, 1.0] # rr time in seconds fs = 8000.0 # sampling rate pqrst = sig.wavelets.daub(10) # just to simulate a signal, whatever ecg = scipy.concatenate([sig.resample(pqrst, int(r*fs)) for r in rr]) t = scipy.arange(len(ecg))/fs pylab.plot(t, ecg) pylab.show()
# Ugly hack to allow absolute import from the root folder # whatever its name is. Please forgive the heresy. if __name__ == "__main__" and __package__ is None: from sys import path from os.path import dirname as dir path.append(dir(path[0])) __package__ = "examples" import api
def is_triangle(a, b, c): if (a > b + c) or (b > a + c) or (c > a + b): print "No" else: print "Yes"
for idx, item in enumerate(color): print 'I am %s' % item rest = color[:idx] + color[idx+1:] print 'Rest is %s' % ','.join(rest)
>>> '\\x41'.decode('string_escape') 'A'
# app.templatetags.app_tags from django import template register = template.Library() @register.filter def has_voted(user, post): return post.votes.filter(the_user=user).exists() # template {% load app_tags %} {% if user|has_voted:post %} <b>Already voted</b> {% endif %}
datetime.datetime.now().strftime('%a, %d %b %Y %H:%M:%S %z')
# Produces all possible RPN layouts with n values and n-1 binary operators, # representing values as '#' and operators as '+' def RPN(n): if n == 1: yield '#' for i in range(1,n): for left in RPN(i): for right in RPN(n - i): yield left + right + '+'
if len(sys.argv) > 2: filename = sys.argv[2]
// product_new() in itertoolsmodule.c for (i=0; i < nargs ; ++i) { PyObject *item = PyTuple_GET_ITEM(args, i); PyObject *pool = PySequence_Tuple(item); //<==== Call tuple(arg) if (pool == NULL) goto error; PyTuple_SET_ITEM(pools, i, pool); indices[i] = 0; }
>>> import sys >>> sys.stdin.encoding 'cp437' >>> print urllib.urlencode({'foo':raw_input('> ').decode('cp437').encode('utf8')}) > áéíóúñ foo=%C3%A1%C3%A9%C3%AD%C3%B3%C3%BA%C3%B1
>>> import subprocess >>> import shlex >>> cmd = 'wc -l test.txt' >>> cm = shlex.split(cmd) >>> subprocess.check_output(cm,shell=True) ' 1 test.txt\n' >>>
{% if forloop.counter|divisibleby:"2" %}even{% else %}odd{% endif %}
^[aeiou]*m[aeiou]*t[aeiou]*h[aeiou]*r[aeiou]*$
for line in f: mo = re.match(r'^(\S+)\s+"(.*?)"\s*$') if not mo: continue key, value = mo.groups() setattr(objInstance, key, value)
keys = set() biglist = [keys.add(sublist[0]) or sublist for sublist in biglist if sublist[0] not in keys] del keys # if you don't need it any more
school_name = "your school name" Students_in_school = Student.objects.filter(grade__school__name = school_name)
jinja2.filters.FILTERS['datetimeformat'] = datetimeformat
import Tkinter main_window=Tkinter.Tk() text_widget = Tkinter.Text(main_window) text_widget.insert('insert',"text message will display here") text_widget.pack(anchor = "w", padx = 50, pady = 50) main_window.mainloop()
mykey = '/path/to/ssl_key_file' mycert = '/path/to/ssl_cert_file' opener = urllib2.build_opener(HTTPSClientAuthHandler(mykey, mycert)) opener.add_handler(urllib2.HTTPBasicAuthHandler()) # add HTTP Basic Authentication information... opener.add_password(user=settings.USER_ID, passwd=settings.PASSWD)
list1=[1,2,3,4,5] list2=[123,234,456] d={'a':[],'b':[]} d['a'].append(list1) d['a'].append(list2) print d['a']
import requests import json from bs4 import BeautifulSoup # Use requests library to get the JSON data JSONDATA = requests.request("GET", "http://www.websitehere.com/") #Make sure you include the http part # Load it with JSON JSONDATA = JSONDATA.json() # Cycle through each `line` in the JSON for line in JSONDATA['line']: # Load stripped html in BeautifulSoup soup = BeautifulSoup(line['text']) # Prints tidy html print soup.prettify()
>>> import locale >>> price = '20,355' >>> locale.setlocale(locale.LC_NUMERIC, '') # Or any other appropriate locale. 'English_United Kingdom.1252' >>> locale.atoi(price) 20355
conn = boto.connect_s3(AWS_ACCESS_KEYXXX, AWS_SECRET_KEYXXX) bucket = conn.get_bucket(AWS_BUCKET_NAMEXXX) k = Key(bucket) k.key = s3_file_name k.set_metadata('Content-Type', 'image/jpeg') k.set_contents_from_file(file_obj)
from interface.modules import Wiki, Search, Web, Default modules = {'wiki': Wiki, 'search': Search, 'Internet': Web, 'browser': Web} module_to_load = modules.get(user_input, Default) view.load(module_to_load)
import matplotlib.pyplot as plt from matplotlib.widgets import Button class ButtonClickProcessor(object): def __init__(self, axes, label): self.button = Button(axes, label) self.button.on_clicked(self.process) def process(self, event): print self.button.label fig = plt.figure() axnext = plt.axes([0.81, 0.05, 0.1, 0.075]) bnext = ButtonClickProcessor(axnext, "Next") plt.show()
from datetime import datetime birthday = datetime(1988, 2, 19, 12, 0, 0) diff = datetime.now() - birthday print diff # 8954 days, 7:03:45.765329
numbers = [1,2,3,4,5,6] with open('output.txt', 'w') as f: f.write('\t'.join(numbers))
def selector(seqs, picks): iters = [iter(x) for x in seqs] for choice in picks: yield next(iters[choice]) print list(selector((news, post), (0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0)))
return redirect('new_cross_phase_2')
>>> import re >>> strs = "Hello (Test1 test2) (Hello1 hello2) other_stuff" >>> [", ".join(x.split()) for x in re.split(r'[()]',strs) if x.strip()] ['Hello', 'Test1, test2', 'Hello1, hello2', 'other_stuff']
re.findall("[\d]+x[\d]+",variable_string)
locs = (np.diff(np.sign(np.diff(v_1))) < 0).nonzero()[0] +1
>>> from operator import methodcaller >>> a = ['2011-12-22 46:31:11','2011-12-20 20:19:17', '2011-12-20 01:09:21'] >>> map(methodcaller("split", " "), a) [['2011-12-22', '46:31:11'], ['2011-12-20', '20:19:17'], ['2011-12-20', '01:09:21']]
# The language for content autogenerated by Sphinx. Refer to documentation # for a list of supported languages. language = 'nl'
from os import path zf = zipfile.ZipFile( zipPath, mode='w' ) for file in files: with NamedTemporaryFile(mode='w+b', bufsize=-1, prefix='tmp') as tempFile: tempPath = tempFile.name with open(tempPath, 'w') as f: write stuff to tempPath with contents of the variable 'file' zf.write(tempPath,arcname=path.basename(tempPath)) zf.close()
notifier = pyinotify.Notifier(wm, handler) wm.add_watch('/tmp', pyinotify.IN_CREATE) notifier.loop()
num_entry = int(input('Please enter an odd number: ')) def number(): return num_entry % 2 == 0 def main(): if number() == True: print('Sorry, please try again.') else: print('Nice! You know your numbers!') number() main()
import fileinput for fl, line in zip(li, fileinput.input(['a.txt'], inplace=True)): print(line.strip() + '\t' + str(fl))
pip install Django==1.0.4
> a = np.matrix([[1,1,0],[0,1,1]], dtype=bool) > a.T * a matrix([[ True, True, False], [ True, True, True], [False, True, True]], dtype=bool)
def custom_input(question): answer = input(question).lower() if answer == 'quit': sys.exit() # or whatever you want to do return answer
def _q_getattr(self, attr): print("get %s" % attr) return getattr(self, 'x') def override(p, methods): oldType = type(p) newType = type(oldType.__name__ + "_Override", (oldType,), methods) p.__class__ = newType override(p, { '__getattr__': _q_getattr}) print(p.__getattr__('x')()) # Works! Prints "0" print(p.x()) # Should work!
import math s = "0.5 * gdp[t] + 0.2 * ln( sp500[t-2] ) " gdp = [0,1,2,3,4,5] sp500 = [0,1,2,3,4,5] t = 5 ln = lambda x: math.log(x) y = eval(s) print y # prints 2.71972245773
>>> import platform >>> platform.machine() 'x86' >>> platform.version() '5.1.2600' >>> platform.platform() 'Windows-XP-5.1.2600-SP2' >>> platform.uname() ('Windows', 'name', 'XP', '5.1.2600', 'x86', 'x86 Family 6 Model 15 Stepping 6, GenuineIntel') >>> platform.system() 'Windows' >>> platform.processor() 'x86 Family 6 Model 15 Stepping 6, GenuineIntel'
def check_lower(pair): key,value = pair return (key.lower(),value) meaningHash={'Banana':'fruit','apple':'fruit'} sortedMeaningHash = collections.OrderedDict(sorted(meaningHash.items(), key=check_lower)) print(sortedMeaningHash)
from kivy.uix.popup import Popup from kivy.uix.textinput import TextInput from kivy.uix.boxlayout import BoxLayout from kivy.uix.label import Label box = BoxLayout() box.add_widget(Label(text='Hello world')) box.add_widget(TextInput(text='Hi')) popup = Popup(title='Test popup', content=box, size_hint=(None, None), size=(400, 400))
web.setcookie('session', '', expires=-1, domain=session_cookie_domain)
ave = pd.stats.moments.rolling_mean(data,length) ave = ave.dropna() sd = pd.stats.moments.rolling_std(data,length) sd = sd.dropna()
>>> dict1 = {'a':0, 'b':1, 'c':2,'d':3,'e':4,'f':5} >>> dict2 = {'a':3, 'b':4, 'c':5} >>> d1 = {v:k for k,v in dict1.iteritems()} >>> d1 {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f'} >>> dict3 = {k:d1[v] for k,v in dict2.iteritems()} >>> dict3 {'a': 'd', 'c': 'f', 'b': 'e'}
In [4]: l=[['a'],[['p','l']]] In [5]: [j for i in l for j in i] Out[5]: ['a', ['p', 'l']]
>>> re.search(r';Video=([A-Z]{2})', 'nt;Video=SD-H.264;D').group(1) 'SD'
E[X^2] - (E[X])^2
cookie['Cycle']['domain'] # lowercase domain !
>>> import PyPDF2 >>> pdfFileObj = open('my_file.pdf',rb) #'rb' for read binary mode >>> pdfReader = PyPDF2.PdfFileReader(pdfFileObj) >>> pdfReader.numPages 56 >>> pageObj = pdfReader.getPage(9) #'9' is the page number >>> pageObj.extractText()
from django.db.models import Count, Sum num_taken = 5 # modify this if you want more/less than 5 query = Car.objects.values('manufacturer').annotate(num_cars=Count('manufacturer')).order_by('-num_cars') top_cars = query[:num_taken] others = query[num_taken:].aggregate(total=Sum('num_cars'))['total'] car_nums = [entry['num_cars'] for entry in top_cars] + [others] car_manufactureres = [entry['manufacturerer'] for entry in top_cars] + ['Others']
python -m admin_client_tests python -m client_tests python -m protocol_tests python -m worker_tests
cls.query(ancestor=version_key()).filter(topic=topic).order(-cls.created)
import urllib2, mimetypes from django.http import HttpResponse def ForwardToSocketIO(request): # Capture the URL pattern path = request.get_full_path() # Create a URL opener response = urllib2.urlopen('http://localhost:20000%s' % path) # Capture and return response django_response = HttpResponse(response.read()) django_response['Content-Type'] = 'octet-stream' return django_response
dictionary = {} word_pos_list = [] for word in sentence: if word not in dictionary: dictionary[word] = len(dictionary) + 1 word_pos_list.append(dictionary[word])
>>> import re >>> email_list = "mail1@mail.com,mail2@mail.com, mail3@mail.com mail4@mail.com" >>> re.split(r'[, ]*',email_list) ['mail1@mail.com', 'mail2@mail.com', 'mail3@mail.com', 'mail4@mail.com']
class A(type): def _repr_pretty_(cls, p, cycle): p.text(repr(self)) def __repr__(cls): return 'This Information' class B: #or for Py3K: class B(metaclass=A): __metaclass__ = A
log = open('/dev/shm/access_log', 'a') with daemon.DaemonContext(stderr=log): run(host='0.0.0.0', port=8080)
tags = ['aa','ab','ae','af','ak','an','ar'] tags_set = set(tags) tags_str = "|".join(tags) %timeit 'ro' in tags 1000000 loops, best of 3: 223 ns per loop %timeit 'ro' in tags_set 1000000 loops, best of 3: 73.5 ns per loop %timeit 'ro' in tags_str 1000000 loops, best of 3: 98.1 ns per loop
# create dictionary, defaulting to new random positions randpos = lambda: (random.randrange(0, width), random.randrange(0, height)) d = collections.defaultdict(randpos) for i in range(10): # corresponds to your outer 'while' loop print "outer loop", i for k in range(5): # your 'for characters...' loop x, y = d[k] # get x, y from dict, default to random position print x, y # use position
list_of_lists=[] category=0 list_of_lists.append([]) f = open(file_name,'r') for line in f.readlines(): item = line.strip('\n') # no white spaces in the list if len(item) > 0: #add to current category list_of_lists[category].append(item) else: #add new category list_of_lists.append([]) category = category + 1 f.close()
if row[0] == username and row[1] == password:
def retrieve_user(self, id=None, name=None, email=None): if id: return self.session.query(User).\ filter(User.id == id).one() if name: return self.session.query(User).\ filter(func.lower(User.username) == func.lower(name)).first() etc
import clr from System.Threading import Interlocked refInt = clr.Reference<int>(5) #Create a reference to an integer #refInt = <System.Int32 object at 0x0000000000000049 [5]> #refInt.Value = 5 Interlocked.Increment(refInt) #Returns 6 and refInt now points to a new integer #refInt = <System.Int32 object at 0x000000000000004A [6]> #refInt.Value = 6
from scipy import stats import numpy as np stats.lognorm(0.5, scale=np.exp(2)).ppf(0.005)
request.session['viewed_post_%s' % post.id] = True
def func(my_list, z): if z == len(my_list): return something else: # do something else return func(my_list, z+1) z = someValue print func(my_list, z)
temp = lb.E.entityset( lb.E.entity( lb.E.temp(code='{0}'.format(temp_code)), lb.E.attr(lb.E.value('{0}'.format(value)), code='2ndCode'), lb.E.attr(lb.E.value('{0}'.format(value2)), code='3rdCode'), ) )
# Set limits to x < 10^1 and x > 10^-1 # (overlapping, thus all inclusive, hopefully) gca().get_yaxis().get_major_formatter().set_powerlimits((0, 0))
import csv r = csv.reader(...) lines = [line for line in r] print len(lines) #number of lines for odd in lines[1::2]: print odd # print odd lines
ax = plt.gca() ax.get_xaxis().get_major_formatter().scaled[365] = '%y' plt.draw()
for NoOfGamesPlayed in range(1, NoOfGamesInMatch+1): # do stuff
self.Bind(wx.EVT_CHAR_HOOK, self.onKey) ... def onKey(self, evt): if evt.GetKeyCode() == wx.WXK_DOWN: print "Down key pressed" else: evt.Skip()
exec('command', $output); var_dump($output);
print "{}\t{}\t{}".format(n, int(bu.total_seconds() * 1000),int(qui.total_seconds() * 1000))
all_vars = locals().get('all_vars', [])
>>> import unicodedata >>> print unicodedata.normalize("NFC",u"c\u0327") ç
SELECT p.*, (SELECT prices.price FROM prices WHERE prices.product_id = p.id ORDER BY prices.id DESC LIMIT 1) as last_price FROM product p WHERE p.category_id = 4;
re.findall(r'\r\n(\d+)\r\n',contents)[-1]
class Fruit: def __init__(self, FruitName): self.name = FruitName self.facts = [] def addfact(self, FruitName): ...
request.path # the url (excluding domain) request.method # eg GET or POST request.cookies request.user # A django.contrib.auth.models.User object representing the currently logged-in user request.META # A standard Python dictionary containing all available HTTP headers
def removeButtons(self): for cnt in reversed(range(self.dvbox.count())): # takeAt does both the jobs of itemAt and removeWidget # namely it removes an item and returns it widget = self.dvbox.takeAt(cnt).widget() if widget is not None: # widget will be None if the item is a layout widget.deleteLater()
def select(columns=None, whereclause=None, from_obj=[], **kwargs): """Returns a ``SELECT`` clause element. (... long docstring ...) """ return Select(columns, whereclause=whereclause, from_obj=from_obj, **kwargs)
>>> import numpy as np >>> old_set = [[0, 1], [4, 5]] >>> new_set = [[2, 7], [0, 1]] >>> (np.array(old_set) + np.array(new_set)) / 2 array([[1, 4], [2, 3]])
ar = np.zeros((512,256),dtype=np.uint16) # there should be something here to fill ar xs = np.arange(ar.shape[0]) ys = np.arange(ar.shape[1]) check = (0 < ar) & (ar < 1000) ind = np.where( check ) xlist = xs[ ind[0] ] ylist = ys[ ind[1] ] zlist = ar[ check ]
import csv cr = csv.reader(open("temp.csv","rb")) arr = range(100) #adjust to needed x = 0 for row in cr: arr[x] = row x += 1 print arr[:22] #adjust to needed
import sys, re, math def find_numbers(f): for line in f: for word in line.split(): if word.isdigit(): yield float(word) lst = list(find_numbers(sys.stdin)) lst.reverse() for x in lst: print('%.4f' % math.sqrt(x))
pizza_form = PizzaFormSet(request.POST or None) choices = [(t.pk, unicode(t)) for t in restaraunt.toppings.all().order_by('-id')] for form in pizza_form: form.fields['toppings'].choices = choices
data = "Hello World" file_hande = sftp_client.file(pollFile, mode='a', bufsize=1) file_handle.write(data) file_handle.flush() file_handle.close()
newlist = [word for word in words if len(word) == 9]
>>> a = "%0.10f" % (10 ** -10) >>> a '0.0000000001'
# on Linux/Unix at /etc/hosts 127.0.0.1 www.example.dev sub1.example.dev sub2.example.dev # on windows its in system32\drivers\etc\
>>> import numpy as np >>> a = ['Foo', '59.8', 'bar', 'spam'] >>> arr = np.ma.array(a, mask=[True, False, True, True]) >>> arr.compressed().astype(float) array([ 59.8]) >>> arr[arr.mask].data array(['Foo', 'bar', 'spam'], dtype='|S4')
export SECRET_KEY='asdgladfkga....'
def execu(lst, seq, raw_para): return reduce(lambda x, y: y(x), reversed(operator.itemgetter(*seq)(lst)), raw_para)
fn = 'mydownload.pdf' print 'Content-Type:application/pdf'; print 'Content-Disposition: attachment; filename="%s"' %(fn); print print sio.getvalue()
>>> from datetime import timedelta >>> delta = timedelta(days=7) >>> df_score_mean = df.apply(lambda x: np.mean(df['score'][df['ts'] <= x['ts'] + delta]), axis=1) 0 5.500000 1 5.500000 2 4.000000 3 4.600000 4 4.500000 5 4.500000 6 4.555556 7 4.200000 8 4.200000 9 4.200000
for line, item in zip (open ('myfile.txt'), mylist): print (line) print (item)
['<a href="%s">%s' % (n, l) for (n, l) in zip(name, link)]
def toUnix(path): return path.replace("\\", "/")
import boto3 s3 = boto3.client("s3") all_objects = s3.list_objects(Bucket = 'my-bucket-name')
import csv with open('csvfile.csv', 'rb') as source: rdr= csv.reader( source ) for row in rdr: # do whatever with row
{"$where": "function() { for (var i=0; i<1000000; i++) {}; return true; }"}
class A(object): def __init__(self, msg): self.msg = msg def __call__(self): print self.msg def __getattr__(self, name): return self a = A('Hello World') a() a.b() a.b.c()
import csv with open('location.csv', newline='') as fp_in: reader = csv.reader(fp_in, delimiter=',') data = list(reader) data.sort(key=lambda x: (len(x[-1].strip()) != 2, x[-1].strip())) with open("locout.csv", "w", newline='') as fp_out: writer = csv.writer(fp_out, delimiter=',') writer.writerows(data)
subprocess.Popen([file],shell=True)
np.where(a>threshold, upper, lower) Out[6]: array([[0, 1, 1, 1], [1, 1, 0, 1], [0, 1, 0, 1], [1, 0, 0, 1]])
from collections import namedtuple # We define our data type like this: fileData = namedtuple('fileData', ('name', 'path', 'size')) # Now we can create an instance of it: def pathToData(pathAndName): path, name = os.path.split(pathAndName) size = os.path.getsize(pathAndName) return fileData(name, path, size) # Or a whole bunch at once, using a list comprehension: def pathsToData(filePaths): return [pathToData(p) for p in filePaths] # There is no need to do all the 'append' logic yourself.
def bounding_box(iterable): min_x, min_y = numpy.min(iterable[0], axis=0) max_x, max_y = numpy.max(iterable[0], axis=0) return numpy.array([(min_x, min_y), (max_x, min_y), (max_x, max_y), (min_x, max_y)])
import requests import re from bs4 import BeautifulSoup req = requests.get(url) req.raise_for_status() html_doc = req.text.encode(req.encoding) soup = BeautifulSoup(html_doc) links = soup.findAll(href=re.compile("\.pdf$")) for link in links: req = requests.get(link) # here, you'll want to use r.content, since it's probably a binary file content = req.content # write the bytes to a file
mylist = [] for col in ws.columns[0]: mylist.append(col.value)
>>> def foo(): ... x = 5 ... def bar(): ... return x ... return bar ... >>> bar = foo() >>> import dis >>> dis.dis(bar) 4 0 LOAD_DEREF 0 (x) 3 RETURN_VALUE
>>> import re >>> re.findall('"([^"]*)"', 'SetVariables "a" "b" "c" ') ['a', 'b', 'c']
from collections import Counter with open('input.tsv') as infile: counts = Counter(infile.read()) for c in 'SF': print '{}: {}'.format(c, counts.get(c))
class GeocodeResult(object): """class to handle Reverse Geocode Result""" ... Result = namedtuple( 'Result', 'address score location attributes', ) @property def results(self): results = [] for result in self.address + self.candidates + self.locations: results.append(self.Result(...)) # pass in the four relevant attributes return result ...
data[0:2] + data[-2:]
# project/.gitignore passwords.py # project/passwords.py GITHUB_KEY = '123' GITHUB_KEY_SECRET = 'ABC' GITHUB_TOKEN = '456' GITHUB_TOKEN_SECRET = 'XYZ' # project/my_script.py from passwords import GITHUB_KEY, GITHUB_KEY_SECRET, GITHUB_TOKEN, GITHUB_TOKEN_SECRET KEY = GITHUB_KEY KEY_SECRET = GITHUB_KEY_SECRET TOKEN = GITHUB_TOKEN TOKEN_SECRET = GITHUB_TOKEN_SECRET
def __hash__(self): return hash(tuple(self.list_attribute))
files = os.listdir(".") files.sort(key=os.path.getmtime, reverse=True) for name in files: with open(name) as f: if search_string in f.read(): print name break
<tree string="My Tree" delete="false">
{{ value.time.date }}
pytz.utc.localize(utc_time, is_dst=None).astimezone(tz)
from pylab import * import time ion() tstart = time.time() # for profiling x = arange(0,2*pi,0.01) # x-array line, = plot(x,sin(x)) for i in arange(1,200): line.set_ydata(sin(x+i/10.0)) # update the data draw() # redraw the canvas print 'FPS:' , 200/(time.time()-tstart)
attributes = ['pandas', 'tunas', 'cows'] choice = random.choice(attributes) setattr(z, choice, getattr(z, choice) + 1)
# let publication be your existing Pets publication instance cats_tag, created = Tag.objects.get_or_create(title='cats') publication.tags.add(cats_tag)
for line in infile: if line.startswith('Brown'): left, sep, right=line.partition('\t') outstr=''.join([left, sep])+'\n' else: outstr=line outfile.write(outstr)
for line in search_file: if search_registration in line: str1 = line; for line in search_av_speed_file: if search_registration in line: current_line = line.split(",") speed_of_car = current_line[2] print(speed_of_car) str2 = speed_of_car fstr=" ".join(str1,str2) #further formatting can be done here,like strip() and you can print this to see the desired result fine_file.write(fstr)
>>> t = (1, 2, 3, 4, 5) >>> a, b, c = t[0], t[1:-1], t[-1] >>> a, b, c (1, (2, 3, 4), 5)
m = re.match('Season ([0-9]+), Episode ([0-9]+): .*', s) (season, episode) = (int(m.group(1)), int(m.group(2)))
driver.get(testurl)
import os import glob directory = raw_input("path to base directory?") for fle in glob.glob(os.path.join(directory,"savedrecs*.txt")): with open(fle) as f: sm = sum(not line.strip() for line in f) print("{} has {} empty lines".format(fle, sm))
import numpy as np from scipy.fftpack import dct, idct # Lets create a 3D array and fill it with some values a = numpy.random.rand(3,3,3) f,x,y = a.shape b = np.zeros((f,x,y)) b = dct(dct(dct(a).transpose(0,2,1)).transpose(1,2,0)).transpose(1,2,0).transpose(0,2,1)
#d = (('name-1', 100), ('name-2',90), ('name-3',80), ('name-1',80)) names = "name1,name2,name3,name1".split(",") salaries = map(int,"100,90,80,80".split(",")) d = zip(names,salaries) print max(d,key=lambda x:names.count(x[0])*1000+x[1]) #('name-1', 100) print sorted(d,key=lambda x:names.count(x[0])*1000+x[1],reverse=True) [('name-1', 100), ('name-1', 80), ('name-2', 90), ('name-3', 80)]
t = datetime.strptime(self.start, "%H:%M:%S").time() start = datetime.combine(self.job_record.date, t)
vote_date = models.DateField(_('vote date'), null=False, blank=False, auto_now=True)
global_votecount = Vote.objects.all().values('user', 'user__username').annotate(votesTotal=Count('user__username')).order_by('-votesTotal') import datetime today_min = datetime.datetime.combine(datetime.date.today(), datetime.time.min) today_max = datetime.datetime.combine(datetime.date.today(), datetime.time.max) votesToday = dict(Vote.objects.filter(date__range=(today_min, today_max)).values_list('user__username').annotate(votesToday=Count('user__username'))) for item in global_votecount: item['votesToday'] = votesToday[item['user__username']]
def sort_columns(column_list): # Create a list of tuples: (question position, column name) sort_list = [(int(col.split('_')[2]), col) for col in column_list] # Sorts by the first item in each tuple, which is the question position sort_list.sort() # Return the column names in the sorted order: return [x[1] for x in sort_list] # Now, you should be able to reorder the DataFrame like so: demo_pivot = demo_pivot.loc[:, sort_columns(demo_pivot.columns)]
def multi_func(functions): def f(col): return functions[col.name](col) return f df = pd.DataFrame(np.random.random((10, 2)), columns=['A', 'B']) result = df.apply(multi_func({'A': np.mean, 'B': np.sum}))
import httplib conn = httplib.HTTPConnection("www.python.org") conn.request("GET", "/index.html") r1 = conn.getresponse() print r1.status, r1.reason
>>> text = "thisfragmentiwant" >>> text[4 : 12] 'fragment'
{{product.description|safe}}
browser.maximize_window()
>>> list_of_dicts = [{} for i in range(32)] >>> len(list_of_dicts) 32 >>> list_of_dicts[0] {}
In [0]: os.path.abspath('c:/some/path') Out[0]: 'c:\\some\\path'
{% load staticfiles %} <!DOCTYPE html> <html lang="fa"> <head> <script type="text/javascript" src="{% static 'my_app/js/app.js' %}"></script> <title>{{ title }}</title> </head> <body> {% block content %} {% endblock %} </body> </html>
nodes = Node.objects.filter(foo="bar").select_subclasses() for node in nodes: #logic
a = (7,8,9,10,11,12) #or any other sequence of integers print set(y-x for x,y in zip(a,a[1:])) in ({1}, {-1})
>>> names = 'Benjamin Franklin, Thomas Jefferson, Carl Sagan' >>> names.split(',') ['Benjamin Franklin', ' Thomas Jefferson', ' Carl Sagan']
from operator import itemgetter sorted(L, key=itemgetter(1))
thread = Thread() thread.finished.connect(gui.do_update_thingy)
import json ... l = soup.p.get_text() # find p tag and extract text from it result = json.loads(l) # convert text into python list
title = quest1.find_element_by_class_name("title").text desc = quest1.find_element_by_class_name("desc").text progress = quest1.find_element_by_class_name("progress").text
return char in x
my_instance = MyModel(email='test')
data = pd.read_csv('SUPERLARGEFILE.csv', index_col=0, encoding = "ISO-8859-1", low_memory=Fals, chunksize=10) result = [] for chunk in data: # get chunks of 10 rows each result.append(chunk.mean()) # do something with res e.g. res = DataFrame(res).to_csv("result.csv")
>>> df['dxCount'] = [len(c) for c in df['dxCodes']]
SELECT * FROM items ORDER BY is_hidden, id DESC
df['value'].apply(lambda x: 0 if not re.findall('\d+', str(x)) else re.findall('\d+', str(x))[0])
from selenium.webdriver.common.action_chains import ActionChains def hover(self): wd = webdriver_connection.connection element = wd.find_element_by_link_text(self.locator) hov = ActionChains(wd).move_to_element(element) hov.perform()
def variant1a(node_name, graph): """Include a docstring, too!""" for node in graph.get_nodes(): if node.get_name() == node_name: return node, graph return create_node(node_name, graph)
Returns the mean accuracy on the given test data and labels. Parameters ---------- X : array-like, shape = (n_samples, n_features) Test samples. y : array-like, shape = (n_samples,) True labels for X. sample_weight : array-like, shape = [n_samples], optional Sample weights. Returns ------- score : float Mean accuracy of self.predict(X) wrt. y.
import difflib file1 = "PATH OF FILE 1" file1 = open(file1, "r") file2 = "PATH OF FILE 2" file2 = open(file2, "r") diff = difflib.ndiff(file1.readlines(), file2.readlines()) file1.close() file2.close() delta = ''.join(x[2:] for x in diff if x.startswith('- ')) print delta
for item in XML_Document.getElementsByTagName('item'): tag1 = item.getElementsByTagName('tag1')[0].toxml(encoding="utf-8") tag2 = item.getElementsByTagName('tag2')[0].toxml(encoding="utf-8") tag3 = item.getElementsByTagName('tag3')[0].toxml(encoding="utf-8") print tag1, tag2, tag3
var jsdom = require( 'jsdom' ); jsdom.env( { url: <give_url_of_page_u_want_to_scarpe>, scripts: [ "http://code.jquery.com/jquery.js" ], done: function( error, window ) { var $ = window.$; // required page is loaded in $.... //you can write any javascript or jquery code get what ever you want } } );
import datetime target_date = datetime.date(2011,2,7) delta = datetime.timedelta(days=2) new_date = target_date - delta print new_date # 2011-02-05
df.groupby("Job").filter(lambda x : x["Dept"].isin(["TC"]).any())
python setup.py build_ext --inplace --library-dirs=lib_dir1;lib_dir2 --include-dirs=inc_dir1;inc_dir2
for item in by_school.get_xticklabels(): item.set_rotation(45)
>>> z = np.array([1, 2, 1, 2.2, 3, 4.4, 1, 1.2, 2, 3, 2.1, 1.2, 5, 0.5]) >>> m = 3. >>> n = 4. >>> x = scipy.stats.scoreatpercentile(z, 100*(1-m/n)) >>> print(x) 1.05 >>> print((z>x).sum()/len(z)) # test, should be about 0.75 0.714285714286
import json jstr = '''{ "EZMessage":{ "action":"account.cash", "data":{ "authToken":"123456", "account":"#ACCOUNTID#", "portfolio":"true", "historical":"true" } } }''' j = json.loads(jstr) j['EZMessage']['data']['authToken'] = 654321 jstr = json.dumps(j)
counter = 0 while True: if os.path.isfile(name + str(counter) + suffix): counter += 1 else: filepath = name + str(counter) + suffix break
import sys lists = { "list1": ["A", "B", "C"], "list2": [1, 2, 3], } myarg = sys.argv[1] print len(lists[myarg])
from itertools import chain def custom_dictmerge(*args): result = {} keys = set(chain(*(d.keys() for d in args))) for k in keys: result[k] = tuple(d[k] for d in args if k in d) if len(result[k]) == 1: result[k] = result[k][0] return result
lst = [1, 3, 4, 5, 1] new_lst = lst[:3] del lst[:3] print lst print new_lst
class LoginView(generic.edit.FormView): def dispatch(self, request, *args, **kwargs): if request.user.is_authenticated(): return HttpRedirect('/whatever/') else: return super(LoginView, self).dispatch(request, *args, **kwargs)
>>> # Style 2: Explicit tuple >>> for i in (x, y, z): print(i)
import string import itertools chars = string.digits + string.letters MAX_CHARS = 4 for nletters in range(MAX_CHARS): for word in itertools.product(chars, repeat=nletters + 1): print (''.join(word))
@celery.task def task(): RealTask.apply_async(countdown=30)
print os.stat("filename.data") #ensure that st_size > 0 with open("filename.data","rb") as f: print repr(f.read())
from django.http import HttpResponse from django.contrib.auth.models import User def search(request): users = \ User.objects.filter(first_name=request.POST['firstname'], last_name=request.POST['lastname']) if users: return HttpResponse(users[0].username) else: return HttpResponse('No match')
dims = [] while isinstance(matrix, list) and matrix is not None: dims.append(len(matrix)) matrix = matrix[0] number_of_dimensions = len(dims)
self.grid_columnconfigure(0,weight=1) self.grid_columnconfigure(1,weight=1) self.grid_columnconfigure(2,weight=1) self.grid_rowconfigure(0,weight=1) self.grid_rowconfigure(1,weight=1)
for cookie in my_cookie_jar: if cookie <is the cookie I want, eg cookie.name == my_cookie_name>: cookie.<morsel> = new_value my_cookie_jar.pop(cookie.name) # removes cookie from my_cookie_jar my_cookie_jar.set_cookie(cookie) # adds it back in
import psutil pid = 14551 def rss_MB(pid): proc = psutil.Process(pid) mem_bytes = proc.get_memory_info().rss return( float(mem_bytes)/1048576 ) mem_MB = rss_MB(pid) print "pid: %d has an rss of %f MB" % (pid, mem_MB)
def lists_with_sum(length, limit, exact=True): if length: for l in lists_with_sum(length-1, limit, False): gap = limit-sum(l) for i in range(gap if exact else 0, gap+1): yield l + [i] else: yield []
move_names = ['scissor', 'rock', 'paper'] winner_strings = ["It's a draw.", "You win.", "You lose."] def get_result_string(player_move, computer_move): winner = player_move - computer_move % 3 return 'You played {}. The computer played {}. {}'.format( move_names[player_move], move_names[computer_move], winner_strings[winner])
DATA = {"records": [{"key1": "AAA", "key2": "BBB", "key3": "CCC", "key4": "AAA"}]} for name, datalist in DATA.iteritems(): # Or items() in Python 3.x for datadict in datalist: for key, value in datadict.items(): if value == "AAA": datadict[key] = "XXX" print (DATA) # Prints {'records': [{'key3': 'CCC', 'key2': 'BBB', 'key1': 'XXX', 'key4': 'XXX'}]}
cmd = "sudo ./deepbelief {} > try5.txt".format(newest)
ax2.fill_betweenx(y,x, x2=0.5, where=x>0.5,interpolate=True)
>>> import time >>> timestamp = 1284375159 >>> time.strftime("%m %d %Y",time.localtime(timestamp)) '09 13 2010'
import pylab import matplotlib.pyplot as plt import numpy as np pylab.ion() x = np.arange(0,5,0.1) y = np.sin(x) plt.plot(x,y) pylab.show() tin = input("Test Input: ")
import numpy as np import matplotlib.pyplot as plt %matplotlib inline ax1 = plt.subplot(121) cbar1 = plt.colorbar(CS) cbar1.ax.set_ylabel('verbosity coefficient',labelpad = 15,fontsize = 15) ax2 = plt.subplot(122) cbar2 = plt.colorbar(CS) cbar2.ax.set_ylabel('verbosity coefficient',labelpad = 25,fontsize = 15) plt.tight_layout() plt.show()
from networkx.algorithms.traversal.depth_first_search import dfs_edges G = DiGraph( ... ) for edge in dfs_edges(G, parent1): color(edge)
sudo docker exec -it container_1 bash -c "sudo find - type f -iname_abc_ -print0 | du --files0-from - -b | awk 'BEGIN{sum=0} {sum+=$1} END{print sum}'"
input("Press Enter to continue...")
address = Address(email='foo@bar.com', person_id=current_user.id) db.session.add(address) db.session.commit()
>>> help(numpy.random.random) Help on built-in function random_sample: random_sample(...) random_sample(size=None) Return random floats in the half-open interval [0.0, 1.0). Results are from the "continuous uniform" distribution over the stated interval. To sample :math:`Unif[a, b), b > a` multiply the output of `random_sample` by `(b-a)` and add `a`:: (b - a) * random_sample() + a ...
#include <iostream> #include <string> #define f(x) substr(true?x, false?x) int main () { std::string s = "Hello, world"; std::string y = s.f(1:4); std::cout << y << "\n"; }
IPTCFormSet = modelformset_factory(IPTCForm) formset = IPTCFormSet(queryset=IPTC.objects.all())
data = np.array(list('abcdefabc')).reshape((3, 3)) df = pd.DataFrame(data, columns=list('ABC')) df A B C 0 a b c 1 d e f 2 a b c df.groupby('A').agg(lambda x:list(x).count('c')) B C A a 0 2 d 0 0
for i, o in enumerate(obj_list): if o.attr == known_value: del obj_list[i] break
from flask import request @app.route('/summary',methods = ['GET']) def api_summary_2(): filename = request.args.get('file', None) if filename is None: abort(404) else: return api_summary(filename)
col = df.columns[0] df[col] = [1, 2, 3, 4, 5]
if all( x in 'hello world' for x in ['hel','ell','orl'] ): print "Found all of them"
keys = ['name', 'last_name', 'phone_number', 'email'] dict1 = {x:dict1[x] for x in keys}
In [13]: df[df > df.quantile(0.8)].dropna() Out[13]: data c 0.860467 j 1.887577 In [14]: list(df[df > df.quantile(0.8)].dropna().index) Out[14]: ['c', 'j']
models = [name.split('_')[2] for name in files]
p = re.compile(ur'[^\s@<>]+@[^\s@<>]+\.[^\s@<>]+', re.MULTILINE | re.IGNORECASE) test_str = r'...' re.findall(p, test_str)
import re s = "123456789123456789" matches = re.finditer(r'(?=(\d{10}))',s) results = [int(match.group(1)) for match in matches] # results: # [1234567891, # 2345678912, # 3456789123, # 4567891234, # 5678912345, # 6789123456, # 7891234567, # 8912345678, # 9123456789]
import re pattern = re.compile(r'foo\(.*?\)') test_str = 'foo(123456) together with foo(2468)' for match in re.findall(pattern, test_str): print(match)
d = {} l = llist.dllist() # insert 'foo' and obtain the link lnk = l.append('foo') # insert the link to the dictionary d['foo'] = lnk
# Ned's startup.py file, loaded into interactive python prompts. print("(.startup.py)") import datetime, os, pprint, re, sys, time print("(imported datetime, os, pprint, re, sys, time)") def dirx(thing, regex): return [ n for n in dir(thing) if re.search(regex, n) ] pp = pprint.pprint
ffmpeg -i input.mp4 -s 320x240 -b:v 16k -b:a 8k output.mp4
a = ["test", "news", "hello"] >>> print [(i,)*2 for i in a] #thanks to @JonClements for the suggestion [('test', 'test'), ('news', 'news'), ('hello', 'hello')]
http://www.yourapp.com/continue/1234
from IPython.parallel import Client rc = Client(profile='ssh') dview = rc[:] dview.execute('reload(<module>)', block = True)
from collections import defaultdict d = defaultdict(int) with open("chat.txt") as f: for line in f: id, data = line.split(None, 1) d[id] += data.lower().count("optimus")
>>> from random import choice >>> def prbs(): ... while True: ... yield choice([False, True])
# create a sandbox globals dict sandbox = {} # create a new version of test() that uses the sandbox for its globals newtest = type(test)(test.func_code, sandbox, test.func_name, test.func_defaults, test.func_closure) # add the sandboxed version of test() to the sandbox sandbox["test"] = newtest
from django.views.decorators.cache import cache_control @cache_control(no_cache=True, must_revalidate=True) def func() #some code return
class DefaultHelpParser(argparse.ArgumentParser): def error(self, message): sys.stderr.write('error: %s\n' % message) self.print_help() sys.exit(2)
class OrderSerializer(serializers.ModelSerializer) class Meta: model = Order class UserSerializer(serializers.ModelSerializer) orders = OrderSerializer(many = True) class Meta: model = user fields = ('city', 'firstName', 'zip', 'taxNumber', 'lastName', 'street', 'country', 'email', 'orders')
def test(the_list): for i in range(len(the_list)): the_list[i] = the_list[i].lower() the_list=["Python", "Programming"] test(the_list) print the_list
results = ( Table .objects .using('production') .filter(foreign_id=76) .order_by() .distinct() )
from io import StringIO filename = 'ham.egg' vfile = StringIO(u'[Pseudo-Sectio]\n%s' % open(filename).read())
import itertools with open('output.txt', 'w') as f: for n in range(1,5): for p in itertools.permutations('ab@F3',n): print(''.join(p), file=f)
import re d = {} with open('data', 'r') as f: for line in f: line = re.sub('\s', '', line) key, value = line.split('=') d[key] = value for el in d.items(): print(el)
import uwsgi, os from flask import Flask app = Flask('demo') @app.route('/') def index(): return "Hello World" def callback(): print "Worker %i exinting" % os.getpid() uwsgi.atexit = callback
output = csv.DictWriter(open('file3.csv','w'), delimiter=',', lineterminator='\n', fieldnames=headers)
env = {'somevar': 'somevalue'} exec(code, env)
parser = argparse.ArgumentParser() parser.add_argument('file', nargs='?') parser.add_argument('-f', dest='file_opt') args = parser.parse_args() if args.file_opt: args.file = args.file_opt
@classmethod def show(cls, message): print("The message is: {}".format(message))
import unicodedata glob.glob(unicodedata.normalize('NFD', '*/Bärlauch*'))
class AppointmentUpdateForm(wtf.Form): start_time = wtforms.DateField('Start at', [wtforms.validators.required()], widget=DatePickerWidget()) end_time = wtforms.DateField('End at', [wtforms.validators.required()], widget=DatePickerWidget())
word='www.wgoowglew.cowm' print '.' + word.split('.')[1].replace('w', '') + '.'
In [11]: df.loc[rows, columns] = 99 In [12]: df Out[12]: 0 1 2 3 4 5 6 7 8 9 A 0 99 2 3 99 5 6 99 8 9 B 10 11 12 13 14 15 16 17 18 19 C 20 99 22 23 99 25 26 99 28 29
>>> not False True >>> not True False >>> not "".isalpha() True >>> not "abc".isalpha() False
def combiner(itemkey, methodname, *a, **k): def keyextractor(container): item = container[itemkey] method = getattr(item, methodname) return method(*a, **k) return keyextractor
my_string = "1" print my_string.zfill(2) # Prints 01 my_string = "1000" print my_string.zfill(2) # Prints 1000
def fmt_3or4(v): """Format float to 4 decimal places, or 3 if ends with 0.""" s = '{:.4f}'.format(v) if s[-1] == '0': s = s[:-1] return s >>> fmt_3or4(1.02345) '1.0234' >>> fmt_3or4(1.023) '1.023' >>> fmt_3or4(1.02) '1.020'
In [200]: cols = pd.Series(df.columns.tolist()).apply(pd.Series).sum(axis=1) In [201]: cols Out[201]: 0 ADF 1 ADG 2 AEF 3 AEG 4 BDF 5 BDG 6 BEF 7 BEG 8 CDF 9 CDG 10 CEF 11 CEG dtype: object
for i in range(2, 11): print 1.0*(1 % i) / i
def capitalize_nth(s, n): return s[:n].lower() + s[n:].capitalize()
for i in range(10000): # code to be repeated 10000 goes in an indented block here # more lines in the loop should be indented at same level as previous line # to mark what code runs after the for loop finishes, just un-indent again h - prtns.tolist() ...
class PurchaseOrder(models.Model): ... your fields ... def get_po_number(self): return self.po_number if self.confirmed else '' get_po_number.short_description = 'po_number'
def retrieve_sub_array(element): for sub_array in array: if element in sub_array: return sub_array
from multiprocessing import Process, Queue def trace_pdf(a,b,c,d): x = np.linspace(0,100,a) fig2 = plt.figure() ax2 = fig2.add_subplot(111) ax2.plot(b,c,'b', label='BA',linewidth=3.5) ax2.set_title('a pdf like no other') fig2.savefig('file.pdf', format='pdf') plt.close() trace_pdf = Process(target=trace_pdf, args=(a,b,c,d)) trace_pdf.start()
%matplotlib inline import matplotlib.pyplot as plt from numpy.random import normal gaussian_numbers = normal(size=1000) plt.hist(gaussian_numbers) plt.title("Gaussian Histogram") plt.xlabel("Value") plt.ylabel("Frequency") plt.show()
import pylab, glob txt_files = glob.iglob("./*.txt") for data in txt_files: data = pylab.loadtxt(data) pylab.plot(data[:,1], data[:,2]) pylab.show()
import random import sys import time def slowprint(s): for c in s + '\n': sys.stdout.write(c) sys.stdout.flush() # defeat buffering time.sleep(random.random() * 0.1) slowprint('Hello, world.')
L = [] for student in range(0,10): x = (raw_input("Enter grade here: ")).lower() L.append(x) d = dict((x,L.count(x)) for x in set(L)) for k,v in d.iteritems(): print "Count for {}'s : {}".format(k.capitalize(), v)
>>> def print_list_matrix(lst, row_num): ... for i in range(row_num): ... print ' '.join(lst[i::row_num]) ... >>> print_list_matrix(lst, 3) v1 v4 v7 v10 v13 v2 v5 v8 v11 v14 v3 v6 v9 v12 >>> print_list_matrix(lst, 4) v1 v5 v9 v13 v2 v6 v10 v14 v3 v7 v11 v4 v8 v12
Cursa.objects.filter[:50]
for line in old_file: stripped_line = line.lstrip() # do your matching here against `stripped_line` instead of `line` # `line` still contains the original, non-stripped line
>>> import numpy as np >>> a=np.asarray([3,4,np.nan,1,2]) >>> np.isnan(a) array([False, False, True, False, False], dtype=bool) >>> a[np.isnan(a)] array([ nan]) >>> np.where(np.isnan(a)) (array([2], dtype=int64),)
import string import random from itertools import islice chars = string.printable + string.whitespace # make infinite generator of random chars random_chars = iter(lambda: random.choice(chars), '') with open('output_file','w', buffering=102400) as fout: fout.writelines(islice(random_chars, 1000000)) # write 'n' many
from wireless import Wireless wireless = Wireless() wireless.connect(ssid='ssid', password='password')
>>> import icu # pip install PyICU >>> sorted(['a','b','c','ä']) ['a', 'b', 'c', 'ä'] >>> collator = icu.Collator.createInstance(icu.Locale('de_DE.UTF-8')) >>> sorted(['a','b','c','ä'], key=collator.getSortKey) ['a', 'ä', 'b', 'c']
datestr=datetime.strptime( datetime[:-1], "%Y-%m-%dT%H:%M:%S" ) >>> test = "2010-08-17T19:00:00Z" >>> test[:-1] '2010-08-17T19:00:00'
real_plot = plot def my_plot(*args, **kwargs): x, y = args[0], args[1] ...your extra code here... real_plot(*args, **kwargs) plot = my_plot
hist, bin_edges = apply_along_axis(lambda x: histogram(x, bins=bins), 0, B)
toy <- tbl_df(toy) toy$Chr <- as.factor(toy$Chr) toy$Pos <- as.factor(toy$Pos) toy$Value <- as.factor(toy$Value) df <- as.data.frame(toy %>% group_by(Name, Chr, Pos, Value) %>% tally %>% group_by(Name, Value)) df %>% mutate(pct = n/sum(n))
appcfg.py download_data --application=YourAppID --kind=YourKind --url=http://localhost:YourPort/_ah/remote_api --filename=YourFileName
import numpy as np from mayavi import mlab vertices = np.array([[0, 1, 0, 0],[0, 0, 1, 0],[0, 0, 0, 1]]) faces = np.array([[0, 1, 0, 0],[1, 2, 1, 2],[2, 3, 3, 3]]) mlab.triangular_mesh(vertices[0,:], vertices[1,:], vertices[2,:], faces.T) mlab.show()
from django.db.backends.signals import connection_created from django.dispatch import receiver @receiver(connection_created) def extend_sqlite(connection=None, **kwargs): connection.connection.create_function("least", 2, min) connection.connection.create_function("greatest", 2, max)
class MyRegistrationForm(UserCreationForm): ... class Meta: model = UserProfile fields = ('username', 'address', 'password1', 'password2', 'status')
$Env:PY_PYTHON = 2
f1 = csv.DictReader(open('testconfig')) last_group = '' for row in f1: if row['group'] != last_group: print row['group'] + ':' last_group = row['group'] print " " + row['monitor']
# Demean demeaned = np_arr_2d - np_arr_2d.mean(axis=1)[:, None] # Dot product of each row with index res = np.ma.dot(demeaned, demeaned[index]) # Norm of each row row_norms = np.ma.sqrt((demeaned ** 2).sum(axis=1)) # Normalize res = res / row_norms / row_norms[index]
define("logging", default="info", help=("Set the Python log level. If 'none', tornado won't touch the " "logging configuration."), metavar="debug|info|warning|error|none")
>>> m = re.findall(r"([a-z])([a-z])(\1)", T) >>> m [('e', 'r', 'e')] >>> ''.join(m[0]) 'ere'
b = soup.find("b", text=lambda x: x and x.endswith("Smart History")) table = b.find_parent("table") rows = table.find_all("tr") for row in rows: # do smth with row
def string_to_num(in_str): try: translationdict = str.maketrans("abcdefghijklmnopqrstuvwxyz","22233344455566677778889999") except AttributeError: import string translationdict = string.maketrans("abcdefghijklmnopqrstuvwxyz","22233344455566677778889999") out_str = in_str.lower().translate(translationdict) return out_str
hour = pd.DatetimeIndex(df["Date"]).hour df[(hour >= 12) & (hour <= 16)]
<select name="combo2" id="combo2" onchange="Dajaxice.your_project.your_appname.updatefilter(Dajax.process,{'option':this.value}" size="1"></select>
movie_data.drop_duplicates(subset='movie_id').sort('rating', ascending = False).head(5)
>>> a=[1, 2, 3] >>> b=list(a) >>> id(a) 3065460108L >>> id(b) 3073003244L >>> id(a) == id(b) # Equivalent to a is b False >>> a is b False
(let ((my-buffer-name (buffer-name)) ....
print GM = iso.GraphMatcher(B,A,node_match=iso.categorical_node_match(['material', 'size'],['metal',1]))
>>> import win32com.client >>> h = win32com.client.Dispatch('matlab.application') >>> h.Execute ("plot([0 18], [7 23])") >>> h.Execute ("1+1") u'\nans =\n\n 2\n\n'
for stanje in dohvatljiva_stanja: for znak in abcd: novi=tablicaPrijelaza.get((stanje,znak)) if novi: pomocna.append(novi) dohvatljiva_stanja.extend(pomocna) dohvatljiva_stanja=list(set(dohvatljiva_stanja)) dohvatljiva_stanja=sorted(dohvatljiva_stanja) del pomocna[0:len(pomocna)]
sorted(a, key=lambda v: (v, random.random()))
for l in _lst: l.append(7)
self.ematrix = [ [ Entry(self.top) for j in range(6)] # columns for i in range(30)] # rows for i,row in enumerate(self.ematrix): for j,elt in enumerate(row): elt.grid(row=i,column=j)
# Assuming YourButton is a Button subclass defined in Python <YourButton>: background_normal: ''
def split_padded(a,n): padding = (-len(a))%n return np.split(np.concatenate((a,np.zeros(padding))),n)
baseprob = [] for i in range(1,s): #changed to do a range 1-s instead of 1000 #must use the loop variable here, not s (s is always the same) matrix_n = numpy.linalg.matrix_power(matrix, i) baseprob.append(matrix_n.item(0))
>>> away = ["away1", "away2", "away3"] >>> home = ["home1", "home2", "home3"] >>> list(zip(away, home)) [('away1', 'home1'), ('away2', 'home2'), ('away3', 'home3')]
msg = "<span style=\"color:#FF0000\">string in red</span>" self.showMessage(msg)
assignment_stmt ::= (target_list "=")+ (expression_list | yield_expression) ^ here
from datetime import datetime, timedelta serial_number = (datetime(2012, 1, 1, 9, 55, 56) + timedelta(223)).strftime('%d-%h-%y %H:%M:%S')
file_data = open('x:\\path\\to\\file','r').read() my_list = re.findall(pattern, file_data, re.MULTILINE) my_dict = {c:b for a,b,c in my_list}
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV) dst = cv2.calcBackProject([hsv],[0],roi_hist,[0,180],1) # apply meanshift to get the new location ret, track_window = cv2.CamShift(dst, track_window, term_crit)
#get the key k = ob.getData().getKey() #create a new Ipo ni = Ipo.New('Key','ni') #if there check if there already a key by that name, otherwise add key if(k.ipo['Key 1'] == None): k.ipo.addCurve('Key 1') #add a point to the 'Key 1' ipo curve k.ipo['Key 1'].append(BezTriple.New(6.0,0.8,0.1))
getreg('.')
f[^\W2]*2
# input will prompt user for a bill amount at the command line amount = float(input('Enter the amount of the bill: ')) tip_15 = amount * .15 tip_20 = amount * 0.2 print('A 15%% tip is: %.2f. A 15%% tip is: %.2f.' % (tip_15, tip_20)) print('Total price with 15%% tip is: %.2f' % (amount + tip_15)) print('Total price with 20%% tip is: %.2f' % (amount + tip_20))
>>> from mock import MagicMock >>> >>> lst = [1, 2] >>> mock = MagicMock(side_effect=lst) >>> mock(), mock() (1, 2) >>> mock.side_effect = lst # <------- >>> mock(), mock() (1, 2)
from mpl_toolkits.mplot3d import axes3d import matplotlib.pyplot as plt from matplotlib import cm X, Y, Z = axes3d.get_test_data(0.05) plt.subplot(131) cset = plt.contourf(X, Y, Z, cmap=cm.coolwarm) plt.subplot(132) cset = plt.contourf(Y, Z, X, cmap=cm.coolwarm) plt.subplot(133) cset = plt.contourf(X, Z, Y, cmap=cm.coolwarm) plt.show()
>>> strings = ['foo','','bar','moo'] >>> ' '.join(filter(None, strings)) 'foo bar moo'
lib.test_function(u'x'.encode('utf8'), u'y'.encode('utf8'), u'z'.encode('utf8'))
subprocess.call(['curl', '-i', '-H', '"emptyheader"', '"http://somewhere:5000/somewhere"'])
for tweet in tweets: print re.sub(r'http://\S+\s?','',tweet)
... channel.basic_qos(prefetch_count=1) channel.basic_consume(callback, queue='task_queue', no_ack=False) ...
>>> varname = 'spam' >>> value = 'eggs' >>> locals() {'__builtins__': <module 'builtins' (built-in)>, 'varname': 'spam', 'value': 'eggs', '__package__': None, '__name__': '__main__', '__doc__': None} >>> locals()[varname] = value >>> locals() {'__builtins__': <module 'builtins' (built-in)>, 'varname': 'spam', 'spam': 'eggs', 'value': 'eggs', '__package__': None, '__name__': '__main__', '__doc__': None} >>> print(spam) some value
from matplotlib.ticker import MaxNLocator import matplotlib.pyplot as plt fig, (ax1, ax2, ax3, ax4, ax5, ax6) = plt.subplots(nrows=2, ncols=3) # add plot code here ax1.xaxis.set_major_locator(MaxNLocator(nbins=9)) ax1.yaxis.set_major_locator(MaxNLocator(nbins=7)) #repeat for other axes
s = 'i am what i am am' seen = {} result = [] for index, word in enumerate(s.split(), 1): result.append(seen.setdefault(word, index)) result = ' '.join(map(str, result)) print(result) # 1 2 3 1 2 2
code_lengths = {'US':9, 'Canada':10} df['correct_code_length'] = df.Country.replace(code_lengths) df['is_correct'] = (df.Code1.apply(lambda x: len(str(x))) == df.correct_code_length) | (df.Code2.apply(lambda x: len(str(x))) == df.correct_code_length)
if soup.find(text=re.compile(line.strip())):
ls = [{'id': 1, 'a1': 2, 'a2': 3}, {'id':2, 'a2':4}, {'id':3, 'a2':5}] for d in ls: d['b1'] = d.pop('a1', 0) >>> ls [{'a2': 3, 'id': 1, 'b1': 2}, {'a2': 4, 'id': 2, 'b1': 0}, {'a2': 5, 'id': 3, 'b1': 0}]
>>> s = "Hello, World" >>> c_s = c_char_p(s) >>> print c_s c_char_p('Hello, World') >>> c_s.value = "Hi, there" >>> print c_s c_char_p('Hi, there') >>> print s # first string is unchanged Hello, World >>>
authors = [('A', "Aho"), ('W', "Weinberger"), ('K', "Kernighan")] option = get_option() while option not in (x[0] for x in authors): option = get_option()
def __init__(self): global engine global central_db engine = engine_from_config(config, 'sqlalchemy.central.') central_db = create_engine(engine)
if __name__ == '__main__': Arbitrary_code_function.run() MRJOB_Jobname.run()
if len(l) != len(set(l)): # not unique
>>> soup.find(class_='bookie-offer').attrs {'class': ['bookie-offer', 'first'], 'data-bookie-code': 'BB', 'data-customer-type': 'existing', 'data-sport-type': '2'} >>> soup.find(class_='bookie-offer').attrs['data-customer-type'] 'existing'
from __future__ import division print round(27/10) 3.0 print round(21/10) 2.0
class Node: def __init__(self): self.dist_ = [] self.from_ = [] rt = []
f = open('another_csv.csv','w+') for row in reader: try: url = row[4] req=urllib2.Request(url) tree = lxml.html.fromstring(urllib2.urlopen(req).read()) print >>f,','.join(row) except: #can log the faulty links in another file continue f.close()
>>> import datetime >>> x=datetime.datetime(1865, 7, 2, 9, 30, 21) >>> x.isoformat() '1865-07-02T09:30:21'
list_of_numbers = [1,2,4,5] list_of_numbers.insert(2,3)
users=pd.read_csv('5ch.xls.Sheet1.cvs')
def Split(): separate = [] with open('myFile1.txt','r') as inFile: for line in inFile: separate.append(line.split()) return(separate)
>>> c = [0.50, 0.52, 0.54, 0.56, 0.58, 0.60] >>> a = np.array(c) >>> a[(0.5 < a) & (a < 0.6)] array([0.52, 0.54, 0.56, 0.58])
while i < len(gList): if gList[i] == a[i]: x = x + 1 else: x = x i = i + 1
import re myString = 'myPERLPythonJavaScriptJavaTextSample' myString = re.sub(r'((?<=[a-z])[A-Z]|(?<!\A)[A-Z](?=[a-z]))', r' \1', myString) result = myString.split() print result
def trial(self): self.buttonA.configure(background="green") self.after(2000, lambda: self.buttonA.configure(background="black")
os.path.exists(r"C:\Users\mcmullma\Desktop\TestingDocuments\readListing.txt")
gdb$ set logging on Copying output to gdb.txt. gdb$
'/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisTop/2.0.24/RootCore'.split('/')[-2]
select = TableWithData.select() insert = NewTable.insert_from(NewTable._meta.get_fields(), select)
self.defaultstyle = wx.richtext.RichTextAttr() self.GetStyle(self.GetInsertionPoint(), self.defaultstyle) self.defaultsize = self.defaultstyle.GetFont().GetPointSize()
In [237]: df.pivot(index='idx', columns='key', values='value') Out[237]: key a b d e idx 1 1 hi 2 NaN 2 0.5 NaN hello NaN 3 NaN 2 NaN NaN 4 NaN NaN -1 3
import re print dict(re.findall('TEXTSTART\[([^\]]+)\](.*?)TEXTEND', report, re.DOTALL))
def post(self): """ Adds a :class:`Persona` resource in Persona resource list. :returns: A newly created Persona resource with http 201 response code. .. todo:: Validate all post fields """
from IPython import start_ipython start_ipython()
apiapp.config['TESTING'] = True apitest = apiapp.test_client() apicontentapp.config['TESTING'] = True contenttest = apicontentapp.test_client()
attr_getter = operator.attrgetter('name') names = map(attr_getter, l) if most_common(names) in set(map(attr_getter, [a1, a2])): pass # do smth here
l = ['cd\\xd9>+O\\0x17 \\xafbQ\\x85\\x86\\xaaPo\\xd8m', 'cd\\xc3k\\x9b\\x1d\ \x08\\x84MXr0!\\xd1\\xec\\x86\\xab\\x01', 'cw\\x1c\\x9e\\x08\\x05`\\x8f\\x9dfd\\ xd0\\xbfS7\\x9dZ\\x8f'] print l[0] cd\xd9>+O\x17 \xafbQ\x85\x86\xaaPo\xd8m
<?php exec('/path/to/python /path/to/your/script.py') ?>
In [23]: num = 15 In [24]: for x in range(num): print("{0:>{1}}".format(x, len(str(num)))) ....: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
query = session.query(Post).filter(~Post.tags.any(Tag.name.in_(['dont', 'want', 'these'])))
query:sky board:123 res_opt:eqeq res:0x0 aspect:0 nsfw_sfw:1 nsfw_sketchy:0 nsfw_nsfw:0 thpp:32 orderby:relevance orderby_opt:desc
pynotify.init("app_name") n = pynotify.Notification("", "message A", icon='some_icon') n.set_urgency(pynotify.URGENCY_CRITICAL) n.set_timeout(1000) n.show() n.update("","message B") n.show()
scipy.sparse.csr_matrix(df.values)
>>> import urllib >>> urllib.urlretrieve('http://www.example.com/myfile.zip', 'path/to/download/dir/myfile.zip')
In [32]: l[0:-1] Out[32]: [1, 2, 3, 4, 5] # all but last element In [33]: l[0::2] # start at first and step of 2 Out[33]: [1, 3, 5] In [34]: l[0::3] # start at first and step of 3 Out[34]: [1, 4]
import traceback def foo(): bar() def bar(): baz() def baz(): traceback.print_stack() # or trace = traceback.extract_stack() foo()
text = 'abcdefa' pattern = re.compile('a|c') [(m.group(), m.start()) for m in pattern.finditer(text)]
import importlib import cars def runmycar(car_name): #car_name = 'Tesla' module_name = '.' + car_name.lower() mod = importlib.import_module(module_name, 'cars') cls = getattr(mod, car_name) obj = cls() obj.run()
backup = open(filename, 'rb') while True: part_of_file = backup.read(60000000) # not exactly 60 MB.... response = connection.put() # submit part_of_file here to amazon
>>> def func(x): ... x[0] = 2 # Mutating the object affects the object outside the function >>> myList = [1] >>> func(myList) >>> myList # myList has changed [2] >>> def func(x): ... x = 2 # rebinding name has no effect outside the function >>> myList = [1] >>> func(myList) >>> myList # myList is unaffected [1]
fin = open('E:\KGG 375 - GIS Advanced\Assignment 2 - Python\TIR043109gpxpos.txt') for line in fin: # no need to read these into a list first info = line.split(',') blurry = float(info[1]) print info[0], if blurry > 0.3: print ' is blurry' else: print ' is not blurry'
from ldtp import * from ldtputils import * try: launchapp("gedit") if waittillguiexist("*.gedit")==0: raise LdtpExecutionError("Gedit window does not exist") selectmenuitem("*-gedit", "mnuFile;mnuOpen") selectrow("dkgOpenFiles...", "tblFiles", fileName[0]) ...
Truncator(value).words(length, html=True, truncate=' ...')
RUN mkdir /user ENV HOME /user WORKSPACE /user
my_dict = {x: {y: get_dict(x, y) for y in range(b)} for x in range(a)}
string_values = 'abc|xyz|mno'.split('|') for obj in queryset.iterator(): writer.writerow([smart_str(obj.code)] + string_values)
def wraps_with_first_line(f): def wrap(wrapper): wrapper = wraps(f)(wrapper) if not hasattr(wrapper, '_first_line'): wrapper._first_line = inspect.getsourcelines(f)[1] return wrapper return wrap
goodfiles = fnmatch.filter(files, pattern) badfiles = set(files).difference(goodfiles)
import tkinter as tk root = tk.Tk() scalevar = tk.IntVar() scalevar.set(50) scale = tk.Scale(root, from_=0, to=100, variable=scalevar, orient="horizontal") label = tk.Label(root, textvariable=scalevar) scale.pack(side="top", fill="x", expand=True) label.pack(side="top", fill="x", expand=True) root.mainloop()
>>> import ast >>> i = ast.literal_eval('[22, 33, 36, 41, 46, 49, 56]') >>> i[3] 41
{{ form.question(value=q.question) }}
c = repeat(b, a)
from datetime import datetime starttime = datetime.strptime('2015-06-22', '%Y-%m-%d') endtime = datetime.strptime('2015-06-23', '%Y-%m-%d') query = Event.query.filter(Event.starttime>=starttime, Event.endtime<endtime).all()
threads = [] while len(threads) < threadLimit: t=threading.Thread(target=run_command) threads.append(t) t.daemon = True t.start() [thread.join() for thread in threads]
>>> import re >>> test_text = 'grep -i 'blair' filename.log | more' >>> print re.sub(r'[^|\w\.]', ' ', test_text) 'grep i blair filename.log more'
x = 'hu1_X', 'hu2_Y', 'hu3_H', 'hu4_H', 'hu5_H', 'hu7_H' y = 'hu1_H', 'hu2_X', 'hu3_H', 'hu4_H', 'hu5_H', 'hu7_X' print(sum(item1 == item2 for item1, item2 in zip(x, y))) # 3
>>> re.search(u'[\u30a0-\u30ff]', u'カタカナ') <_sre.SRE_Match object at 0x7fa0dbb62578>
>>> int('0x'+'2a',16) 42 >>> packet=["2a","19","00","00"] >>> packet=[int(p,16) for p in packet] >>> packet [42, 25, 0, 0] >>> print ", ".join(map(hex,packet)) 0x2a, 0x19, 0x0, 0x0
items = soup.find_all("div", {"class":"zg_itemWrapper"}) for item in items: title_elm = item.find("div", {"class":"zg_title"}).a title = title_elm.get_text() link = title_elm["href"] author = item.find("div", {"class": "zg_byline"}).get_text() price = item.find("div", {"class": "zg_price"}).get_text() print title, link, author, price
from Tkinter import * root = Tk() root.geometry("300x200") navbar = Frame(root, bg="green", width=100) navbar.pack(anchor=W, fill=Y, expand=False, side=LEFT) # <---- content_frame = Frame(root, bg="orange") content_frame.pack(anchor=N, fill=BOTH, expand=True, side=LEFT ) root.mainloop()
from sched import scheduler from time import time, sleep s = scheduler(time, sleep) def run_periodically(start, end, interval, func): event_time = start while event_time < end: s.enterabs(event_time, 0, func, ()) event_time += interval s.run() if __name__ == '__main__': def say_hello(): print 'hello' run_periodically(time()+5, time()+10, 1, say_hello)
>>> from collections import OrderedDict >>> OrderedDict([('method', 'constant'), ('data', '1.225')]) OrderedDict([('method', 'constant'), ('data', '1.225')]) >>> dict(OrderedDict([('method', 'constant'), ('data', '1.225')])) {'data': '1.225', 'method': 'constant'} >>>
awk '{ print >> "artists_"toupper(substr($1, 1, 1))".txt" }' < songs.txt
if troll.collidesWith(monsters): # some monsters will need removing removals = [] for mon in monsters: # figure out which if mon.collidesWith(GroupSingle(troll)): removals.append(mon) for mon in removals: # remove them mon.removeCharacter() screen.remove_character(mon)
ctypes.CDLL('librt.so', mode=ctypes.RTLD_GLOBAL)
layers = [ WMSLayer(wms=wmsInstance, layer_name=str(layer)) for layer in wms.contents if {'EPSG:900913', 'EPSG:3857'}.intersection(wms[layer].crsOptions) ]
print [k for k in d if string in k]
>>> import pyparsing >>> ing_ending = pyparsing.Regex(r'(?i)\b[a-z]+ing\b') >>> ing_ending.parseString("jumping") (['jumping'], {})
>>> items = ["First", "Second", "# First", "Third", "# Second"] >>> for e in items: ... if e.startswith('#'): ... items.remove(e) ... break ... >>> items ['First', 'Second', 'Third', '# Second']
import pandas as pd #Considering that you have your data in a file called 'stock.txt' #and it is tab separated, by default the blank lines are not read by read_csv, #hence set the header=1 df = pd.read_csv('stock.txt', sep='\t',header=1) #Rename the columns as required df.columns= ['CompanyName', 'ASXCode', 'GICS'] #Reorder the columns as required df = df[['ASXCode','CompanyName','GICS']]
def follow(thefile): thefile.seek(0,2) while True: line = thefile.readline() if not line: time.sleep(0.1) continue yield line def beginread(): loglines = follow(logfile) for line in loglines: print line
import requests username = "SomeUser" password = "SomePass" r = requests.get("https://a.b.c:7895/resource/path?param1=foo",auth=(username,password),verify=False)
import uu uu.encode("Bar.txt", "Hello.txt") import StringIO output = StringIO.StringIO() uu.encode("Bar.txt", output) print output.getvalue()
import itertools class count(object): def __init__(self, start=0, step=1): self.start = start self.step = step def __eq__(self, other): return self.start == other.start and self.step == other.step def __iter__(self): return itertools.count(self.start, self.step)
indexVal = 0 for massVal in mass: indexVal += 1 ...code for getting dist_2, var2, sigma_num_2 variables... plt.plot(np.log(dist_2[1:]/var2['r200'][:20]), np.log(sigma_num_2),'b-o', color = 'b', label = "MASS%s = %.1E" % (indexVal, massVal))
import shelve d = shelve.open('my_shelf') for i in range(100000): d[str(i)] = 'Item %s' % i d.close() d = shelve.open('my_shelf') >>> d['50000'] 'Item 50000'
>>> class foo: ... def __init__(self,x): ... self.x = x ... def __eq__(self,y): ... return int(self.x)==int(y) ... >>> f = foo(5) >>> f == '5' True >>> 5 == '5' False
import os import multiprocessing def worker(num): with open(num, 'w') as f: f.write("This is my first text file written in python\n") if __name__ == '__main__': number_of_workers = 4 pool = multiprocessing.Pool(processes=number_of_workers) pool.map(worker, [os.path.join(inDir, i) for i in inTxtList]) pool.close() pool.join()
# create data x = np.array(range(20)) y = np.array(19 * [0] + [1]) (y[np.logical_and(x>=9, x<=13)] >= 0.05).any() # False (y[np.logical_and(x>=9, x<=20)] >= 0.05).any() # True
lines = [] with open('myfile.txt') as file: for line_number, line in enumerate(file, start=1): if line_number not in [1, 6, 7]: lines.append(line) with open('myfile.txt', 'w') as file: file.writelines(lines)
import mechanize FILE_URL = 'http://mit.edu/img/MIT_logo.gif' DESTINATION = '/tmp/lol.gif' br = mechanize.Browser() br.retrieve(FILE_URL, DESTINATION)
target = reStructuredText.split('icon_plain')[1].split('\n')[2].strip()
import termios attr = termios.tcgetattr(1) attr[3] = attr[3] | termios.ECHO termios.tcsetattr(1, termios.TCSANOW, attr)
easy_install_pre.exe %1 unzip_eggs.py %1
>>> test_list_2 = [[1,2,3,4,5,6], 0, [7,8,9,10], [11,12,13,14]] >>> def lift_int(v): ... if not isinstance(v, list): ... return [v] ... else: ... return v ... >>> test_list_2 = [item for sublist in test_list_2 for item in lift_int(sublist)] >>> test_list_2 [1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 12, 13, 14]
import multiprocessing pool = multiprocessing.Pool(multiprocessing.cpu_count()) success = all(pool.imap_unordered(process, directories))
text = open('file.txt').readlines() for line in text: print line.split(' ')[0]
{% extends "layout.html" %} {% block body %} <ul class=entries> {% for entry in entries %} <li><h2>{{ entry["ColIntitule"] }}</h2> <br> {% else %} <li><em>No entry here</em> {% endfor %} </ul> {% endblock %}
In [1]: import ast In [2]: ast.dump(ast.parse('print "hi"')) Out[2]: "Module(body=[Print(dest=None, values=[Str(s='hi')], nl=True)])" In [3]: ast.dump(ast.parse('print "hi",')) Out[3]: "Module(body=[Print(dest=None, values=[Str(s='hi')], nl=False)])"
class Polymorph(object): def __new__(cls, value): if isinstance(value, float): return MyFloat(value) elif isinstance(value, int): return MyInt(value) elif isinstance(value, str): return MyStr(value) else: raise TypeError, 'Unknown type'
import threading, time def my_threaded_func(arg, arg2): print "Running thread! Args:", (arg, arg2) time.sleep(10) print "Done!" thread = threading.Thread(target=my_threaded_func, args=("I'ma", "thread")) thread.start() print "Spun off thread"
message = '' if 'form.submitted' in request.params:#form.submitted being the name of the submit of the form #check if email exists if exists: message = 'email already registered' else: message = 'success' return dict(message = message)
d={'one' : Series([1, 2, 3], index=['a', 'b', 'c']), 'two' :Series([datetime.datetime(2014, 7, 9) , datetime.datetime(2014, 7, 10) , datetime.datetime(2014, 7, 11) ], index=['a', 'b', 'c'])} df = pd.DataFrame(d) def avg_datetime(series): dt_min = series.min() deltas = [x-dt_min for x in series] return dt_min + functools.reduce(operator.add, deltas) / len(deltas) print(avg_datetime(df['two']))
params = { 'param1': param1, 'param2': param2, .... } obj = Model1(**params)
import urllib from urllib.request import urlopen x = None class ABC(object): def __init__(self): global x x=urlopen('http://www.google.com/').read()
from time import time time_before = time() perform_get() # whatever way you do this time_after = time() time_taken = time_after-time_before print time_taken
return "matrix(%f %f %f %f %f %f)" % tuple(transformMatrix)
!![] // true !!null // false
import random import string lower = string.ascii_lowercase # letters a-z s = 'zyxwvutsr' l = ['abc', 'def'] # This loop will continue while the string s does not # contain all of the substrings in l while not all(i in s for i in l): s += random.choice(lower)
new_lst = [x for t in lst for x in t[1:] if x != 0]
>>>l = collections.deque(maxlen=5) >>>l.append('apple') >>>l.append('orange') >>>l.append('grape') >>>l.append('banana') >>>l.append('mango') >>>print(l) deque(['apple','orange','grape','banana','mango'], maxlen=5) >>>l.append('kiwi') >>>print(l) deque(['orange','grape','banana','mango','kiwi'], maxlen=5) #only 5 items in list
class AboutFrame(wx.Frame): title = "About this program" def __init__(self): wx.Frame.__init__(self, wx.GetApp().TopWindow, title=self.title)
",".join( map(str, record_ids) )
>>> lst = [3, 3, 4] >>> import itertools >>> set(itertools.permutations(lst)) {(3, 4, 3), (3, 3, 4), (4, 3, 3)}
import numpy as np import pandas as pd from io import StringIO #StringIO to write to f = StringIO() #Write to StringIO dist = np.random.normal(100, 30, 10000) for idx,s in enumerate(dist): f.write('{}\t{}\t{}\n'.format("label_A-%d" % idx, "label_B-%d" % idx, str(s))) # rewind the stream f.seek(0) #Pandas DataFrame from it DF = pd.read_table(f,sep="\t",header=None) #EmptyDataError: No columns to parse from file
C:\python pyintaller.py --onefile -w guiscript.py
>>> nums = [1,2,3,4,5] >>> [(x,y) for x in nums for y in nums] [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)] >>> min(_, key=lambda pair: pair[0]/pair[1]) (1, 5)
import random words = ['hello', 'apple', 'something', 'yeah', 'nope', 'lalala'] print [random.sample(words, 1)[0] for i in range(10)]
#your model class Author(models.Model): name = models.CharField(max_length=100) birth_date = models.DateField(blank=True, null=True) #your model-form class AuthorForm(ModelForm): your_checkbox = forms.BooleanField(required = False,label = 'your_checkbox', ...) class Meta: model = Author fields = ['name', 'birth_date'] #your checkbox is missing, so it's model independent
def RepresentsInt(s): try: int(s) return True except ValueError: return False >>> print RepresentsInt("+123") True >>> print RepresentsInt("10.0") False
x = ['i like cats', 'i like dogs', 'i like both'] for position in range(len(x)): if 'cats' in x[position]: print ".".join([x[pos] for pos in range(position-1, position+2) if pos in range(0, len(x))]) + "."
for f in fcn: for ix in range(len(a)): print f(a[ix], b[ix], c[ix])
clean = [] for item in result: subitems = item.split(',') clean.extend(si[1:-1] for si in subitems)
>>> xs = [1, 2, 3, 4, 5, 6, 7] >>> [x for i in range(3) for x in xs[i::3]] [1, 4, 7, 2, 5, 3, 6]
>>> dictionary3 = OrderedDict(sorted(x.items(), key=lambda (key, value): int(key.split('_')[1]))) >>> dictionary3 OrderedDict([('day_1', 1), ('day_2', 2), ('day_10', 10), ('day_11', 11)])
attr = wx.TextAttr() attr.SetFlags(wx.TEXT_ATTR_TEXT_COLOUR) r = rtc.GetSelectionRange() attr.SetFlags(wx.TEXT_ATTR_TEXT_COLOUR) attr.SetBackgroundColour(colour) rtc.SetStyle(r, attr)
for sub in obj: if len(sub) == 2 and all(isinstance(i, list) for i in sub): # you can add " and isinstance(sub, list)" if you are not sure about the type of sub look_val(sub)
del_items = set() for i in xrange(sizeX): if dataX[i] == -999 or dataY[i] == -999: del_items.add(i)
horaactual = datetime.datetime.now() - datetime.timedelta(hours=7)
import re def tryint(s): try: return int(s) except: return s def alphanum_key(s): """ Turn a string into a list of string and number chunks. "z23a" -> ["z", 23, "a"] """ return [ tryint(c) for c in re.split('([0-9]+)', s) ] def sort_nicely(l): """ Sort the given list in the way that humans expect. """ l.sort(key=alphanum_key)
class myClass(object): def __init__(self): self.a = '' def A(self): self.a = 'A' print self.a def B(self): print self.a + ' in B' def main(): stuff = myClass() stuff.A() stuff.B() if __name__ == '__main__': main()
>>> os.stat("C:\\autoexec.bat") nt.stat_result(st_mode=33279, st_ino=0, st_dev=0, st_nlink=0, st_uid=0, st_gid=0, st_size=0, st_atime=1150614982, st_mtime=1150614982, st_ctime=1150614982)
import matplotlib.pyplot as plt import pandas as pd df = pd.DataFrame({'x': [0, 1], 'y': [0, 1]}) plt.plot(df['x'], df['y'], label='') plt.legend(loc='best')
<div> {{ flaskReplacesThis }} </div> <div> {% raw %} {{ angularReplacesThis }} {% endraw %} </div>
date_list = [my_dt_ob.year, my_dt_ob.month, my_dt_ob.day, my_dt_ob.hour, my_dt_ob.minute, my_dt_ob.second]
subprocess.call(("explorer", "/select,", file_path))
size = 5 inner_size = size - 2 print ('*' * size) for i in range(inner_size): print ('*' + ' ' * inner_size + '*') print ('*' * size)
import os import webbrowser html = '<html> ... generated html string ...</html>' path = os.path.abspath('temp.html') url = 'file://' + path with open(path, 'w') as f: f.write(html) webbrowser.open(url)
from bisect import bisect_left def binary_search(a, x, lo=0, hi=None): # can't use a to specify default for hi hi = hi if hi is not None else len(a) # hi defaults to len(a) pos = bisect_left(a,x,lo,hi) # find insertion position return (pos if pos != hi and a[pos] == x else -1) # don't walk off the end
def parse_item(self, response): item = MyItem() # populate the item with this response data yield FormRequest( 'url', formdata={'key': 'value'}, callback=self.get_currency, meta={'item':item} ) def get_currency(self, response): self.log('lalalalala') item = response.meta['item'] item['price'] = 123 # get your price from the response body. # keep populating the item with this response data yield item
def your_view(request, ..., page_size=50): scanned_assets_qs = # get your scanned_assets QuerySet if page_size == -1: page_size = scanned_assets_qs.count() paginator = Paginator(scanned_assets_qs, page_size)
res_all = [] for res in results: low, upp = res.confint().T # unpack columns res_all.append(numpy.concatenate(([res.llf], res.params, res.tvalues, res.pvalues, low, upp)))
from operator import itemgetter sorted(map(itemgetter(1,-1),lists),key=itemgetter(-1))
from urllib.request import urlopen import json import csv url_fl = 'http://company.server.org' url_response = urlopen(url_fl).read().decode('utf-8') obj = json.loads(url_response) obj_parse = obj['aaData'] with open('test.csv', 'w', newline='') as fp: data = csv.writer(fp, delimiter=',') for row in obj_parse: data.writerows([row[1:]])
listA = [1,20,12,4] pd.DataFrame(data = listA , columns=['listA'])
import re from bs4 import BeautifulSoup soup = BeautifulSoup(html) pattern = re.compile(r"UID_(\w+)\-SRC_\d+") id = soup.find("div", id=pattern)["id"] uid = pattern.match(id).group(1) print(uid)
from tqdm import trange from time import sleep t = trange(100, desc='Bar desc', leave=True) for i in t: t.set_description("Bar desc (file %i)" % i) sleep(0.01)
syncoutput,sync_error = p.communicate() print(syncoutput)
Valid = True while Valid: try: Column = int(input("Insert Column: ")) Row = int(input("Insert Row: ")) Valid = Row in range(10) and Column in range(10) except Exception as e: print(e) Valid = False
playermove=raw_input()
import sys class Blackhole(object): def write(self, string): pass stdout = sys.stdout sys.stdout = Blackhole() function_el_spammo() sys.stdout = stdout
>>> itemDateNums, itemWeights, itemVolumes = [[[] for _ in range(sizeNeeded)] for _ in range(3)] >>> itemDateNums[1].append("hello world") >>> itemDateNums [[], ['hello world'], [], []] >>> itemWeights [[], [], [], []]
dom = xml.dom.minidom.parseString(document) for node in dom.childNodes: if node.attributes: for key in node.attributes.keys(): node.removeAttribute(key)
before = ['JACKIE:34', 'MATT:444', 'CEN:12', 'PETE:12', 'RANDY:92', 'MITCH:2', 'JAN:2'] after = [(name, int(value)) for name, value in (x.split(':') for x in before)] print after
import lxml.html doc = lxml.html.parse(url_to_site) feeds = doc.xpath('//link[@type="application/rss+xml"]/@href') # list feed urls
import numpy as np import matplotlib.pyplot as plt im = plt.imshow(image) colours = im.cmap(im.norm(np.unique(image))
def __init__(self): self.driver = webdriver.Firefox() def parse(self, response): items = [] self.driver.get(response.url) # get hidden menu urls yield scrapy.Request(hidden_menu_url, callback=self.parse_original_scrapy) def parse_original_scrapy(self, response): pass
file = open(r"D:\wamp\www\User_App.rar", "rb")
{% for option in options %} {{option}} {% for proof in option.proof_set.all %} {{proof}} {% endfor %} {% endfor %}
results = db.session.query(User).filter(User.name == "Bob").order_by(User.age.desc()).limit(10)
>>> import multiprocessing as mp >>> p = mp.Pool() >>> p.imap <bound method Pool.imap of <multiprocessing.pool.Pool object at 0x109592c50>> >>> p.map_async <bound method Pool.map_async of <multiprocessing.pool.Pool object at 0x109592c50>>
print "I have worked %s hours, %s minutes, and %s seconds" % (hours, minutes, seconds);
def longest_ascending(s): matches = [] current = [s[0]] for index, character in enumerate(s[1:]): if character >= s[index]: current.append(character) else: matches.append(current) current = [character] matches.append(current) return "".join(max(matches, key=len))
def get_form(self, request, obj=None, **kwargs): .... .... defaults = { "form": self.form, "fields": fields, "exclude": exclude, "formfield_callback": curry(self.formfield_for_dbfield, request=request), } defaults.update(kwargs) ...
>>> df / (df.iloc[0] / 100) ColA ColB ColC 0 100 100 100 1 200 150 300
import operator ops = {"+": operator.add, "-": operator.sub, "*": operator.mul, "/": operator.div} op_char = raw_input('enter a operand') op_func = ops[op_char] result = op_func(a, b)
import sys, itertools count = int(next(sys.stdin)) x = 0 for line in itertools.islice(sys.stdin, count): x += 1 if '++' in line else -1 print(x)
degree_list = G.degree().values() H = nx.expected_degree_graph(degree_list)
[sum([x.count(1) for x in L[:i]]) for i in range(1, len(L) + 1)]
def reverse(num): return int(str(num)[::-1]) largest = None for y in range (100,999): for x in range (100,999): xy = x*y if xy > largest and xy == reverse(xy): largest = xy print largest
list(my_dataframe.columns.values)
import sys from pylab import * from subprocess import * from shlex import split # some arbitrary x,y points points = [(11,31),(13,33),(15,37),(16,35),(17,38),(18,39.55)] commandline = 'my_unix_prog option1 option2 ....' command = split(commandline) process = Popen(command, stdin=PIPE, stdout=open('outfile', 'w'), stderr=PIPE) for p in points: process.stdin.write(str(p[0]) + ' ' + str(p[1]) + '\n') print process.communicate()
def sum(summands) s = 0 summands = summands if isinstance(summands, list) else [summands] for a in summands: s = a + s
import numpy as np import matplotlib.pyplot as plt x = np.linspace(0, 1.6, 100) y = np.exp(-x*3)*x fig, axs = plt.subplots(nrows=2, sharex=True) axs[0].plot(x, y) axs[1].plot(x[::-1], y) plt.xlim(x.min(), x.max()) plt.show()
<b>.*Items\s*<\/b>\s*<br>(?:\s*[1-4]0[0-9][0-9][0-9] <br>\s*(\d*)\s*(.*) <br>)
import re re.search("", "ffff") <_sre.SRE_Match object at 0xb7166410> re.search("", "ffff").start() 0 re.search("$", "ffff").start() 4
In [193]: word="timer" In [194]: print list(word).reverse() None In [195]: word[::-1] Out[195]: 'remit' In [196]: "".join(reversed(word)) Out[196]: 'remit'
has_capital = lambda s:s[0].isupper() or has_capital(s[1:]) if s else False
from views import function1, function2 def a_function_one(): ... #call function1 from views function1()
for element in list: Do stuff if(write_to_file): for element in list: write to file
import numpy as np: xs=[]; ys=[] for x,y in xy_list: xs.append(x) ys.append(y) xs=np.asarray(xs) ys=np.asarray(ys) plot(xs,ys,'ro')
for i in xrange(1,101): name = 'folder_%03d' % (i) if not os.path.exists(name): os.mkdir(name)
import numpy as np myarray = np.asarray(mylist)
import simplejson as json myfruits = {'fruit':4, 'color':11} json.dumps(myfruits)
def get_queryset(self, request): qs = super(PostAdmin, self).get_queryset(request) if request.user.is_superuser: return qs return qs.filter(user=request.user)
from flask.ext.sqlalchemy import SQLAlchemy from sqlalchemy import Column from sqlalchemy.dialects.mysql import MEDIUMINT, TINYINT db = SQLAlchemy(app) class User(db.Model): id = Column(MEDIUMINT(unsigned=True), primary_key=True)
gca().ticklabel_format(style='sci',axis='y',scilimits=(0,0)) ylim(-3e-6,-1e-6)
token = Session.query(AuthToken).options(eagerload('user')).filter(...).one() user = token.user
visio = win32com.client.Dispatch("Visio.InvisibleApp")
numpy.polyfit(x, y, deg, rcond=None, full=False)¶ Least squares polynomial fit. Fit a polynomial p(x) = p[0] * x**deg + ... + p[deg] of degree deg to points (x, y). Returns a vector of coefficients p that minimises the squared error.
df = DataFrame(columns=('lib', 'qty1', 'qty2')) for i in range(5): df.loc[i] = [randint(-1,1) for n in range(3)] print(df) lib qty1 qty2 0 0 0 -1 1 -1 -1 1 2 1 -1 1 3 0 0 0 4 1 -1 -1 [5 rows x 3 columns]
$('.submit.btn.primary-btn').eq(0).attr('id', 'foobar');
def mon_fonction(une_formation, TYPE_RECHERCHE): tot = 0 liste = [] for quel, val in une_formation: if quel == TYPE_RECHERCHE: tot += val liste.append(val) print "Les vals sont:", liste print "en tout:", tot return tot
python manage.py runserver 127.0.0.1:8001 # it normally runs at :8000
>>> mystr = 'abcde' >>> mystr[1:] # Remove the first 'bcde' >>> mystr[1:-1] # Remove the first and the last 'bcd' >>> mystr[2:-2] # Remove the first two and the last two 'c' >>>
>>> x = repr(pkt.time) >>> type(x) >>> <type 'str'>
row_val = [str(w) for w in row_val]
import csv from collections import defaultdict # Gather the data from the CSV file d = defaultdict(list) with open('data.csv', 'r') as csvfile: reader = csv.reader(csvfile, delimiter='\t') for row in reader: d[float(row[0])].append(float(row[1])) # Print the mean. for k in d.keys(): print k, sum(d[k])/len(d[k])
>>> print img.shape (342, 548, 3)
In [32]: import random In [33]: task_list = ['task_%d' % (i,) for i in range(1, 17)] In [34]: random.shuffle(task_list) In [35]: persons = zip(*[iter(task_list)]*4) In [36]: persons Out[36]: [('task_7', 'task_2', 'task_15', 'task_13'), ('task_6', 'task_11', 'task_9', 'task_12'), ('task_5', 'task_10', 'task_4', 'task_1'), ('task_3', 'task_8', 'task_14', 'task_16')]
from BeautifulSoup import BeautifulSoup with open('Path/to/file', 'r') as content_file: content = content_file.read() soup = BeautifulSoup(content) [div.extract() for div in soup.findAll('div')] with open('Path/to/file.modified', 'w') as output_file: output_file.write(str(soup))
import re from BeautifulSoup import BeautifulSoup # find ".html" or ".pdf" in a string match = re.compile('\.(html|pdf)') # parse page content status, response = http.request("http://www.example.com") page = BeautifulSoup(response) # check links for link in page.findAll('a'): try: href = link['href'] if re.search(match, href): print href except KeyError: pass
# Run all the tests in the animals.tests module $ ./manage.py test animals.tests # Run all the tests found within the 'animals' package $ ./manage.py test animals # Run just one test case $ ./manage.py test animals.tests.AnimalTestCase # Run just one test method $ ./manage.py test animals.tests.AnimalTestCase.test_animals_can_speak
>>> d = { 'd1': 5, 'd4': 4 } >>> print min(d, key=d.get) d4
def contents(self): return [action for action in dir(self) if all( not action in ['contents','start_response'], not action.startswith('_'), callable(action))]
%matplotlib inline import matplotlib.pyplot as plt for days in grouper.groups.keys(): grouper.get_group(days).hist() plt.show()
test = "level"+level d = {test: l_id} device_level_mapping = DeviceLevelMapping.objects.filter(**d)
@receiver(m2m_changed, sender=Blog.users.through) def blog_users_change(sender, instance, action, **kwargs): if action == 'pre_remove': # This will give you the users BEFORE any removals have happened print instance.users.all() elif action == 'post_remove': # This will give you the users AFTER any removals have happened print instance.users.all()
>>> import re >>> usa = (u'ç¾Žå›½', u'ç±³å›½', u'ë¯¸êµ') >>> re.sub('|'.join(usa), 'USA', u'ç¾Žå›½ is a country.') u'USA is a country.'
servoMin = 500 servoMid = 1500 servoMax = 2500 servoTilt = 1500 servostep = 100 def servo1_up(): global servoTilt servoTilt += servostep if servoTilt > servoMax: servoTilt = servoMax port.write("#15P%dT100\r\n" % servoTilt)
if request.has_permission('edit', context): ... render some template or somehow include ui in current view's template ... else: .. dont ...
chart.data = [(20.5,32.4),(0.01, 0.01)]
def main(): final_message = [] words = ['drat','crap','sucks'] counter = 0 userInput = input("Enter The Sentense: ") # use raw_input if you're using python2.X truncatedInput = userInput[:140] sentence = truncatedInput.split() for word in sentence: if word in words: word = 'x' * len(word) final_message.append(word) print ' '.join(final_message)
>>> a.sum(axis=0) array([ 9, 12, 15])
self.picname = "some_img.png" self.picture = pygame.image.load(self.picname)
In [1]: from sympy import * In [2]: from sympy.abc import x, y, b In [3]: eq1 = Eq(x - 1/y - b, 0) In [4]: eq2 = Eq(2*x - y, 0) In [5]: solve([eq1, eq2], b) Out[5]: {b: x - 1/y}
{% for src in product.source_set.all %} {{src.platform.shortname}} / {{src.sensor.shortname}}<br/> {% endfor %} {% for repo in product.repository_set.all %} {{repo.url}}%} {% endfor %}
for i in tree.get_children(): tree.delete(i)
answer = input('Pick a card:\n') guess = random.choice(card) guesses = 1 while guess != answer: if guess != card: guess = random.choice(card) card.remove(guess) guesses += 1 print('\nWhoopy, I guessed right!\n') print('It only took me %s guesses to guess %s.' % (guesses, answer))
import matplotlib.pyplot as plt import numpy as np mat = np.random.rand(500,5000) plt.imshow(mat, interpolation='none', aspect='auto') plt.show()
import time import sys bar = '>' for i in range(100): bar = '='.join(['', bar]) sys.stdout.write('\r' + bar) sys.stdout.flush() time.sleep(0.5)
3>> ''.join(chr(int(x, 16)) for x in "0x000A 0x000B 0x000C 0x000D".split()).encode('utf-16be') b'\x00\n\x00\x0b\x00\x0c\x00\r'
import cffi ffi = cffi.FFI() # paste the function signature from the library header file ffi.cdef('int ContrastStretch(double* data, int w0 ,int h0, int wf, int hf) # open the shared library C = ffi.dlopen('ContrastEnhancement.so') img = np.random.randn(10,10) # get a pointer to the start of the image img_pointer = ffi.cast('double*', img.ctypes.data) # call a function defined in the library and declared here with a ffi.cdef call C.ContrastStretch(img_pointer, img.shape[0], img.shape[1], 5, 10)
datafile.seek(0)
f2.write(line.replace('12345', str(n)))
Kitten(BaseClient): def create(self, **params): uri = self.BASE_URL data = dict(**(params or {})) r = self._get_response(uri, data) return r if r.status_code == 201 else self._get_response(uri, data) def _get_response(uri, data): return self.client.post(uri, data=json.dumps(data)
class Employee: pass def foo(self): pass Employee.foo = foo
mkdir(...) mkdir(path [, mode=0777]) Create a directory.
links = sel.xpath('//a[contains(@href, "enforcementactions.pdf") and contains(@class, "titlelink")]') for link in links: item = PDFItem() item['title'] = link.xpath('text()').extract()[0] item['url'] = URL + link.xpath('@href').extract()[0]
import os fileobj.flush() # clear buffers fileobj.seek(-256, os.SEEK_END) # 256 bytes from the end fileobj.truncate()
csvinput = 'mainfile.csv' reader = csv.reader(open(r'{0}'.format(csvinput)), delimiter=',') for word in wordlist: filtered = filter(lambda p: word == p[6], reader) csv.writer(open("{}\{}.csv".format(word, word),'w', newline = ''),delimiter=',').writerows(filtered) time.sleep(0.1)
d1 = datetime.strptime('08:10:32', '%H:%M:%S') d2 = datetime.strptime('12:34:45', '%H:%M:%S') time_delta = d2 - d1 float('.'.join(str(time_delta).split(":")[0:2]))
def find_between( s, first, last ): try: start = s.index( first ) + len( first ) end = s.index( last, start ) return s[start:end] except ValueError: return "" original = [{1: "xxx [pear] yyy", 2: "xxx [apple] zzz"}, {0: "aaa [cat] yyy", 1: "bbb [dog] zzz"}] for dct in original: for key in dct: dct[key] = find_between(dct[key], "[", "]")
import pandas as pd df1 = pd.DataFrame([['B0006IYIMW',5.0],['B000A56PUO', 3.0],['B000AMLQQU', 4.0],['B000OVNMGE', 1.0]],columns=('item_id','rating')) df2 = pd.DataFrame([['B0006IYIMW','iphone'],['B000A56PUO', 'nokia'],['B000AMLQQU', 'htc'],['B000OVNMGE', 'samsung']],columns=('item_id','class')) df_merged = df1.merge(df2,on='item_id') print df_merged
l = [ random.randint(1,80) for i in range(150)] l = [l[i:i + 5] for i in range(0, len(l), 5)] for el in l: print(el) [55, 55, 66, 73, 17] [12, 76, 72, 22, 46] .................... [70, 29, 62, 39, 54] [65, 73, 7, 55, 37]
filenames = os.listdir('.') text = '\n'.join(filenames) console.settext(text)
writer.writerow([key] + value)
def incoming_ping(): pass regexes = {"^PING: (.+)": incoming_ping, "more regex": "more meanings"}
class Node(db.Model): children = db.ListProperty(db.Key)
from sklearn.externals import joblib joblib.dump(clf, 'filename.pkl') #then load it later, remember to import joblib of course clf = joblib.load('filename.pk1')
v = [1,2,3,4,3,1,2] any([2,3] == v[i:i+2] for i in xrange(len(v) - 1))
D = {'a':1,'b':2,'c':3} inverse = {v: k for k, v in D.items()} print(inverse) # {1: 'a', 2: 'b', 3: 'c'}
'loggers': { #root logger '': { 'handlers': ['file'], 'level': 'DEBUG', }, # other loggers ... }
import uuid hdr="\xff"*6 mac=uuid.getnode() txt="%012X"%mac as_b=[int("".join(x),16) for x in map(None,*(txt[::2],txt[1::2]))] as_s="".join(chr(b) for b in as_b) out=hdr+as_s
# ... skipped ... if __name__ == "__main__": for i in range(5): unittest.main(exit=False)
from datetime import datetime, timedelta class MyObject: startTime = models.DateTimeField(default=datetime.utcnow) expiredTS = models.DateTimeField( default=lambda: datetime.utcnow() + timedelta(days=1))
ans = np.logical_and( np.logical_and(array1 != 0, array2 != 0), array1 == array2 )
username = "Max" query = """ SELECT username, password FROM UserInfo.User WHERE username = %s """ mycursor.execute(query, (username, )) username, password = mycursor.fetchone() # here we can unpack the tuple returned from fetchone
with open('dictionary.txt') as fin: words = fin.read().strip().split('\n') import re import time expr = re.compile(r'a[^aeiouy]+e$', re.I) # Of course, this extends easily to using a dictionary, too def bench(): start = -time.time() matches = [word for word in words if expr.search(word)] return start + time.time()
location_in = 'London, Greater London, England, United Kingdom' locations = location_in.split(', ') location_out = [', '.join(locations[n:]) for n in range(len(locations))]
>>> a = 'xyz-abc' >>> a.find('-') # return the index of the first instance of '-' 3 >>> a[a.find('-'):] # return the string of everything past that index '-abc'
c.InteractiveShellApp.exec_lines = [ 'import sys,os; sys.path.append(os.getcwd())' ]
for i, (a, b) in enumerate(l): # i will be the index of (a, b) in l
In [71]: A = [['A',[1,2,3]],['D',[3,4]],['E',[6,7]],['F',[1]],['G',[7,6,5,4]]] In [72]: [[x[0],x[1][:2]] for x in A] Out[72]: [['A', [1, 2]], ['D', [3, 4]], ['E', [6, 7]], ['F', [1]], ['G', [7, 6]]]
violin_parts = plt.violinplot(...) for pc in violin_parts['bodies']: pc.set_facecolor('red') pc.set_edgecolor('black')
import pyPdf if pyPdf.PdfFileReader(open("file_name.pdf", 'rb')).isEncrypted: print "Rut ro, it's encrypted." # skip file? Write to a log? else: print "We're clear." # Do stuff with the file.
a = re.compile(r"""\d + # the integral part \. # the decimal point \d * # some fractional digits""", re.X) b = re.compile(r"\d+\.\d*")
#!/usr/bin/python from Tkinter import * from tkFileDialog import askopenfilename root = Tk() root.withdraw() print askopenfilename()
In [18]: from pandas import DataFrame In [19]: from numpy.random import randn In [20]: df = DataFrame(randn(10, 2)) In [21]: df2 = DataFrame(randn(10, 2)) In [22]: axs = df.hist() In [23]: for ax, (colname, values) in zip(axs.flat, df2.iteritems()): ....: values.hist(ax=ax, bins=10) ....: In [24]: draw()
function(doc) { if (doc.type == "user") { emit([doc._id,0],null); } else if(doc.type == "project") { emit([doc.username,doc._id],null); } }
def test(): a=[set([1,2,3]),set([3,4,5])] x=set([1,4]) for i in a: diff=i.difference(x) # a[idx]=diff print a
>>> from scipy.stats import mannwhitneyu >>> a = np.arange(100) >>> b = np.arange(100) >>> np.random.shuffle(b) >>> np.corrcoef(a,b) array([[ 1. , -0.07155116], [-0.07155116, 1. ]]) >>> mannwhitneyu(a, b) (5000.0, 0.49951259627554112) # result for almost not correlated >>> mannwhitneyu(a, a) (5000.0, 0.49951259627554112) # result for perfectly correlated
PyObject* module = PyImport_AddModule("__main__"); PyObject* o = PyObject_GetAttrString(module , "__NAME__"); if (PyString_Check(o)) { const char* name = PyString_AsString(o); // don't delete or modify "name"! } Py_DECREF(o);
class MainWindow(QMainWindow): def __init__(self): QMainWindow.__init__(self) layout = QVBoxLayout() button1 = QPushButton("win2", self) layout.addWidget(button1) button1.clicked.connect(self.showwin2) self.w2 = win2(self) def showwin2(self): self.w2.show() self.w2.raise_()
>>> import re >>> NAMES_AND_VALUES = re.compile(r'\w+') >>> OPERATORS = re.compile(r'(?:\+|\*|\-|\/)+') >>> string = '((a * 5) // ((10 - y) + z))' >>> NAMES_AND_VALUES.findall(string) ['a', '5', '10', 'y', 'z'] >>> OPERATORS.findall(string) ['*', '//', '-', '+']
In [18]: a Out[18]: x1 x2 0 0 5 1 1 6 2 2 7 3 3 8 4 4 9 In [19]: a.x2 = a.x2.shift(1) In [20]: a Out[20]: x1 x2 0 0 NaN 1 1 5 2 2 6 3 3 7 4 4 8
with open("image.bin", "rb") as b_f: OverScan = 0 sizeY = 480 reg = OverScan + 10 binary_data = b_f.read(2*192*(1+sizeY)*reg)
movearray[imageasarray.T > 0] += 1
class DateField(Field): ... def pre_save(self, model_instance, add): if self.auto_now or (self.auto_now_add and add): value = datetime.date.today() setattr(model_instance, self.attname, value) return value
import random a = [12,2,3,4,5,33,14,124,55,233,565] b = a[:] random.shuffle(b) # b: [55, 12, 33, 5, 565, 3, 233, 2, 124, 4, 14]
def load_some_script(): pyfd = open("some_python_script.py", "r") src = pyfd.read() pyfd.close() exec(src, globals()) # execute the code in the global scope load_some_script() some_function('foo', 'bare') # should now be available at module level.
def addToList(funcList): '''Decorator that adds the function to a given list''' def actual_decorator(f): funcList.append(f) return f return actual_decorator class MyClass(object): funcList = [] @addToList(funcList) def some_function(self, name): print 'Hello,', name
from copy import deepcopy dist = getDistances(deepcopy(qt), ex)
vars = list(set(permutations(vars)))
ftp.retrlines('RETR ' + weatherfile, callback=lambda line: handleData(line, other_arg, another_arg))
print(np.array(list(map(lambda v: re.sub(r'^A','XA', v) ,arr)))) % outputs: ['XAB' 'XAC' 'XAB' 'XAC' 'XAD']
def myfunc(col): return np.sum(col) x.apply(myfunc) Out[1]: A 6 B 21 C 5 dtype: int64
links = Link.objects.select_related().annotate(votes=Count('vote')) for link in links: delta_in_hours = (int(datetime.now().strftime("%s")) - int(link.created.strftime("%s"))) / 3600 link.popularity = ((link.votes - 1) / (delta_in_hours + 2)**1.5) links = sorted(links, key=lambda x: x.popularity, reverse=True)
def func2(qtWnd): # Self should go here if func2 is beloning to some class, if not, then it is not necessary qtWnd.ui.statusbar.showMessage("This should work now!") if __name__ == "__main__": app = QtGui.QApplication(sys.argv) myapp = StartQT4() myapp.show() func2(myapp) sys.exit(app.exec_())
import pandas as pd df1 = pd.read_csv("read.csv") run = 0 def crawl(a): global run run = run + 1 #Create x, y df2 = pd.DataFrame([[x, y]], columns=["X", "Y"]) if run == 1: df2.to_csv("output.csv") if run != 1: df2.to_csv("output.csv", header=None, mode="a") df1["Column A"].apply(crawl)
import imaplib gmail = imaplib.IMAP4_SSL('imap.gmail.com') gmail.login('username@gmail.com', 'password') ...
^[a-z0-9]+\.[a-z0-9]{1,4}$
import matplotlib.pyplot as plt plt.bar(pos_freq['pos'], pos_freq['freq']) plt.show()
$.ajax({ url: "http://localhost:6543/linefollower/7/send_result", type: "POST", data: JSON.stringify({"results": [... "team_name": "IT Vennad", "id": 57}]}), contentType: "application/json; charset=utf-8", dataType: "json" }
{ "anyOf": [ { "type": "number", "minimum": 0, "maximum": 360, "exclusiveMaximum": true }, { "type": "null" } ] }
def callback(event): canvas = event.widget x = canvas.canvasx(event.x) y = canvas.canvasy(event.y) print canvas.find_closest(x, y)
>>> import numpy as np >>> np.genfromtxt("file.dat", skip_header=1, delimiter='\t') array([[ 10. , 0. ], [ 10.1, 0. ], [ 10.2, 0. ], [ 10.3, 0. ], [ 10.4, 0. ], [ 10.5, 0. ]])
In [8]: l Out[8]: [['a', 'b', 'c'], ['b', '', ''], ['a', '', ''], ['a', 'c', 'd'], ['b', 'c', ''], ['b', 'c', '']] In [9]: [ filter(None, a) for a in l] Out[9]: [['a', 'b', 'c'], ['b'], ['a'], ['a', 'c', 'd'], ['b', 'c'], ['b', 'c']]
import datetime def yourFunction(...): expireTime = datetime.datetime.now() #Check the docs, about adding 29 days, etc. self.response.set_cookie('name', 'value', expires=expireTime, path='/', domain='example.com')
$secret = '2fd0bba6b1774ed391c1ff8467f52a5d'; $code = 'UNIA'; $valid_institution = array('amount' => '0.0', 'code' => $code, 'identifier' => ' '); $text = $valid_institution['code'] . ":" . $valid_institution['identifier'] . ":" . $valid_institution['amount'] . ":" . $secret; print strtoupper(hash("md5", $text));
import gtk d = gtk.Dialog() d.add_buttons(gtk.STOCK_YES, 1, gtk.STOCK_NO, 2) label = gtk.Label('Do you like GTK?') label.show() d.vbox.pack_start(label) answer = d.run() print answer
>>> nums [1, 2, 3, 4, 5, 6] >>> [sum(nums[i:i+3]) for i in range(0, len(nums),3)] [6, 15] >>>
def get_cell_content(self): currentRow = self.tableWidget.currentRow() currentCol = self.tableWidget.currentColumn() if currentRow > -1: text = (self.tableWidget.item(currentRow, currentCol).text(), ) self.textBrowser.setHtml(text)
UserProfile.objects.select(extra={'birth_day': 'extract(day from birthDate)'}).order_by('-birth_day')
with open("exports.txt",'r') as infile: exports = {} for line in infile: parts = line.partition('\t') exports[parts[0]] = parts[-1].strip().split(', ') for country, exports in exports.iteritems(): print country print exports
"powerpoint.exe /s <filename>.ppt"
if (1 == 1 and 2 == 2 and 3 == 3): # ...
my_file = open(filename, "r") lines_of_file = my_file.readlines() lines_of_file.insert(-1, "This line is added one before the last line") my_file.writelines(lines_of_file)
In [10]: raw[faulty.isnull()] Out[10]: NE NW S timestamp 0 15 12 13 1 NaN NaN 13 2 15 12 13 3 NaN NaN 11
cdef extern from "foo.h": void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset) cdef int PROT_READ cdef int MAP_ANONYMOUS ...
text = file.read() text = re.sub(r'[.,:;-_]', '', text) text = text.upper() words = re.split(r'\\s+', text) c = Counter() c.update(words)
goodUrl = false while (!goodUrl) url = urlqueue.Dequeue(); lock domainsInUse if domainsInUse.Contains(url.domainName) urlqueue.Add(url) // put it back at the end of the queue else domainsInUse.Add(url.domainName) goodUrl = true
class MyFormatter(Formatter): def format_field(self, value, format_spec): if format_spec == 't': # Truncate and render as int return str(int(value)) return super(MyFormatter, self).format_field(value, format_spec) MyFormatter().format("{0} {1:t}", "Hello", 4.567) # returns "Hello 4"
class C(object): @property def dx(self): return self._dx def __init__(self, dx = 1): self._dx = dx
data = list() with open("data.txt", "r") as f: for line in f.readlines(): if line != '\n': listLine = line.split(";") data.append("0;{}\n".format(listLine[0])) with open('data.txt', 'w') as f: for line in data: f.write(line)
import tkinter frame = tkinter.Tk() frame.config(height=370, width=670, bg="#C2C2D6") entry = tkinter.Entry(frame, exportselection=0) entry.pack(padx=100, pady=100, expand=1, fill='x') frame.mainloop()
mylist = [(A,8), (A,3), (A,3), (A,3)] def indices( mylist, value): return [i for i,x in enumerate(mylist) if x==value] print indices(mylist, (A,3)) # [1, 2, 3]
import datetime ist_time = datetime.utcnow() + datetime.timedelta(hours=5, minutes = 30) # Turn this into a time object (no day information). ist_time = ist_time.time() if datetime.time(9, 55) <= ist_time <= datetime.time(16, 1): ...
coa1.to_csv('0000-2951-test.txt',index=False, sep='\t', encoding = 'utf-16')
df.apply(myfunction, args=(df2,x,y,z), axis=1).stack().reset_index(drop=True)
import threading dummy_event = threading.Event() dummy_event.wait()
class _Context: foo = 'bar' render(request, 'example.html', vars(_Context))
def ravel_index(x, dims): i = 0 for dim, j in zip(dims, x): i *= dim i += j return i
>>> from __future__ import print_function >>> def f(x, y): pass ... >>> f(print(1), print(2)) 1 2 >>> [print(1), print(2)] 1 2 [None, None] >>> {1:print(1), 2:print(2)} 1 2 {1: None, 2: None} >>> def f(x=print(1), y=print(2)): pass ... 1 2
import glob import os import re os.chdir( "C:/headers" ) txt = open( 'C:/files.txt', 'w' ) for file in glob.glob( "*.h" ): with open( file ) as f: contents = f.read() [...] if 'struct' in contents: txt.write( "%s\n"% re.sub('\.h$', '', file) ) txt.close()
while (userin!="c" or low == high): userin = raw_input()
>>> import numpy as np >>> arr = np.fromfunction(lambda i,j: i+j, (6,6)) >>> print arr [[ 0. 1. 2. 3. 4. 5.] [ 1. 2. 3. 4. 5. 6.] [ 2. 3. 4. 5. 6. 7.] [ 3. 4. 5. 6. 7. 8.] [ 4. 5. 6. 7. 8. 9.] [ 5. 6. 7. 8. 9. 10.]]
import numpy as np import matplotlib.pyplot as plt def _profile(ax, x, y): ln, = ax.plot(x, y) # return the Artist created return ln def profile_matrix(n, m): fig, ax_array = plt.subplots(n, m, sharex=True, sharey=True) for ax in np.ravel(ax_array): _profile(ax, np.arange(50), np.random.rand(50)) profile_matrix(3, 3)
entire_set = len(data) == len(train) + len(test) logging.log(logging.WARNING if entire_set else logging.INFO, "Entire data set allocated => {0}".format(entire_set))
def convert_bool(col): if str(col).title() == "True": #check for nan return "YES" elif str(col).title() == "False": return "NO" else: return col pandas.read_csv(file_in, converters={"C3": lambda x:convert_bool(x)})
def forwards(self, orm): db.execute("CREATE TABLE new_table LIKE old_table") db.execute("INSERT new_table SELECT * old_table") def backwards(self, orm): db.drop_table('new_table')
def countedSubWords(word, dictionary): fragments = set( word[i:j] for i in range(len(word)) for j in range(i+3, len(word)+1) ) subWords = fragments.intersection(dictionary) return (len(subWords), subWords) def main(): with open('wordlist.txt') as words: dictionary = set(word.strip() for word in words if len(word.strip()) > 2) print max(countedSubWords(word, dictionary) for word in dictionary)
{ "display_name": "Python 2", "language": "python", "argv": [ "/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/bin/python2.7", "-m", "ipykernel", "-f", "{connection_file}" ] }
def temperatureTable(elevation): tempTable = list() for temperature in range(225, 350, 5): candyTemp = candyTemperature(temperature, elevation) tempTable.append((candyTemp, temperature)) return tempTable
max_len = 0 max_key = "" for key in d: cur_len = len(d[key]) if cur_len>max_len: max_key = key max_len = cur_len print max_key
for z in range(1, numSectors+1): labels = input('Enter the label for sector {z}: '.format(z=z)) # Test result Enter the label for sector 1: Hello Enter the label for sector 2: World Enter the label for sector 3: !
wader/ cli/ common/ contrib/ gtk/ controllers/ models/ views/ test/ utils/
from pymongo import MongoClient from pymongo import database as DB conn = MongoClient("127.0.0.1", "27017") # host, port db = DB.Database(conn, "my_db_name") # db name db.authenticate("username", "password") # username, password
print '''<html> <head><title>My first Python CGI app</title></head> <body> <p>Hello, 'world'!</p> </body> </html>'''
form = PortfolioForm() tuple((field_name, form.fields[field_name].widget.__class__) for field_name in form.fields)
df['Number'] = df.index.astype(str) Name Number 1 Rob 1 2 Mark 2 3 Alex 3
dfVariableImportance.plot(xticks=dfVariableImportance.index)
with open('input') as f: sorted_file = sorted(f) #save to a file with open('output') as f: f.writelines(sorted_file) #write to stdout import sys sys.stdout.writelines(sorted_file)
def to_hex_string(unsigned_64bit_int): return '{:016x}'.format(my_unsigned_64bit_int) def to_unsigned_64bit_int(hex_string): return int(hex_string, 16)
try: self._connection.close() except AttributeError: pass self._connection = psycopg2.connect(connection_string) return self._connection
process.stdin.write(ser.read())
In [600]: df[df.duplicated('c1') | df.duplicated('c1', take_last=True)] Out[600]: c1 c2 0 1 A 1 1 B 2 2 A 4 2 C 5 4 E 6 4 E
def aircraftListBoxRefresh(): sqlConnect=sqlite3.connect("fglconfdb") sqlCursor=sqlConnect.cursor() sqlCursor.execute("SELECT fgAircraftDir FROM fglconfig") adl=sqlCursor.fetchall() for x in adl: aircraftDirectories.append(x) aircraftDirectories=[] aircraftDir=StringVar(value=aircraftDirectories) aircraftListBox=Listbox(mainframe,height=7,width=100,listvariable=aircraftDir) aircraftListBox.place(x=170,y=170)
>>> from django.contrib.auth.models import User >>> user_type = ContentType.objects.get_for_model(User) >>> user_type <ContentType: user>
from scipy.optimize import fsolve func = lambda r : (1./2.)*((CF**2)/(r))+CT*r**(gamma)+bm/(2.*muo) - CM # assign some numeric values to CF, CT, gamma, bm, muo, CM sol = fsolve(func, 1) # 1 is the initial guess for the solver
import ast L = ["hello", "3", "3.64", "-1"] def tryeval(val): try: val = ast.literal_eval(val) except ValueError: pass return val print [tryeval(x) for x in L]
a = ephem.separation((panel_az, panel_alt), (sun_az, sun_alt)) print a
regex = re.compile(r'\{# xxx #\}(.*?)\{# zzz #\}')
In [13]: from tensorflow.models.embedding.word2vec_optimized import FLAGS In [14]: from tensorflow.models.embedding.word2vec_optimized import main In [16]: main(_) --train_data --eval_data and --save_path must be specified. An exception has occurred, use %tb to see the full traceback. In [17]: FLAGS.train_data = "this" In [18]: FLAGS.eval_data = "that" In [19]: FLAGS.save_path = "some_path" In [20]: main(_) I tensorflow/core/common_runtime/local_device.cc:40] Local device intra op parallelism threads: 8
index = self.selectedIndexes()[0] crawler = index.model().itemFromIndex(index)
In [58]: re.findall(r'\d+%', text) Out[58]: ['3%', '3%', '3%', '7%', '7%', '10%', '10%', '10%', '11%', '50%', '75%', '77%', '82%', '91%', '100%', '100%', '100%']
import numpy as np import matplotlib.pyplot as plt x = np.random.random(100) normed_value = 2 hist, bins = np.histogram(x, bins=20, density=True) widths = np.diff(bins) hist *= normed_value plt.bar(bins[:-1], hist, widths) plt.show()
class MyAdmin(admin.ModelAdmin): def __init__(self, model, admin_site): general_fields = ['notes', 'created_at', 'updated_at'] fields = [f.name for f in self.model._meta.fields if f.name not in general_fields] self.fields = fields + general_fields super(admin.ModelAdmin, self).__init__(model, admin_site)
>>> import re >>> strs = "@ sample This is a sample string $ 1.00 # sample" >>> re.sub(r'([@#$])(\s+)([a-z0-9])', r'\1\3', strs, flags=re.I) '@sample This is a sample string $1.00 #sample'
for line in file: data = re.search('(\d+\.\d+)\|(-\d+\.\d+)\|(.*?)\|(.*?)\|(\d+:\d+\s+\w+)\sTO\s(.*?)',line) groups = data.groups() # do the magic...
class Dummy(object): def __init__(self, mylist=None): self.mylist = mylist if mylist is not None else []
>>> re.findall(r'Food: ([^|]*)', 'Food: is great|foo') ['is great'] >>> re.findall(r'Food: ([^|]*)', 'Food: is great') ['is great']
import libtorrent as lt piece_size = 256 * 1024 creator_str = "python-libtorrent" thetracker = "your desired tracker" theurlseed = "your desired url seed" fs = lt.file_storage() lt.add_files(fs, "/tmp/torrentme") fs.num_files() t = lt.create_torrent(fs, piece_size) t.add_tracker(thetracker) lt.set_piece_hashes(t, ".") t.set_creator(creator_str) t.add_url_seed(theurlseed) t.generate()
`Sphinx docs <_build/html/index.html>`_
import re pat = re.compile(r'cat|Dog', re.I) db.collection.find({ "Animal": {'$regex': pat}})
import sys sys.argv.append('syncdb') from django.core.management import execute_manager import settings # Your project's settings. Assumed to be in the same directory. execute_manager(settings)
print("Starting script...") sys.stdout.flush() build.run()
def my_pre_post_callback(resource, request): allowId = request.args.get('allowId') ...
shared_items = set(x.items()) & set(y.items()) print len(shared_items)
In [126]: df.gt(s, axis=0) Out[126]: Stock1 Stock2 index Date1 True True Date2 False True
myDict.pop(key, None)
import sys from StringIO import StringIO input_text = 'whatever you want the function to read from input()' old_stdin = sys.stdin #Reassign stdin to a StringIO object sys.stdin = StringIO(input_text) f() sys.stdin = old_stdin
>>> import platform >>> platform.win32_ver() ('XP', '5.1.2600', 'SP2', 'Multiprocessor Free') >>> platform.system() 'Windows' >>> platform.version() '5.1.2600' >>> platform.release() 'XP'
print fromstring(source).xpath('.//form[@action]')[0].get('action')
filename = str(colorHair) + str(colorEye) + str(styleHair) + str(colorSkin) + ".png"
>>> import subprocess >>> proc = subprocess.Popen('cmd.exe', stdin = subprocess.PIPE, stdout = subprocess.PIPE) >>> stdout, stderr = proc.communicate('dir c:\\') >>> stdout 'Microsoft Windows [Version 6.1.7600]\r\nCopyright (c) 2009 Microsoft Corporatio n. All rights reserved.\r\n\r\nC:\\Python25>More? '
import requests url = 'http://ES_search_demo.com/document/record/_search?pretty=true' data = '{"query":{"bool":{"must":[{"text":{"record.document":"SOME_JOURNAL"}},{"text":{"record.articleTitle":"farmers"}}],"must_not":[],"should":[]}},"from":0,"size":50,"sort":[],"facets":{}}' response = requests.get(url, data=data)
>>> class ChipCar(object): ... def __repr__(self): ... return '{}() object, id => 0x{:x}'.format(type(self).__name__, id(self)) ... >>> ChipCar() ChipCar() object, id => 0x1046c33d0
import matplotlib.pyplot as plt import numpy as np x = np.array([0,1,2,3]) y = np.array([20,21,22,23]) my_xticks = ['John','Arnold','Mavis','Matt'] plt.xticks(x, my_xticks) plt.plot(x, y) plt.show()
query = open('foo.sql', 'r').read() cursor.execute(query)
import random def decision(probability): return random.random() < probability
python: - 2.6 - 2.7 - 3.2 - 3.3 - pypy install: - if [[ $TRAVIS_PYTHON_VERSION == 2.6 ]]; then pip install importlib unittest2; fi - pip install -r requirements.txt
import sqlite3 con = sqlite3.connect("db") con.execute("create table users(id, name, avatar)") con.execute("insert into users(id, name, avatar) values (?, ?, ?)", (friend.id, friend.name, friend.avatar)) con.commit() for row in con.execute("select * from users") print row con.close()
user_choices = {} i = 1 print '\nPhone listings:\n' for record in pBook: key = i user_choices[key] = record i += 1 print str(key) + ')', record + ':', 'Home', pBook[record]['home'] + ',', 'Cell', pBook[record]['cell'] print ''
subprocess.call(["find_info", image, json_file], env=dict(TEST__LIB_PATH="/path/requried/for/test", **os.environ))
import networkx as nx data=[[1, 5, 6], [2, 3, 5, 6], [2, 5], [7]] G = nx.DiGraph() for path in data: G.add_nodes_from(path) G.add_path(path) ts=nx.topological_sort(G) print(ts) # [7, 2, 3, 1, 5, 6]
def timestamp(time): form dateutil import parser time = parser.parse(time) #Converts string in to datetime object from pytz import UTC if time.tzinfo: #Checks if the time is aware or naive time = time.astimezone(UTC) #Converts aware time into UTC return time.strftime('%Y%m%dT%H%M%SZ')
>>> import re >>> a = ['rhubarb','plain custard','jam','vanilla custard','pie','cheesecake'] >>> [i for i, s in enumerate(a, start=1) if re.search('custard', s)] [2, 4]
a http://my.acunote.site/ticket/$1 # Acunote ticket $1 g https://github.com/peritor/webistrano/commit/$1 # Changeset $1 on Github y http://www.yiiframework.com/doc/api/1.1/$1 # Yii documentation for $1
with io.open('output.txt', 'w', encoding='utf-8') as fp:
import urlparse # if we're pre-2.6, this will not include parse_qs try: from urlparse import parse_qs except ImportError: # old version, grab it from cgi from cgi import parse_qs urlparse.parse_qs = parse_qs
plt.imshow(A, interpolation='nearest', aspect='auto')
In [32]: test3.index = ['f','g','z'] test3 Out[32]: f 1 g 2 z 3 dtype: int64
print "started" self.SendCommand(kEdsCameraCommand_PressShutterButton, kEdsCameraCommand_ShutterButton_Completely_NonAF) sleep(2) self.SendCommand(kEdsCameraCommand_PressShutterButton) print "finished"
A.objects.filter(name='name_a', type='type_a', b__name='name_b', b__type='type_b').distinct()
for item, qnt in request.POST: {do something with each item, for example where you can sum total}
import ast for item in ["[u'cheese']", "[u'grapes', u'oranges']", "[u'apple']"]: for food in ast.literal_eval(item): print(food)
In [379]: df_sample['C'].str.get_dummies(sep=',') Out[379]: CAT1 CAT2 CAT3 0 1 0 0 1 0 1 0 2 0 0 1 3 1 1 0 4 0 0 1
class Example(Enum): this = 1 that = 2 dupe = 1 those = 3 print(len(Example)) # duplicates are not counted # 3 print(list(Example)) # [<Example.this: 1>, <Example.that: 2>, <Example.those: 3>] print(Example['this']) # Example.this print(Example['dupe']) # Example.this print(Example(1)) # Example.this
z_bin = numpy.linspace(0.0, 10.0, 21) for i in range(len(z_bin)-1): zmin = z_bin[i] zmax = z_bin[i+1] # do some things with zmin/zmax
from Bio.Restriction.Restriction import RestrictionBatch sequence=('ACGGCGAATTCTATCGATAACTG...') # Read enzyme name from input. enzyme_name = input("Enter enzyme name:\n") # E.g EcoRI print (type(enzyme_name)) # <type 'str'> # Get RestrictionType by name batch = RestrictionBatch() batch.add(enzyme_name) enzyme = batch.get(enzyme_name) print (type(enzyme)) # RestrictionType print (enzyme.site in sequence) # True
a = np.array([1, 2, 3]) t = tuple(a)
conda remove nbconvert pip install nbconvert
self.composerMap = QgsComposerMap(self.composition, 5,2,408,286) self.composition.addComposerMap(self.composerMap) self.composition.moveItemToBottom(self.composerMap) self.composition.moveSelectedItemsToBottom()
import os goal_dir = os.path.join(os.getcwd(), "../../my_dir") print goal_dir # prints C:/here/I/am/../../my_dir print os.path.normpath(goal_dir) # prints C:/here/my_dir print os.path.realpath(goal_dir) # prints C:/here/my_dir print os.path.abspath(goal_dir) # prints C:/here/my_dir
mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9] print [mylist[i:i+4] for i in range(0, len(mylist), 4)] # Prints [[1, 2, 3, 4], [5, 6, 7, 8], [9]]
>>> a = """a0 a1 a2 """ >>> b = """b0 b1 b2 """ >>> temp = [x.splitlines() for x in (a, b)] >>> print '\n'.join(' '.join(x) for x in zip(*temp)) a0 b0 a1 b1 a2 b2
>>> re.sub(r'\[.*?\]|\(.*?\)|\W', ' ', 'T.N.T. (live) [nyc]') 'T N T '
from threading import Timer def delayed(seconds): def decorator(f): def wrapper(*args, **kargs): t = Timer(seconds, f, args, kargs) t.start() return wrapper return decorator @delayed(1) def foo(): print('foo') foo() print('dudee')
print A col1 col2 col3 0 aa 1 2 1 bb 2 5 print B col1 col2 col3 0 aa 1 2 1 aa 1 3 2 bb 2 5 print pd.merge(A,B, on=['col1','col2','col3'], how='left') col1 col2 col3 0 aa 1 2 1 bb 2 5
item = db.get(db.Key.from_path('Notes', id))
def f(...): ... f = staticmethod(f) @staticmethod def f(...): ...
import tkinter from functools import partial def font_config(widget, fontslant, event): widget.configure(font=fontslant) parent = tkinter.Tk() text = tkinter.Label(parent, text="Hello Text") text.bind("<Enter>", partial(font_config, text, "Helvetica 9 italic")) text.bind("<Leave>", partial(font_config, text, "Helvetica 9")) text.pack() tkinter.mainloop()
In [1]: import networkx as nx In [2]: import numpy as np In [3]: G = nx.Graph() In [4]: feature_vector=np.array([1,7,22]) In [5]: G.add_node(1,v=feature_vector) In [6]: G.node[1]['v'] Out[6]: array([ 1, 7, 22])
a = [opt1, opt2, opt3, opt4, opt5] data_clients = [] for j in a: if j is not None: user, db = j.split("/") db = country_assoc(int(db)) client = Client(None, user, db) data_clients.append(client.get_user())
#!/usr/bin/python from csv import DictReader from collections import defaultdict users = defaultdict(dict) for row in DictReader(open('./file.csv', 'rb')): key = row.pop('User') tmp_dict = {int(k):int(v) for k,v in row.iteritems() if v != ''} users[key] = tmp_dict >>> users {'27671':{89:7, 91:29, 92:49}, ... }
from dateutil.parser import parse s1 = "2013-11-21T07:45:51ZUTC+0000" # Europe s2 = "2013-11-21T13:15:28ZUTC+0530" # India def new_parse(string): return parse(string.replace('ZUTC', '')) dt1 = new_parse(s1) dt2 = new_parse(s2) print (dt1-dt2).total_seconds()
#/usr/bin/python import subprocess cpu = subprocess.check_output(["top -n 5 -b | awk '/sshd/ {print $9}'"], shell=True) values = cpu.split() print values
docopt('./myapp [-a [-b BVAL] | -c]')
#Modified code from main loop: s = serial.Serial(5) #Modified code from thread reading the serial port while 1: tdata = s.read() # Wait forever for anything time.sleep(1) # Sleep (or inWaiting() doesn't give the correct value) data_left = s.inWaiting() # Get the number of characters ready to be read tdata += s.read(data_left) # Do the read and combine it with the first character ... #Rest of the code
for i in range(len(myList)): f.write(str(time.strftime("%Y_%m_%d_%H_%M_%S", time.localtime(currentTime + i)))) f.write(',') f.write(" ") f.write(str(myList[i])) f.write('\n')
perl -lne 'print $& while /[0-9x]{1,3}\.[0-9x]{1,3}\.[0-9x]{1,3}\.[0-9x]{1,3}/g' my_input_file
text = "seeking help on possible homework task" raw_words = text.split(" ") positive_words = ['seeking','help'] negative_words = ['homework'] positive_score = len([word for word in raw_words if word in positive_words]) negative_score = len([word for word in raw_words if word in negative_words]) total_score = positive_score - negative_score
>>> df2 = df.asn.str.split(',').apply(pd.Series) >>> df2.index = df.set_index(['Name', 'count']).index >>> df2.stack().reset_index(['Name', 'count']) Name count 0 0 Org1 1 asn1 1 Org1 1 asn2 0 org2 2 asn3 0 org3 5 asn4 1 org3 5 asn5
import numpy as np import pandas as pd import matplotlib.pyplot as plt dataframe = pd.DataFrame({'Col': np.random.uniform(size=1000)}) plt.scatter(dataframe.index, dataframe['Col'])
str1 = "Start" fp = open("C:...test.txt") check = 0 for i,line in enumerate(fp): if str1 in line: check = i continue if "contain" in line and (i == check + 3): print "OK" else: print "NOK"
@api.onchange('fieldx') def do_stuff(self): if self.fieldx == x: self.fieldy = 'toto'
class my_array: def __init__(self, lis): self.array = lis def sum(self): sm = 0 for a in self.array : sm += a return sm #or simply use the built-in function `sum()` ... >>> x = my_array([3,5,6]) >>> x.sum() 14
with open("film.txt", "w") as f: for root, _, files in os.walk(os.getcwd()): for file in files: if file.endswith((".avi", ".mp4")): f.write(file)
list1 = [0,1,2] list2 = [0,1] list3 = [0,1,2,3] listOfLists = [list1,list2,list3] for list in itertools.product(*listOfLists): print(list)
with open('somefile') as fileobj: lines = list(fileobj) for index in indices: print lines[index]
>>> import pickle >>> banana, beans = ['Banana' , .54 , 'No' , 'Food'], ['Beans' , 1.39, 'Yes', 'Food'] >>> food = [banana, beans] >>> with open('data', 'wb') as f: pickle.dump(food, f) >>> with open('data', 'rb') as f: print pickle.load(f) [['Banana', 0.54, 'No', 'Food'], ['Beans', 1.39, 'Yes', 'Food']]
>>> re.findall('<span>([a-zA-Z]+)</span>(.*?)([0-9]+)',string) [('Name', '</p><div class="info"><span>', '100')]
In [1]: import BeautifulSoup In [2]: from urllib import urlopen In [3]: html = urlopen('http://www.gutenberg.org/files/82/82-h/82-h.htm').read() In [4]: soup = BeautifulSoup.BeautifulSoup(html) In [5]: len(soup('h2')) Out [5]: 58
>>> [list(x) for x in output.split('\n')] [['S', '.', '#', '#', '.', '.', '.', '.', '.', '.'], ['#', '.', '#', '#', '.', '.', '#', '#', '#', '.'], ['#', '.', '#', '#', '#', '.', '#', '#', '#', '.'], ['#', '.', '.', '.', '.', '.', '#', '#', '#', '.'], ['#', '#', '#', '.', '#', '#', '#', '#', '#', 'S']]
>>> "1138".zfill(10) 0000001138
./manage.py runserver 0.0.0.0:8000
import re a="BILLY: The sky is blue. SALLY: It really is blue. SAM: I think it looks like this: terrible." print re.split(r"\s(?=[A-Z]+:)",a)
(sympify("1/(x+1)+4*x/(x-1)+3-4*x**2+10*x**2", evaluate=False)).args
def sublist(list1, list2): n = len(list1) return any((list1 == list2[i:i + n]) for i in range(len(list2) - n + 1)) print sublist([2, 3], [1, 2, 3, 4, 5]) print sublist([1, 3], [1, 2, 3, 4, 5]) print sublist([1, 2, 3], [1, 2, 1, 2, 3, 4])
from code import InteractiveConsole livePythonInterpreters= {} class LivePythonCommand(sublime_plugin.TextCommand): def run(self, edit): ic = InteractiveConsole() global livePythonInterpreters livePythonInterpreters[self.view.buffer_id()] = ic class LivePythonListener(sublime_plugin.EventListener): def on_modified(self, view): ic = livePythonInterpreters[view.buffer_id()]
<a href="{{ url_for('view_transactions', page=transactions.next_num, account=account_parm, category=category_parm, ...) }}?{{request.query_string}}">{{ _('>>') }}</a>
pages = Page.objects.annotate(num_countries=Count('country')) pages[0].num_countries # 3 pages[1].num_countries # 4
import uuid import base64 gen_id = uuid.uuid1() # generate type 1 UUID id_bytes = gen_id.bytes # take its bytes encoded = base64.b64encode(id_bytes, b'-_') encoded = encoded.replace(b'=', b'') # remove the padding bytes result = '_' + encoded.decode('ascii') # result is a string with '_' prepended.
>>> sample=[[1,[1,0]],[1,1]] >>> from itertools import chain >>> print [1,0] in chain(*sample) True
[Tile(el.id) for el in <tile descriptions> for _ in range(el.n_tiles)]
myList = [] for line in myOpenFileObj: myList.append(line)
def ballSnapTop(): ballRect.top = playerRect.bottom - distance
import bisect i = bisect.bisect_left(dates, dates[i1]-timedelta(days=interval))
class Beer(object): def __init__(self, temp): self.__T = temp @property def temp(self): return Param('Beer Temperature', self.__T) @temp.setter def temp(self,value): self.__T = float(value)
import dateutil.parser dateutil.parser.parse('2015-01-28 03:00:00').date() >>datetime.date(2015, 1, 28)
A = np.eye(4) scale = [2, 3, 4] A[:3, :3] *= scale
# let (--) i j = let rec aux n acc = if n < i then acc else aux (n-1) (n :: acc) in aux j [] ;; val ( -- ) : int -> int -> int list = <fun> # 1--2;; - : int list = [1; 2] # 1--5;; - : int list = [1; 2; 3; 4; 5] # 5--10;; - : int list = [5; 6; 7; 8; 9; 10]
job = Job(field1=value1, field2=value2) job.save()
>>> from datetime import datetime, timedelta >>> start_time = datetime.now() >>> start_time datetime.datetime(2011, 5, 18, 20, 38, 55, 546000) >>> first = start_time.replace(minute=0, second=0, microsecond=0)+timedelta(hours=1) >>> first datetime.datetime(2011, 5, 18, 21, 0) >>>
def write_bmp_to_dc_rotated( dc, bitmap, angle ): ''' Rotate a bitmap and write it to the supplied device context. ''' img = bitmap.ConvertToImage() img_centre = wx.Point( img.GetWidth()/2, img.GetHeight()/2 ) img = img.Rotate( angle, img_centre ) dc.WriteBitmap( img.ConvertToBitmap(), 0, 0 )
>>> import pyparsing as p >>> ope, clo, com = map(p.Suppress, '(),') >>> w = p.Word(p.alphas) >>> s = ope + w + com + w + com + ope + p.delimitedList(w) + clo + clo >>> x = '(xx,yyy,(aa,bb,cc))' >>> list(s.parseString(x)) ['xx', 'yyy', 'aa', 'bb', 'cc']
if '4.2.1' in pl.values(): print ("We're good!") else: print ("No good")
response = captcha.submit( req.args['recaptcha_challenge_field'], req.args['recaptcha_response_field'], self.private_key, req.remote_addr, ) if response.is_valid: # captcha was passed
In [1]: abs(1-2) Out[1]: 1 In [2]: abs(2-1) Out[2]: 1
$.post("/search/loadBottomLooks/", { pageNum: "2" }, function(responseText, responseStatus){ alert('got into the callback!'); $("#garbage").html(responseText); });
import xmmsclient import xmmsclient.glib import os import sys import gobject def cb(result): if not result.is_error(): print "Current: %(artist)s - %(title)s" % result.value() ml = gobject.MainLoop(None, False) xc = xmmsclient.XMMS("stackoverflow") xc.connect() conn = xmmsclient.glib.GLibConnector(xc) xc.broadcast_playback_current_id(lambda r: xc.medialib_get_info(r.value(), cb)) ml.run()
children = {5,10,15,20,25} globalChildren = {1,2,3,4,5,6,7,8,9,10,12,14,16,18,20} difference = children - globalChildren shared = children & globalChildren
import sys import re import os assert len(sys.argv) == 3, "Usage: %s LT-dir extract-dir"%sys.argv[0] _, ltdir, exdir = sys.argv def key(x): return [int(y) for y in re.findall('\d+', x)] ltfiles = sorted(os.listdir(ltdir), key=key) exfiles = sorted(os.listdir(exdir), key=key) for exfile,ltfile in zip(exfiles, ltfiles): os.rename(os.path.join(exdir,exfile), os.path.join(exdir,ltfile))
nbTrain = [] if classifier.positiv > classifier.negativ: word = (input_text , 'pos') else: word = (input_text , 'neg') nbTrain.append(word)
>>> data = ['ABC', 'EFG', 'IJK', 'MNO'] >>> zip(*data) [('A', 'E', 'I', 'M'), ('B', 'F', 'J', 'N'), ('C', 'G', 'K', 'O')]
>>> old_dict = {'one': '.', 'two': 2, 'three':3, 'four':'.'} >>> new_dict = {k:v for k,v in old_dict.iteritems() if not v == '.'} >>> new_dict {'three': 3, 'two': 2}
from odo import odo odo('hdfstore://path_store_1::table_name', 'hdfstore://path_store_new_name::table_name')
>>> np.exp(-554.979039475) 9.4550881914378009e-242
from django.http import HttpResponse def serve_pdf_view(request): pdf_data = magically_create_pdf() return HttpResponse(pdf_data, content_type='application/pdf')
class FavoriteEnroledTrainee(SessionMixin, View): def get(self, request, *args, **kwargs): print 'here' favorite_enroled_trainee = dajaxice_register(method='GET', name='company.favorite')(FavoriteEnroledTrainee.as_view())
if word[-1] in ".?":
cursor = conn.cursor("some_unique_name") cursor.execute("SELECT aid FROM pgbench_accounts") for record in cursor: something(record)
{{ form.first_name(class_='validate') }} {{ form.first_name.label(class_='active') }} {{ form.begins(class_='datepicker', length=50) }}
>>> stockdata["Close"] == pd.rolling_max(stockdata["Close"], 5) 2013-09-23 09:30:00 False 2013-09-23 09:31:00 False 2013-09-23 09:32:00 False 2013-09-23 09:33:00 False 2013-09-23 09:34:00 False 2013-09-23 09:35:00 True 2013-09-23 09:36:00 False 2013-09-23 09:37:00 False 2013-09-23 09:38:00 True 2013-09-23 09:39:00 True dtype: bool
import urllib2 test = {'A':'', 'B':'-B', 'XYZ': '-X-Y-Z'} flower_list = [] for key, value in test.items(): page = urllib2.urlopen('http://www.all-my-favourite-flower-names.com/list-of-flower-names{0}.html'.format( value)).read() soup = BeautifulSoup(page) # Now do your logic or every page, and probably save the flower names in a list.
SELECT * FROM Article a LEFT JOIN ( SELECT ArticleID, count(*) AS ct FROM ArticleTag WHERE tag IN ('tag1', 'tag2', 'tag6') -- your tags here GROUP BY ArticleID ) t ON t.ArticleID = a.ID ORDER BY t.ct DESC NULLS LAST , (a.blog = 'BBC') DESC NULLS LAST -- your blog here , rating DESC NULLS LAST;
<script type='text/javascript'> var a = {{ someJsonObject }} </script>
from functools import wraps def some_decorator(arg1, arg2): def wrapper(func): @wraps(func) def inner_wrapper(*args, **kwargs): func(*args, **kwargs) inner_wrapper.arg1 = arg1 inner_wrapper.arg2 = arg2 return inner_wrapper return wrapper
>>> a = np.arange(10, 0, -1) >>> a array([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) >>> b = a[2:-2] >>> b array([8, 7, 6, 5, 4, 3]) >>> i = b.argsort() >>> b[:] = b[i] # change the values inside the view >>> a # note `a` has been sorted in [2:-2] slice array([10, 9, 3, 4, 5, 6, 7, 8, 2, 1])
values[1] = values[:]
import matplotlib.pyplot as plt import numpy as np listAct = [] for pos,rem in np.array(db.extractData(mess)): act = gen.unixTime_to_dateTime(rem)- gen.unixTime_to_dateTime(pos) ##act is a datetime object listAct.append(act.days + act.seconds/float(86400)) bins = range(1,15) plt.hist(listAct,bins) plt.show()
getattr(target,part).deltahealth(dmg)
max(enumerate(props), key = lambda tup: len(tup[1]))
file = request.files['file'] #file.read() is the same as file.stream.read() img_key = hashlib.md5(file.read()).hexdigest()
list1 = [[x] for x in range(10)] list2 = list1[:4] list1[1][0] = 100 print list2
select_sql = """ SELECT * FROM table WHERE ((? = 'all' OR gender = ?) AND (? = 'all' OR hand = ?)) """ cursor.execute(select_sql, (gender_var, gender_var, hand_var, hand_var))
>>> "{:.2f}".format(float("40.12")) '40.12' >>> "{:.2f}".format(float("40")) '40.00' >>> "{:.2f}".format(float("40.123")) '40.12' >>> try: ... "{:.2f}".format(float("40.123€")) ... except ValueError: ... "fail" ... 'fail'
class WrappedBox(object): def __init__(self, title, message, wraplength=60): self.title = title self.message = message self.wraplength = wraplength self.messageWrapped = '\n'.join([self.message[i:i+self.wraplength] for i in xrange(0,len(self.message),self.wraplength)]) tkMessageBox.showinfo(self.title, self.messageWrapped) WrappedBox("Results", str(e), wraplength=30)
[uid for uid, attrs in users.items() if attrs['name'] == name_you_are_looking_for]
def f(event): caller = event.widget
from PIL.ImageQt import ImageQt image2 = Image.open('./Images/Cache/Cache.png') qimage = ImageQt(image2) pixmap = QtGui.QPixmap.fromImage(qimage)
clock = pygame.time.Clock() time_counter = 0 while True: time_counter = clock.tick() if time_counter > 3000: enemy.move() time_counter = 0
s = 'abc123' >>> list(s) ['a', 'b', 'c', '1', '2', '3']
hist, bins = np.histogram(norm2d.ravel(), normed=True, bins=100) threshold = bins[np.cumsum(hist) * (bins[1] - bins[0]) > 0.8][0] mnorm2d = np.ma.masked_less(norm2d,threshold) com = ndimage.measurements.center_of_mass(mnorm2d) plt.imshow(norm2d, origin="lower") plt.scatter(*com[::-1]) plt.show()
>>> import httplib >>> >>> def exists(site, path): ... conn = httplib.HTTPConnection(site) ... conn.request('HEAD', path) ... response = conn.getresponse() ... conn.close() ... return response.status == 200 ... >>> exists('http://www.fakedomain.com', '/fakeImage.jpg') False
with open('rooms') as f: chunks = f.read().split('\n\n') people_by_id = {} for chunk in chunks: data = dict(row.split('=', 1) for row in chunk.split('\n')) people_by_id[data['id']] = data del data['id'] def get_person_by_id(id): return people_by_id.get(id)
%init %{ my_init_function(); %}
with open('input.txt','r') as f: data = f.readlines() with open('output.txt','w') as f: for i, line in enumerate(data): if '456' in line: fields = data[i+3].split(',') fields[-1] = 'PIZZA\n' data[i+3] = ','.join(fields) f.write(line)
click_element(get_element_by_xpath('your xpath'), wait=True) click_link(get_element_by_xpath('your xpath'), wait=True) click_button(get_element_by_xpath('your xpath'), wait=True)
def My_func(x, y, size, ls): return analysis(ls), generate_data(size), func(x,y)
df = pd.merge(df1, df2, on='DateTime', how='left').fillna(method='ffill')
score = [1,2,3,4,5] with open("file.txt", "w") as f: for s in score: f.write(str(s) +"\n") with open("file.txt", "r") as f: for line in f: score.append(int(line.strip()))
import difflib str1 = "black_red_yellow" str2 = "blue_red_green" difference = difflib.SequenceMatcher() difference.set_seqs(str1, str2) for match in difference.get_matching_blocks(): print str1[match[0]:match[0] + match[2]]
>>> o = subprocess.check_output( ['dd', 'if=/etc/resolv.conf', 'of=r'], stderr=subprocess.STDOUT) >>> print(o) b'0+1 records in\n0+1 records out\n110 bytes (110 B) copied, 0.00019216 s, 572 kB/s\n'
my_string = 'qwer123asd!@#$%^' predef = set('0x#$qi') if set(my_string).issubset(predef): print "only predefined symbols"
From: =?utf-8?q?Adrian_P=C5=82onka?= <pokemon@myservice.com>
{{your_date|safe}}
for line in FILE: for word in keyWords: if word in line: parseString = line[29:35] #pulling in session ID sessionID.append(parseString) #saving session IDs to a list break # Assuming there will only be one keyword per line, else remove this logLine +=1 #for debugging purposes when testing importFile2.close() print(sessionID) #for debugging purposes when testing
soup = BeautifulSoup(doc) tags = soup.fetch('td') for tag in tags: if tag.contents[0] and tag.contents[0].strip() == 'Preferred Name': return tag
+--------------------------+ |task1 | wait period | comp| +--------------------------+ +--------------------------+ |task2 | wait period | comp| +--------------------------+
findall(pattern, string, flags=0) Return a list of all non-overlapping matches in the string. If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group. Empty matches are included in the result.
<p> {{ doctor.treatment.all|join:", " }}. </p>
>>> d = pandas.DataFrame({"A": [1, 2, 3], "B": [8, 88, 888]}) >>> d A B 0 1 8 1 2 88 2 3 888 >>> d.assign(A=d.A**2) A B 0 1 8 1 4 88 2 9 888 >>> d A B 0 1 8 1 2 88 2 3 888
import Tkinter, tkFileDialog root = Tkinter.Tk() root.withdraw() save_dir = tkFileDialog.asksaveasfilename()
time = xray.DataArray(arr.time.values, coords=[arr.time.values], dims=['time']) time_first = time.resample('1M', 'time', how='first') time_last = time.resample('1M', 'time', how='last') time_diff = time_last - time_first
from django.db.models import Q query = 'fun' books = Fun.objects.filter(Q(categories__id__in=[1,2,3]), Q(name__icontains=query) | \ Q(description__icontains=query) | \ Q(keywords__title__icontains=query))
QApplication.processEvents()
>>> re.findall(r"(?<!\d)\d\d(?!\d)", "abc123#d$45^abrt&89*") ['45', '89']
def clean_text(rgx_list, text): new_text = text for r in rgx_list: new_text = re.sub(rgx, '', new_text) return new_text
>>> help(Schematron): class Schematron(lxml.etree._Validator) | An ISO Schematron validator. | | ... | With ``store_report`` set to True (default: False), the resulting validation | report document gets stored and can be accessed as the ``validation_report`` | property.
>>> from ast import literal_eval >>> literal_eval('[1,2,3]') [1, 2, 3] >>> literal_eval("['1','2','3']") ['1', '2', '3']
>>> lst = [(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13, 14), (15, 16), (17, 18)] >>> [lst[i:i+4] for i in xrange(0, len(lst), 4)] [[(1, 2), (3, 4), (5, 6), (7, 8)], [(9, 10), (11, 12), (13, 14), (15, 16)], [(17, 18)]]
return '%s/%s/%s' % ('//example.blob.core.windows.net', 'mypictures', name)
class Filter : public QObject { Q_OBJECT public: bool eventFilter(QObject *object, QEvent *event) { if (event->type() == QEvent::KeyPress) { return true; } return false; } }; <...> QComboBox box; box.view()->installEventFilter(new Filter());
for i in range(0, len(mylogger.handlers)): try: print(mylogger.handlers[i].baseFilename) except AttributeError: print('no to file')
from django.contrib.contenttypes.management import update_all_contenttypes from django.contrib.auth.management import create_permissions from django.db.models import get_apps update_all_contenttypes() for app in get_apps(): create_permissions(app, None, 2)
class State(models.Model): title = models.CharField(max_length=50) def __unicode__(self): return self.title class Transaction(models.Model): ... state = models.ForeignKey(State)
re.sub(r'\(a\)', '@', x.strip(), flags=re.IGNORECASE)
sql.execute("INSERT OR IGNORE INTO foo(data) VALUES(?);" ("Some text.", )) last_row_id = sql.execute("SELECT id FROM foo WHERE data = ?;" ("Some text. ", ))
a = list(set(a))
>>> lst = [ ... (1, 100), ... (2, 150), ... (3, 200) ... ] >>> list(zip(*lst)) # zip(*lst) groups the items that you want to sum [(1, 2, 3), (100, 150, 200)] >>> >>> [sum(x) for x in zip(*lst)] [6, 450] >>>
"topdirectory/sub1/subsub1/subsubsub1/target".rsplit('/',2)[-2:]
class Question(models.Model): question_package = models.ManyToManyField(QuestionPackage, blank=True) name = models.CharField(max_length=128) answer = models.TextField() class Meta: abstract = True
# x = range(6) x = ["this", "is", "an", "example", "list"] for prv, nxt in zip(x, x[1:]): print prv, nxt
>>> data = [None] * 10 >>> data [None, None, None, None, None, None, None, None, None, None] >>>
with open(filename) as input_file: data = [] for line in input_file: if not line.startswith("Sarah,Brown"): data.append(line) with open(filename, 'w') as output_file: for d in data: output_file.write(d + '\n')
import os def get_size(start_path = '.'): total_size = 0 for dirpath, dirnames, filenames in os.walk(start_path): for f in filenames: fp = os.path.join(dirpath, f) total_size += os.path.getsize(fp) return total_size print get_size()
L1 = [1, 2, 3, 4, 5, 6, 7, 8, 9] indices = (2, 5, 7) start = 0 sections = [] for end in indices: sections.append(L1[start:end]) start = end sections.append(L1[start:]) for part in sections: print part # [1, 2] # [3, 4, 5] # [6, 7] # [8, 9]
In [21]: r = lxml.objectify.fromstring('<root><item>1</item><item>2</item></root>') In [22]: lxml.etree.tostring(r.item) Out[22]: '<item>1</item>'
>>> [x for x in range(2, 20) if all(x % y != 0 for y in range(2, x))] [2, 3, 5, 7, 11, 13, 17, 19]
./compiled_c_here "$(test)"
def strip_http_headers(http_reply): p = http_reply.find('\r\n\r\n') if p >= 0: return http_reply[p+4:] return http_reply
html=""" <td> +421 48/471 78 14 <br /> <em>(bowling)</em> </td> """ from bs4 import BeautifulSoup soup = BeautifulSoup(html) print soup.find("td").contents[0].strip() +421 48/471 78 14 print soup.find("td").next_element.strip() +421 48/471 78 14
>>> for m in re.findall(r'<strong>([^<]+)</strong>', raw_string): ... print m ... Mar08 Mar09 Mar10 Mar11 Mar12 Mar13
import pandas sample={'user1': {'item1': 2.5, 'item2': 3.5, 'item3': 3.0, 'item4': 3.5, 'item5': 2.5, 'item6': 3.0}, 'user2': {'item1': 2.5, 'item2': 3.0, 'item3': 3.5, 'item4': 4.0}, 'user3': {'item2':4.5,'item5':1.0,'item6':4.0}} df = pandas.DataFrame([ [col1,col2,col3] for col1, d in sample.items() for col2, col3 in d.items() ])
print ('%10d %10s') % (value1, value2),
with transaction.atomic(): for person in p: try: People.objects.filter(email=person['email']).update(birthday=person['birthday']) except IntegrityError: #handle the exception
dev = usb.core.find(idVendor=int(vendor, 16), idProduct=int(product, 16))
results = [] for item in dirlist: newsML = ET.parse(item) NewsLines = newsML.getroot() HeadLine = NewsLines.getiterator("HeadLine") results.append(HeadLine)
def createSocket(ip): # return the new socket object s = socket.socket() s.connect((ip, 55555)) return s addresses=[ip, ip2, ip3, ...] sockets=[createSocket(addr) for addr in addresses] sock = chooseSocket(sockets) # pick one (somehow) sock.send(data) # use the selected socket
class Widget: def __init__(self): self.x = 1 def sleep(self): os.sleep(self.x)
>>> out = re.findall(r'\d{7,20}', '123223423424,1982379879343') >>> out ['123223423424', '1982379879343']
for edge in tree.findall(".//edge"): start = edge.get('from') end = edge.get('to') dk(start,end)
import csv log=open("sync_de.log",'r') out=open("fn.csv",'w') csv = csv.writer(out) # to store the list out_list = [] for eachline in log: # your code if blabla: out_list.append([filename, start, end]) # write the csv csv.writerows(out_list)
from PIL import Image img = Image.open('multipage.tif') for i in range(4): try: img.seek(i) print img.getpixel( (0, 0)) except EOFError: # Not enough frames in img break
self.plot.parent.parent.scalar_data = self.p[self.n]
parent.hide() dialog = QtGui.QDialog() dialog.exec_() parent.show()
def funct(objnameOrType): dispatcher = {str: getObjByName, type1: getObjByType1, type2: getObjByType2} t = type(objnameOrType) obj = dispatcher[t](objnameOrType) doStuffWithObj(obj)
>>> path1 = "./base/folder1/subfolder" >>> path2 = "./base/folder2/" >>> import os >>> os.path.relpath(path1, path2) '../folder1/subfolder' >>> os.path.relpath(path2, path1) '../../folder2'
def __gt__(self, other): return self > other
pngcrush -rem gAMA -rem cHRM -rem iCCP -rem sRGB -brute -l 9 -max -reduce -m 0 -q IMAGE optipng -o7 -q pngout.png pngout pngout.png -q -y -k0 -s0 advpng -z -4 pngout.png > /dev/null
date_list = Note.objects.all().dates('created', 'year') for years in date_list: Note.objects.filter(created__year = years.year)
import clr clr.AddReference('System') from System import * with IO.Ports.SerialPort("COM3") as serialPort: serialPort.BaudRate = 9600 serialPort.DataBits = 8 serialPort.Open() while 1: print serialPort.ReadLine()
series[series==i].index
names = [child['institution_name'] for child in inst_array[0]['children']]
import urllib2 req = urllib2.Request('http://www.python.org/') # # Here we request that bytes 18000--19000 be downloaded. # The range is inclusive, and starts at 0. # req.headers['Range']='bytes=%s-%s' % (18000, 19000) f = urllib2.urlopen(req) # This shows you the actual bytes that have been downloaded. content_range=f.headers.get('Content-Range') print(content_range) # bytes 18000-18030/18031
>>> n = range(16) >>> s = ''.join(map(chr, n)) >>> np.fromstring(s, dtype=np.uint64) array([506097522914230528, 1084818905618843912], dtype=uint64) >>> sum((256**i)*x for i,x in enumerate(n[:8])) 506097522914230528L >>> sum((256**i)*x for i,x in enumerate(n[8:])) 1084818905618843912L
def cmdArray = ["python", "-c", "print('hello')"] def cmd = cmdArray.execute() cmd.waitForOrKill(1000) println cmd.text
def poly(x, roots): poly = 1 for r in roots: poly *= (x - r) return poly # EXAMPLE x = 1 roots = [2, 5, 7] print ( poly(x, roots) )
>>> import unicodedata >>> unicodedata.normalize('NFKD', u"m\u00fasica").encode('ascii', 'ignore') 'musica'
def create_list(self, object_list, bundle): """ Unimplemented, as Tastypie never creates entire new lists, but present for consistency & possible extension. """
#!/usr/bin/env python3 import sys import time data = "this is a sentence with some words".split() max_len=max([len(w) for w in data]) pad = " "*max_len for w in data: sys.stdout.write('%s\r' % pad) sys.stdout.write("%s\r" % w) sys.stdout.flush() time.sleep(0.4) print
>>> type(Table.col1.property) <class 'sqlalchemy.orm.properties.ColumnProperty'> >>> type(Table.rel.property) <class 'sqlalchemy.orm.relationships.RelationshipProperty'>
import csv result={} with open('/tmp/test.csv','r') as f: red=csv.DictReader(f) for d in red: result.setdefault(d['team'],[]).append(d['bldg']) #results={'1': ['1450'], '3': ['204', '250', '1437'], '2': ['1440']}
>>> import numpy as np >>> I = np.matrix([[ 0.66581073+0.00033919j], [ 0.81568896-0.03291265j], [ 0.99884785+0.00045446j]]) >>> >>> I[0, 0] (0.66581073000000002+0.00033919000000000001j)
colours = np.array(colours) colours[indices, :] = (1, 0, 0, 1)
from sorl.thumbnail import get_thumbnail im = get_thumbnail(my_file, '100x100', crop='center', quality=99)
import glob import imp import os def load_modules(module_names=None): if module_names is None: cur_dir = os.path.realpath(os.path.dirname(__file__)) module_wc = '{}/*.py'.format(cur_dir) module_names = [mn for mn in glob.glob(module_wc) if not mn.startswith('_')] modules = map(imp.load_source, module_names) return modules
df['tag'] = np.where(df['org_o'].isin(gt['org_o']), 'TP', 'FP')
In [18]: individuals.append(individuals.loc[1]) Out[18]: female fitness 0 True 1 1 False 1 1 False 1 In [19]: individuals.append(individuals.loc[1]).dtypes Out[19]: female bool fitness int64 dtype: object
def newGrid(...): group = QtGui.QGraphicsItemGroup(scene=self) group.setFlag(QtGui.QGraphicsItem.ItemIsMovable) #let't test how it works for i in range(xccells + 1): ... group.addToGroup(self.addLine(x,ymin,x,ymax,self.meshPen)) ...
... with open("test.gcode","r+") as s: with open("test_replaced.gcode","a") as replaced: ... print ("Done! - " + str(a) + " number of operations done!") print ("Loopcount: " + str(b))
to_json = {"accountId":accountId, "emailSubject":customData.emailSubject, "emailBlurb":customData.emailBlurb, "customFields":customFields, "status":customData.status, "messageLock":customData.messageLock} if james is not None: to_json['james'] = james requestBody = json.dumps(to_json)
>>> datetime.datetime(1601, 1, 1) + datetime.timedelta(microseconds=1e16) datetime.datetime(1917, 11, 21, 17, 46, 40) >>> _.isoformat() '1917-11-21T17:46:40'
In [18]: df['Time'].dt.hour + df['Time'].dt.minute/60 Out[18]: 0 16.533333 1 17.216667 2 18.166667 Name: Time, dtype: float64
Python 2.7.4 (default, Apr 6 2013, 19:54:46) [MSC v.1500 32 bit (Intel)] on win32 Type "help", "copyright", "credits" or "license" for more information. >>> s = 'MR1|L2-S1x' >>> p = r'([A-Z]+)(\d)?([|.+:x-]+)' >>> import re >>> t = re.findall(p, s) >>> t [('MR', '1', '|'), ('L', '2', '-'), ('S', '1', 'x')] >>>
import matplotlib.pyplot as plt import pandas as pd df = pd.read_csv('t.txt', delim_whitespace=True, header=None, parse_dates={'Dates': [1, 2]}) plt.figure() l_h = [] for identifier in df[0].unique(): h, = plt.plot(df[df[0]==identifier]['Dates'], df[df[0]==identifier][3], label=identifier) l_h.append(h) plt.legend(handles=l_h) plt.show()
class A(object): def __init__(self, msg, term_print) super(A, self).__init__() self.msg = msg self.term_print = term_print def a_0(): return self.a_1() def a_1(): return self.a_2() def a_2(): print msg, term_print
>>> soup.find_all(scope=["row", "col"]) [ <th scope="col">US $</th>, <th scope="col">Euro</th>, <th scope="row">Mon – Fri</th>, <th scope="row">Sat – Sun</th>, ]
def diff_elements(lst): """ >>> list(diff_elements([])) [] >>> list(diff_elements([1])) [] >>> list(diff_elements([1, 2, 4, 7])) [1, 2, 3] """ as_iter = iter(lst) last = next(as_iter) for value in as_iter: yield value - last last = value
obj1 = objectify.fromstring(expect) expect = etree.tostring(obj1) obj2 = objectify.fromstring(xml) result = etree.tostring(obj2) self.assertEquals(expect, result)
import re one_line = ''.join(menu).replace('\n', ' ') print re.sub(', ([a-z]+:)', r'\n\1', one_line)[:-1]
count = 0 for key, value in lmdb_env.cursor(): count = count + 1
In [14]: fruits = [["Mango", 6,5,8.0], ["Banana", 2.0,5,8.9,7], ["Pineapple", 4,6.8,9], ["Apple", 3.9,6,7,2]] In [15]: fruits.sort() In [16]: fruits Out[16]: [['Apple', 3.9, 6, 7, 2], ['Banana', 2.0, 5, 8.9, 7], ['Mango', 6, 5, 8.0], ['Pineapple', 4, 6.8, 9]]
def foo(a, b, c): print(a, b, c) a = [1,2,3] foo(*a) # 1 2 3
cdef class A: cdef foo(self): print "A" cdef class B(A) cdef foo(self, x=None) print "B", x cdef class C(B): cpdef foo(self, x=True, int k=3) print "C", x, k
dataframe['Compression Velocity'] *= 0.0254
#!/bin/sh cd $HOME/Projects/openerp_7_0/server/ /usr/bin/xterm -e 'python openerp-server --addons-path=../addons; /bin/bash' &
with open(your_file_path) as f: lines = f.read_lines() lines[1] = '#MOAB -l walltime={0}'.format(new_walltime_str) with open(your_file_path, 'w') as f: f.write('\n'.join(lines))
zf = zipfile.ZipFile(file_to_search, mode='w') zf.write(bin_file_path, custom_name) zf.close()
def our_special_filter( some_queryset ): for row in some_queryset: if row.aMethod(): yield row result= our_special_filter( SomeModel.objects.filter(...) )
with open("myfile", "r+") as f: lines = f.readlines() lines.sort() f.seek(0) f.writelines(lines)
import base64, StringIO, zipfile # base64 string from the message attachment = '...' attachment = base64.b64decode(attachment) attachment = StringIO.StringIO(attachment) zipFile = zipfile.ZipFile(attachment, 'r')
occurrences = {} while True: words = input('Enter line: ') words = words.lower() #this is also where I have tried a split() if words =='': break for word in words.split(): occurrences[word]=occurrences.get(word,0)+1 for word in (occurrences): print(word, occurrences[word])
import StringIO f = StringIO.StringIO() # create a file-like object wbk = xlwt.Workbook() earnings_tab = wbk.add_sheet('EARNINGS') wbk.save(f) # write to stdout
string1="""blah blah blah " some' thi'ng " end of string """
from django.middleware.cache import UpdateCacheMiddleware from django.utils.cache import learn_cache_key from django.http import HttpRequest from network.views import StatusView request = HttpRequest() request.META['SERVER_NAME'] = '1.0.0.127.in-addr.arpa' # important request.META['SERVER_PORT'] = '8000' # important request._cache_update_cache = True response = StatusView(request=request).get(request) cacher = UpdateCacheMiddleware() cacher.process_response(request, response).render()
import html2text html = open("foobar.html").read() print html2text.html2text(html)
results1_dict = dict((row[0], list(row[1:])) for row in results1) results2_dict = dict((row[0], list(row[1:])) for row in results2) for key, value in results2_dict: if key in results1_dict: results1_dict[key].extend(value) else: results1_dict[key] = value
>>> df = pd.DataFrame({"body": ["ball", "red BALL", "round sphere"]}) >>> df[df["body"].str.contains("ball")] body 0 ball >>> df[df["body"].str.lower().str.contains("ball")] body 0 ball 1 red BALL >>> df[df["body"].str.contains("ball", case=False)] body 0 ball 1 red BALL >>> df[df["body"].str.contains("ball", case=True)] body 0 ball
from nose.plugins import Plugin import datetime class SeparateReports(Plugin): "Log the results of each test into a separate file." def afterTest(self, test): logname = test.id() + '.log' success = test.passed date = datetime.datetime.now() # print logname, datetime.datetime.now(), success with open(logname, 'a') as log: log.write("%s: %s\n" % (date, success))
df.values.flatten()
d={'Alyssa':22, 'Char':25, 'Dan':25, 'Jeff':20, 'Kasey':20, 'Kim':20, 'Mogran':25, 'Ryan':25, 'Stef':22} import collections print collections.Counter(d.values()).most_common()[-1][0] 22
w = ['a', 'b', 'c'] s = '%s\t%s\t%s\n' % tuple(w)
queryCurs.execute("SELECT * FROM PATIENT") row = 0 while True: form = queryCurs.fetchone() if form == None: break for column, item in enumerate(form): patientTable.setItem(row, column, QtGui.QTableWidgetItem(str(item))) row += 1
>>> a = [1, 2, 3] >>> b = [1, 2, 3] >>> a == b True
>>> s = '34 ch33se 34e8 3.4' >>> map(int, filter(None, ''.join(map(lambda c: (c.isdigit() and c or ' '), s)).split(' '))) [34, 33, 34, 8, 3, 4]
from itertools import product a=[['AA', 'aa'], ['BB', 'bb'], ['CC'],['DD','dd']] for i in product(*a): print i #output ('AA', 'BB', 'CC', 'DD') ('AA', 'BB', 'CC', 'dd') ('AA', 'bb', 'CC', 'DD') ('AA', 'bb', 'CC', 'dd') ('aa', 'BB', 'CC', 'DD') ('aa', 'BB', 'CC', 'dd') ('aa', 'bb', 'CC', 'DD') ('aa', 'bb', 'CC', 'dd')
def change_label(*args): label.config(text='') # clear label label.config(text='T' + var.get()) # set new label text root = Tk() var = StringVar() # make the StringVar() label = Label(root) entry = Entry(root, textvariable=var) # set the textvariable to var var.trace('w', change_label) # trace var to monitor for changes, calling function on change label.pack() entry.pack() root.mainloop()
import re digits = re.compile(r'(\d+)') def tokenize(filename): return tuple(int(token) if match else token for token, match in ((fragment, digits.search(fragment)) for fragment in digits.split(filename))) # Now you can sort your PDF file names like so: pdfList.sort(key=tokenize)
from codecs import iterdecode for line in iterdecode(filename, 'utf16'): yield line
count = 0 coin=[200,100,50,20,10,5,2,1] total=[200,0,0,0,0,0,0,0] def func(i): global count,total,coin for x in range(total[i-1]/coin[i-1]+1): total[i]=total[i-1]-x*coin[i-1] if (i == 7): count += 1 else: func(i+1)
def printMaze(maze, x, y): for i in range(9): for z in range(4): if i == x and z == y: print 'X', else: print maze[i][z], print ''
print '\n%s %s' % (row[0].strftime('%Y-%m-%d'), row[1])
with open('u.txt') as uf, open('v.txt') as vf: for u,v in zip(uf,vf): print uv2sd(float(u),float(v))
import sys import subprocess logfile = open('logfile', 'w') proc=subprocess.Popen(['cat', 'file'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT) for line in proc.stdout: sys.stdout.write(line) logfile.write(line) proc.wait()
import arff, numpy as np dataset = arff.load(open('mydataset.arff', 'rb')) data = np.array(dataset['data'])
>>> a = Type_1(1,2,3,4,5) # making an instance of Type_1 >>> b = Type_2(1,2,3,4,5) # making an instance of Type_2 >>> a.push(b) # pushing one to another >>> b.variable2 # it worked! 0 >>> a.variable1 # it worked! 6
target: yourmodule
for Line in file("Text.txt", "r"): if Line.find("sum") >= 0: print Line.split()[0]
(<\s*?script[\s\S]*?(?:(?:src=[\'"](.*?)[\'"])(?:[\S\s]*?))?>)([\s\S]*?)(</scrip‌​t>)
def sort(sortlist, sortby): sortlist.sort(key = lambda x: getattr(x, sortby))
np.maximum(x, 0)
>>> n = '0100' >>> '{:0{}b}'.format(long(n, 2) + 1, len(n)) '0101'
entry1 = Entry(...) entry2 = Entry(...) entries = (entry1, entry2) ... def disable_all_entries(): for entry in entries: entry.configure(state="disabled")
for word in words.split(): print(word)
def get_float(prompt): while True: try: return float(input(prompt)) except ValueError: print "invalid input, try again!"
me/favorites?oauth_token=your_auth_token
import traceback traceback.print_exc()
In [98]: df = pd.DataFrame({'X': ['A','B','C','A','B','C','B','C','D','B','C','D'], 'Y': np.arange(12)}) df[0:6].groupby(['X']).count().add(df[6:].groupby(['X']).count(), fill_value=0) Out[98]: Y X A 2 B 4 C 4 D 2
def tt(w): if ' ' in w: print 'space' else: print 'no space' >> tt('b ') >> space >> tt('b b') >> space >> tt('bb') >> no space
x1 = float(raw_input("x1: ")) y1 = float(raw_input("y1: ")) x2 = float(raw_input("x2: ")) y2 = float(raw_input("y2: "))
df = df[((df.B>df.D) & (df.B<df.D*2)) & ((df.B>df.F) & (df.B<df.F*2))]
dates.MinuteLocator(interval=30)
import sys import StringIO import contextlib @contextlib.contextmanager def stdoutIO(stdout=None): old = sys.stdout if stdout is None: stdout = StringIO.StringIO() sys.stdout = stdout yield stdout sys.stdout = old code = """ i = [0,1,2] for j in i : print j """ with stdoutIO() as s: exec code print "out:", s.getvalue()
querystring['param2']
{{ form.instance.guest_name }}
df_labor = df[df.job == "Labor"].reset_index(drop = True) In [94]: df_labor Out[94]: age job name sex 0 30 Labor Mike M 1 66 Labor Dave M 2 7 Labor Luke M 3 80 Labor Ellen F
In [16]: df.groupby('id')['x'].apply(pd.rolling_mean, 2, min_periods=1) Out[16]: 0 0.0 1 0.5 2 1.5 3 3.0 4 3.5 5 4.5 In [17]: df.groupby('id')['x'].cumsum() Out[17]: 0 0 1 1 2 3 3 3 4 7 5 12
[COEFF, SCORE]= princomp(zscore(X)); x=SCORE(1:2:end,1); y=SCORE(1:2:end,2); z=SCORE(1:2:end,3); u=SCORE(2:2:end,1); v=SCORE(2:2:end,2); w=SCORE(2:2:end,3); quiver3(x,y,z,u-x,v-y,w-z,0);
def func(df1): idx = df1.index.get_level_values(0)[0] df1 = df1.loc[idx] return (df1['Values'] / df1.loc['Calc']['Values']).to_frame() df.groupby(level=0).apply(func)
IEnumerable<TResult> Zip<TResult,T1,T2> (IEnumerable<T1> a, IEnumerable<T2> b, Func<T1,T2,TResult> combine) { using (var f = a.GetEnumerator()) using (var s = b.GetEnumerator()) { while (f.MoveNext() && s.MoveNext()) yield return combine(f.Current, s.Current); } }
A.objects.filter("some-filter-criteria", m2m__b__x__gt=50)
user@host> manage.py shell >>> from django.contrib.auth.models import User >>> user=User.objects.create_user('foo', password='bar') >>> user.is_superuser=True >>> user.is_staff=True >>> user.save()
>>> import AppKit >>> path = os.path.expanduser('~/src/foo.xcodeproj/project.pbxproj') >>> d = AppKit.NSDictionary.dictionaryWithContentsOfFile_(path)
response = urlfetch.fetch(your_url, follow_redirects=False) location = response.headers['Location']
import re s = 'Now is 20m before 10h' rgx = re.compile(r'[0-9]+[hms](?= *before)') print rgx.findall(s) # ['20m']
my_options = {"bg" : "gray60", "font" : ("Tahoma", 20)} tk.Label(root, text = "Same background", **my_options).grid(row = 1, column = 1) tk.Button(root, text = "and font.", **my_options).grid(row = 1, column = 2, padx = (5, 0))
a = [1,2,3,4,5] b = [11,22,None,44,55]
form.helper['peso'].wrap(AppendedText, "kg")
df['mango'] = df.fruit == 'mango' df2 = df.groupby(['customer', 'mango']).sum().unstack() df2.columns = ['not mango', 'mango'] >>> df2 not mango mango customer cust1 55 75 cust2 135 23 cust3 100 22 cust4 54 44
import struct struct.unpack('i', b'\x05\x00\x00\x00') # i stands for integer
import ftplib ftp_srv = 'ftp.example.com' ftp_usr = 'user' ftp_pass = 'password' ftp = ftplib.FTP(ftp_srv) ftp.login(ftp_usr, ftp_pass) files = [('remote_file1', 'local_file1'), ('remote_file2', 'local_file2')] for file_ in files: with open(file_[1], "wb") as f: ftp.retrbinary("RETR " + file_[0], f.write) ftp.quit()
from math import sqrt def is_within(point, circle): distance = sqrt(((point.x - circle.x) ** 2) + ((point.y - circle.y) ** 2)) return distance < circle.radius
barbs = m.quiver(x, y, u[0, :], v[0, :], scale = 100) for i in range(365): barbs.set_UVC(u[i,:],v[i,:]) #save the figure or something
>>> import lxml.etree >>> tree = lxml.etree.XML("<root><a id='1'/><b id='2'/></root>") >>> tree.xpath("*[@id=1]") [<Element a at c3bc30>] >>> lxml.etree.tostring(tree.xpath("*[@id=1]")[0]) '<a id="1"/>'
def __getitem__(self, index): return self.list[index-1] def __setitem__(self, index, value): self.list[index-1] = value
import sys from time import sleep for i in range(3): sys.stdout.write('.') sys.stdout.flush() sleep(1) print('Welcome!')
while True: user_input = requestInteger("Enter a number between 0 and 9...") if not 0 <= user_input <= 9: printNow("Error! Input must be between 0 and 9. Please re-enter.") else: print "Thanks, you've entered: ", user_input break
x = np.array([[3,5,9],[6,0,7],[2,3,4]]) m = np.array([[1,1,2],[2,1,1],[2,1,2]]) indices = np.where(m == 1) # indices contains two arrays, the column and row indices values = x[indices]
def view_function(request,id): object_to_edit = get_object_or_404(Model,id=id) #Or slug=slug form = ModelForm(data = request.POST or None, instance=object_to_edit) if form.is_valid(): form.save() redirect() return render_to_response('template_name',{},RequestContext(request))
import multiprocessing.Pool p = multiprocessing.Pool() # use all available CPUs input = open("input.txt") x = (process_line(line) for line in input) y = p.imap(process_item, x) z = (generate_output_line(item) + "\n" for item in y) output = open("output.txt", "w") output.writelines(z)
hBiasLayer=BiasUnit() net.addModule(hBiasLayer)
from IPython.display import Latex Latex(r"""\begin{eqnarray} \nabla \times \vec{\mathbf{B}} -\, \frac1c\, \frac{\partial\vec{\mathbf{E}}}{\partial t} & = \frac{4\pi}{c}\vec{\mathbf{j}} \\ \nabla \cdot \vec{\mathbf{E}} & = 4 \pi \rho \\ \nabla \times \vec{\mathbf{E}}\, +\, \frac1c\, \frac{\partial\vec{\mathbf{B}}}{\partial t} & = \vec{\mathbf{0}} \\ \nabla \cdot \vec{\mathbf{B}} & = 0 \end{eqnarray}""")
import pytz from datetime import datetime now = datetime.utcnow().replace(tzinfo = pytz.utc)
import pandas as pd x = pd.cut(np.arange(0,20), 10) np.array(map(lambda t:t[1:-1].split(","), x.levels), float)
from time import time prev = time() while True: now = time() if now - prev > 3: print 'report' prev = now else: pass # runs
>>> col1 = ['2006-03-28','2006-04-05','2006-04-06'] >>> col2 = ['IBM', 'MSFT', 'IBM'] >>> col3 = [1000, 1000, 500] >>> zip(col1, col2, col3) [('2006-03-28', 'IBM', 1000), ('2006-04-05', 'MSFT', 1000), ('2006-04-06', 'IBM', 500)]
gtk_tree_view_set_search_column (GtkTreeView *tree_view, gint column) column : the column of the model to search in, or -1 to disable searching
>>> from collections import Counter >>> d = {'a':3, 'b':9, 'c':88, 'd': 3} >>> Counter(d.values()).most_common() [(3, 2), (88, 1), (9, 1)]
import datetime import pytz now = datetime.now(pytz.utc) # datetime.datetime(2012, 6, 8, 10, 31, 58, 493905, tzinfo=<UTC>) [tz for tz in pytz.common_timezones_set if now.astimezone(pytz.timezone(tz)).hour == 9] # ['Atlantic/Cape_Verde'] [tz for tz in pytz.common_timezones_set if now.astimezone(pytz.timezone(tz)).hour == 12] # returns a list of 45 timezones, 'Europe/Oslo' included
import datetime now = datetime.datetime.now() past = now - datetime.timedelta(hours=10)
df["new_variable"] = df.ix[6:].apply(perform_function1).apply(perform_function2)
@classmethod @ndb.transactional() def create_account(cls, name, other_params): acct = Account.get_by_id(name) if not acct: acct = Account(id=name, other param assigns) acct.put()
requests.get()
In [2]: List=[['XD',1],['XD',3],['XD',2],['X5',2],['X5',3],['XT',2]] In [3]: SortByList={'XD': 'A', 'XT':'B', 'XQ': 'C','X5': 'D'} In [4]: sorted(List, key=lambda x:(SortByList[x[0]],x[1])) Out[4]: [['XD', 1], ['XD', 2], ['XD', 3], ['XT', 2], ['X5', 2], ['X5', 3]]
import ast for line in open('listaraw.csv'): line = ast.literal_eval(line.replace('""', '\\"')) if isinstance(line, tuple): items = map(ast.literal_eval, list(line)) else: items = ast.literal_eval(line) if isinstance(items, dict): items = [items] for item in items: print item['geometry']['location']
from django_cron import cronScheduler, Job class sendMail(Job): # period run every 300 seconds (5 minutes) run_every = 300 def job(self): # This will be executed every 5 minutes datatuple = check_subscription_finishing() send_mass_mail(datatuple) //and just register it cronScheduler.register(sendMail)
In [11]: df = pd.DataFrame([["a", "b", 43, 87, 29]], columns=["N", "P", 1, 2, 3]) In [12]: pd.melt(df, id_vars=["N", "P"], value_vars=[1, 2, 3], var_name="Day") Out[12]: N P Day value 0 a b 1 43 1 a b 2 87 2 a b 3 29
{% set var = "This Text" %} {{ var|lower|replace(' ','-') }}
BUILDDIR = build ... clean: -rm -rf $(BUILDDIR)/*
if self.steps.current == "form1": data = self.request.POST["form1-response"] user = CustomerModel.objects.get(id=self.request.user.id) user.response = data user.form_step = "form1" user.save()
In [2]: boolean_array = np.array([True, False, False, True]) In [3]: float_array = np.ones(4) * 1.0 In [4]: float_array Out[4]: array([ 1., 1., 1., 1.]) In [5]: float_array[boolean_array] = 0 In [6]: float_array Out[6]: array([ 0., 1., 1., 0.])
(df['Date2']-df['Date1']).apply(lambda x: x/np.timedelta64(1,'M'))
version = func1() or func2()
from django.db.models import Count Profile.objects.values('age').annotate(Count('age')) Result: [{'age': 10, 'age__count': 52}, ...]
>>> from collections import OrderedDict >>> x= [('a',1),('b', 2)] >>> x_1 = OrderedDict(x) >>> for key in x_1: ... print(key) ... a b
import numpy import matplotlib.pyplot as plt #Random data data = numpy.random.random((10, 10)) #Set all data points equal to zero to NaN #data[data == 0.] = float("NaN") #Set single data value to nan data[2][2] = float("NaN") fig = plt.figure() ax = fig.add_subplot(1, 1, 1) ax.imshow(data, interpolation = "nearest") plt.show()
qry = DBSession.query(Item) # ensure that each condition is present using separate condition for cid in condition_ids: qry = qry.filter(Item.conditions.any(Condition.id == cid)) # ensure that other skills are not present: qry = qry.filter(~Item.conditions.any(~Condition.id.in_(condition_ids)))
Python 2.7.10 (default, Oct 23 2015, 19:19:21) [GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin Type "help", "copyright", "credits" or "license" for more information. >>> a_set = set([1, 2, 3]) >>> a_set set([1, 2, 3]) >>> b_set = {1, 2, 3} >>> b_set set([1, 2, 3])
#!/bin/sh "exec" "python" "-B" "$0" "$@" # The rest of the Python program follows below:
import sys import time for i in range(3): sys.stdout.write('\r' + ','.join([str(a) for a in range(i+1, 0, -1)])) sys.stdout.flush() time.sleep(1) sys.stdout.write('\n')
>>> results = [{'addr': '10.0.0.1', 'broadcast': '10.0.0.2', 'netmask': '255.255.255.255'}] >>> results[0] {'addr': '10.0.0.1', 'broadcast': '10.0.0.2', 'netmask': '255.255.255.255'} >>> results[0]['addr'] '10.0.0.1'
In [6]: full = np.vstack(([1,'a','b'],[2,'c','d'],[3,'e','f'])) In [7]: full Out[7]: array([['1', 'a', 'b'], ['2', 'c', 'd'], ['3', 'e', 'f']], dtype='|S1') In [8]: for a,b,c in full: ...: print a,b,c ...: 1 a b 2 c d 3 e f
my_file = io.open("myfile.txt", "w", encoding="utf-8")
class ToggleButton(Button): def __init__(self, text="ToggleButton", state=True): super(ToggleButton, self).__init__(text) self.state = state def press(self): super(ToggleButton, self).press() self.state = not self.state print('ToggleButton is now', 'ON' if self.state else 'OFF')
def create_profile(sender, instance, created, **kwargs): profile = None if created: profile, created = Profile.objects.get_or_create(user=instance) post_save.connect(create_profile, sender=User)
RewriteEngine On RewriteRule ^(.*)$ http://a.b.com/abc/def?info=$1 [L]
if len(set(line.split()).intersection(keywords)) > 2:
In [297]: import pandas as pd import io t="""ID, Price, Name 1, $800, Jim""" df = pd.read_csv(io.StringIO(t), sep=',\s+') t1="""ID, Price, Address, Name 2, $500, 1 Main St., Amanda""" df1 = pd.read_csv(io.StringIO(t1), sep=',\s+') pd.concat([df,df1], ignore_index=True) Out[297]: Address ID Name Price 0 NaN 1 Jim $800 1 1 Main St. 2 Amanda $500
>>> the_list = ['albert', 'angela', 'leo', 'bridget'] >>> [ word.upper().replace('A', 'a') for word in the_list] ['aLBERT', 'aNGELa', 'LEO', 'BRIDGET']
[i.find('ul', {'class': "definitionList"}).find('li').text for i in soup.find_all('div', {'class': "contentBlurb"}) if 'Description Synonyms' in str(i.text)][0]
Python 2.5.1 >>> import sqlite3 >>> sqlite3.version '2.3.2' >>> sqlite3.sqlite_version '3.3.4'
>>> import struct >>> result = struct.unpack('i', '\x00\xff\xff\xff') >>> result[0] -256
>>> t = (1, 2, 3, 4) # t is the tuple (1, 2, 3, 4) >>> l = list(t) # l is the list [1, 2, 3, 4]
SELECT DISTINCT table1.* FROM table1 JOIN table2 WHERE table1.b = table2.b AND table2.c = '1'
from status import Alert context['list'] = Alert.objects.filter(All My Filters Here! (link below))[:8]
from __future__ import division as _division import numpy as _np import pandas as _pd
from Bio import SeqIO temp = {} for line in open("test.txt","r"): i, c = line.strip().split() temp[i] = c for rec in SeqIO.parse("mymodified_transcript.fa","fasta"): if str('>'+rec.id) in temp.keys(): print str('>'+rec.id), temp['>'+rec.id] print str(rec.seq)
>>> A = np.empty(2, dtype=object) >>> A[0] = array([0, 0, 0]) >>> A[1] = array([1, 2, 3]) >>> A array([array([0, 0, 0]), array([1, 2, 3])], dtype=object) >>> np.vstack(A) array([[0, 0, 0], [1, 2, 3]])
def run_command(command): p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT) return p.communicate()
print method ci = proxy.methods.get(method) for param in ci.inparams: print param.name.ljust(20), param.type print
U = np.random.rand(3,24,5) R = np.eye(3,3) result = np.einsum( "ijk,il", U,R )
string = "Article One News" words = string.split() i = 0 while i < len(words): word = words[i] # Do whatever you want with this word i += 1
>>> l = [0.01, 0.1, 0.4, 0.034, 0.6, 0.7, 0.9, 1] >>> [0.4 if (0. < f < 0.5) else 0.7 for f in l] [0.4, 0.4, 0.4, 0.4, 0.7, 0.7, 0.7, 0.7]
any(a == 'Mary' for a, b in tuples) # check if any tuple has a name equal to Mary
import re regex = re.compile(r'[,:/]') a, b, c, d, e = regex.split('a,b:c,d/e')
from skimage import io from skimage import color from skimage import filter import matplotlib.pyplot as plt image = color.rgb2gray(io.imread('4g1te.png')) denoised = filter.denoise_tv_bregman(image, 1) edges = filter.canny(denoised, 1, 0.01, 0.1) fig, axes = plt.subplots(ncols=2) axes[0].imshow(denoised) axes[1].imshow(edges) for ax in axes: ax.set_axis_off() plt.show()
from sqlalchemy.sql import select, func ... Column('version', Integer, default=select([func.max(1, func.max(version_table.c.old_versions))]))
for comment in comments_generator(client, VIDEO_ID): author_name = comment.author[0].name.text text = comment.content.text post_date = comment.published.text last_update_date = comment.update.text print("{}(date:{}): {}".format(author_name, post_date, text))
obj = pickle.loads(%s)
df = df.set_index('Count_Product') ax = df['Count_Transaction'].plot(kind='bar', figsize=(5,5), color='blue') ax.set_ylabel("Count_Transaction") ax.set_xlabel("Count_Product") patches, labels = ax.get_legend_handles_labels() ax.legend(patches, labels, loc='best')
>>> from SortedCollection import SortedCollection >>> from operator import itemgetter >>> s = SortedCollection(key=itemgetter(0)) >>> s.insert((1,2,'a')) >>> s.insert((10,20,'b')) >>> s.insert((20,30,'c')) >>> s.find_le(10) (10, 20, 'b')
>>> WeDoNotWantToDeriveThis.__setitem__ = types.MethodType(set_item_func, None, WeDoNotWantToDeriveThis) >>> inst[0] = None hi there >>>
import socket server = "www.google.com" server = socket.gethostbyname(server) port = 80 request = "GET / HTTP/1.1\nHost: " + server + "\n\n" sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((server, port)) sock.send(request.encode()) response = sock.recv(4096).decode("utf-8") print(response) test = response.index("\r\n\r") print(test)
def load_miniatures(self, *args): proxy = Loader.image('http://10.0.13.206:9000/?action=snapshot') proxy.bind(on_load=self.receive_miniatures) def receive_miniatures(self, proxy): if proxy.image.texture: self.image.texture = proxy.image.texture Clock.schedule_once(self.load_miniatures, 0.1) def build(self): self.image = Image() self.load_miniatures() return self.image
E = sum( abs(fft(x))[:len(x)/2]**2 ) / len(x)
def koch_invoke(): koch(int(pointSize_max.get()), int(pointSize.get())) drawButton = tk.Button(frame, text = "Draw a fractal", command=koch_invoke)
import httplib import os.path total_size = os.path.getsize('/path/to/file') infile = open('/path/to/file') conn = httplib.HTTPConnection('example.org') conn.connect() conn.putrequest('POST', '/upload/') conn.putheader('Content-Type', 'application/octet-stream') conn.putheader('Content-Length', str(total_size)) conn.endheaders() while True: chunk = infile.read(1024) if not chunk: break conn.send(chunk) resp = conn.getresponse()
res1.rx('sigma_stat', 'fit', 'L=300', 'AR=1.5', 'SO=3', 'T=30')
Example outputs # The outputs are sqashed by the sigmoid( ) function 0 1 1 0 # class one 1 1 1 0 # class one 0 0 1 0 # class two 0 1 1 1 # class two 0 0 1 0 # class three
options, args = parser.parse_args() option_dict = vars(options)
>>> import re >>> my_string = 'a hello aaaaa hi aaaaaaa bye bbb' >>> re.sub(r'a+', 'b', my_string) 'b hello b hi b bye bbb'
likes = json.loads(likes_data) comments = json.loads(comments_data) data = {'likes': likes['data'], 'comments': comments['data']} self.response.out.write(json.dumps(data))
def getEventsForMonth(self, month, year): start_date = datetime.datetime(year, month, 1) if month == 12: end_date = datetime.datetime(year + 1, 1, 1) else: end_date = datetime.datetime(year, month + 1, 1) return Events.all().filter('date >=', start_date).filter('date <=', end_date).fetch(1000)
t = [1, 2, (30)] t[2] += (40,)
import datetime a_list = ["01.06.2012 09:45 a a a", "01.06.2012 08:00 b b b", "21.12.2012 21:00 c c c", "13.07.2011 17:00 d d d", "26.05.2012 08:00 e e e"] def sorting(x): date = " ".join(x.split()[:2]) return datetime.datetime.strptime(date, '%d.%m.%Y %H:%M') print sorted(a_list, key=sorting)
df1['DateTime']=pd.to_datetime(df1['Time_Date'],coerce=True) nulls=df1['Time_Date'][df1['Time_Date'].notnull()==False]
tick_locs = [list of locations where you want your tick marks placed] tick_lbls = [list of corresponding labels for each of the tick marks] plt.xticks(tick_locs, tick_lbls)
for link in soup.select("section.LINK_CLASS > div.LINK_CLASS2 > div.LINK_CLASS3 > a[href]"): print(link["href"])
def save(self, *args, **kwargs): if not self.id: super(Project, self).save(*args, **kwargs) year = datetime.datetime.now().year self.jobNumber = '{}{:04d}'.format(year, self.id) super(Project, self).save(*args, **kwargs)
if (strlen(name) <= 20) { //code }
class A(object): ... class B(A): ... b = B() super(B, b).get_value = Something() # no b.get_value = Something() # ok B.get_value = Something() # ok A.get_value = Something() # ok
open('//HOST/share/path/to/file')
for i, record in enumerate(qs): record.value = i
deltas = MyArray[1]-MyArray[0] diff_days = np.fromiter((d.days for d in deltas), dtype=float, count=len(deltas))
from sklearn.feature_extraction import DictVectorizer X_train_raw = [{'a': 1}, {'b': 1}, {'c': 1}] y_train = [('first',), ('second',), ('first', 'second')] v = DictVectorizer() X_train = v.fit_transform(X_train_raw) clf = OneVsRestClassifier(MultinomialNB()) clf.fit(X_train, y_train)
%inline %{ // Serializes into a string void SerCmd(Class *v, int *length, std::string& str) { QByteArray ba; QDataStream out(&ba, QIODevice::WriteOnly); out << *v; *length = ba.size(); str.clear(); str.append(ba.constData(), ba.size()); } %}
sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM) #UDP sock.bind((UDP_IP, UDP_PORT)) while True: z, addr = sock.recvfrom(1024) #buffer size is 1024 bytes decode = base64.b64decode(z) print("Received message:", z, decode) if not z:break
db=MySQLdb.connect(user="root",passwd="",db="my_db",unix_socket="/opt/lampp/var/mysql/mysql.sock")
import numpy as np import matplotlib.pyplot as plt plt.figure() plt.axis([0, 6000, 0, 45000]) # From your example I am assuming that the maximum value is 6000 binBoundaries = np.linspace(0,6000,201) data['column'][data.value == 0].hist(bins=binBoundaries, label='A') data['column2'][data.value == 1].hist(bins=binBoundaries, label='B') plt.title('A Histogram') plt.xlabel('x-axis') plt.ylabel('y-axis') plt.legend()
>>> from urllib2 import urlopen >>> from bs4 import BeautifulSoup >>> >>> url = "http://www.baseball-reference.com/players/split.cgi?id=aardsda01&year=2015&t=p" >>> soup = BeautifulSoup(urlopen(url)) >>> soup.find("b", text='Throws:').next_sibling.strip() u'Right'
>>> print re.sub(r'\B@\b', r'', '@Alice @ home') Alice @ home >>> print re.sub(r'\B@\b', r'', 'foo @Alice @ home') foo Alice @ home
set(i['id'] for i in items)
print your_qs.filter(league_pk__in=[1,2,3]).query print your_qs.filter(league=[1,2,3]).query
filter = lambda: Entity.owner == get_current_user() query = session.query(Entity).... #some more query = query.filter(filter())
b = B() b.__class__ b.__class__.__base__ b.__class__.__bases__ b.__class__.__base__.__subclasses__()
import numpy np = numpy del numpy
def treeToList(node, order=Order.INORDER): if node is None: return [] right = treeToList(node.right, order) down = treeToList(node.down, order) current = [node.data] if order == Order.PREORDER: return current + right + down if order == Order.INORDER: return right + current + down if order == Order.POSTORDER: return right + down + current
>>> import ctypes >>> ctypes.windll.user32.RegisterRawInputDevices <_FuncPtr object at 0x01FCFDC8>
re.findall('ABC-[0-9]+', string)
from math import sqrt as _sqrt
Post.objects.raw(""" SELECT DISTINCT post FROM (SELECT appname_post.post_id AS post, appname_recommendation.submit_time FROM appname_post INNER JOIN appname_recommendation ON appname_post.post_id = appname_recommendation.post_id ORDER_BY appname_recommendation.submit_time) """)
def lbuild( start, inc, test ): rslt = [start] while not test(start,inc): start += inc rslt.append( start ) return rslt n = '22' a = 4 nval = int(n) print lbuild( nval, -10, lambda(x,y): (x<10 and x>=0) ) print lbuild( nval, 1, lambda(x,y): x%10 == a-1 )
def list_delta(before, after): out = {} for key in before: if isinstance(before[key], list): out[key] = len(after[key]) - len(before[key]) return out before = {'name': 'davidism', 'numbers': [0, 1, 2, 3, 4]} after = do_update(before) # after = {'name': 'davidism', 'numbers': [0, 1, 2, 3, 4, 5]} list_delta(before, after) # returns {'numbers': 1}
class MyWidget(QtGui.QWidget): def __init__(self, parent=None): super(MyWidget, self).__init__(parent) self.menu=QtGui.QMenuBar() self.menu.addAction("do something") layout=QtGui.QVBoxLayout() layout.addWidget(self.menu)
http_server = tornado.httpserver.HTTPServer(application,ssl_options={ "certfile": "cert.cer", "keyfile": "key.key", })
Pattern = Pattern.replace("\\",r"\\").replace("^",r"\^")
from itertools import repeat # open the file, create a reader for row in reader: row_ = [i for item in row for i in itertools.repeat(item,2)] # now do whatever you want to do with row_
name = 'Project_Name' glob.glob(os.path.join(directory, '{}_*.txt'.format(name)))
(?i)((?:\S+\s+){0,3})\bRAM\b\s*((?:\S+\s+){0,3})
>>> import string >>> [a[1] for a in string.Formatter().parse('{foo}/{bar}')] ['foo', 'bar']
import os print os.getcwd() #Your current working directory os.chdir(os.getcwd() + '/folder1/folder2/') print os.getcwd() #Your new wordking dir create_zip_path = "my_zip.zip" file_to_add_to_zip = "my_file.txt" zip_file(create_zip_path, file_to_add_to_zip)
window.opener.location.href = "http://some/new/location"; window.close();
c = 0xFFFFFFFF & (a+b)
import csv reader = csv.reader(open('match_log.txt','rb'), dialect='excel', delimiter='|') filenameVariable = [] data = {} for row in reader: filenameVariable.append(row[0]) data[row[0]] = dict(item.split(',') for item in row[1:]) print data print filenameVariable
vsizer.Add(hsizer2, 1, wx.EXPAND)
from django.contrib.auth.models import User User.objects.create_user(username='somename', password='somepass')
def function(number_of_items): n = number_of_items # do some stuff. . . n -= 1 # now the variable number_of_items was changed in the enclosing scope!
from collections import Counter counts = Counter(list_of_words)
while True: if self.h <= 1: incr = 1 elif self.h >= 359: incr = -1 self.h += incr ... ...
tag1 = rally.create('Tag', dict(Name=info['test_id'])) tag2 = rally.create('Tag', dict(Name=info['platform'])) tags = [ dict(_ref=tag1.ref), dict(_ref=tag2.ref)] defect = { "Tags" : tags }
import os # change the directory os.chdir('c:\dir1\dir2') # use os to send commands to shell or dos os.system('python program.py') # you are done
<docx.text.paragraph.Paragraph object at 0x04299FD0>
def run(): app = QtGui.QApplication([]) loader = ExampleLoader() app.setWindowIcon(QtGui.QIcon('icon.png') # This is the only new line app.exec_()
def _format(self, object, stream, indent, allowance, context, level): # … rep = self._repr(object, context, level - 1) max_width = self._width - 1 - indent - allowance sepLines = len(rep) > max_width if sepLines: # … custom repr logic write(rep)
[re.sub("/\*.+\*/", "", m).replace('\n', '').strip() for m in re.findall("{(.+?)};", c_file_as_string, re.S)]
In [1]: list1 = [1,2,3,4] # some list In [2]: a = list1.append(5) # append '5' to the list and assign return value to 'a' In [3]: print a None # means '.append()' operation returned None In [4]: list1 Out[4]: [1, 2, 3, 4, 5] In [5]: list1.append(6) In [6]: list1 Out[6]: [1, 2, 3, 4, 5, 6]
class Proc(object): def __init__(self,cmd) self.cmd = cmd def run(self): proc = multiprocessing.Process(target=myProcess,args=(args)) self.startime = datetime.datetime.now() proc.start() proc.join() // Don't use this if you don't want to wait. procobj = Proc(cmd) procobj.run() procobj.startime // gives you starttime
from flask.ext.login import user_logged_in @user_logged_in.connect_via(app) def on_user_logged_in(sender, user): log_auth_token(user.get_auth_token()) # or whatever.
arr1inds = arr1.argsort() sorted_arr1 = arr1[arr1inds[::-1]] sorted_arr2 = arr2[arr1inds[::-1]]
random.shuffle(l) random_selection = l[ :l.index(10) ]
[input[i:i+n] for i in range(0, len(input), n)]
import json import os import shutil import tempfile def rewriteJsonFile(sourceObj, targetFilePath, **kwargs): temp = tempfile.mkstemp() tempHandle = os.fdopen(temp[0], 'w') tempFilePath = temp[1] json.dump(sourceObj, tempHandle, **kwargs) tempHandle.close() shutil.move(tempFilePath, targetFilePath)
from selenium.webdriver.firefox import webdriver browser = webdriver.WebDriver() browser.get('https://www.hidemyass.com/proxy-list') rows = browser.find_elements_by_xpath('//table[@id="listtable"]//tr') for row in rows[1:]: cells = row.find_elements_by_tag_name('td') print cells[1].text browser.close()
>>> import croniter >>> import datetime >>> now = datetime.datetime.now() >>> cron = croniter.croniter('45 17 */2 * *', now) >>> cron.get_next(datetime.datetime) datetime.datetime(2011, 9, 14, 17, 45) >>> cron.get_next(datetime.datetime) datetime.datetime(2011, 9, 16, 17, 45) >>> cron.get_next(datetime.datetime) datetime.datetime(2011, 9, 18, 17, 45)
def register_New_Date(): # Cast PostgreSQL Date as Python string # Reference: # 1. http://initd.org/psycopg/docs/extensions.html#psycopg2.extensions.new_type # 2. http://initd.org/psycopg/docs/advanced.html#type-casting-from-sql-to-python # 1082 is OID for DATE type. NewDate = psycopg2.extensions.new_type((1082,), 'DATE', psycopg2.STRING) psycopg2.extensions.register_type(NewDate)
for item in v: print v
print "0x%X" % value
import Tkinter as tk def keyPress(event): if event.char in ('V', 'F', ' '): print event.char elif event.keysym not in ('Alt_r', 'Alt_L', 'F4'): print event.keysym return 'break' root = tk.Tk() entry = tk.Entry() entry.bind('<KeyPress>', keyPress) entry.pack() entry.focus() root.mainloop()
current_ids = set(soldier.id for soldier in user.soldiers) for soldier_class in soldierlist: if soldier_class.id not in current_ids: user.soldiers.append( soldier_class() )
elif selection == '2': print "Opened database successfully \n" cursor = conn.execute("SELECT * FROM DATABASE") all = cursor.fetchall() for row in all: print "ID = ", row[0], "NAME = ", row[1], "CHECKED IN = ", row[2], "\n" raw_input()
>>> tuple = ('one', 'two', 'one', 'two', 'one') >>> ['<strong>%s</strong>' % tuple[i] if i%2 else tuple[i] for i in range(len(tuple))] ['one', '<strong>two</strong>', 'one', '<strong>two</strong>', 'one']
def run(self, edit, target): if not target or target == "": return content = self.view.substr(sublime.Region(0, self.view.size())) begin = content.find(target) if begin == -1: return end = begin + len(target) target_region = sublime.Region(begin, end) self.view.sel().clear() self.view.sel().add(target_region)
print df.apply(lambda x: pd.Series(x[~x.isnull()].values), axis=1) 0 1 2 0 Bus Car NaN 1 Plane NaN NaN 2 Car NaN NaN 3 Boat Car NaN 4 Boat Car Plane
#!/bin/bash export PYTHONSTARTUP="$1" # Set the startup script python will run when it start. shift # Remove the first argument, don't want to pass that. python manage.py shell "$@" # Run manage.py with the startup script.
from array import array buf = array("d", range(101)) addr, count = buf.buffer_info() print lib.sum(cast(addr, POINTER(c_double)), count)
row_data = ['Col 1', row.col2, XML(body_col.replace(".", ".<br/><br/>")), row.col4]
class node: name="temp" ID=-1 abstract="a short description" text="the full description" sons=[] def sLen(self): # here print ("hello") return len(self.sons) n = node() n.sons = [1, 2, 3] print n.sLen()
In [11]: df.index = pd.MultiIndex.from_tuples(df.index.map(lambda x: (x[0:2], x[2:4]))) In [12]: df Out[12]: a b bar foo bah foo A1 B1 1 0 3 2 B2 5 4 7 6 A2 B1 9 8 11 10 B2 13 12 15 14
import numpy as np; np.random.seed(0) import seaborn as sns; sns.set() uniform_data = np.random.rand(10, 12) ax = sns.heatmap(uniform_data, cbar=False, vmin=0, vmax=1) cbar = ax.figure.colorbar(ax.collections[0]) cbar.set_ticks([0, 1]) cbar.set_ticklabels(["0%", "100%"])
SPLIT="SV=" line=">tr|A0A024RAP8|A0A024RAP8_HUMAN HCG2009644, isoform CRA_b OS=Homo sapiens GN=KLRC4-KLRK1 PE=4 SV=1MGWIRGRRSRHSWEMSEFHNYNLDLKKSDFSTRWQ" print line.split(SPLIT)[0] + SPLIT + line.split(SPLIT)[1][0]
#Create the array [Nx, Ny, Nz] = (60, 220, 85) [I, J, K] = (np.arange(0,Nx,1),np.arange(0,Ny,1),np.arange(0,Nz,1)) [I, J, K] = np.meshgrid(I, J, K) #Create the 1-d idexed array ix = np.ravel_multi_index((I,J,K),(Nx,Ny,Nz),order='F') print(ix)
class MockOpen(object): def __call__(self, *args, **kwargs): #print('mocked') return self.__open(TEST_FILE) #it would be better to return a file-like object instead def __enter__(self): global open self.__open = open open = self def __exit__(self, exception_type, exception_value, traceback): global open open = self.__open with MockOpen(): # here you run your test ...
In [3]: df['Occur'] = df.groupby('Col1')['Col2'].transform(pd.Series.value_counts) df Out[3]: Col1 Col2 Occur 0 test Something 2 1 test2 Something 2 2 test3 Something 1 3 test Something 2 4 test2 Something 2 5 test5 Something 1
related_model = model_obj.__class_.foom2m.field.rel.to
#!/usr/bin/python import sys import socket file_nm = sys.argv[1] with open(file_nm, 'r') as f: for host in f: print socket.gethostbyname(host.strip())
SELECT SUM(price * exchange_rate) AS total FROM sales LEFT JOIN ( SELECT 'USD' AS currency, 1.00000 AS exchange_rate UNION ALL SELECT 'EUR', 1.32875 UNION ALL SELECT 'GBP', 1.56718 -- ... ) AS exchange ON exchange.currency = sales.currency
import numpy as np arr = np.array([False, False, True], dtype=bool) arr.all() => False np.all(arr) => False
import sys import time for i in range(10): time.sleep(0.5) sys.stdout.write('*') sys.stdout.flush() # <-- this is the key sys.stdout.write('\n')
>>> s = 'badcfe' >>> ''.join([ s[x:x+2][::-1] for x in range(0, len(s), 2) ]) 'abcdef'
class TestMyClass(unittest.TestCase): def test_should_raise(self): x = myClass() def assign_bad_name(): x.name = "7" self.assertRaises(ValueError, assign_bad_name)
import operator lst = [ ('Lisa', 'F', 8976), ('Shelly', 'F', 8975), ('Tom', 'M', 1658), ('Anthony', 'M', 985), ('Ben', 'M', 698)] ] sorted(lst, key=operator.itemgetter(1, 2))
class myHandler(webapp2.RequestHandler): def get(self): # somehow get account uiod type = Account.check_user_role_by_uid(uid) if type == 'SkilledPerson': self.render('index_farm.html') elif type == 'FarmCompany': self.render('index_farmcompany.html')
request = requests.get(url) file = zipfile.ZipFile(BytesIO(request.content))
keys=sorted(g.keys()) size=len(keys) M = [ [0]*size for i in range(size) ] for a,b in [(keys.index(a), keys.index(b)) for a, row in g.items() for b in row]: M[a][b] = 2 if (a==b) else 1 M [2, 1, 1, 0, 0], [1, 0, 1, 0, 1], [1, 1, 0, 1, 0], [0, 0, 1, 0, 1], [0, 1, 0, 1, 0]]
import os with open(os.devnull, 'w') as null: subprocess.Popen(['7z', 'e', input_file, '-o', output_dest, '-y'], stdout=null, stderr=null)
subprocess.check_call(["ping", "google.com"], shell=True)
features = pipeline.named_steps['tfidf'].get_feature_names() print(features[pipeline.named_steps['l1'].coef_ != 0])
request.headers.getlist('accept')
[^,]+
*network NetworkX *vertices 4 1 "multi part" 0.0 0.0 ellipse 2 single 0.0 0.0 ellipse 3 12 0.0 0.0 ellipse 4 13 0.0 0.0 ellipse *arcs 1 3 1.0 2 3 1.0
brew install wget
unoconv -p p4ssw0rd -f csv protectedFile.xls
def parse(self, response): for href in response.xpath('//span[@class ="itemlistinginfo"]/a/@href'): full_url = urljoin(href.extract()) item = DmozItem() item['link'] = full_url yield item
from django import template from django.template.defaultfilters import stringfilter from django.utils.text import slugify register = template.Library() @register.filter @stringfilter def germanslugify(value): replacements = [(u'ä', u'ae')] for (s, r) in replacements: value = value.replace(s, r) return slugify(value)
<?PHP $output = []; exec("python myScript.py", $output); // the $output array now contains all lines printed by the python script ?> <p> The solution was <?PHP echo $output[0]; ?>. </p>
(lambda words, rules: sum([[word[:-len(rule)]] if word.endswith(rule) else [] for word in words for rule in rules], []))(str_test.split(), stem_rules)
class myRowObj(object): def __init__(self, mac, port, dpid): self.mac = mac self.port = port self.dpid = dpid myTable = list() for each in some_inputs: myTable.append(myRowObj(*each.split())
In [15]: s = 'some text with \tspaces between' In [16]: timeit re.sub(r'(\w)(\s+)(\w)', '\\1 \\3', s) 10000 loops, best of 3: 30.5 us per loop In [17]: timeit re.sub(r'(\w)(\s+?)(\w)', '\\1 \\3', s) 10000 loops, best of 3: 24.9 us per loop
class MyNum(object): def __init__(self, val): super(MyNum,self).__init__() self.val = val def __add__(self, num): return self.__class__.(self.val + num) def __str__(self): return self.__class__.__name__ + '(' + str(self.val) + ')' print(MyNum(3) + 2) # -> MyNum(5)
>>> from collections import defaultdict >>> d = defaultdict(str) >>> for i, j in zip(X, Y): ... d[i] += j ... >>> print d defaultdict(<type 'str'>, {'1': 'mGw', '0': 'azh22'}) >>> print d.items() [('1', 'mGw'), ('0', 'azh22')] >>> X = d.keys() >>> Y = d.values() >>> print X ['1', '0'] >>> print Y ['mGw', 'azh22']
def key_check(self, key): # "x" is a meaningless name; use something meaningful lookup = { 'grade': self.grade } func = lookup[key] # Look up the correct method return func() # Call that method and return its result
from itertools import groupby from operator import itemgetter data = [1,1,1,1,0,0,0,0,0,1,1,1,0,0] blocks = [map(itemgetter(0), itemgetter(0, -1)(list(g))) + [k] for k, g in groupby(enumerate(data), itemgetter(1))] # [[0, 3, 1], [4, 8, 0], [9, 11, 1], [12, 13, 0]]
fields = ["reference_link", "rss_link"] # define fields to use with open(filename,'a+') as f: # handle the source file f.write("{}\n".format('\t'.join(str(field) for field in fields))) # write header for item in items: f.write("{}\n".format('\t'.join(str(item[field]) for field in fields))) # write items
getattr(rpc, function_name)(*params)
{% for field in form.visible_fields %}{# loop over form fields #} {% if field.name == "choice_field_name" %} {% for choice in field.queryset %} {# loop over choices #} {# here you access to choice object #} {% endfor %} {% endif %} {% endfor %}
import pandas as pd import numpy as np df = pd.DataFrame(np.random.randn(50, 4), columns=list('ABCD')) for row in df.itertuples(): df.set_value(row.Index,'test',row.D) print df.head() print df.head()
>>> xs = np.array([45982, 124, 12, 1092, 45982, 1, 985, 299, 10092]) >>> ys = np.array([1, 12, 299]) >>> np.in1d(xs, ys) array([False, False, True, False, False, True, False, True, False], dtype=bool)
import sys sys.stdin = open('input.txt', 'r')
liste = [] for i in range(34): liste.append(self.ui.tableWidget.item(self.ui.tableWidget.currentRow(), i).text()) print(liste)
combined_list = zip(somelist, otherlist) ... {% for item in combined_list %} {{ item.0 }} {{ item.1 }} {% endfor %}
import numpy as np # .... a = [[1,2,3],[4,5,6],[7,8,9]] a = np.array(a).astype(np.float32) padding = 2 noDataValue = -999.0 pixels = np.pad(a, (padding,padding), mode='constant', constant_values=(noDataValue))
>>> df.groupby(['Type', 'Major'], as_index=False).GPA.count().sort_values(['Major', 'GPA']) Type Major GPA 0 F A 2 2 T B 2 1 F C 1 3 T C 1
pip works with CPython versions 2.6, 2.7, 3.1, 3.2, 3.3 and also pypy. pip works on Unix/Linux, OS X, and Windows. Note: Python 2.5 was supported through v1.3.1, and Python 2.4 was supported through v1.1.
@app.after_request def add_header(response): """ Add headers to both force latest IE rendering engine or Chrome Frame, and also to cache the rendered page for 10 minutes. """ response.headers['X-UA-Compatible'] = 'IE=Edge,chrome=1' response.headers['Cache-Control'] = 'public, max-age=0' return response
sorted(A, key=A.get)
>>> s = "<-20 "+u"\u00B0" >>> s u'<-20 \xb0' >>> type(s) <type 'unicode'> >>> repr(s) "u'<-20 \\xb0'" >>> print s <-20 ° >>> s == u"<-20 °" True >>> s == u'<-20 \xb0' True >>> s.encode('utf-8') '<-20 \xc2\xb0' s.encode('latin1') '<-20 \xb0'
pageButton.clicked.connect(wizard.button(QWizard.NextButton).click)
>>> dir(A.B.C) ['__doc__', '__module__', 'method']
media = MediaFileUpload('image.png', mimetype='image/png', chunksize=1000, resumable=True) request = drive.files().update(id='fileId', media_body=media) response = None while response is None: status, response = request.next_chunk() if status: print status.progress()
>>> a * b[c,1,:] + b[c,0,:] array([[ 0, 6, 14, 24], [ 16, 26, 38, 52], [104, 126, 150, 176], [152, 178, 206, 236], [336, 374, 414, 456]])
DELETE FROM <the_worker_table_name> WHERE id=<the_worker_object_id>
with open('dictionary.txt', 'r') as f: dictionary_words = f.read().splitlines()
fig = plt.figure(figsize=(20, 2)) ax = fig.add_subplot(111) ax.plot(x, y)
B_inv = scipy.linalg.inv(B) C = (A.transpose().dot(B_inv.transpose())).transpose()
class Classes(models.Model): classcode = models.CharField(max_length=15) classname = models.TextField() students = models.ManyToManyField(User) def __str__(self): return "{0}: {1}".format(self.classcode, self.classname)
NO_KEY = object() def f(ch): chap = { 1: 'foo', } return chap.get(ch, NO_KEY) chapter = f(1) print(chapter if chapter is not NO_KEY else 'There was no chapter')
def fun_name(): i = 0 numbers = [] while i < 6: print "At the top of i is %d" % i numbers.append(i) i = i + 1 print "Numbers now: ", numbers print "At the bottom i is %d" % i print "The numbers: " for num in numbers: print num
for k in d: print('The key is {} and the value is {}'.format(k, d[k]))
int **zip(int *arr1, int *arr2, int length) { int **ret = new int*[length]; for(int i = 0; i<length; i++) { ret[i] = new int[2]; ret[i][0] = arr1[i]; ret[i][1] = arr2[i]; } return ret; }
In [202]: df['sum_num'] = df.sum(axis=1) In [203]: df Out[203]: num1 num2 num3 sum_num 0 1 NaN 1 2 1 NaN 1 1 2 2 1 1 1 3
class DateTimeFieldTz(models.DateTimeField): def from_db_value(self, value, expression, connection, context): if value is None: return None else: return django.utils.timezone.localtime(value)
f = open (locfile, "rb")
>>> str = u"Ñandu" >>> str[0] == u"\xd1" True >>> if str[0] == u"\xd1": print "Begins with \xd1!" Begins with Ñ!
>>> x = [1, 2, 3] >>> y = [1, 2, 3] >>> x == y True >>> x is y False
>>> dict((x[0], (x[1], x[2])) for x in names[1:]) {'A104': ('Ann', 'Lee'), 'A102': ('Jane', 'Smith'), 'A103': ('Mark', 'Twain'), 'A101': ('Mark', 'Smith')} >>> dict((x[2], (x[0], x[1])) for x in names[1:]) {'Twain': ('A103', 'Mark'), 'Smith': ('A102', 'Jane'), 'Lee': ('A104', 'Ann')}
C:\Python27\;C:\Python27\Scripts;
import numpy surf_array = pygame.surfarray.pixels3d(surface) window_array = numpy.zeros(surf_array.shape[:2], dtype=numpy.int8) ... surf_array[numpy.nonzero(window_array == 1)] = np.array([0, 0, 0]) surf_array[numpy.nonzero(window_array == 2)] = np.array([50, 50, 50])
matching_objects = News.objects.filter(title="SomeText") # this means the query returned at least one result self.assertNotEqual(matching_objects.count(), 0)
>>> dc = ["hello", "world", "foo"] >>> lines = ["This is", "an example of hello", "line in the world of strings", "Testing"] >>> [word for word in dc if any(word in line for line in lines)] ['hello', 'world']
if abc == 'abc': subprocess.check_output('bash file.sh', shell=True)
for x, left in enumerate(all): for y, right in enumerate(all): common = len(set(left) & set(right)) print "item%s has %s values in common with item%s"%(x, common, y)
import itertools def hash_on_each_end_permutations(array): array = list(array) array.remove('#') array.remove('#') for subpermutation in itertools.permutations(array): yield '#' + ''.join(subpermutation) + '#'
import filters filter_list = [(2, filters.filterA), (1, filters.filterB)] data_list = ['A', 'B' , 'C' , 'D'] def nFilter(filters, my_list): for _, f in sorted(filters): my_list = ifilter(f, my_list) return my_list # or list(my_list) if you actually want a list
import numpy as np import matplotlib.pyplot as plt fig, (ax1, ax2) = plt.subplots(1, 2) ax1.plot(np.arange(10)) ax1.set_aspect("equal") ax2.plot(np.arange(10), np.arange(0, 1, .1)) # Determining the ranges x1,x2 = ax2.get_xlim() y1,y2 = ax2.get_ylim() xRange = x2-x1 yRange = y2-y1 ax2.set_aspect(xRange/yRange) plt.show()
>>> x = [1.,2.,3.,4.] >>> [ ((e-f)/f) for e,f in zip ( x[:-1], x[1:]) ] [-0.5, -0.3333333333333333, -0.25]
import random RANDOMID = random.randit(0, 1<<32)
def writetocsv(l): #convert the set to the list b = list(l) #print b #checking print b, it prints all values of b with open("eggs.csv",'wb') as f: w = csv.writer(f) for value in b: w.writerow(value)
Popen(["C:\Users\Johannes\Documents\A Customized JonDoFox Portable Profiles - Beta 2\JonDoFoxPortable" + variable + "\JonDoFoxPortable.exe", "https://www.amazon.com/gp/sign-in.html"], ) Popen(["C:\Users\Johannes\Documents\A Customized JonDoFox Portable Profiles - Beta 2\JonDoFoxPortable%a\JonDoFoxPortable.exe"%variable, "https://www.amazon.com/gp/sign-in.html"], )
writer.writerow(("%.6f" % obj["time"], ))
import matplotlib.pyplot as plt import matplotlib.patches as patches fig1 = plt.figure() ax1 = fig1.add_subplot(111, aspect='equal') ax1.add_patch( patches.Rectangle( (0.1, 0.1), # (x,y) 0.5, # width 0.5, # height ) ) fig1.savefig('rect1.png', dpi=90, bbox_inches='tight')
a = array([[5.97561615e-06, 0.055617379], 0.119262253938, [], 0.21321, []], dtype=object) In [110]: a.nonzero() Out[110]: (array([0, 1, 3]),) non_empty= set(a.nonzero()[0]) complete_index = set(range(len(a))) empty = list(complete - non_empty) a[empty]= 0 In [130]: a Out[130]: array([[5.97561615e-06, 0.055617379], 0.119262253938, 0, 0.21321, 0], dtype=object)
"jimbo".contains("jim"); // true
def traverse(o, tree_types=(list, tuple)): if isinstance(o, tree_types): if len(o) == 0: yield '' for value in o: for subvalue in traverse(value): yield subvalue else: yield o
print("Kilograms Pounds") for i in range(1,199+1,2): kg = i * 202 print('{:<3} {:>15.1f}'.format(i, kg))
>>> mylist = [{'id':1,'value':4},{'id':1,'value':6},{'id':2,'value':6},{'id':3,'value':9},{'id':3,'value':56},{'id':3,'v alue':67},] >>> import itertools >>> [{'id': key, 'value': [x['value'] for x in grp]} ... for key, grp in itertools.groupby(mylist, key=lambda d: d['id'])] [{'id': 1, 'value': [4, 6]}, {'id': 2, 'value': [6]}, {'id': 3, 'value': [9, 56, 67]}]
set(amino).isdisjoint(set(sequence)) # True if the sets have nothing in common set(amino).intersection(set(sequence)) # a set of common elements
import requests url = 'https://api.github.com/users/braitsch' headers = {'Accept': 'application/json'} auth = ('username', 'userpass') response = requests.get(url, headers=headers, auth=auth) with open('outputfile.json', 'w') as outf: outf.write(response.content)
from constants import *
class MyThing( object ): def __init__( self, theInstance ): self.ec2_instance = theInstance
from email.utils import make_msgid msg['Message-ID'] = make_msgid()
cdef class pyScene: cdef Scene * m_scene cdef object drill_button_func def setDrillButtonCallback(self, func): self.m_scene.setDrillButtonCallback(pyHDButtonCallback, <void*>func) self.drill_button_func = func
Examples -------- Create a graph object that tracks the order nodes are added. >>> from collections import OrderedDict >>> class OrderedNodeGraph(nx.Graph): ... node_dict_factory=OrderedDict >>> G=OrderedNodeGraph() >>> G.add_nodes_from( (2,1) ) >>> G.nodes() [2, 1] >>> G.add_edges_from( ((2,2), (2,1), (1,1)) ) >>> G.edges() [(2, 1), (2, 2), (1, 1)]
SUBDOMAIN_RE = '^([^.]+)\.app-id\.appspot\.com$' app = WSGIApplication([ DomainRoute(SUBDOMAIN_RE, [ Route('/foo', 'FooHandler', 'subdomain-thing'), ]), Route('/bar', 'BarHandler', 'normal-thing'), ])
class FooMeta(type): def __new__(cls, name, bases, attrs): # do something with the kwargs... # for example: if 'foo' in attrs: attrs['fooattr'] = 'foovalue' return super(FooMeta, cls).__new__(cls, name, bases, attrs) class FooBase(object): pass class FooClass(with_metaclass(FooMeta, FooBase)): foo = "Yes" >>> FooClass.fooattr 'foovalue'
X = 42 # Create new object 42, bind name X to it. L = [] L.append(X) # Bind L[0] to the 42 object. X = 666 # Create new object 666, bind name X to it. print(L) # Will not see the 666.
class B: """docs for B with reference to :class:`.A`""" pass
def enumerate_month_dates(start_date, end_date): current = start_date while current <= end_date: if current.month >= 12: next = datetime.date(current.year + 1, 1, 1) else: next = datetime.date(current.year, current.month + 1, 1) last = min(next - datetime.timedelta(1), end_date) yield current, last current = next
from django.conf import settings settings.DEBUG = True # Don't do this!
#!/usr/bin/env python # test.py class Master(object): mydata = [] def __init__(self): s1 = Sub1() s2 = Sub2() class Sub1(Master): def __init__(self): super(Sub1, self).mydata.append(1) class Sub2(Master): def __init__(self): super(Sub2, self).mydata.append(2) if __name__ == "__main__": m = Master() print m.mydata
"fdfdfd.dfdfd.dfdfdf.dfdfdf".rfind('.')
[{"pk": 1, "model": "app_name.model", "fields": {"field1": "value1", "field2": "value2", }}, {"pk": 2, "model": "app_name.model", "fields": {"fiel1": "value2", "field2": "value2", }}]
command = input("Type a command") if command in ["1","D","dog"]: do_something() else: do_something_else()
from math import sqrt from trueskill import BETA from trueskill.backends import cdf def win_probability(player_rating, opponent_rating): delta_mu = player_rating.mu - opponent_rating.mu denom = sqrt(2 * (BETA * BETA) + pow(player_rating.sigma, 2) + pow(opponent_rating.sigma, 2)) return cdf(delta_mu / denom)
name = request.forms.get('name') data = request.files.get('data') raw = "" if name and data.file: while True: datachunk = data.file.read(1024) if not datachunk: break raw = raw + datachunk filename = data.filename return "Hello %s! You uploaded %s (%d bytes)." % (name, filename, len(raw))
import ntplib from time import ctime c = ntplib.NTPClient() response = c.request('europe.pool.ntp.org', version=3) ctime(response.tx_time)
print DIV('bar', Class="title") ==> <DIV class="title">bar</DIV>
import getpass pswd = getpass.getpass('Password:')
if all(b==5 for b in base): do_something()
class node(object): def __init__(self, value, children = None): self.value = value self.children = children or [] self.parent = None for child in self.children: child.parent = self
>>> df = pd.DataFrame({"A": [1,2,np.nan]}, index=[10,20,np.nan]) >>> df A 10 1 20 2 NaN NaN >>> df.query("index == index or index != index") A 10 1 20 2 NaN NaN
var_list = ['default'] print var_list[-1] # 'default' var_list.append('new var') print var_list[-1] # 'new var'
class UserProfileConfig(forms.Form): def __init__(self,request,*args,**kwargs): super (UserProfileConfig,self).__init__(*args,**kwargs) self.fields['username'] = forms.CharField(label='Username',max_length=100,initial=request.session['some_var'])
CALL object%ParentType%Binding(...)
plt.savefig("g3.19e10.01024.jpg") plt.savefig("g3.19e10.01024.png")
import csv lstName = ['a', 'b', 'c', 'd', 'e', 'etc'] with open('file.csv', 'r+') as f: reader = csv.reader(f, delimiter='\t') out_lines = [row + [lstName[i]] for i, row in enumerate(reader)] f.seek(0) # set file position to the beginning of the file csv.writer(f, delimiter='\t').writerows(out_lines)
self.img = [gtk.Image() for _ in xrange(20)]
import numpy as np impoty scipy.optimize as opt def objective(pars): a, b, c = pars return np.sum((y-(a*np.exp(-b*x)+c))**2) opt.minimize(objective, x0=np.array([12000, 0.3, 2000]))
>>> b = QtCore.QByteArray.fromPercentEncoding('abc%20.def%C3%A4.ghi') >>> b.data() 'abc .def\xc3\xa4.ghi' >>> s = b.data().decode('utf8') >>> print s abc .defä.ghi
class BoringForm(Form): until = DateTimeField( "Until", format="%Y-%m-%dT%H:%M:%S", default=datetime.today, ## Now it will call it everytime. validators=[validators.DataRequired()] )
>>> original_text = "Go USA\n Hail UK\n" >>> acronyms = {"USA": "America", "UK": "Britannia"} for acronym in acronyms: ... original_text = acronyms[acronym].join(original_text.split(acronym)) ... >>> original_text ... 'Go America\n Hail Britannia\n'
>>> f = open('test.txt', 'r') >>> f.read() 'Initial contents\n' >>> f.close() >>> f = open('test.txt', 'wua') >>> print >> f, 'writing' >>> f.close() >>> f = open('test.txt', 'r') >>> f.read() 'writing\n' >>> f.close() >>> f = open('test.txt', 'auw') >>> print >> f, 'appending' >>> f.close() >>> f = open('test.txt', 'r') >>> f.read() 'writing\nappending\n' >>> f.close()
virtualenv -p python3.5 env source env/bin/activate pip install flask
return np.fabs((XX - X ** 2 / count) / d)
import os string = input("Please type the input ") directory = "c://files//python" for file in os.listdir(directory): if file.endswith(".txt"): filecontent = open(file, "r") if string in filecontent.read(): print("The file that matches the input was found at" + file)
#blog/templates/blog/entry_detail.html {% extends "base.html" %} {% load django_markdown %} {% block content %} <div class="post"> <h2><a href="{% url "entry_detail" slug=object.slug %}">{{ object.title }}</a></h2> <p class="meta"> {{ object.creation_date }} | Tagged under {{ object.tags.all|join:", " }} </p> {{ object.body|markdown }} </div> {% endblock content %}
pip install scrapy==0.18.4
from flask.views import MethodViewType class CombinedType(ResourceRegistry, MethodViewType): pass class BaseRegistered(object): __metaclass__ = Combinedtype
x,y=editor.control.GetScreenPosition()
def delete_file(request_id, response, exception): if exception is not None: # Do something with the exception pass else: # Do something with the response pass batch = service.new_batch_http_request(callback=delete_file) for file in children["items"]: batch.add(service.files().delete(fileId=file["id"])) batch.execute(http=http)
print (" please enter all the numbers you want to calculate the avarage. After you enter all of them press 'f' to finish.") s = i = 0 #declare counter: i = 0 x = raw_input ('please enter the number') while (x != 'f'): x = eval (x) s = s + x i+=1 #increment counter: i=i+1 or i+=1 (these 2 options are equivalent) x = raw_input ('please enter the number') print (' the average is'), s/i #divide the sum by counter
image = Image.new("RGBA", (600,150), (255,255,255)) draw = ImageDraw.Draw(image) font = ImageFont.truetype("resources/HelveticaNeueLight.ttf", fontsize) draw.text((10, 0), txt, (0,0,0), font=font) img_resized = image.resize((188,45), Image.ANTIALIAS)
pattern = "%.4f" floats = [pattern % i for i in floats]
import csv import time from datetime import date year = str(date.today().year) filename = r'output\Year\{}.csv'.format(year) reader = csv.reader(open(r"input.csv"),delimiter=',') filtered = filter(lambda p: year == p[7], reader) csv.writer(open(filename, 'w', newline=''), delimiter=',').writerows(filtered) time.sleep(0.1)
>>> user_columns = User.__table__.columns >>> sess.query(*user_columns).all() # unpack user_columns into arguments [(1, u'One', u'one@example.com', u'An address'), (2, u'Two', u'two@example.com', u'An address'), (3, u'Three', u'three@example.com', u'An address')]
file = open('P:\test.csv', 'w') fields = ('ItemID', 'Factor', 'FixedAmount') wr = csv.DictWriter(file, fieldnames=fields, lineterminator = '\n') wr.writeheader() wr.writerow({'ItemID':1, 'Factor': 2, 'FixedAmount':3}) file.close()
>>> d = {} >>> for i in allData: if i[0] in d: d[i[0]][-1] = list(set(d[i[0]][-1] + (i[-1].split(',')))) else: d[i[0]] = [i[1],i[2].split(',')] >>> d {'jill': ['27', ['veggie supreme', ' cheese']], 'joe': ['32', ['pepperoni', 'cheese', 'pepperoni', 'veggie supreme']], 'marc': ['24', ['cheese', 'cheese', 'chicken supreme']]}
$ python -m timeit -s "import struct; network_stream = struct.pack('>I', 0x12345678)" "(converted_int,) = struct.unpack_from('>I', network_stream, 0)" 1000000 loops, best of 3: 0.277 usec per loop $ python -m timeit -s "import struct; from struct import unpack_from; network_stream = struct.pack('>I', 0x12345678)" "(converted_int,) = unpack_from('>I', network_stream, 0)" 1000000 loops, best of 3: 0.258 usec per loop
import unicodedata a = u"STRING GOES HERE" # using an actual string would break stackoverflow's code formatting. u"".join( x for x in a if not unicodedata.category(x).startswith("M") )
# add to your Client model def get_fields(self): fields_display = [] for f in Client._meta.fields: name = f.name if len(f.choices) == 0: fields_display.append([name, f.value_to_string(self)]) else: fields_display.append([name, getattr(self,"get_%s_display" % name)()]) return fields_display
from random import randint mcworks = [] for n in xrange(NUM_ITERATIONS): mctest = [randint(0, 100) for i in xrange(5)] if sum(mctest[:3])/3 == mcavg[2]: mcworks.append(mctest) # mcavg is real data
# transactional session Session = sessionmaker(transactional=True) sess = Session()
subprocess.Popen(full_command, close_fds=True)
df.groupby("c")["b"].nunique()
template<class T> struct foo {}; template<class T> void export_foo(std::string name) { boost::python::class_<foo<T>>(name.c_str()); } BOOST_PYTHON_MODULE(foo) { export_foo<int>("foo_int"); export_foo<std::string>("foo_string"); //... }
-- object_id - tablename -- name - column name select case when is_computed=0 then 'Not Computed' else 'Computed'end [Is Computed] from sys.columns where object_id=object_id('dbo.x1') and name ='i1'
>>> import redis >>> r = redis.Redis() >>> for x in r.scan_iter('dummy*'): ... print(x) ... b'dummy3' b'dummy2' b'dummy1'
In [18]: [x for x in range(5)] Out[18]: [0, 1, 2, 3, 4] In [19]: x Out[19]: 4
f = urlopen ('http://ichart.finance.yahoo.com/table.csv?s=AAPL&d=4&e=29&f=2014&g=d&a=8&b=22&c=1981&ignore=.csv') with open('output.csv', 'w') as out: # print header first out.write(f.readline()) # then print reversed lines for line in reversed(f.readlines()): out.write(line) f.close() # !!!
:noremap <expr> <C-f> empty(bufname('')) ? ':edit ' : ':tabnew '
sudo chown odoo: conf
import os if not os.path.exists('abc.db'): conn = sqlite3.connect('abc.db')
source_list = new QListWidget(); dest_list = new QListWidget(); new QListWidgetItem(tr("Oak"), source_list); new QListWidgetItem(tr("Birch"), source_list); connect(source_list, SIGNAL(clicked(QModelIndex)), this, SLOT(swapEntry(QModelIndex))); void MyWidget::swapEntry(QModelIndex index) { dest_list->insertItem(dest_list->count(), source_list->takeItem(index.row())); }
class MyModelAdmin(admin.ModelAdmin): def save_model(self, request, obj, form, change): # custom stuff here obj.save()
>>> print "to:", new or "EMPTY" , "from:" , old or "EMPTY" to: [1, 2, 3] from: [0, 1, 2, 3, 4, 5] >>> new = [] >>> print "to:", new or "EMPTY" , "from:" , old or "EMPTY" to: EMPTY from: [0, 1, 2, 3, 4, 5]
bucket.put('path/to/your/pdf/object/on/s3', pdf_object_bytes, headers={'Content-Disposition': 'attachment;filename=test.pdf'})
@register.filter def isotime(datestring): datestring = str(datestring) return datestring.replace("T"," ")
res = [z for z in ((x, y[i]) for i in I)]
from itertools import groupby, accumulate from collections import defaultdict def sub_seq(li, n): d = defaultdict(list) rle = [(k, len(list(g))) for k, g in groupby(li)] endpoints = accumulate(size for k, size in rle) for end_index, (value, count) in zip(endpoints, rle): for index in range(end_index - count, end_index - n + 1): d[value].append(index) return dict(d)
"{{'key_1': '{value}'}}".format(**{'value': 'test'})
db = MySQLdb.connect(host="xxx.xx.xx.x", user="xxx", passwd="xxx", db="xxxx") cursor = db.cursor() cursor.executemany('Insert Query',json_data) db.commit() cursor.close() db.close()
with open('yourfile.pdf', 'w') as f: f.write(xdata)
lst = [1,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,1,0,1,3,0,3,0,3,1] if lst[4] == 3: print('yes')
x = 10 lst = [] #Note: do not use list as a variable name, it shadows the built-in while x != 0: lst.append(raw_input('Enter a word: ')) x-=1
from scipy.integrate import simps from numpy import seterr, pi, sqrt, linspace, tan, cos, exp N = 100 a = 2. t = linspace(0, pi / 2, N) x = tan(t) f = cos(a * x) * exp(-x ** 2) * (1 + x ** 2) print "numerical solution = ", 2 * simps(f, t) print "analytical solution = ",sqrt(pi) * exp(-a ** 2 / 4)
>>> from operator import itemgetter >>> from itertools import groupby >>> data=[["apple",2],["cake",5],["cake",8],["chocolate",3],["chocolate",9],["chocolate",10],["grapes",6]] >>> [list(g) for _,g in groupby(sorted(data,key=itemgetter(0)),itemgetter(0))] [[['apple', 2]], [['cake', 5], ['cake', 8]], [['chocolate', 3], ['chocolate', 9], ['chocolate', 10]], [['grapes', 6]]] >>>
$ ulimit -n 1200 $ python sockets .... Creating socket 1197 Creating socket 1198 Traceback (most recent call last): File "sockets", line 7, in <module> File "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/socket.py", line 182, in __init__ socket.error: [Errno 24] Too many open files
getattr(client.service, 'getWeatherInfo')()
MyModel.objects.filter(**your_filters).extra(select={ 'measure_name': 'SELECT measure.name FROM measure WHERE mymodeltable.measure_id = measure.id' })
cr.save() # push a new context onto the stack cr.scale(0.5, 0.5) # scale the context by (x, y) cr.set_source_surface(imagesurface, margin, margin) cr.paint() cr.restore() # pop the context
import re re.sub(r'\d', '', s) # or re.sub(r',\d', '', s) to remove the commas, too
seen = set() item_list = [seen.add(item) or item for item in item_list if item not in seen]
str = "What $noun$ is $verb$?" print str.replace("$noun$", "the heck")
import numpy as np from scipy.stats import pareto b = 0.9 np.random.seed(seed=233423) print pareto.rvs(b, loc=0, scale=1, size=5) np.random.seed(seed=233423) print pareto.rvs(b, loc=0, scale=1, size=5)
from pyramid.view import view_config @view_config(route_name='some_api_name', request_method='POST', accept='application/json') def handle_someapi_json(request): # return JSON @view_config(route_name='some_api_name', request_method='POST', accept='text/html') def handle_someapi_html(request): # return HTML
if sys.stdin is not sys.__stdin__: return fallback_getpass(prompt, stream)
# patch_twitter.py import twitter TwitterStatus = twitter.Status class Status(TwitterStatus): def __init__(self, *args, **kwargs): TwitterStatus.__init__(self, *args, **kwargs) self.args = args self.time = parseTime(self.created_at) self.phrase = ... def prettyprint(self): # something twitter.Status = Status # use api
def save(self, force_insert=False, force_update=False, *args, **kwargs): if self.id: # updated else: # inserted models.Model.save(self, *args, **kwargs)
In [26]: pd.DataFrame({'D':l}).merge(df, how='left') Out[26]: D A B C 0 4 a b 1 1 2 a b 1 2 6 c d 3 3 4 a b 1
def reload_start(self): self.enable() self.conn.set_prompt(r'Save\? \[yes/no\]\:') self.conn.execute('reload') self.conn.set_prompt(r'Proceed with reload\? \[confirm\]') self.conn.execute('no') self.conn.set_prompt() self.conn.execute('confirm') print self.conn.response
def controlTextDidChange_(self, notification): NSLog("textdidchange")
class MyImgPattern(Pattern): def handleMatch(self, m): a = etree.Element('a', attrib={'href':m.group(3)}) img = etree.Element('img', attrib={ 'width': '100%', 'src': m.group(3), 'alt': m.group(2), 'title': m.group(4) }) a.append(img) return a
terms = re.split(r"[+\-/*^()]+", cleanFunc)
m = os.stat('fooBar.txt').st_mode otherExec = bool(m & 0001) otherWrite = bool(m & 0002) otherRead = bool(m & 0004) groupExec = bool(m & 0010) groupWrite = bool(m & 0020) groupRead = bool(m & 0040) ...
match = re.search(r'(\w+)\s(?:D\.C\.), (\w\w)\W', location).groups()
while True: s = input('Enter something : ') if s == 'quit': # Do this check first break elif len(s) > 3: # Then see if the input is too long print('too big') continue print('something')
sed -i "/^class myClass2:/,/^class/s/f1 = '512kB'/f1 = '1MB'/" path/to/file.py
import dask.bag as bag import json b = bag.from_filenames('input.json.gz').map(json.loads).map(manipulate).concat() b.map(lambda t: ','.join(map(str, t)).to_textfiles('out.*.csv').compute()
event_audit=gdata.calendar.AttendeeStatus("http://schemas.google.com/g/2005#event.invited") event.who.append(gdata.calendar.Who(email="xyz@pqr.com",rel="http://schemas.google.com/g/2005#event.invited"))
self.assertEqual("An alert",selenium.get_alert());
shell = subprocess.Popen("/bin/bash -i".split(), stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
import commands for x in xrange(100): commands.getstatusoutput("/home/Example.R")
WORDLIST = "words.txt" def loadWords(): with open(WORDLIST, 'r') as inFile: wordTuple = tuple(word.lower() for word in inFile.read().split()) return wordTuple MYWORDS = loadWords()
chart = pygal.StackedLine(width=1000, height=800)
import urllib2 opener = urllib2.build_opener() opener.addheaders = [('User-agent', 'Mozilla/5.0')] opener.open('http://www.example.com/')
workers = [] for wid in range(nworkers): w = Thread(target = dowork, args = ...) w.start() workers.append(w) # join all of the workers for w in workers: w.join() print "All done!"
v = 8.836333333333339 s = str(v) print s[:s.find('.')+3] # prints 8.83
fd = open (data_file, 'w', 100 * size_of_line)
>>> import numpy as np >>> A = np.array([[1,2,3,4],[4,5,6,7],[7,8,9,10]]) >>> B = A[:2] >>> C = A[2:] >>> B array([[1, 2, 3, 4], [4, 5, 6, 7]]) >>> C array([[ 7, 8, 9, 10]])
>>> import HTMLParser >>> h = HTMLParser.HTMLParser() >>> print h.unescape('&pound;682m') £682m EDIT for Python 3: the HTMLParser module has been renamed to html.parser. >>> import html.parser >>> h = html.parser.HTMLParser() >>> print(h.unescape('&pound;682m')) £682m
#!/usr/bin/python import os.path def lvl_down(path): return os.path.split(path)[0] def lvl_up(path, up_dir): return os.path.join(path, updir) print(lvl_down('a/b/c')) # prints a/b print(lvl_up('a/b/c','d')) # prints a/b/c/d
sum(val for row in matrix for val in row)
import requests payload = 'v=1&t=event&tid=UA-XXXXXY&cid=555&ec=video&ea=play&el=holiday&ev=300' r = requests.post('http://www.google-analytics.com/collect', data=payload)
pure_rating = int(rating_as_num) decimal_part = rating_as_num - pure_rating final_score = "+" * pure_rating if decimal_part >= 0.75: final_score += "+" elif decimal_part >= 0.25: final_score += "-"
$HADOOP_HOME/bin/hadoop jar $HADOOP_HOME/contrib/streaming/hadoop-0.17.0-streaming.jar -mapper mapper.py -reducer reducer.py -input input/foo -output output -file /tmp/foo.py -file /tmp/lib.zip
from scrapyd_api import ScrapydAPI scrapyd = ScrapydAPI('http://localhost:6800') scrapyd.schedule('project_name', 'spider_name')
m = [] for i,(k, v) in enumerate(n): n[i] = (str(k)+'B', str(v) + 'B') m.append(n[i])
from collections import defaultdict from itertools import izip add = lambda (sum_, count), value: (sum_+value, count+1) unique = defaultdict(lambda:(0,0)) for ref, value in izip(reference_array.flat, given_array.flat): unique[ref] = add(unique[ref], float(value)) with open('file.out', 'w') as out: for ref, (sum_, count) in unique.iteritems(): out.write('%f,%f\n' % (ref, sum_ / count))
x=np.array([3,4,5]) y=np.array([2,50,-1]) z=np.array([30,0,3]) mya = [x,y,z] maximum = np.amax(mya, axis=0) # maximum will store a list as [maximumofx, maximumofy, maximumofz] -> [30,50,5]
>>> int('1001', 2) 9
try: from local_settings import * except ImportError: # if you require a local_settings to be present, # you could let this exception rise, or raise a # more specific exception here pass
a_objs = A.objects.filter(connect__b=b_model)
class NoFollowSpider(CrawlSpider): def __init__(self, crawl_pages=False, moreparams=None, *args, **kwargs): super(NoFollowSpider, self).__init__(*args, **kwargs) # Set the class member from here if (crawl_pages is True): NoFollowSpider.rules = ( Rule (SgmlLinkExtractor(allow=("", ),), callback="parse_items", follow= True),) # Then recompile the Rules super(NoFollowSpider, self)._compile_rules() # Keep going as before self.moreparams = moreparams
from random import sample sample(range(0, 100), 10)
font = cv.InitFont(cv.CV_FONT_HERSHEY_SIMPLEX, 1, 1, 0, 3, 8) #Creates a font x = 10 #position of text y = 20 #position of text cv.PutText(image,"Hello World!!!", (x,y),font, 255) #Draw the text
>>> class MyDefaultDict(dict): ... def __missing__(self, key): ... self[key] = key ... return key ... >>> d = MyDefaultDict() >>> d['joe'] 'joe' >>> d {'joe': 'joe'}
# env.py _src = '' _html = '' def set_path_srcfile(path_srcfile): global _src _src = path_srcfile def get_path_srcfile(): return _src ...
In [11]: t.sum() Out[11]: mean value1 17.5 dtype: float64 In [12]: t / t.sum() Out[12]: mean value1 gov a 0.428571 b 0.571429 In [13]: (t / t.sum()) * 100 Out[13]: mean value1 gov a 42.857143 b 57.142857
import urllib2 import json import time while True: citibikenycJson = json.loads(urllib2.urlopen('http://www.citibikenyc.com/stations/json').read()) # do something with the JSON time.sleep(5)
<%def name="if_statement(x)">if (${x})</%def> <%def name="sample_condition()">3 == 3</%def> ${if_statement(capture(sample_condition))}
client = zeep.Client( wsdl='http://www.webservicex.net/ConvertSpeed.asmx?WSDL') doc = client.get_port().binding.create_message( 'ConvertSpeed', 100, 'kilometersPerhour', 'milesPerhour') print(etree.tostring(doc, pretty_print=True))
def OnPress(self, sender): self.panel.remove(self.curPage) self.panel.add(self.spinner, DockPanel.CENTER) self.curPage=self.spinner Timer(5000, self.OnTimer) return CalculatePercentage() def OnTimer(self, target): self.panel.remove(self.curPage) self.panel.add(self.recommendation, DockPanel.CENTER) self.curPage=self.recommendation
class MyModelAdmin(admin.ModelAdmin): list_display = ['field_1', 'field_2', ...] admin.site.register(MyModel, MyModelAdmin)
while guessesMade < 6: guess = int(input('Take a guess')) if guess < number: print('Your guess is too low.') guessesMade += 1 elif guess > number: print('Your guess is too high.') guessesMade += 1 else: break
def draw(event): global history, canvas #when a tile gets painted on X=event.pos[0] Y=event.pos[1] history.append(X,Y,canvas[X][Y]) canvas[X][Y] = current_color def undo(): global history, canvas X = history[len(history)-1][0] Y = history[len(history)-1][1] color = history[len(history)-1][2] canvas[X][Y] = color history.pop(len(history)-1)
import subprocess, time s = subprocess.Popen(['foo', 'args']) timeout = 1 poll_period = 0.1 s.poll() while s.returncode is None and timeout > 0: time.sleep(poll_period) timeout -= poll_period s.poll() if timeout <= 0: s.kill() # timed out else: pass # completed
class Location(models.Model): location_name = models.CharField() def __unicode__(self): #or __str__ for python 3.x return u'%s' % self.location_name #Or whatever field class Person(models.Model): location = models.ForeignKey(Location) name = models.CharField() def __unicode__(self): #or __str__ for python 3.x return u'%s' % self.name #or whatever field
(r'^posts/tagged/(?P<tag>[-\w]+)/$', 'blog.view.posts_by_tag')
# reindex both to union of indices df_a = df_a.reindex(df_a.index | df_b.index) df_b = df_b.reindex(df_a.index | df_b.index) # replacement criteria can be put in this lambda function combiner = lambda: x, y: np.where(y < x, y, x) df_c = df_a.combine(df.b, combiner)
encode_history = {} def encode(str): """some calculations which lead to the code""" ... your calculations ... encode_history[code] = str return code def decode(code): """function to convert a code to string""" if code in encode_history: return encode_history[code] else: return None
thr = 0.95 # Is cumulative sum exceeds some threshold is_exceeds = np.cumsum(sklearn_pca.explained_variance_ratio_) >= thr # Which minimal index provides such variance # We need to add 1 to get minimum number of eigenvectors for saving this variance k = np.min(np.where(is_exceeds))+1 # Or you can just initialize your model with thr parameter sklearn_pca = PCA(n_components = thr)
# cols to select c = rpy2.robjects.IntVector((1,3)) # selection from df mydf.rx(True, c)
>>> import re >>> filterE = "x.y.prop1====1 and x.y.prop2>=2 and x.y.prop1<3 or x.y.prop4>9" >>> re.split(r'((?<!=)==(?!=)|<=|>=|!=|<|>)', filterE) ['x.y.prop1====1 and x.y.prop2', '>=', '2 and x.y.prop1', '<', '3 or x.y.prop4', '>', '9']
for w in xrange(workers): p = multiprocessing.Process(target=scrape_site, args=(q, )) p.start() processes.append(p)
import datetime date = datetime.datetime.strptime("111609", "%m%d%y") print date.strftime("%m/%d/%Y")
data = re.search(r"{.{4,9}b .*?[\r\n]*?.*? ((?:(?!\(| ..fs24).)*)", string, re.DOTALL) ^^^^^^^^^^^^^^^^^^^^
from multiprocessing import Pool p = Pool() #number of processes = number of CPUs keys, values= zip(*d.iteritems()) #ordered keys and values processed_values= p.map( f, values ) #apply the function f to each set and wait for result #then proceed to join the three sets
params = {'param1' : value1, 'param2' : value2, # ... etc } url = "http://example.com" # Referer must be correct # To determine correct Referer url, prepare a request without actually sending it req = requests.Request('POST', url, params=params) prepped = session.prepare_request(req) #r = session.send(prepped) # don't actually send it # add the Referer header by examining the prepared url headers = { 'Referer': prepped.url } # now send normally r = session.post(url, params=params, data=data, headers=headers)
if(propA->GetRenderDepth() == NULL || propB->GetRenderDepth() == NULL){ if(propA->GetRenderDepth() != NULL && propB->GetRenderDepth() == NULL){ propArray->ReplaceItem(i, propB); propArray->ReplaceItem(i+1, propA); isUnsorted = true; } }else if(propA->GetRenderDepth() < propB->GetRenderDepth()){ propArray->ReplaceItem(i, propB); propArray->ReplaceItem(i+1, propA); isUnsorted = true; } } //end for loop
pytest_plugins = ['module1', 'module2']
`for index, value in ndenumerate( self.cells ): do_something( value ) self.cells[index] = new_value`
ax = rawdat.plot(x='ts', y=['bid','ask'], marker='.', lw=0) plot.hold() rawdat.plot(x='lastTrade', y='last', marker='x', lw=0, ax=ax) plt.show()
bound_handler = handler.__get__(self, MyWidget)
def __rmul__(self, scalar): # self: right operand (Vector) v = Vector() v.x = self.x * scalar v.y = self.y * scalar return v
>>> [eval(i, {"__builtins__":None}) for i in ['6.2', '"Hello, world!"', '7']] [6.2, 'Hello, world!', 7]
def classifyInput(n): if n == "r": return 1 elif n == "s": return 2 elif n == "p": return 3 else: print "Wrong input!" # implicit: return None p1_inp = raw_input("Player 1 ?") p1 = classifyInput(p1_inp)
from PyZ3950 import zoom conn = zoom.Connection ('z3950.iacentre.com', 210,user='gaurishankar') conn.databaseName = 'itke' conn.preferredRecordSyntax = 'USMARC' query = zoom.Query ('CCL', 'mango') res = conn.search (query) for i in res: print i,i.data
import os.path, shutil def remove_ext(arg, dirname, fnames): argfiles = (os.path.join(dirname, f) for f in fnames if f.endswith(arg)) for f in argfiles: shutil.move(f, f[:-len(arg)]) os.path.walk('/some/path', remove_ext, '.tex')
x = pandas.Series([1, 2, 3], index=["A", "B", "C"]) x.index.name = "stuff" x.name = "cruddo" >>> print(x) stuff A 1 B 2 C 3 Name: cruddo, dtype: int64 >>> x.reset_index().to_json(orient='records') [{"stuff":"A","cruddo":1},{"stuff":"B","cruddo":2},{"stuff":"C","cruddo":3}]'
import numpy as np import matplotlib.pyplot as plt def sigmoid(x): return 1 / (1 + np.exp(-4*x)) x = np.linspace(-3, 3, 1000) y = np.array([(1 - n)**(-1) if n < 0 else 1 + n for n in x]) z = sigmoid(x) plt.ylim(0, 1.5) plt.plot(x, z, linewidth=2) plt.plot(x, y, linewidth=2) plt.show()
def blendShape(self, *args): blendshape_name = cmds.textField(self.widgets['bs'], q=True, text=True) cmds.blendShape(cmds.ls(sl=True)[1], cmds.ls(sl=True)[0], frontOfChain=True, n=blendshape_name)
object {} { members } members pair pair , members pair string : value # Keys *must* be strings.
>>> TupList = [('ABC D','235'),('EFG H','462')] >>> TupList.index((u'EFG H',u'462')) 1
direct_to_template(request, template, extra_context=None, mimetype=None, **kwargs)
>>> class Integer: ... def __init__(self, val=0): ... self.val = int(val) ... def __eq__(self, other): ... return self.val == other ... >>> Integer(1) == 1.1 False >>> Integer(1.2) == Integer(1.3) True >>> Integer(4) == Integer(7) False >>> Integer(2) == 2 True >>>
from Scripts import script1 map = {"One" : script1.function_one, "Two" : script1.function_two] def return_mapping(str): return map[str]
Sim = np.identity(n) # diagonal with ones (100 percent similarity) for i in range(n): for j in range(i+1, n): # +1 skips the diagonal Sim[i, j]= simfunction(list_doc[i], list_doc[j]) # Expand the matrix (copy triangle) tril = np.tril_indices_from(Sim, -1) # take lower & upper triangle's indices triu = np.triu_indices_from(Sim, 1) # (without diagonal) Sim[tril] = Sim[triu]
>>> string = {1,2,3} >>> [i for i in sample if string.intersection(i)] [[1, 5, 5, 5, 5, 5], [2, 5, 5, 5, 5, 5], [3, 5, 5, 5, 2]]
import io buf = io.BytesIO(b'Hello world!') buf.read(1) # Returns b'H' buf.tell() # Returns 1 buf.read(1) # Returns b'e' buf.tell() # Returns 2 # Set the pointer to 0. buf.seek(0) buf.read() # This will return b'H', like the first call.
from __future__ import absolute_import import json #this imports standard lib json import mypackage.json as my_json #import custom json module
import sqlalchemy.types as types class ChoiceType(types.TypeDecorator): impl = types.String def __init__(self, choices, **kw): self.choices = dict(choices) super(ChoiceType, self).__init__(**kw) def process_bind_param(self, value, dialect): return [k for k, v in self.choices.iteritems() if v == value][0] def process_result_value(self, value, dialect): return self.choices[value]
[e for e in emails if not any(pat in e for pat in pattern_list)]
#! /usr/bin/env python import sys import termios import copy from time import sleep fd = sys.stdin.fileno() old = termios.tcgetattr(fd) new = copy.deepcopy(old) new[3] = new[3] & ~termios.ECHO try: termios.tcsetattr(fd, termios.TCSADRAIN, new) sleep(5) except KeyboardInterrupt, ke: pass finally: termios.tcsetattr(fd, termios.TCSADRAIN, old) sys.exit(0)
example = [(1,2), (1,1,1), (1,1), (1,1), (2,1), (3,4), (2,3,1), (1,2,3)] RDD = sc.parallelize(example) result = RDD.map(lambda x: list(set(x)))\ .filter(lambda x: len(x)>1)\ .map(lambda(x):(tuple(x), 1))\ .reduceByKey(add)\ .collect() print result
from matplotlib.colors import LogNorm from matplotlib.pyplot import * x = np.random.normal(5,10,100000) y = np.random.normal(5,10,100000) counts,ybins,xbins,image = hist2d(x,y,bins=100,norm=LogNorm()) contour(counts,extent=[xbins.min(),xbins.max(),ybins.min(),ybins.max()],linewidths=3)
tree = ElementTree(fromstring(xml)) tree.findall('./{http://www.xyz.com}Message' '/{http://www.xyz.com}Body' '/{http://uri.xyz.com/Chorus/Message}CHMasterbook' '/{http://uri.xyz.com/Chorus/Message}event')
# there are no builtin avg function def avg(lst): return sum(lst)/len(lst) rows = list(avg(row) for row in a)
IS_DEV_APPSERVER = 'development' in os.environ.get('SERVER_SOFTWARE', '').lower()
"| {0: >2d} | | {1: >2d} |".format(Die1,Die2)
def decorator(func): def wrapped(a, b, c): return c + func(a, b) return wrapped @decorator def add(a, b): return (a+b)
from cryptography.fernet import Fernet key = Fernet.generate_key() cipher_suite = Fernet(key) cipher_text = cipher_suite.encrypt(b"A really secret message. Not for prying eyes.") plain_text = cipher_suite.decrypt(cipher_text)
import networkx as nx import matplotlib.pyplot as plt G = nx.path_graph(4) nx.draw_networkx(G) plt.grid('on') plt.show()
import functools def assert_index_datetime(f): @functools.wraps(f) def wrapper(df): assert df.index.dtype == pd.to_datetime(['2013']).dtype return f(df) return wrapper @assert_index_datetime def fn(df): pass df = pd.DataFrame({'a': [1]}, index=pd.to_datetime(['2013'])) fn(df)
In [14]: df.stack().value_counts() Out[14]: 192.248.8.183 3 192.168.2.85 3 66.249.74.52 2 192.168.2.161 2 124.43.113.22 1 dtype: int64
from ggplot import * p = ggplot(aes(x='C1', y='C2', color='Population'), data=mds)+ geom_point(alpha=0.6) + ggtitle('My plot') print p
current_url = request.resolver_match.url_name
x = [1, 2, 3, 4, 5, 6, 7, 8, 9] y = [125, 32, 54, 253, 67, 87, 233, 56, 67] color = [item / 255.0 for item in y] grayscale_map = plt.get_cmap('gray') plt.figure() plt.scatter(x, y, s = 500, c = color, cmap = grayscale_map) plt.colorbar() plt.show()
import subprocess subprocess.call(['python', 'your_script.py'])
Books.objects.all().only('title', 'author', 'date').extra(where=['library IS NOT NULL']).distinct()
elem = browser.find_elements_by_xpath("//div[contains(@id,'d')]/span")
>>> 'Vui lòng giúp đỡ tôi' 'Vui l\xc3\xb2ng gi\xc3\xbap \xc4\x91\xe1\xbb\xa1 t\xc3\xb4i' >>> 'Vui lòng giúp đỡ tôi'.decode('utf-8') u'Vui l\xf2ng gi\xfap \u0111\u1ee1 t\xf4i' >>> print 'Vui lòng giúp đỡ tôi'.decode('utf-8') Vui lòng giúp đỡ tôi
>>> 5 5 >>> 42 42 >>> 'hello' 'hello' >>> (lambda : 'hello')() 'hello' >>> def f(): ... print 'this is printed' ... return 'this is returned, and printed by the interpreter' ... >>> f() this is printed 'this is returned, and printed by the interpreter' >>> None >>>
// assumes input packet is [const char* data] unsigned char reg; char ext[6]; char user[51]; reg = data[0]; memcpy(ext, data + 1, 5); ext[5] = 0; // set null terminator memcpy(user, data + 6, 50); user[50] = 0; // set null terminator
while game==True: #your game code goes here charArray,collideArray = [],[]
class MakeItView(CreateView): model = myModel template_name = 'whatever.html' def get_context_data(self, **kwargs): context = super(MakeItView, self).get_context_data(**kwargs) if int(self.kwargs['user_id']) != self.request.user.id: raise PermissionDenied return context
CREATE TABLE FOO ( BAR TEXT DEFAULT "N/A" )
>>> import ntplib >>> c = ntplib.NTPClient() >>> response = c.request('europe.pool.ntp.org', version=3) >>> response.offset -0.143156766891
>>> import re >>> s1 = "thishasadigit4here" >>> m = re.search("\d", s1) >>> if m: ... print "Digit found at position %d" % m.start() ... else: ... print "No digit in that string" ... Digit found at position 13 >>>
testbutton.setStyleSheet('QPushButton {color: blue}')
<h1> Welcome </h1> <form method="POST" action="{% url 'register' %}"> {% csrf_token %} {{ user_form.as_p }} {{ user_profile_form.as_p }} <input type="submit" value="Register"/> </form>
import socket s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) s.connect(('8.8.8.8', 0)) s.setblocking(False) local_ip_address = s.getsockname()[0] print(local_ip_address) # prints 10.0.2.40
import os header='Name,Age' filename='sample.csv' filesize=0 if(os.path.exists(filename) and os.path.isfile(filename)): filesize=os.stat(filename).st_size f=open(filename,'a') if(filesize == 0): f.write('%s\n' % header) f.write('%s\n' % 'name1,25') f.close()
result = {k: d2.get(v) for k, v in d1.items()}
$ dname=mydirectory $ echo ${dname:4} rectory
>>> myList = ['foobar', 'footest', 'not', 'test', 'foothing'] >>> '<{}>'.format(', '.join(i for i in myList if i.startswith('foo'))) '<foobar, footest, foothing>'
EmployeeDetails.objects.filter(...).delete()
def TransButton(self): self.win1 = AddWindow() (another class) self.win1.show()
import StringIO pa.read_csv(StringIO.StringIO(lines.join('\n')))
with open('data.json', 'w') as outfile: outfile.write(out)
allranges = (range(1, lim+1) for lim in inputs) for prod in itertools.product(*allranges): print(prod)
if any(s.lower() == "ds" for s in x): print "Yes"
your_canvas_widget.create_line(x, y, x + 1, y)
import time def app(environ, start_response): start_response('200 OK', [('Content-Type', 'text/plain')]) def content(): yield ''.join(('First bit of content', '.' * 18000, '\n')) time.sleep(5) yield 'Second bit of content' return content() import waitress waitress.serve(app, host='0.0.0.0', port=8080)
tw0dList[0][0] = 'A'
# -*- coding: utf-8 -*- import win32clipboard def set_text(txt): win32clipboard.OpenClipboard() win32clipboard.EmptyClipboard() win32clipboard.SetClipboardText(txt, win32clipboard.CF_UNICODETEXT) win32clipboard.CloseClipboard() set_text(u"喵萌茶会字幕组][10月新番.exe")
if __name__ == "__main__": from optparse import OptionParser parser = OptionParser() parser.add_option("-g","--gui_mode", dest="guimode", help="start program in gui mode", action="store_true") (options,args) = parser.parse_args() if (options.guimode): print "start wx app" else: print "start cmd line app"
>>> import ast >>> mylist = ast.literal_eval("['foo', ['cat', ['ant', 'bee'], 'dog'], 'bar', 'baz']") >>> mylist ['foo', ['cat', ['ant', 'bee'], 'dog'], 'bar', 'baz']
df = pd.read_csv(fn, parse_dates=[[0, 1]], index_col=0) df.between_time("09:04:00", "09:25:00")
from django.conf import settings from myapp import myapp_defaults settings.configure(default_settings=myapp_defaults, DEBUG=True)
def repeated(f, count): callable = f for _ in range(count - 1): callable = compose(f, callable) return callable
import numpy as np from scipy.signal import argrelextrema a = np.array([1,2,3,4,5,4,3,2,1,2,3,2,1,2,3,4,5,6,5,4,3,2,1]) # determine the indices of the local maxima maxInd = argrelextrema(a, np.greater) # get the actual values using these indices r = a[maxInd] # array([5, 3, 6])
word[:2] # The first two characters word[2:] # Everything except the first two characters
main_dict = {} for item in json_data: values1_list = item['sub_values1'] values2_str = item['sub_values2'] vals = main_dict.setdefault('main_key', {'sub_key1': values1_list, 'sub_key2': values2_str}) vals['sub_key1'].append(values1_list)
perl -ane "print qq(@F[0..2]\n)" file.txt
$echo <password> | sudo -S <command>
for a in [1, 2, 3]: print(a)
def inputnumber(): numbers = input('Enter number(s): ').split(',') return [int(i) for i in numbers] x = inputnumber() y = set(x) print(y)
select min(clm0), clm1, clm2, group_concat(clm3) from yourtable group by clm1, clm2
import matplotlib.pyplot as plt x = [1, 4, 7] ylow = [0, 3, -2] yhigh = [1, 4, 2] width = [8, 15, 6] plt.vlines(x, ylow, yhigh, linewidth=width, antialiased=False) plt.axis([0, 8, -4, 5]) plt.show()
A = your_input for i in A.split('MS1'): i.count('MS2')
data = infile.read() infile.seek(0) lines = infile.readlines() numLines = len(lines) x = numLines * 50 y = numLines * 50
"r" - open text file for reading, starting from the beginning. "r+" - open text file for reading and writing, starting from the beginning. "a+" - create file if not exists; then open as a text file for reading and writing, starting from the end of file, plus you can only write to the end of the file.
payload = { 'username': 'your username', 'password': 'your password' } p = requests.post(myurl, data=payload)
import requests s = requests.Session() s.post(website_url, data = params)
with tf.variable_scope('h1') as h1_scope: # we save the scope object in h1_scope w = tf.get_variable('Weights', []) with tf.variable_scope('foo'): with tf.variable_scope(h1_scope, reuse=True): # get h1_scope back w2 = tf.get_variable('Weights') assert w == w2
import sys if len(sys.argv) > 1 and sys.argv[1] == 'script': setup(name='tvnamer', ...) else: setup(name='tvdb_api', ...)
from itertools import groupby from operator import itemgetter from collections import deque with open('/home/jon/testdata.txt') as fin: lines = (line.split() for line in fin) for k, g in groupby(lines, itemgetter(0)): fst = next(g) lst = next(iter(deque(g, 1)), fst) with open(k + '.txt', 'w') as fout: fout.write(fst[1] + ' ' + lst[2])
$ curl -i -u guest:guest http://localhost:15672/api/whoami
In [7]: str(decimal.Decimal('0.1')) Out[7]: '0.1' In [13]: "{0:0.6f}".format(decimal.Decimal('0.1')) Out[13]: '0.100000'
rowList = [column for column in [row for row in yourListStore]]
temp_pos = player.pos + (-1, -1) #move downleft one block if player.pos != enemy.pos: #if the position is not occupied player.pos = temp_pos # move the player there. else: #move player to another location and try again
win32api.LoadKeyboardLayout('00000409',1) # to switch to english win32api.LoadKeyboardLayout('00000401',1) # to switch to arabic
>>> df jim joe jolie 0 4 NaN 4 1 8 0 NaN >>> df.groupby('jim').count() joe jolie jim 4 0 1 8 1 0
def magic(func): def wrapper(*args): return func(' - '.join(map(str, args))) return wrapper
class Wrapper(object): def __init__(self): self.ws = [Wrapped(1),Wrapped(2),Wrapped(3)] def __getattr__(self, n): meth = getattr(Wrapped, n) def caller(): results = [meth(w) for w in self.ws] sum_ = sum(results,0.0) average = sum_/len(self.ws) return average return caller
lucky_number = 5 tries = 6 while tries: inp = raw_input("User input: ") if inp.isdigit() and int(inp) == lucky_number: return True elif inp.lower() == 'quit': break tries -= 1 return False
PORT=3000 MONGO_URL=mongodb://localhost:27017/myapp node bundle/main.js
def alpha_word(): word = list(input('Enter a word: ')) return word == sorted(word)
your_new_string = re.sub(r'\[subscript=(.+?)\]', r'<sub>\1</sub>', your_old_string)
print re.sub(r"(<table)",r"\1 border=1",test_Str)
from sqlalchemy import * metadata = MetaData() engine = create_engine('mysql+mysqldb://scott:tiger@localhost/foo') person_table = Table('person', metadata, autoload=True, autoload_with_engine=engine) q = person_table.insert().values(name='John', age=20) connection = engine.connect() connection.execute(q)
from subprocess import Popen, PIPE dd_process = Popen(['dd', 'if=/dev/sda'], stdout=PIPE) ssh_process = Popen(['ssh', 'root@example.com', 'dd','of=/dev/sda'],stdin=dd_process.stdout, stdout=PIPE) dd_process.stdout.close() # enable write error in dd if ssh dies out, err = ssh_process.communicate()
sns.heatmap(table2,annot=True,cmap='Blues', fmt='g')
from itertools import chain for paragraph in chain(doc.paragraphs, (paragraph for table in doc.tables for row in table.rows for cell in row.cells for paragraph in cell.paragraphs)): paragraph.replace("oldtext1","Something") paragraph.replace("oldtext2","Somethingelse")
import locale lang, encoding = locale.getdefaultlocale() mystring = u"blabla" print mystring.encode(encoding)
>>> t = SortedSet([(1, 3), (2, 4), (-2, 9)], updator = OverlappingIntervalsUpdator) >>> >>> print(t.overlap_point(-5)) [] >>> print(t.overlap_point(5)) [(-2, 9)] >>> print(t.overlap_point(3.5)) [(-2, 9), (2, 4)] >>> >>> print(t.overlap((-10, 10))) [(-2, 9), (1, 3), (2, 4)]
cache = {} biggest = 1 def fib(n): global biggest # <----- ....
from IPython.core.debugger import Pdb ipdb = Pdb() ipdb.runcall(my_imported_function, args...)
nums = [1, 2, 3] interp = [num + (dec / 10.) for num in nums for dec in range(10) if num + (dec / 10.) <= max(nums)]
import textwrap wrapper = textwrap.TextWrapper(width=20) for line in wrapper.wrap(text): print line, len(line)
with open(fname, "r") as fo: content_as_string = fo.read() match = re.search('Num_row_labels=(\d+)', content_as_string) # do want you want to the matchings
#! /usr/bin/env python import matplotlib.pyplot as plt x = [20, 21, 22, 23, 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18] y = [ 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1] x2,y2 = zip(*sorted(zip(x,y),key=lambda x: x[0])) plt.plot(x2,y2) plt.show()
{k: v for k, v in my_dict.items() if v['baz'] == 'abc'}
unichr(40960)
l = list(str) l[i] = 'e' str = ''.join(l)
# Textview with inverted colors import gtk tv = gtk.TextView() tv.modify_base(gtk.STATE_NORMAL, gtk.gdk.color_parse('black')) tv.modify_text(gtk.STATE_NORMAL, gtk.gdk.color_parse('white'))
for root, dirs, files in os.walk(path, '*.txt'): out = open(os.path.join(root, '..', '..'), 'a') out.write(...)
results = Path.objects.all() for s in search.split(): results = results.filter(path__icontains = s)
import threading import time def printit(): threading.Timer(n, printit).start() print "Hello, World!" threading.Timer(x, printit)
with open('info.txt', 'r') as f: data = [line.split(',') for line in f] print(sorted(data, key=lambda x: int(x[2])))
>>> buffer('foobar') <read-only buffer for 0x7fcdd7caa120, size -1, offset 0 at 0x7fcdd7ca82f0> >>> buffer('foobar')[3:5] 'ba' >>> for c in buffer('foobar'): ... print c ... f o o b a r
class CompanyAdmin(admin.ModelAdmin): def render_change_form(self, request, context, *args, **kwargs): context['adminform'].form.fields['theme'].queryset = Theme.objects.filter(name__iexact='company') return super(CompanyAdmin, self).render_change_form(request, context, args, kwargs)
df['ffil_col'] = df.groupby('LABEL').ffil_col.transform(lambda group: group.ffill()) >>> df LABEL Col1 ffil_col 0 1 N female 1 1 M female 2 2 A NaN 3 2 N male 4 2 M male
globals()['yourvariables'] = variable
import scipy X = scipy.rand(3,3) Y = scipy.rand(3,3) print X+Y print scipy.delete(X, 1, 0) print scipy.delete(X, 1, 1) X[1,:] = [1,2,3] print X
3>> [int(x, 16) for x in b'002151BF,FFFF9F86'.split(b',')] [2183615, 4294942598] 3>> [(int(x, 16) + 0x80000000) % 0x100000000 - 0x80000000 for x in b'002151BF,FFFF9F86'.split(b',')] [2183615, -24698]
In [47]: strs="4.500000+1 1.894719-3 4.600000+1 8.196721-3 4.700000+1 2.869539-3" In [48]: [float(x.replace("+","e+").replace("-","e-")) for x in strs.split()] Out[48]: [45.0, 0.001894719, 46.0, 0.008196721, 47.0, 0.002869539]
from datetime import datetime, timedelta now = datetime.utcnow() rounded = now - timedelta(minutes=now.minute % 5 + 5, seconds=now.second, microseconds=now.microsecond) print rounded # -> 2014-04-12 00:05:00
import pythoncom, pyHook def OnKeyboardEvent(event): print 'Ascii:', event.Ascii, chr(event.Ascii) print 'Key:', event.Key print 'KeyID:', event.KeyID print 'ScanCode:', event.ScanCode print 'Extended:', event.Extended return True #for pass through key events, False to eat Keys hm = pyHook.HookManager() hm.KeyDown = OnKeyboardEvent hm.HookKeyboard() pythoncom.PumpMessages()
import theano a=theano.tensor.matrix() idxs=(a<0).nonzero() new_a=theano.tensor.set_subtensor(a[idxs], 0)
'(\w+)\s*=\s*' re.findall('(\w+)\s*=\s*', 'I think Python=amazing') \\ return 'Python' re.findall('(\w+)\s*=\s*', 'I think Python = amazing') \\ return 'Python' re.findall('(\w+)\s*=\s*', 'I think Python =amazing') \\ return 'Python'
from numpy import float128 from sympy.abc import x from sympy.utilities import lambdify f = lambdify(x, x ** 2) result = f(float128(2)) result #>>> 4.0 type(result) #>>> <class 'numpy.float128'>
import seaborn as sns sns.set_style("whitegrid") sns.factorplot("month", "rainfall", row="temp", data=rain_record, size=2, aspect=5, kind="box", palette="PuBuGn_d") sns.despine(left=True)
# get matplotlib wget https://downloads.sourceforge.net/project/matplotlib/matplotlib/matplotlib-1.4.3/matplotlib-1.4.3.tar.gz #uncompress tar xvzf matplotlib-1.4.3.tar.gz # open build install # read INSTALL file for more instructions cd matplotlib-1.4.3 python setup.py build # actually installing needed superuser privileges sudo python setup.py install
T.switch(T.eq(self.squared_euclidean_distances, 0), 0, c / self.squared_euclidean_distances)
>>> date_div = "Blah blah blah, Updated: Aug. 23, 2012" >>> date_div.split('Updated: ') ['Blah blah blah, ', 'Aug. 23, 2012'] >>> date_div.split('Updated: ')[-1] 'Aug. 23, 2012'
import re, itertools car = ['skoda', 'audi', 'benz'] text = """ I have a car="mycar" My friend has a vehicle="myvehicle" My uncle have a car="mycar" Second verse same as the first I have a car="mycar" My friend has a vehicle="myvehicle" My uncle have a car="mycar" """ it = itertools.cycle(car) newtext = re.sub(r'mycar|myvehicle', lambda _: next(it), text)
In [38]: l = ((1L,),(2L,),(3L,)) In [39]: [x[0] for x in l] Out[39]: [1L, 2L, 3L]
with open('file.csv') as csvfile: reader = csv.DictReader(csvfile) for row in reader: time.append(row['Time']) energy.append(row['Energy']) ondeIG.append(row['OndeIG']) envelope.append(row['envelope'])
if request.method == 'POST': images = request.POST.getlist('images[]') other_field = request.POST.get('other_field') for i in range(len(images)): data = MyModel() data.images = images[i] data.other_field = other_field data.save()
im = Image.new('L', size) im.putdata([x1, x2, x3, ...])
g = lambda x: pd.Series(f_polyfit(x.y1, x.y2, x.y3, x.y5, x.y5, degree=1)) df[['slope', 'R2']] = df.apply(g, axis=1)
>>> np.array(0, ndmin=1) array([0]) >>> np.atleast_1d(np.array(0)) array([0])
df = pd.read_csv("short.csv") print df date 0 1368431150 1 1368431149 2 2015-05-18 print pd.to_numeric(df.date, errors='coerce').notnull() 0 True 1 True 2 False Name: date, dtype: bool
import subprocess p = subprocess.Popen("some_long_command",stdout=subprocess.PIPE) for line in iter(p.stdout.readline, ""): print line
>>> import datetime >>> strdate = '14:45:35:233 08.05.2016' >>> dt = datetime.datetime.strptime(strdate, '%H:%M:%S:233 %d.%m.%Y') >>> dt.strftime('%Y-%m-%d') '2016-05-08'
open('help-new.png', 'wb') as outfile: ^ | that's it, right there
In [31]: d = {'a':[1,2,3,4,5,6], 'b':[1,2,3,4,5,6]} In [32]: df = pd.DataFrame(d) In [33]: bad_df = df.index.isin([3,5]) In [34]: df[~bad_df] Out[34]: a b 0 1 1 1 2 2 2 3 3 4 5 5 In [35]:
def pause(time_to_wait): clock = pygame.time.Clock() total = 0 while True: total += clock.tick() if(total > time_to_wait): return for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() sys.exit()
reddit = praw.Reddit("Amos") submission = reddit.get_submission(submission_id="XYZ") print submission.permalink >>> www.reddit.com/r/subreddit/comments/XYZ
import cPickle as p # Sender data_str = p.dumps(array) sock.sendto(data_str, addr) # Receiver data,addr = sock.recvfrom(buf) data_origin = p.loads(data)
from pyramid.events import NewRequest from pyramid.events import subscriber @subscriber(NewRequest) def new_request_subscriber(event): validate_request(event.request)
f = zipfile.ZipFile('path/to/file') for attempt in attempts: try: f.extractall(pwd=attempt) except RuntimeError: continue else: return attempt
#Headers as rows for now df = pd.read_excel(xls_file,0, header=None, index_col=0) #fill in Null values in "Headers" df = df.fillna(method='ffill', axis=1) #create multiindex column names df.columns=pd.MultiIndex.from_arrays(df[:3].values, names=['top','mid','low']) #Just name of index df.index.name='Date' #remove 3 rows which are already used as column names df = df[pd.notnull(df.index)]
import re m = re.search('upc content=([0-9]*)', string) if m: upc = m.group(1) print upc
convolve (seconds, microseconds) 81 349969 scipy.signal.convolve (seconds, microseconds) 1 962599 convolve in C (seconds, microseconds) 0 87024
>>> import re >>> re.match('\w+', 'bob!') <_sre.SRE_Match object; span=(0, 3), match='bob'> >>> re.match('\w+', "there's") <_sre.SRE_Match object; span=(0, 5), match='there'>
def main(): print 'doing stuff' foo() bar() def foo(): print 'inside foo' def bar(): print 'inside bar' if __name__ == '__main__': main()
import itertools r = list(itertools.filterfalse(lambda x: x in data1, data2)) + list(itertools.filterfalse(lambda x: x in data2, data1)) assert r == [{'name': 'String 3'}]
menu = driver.find_element_by_css_selector("") hidden_submenu = driver.find_element_by_css_selector("") ActionChains(driver).move_to_element(menu).click(hidden_submenu).perform()
qsts_pks = QueryStringTag.objects.filter(tag__pk__in=['12', '14', '15']).values_list('id', flat=True) queries = QueryString.objects.filter(qsquerystring__pk__in=qsts_pks)
sqla_metadata = sqlalchemy.schema.MetaData() type_mapping = {'int': Integer, 'text': String} # etc. cols = [] for (col_name, col_type) in your_parsed_metadata.fields: cols.append(Column(col_name, type_mapping[col_type])) cols.append(Column('datafile_id', Integer, ForeignKey("datafile.datafile_id"), nullable=False),) new_table = Table(your_parsed_metadata.tablename, sqla_metadata, *cols) sqla_metadata.create_all(engine)
query = """ SELECT * FROM distributor_distributor d INNER JOIN user_user_profile up ON up.id = %(user_id)s INNER JOIN user_user_distributors_of_user udu ON udu.user_profile_id = %(user_id)s AND udu.distributor_id = d.id WHERE d.name || d.surname = %(query)s; """ dist_list = Distributor.objects.raw(query, {'user_id': request.user.pk, 'query': 'hello world'})
Open the file `Untitled9.ipynb` for reading. //f For each line in the file: // checkline Store the line.// youre adding the line to glb.l, which you will later iterate on to count the words in the file. Add one to the line count. For each space, add one to the word count. // counting the results of the split() on glb.l Print the line and the word count.
def display_player_image(canvas, player): canvas.create_rectangle(50, 50, 250, 100) tkImage = ImageTk.PhotoImage(Image.open(player.playerImg)) canvas.create_image(100, 100, image = tkImage, anchor = NE) player.playerImg = tkImage #Reference
RewriteCond %(REQUEST_URI) ^media RewriteCond %{REQUEST_FILENAME} !-f RewriteRule #Some rewrite rule to redirect from '/media/filename' to '/image_generator/filename'
import win32api win32api.PostMessage(handler, win32con.WM_KEYDOWN, win32con.VK_RETURN, 0)
objective = (price[channel_id] * is_channel_assigned[channel_id])
In [1]: from IPython.display import HTML In [2]: df = pd.DataFrame(range(5), columns=['a']) In [3]: df['a'] = df['a'].apply(lambda x: '<a href="http://example.com/{0}">link</a>'.format(x)) In [4]: HTML(df.to_html(escape=False))
print '\n'.join('\t'.join(x) for x in L)
def fn (**kw): arg = kw.get("foo") or kw.get("bar") or kw.get("baz") if arg==None: raise TypeError, "foo nor bar nor baz given az argument" print arg Here the order of precedence is: "if foo exists, arg is foo. if it doesn't but bar exists, arg is bar, if neither foo nor bar exists, the arg is baz. If baz doesn't, i.e. all 3 are missing, arg is None. Of course, you may check whether either one exists and force the mutual exclusion, but I don't see why would you need such a thing. You are clever and you will never pass them in together. Even if you do, some will be ignored.
^(?=.*?(?:flights|airfare))(?:(?!without|not includ(?:ing|ed)|doesn\'?t include|exclud(?:es|ing)).)*$
sns.factorplot(x='day', y='total_bill', hue='sex', data=tips, row='smoker', col='time', kind='violin')
from SimpleCV import Camera from SimpleCV import Image webcam_camera = Camera() webcam_image = webcam_camera.getImage() webcam_image.save("frame.jpg")
dict2 = {k: x[:i] + x[i+1:] for x in dict1.values() for i, k in enumerate(x)}
import os, shutil #Get the list of all folders present within the particular directory folder_list = os.walk('.').next()[1] #Start zipping the folders for each_folder in folder_list: shutil.make_archive(each_folder, 'zip', os.getcwd() + "\\" + each_folder)
x = s[1] - s[0] for i in range(2, len(s)): if s[i] - s[i-1] != x: break else: #do some work here...
329 pixels with value of R = 0, G = ?, B = ? and 145 pixels with value of R = 1, G = ?, B = ? and ... 460 pixels with value of R = ?, G = 1, B = ? and ... 3953 pixels with value of R = ?, G = ?, B = 256
b = models.CharField(max_length=7, default='0000000', editable=False)
# original queryset - where author is an FK queryset = MyModel.objects.values('id', 'author') # loop through the original queryset, and replace FK author_map = {a['id']: a for a in Author.objects.values('id', 'name')} for obj in queryset: obj['author'] = author_map[obj['author']]
>>> import base64 >>> print base64.b64encode("password") cGFzc3dvcmQ= >>> print base64.b64decode("cGFzc3dvcmQ=") password
ffffffff # big endian ffffffff # little endian
import pygame
def getCbFun(queue): # closure def cbFun(snmpEngine,stateReference, contextEngineId, contextName, varBinds, cbCtx): ... queue.add(varBinds) ... return cbFun ... # Shared queue object queue = Queue() # Register SNMP Application at the SNMP engine ntfrcv.NotificationReceiver(snmpEngine, getCbFun(queue)) ...
check = cells[1].get_text(strip=True)
def nohsps(input): count=0 for line in input: if line.startswith('AJ000012.1'): count=count+1 return count
from scipy.ndimage import median_filter filtered_array = median_filter(random_array, size=3)
import requests for i in range(101): payload = {'usn': i} response = requests.post("index.php", data=payload) # do something with response
def convertible(v): try: int(v) return True except (TypeError, ValueError): return False newlist = [i for i in mylist if convertible(i)]
ipython notebook --ip=localhost
select column_name from INFORMATION_SCHEMA.COLUMNS where table_schema='stackoverflow' and table_name='questions'
var ints = new[] { 1, 2, 3, 4, 5 }; var result = ints.Pairwise((first, second) => second - first); Console.WriteLine(result.Sum());
import csv with open(filename,"r") as fin: with open(outname,"w") as fout: writer=csv.writer(fout) for row in csv.reader(fin): writer.writerow(row[:-1])
im.save('/path/to/cover-2.jpg', format='JPEG', subsampling=0, quality=100)
for line in paragraphInput.splitlines(): print "This is " + line + " !"
$("#id_of_form").attr("action", "/builds/show/" + $("#id_postField").val())
>>> from getpass import getpass >>> getpass() Password: 'secret'
import json import requests url = 'http://groceries.asda.com/api/items/view?itemid=910000800509' r = requests.get(url) price = r.json()['items'][0]['price'] print price £13.00
>>> F = [] >>> F.extend(x) >>> F.extend(y) >>> F [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]
class Example(object): def __init__(self, table=None): self.__dict__['_fields'] = {} self.__dict__['_table'] = table ... def __setattr__(self, name, value): if name in self._fields: self._fields[name].value = value else: raise AttributeError
'OPTIONS': { 'read_default_file': '/path/to/my.cnf', },
from django.db.models import * # NOQA isort:skip from django.contrib.gis.db.models.aggregates import * # NOQA from django.contrib.gis.db.models.fields import ( # NOQA GeometryCollectionField, GeometryField, LineStringField, MultiLineStringField, MultiPointField, MultiPolygonField, PointField, PolygonField, RasterField, ) from django.contrib.gis.db.models.manager import GeoManager # NOQA
for i, n in enumerate(C): A[i] += n/2 B[i] += n/2 >>> A [11, 22, 33, 44, 55, 70] >>> B [23, 46, 69, 92, 17, 20]
>>> np.isclose(arr_f, a, atol=0.01).any() True
lst1 = ['a', 'b', 'c', 'd', 'e'] lst2 = ['q', 'r', 's'] mapping = [4, 0, 3] for lst2_n, lst1_n in enumerate(mapping): lst1[lst1_n] = lst2[lst2_n]
from datetime import datetime import pandas as pd import matplotlib.pyplot as plt import matplotlib.dates as dt df = pd.read_csv('data.csv') df.amin = pd.to_datetime(df.amin).astype(datetime) df.amax = pd.to_datetime(df.amax).astype(datetime) fig = plt.figure() ax = fig.add_subplot(111) ax = ax.xaxis_date() ax = plt.hlines(df.index, dt.date2num(df.amin), dt.date2num(df.amax))
>>> labels, uniques = df.A.factorize() >>> df.A = labels >>> df A B 0 0 4 1 1 4 2 0 4 3 2 4
import pandas as pd import numpy as np # some sample data ts = pd.Series(np.random.randn(1000), index=pd.date_range('1/1/2000', periods=1000)).cumsum() #plot the time series ts.plot(style='k--') # calculate a 60 day rolling mean and plot pd.rolling_mean(ts, 60).plot(style='k') # add the 20 day rolling variance: pd.rolling_std(ts, 20).plot(style='b')
foo = foo.replace(' ', '')[:-3].upper()
%matplotlib inline import pandas as pd StatePremiumAverages = pd.DataFrame({ 'index': [0, 1, 2, 3, 4], 'StateCode': ['AK', 'AK', 'AK', 'AK', 'AK'], 'PremiumAdultIndividualAge30' : [633, 755, 916, 803, 785], 'YearlyAverage' : [7596, 9060, 10992, 9636, 9420] }) StatePremiumAverages.plot(kind="barh",x=StatePremiumAverages["StateCode"], title="Average Yearly Health Premiums for Individuals, Age 30", legend=False)
# returns a df grouped by ArtistID and Tag tag_counts = artists_tags.groupby(['ArtistID', 'Tag']) # sum up tag counts and sort in descending order tag_counts = tag_counts.sum().sort('Count', ascending=False).reset_index() # keep only the top ranking tag per artist top_tags = tag_counts.groupby('ArtistID').first() # top_tags is now a dataframe which contains the top tag for every artist # We can simply lookup the top tag for Nirvana via it's index: top_tags.ix['5b11f4ce-a62d-471e-81fc-a69a8278c7da'][0] # 'Grunge'
from string import Formatter s="""<Text>Question ${PrimaryKey}:</Text> <Text>Cheat: ${orientation}</Text>""" print([ele[1] for ele in Formatter().parse(s) if ele[1]]) ['PrimaryKey', 'orientation']
@cache_page(60 * 15) def severity_wise(request): sev_chart=[["Severity","No. of Bugs"]] ......
import cv2 img = cv2.imread("lenna.png") crop_img = img[200:400, 100:300] # Crop from x, y, w, h -> 100, 200, 300, 400 # NOTE: its img[y: y + h, x: x + w] and *not* img[x: x + w, y: y + h] cv2.imshow("cropped", crop_img) cv2.waitKey(0)
webobj.find_elements_by_tag_name('a')[0].click()
import requests from bs4 import BeautifulSoup url = 'http://www.example.com' page_request = requests.get(url) page_source = page_request.text soup = BeautifulSoup(page_source)
>>> import re >>> s = "`...```.....``...`....`````...`" >>> re.sub(r'((?<!`)(``)*`(?!`))', r'\1\1', s) '``...``````.....``...``....``````````...``'
mongo = pymongo.MongoClient() mongo.DBNAME.command('convertToCapped', 'COLLNAME', size=SIZE)
import matplotlib.pyplot as plt from matplotlib.collections import LineCollection import pylab as p fig = plt.figure() pts1 = [] pts2 = [] for i in range(100): pts1.append([i,i]) pts2.append([-i-3,-i]) lines = LineCollection([pts1,pts2], linestyles='solid') subplt = fig.add_subplot(111,aspect='equal') subplt.add_collection(lines) subplt.autoscale_view(True,True,True) p.show()
parser = argparse.ArgumentParser() parser.add_argument('filename') args = parser.parse_args() with open(args.filename) as file: # do stuff here
>>> 'abc'.isalpha() True >>> '123'.isalpha() False >>> 'ab1c'.isalpha() False >>> '123'.isalnum() True >>>
from copy import deepcopy #snip templateclass = deepcopy(ListofClass[position])
res = User.query.filter(User.email.in_(('x1@dom1.com', 'x2@dom2.com')))
a = [random.randrange(-10, 11) / 10 for _ in range(100)]
self.GraphWidget.axes.hold(True) self.GraphWidget.axes.plot(self.x1,self.y1,label='plot1') self.GraphWidget.axes.plot(self.x2,self.y2,label='plot2')
videoDirectory = os.listdir("videos") f = open("videos.html", "w") f.write('<html><head></head><body><ul>' f.writelines(['<li><a href="videos/%s">%s</a></li>' % (f, f) for f in videoDirectory]) f.write('</ul></body></html>')
setup( ... dependency_links=[ 'git+https://example.com/spamneggs/foobar.git#egg=foobar-1.2.3' ] install_requires=[ 'foobar', ] )
Similarity1 = (1.0 + len(intersection1))/(1.0 + max(len(set_sentence1), len(set_sentence3))) Similarity2 = (1.0 + len(intersection2))/(1.0 + max(len(set_sentence2), len(set_sentence3)))
class MeasureBase(object):¬ STANDARD_UNIT = None¬ ALIAS = {}¬ UNITS = {}¬ LALIAS = {}¬
class LoginManager(object): def process_view(self, request, view_func, view_args, view_kwargs): user = users.get_current_user() if user is not None: marker = Session.get(user.user_id()) if marker is None: login_action() Session.set(user.user_id(), "true")
import wx class MyApp(wx.App): def __init__(self): #<-- runs when we create MyApp #stuff here self.nameField = wx.TextCtrl(frame) #<--scope is for all of MyApp #stuff def clickedAction(self, e): #stuff app = MyApp() app.MainLoop()
r = requests.put(url, data=json.dumps(payload), headers=headers)
public char change(char x) { final String dictionary = "abtr"; final String transform = "bart"; int loc= dictionary.indexOf(x); if (loc < 0) { return 'z'; } else { return transform.charAt(loc); } }
>>> a= 'href=\"http:\/\/' >>> a 'href="http:\\/\\/' # the str() method is called >>> repr(a) '\'href="http:\\\\/\\\\/\'' # repr() is meant to be how the object can be "read" back, or provide detailed information >>> str(a) 'href="http:\\/\\/' # see first example >>> print a href="http:\/\/ # any conversion etc... is not performed, ie, you get your original string printed
class PoolTable(tables.Table): class Meta: model = Simple attrs = {'class': 'paleblue','width':'200%'}
with open(ima) as file: file_list = f.readlines() # You will have a list with size/28=the number of digits # Divide file_list by size 28
>>> from glob import glob >>> glob('/home/*.txt') ['/home/c.txt', '/home/d.txt', '/home/b.txt'] >>> [glob(i) for i in ['/home/*.txt', '/home/*.jpeg']] [['/home/c.txt', '/home/d.txt', '/home/b.txt'], ['/home/e.jpeg']] >>>
def traverse(tree_of_lists): for item in tree_of_lists: if isinstance(item, list): for x in traverse(item): yield x else: yield item
d1 = {'a': 1, 'b': 2} d2 = {'a': 1} l = [d1, d2, d1, d2, d1, d2] for d in l: d.pop('b',None) print l
from lxml import html tree = html.fromstring('<html>Your HTML code</html>') rows = tree.xpath('//table/tr') #update your table XPath here records = [] for row in rows: cells = [c for c in row.xpath('./td/text()') if c.strip()] # do something with cells content
list_a = [[1.2, 0.5, 3.1,...], [7.3, 1.5, 3.9,...], [100, 200, 150, ...]] import numpy as np x = np.asarray(list_a[0]) y = np.asarray(list_a[1]) m = np.asarray(list_a[2]) mrk = {100:'o',150:'s',200:'^'} for key,value in mrk.items(): s1 = (m==key) plt.scatter(x[s1],y[s1],marker=value)
jobLocation = jobLocationUnclean for c in "!@#%&*()[]{}/?<>,.": jobLocation = jobLocation.replace(c, "") params.append(jobLocation) print(jobLocation)
>>> s = 'abbb' >>> [i[::-1] for i in reversed(re.findall(r'(?=(b*a))', s[::-1]))]
connect.execute(tobeexec, params); connect.commit() connect.close()
<node id="mynicelycrafteduniqueid"> <data>...</data> <leftChild>childuniqueId</leftChild> <rightChild/> <!-- no right child --> </node>
def none(*args): """Converts any arguments to None.""" return None
irofile = iter(rofile) for line in irofile: print line if(line == 'foo'): line = next(irofile) #BEWARE, This could raise StopIteration! print line
import anydbm def p(initial): d = anydbm.open('cache', 'c') d.update(initial) return d d1 = p({}) # create a persistent dictionary d1['k1'] = 'v1' # add # add another, maybe 1 billion more, entries on to the dictionary for i in xrange(100000): d1['k{}'.format(i)] = 'v{}'.format(i) print d1.has_key('k9999999999') # entry that is not in memory, prints False d1.close() # You have to close it yourself
from django.utils import translation def myview(...): ... lang = translation.get_language() ...
>>> import ast >>> items = ['1', 'hello', '524', '65.23'] >>> def convert(x): try: return ast.literal_eval(x) except: return x >>> [convert(x) for x in items] [1, 'hello', 524, 65.23]
attrs_list = Entity.objects.filter(**filters).distinct().values_list('someattr', flat=True) a = Character.objects.filter(someotherattr__in=attrs_list)
from BeautifulSoup import BeautifulSoup from markdown import markdown html = markdown(some_html_string) text = ''.join(BeautifulSoup(html).findAll(text=True))
import csv with open('minitest.csv', 'rb') as f: reader = csv.reader(f, delimiter='|') for row in reader:
pd.set_option('display.max_colwidth', -1)
widgets = { 'content': forms.Textarea(), 'post': forms.HiddenInput(), }
[x for i in np.arange(3) for x in [f1(i), f2(i)]]
In [21]: df['C'] = (df['A'] - df['B'])/(np.timedelta64(1,'D')) df Out[21]: index A B C 0 one 2014-01-01 2014-02-28 -58 1 two 2014-02-03 2014-03-01 -26
a, b, c = s + [0,9,1][len(s):]
import numpy as np import pylab as pl x = np.linspace(-1, 1, 100) y = np.zeros((5, 100)) for i in range(5): y[i] = x**i ax = [] kw = {} for i in range(5): if i > 0: kw ={'sharex': ax[0], 'sharey': ax[0]} ax.append(pl.subplot(3, 2, i+1, **kw)) ax[i].plot(x, y[i])
>>> results = [] >>> for no in j["response"]["result"]["Potentials"]["row"]: ... data = no["FL"] ... if isinstance(data, list) and len(data) > 1: ... results.append(int(data[1]["content"])) ... >>> results [694275295, 729545274, 903187021, 729416761]
for i in range(n): statement 1 statement 2 statement 3 statement 4
for part in message.walk(): if part.get_content_type() == "text/plain": do_stuff_with_text_parts(part)
In [85]: import numpy as np In [86]: y = [1,2,3,4,5] In [87]: f = [1.9, 3.7, 5.8, 8.0, 9.6] In [88]: SSres = sum(map(lambda x: (x[0]-x[1])**2, zip(y, f))) In [89]: SStot = sum([(x-np.mean(y))**2 for x in y]) In [90]: SSres, SStot Out[90]: (48.699999999999996, 10.0) In [91]: 1-(SSres/SStot) Out[91]: -3.8699999999999992
import numpy as np import pandas as pd x = pd.DataFrame(np.random.randn(3,3), index=[1,2,3], columns=['A', 'B', 'C']) locations = [(1, "A"), (1, "B"), (1, "A"), (3, "C")] print x.get_value(1, "A") row_labels, col_labels = zip(*locations) print x.lookup(row_labels, col_labels)
(rdd1 union rdd2).reduceByKey(_ ++ _)
myString += getattr(eachObject, everyElement)
import gc gc.get_objects() # returns a list of objects tracked by CPython's garbage collector
import numpy numpy.version.version
def __iter__(self): for start in self.start_nodes: for end in self.end_nodes: for path in self.find_path(self._graph, start, end): yield path
bulkloader.py --dump --app_id=<app-id> --url=http://<appname>.appspot.com/remote_api --filename=<data-filename>
def p_things(p): ''' things : things thing things : thing ''' if len(p) == 2: p[0] = [p[1]] else: p[0] = p[1] p[0].append(p[2])
from selenium import webdriver url = "http://fiddle.jshell.net/ebkXh/show/" driver = webdriver.Firefox() driver.get(url) button = driver.find_element_by_xpath('//button[@type="submit"]') # dismiss button.click() driver.switch_to.alert.dismiss() # accept button.click() driver.switch_to.alert.accept()
str='sdfsdfsdfdsfsdfcxvvdfvxcvsdcsdcs sdcsdcasd' I=int.from_bytes(bytes([ord (i)for i in str]),byteorder='big') print(I) print(I.to_bytes(len(str),byteorder='big'))
from multiprocessing import Pool def f(x): return x*x if __name__ == '__main__': pool = Pool(processes=4) # start 4 worker processes inputs = range(10) result = pool.map(f, inputs) print result
Tag.objects.annotate(prod_num=Count('product')).order_by('prod_num')
m_cluster = wx.MenuItem(menu, -1, "&Cluster\tAlt-C", "Cluster Options.") m_cluster.SetTextColour(colour) menu.AppendItem(m_cluster)
#!/bin/bash while : do python myscript.py echo "crashed" >> log end
def job_expired(self): time=self.time date=self.purchased end=date+timedelta(days=time) #now is defined globally if now > end: self.expired = True self.pending = False self.save() ex = self.expired else: ex=self.expired=False return ex
list1 = [ key for key in mydict1.keys() if key in mydict2.itervalues() ]
for i in range(0,10,2):
tableView.setIndexWidget(index, QProgressBar())
def output(*items, end="\n", file=sys.stdout): pass
from django.db import connection tables = connection.introspection.table_names() seen_models = connection.introspection.installed_models(tables)
import re teststrs = ["my_id", "Id_number", "my_id_rocks", "my_idea"] replace_with_upper = "id" def toUpper(match): return match.group(1).upper() for test_me in teststrs: test_me = re.sub("(?<![a-z])({})(?![a-z])".format(replace_with_upper), toUpper, test_me, flags=re.IGNORECASE) print(test_me)
if (x, y) in my_dict: # whatever
import csv csv_file = csv.reader(open("your_file_name.csv")) dist = 0 for row in csv_file: _dist = row[2] try: _dist = float(_dist) except ValueError: _dist = 0 dist += _dist
import xlrd import csv def xls_to_csv(): x = xlrd.open_workbook('data.xls') x1 = x.sheet_by_name('Sheet1') csvfile = open('data.csv', 'wb') writecsv = csv.writer(csvfile, quoting=csv.QUOTE_ALL) for rownum in xrange(sh.nrows): writecsv.writerow(x1.row_values(rownum)) csvfile.close()
import string def Coder(shift): alpha = string.ascii_lowercase ALPHA = string.ascii_uppercase if 0 <= shift < 26: unshifted_letters = ALPHA + alpha shifted_letters = ALPHA[shift:] + ALPHA[:shift] + alpha[shift:] + alpha[:shift] return dict(zip(unshifted_letters, shifted_letters))
if any(i.lower().startswith('cache-control:') for i in self.headers): #...
# add to your class def showCallback(self,record): """ returns a callback for self.show """ def callback(): # make a new function return self.show(record) # that shows the given record return callback # return this function for thisrecord in inFile: buttons.append(Button(self.frame,text='Name: %s' %i[5:10], command=self.showCallback(thisrecord))
from operator import attrgetter m1 = Model(name='Lamborghini Miura', price=910) m2 = Model(name='Ferrari 458 Italia', price=580) lst = [m1, m2] lst.sort(key=attrgetter('name', 'price'))
df = pd.read_csv(filename, dtype={'emotion':np.int32, 'pixels':str, 'Usage':str}) def makeArray(text): return np.fromstring(text,sep=' ') df['pixels'] = df['pixels'].apply(makeArray)
def __str__(self): return __name__ + "." + self.__class__.__name__ + "." + self._testMethodName
import seaborn as sns iris = sns.load_dataset("iris") g = sns.pairplot(iris) g.set(xticklabels=[])
if [[ -z "$VIRTUAL_ENV" ]]; then echo "No VIRTUAL_ENV set" else echo "VIRTUAL_ENV is set" fi
def start_requests(self, filename, columnname): with open(filename) as file: headers = file.readline().strip().split(',') for line in file.readlines(): zipcode = line.strip().split(',')[headers.index(columnname)] yield self.make_requests_from_url("http://www.example.com/zipcode/%05d/search.php" % zipcode)
import sched, time s = sched.scheduler(time.time, time.sleep) def do_something(sc): print "Doing stuff..." # do your stuff sc.enter(60, 1, do_something, (sc,)) s.enter(60, 1, do_something, (s,)) s.run()
df[np.in1d(df.index.month, [1, 2, 3, 10, 11, 12])]
from yourmodule.yourapp import celery celery.send_task("yourtasksmodule.yourtask", args=["Hello World"])
Options -> Configure IDLE -> Keys
import xml.etree.ElementTree as ET data = """<article> <MainText> <Big> HDhsdjdsd </Big> <Small> jdhdhksdj </Small> <Big><text> jsdhjsadh </text> <footnote> 1 </footnote> <text> hsdhsdh </text> </Big> </MainText> </article>""" tree = ET.fromstring(data) print tree.find('.//MainText//footnote').text.strip()
In [21]: np.repeat(np.array([1,5,2]), np.array([2,3,4])) Out[21]: array([1, 1, 5, 5, 5, 2, 2, 2, 2])
A = np.zeros((10,20)) y, x = np.ogrid[:A.shape[0], :A.shape[1]] mask = x > y A[mask] = 1
class Test: @staticmethod def call(method): getattr(Test, method)() @staticmethod def method1(): print('method1') @staticmethod def method2(): print('method2') Test.call("method1")
import numpy as np import matplotlib.pyplot as plt def sinespace(m=90, n=10): x = np.linspace(0, m, n) s = np.sin(np.deg2rad(x)) return (s/s[-1])*m s = sinespace() print(s) plt.plot(s, np.ones_like(s), 'ro') plt.show()
im = numpy.reshape(c, (32,32,3), order='F')
for rel in response.xpath('//div[@class="beschreibung"]'): item['title'] = rel.xpath(".//strong[contains(text(),"Release")]/following-sibling::*[1]/@value").extract() item['link'] = rel.xpath('.//span[@style="display:inline;"]//a[contains(text(),"Share")]/@href').extract() yield item
from urllib2 import urlopen f = urlopen('http://localhost:8000') for line in f: print line
>>> import collections.abc >>> import inspect >>> [v for k, v in vars(collections.abc).items() if inspect.isclass(v) and issubclass(list, v) ] [<class 'collections.abc.Container'>, <class 'collections.abc.Sequence'>, <class 'collections.abc.MutableSequence'>, <class 'collections.abc.Iterable'>, <class 'collections.abc.Sized'> ]
import os filename = os.path.basename(__file__) for f in os.listdir('/home/you/scripts'): if f != filename: print(f)
>>> a = etree.Element("a") >>> b = etree.SubElement(a, "b") >>> c = etree.SubElement(a, "c") >>> d1 = etree.SubElement(c, "d") >>> d2 = etree.SubElement(c, "d") >>> tree = etree.ElementTree(c) >>> print(tree.getpath(d2)) /c/d[2] >>> tree.xpath(tree.getpath(d2)) == [d2] True
print 'Word is', #Notice the trailing comma. This will not print a newline char faultyPrint()
>>> for i in range(3): ... print a[:-i or None] ... [0, 1, 2, 3, 4, 5] [0, 1, 2, 3, 4] [0, 1, 2, 3] >>> for i in [0, -1, -2]: ... print a[:i or None] ... [0, 1, 2, 3, 4, 5] [0, 1, 2, 3, 4] [0, 1, 2, 3]
if found.strftime('%I:%M:%S') == "05:29:00": print 'the same' else: print 'not the same'
import pandas as pd import pandas.core.common as com t = pd.DataFrame({'a':[1,2,3], 'b':[2,6,0.75], 'c':['foo','bar','beer']}) cols_to_check = ['a', 'b'] assert all(com.is_numeric_dtype(t[col]) for col in cols_to_check) # True
>>> 'hello'.isspace() False >>> ' \n\t '.isspace() True
>>> from datetime import datetime >>> t = datetime.strptime('07 Aug 2008, 16:25', '%d %b %Y, %H:%M') >>> t.strftime('%Y-%m-%d %H:%M:%S') '2008-08-07 16:25:00' >>>
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
from django.conf import settings def myview(request): settings.TEMPLATE_STRING_IF_INVALID = '%s' # '%s' will get expanded to the variable name that was not found ... template = render(request, 'myview.html', {}) settings.TEMPLATE_STRING_IF_INVALID = '' return template
from datetime import datetime, timedelta delta = datetime.now() - timedelta(hours=3) Model.objects.filter(date_time__gte=delta)
>>> def _func(): print "YOOOO" >>> globals()['Da func name!!1'] = _func >>> globals()['Da func name!!1']() YOOOO
import imp import os MODULE_EXTENSIONS = ('.py', '.pyc', '.pyo') def package_contents(package_name): file, pathname, description = imp.find_module(package_name) if file: raise ImportError('Not a package: %r', package_name) # Use a set because some may be both source and compiled. return set([os.path.splitext(module)[0] for module in os.listdir(pathname) if module.endswith(MODULE_EXTENSIONS)])
logging.Formatter.converter = time.gmtime
query(Article).filter(Article.focusid.in_(topic_ids)).order_by(desc(Article.datepublished)).limit(10)
content = """\ Date/Time Sep 12 11:13:42 Date/Time Sep 12 11:13:42 Date/Time Sep 12 11:13:42 Date/Time Sep 12 11:13:42""" import re re.findall("(?<=Date/Time\s)(\r*[\w :]+)", content) #>>> ['Sep 12 11:13:42', ' Sep 12 11:13:42', 'Sep 12 11:13:42']
A = np.array([[1,2,1,3], [2,5,2,1], [4,1,3,1]]) B = np.array([[2,1,5,1], [1,3,5,5], [4,2,1,2]]) C = np.maximum(A, B) # array([[2, 2, 5, 3], # [2, 5, 5, 5], # [4, 2, 3, 2]])
soup = BeautifulSoup(your_old_html) soup.body.insert(0, your_tag) print soup
>>> df = DataFrame(columns=('lib', 'qty1', 'qty2')) >>> for i in range(5): >>> df.loc[i] = [randint(-1,1) for n in range(3)] >>> >>> print(df) lib qty1 qty2 0 0 0 -1 1 -1 -1 1 2 1 -1 1 3 0 0 0 4 1 -1 -1 [5 rows x 3 columns]
import itertools df_results = list() orderings = itertools.permutations(df["b"].unique()) for ordering in orderings: df_2 = df.copy() df_2["b_key"] = pd.Categorical(df_2["b"], [i for i in ordering]) df_2.sort_values("b_key", inplace=True) df_2.drop(["b_key"], axis=1, inplace=True) df_results.append(df_2) for df in df_results: print(df)
def reverse(S, start, stop): if start < stop - 1: S[start], S[stop-1] = S[stop-1], S[start] return reverse(S, start+1, stop-1) # This should return as well else: return S if __name__ == "__main__": x = reverse([1, 2, 3], 0, 3) print x
>>> import platform >>> print platform.linux_distribution() ('Ubuntu', '12.04', 'precise')
latest_things = DataThingHistory.objects. order_by('datathing_id_id', '-timestamp'). distinct('datathing_id_id') lt_with_searchterm = DataThingHistory.objects. filter(id__in=latest_things, text_with_history__icontains=searchterm) search_results = DataThing.objects.filter(datathinghistory__in=lt_with_searchterm)
class rpartial(partial): def __init__(self, *args): self.result = args[-1] def __repr__(self): return self.result rpartial(function, arg1, arg2, undoredo)
$password = 'Pa55w0rd!'; $salt = '$6$x88yEvVg'; $handle = popen('python -c \'import crypt; print crypt.crypt("' . $password . '", "' . $salt . '")\'', 'r'); $text = fread($handle, 100); echo $text; pclose($handle);
def check_contain_chinese(check_str): for ch in check_str.decode('utf-8'): if u'\u4e00' <= ch <= u'\u9fff': return True return False
displayname = firstname + lastname or username
>>> df = df.convert_objects(convert_numeric=True) >>> df[:2] qid lang metric val 0 Q774 fr informativeness 1.350078 1 Q774 fr referencerate 0.002627 >>> df.dtypes qid object lang object metric object val float64
def allInRange(bst, left, right): if bst is EmptyValue: return if left <= bst.root <= right: print(bst.root) allInRange(bst.left, left, right) allInRange(bst.right, left, right)
t = tempfile.NamedTemporaryFile() tree.render(t.name, other_args...) t.file.seek(0) #reset the file pointer to the beginning svg_string = t.read() t.close()
self.buttons = [button1, button2, ..., button18] def updateButtonImage(self): for button in self.buttons: button.configure(image=self.newImage) updateButton = Button(root, text="Change button image", command=self.updateButton)
DOCK((?!DOCK).)+?onomatopoeia
user = authenticate(username=username, password=password) if user is not None: if user.is_active: login(request, user)
In [141]: df[df['value']!= df['value'].shift()] Out[141]: name value 0 Mark True 1 Anna False 2 Steven True 3 Karl False 5 Laure True
{% for item in mylst %} {% for a in item %} {{ a }} {% endfor %} {% endfor %}
data = [('uid=xxxxxx,ou=People,dc=xxxxxxx,dc=eu', {'departmentcode': ['xxxxx']})], [('uid=xxxxxx,ou=People,dc=xxxxxxx,dc=eu', {'departmentcode': ['xxxxx']})] departmentcode = [] for elem in data: departmentcode.append(elem[0][1]['departmentcode'])
sudo apt-get install python-pycurl cp /usr/lib/python2.7/dist-packages/pycurl* ~/.virtualenvs/myenv/lib/python2.7/site-packages/
my_menu_object.delete(index1, index2=None)
class A(object): def method(self): return "foo" try: import c_ext import types A.method = types.MethodType(c_ext.optimized_method, None, A) except ImportError: pass
def callback1(line, regex_match): #do what you want def callback2(line, regex_match): #do what you want... else regex_dict = { "first_regex" : callback1, "second_regex" : callback2, } file_to_check = open("the_file") for line in file_to_check: for regex, callback in regex_dict.iteritems(): result = re.match(regex, line) if result: callback(line, result) break
from unittest.mock import mock_open with patch('your_module.open', mock_open(read_data=JSON_TEST_DATA, create=True) as m: result = Channel().read() assert m.assert_called_once_with(expected_file_name)
import os if os.environ.has_key('REQUEST_METHOD'): # You're being run as a CGI script. else: # You're being run from the command line.
>>> matrix = [[1,2,3,4],[9,8,7,6],[4,8,2,6]] >>> dict(enumerate(zip(*matrix))) {0: (1, 5, 4), 3: (4, 8, 6), 2: (3, 7, 2), 1: (2, 6, 8)} >>> matrix = [] >>> dict(enumerate(zip(*matrix))) {}
gnome-terminal --tab -t django1 --working-directory="dir1" -e "python manage.py runserver 8000" \ --tab -t django2 --working-directory="dir2" -e "python manage.py runserver 8002"
import mcrypt import base64 KEY = 'xxx' IV = 'xxx' ALGORITHM = 'tripledes' MODE = 'ecb' def encrypt(data): cryptor = mcrypt.MCRYPT(ALGORITHM, MODE) cryptor.init(KEY, IV) return base64.b64encode(cryptor.encrypt(data)) def decrypt(data): cryptor = mcrypt.MCRYPT(ALGORITHM, MODE) cryptor.init(KEY, IV) return cryptor.decrypt(base64.b64decode(data))
import sys import pycuda.autoinit import pycuda.driver as cuda import numpy as np listToProcess = [] for i in range(0, 10): listToProcess.append(i) l2p = np.array(listToProcess, dtype=np.int32) listToProcess_gpu = cuda.mem_alloc(l2p.nbytes) cuda.memcpy_htod(listToProcess_gpu, l2p)
# end='\n' won't do anything since '\n' is already the default value for end print(listing['href']+","+ str(listing.string), end='\n\n')
from django.db import models from django.contrib.auth.models import User class MyUser(models.Model): user = models.OneToOneField(User) friends = models.ManyToManyField(User) # you can also define this relationship to MyUser
response.menu = [(T('Index'), False, 'http://www.google.com')]
import os, platform backup_filename = "output.back.json" filename = "output.json" serialised_str = json.dumps(...) with open(backup_filename, 'wb') as f: f.write(serialised_str) if platform.system() == 'Windows': os.unlink(filename) os.rename(backup_filename, filename)
>>> import ipaddress # IP is lowercase because this is a module >>> ipaddress.IPv4Address # IP is uppercase because this is a class <class 'ipaddress.IPv4Address'> >>> ipaddress.ip_network # IP is lowercase because this is a function <function ip_network at 0x0242C468> >>>
def your_view(request): if request.method == 'POST': num_results = request.POST.get('num_results') #rest of the code . . .
def plt_configure(xlabel='', ylabel='', legend=False): plt.xlabel(xlabel) plt.ylabel(ylabel) if legend: if isinstance(legend, dict): plt.legend(**legend) else: plt.legend()
while ... : currentEdge = next(e for e in userEdges if e.nodeTo == node) path.append(currentEdge.nodeFrom)
>>> len(open('cities5000.txt').read().splitlines()) 46957 >>> len(list(csv.reader(open('cities5000.txt'), delimiter='\t'))) Traceback (most recent call last): File "<stdin>", line 1, in <module> _csv.Error: field larger than field limit (131072) >>> len(list(csv.reader(open('cities5000.txt'), delimiter='\t', quotechar=None))) 46957
nstorms_good = [] for i in range(len(lowerBound)): if min37[i] >= lowerBound[i] and min37[i] < upperBound[i]: ... else: nstorms_good.append( i ) # process for nstorm in nstorms_good: ...
In [250]: np.isclose(a,b) Out[250]: array([[ True], [ True]], dtype=bool)
ctypes.c_char_p( liba.say_hi() )
conn = MySQLdb.connect(host='localhost') r = conn.cursor() r.execute('INSERT INTO users (hash) VALUES (%s)', m.digest()) conn.commit()
>>> import nltk >>> tokens = nltk.word_tokenize("People took to the streets and protested") >>> nltk.pos_tag(tokens) [('People', 'NNS'), ('took', 'VBD'), ('to', 'TO'), ('the', 'DT'), ('streets', 'NNS'), ('and', 'CC'), ('protested', 'VBD')]
def issorted(numlist): for i in range(1, len(numlist)): if numlist[i] < numlist[i-1]: #you want to return False and exit the function. #return is the best option here. return False #if the for loop succeeds, you want to return True by default return True
import numpy as np from matplotlib import pyplot as plt from mpl_toolkits.mplot3d import Axes3D X, Y, Z = np.mgrid[-1:1:10j, -1:1:10j, -1:1:10j] T = np.exp(-X**2 - Y**2 - Z**2) fig = plt.figure() ax = fig.add_subplot(111, projection='3d') scat = ax.scatter(X, Y, Z, c=T, cmap='jet') fig.colorbar(scat, shrink=0.5, aspect=5)
import pandas as pd df = pd.DataFrame(['循环经济', '3D打印', '再生经济'], columns=['block_name']) print df[df['block_name'].str.contains('经济')]
for tile in tiles: if camera.viewport.contains(tile.rect): tile.draw()
walker = iter(os.walk(IMAGE_DIRECTORY)) next(walker) for path, files, _ in walker: list_of_files.extend(os.path.join(path, f) in files)
In [14]: import numpy as np In [15]: list_of_lists=[[1,2,3],[4,5,2],[3,2,4]] In [16]: weights = [10, 2, 5.5] In [17]: (np.array(list_of_lists) * np.array(weights)[:, None]).tolist() Out[17]: [[10.0, 20.0, 30.0], [8.0, 10.0, 4.0], [16.5, 11.0, 22.0]]
if Number % Test == 0: Number = Number + 1 Test = 2 # you'll need to reset Test here else:
capitals = {"Alabama": "Montgomery", "Alaska": "Juneau", "Arizona": "Phoenix", "Arkansas": "Little Rock"} while True: x = str(raw_input('Please enter a state: ' )) if x in capitals: print capitals[x], "is the capital of", x
def call_this(): self.wpCpuUsage.display(cpu_percent(interval=1)) self.my_timer = QtCore.QTimer() self.my_timer.timeout.connect(call_this) self.my_timer.start(1000) #1 second interval
>>> a = [1, 2] >>> b = a >>> del a >>> a Traceback (most recent call last): File "<stdin>", line 1, in <module> NameError: name 'a' is not defined >>> b [1, 2]
>>> from igraph import * >>> g = Graph.Read_Ncol("stuff.csv", directed=True)
np.genfromtxt("file.txt", dtype=float, filling_values=99.99)
A,B,C = empty_matrices( 2, 3 ) # sets A, B, C as 3 2x2 matrices A, = empty_matrices( 2, 1 ) # sets A as a 2x2 matrix
import pprint pprint.pprint(globals()) pprint.pprint(locals())
from pywinauto import application from pywinauto import clipboard app = application.Application() app.start(r'C:\Program Files (x86)\sda 1.06\Steam Desktop Authenticator.exe', timeout=5) sda = app.window_(title_re="Steam Desktop Authenticator") time.sleep(2) sda.Copy.Click() code = clipboard.GetData() sda.Close()
import types class E(object): def __get__(self,obj,cls): def returned(*args): print(obj.__dict__) return types.MethodType(returned, obj, cls)
import atexit def stufftodowhenpythonquits(): # do some stuff atexit.register(stufftodowhenpythonquits)
def test_find_anagrams(): stringlist = [('aces'), ('sidebar'), ('adverb'), ('fuels'), ('hardset'), ('praised')] result = [] for str1 in stringlist: result.extend(word for word in get_dictionary_word_list() if anagram(word,str1)) return result
def iter_email(self): for k in sorted(self.fields.keys()): if k.startswith('email_'): yield self[k]
from selenium.webdriver.support.select import Select select = Select(driver.find_element_by_id('FCenter')) selected_option = select.first_selected_option print selected_option.text
from pyasn1.type import univ, namedtype, constraint class Pbkdf2params(univ.Sequence): componentType = namedtype.NamedTypes( namedtype.NamedType('salt', univ.OctetString()), namedtype.NamedType('iterationCount', univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1,MAX)), namedtype.NamedType('keyLength', univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, MAX)) )
import pickle pickle.dump(model, open('./output.bin', 'w'))
def Convert_toFullStop(text): return text.replace('_', '.')
class PlaylistViewSet(viewsets.ModelViewSet): serializer_class = PlaylistSerializer lookup_field = 'id' def perform_create(self, serializer): serializer.save(user=self.request.user) def perform_update(self, serializer): serializer.save(user=self.request.user)
def keyfunc(item): key, value = item if isinstance(key, str): return 1 else: return len(key) max(d.items(), key=keyfunc)[0]
sock.send(packed_data) sock.settimeout(3) try: received=sock.recv(61) except socket.timeout: ...
def get_exdate(self, id): return id and re.compile("Grid_exdate_").search(id) df = pd.DataFrame() exdate_list = [] for link in soup.find_all(id=self.get_exdate): exdate_list.append(link.string) df['Grid_exdate'] = exdate_list
>>> from sympy import symbols >>> x = symbols('x') >>> str(x**2) 'x**2'
import numpy as np def my_func(xs,param1,param2,param3): values = xs**param1 + xs*param2**2 + param3*xs return values xs = np.arange(0,10,0.1) params1 = np.arange(1,2,0.1) params2 = np.arange(1,2,0.1) params3 = np.arange(1,5,0.1) X, P1, P2, P3 = np.meshgrid(xs, params1, params2, params3, sparse=True, indexing='ij') my_func(X, P1, P2, P3)
import subprocess subprocess.check_output(['xdg-user-dir', 'DESKTOP'])
class StreamLogger(object): def __init__(self, input_stream, output_logger): self.input_stream = input_stream self.output_logger def run(self): while True: line = input_stream.readline() if not line: break output_logger.error(line)
def iter_new_list(old_list): for x in old_list: if needs_expanding(x): for y in expand(x): yield y else: yield x new_list = list(iter_new_list(old_list))
import os FILE = os.path.splitext(FILE)[0]
listen unix:/var/run/nginx.sock;
cur = g.db.query('select * from table_name where id=3') if cur.rowcount <= 0: * abort(404) ''Run delete command here''
>>> string = r"/\?%" >>> test = "This is my string % my string ?" >>> any(elem in test for elem in string) True >>> test2 = "Just a test string" >>> any(elem in test2 for elem in string) False
import nltk # Define the cfg grammar. grammar = nltk.parse_cfg(""" S -> NP VP NP -> 'DT' 'NN' VP -> 'VB' VP -> 'VB' 'NN' """) # Make your POS sentence into a list of tokens. sentence = "DT NN VB NN".split(" ") # Load the grammar into the ChartParser. cp = nltk.ChartParser(grammar) # Generate and print the nbest_parse from the grammar given the sentence tokens. for tree in cp.nbest_parse(sentence): print tree
ax = fig.add_subplot(111, aspect="equal")
import matplotlib.pyplot as plt fig1 = plt.figure() fig1.set_size_inches(5.5,4) fig1.set_dpi(300) ax = fig1.add_subplot(111) ax.grid(True,which='both') ax.hist(driveDistance,100) xlabel = ax.set_xlabel('Driven Distance in km') ax.set_ylabel('Frequency') fig1.savefig('figure1_distance.png', bbox_extra_artists=[xlabel], bbox_inches='tight')
ttk.Style().map("TEntry", foreground=[('disabled', 'black')], fieldbackground=[('disabled','white')] ) widget['state'] = 'disabled'
class Dog(models.Model): name = models.CharField() owner = models.ForeignKey( 'myapp.Owner', related_name="%(app_label)s_%(class)s_dogs") breeds = models.ManyToMany( 'myapp.Breed', help_text="Remember, animals can be mixed of multiple breeds.", related_name="%(app_label)s_%(class)s_dogs")
setA = set(listA) setB = set(listB) setA.intersection(setB)
import StringIO f = StringIO.StringIO() # create a file-like object book = xlwt.Workbook() sheet = book.add_sheet("XYZ") book.save(f) message = EmailMessage(subject="Subject", body="body", from_email="random@gmail.com", to=email_list) message.attach('filename.xlsx', f.getvalue(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") #get the stream and set the correct mimetype message.send()
Git.USE_SHELL=True
print [t.string for t in div.findAll(match_only_non_divs)] # [u'Navigate!', None, u'Main navigation', None, None, u'Home', None, u'About'] print [t.string for t in div.findAll(match_only_non_divs) if t.string] # [u'Navigate!', u'Main navigation', u'Home', u'About']
from datetime import date, timedelta def generate_month_days(year, month): start_date = date(year, month, 01) cur_date = start_date while cur_date.month == start_date.month: yield cur_date cur_date += timedelta(days=1) for d in generate_month_days(2015,11): print d
user_to_resource:i = user:j # key -> value forward map resources => (resource:i, created_timestamp) # sorted set count_resource:i = quantity # key -> value quantity map
import urllib def access_data(): f= urllib.urlopen('https://api.scraperwiki.com/api/1.0/datastore/sqlite?format=csv&name=example&query=select%20*%20from%20%60table%60') data=f.read() s = open('example.csv','w') s.write(data)
class Projet(object): def pathDirectory(self): print "- - in pathDirectory - -" self.pathDir= str(QFileDialog.getExistingDirectory(ui.pathTab1, 'Select Path','', QFileDialog.ShowDirsOnly)) def goFunc(self): print "- - In goFunc - -" print self.pathDir if __name__ == "__main__": p = Projet() p.pathDirectory() p.goFunc()
import urllib2 from lxml import etree url = 'http://www.nfl.com/stats/categorystats?archive=false&conference=null&role=OPP&offensiveStatisticCategory=null&defensiveStatisticCategory=INTERCEPTIONS&season=2014&seasonType=REG&tabSeq=2&qualified=false&Submit=Go' response = urllib2.urlopen(url) htmlparser = etree.HTMLParser() tree = etree.parse(response,htmlparser) text = tree.xpath('//a[contains(text(),"Miami Dolphins")]/parent::td/following-sibling::td[10]/text()') if text: print text[0].strip()
#!python3.4 import re for fn in ('a.txt','b.txt'): with open(fn) as fin: for line in fin.readlines(): title = re.search('^Title:(.*)$',line) if title: print(title.group(1))
^(?![ ])[0-9pqw+*# ().-]*(?<![ ])$
from threading import Timer def gameover(): print "Game Over" t = Timer(5.0, gameover) t.start()
.. include:: ./my_reusable_tip.txt
df=pd.read_excel(u"url/某物2008.xls", encoding=sys.getfilesystemencoding())
pythonbrew install --configure="--enable-shared" 2.7.2
For status, visit: http://localhost:12345/
In [85]: X = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) In [86]: np.random.choice(X, 3, replace=False) Out[86]: array([7, 5, 9])
def cmp(a, b): return (a["qty"] / (a["cost"] * a["ppl"])) - (b["qty"] / (b["cost"] * b["ppl"])) list = sorted(list, cmp)
for c in df.Code.unique(): (df[df.Code == c]).to_csv(c + '.csv', index=False) Writes these files: Code, DateTime, Value A1, 1/1/15 5:45,150 A1, 1/1/15 6:00,200 A1, 1/1/15 6:15,200 Etc...
import rpy2.robjects.lib.ggplot2 as ggplot2 class ThemeClassic(ggplot2.Theme): _constructor = ggplot2.ggplot2.theme_classic @classmethod def new(cls): res = cls(cls._constructor()) return res # Monkey patching ggplot2 ggplot2.theme_classic = ThemeClassic.new
with open("input1.txt") as f, open("input2.txt") as f2,open("output.txt","w") as f3: f2.next() # skip header to avoid writing A B C twice for line in f: f3.write(line) f3.write("\n") # separate last line from file 1 and first of file 2 for line in f2: f3.write(line)
fp = open('D://source.txt',"r+") fg = open('D://target.txt',"w") for line in fp: if line.find("banana") != -1: new_line = line.replace(line,"i like banana\n") fg.write(new_line) else: fg.write(line) fg.close() fp.close()
coll = {1:{'a','b'}, 2:{'b','e'}, 3:{'a','c'}, 4:{'b','f'}} print(coll) d=dict() for subs in coll.values(): for s in subs: d[s]=d.setdefault(s, 0)+1 m=max(d.values()) print(m)
all_results = x_results | y_results
new_list = [[element or '0.00' for element in sublist] for sublist in big_list]
In [14]: df Out[14]: A B 0 1 3 1 2 4 2 3 5 3 4 5 In [15]: df.loc[0] Out[15]: A 1 B 3 Name: 0, dtype: int64 In [16]: type(df.loc[0]) Out[16]: pandas.core.series.Series In [17]: df.loc[[0]] Out[17]: A B 0 1 3 In [18]: type(df.loc[[0]]) Out[18]: pandas.core.frame.DataFrame
from selenium import webdriver profile = webdriver.FirefoxProfile() profile.set_preference('network.http.phishy-userpass-length', 255) driver = webdriver.Firefox(firefox_profile=profile) driver.get("https://username:password@somewebsite.com/")
handlers: - url: /images static_dir: images - url: /.* script: myscript.py
mv server server.bk && mkdir server && awk -F, ' NR==FNR { map["server.bk/"$2".csv"]=$1; next } FNR==1 { close(out); out="server/"map[FILENAME]".csv"; print "date,"map[FILENAME] > out } { print > out } ' servers.csv server.bk/*.csv
class AlgoMixin(object): # Does not end in "Test"; not a subclass of unittest.TestCase. # You may prefer "AbstractBase" or something else. def test_empty(self): result = self.function(make_empty_graph()) self.assertTrue(result) class TestF(AlgoMixin, unittest.TestCase): function = staticmethod(f) # Doesn't need to be in setup, nor be an instance attribute. # But doesn't take either self or class parameter, so use staticmethod. def test_random(self): pass # Specific test for algorithm 'f'.
(apply 'make-comint-in-buffer "tool" buffer "/usr/bin/python3.3" nil "tool-name" "arg0")
>>> import bitarray >>> b = bitarray.bitarray() >>> b.fromstring('a') >>> b bitarray('01100001') >>> b.to01() '01100001' >>> b.fromstring('pples') >>> b.tostring() 'apples' >>> b.to01() '011000010111000001110000011011000110010101110011'
>>> array([[1, 2], [3, 4]]) array([[1, 2], [3, 4]])
curl.setopt(pycurl.USERAGENT, 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:8.0) Gecko/20100101 Firefox/8.0')
root = Tk() for row_number, row in enumerate(cursor): Label(root, text = "ID = " + str(row[0])).grid(column = 1, row = row_number) Label(root, text = "Forename = " + str(row[1])).grid(column = 2, row = row_number) print ("Surname = ", row[2]) # and so on. transform this too print ("DOB = ", row[3]) file.close() root.mainloop()
df.reset_index() df['date'] = df['date_timestamp'].dt.date del df['date_timestamp'] df2 = pd.pivot_table(df, index=['date', 'user'], columns=['ticket'], values='time', aggfunc=np.sum) df2.fillna(value=0, inplace=True) df2.plot(kind='bar', stacked=True)
>>> from scipy.spatial.distance import cdist >>> A = np.random.randn(540, 2) >>> B = np.random.randn(540, 2) >>> alpha = 1. >>> ind = np.all(cdist(A, B) > alpha, axis=0) >>> outliers = B[ind]
todo = [(0, 0)] while todo: i, j = todo.pop() print "processing ", i, j if i != 3 and j != 3: todo.append((i, j+1)) todo.append((i+1, j))
def fetchFuction(): QtGui.QApplication.setOverrideCursor(QtGui.QCursor(QtCore.Qt.WaitCursor)) # if incase function failed then restore it try: yourFetchFucn() QtGui.QApplication.restoreOverrideCursor() except: QtGui.QApplication.restoreOverrideCursor()
def session(request): return { 'session': request.session }
buttons = {} for x in range(gridx): buttons[x] = GridBtn(self,x,y,btn_id)
sum(len(x) for x in multilist)
import struct import random f = open('myfile','wb') for i in range(0,9): a = random.randint(0,255) f.write(struct.pack("=B", a)) f.close()
max(my_dict.items(), key=lambda x: x[1]['last_event'])[0]
fig = plt.figure() ax = fig.add_subplot(1, 1, 1, projection='3d') p_surf=ax.plot_surface(x,y,z,rstride=1,cstride=1,linewidth=0,antialiased=True,facecolors=cm.jet(np.sqrt(x*x + y*y + z*z))) m = cm.ScalarMappable(cmap=cm.jet) m.set_array(x*x + y*y + z*z) plt.colorbar(m) plt.show()
for _, maker in makes.iterrows(): contains_maker = models.models.str.contains(maker.makes) models.loc[contains_maker,('makes', )] = maker.makes
with open('/Users/d-sdf/test_erick/test/essays.csv') as csvfile: for i, line in enumerate(csvfile): with open("essay{}.txt".format(str(i+1)), "w") as txtfile: txtfile.write(line)
import os print "Test File 1" os.system("sudo python /home/ubuntu/MyFolder/TestFile2.py") #It will run TestFile2.py as Python Script
class TagListView(ListView): def get_queryset(self): startdate = timezone.now() - datetime.timedelta(days=7) enddate = timezone.now() return Tag.objects.filter(last_view__range=[startdate, enddate]).order_by('-views')[:10] context_object_name='most_viewed_list' template_name='tags/index.html' urlpatterns = patterns('', url(r'^$', TagListView.as_view(), name='index'), )
filename = "Foo.txt"; print 'Now, I will write a header to the original file to display copyright.' append_copy = open(filename, "r") original_text = append_copy.read() append_copy.close() append_copy = open(filename, "w") append_copy.write("Copyright -- Ryan -- 2014\n") append_copy.write(original_text) append_copy.close() print 'File closed and data written!'
cdef class A: cpdef foo(self, int i=*, x=*)
import random List_Of_Words = ["these","are","the","words"] random.shuffle(List_Of_Words)
Leaf (no children): a set {v} Introduce (exactly one child): a set S union {v} with child S (v not in S) Forget (exactly one child): a set S with child S union {v} (v not in S) Join (exactly two children): a set S with children S and S
dic = {m : my_function(m) for m in my_list}
payload = {'key1': 'value1', 'key2': 'value2'} >>> r = requests.post("http://www.example.com/webservice", data=payload) >>> print r.text
contents.insert(0, "import sys; sys.path.append('lib'); sys.path.append('device')")
i = 7*int(round(x/7))
RLIMIT_RSS Specifies the limit (in pages) of the process's resident set (the number of virtual pages resident in RAM). This limit only has effect in Linux 2.4.x, x < 30, and there only affects calls to madvise(2) specifying MADV_WILLNEED.
>>> dict={'000': 'A', '001': 'B', '010': 'C'} >>> >>> [int(ele, 2) for ele in dict] [2, 1, 0] >>> # getting this shuffled, since the `dict items` are `random` >>> >>> {int(k, 2): v for k, v in dict.items()} {0: 'A', 1: 'B', 2: 'C'}
class MyForm(forms.Form): def __init__(self, *args, **kwargs): super(MyForm, self).__init__(*args, **kwargs) for field in mylist: self.fields[field] = forms.CharField(max_length=100)
>>> s 'hello\nthere\r\nthis\n\ris a test' >>> r = '<br />' >>> s.replace('\r\n',r).replace('\n\r',r).replace('\r',r).replace('\n',r) 'hello<br />there<br />this<br />is a test' >>>
from urllib.request import urlretrieve for link in link_list: urlretrieve(link)
import re EXAMPLE_REGEX = re.compile("(.*):(.*)(?:e.?g.?|(?:for )?example)(.*)") print EXAMPLE_REGEX.findall('Foo: The companion of bar e.g. I have class called FooBar')
def grouper(n, iterable, fillvalue=None): "grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx" args = [iter(iterable)] * n return izip_longest(fillvalue=fillvalue, *args)
running = True while running: # This would start the event loop for event in pygame.event.get(): if event.type == pygame.QUIT: # This would be a quit event. running = False # So the user can close the program screen.fill(0,0,0) # This fills the screen with black colour. pygame.display.flip() # This "flips" the display so that it shows something pygame.quit()
for desc, val in data: if 'DAY' in desc: # do something with val elif 'WEEK' in desc: # do something else with val # etc...
import shlex testPopen = subprocess.Popen(shlex.split('bash -c "time {a}"'.format(a = app)), stdout=subprocess.PIPE,stderr=subprocess.PIPE, shell=False) out,err = testPopen.communicate() print(err)
$ touch empty.py $ time python3 empty.py real 0m0.158s user 0m0.033s sys 0m0.021s
import re text = ''' Started by upstream project "fcm-dummy-web" build number 99 originally caused by: Started by user Kaul, Kuber ''' m = re.search(r'Started by upstream project "([^"]+)" build number (\d+)', text) print("project = %s, build number %d" % (m.group(1), int(m.group(2))))
from sympy.printing import ccode from sympy.parsing.sympy_parser import parse_expr s = "8*pi**3*sin(x3)*sin(pi*z)**2" exp = parse_expr(s) In [55]: ccode(exp) Out[55]: '8*pow(M_PI, 3)*sin(x3)*pow(sin(M_PI*z), 2)'
from struct import * f = open('file', 'rb') print unpack('<i', f.read(4))[0] f.close()
from matplotlib.pyplot import show sns.set(style="darkgrid") titanic = sns.load_dataset("titanic") total = float(len(titanic)) # one person per row ax = sns.barplot(x="class", hue="who", data=titanic) for p in ax.patches: height = p.get_height() ax.text(p.get_x(), height+ 3, '%1.2f'%(height/total)) show()
>>> import ast >>> a = ast.literal_eval('(1, 2, 3)') >>> a (1, 2, 3) >>> b = ast.literal_eval('__import__("evil")') Traceback (most recent call last): File "<stdin>", line 1, in <module> File "/usr/lib/python2.6/ast.py", line 68, in literal_eval return _convert(node_or_string) File "/usr/lib/python2.6/ast.py", line 67, in _convert raise ValueError('malformed string') ValueError: malformed string
In [57]: df.groupby(df.sum(), axis=1).sum() Out[57]: 1 9 0 2 2 1 1 3 2 0 4 [3 rows x 2 columns]
sunrise = datetime.datetime.fromtimestamp(/*a timestamp*/) sunset = datetime.datetime.fromtimestamp(/*a timestamp*/) sunTime = sunset-sunrise ... print sunrise-datetime.timedelta(seconds=sunTime.total_seconds()*0.06)
env = db.DBEnv() env.open(None, db.DB_CREATE | db.DB_INIT_MPOOL) internal_db = db.DB(env) internal_db.open("the filename", "the internal db name", db.DB_BTREE, db.DB_RDONLY)
@asyncio.coroutine def async_gettter(): return (yield from http_client.get('http://example.com')) def sync_getter() return asyncio.get_event_loop().run_until_complete(async_getter())
import numpy as np probabilities = model.predict(image) classes = np.argmax(probabilities, axis=-1)
import signal,sys def signal_handling(signum,frame): print "you chose to end the program" sys.exit() signal.signal(signal.SIGINT,signal_handling) while True: pass
def index(): if request.vars.random: request.vars.itemId = generate_random_id() form = FORM(DIV(INPUT(_name='itemId', _type='text', _value=request.vars.itemId if request.vars else '', requires=[IS_NOT_EMPTY(), IS_LENGTH(maxsize=12)]), INPUT(_type='submit', _value='search', _name='search'), INPUT(_type='submit', _value="random_search", _name='random'))) return dict(message=form.process())
import glob import os for file_path in glob.glob('*9999.dbf'): os.unlink(file_path)
from bs4 import BeautifulSoup import urllib2 domain = 'http://www.renderx.com' url = 'http://www.renderx.com/demos/examples.html' page = urllib2.urlopen(url) soup = BeautifulSoup(page.read()) app = soup.find_all('a', text = "Applications") for aa in app: print domain + aa['href']
dict((k,v) for k,v in parent_dict.iteritems() if 2 < k < 4)
sys.path.append('/path/to/project')
>>> super(B, B).my_method <function my_method at 0x00D51738> >>> super(B, B).my_method is A.my_method True
def rt_iterator(depth, other-args): # store whatever info you need from this point in the tree if depth>= MAX_DEPTH: return # look at the nodes you want to expand from here for each node, in the order you want them expanded: rt_iterator(depth+1, other-args)
def decodeNumber(test): if not test: # check if test is empty return 1 count = 0 for i in mapping: if test.startswith(i): count += decodeNumber(test[len(i):]) return count for test in encodedCases: test = test.strip() print test, "==>" , decodeNumber(test)
sentence = [(4,'make'),(1,'sentence'),(0,'this'),(3,'now'),(5,'sense'),(2,'should')] print "[%s]" % ', '.join(word for _,word in sorted(sentence))
#!/usr/bin/env python import os, sys print(os.path.basename(sys.argv[0]))
SELECT * FROM table WHERE name LIKE '%smith%';
# ./manage.py help runserver Usage: manage.py runserver [options] [optional port number, or ipaddr:port] Starts a lightweight Web server for development. (...) # ./manage.py runserver my_private_ip:8000
import gobject gobject.threads_init()
class MyTestClass(unittest.TestCase): def setUp(self): self.my_obj = MyClass() self.my_obj_mock = flexmock(self.my_obj) def my_test_case(self): self.my_obj_mock.should_receive('other_method').and_return(1).and_return(2).and_return(3) self.my_obj.method_to_test()
class Customer(User): def __init__(self, name): super(Customer, self).__init__(name)
def findValue(list): result = [] i = 0 length = len(list) while i < length: x = list[i] if x < 0: result.append(i) i = i + 1 return result print(findValue([-3,7,-4,3,2,-6]))
with open('platenon.txt', 'w') as f: for platecode in range(100): f.write('KJA{0:03d}AA'.format(platecode))
for a in range(2, 3000): if all(a % k == 0 for k in range(1,11)): print a
def run_me(self): config_vars= self.get_properties('services','package_install','package_info') convig_vars_2 = self.get_properties('network','proxy_server','proxy_user')
if harris[0] > 10e-06
class Scrip_Master(models.Model): nse_markt_typ = models.ForeignKey(MDfile, blank=True, null=True) class Scrip_MasterAdmin(admin.ModelAdmin): ... search_fields = ['nse_markt_typ__mkt_type', ...]
request.get_full_path()
import urllib2 proxy_handler = urllib2.ProxyHandler({}) opener = urllib2.build_opener(proxy_handler) page = opener.open('http://www.google.com')
try: os.rename('/etc/foo', '/etc/bar') except IOError as e: if (e[0] == errno.EPERM): print >> sys.stderr, "You need root permissions to do this, laterz!" sys.exit(1)
<form id="my_form"> ... </form><button id="my_button">Clicky</button> <div id="info_div"></div> <script> $("#my_button").click(function(){ var data = $("#my_form").serialize() $("#info_div").load("/url/of/bit/to/load?"+data) })</script>
directions = ["up", "down", "left", "right"] start_dir = random.choice(directions) if start_dir == "left" or start_dir == "right": checkXstate(x) else: checkYstate(y)
words = [ "in", "india", "indian", "indian", "flag", "bull", "bully", "bullshit"] Result = sorted([ (sum([ w.startswith(prefix) for w in words ]) , prefix ) for prefix in words])[::-1]
orig = [start] for x in diff: orig.append(orig[-1] + x)
grouped = {} for event in list_of_events: key = tuple(event['date'].isocalendar()[:1]) grouped.setdefault(key, []).append(event)
from time import sleep class MyClass: def _my_func(self, x=sleep(1)): pass def my_func2(self): self._my_func() class MyClass2: def my_func2(self): def my_func(x=sleep(1)): pass my_func()
instances = MyModel.objects.only('name') data = [{'name': instance.name, 'favourite': instance.favouriteNumber()} for instance in instances]
import numpy as np import itertools with open('test.dat') as f_in: x = np.genfromtxt(itertools.islice(f_in, 1, 12, None), dtype=float) print x[0,:]
>>> from bs4 import BeautifulSoup >>> markup = '<font color="red">this text is red</font>' >>> soup = BeautifulSoup(markup) >>> soup.font <font color="red">this text is red</font> >>> new_tag = soup.new_tag('span') >>> new_tag['style'] = 'color: ' + soup.font['color'] >>> new_tag.string = soup.font.string >>> soup.font.replace_with(new_tag) <font color="red">this text is red</font> >>> soup <span style="color: red">this text is red</span>
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_subplot(111) rows = [] for x in range(0,14): rows.append(['a',14-x]) df = pd.DataFrame(rows) # df = df.set_index(0) df.plot(ax=ax) ax.set_xticks(df.index) ax.set_xticklabels(list(df[0]))
matrix = sparse.lil_matrix((len(ids), len(dict))) dict_from_dict = {word: ind for ind, word in enumerate(dict)} dict_from_id = {id: ind for ind, id in enumerate(id)} for i in words: matrix[dict_from_id[i['id']], dict_from_dict[i['word']] += 1.0
model = QtSql.QSqlTableModel(self, db) model.setTable("YourTable") model.select() tableview = QtGui.QTableView() tableview.setModel(model) tableview.show()
class C: x = 1 @classmethod def m(cls): return cls.x class D(C): x = 2 print(C.m()) # 1 print(D.m()) # 2
@register.assignment_tag(takes_context=True) def comment_metadata(context, parent): comments_queryset = parent.comments.visible() # Perform whatever analysis you want on the comments, # and return a variable that will be available in your template context.
start_time = start_time.replace(minute=ceil_to, second=0, microsecond=0)
b = type(a)(args)
matching = [string for string in words if string in op_text]
df.Age.replace(np.NaN, 'Is Null value', inplace=True) # Or, depending on your needs: df['Age'] = df.Age.replace(np.NaN, 'Is Null value') # Or without `replace` : df['Age'] = df.Age.apply(lambda x: x if not pd.isnull(x) else 'Is Null value')
>>> from pyquery import PyQuery as pq >>> d = pq("<html><p id="hello">Foo</p></html>") >>> d("#hello") [<p#hello.hello>] >>> d('p:first') [<p#hello.hello>]
tar = tarfile.TarFile.gzopen(os.path.join(backup_dir, directory+'.tar.gz'), mode='w', compresslevel=5)
users.objects.all().reverse()
>>> mylist = [1,2,3,2,3,5,6,3,7,8,6] >>> [i+1 for i in range(len(mylist)-1) if mylist[i]>mylist[i+1]] [3, 7, 10]
import numpy as np a = np.array([[ 7., 5.], [ 9., 3.], [ 7., 2.], [ 7., 8.], [ 6., 8.], [ 3., 2.]]) foo = 5*a[:,0] + a[:,1]**2
import requests bla = requests.head("https://t.co/0u0Jb2Pw7k", allow_redirects=True) print(bla) print(bla.url) >> <Response [404]> >> https://fr.wikipedia.org/wiki/Colonne_Vend%EF%BF%B4me
RosNetwork() { _chatter_pub = _n.advertise<std_msgs::String>(channel.c_str(),10); ros::Duration(1).sleep(); // optional, to make sure no message gets lost } void RosNetwork::sendMessage(string msg, string channel) { ... _chatter_pub.publish(msgToSend); ... }
from PIL import Image, ImageChops point_table = ([0] + ([255] * 255)) def black_or_b(a, b): diff = ImageChops.difference(a, b) diff = diff.convert('L') diff = diff.point(point_table) new = diff.convert('RGB') new.paste(b, mask=diff) return new a = Image.open('a.png') b = Image.open('b.png') c = black_or_b(a, b) c.save('c.png')
plt.figure() CS = plt.contour(X, Y,log_mu,levels = [-7,-8], colors=('k',),linestyles=('-',),linewidths=(2,)) CSF = plt.contourf(X, Y,log_mu) plt.clabel(CS, fmt = '%2.1d', colors = 'k', fontsize=14) #contour line labels CB = plt.colorbar(CSF, shrink=0.8, extend='both') plt.xscale('log') plt.yscale('log') plt.show()
import matplotlib.pyplot as plt import numpy as np from IPython import display %matplotlib inline for _ in range(3): x = np.random.randn(10) print(x) fig = plt.figure() ax = fig.add_subplot(111) ax.plot(x, x + 5, 'x') display.display(plt.gcf()) plt.close()
mask = 0b100100 for i in range(2, -1, -1): tmp = x & mask print(((tmp >> 3 + i) << 1) + ((tmp & (1 << i)) >> i)) mask >>= 1
import os yourfile = os.listdir("/home/user/Desktop/directory_which_only_contains_this_one_file")[0]
<p> {% for object in my_objects %} {{ object }}{% if not forloop.last %},{% endif %} {% endfor %} </p>
>>> r'\t\n\v\r'.decode('string-escape') '\t\n\x0b\r'
import sys encoding='utf-8' reload(sys) sys.setdefaultencoding(encoding)
>>> datetime.datetime.now().utcoffset() is None True
proc = subprocess.call(["C:\\absolute\\path\\some.exe ", fetched_data])
import subprocess task = subprocess.Popen("avconv -i video.mp4 2>&1 | grep Duration | cut -d ' ' -f 4 | sed -r 's/([^\.]*)\..*/\1/'", shell=True, stdout=subprocess.PIPE) time = task.communicate()[0] print time
def setMesaj(self): mesaj = unicode(self.toPlainText().toUtf8(), "utf-8") ascii = mesaj.encode("ascii", "ignore") if ascii != mesaj: self.setPlainText(ascii) if (len(mesaj)) > 159: QtGui.QMessageBox.warning(self, 'warning', "[WARN-1] Mesaj 160 karakterden fazla?") i = len(mesaj) - 159 mesaj = mesaj [:-i] self.setPlainText(mesaj)
g = 0 # index for age n = 0 # index for name st_names = [0] * 3 st_age = [0] * 3 for n in range(0, 3): # loop used in our book for loading arrays st_names[n] = raw_input("Enter Student name") st_age[n] = int(raw_input("Enter student age ")) # Change g to n, because that's the variable increment in the loop print st_names print st_age
data2014 = n.activate([0,1,0,1,0,1]) print 'data2014',data2014
[filename for path in dirs for filename in os.listdir(path)]
new_d = [] for x in d: if x not in new_d: new_d.append(x)
r".*([a-z])\1.*((?=(?!\1))[a-z])\2.*((?=(?!\1))(?=(?!\2))[a-z])\3.*"
mySet = {str(i) for i in {1010101, 20202030}} myList = ["1 1010101 20202030 15.3"] result = any(all(s in l for s in mySet) for l in myList) print(result)
a = int(100/3) # this will round down to 3 b = 100/3 # b = 33.333333333333336, a and b are not equal so we can generalize into the following def ceil(a, b): if (b == 0): raise Exception("Division By Zero Error!!") # throw an division by zero error if int(a/b) != a/b: return int(a/b) + 1 return int(a/b)
echo 'execfile("myFile.py")' | python manage.py shell
matches = filter(None, map(findit, out))
sample = [[["1"],"1"],["2",[["123",[[["23"]]],23],[12.3,"23"]]],[["5"],"1","1"]] def traverse(l, f): result = [] for item in l: if isinstance(item, list): result.append(traverse(item)) else: result.append(f(item)) return result
elsif ( $item =~ /leftclick/i ) { SendLButtonDown (); SendLButtonUp (); }
l1 = [[1,2,3,4], [10,11,12]] l2 = [[-1,-2,-3,-4], [-10,-11,-12]] print [zip(a,b) for a,b in zip(l1,l2)]
import urllib2 request = urllib2.Request("https://api.example.org/books/title", headers={"Accept" : "application/vnd.travis-ci.2+json"}) contents = urllib2.urlopen(request).read()
def trailing_zeros(longint): manipulandum = str(longint) return len(manipulandum)-len(manipulandum.rstrip('0'))
def checkio(array): listSum = 0 if array: for i in range(0, len(array), 2): listSum += array[i] finalValue = listSum * array[-1] return finalValue else: return 0
import spynner def content_ready(browser): if 'id="feedback-' in browser.html: return True br = spynner.Browser() br.load("http://www.venere.com/it/hotel/roma/hotel-ferrari/#reviews", wait_callback=content_ready) with open("test.html", "w") as hf: hf.write(br.html.encode("utf-8"))
https://myapp.appspot.com/_ah/api/.*
In [100]: x = ['a','b','c','d', 'e'] In [101]: y = [1 ,2 ,3 ,4, 2] In [102]: zip(x,y)).index(('b',2) Out[102]: 1 In [103]: zip(x,y) Out[103]: [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 2)]
# condition ? trueValue : falseValue trueValue if condition else falseValue
import requests url = "http://www.imdb.com/title/tt0089218/" headers = {"Accept-Language": "en-US,en;q=0.5"} r = requests.get(url, headers=headers)
>>> dic = {'voornaam': 'John', 'Achternaam': 'Davis', 'telephone': '123456', 'Mobielnummer': '234567'} >>> tr = {'voornaam':'first_name', 'Achternaam':'last_name', 'telephone':'phone', 'Mobielnummer':'mobile'} >>> dic = {tr[k]: v for k, v in dic.items()} {'mobile': '234567', 'phone': '123456', 'first_name': 'John', 'last_name': 'Davis'}
In [2]: import dateutil.parser as dparser In [3]: date = dparser.parse('5th November 2010') In [4]: date Out[4]: datetime.datetime(2010, 11, 5, 0, 0)
import random def myFunction(): n = random.randrange(10) if n==1: # do the stuff for the output being 1
request = 'GET {path} HTTP 1.1\r\nHost: {host}\r\nConnection: Close\r\n\r\n'.format(path=path, host=host)
converter= ( (0,) + 255*(255,) ).__getitem__ def black_or_white(img): return img.convert('L').point(converter)
import subprocess subprocess.Popen("C:\ThisIsTheFolderIWantToNavigateTo")
webapp2.Route(r'/products', handler='handlers.ProductsHandler', name='products-list', schemes=['https'])
return redirect('home')
FMDatabase *db = [FMDatabase databaseWithPath:@"/tmp/tmp.db"]; FMResultSet *s = [db executeQuery:@"SELECT * FROM myTable"]; while ([s next]) { //retrieve values for each record }
f = open(file_path, 'rb')
sed -i -e '$G' *.txt
>>> import os >>> import base64 >>> s = str(os.urandom(10000)) >>> encs=base64.b64encode(s) >>> s2 = base64.b64decode(encs) >>> cmp(s,s2) 0
def my_decorator(method): def redefined_method(*args, **kwargs): print('Starting decorator') method(args, **kwargs) # here ^, no star! return redefined_method
table_query = neo4j.CypherQuery(db, "merge (x: Table{name: 'table_param'}) return x") results = table_query.execute() for r in results: # get the node you return in your query my_node = r[0] # get the properties of your node props = my_node.get_properties()
In [5]: s = "Client: Company X" In [6]: print s.split(":")[-1] Company X In [7]: s = "Fund: ABCD" In [8]: print s.split(":")[-1] ABCD
to_translate = 'Hola como estas?' print("%s >> %s" % (to_translate, translate(to_translate))) print("%s >> %s" % (to_translate, translate(to_translate, 'fr')))
growth.clip(-maxg, maxg, out=growth)
import hashlib actually_random = hashlib.sha1(uuid).digest()
sample1 = pd.read_csv('sample_data.csv', dtype=str, error_bad_lines = False) sample2 = pd.read_csv('sample2.csv', dtype=str, error_bad_lines = False) sample_concat = pd.concat([sample1, sample2], keys = ['one', 'two'], ignore_index=True)
import itertools as it list1=['12aa','2a','c2'] list2=['2ac','c2a','1ac'] # First- Finding combinations of each two item from list1. first = list(it.combinations(list1, 2)) # Second- Finding combinations of each two item from list2. second = list(it.combinations(list2, 2)) # Third- Finding combinations of each two items from list1 and list2 third = list(it.product(list1, list2)) # Fourth- Calculating each combinations total length for combination in first: # first, second, third print combination, len(''.join(combination))
class Child(Parent): def __init__(self, *args, **kwargs): super(Child, self).__init__(*args, **kwargs)
import sys groups = {} for l in sys.stdin: group, value = l.split() s = groups.get(group, 0) groups[group] = s + int(value) print groups
import subprocess #code prog = subprocess.Popen(['python', filename, args]) #more code
from keras.models import Sequential def train(model): model.build() .... for iteration in range(1, 200): .... model.fit(X_train, y_train, ...) .... .... if __name__ == '__main__': try: model = Sequential() train(model) except KeyboardInterrupt: model.save_weights("weights.hdf5")
>>> from astroquery.simbad import Simbad >>> Simbad.add_votable_fields('measurements') >>> acen = Simbad.query_object('alpha centauri')
if isinstance(iterable, basestring): iterable = iterable.split(',')
a=[1,2,3] b=['a','b'] c=[1,2,3,4] d=[1,2,3] a==b #returns False a==c #returns False a==d #returns True
>>> [ord(c) for c in '\x0f\x07UUU'] [15, 7, 85, 85, 85]
#short hand: metals.xs('BI', level=0).xs('Arsenic, Dissolved', level=0).xs(1, level=1) # more verbose metals.xs('BI', level='bmp_category').xs('Arsenic, Dissolved', level='parameter').xs(1, level='storm') # two chained `ix` calls: metals.ix['BI', 'Arsenic, Dissolved'].ix[:, 1]
NAMESPACES = {'ns': 'http://www.starstandard.org/STAR/5', 'ns1': 'http://www.openapplications.org/oagis/9'} ro_xml = '{}.xml'.format(6001265) parser = etree.XMLParser(ns_clean=True) tree = etree.parse(ro_xml, parser) vehicle = {} vehicle_info = tree.xpath(twc.XML_VEHICLE_INFO, namespaces=NAMESPACES) for child in vehicle_info: vehicle.update({child.tag: child.text}) model = residence['{%s}Model' % NAMESPACES['ns']] print model
import pythoncom, pyHook def uMad(event): return False hm = pyHook.HookManager() hm.MouseAll = uMad hm.KeyAll = uMad hm.HookMouse() hm.HookKeyboard() pythoncom.PumpMessages()
search = Account.search() response = search[:1].execute() for hit in response: print hit
def callback(future): # here you want to do some stuff with the value future.result() EXECUTOR.submit( your_task_func ).add_done_callback( lambda future: tornado.ioloop.IOLoop.instance().add_callback( partial(callback, future)))
class MySignupView(SignupView): def get_context_data(self, **kwargs): ret = super(MySignupView, self).get_context_data(**kwargs) ret['all_tags'] = Tags.get_tags() return ret
>>> data = (0,1) , (0,2), (1,1), (1,2) >>> if [x for x in data if x[0] >= 1 and x[1] < 3 ]: ... print("ok") ... ok
<group> <field name="date_start" position="attributes"><!--removed / from the end--> <attribute name="invisible">True</attribute> </field> <field name="date_end" position="replace"/> <field name="warehouse_id" widget="selection" groups="stock.group_locations"/> <field name="company_id" groups="base.group_multi_company" widget="selection"/> </group>
>>> import re >>> r = r'^(\d+),?$' >>> re.match(r, '123,').group(1) '123'
class ValidationRule: def __init__(self, **kwargs): self.__dict__.update(kwargs)
$ python3 Python 3.2.5 (default, Jul 30 2013, 20:11:30) [GCC 4.8.1] on cygwin Type "help", "copyright", "credits" or "license" for more information. >>> import math >>> math.ceil(1.232323) 2 >>> math.ceil(5.12521369) 6 >>> math.ceil(7.12532656) 8
pid=subprocess.Popen(...)//invoke the shell command which creates a bunch of files pid.wait()//wait until terminates for f in a folder open f and write something commands..
~/google_appengine/appcfg.py update my/app/location
with open('file.text', 'r') as fp: for line in fp: match = re.search('string=([^,]+)', line) if match: print match.group(1)
end_time = time.time() + timeout index = child.expect([..], timeout=timeout) remaining_time = end_time - time.time()
for root, dirs, files in os.walk("."): if ".hg" in dirs: dirs.remove(".hg") for f in files: print os.path.join(root, f)
fig = plt.figure() ax = fig.add_subplot(111) # Need to do this so we don't have to worry about how many lines we have - # matplotlib doesn't like one x and multiple ys, so just repeat the x lines = [] for y in ys: lines.append(x) lines.append(y) ax.plot(*lines) fig.savefig("filename.png")
with open(filename, 'r') as f: # Do things with f # f is automatically closed
>>> arr = np.random.rand(1000, 1000) >>> %timeit [sum(i >= 0.5 for i in arr.T[c]) for c in xrange(len(arr))] 1 loops, best of 3: 1.58 s per loop >>> %timeit np.sum(arr >= 0.5, axis=0) 1000 loops, best of 3: 1.53 ms per loop
>>> ['a{}'.format(i) for i in range(1, 20)] ['a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'a10', 'a11', 'a12', 'a13', 'a14', 'a15', 'a16', 'a17', 'a18', 'a19'] >>> ','.join(['a{}'.format(i) for i in range(1, 20)]) 'a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19'
import struct import mmap with open('test.bin', 'wb') as f: f.truncate(100) with open('test.bin', 'r+b') as f: m = mmap.mmap(f.fileno(), 0) mv = memoryview(m) for ind in range(25): struct.pack_into('>l', mv, ind * 4, ind)
import requests from BeautifulSoup import BeautifulSoup as bs #grab HTML r = requests.get(r'http://www.amazon.com/s/ref=sr_pg_1?rh=n:172282,k%3adigital%20camera&keywords=digital%20camera&ie=UTF8&qid=1343600585') html = r.text #parse the HTML soup = bs(html) results= soup.findAll('div', attrs={'class': 'data'}) print results
class Task(models.Model): CANCELLED = -1 REQUIRES_ATTENTION = 0 WORK_IN_PROGRESS = 1 COMPLETE = 2 Status = ( (CANCELLED, 'Cancelled'), (REQUIRES_ATTENTION, 'Requires attention'), (WORK_IN_PROGRESS, 'Work in progress'), (COMPLETE, 'Complete'), ) status = models.IntegerField(choices=Status, default=REQUIRES_ATTENTION)
sorted(files, key=lambda d: d["name"].lower().replace("_", "}"))
''.join([ bin(int(x))[2:].rjust(8,'0') for x in '123.123.123.123'.split('.')])
pip install --install-option="--prefix=$PREFIX_PATH" package_name
def convert_type(cell, typ): try: return typ(cell) except TypeError: return "No_Data" # These lines go below 'tl = my_reader.next()' in your code col_types = [int, str, int, float, float, float, float, float, float, float, float, list] new_row = tuple(convert_type(cell, typ) for cell, typ in zip(tl, col_types)) per_table[tl[1]] = new_row
ageNode.xpath("./Tom") ageNode.xpath("Tom")
if ($fileString =~ m!^($perlCmt|$cCmt)?#\!\s*.*?/perl|^($perlCmt|$cCmt)?#\!\s*.*?/sh|^($perlCmt|$cCmt)?#\!\s*.*?/python!)
class MyFrame1 (wx.Frame): def __init__(self): super(MyFrame1, self).__init__() fluid_sizer = wx.BoxSizer(wx.HORIZONTAL) self.m_textCtrl1 = wx.TextCtrl(self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0) fluid_sizer.Add(self.m_textCtrl1, 0, wx.ALL, 5) self.SetSizer(fluid_sizer) self.Layout()
def g(x): return 2 * x ** 2 + x + 5
//tr/th[@scope="row"][.="Title"]/following-sibling::td[1]/text()
import subprocess subp = subprocess.Popen(["cmd"]) subp.wait() print 'process %d finished' % subp.pid
python manage.py makemessages -l th -l tl -l vi
(?<=name=")[a-zA-Z0-9]*
import numpy as np minval = np.min(a[np.nonzero(a)]) maxval = np.max(a[np.nonzero(a)])
class HexFile(object): def __init__(self, fp, wordsize=4): self.fp = fp self.ws = wordsize def __iter__(self): while True: data = self.fp.read(self.ws) if not data: break yield data.encode('hex')
This file is placed here by pip to indicate the source was put here by pip. Once this package is successfully installed this source code will be deleted (unless you remove this file).
>>> s = '2 - 3' >>> two, three = s.split(' - ') >>> two '2' >>> three '3'
class X(object): def get_i(self): return self._i def set_i(self, value): self._i= value i= property(get_i, set_i)
soup = BeautifulSoup("<html><body><span>This is my text</span></body></html>") span = soup.find('span') str(span) # Outputs '<span>This is my text</span>'
text = "He was carefully disguised but captured quickly by police." lines = [text, 't', 'l'] for line in lines: if re.findall(r"\w+ly", line): print line
def combined(name, value): foo(**{name:value})
import requests response = requests.get('http://your.graphite.host.com/render?target=queue.prod.high.total_queues&format=json') data = response.json()
D = { 'h' : 'hh' , 'e' : 'ee'} str = 'hello' returns = [] # create list for storing return value from function def myLambda(x): # function does lambda return D.get(x,x) for x in str: #map==> pass iterable returns.append(myLambda(x)) #for each element get equivalent string from dictionary and append to list print ''.join(returns) #join for showing result
from StringIO import StringIO import struct class BinaryIO(StringIO): def writepack(self, fmt, *values): self.write(struct.pack('<' + fmt, *values)) def to_binary_example(): data = BinaryIO() data.writepack('I', 42) data.writepack('II', 1, 2) return data.getvalue()
def compare(this, that, encoding="utf-8"): // convert this to str if isinstance(this, bytes): this = str(this, encoding) // convert that to str if isinstance(that, bytes): that = str(that, encoding) return this == that
>>> dir(x) ['__call__', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'args', 'func', 'keywords']
def tokenize(phrase, stop_words=()): stop_words = '|'.join(re.escape(x) + r'\b' for x in stop_words) other = '\s+|\w+|[^\s\w]+' regex = stop_words + '|' + other if stop_words else other return re.findall(regex, phrase)
test = ["80010","80030","80050"] newtest = [x[:-1] for x in test]
import cexapi api = cexapi.API(username, api_key, api_secret)
data = request.body.read()
import a import b
myvar = !some_command --option1 --option2 foo bar
x, x1, x3 = symbols('x x1 x3') L=Symbol("L") eqn=(x*(L**2))+(x1*(L*1))+(x3*(L**0)) s = solve(eqn,L) lambdify([x, x1, x3], s)(ufloat(10,0.2), ufloat(8,0.01), ufloat(25,2))
body.append(paragraph([('This is italic text', 'i')]))
for i in xrange(1, 100): subprocess.call(["./task.sh", arg1], cwd=("/some%d" % i))
In [126]: class myint(int): def __add__(self,a): print "{0} plus {1}".format(self,a) .....: In [127]: a=myint(5) In [128]: b=myint(6) In [129]: a+b 5 plus 6
print("UDP target IP:", UDP_IP) print("UDP target port:", UDP_PORT) print("message:", MESSAGE) sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP sock.sendto(bytes(MESSAGE, "utf-8"), (UDP_IP, UDP_PORT))
import networkx as nx import matplotlib.pyplot as plt G = nx.DiGraph() G.add_edges_from(\[(0,1), (0,2), (1,1), (1,2)\]) nx.write_dot(G,'graph.dot') # then run dot -Tpng graph.dot > graph.png
import inspect, re def varname(p): for line in inspect.getframeinfo(inspect.currentframe().f_back)[3]: m = re.search(r'\bvarname\s*\(\s*([A-Za-z_][A-Za-z0-9_]*)\s*\)', line) if m: return m.group(1) if __name__ == '__main__': spam = 42 print varname(spam)
execfile("myfuncs.py")
<%include file="post.mako" args="post=post" /> ... #post.mako <%page args="post"/> <h1>${post.title}</h1> ...
self.__dict__.update( variable1 = 1, variable2 = 2, variable3 = 'hello')
>>> generator_fn.__code__.co_flags >>> 99 >>> normal_fn.__code__.co_flags >>> 67
PyObject obj = interpreter.eval("True"); boolean i = ((PyInteger) obj).asInt() != 0;
df.drop_duplicates(['col1','col2'])
integral = integrate.simps(y*x*2*pi,x)
import re # Don't bother matching everything, just the bits that matter. pat = re.compile(r'AssemblyFileVersion.*\.(\d+)"') # ... lines omitted which set up read_file, write_file etc. for line in read_file: m = pat.search(line) if m: start, end = m.span(1) line = line[:start] + str(int(line[start:end]) + 1) + line[end:] write_file.write(line)
>>> strings = ["one two", "three four", "five six"] >>> [value for s in strings for value in s.split()] ['one', 'two', 'three', 'four', 'five', 'six']
>>> re.sub(r'^\s+|\s+$', '', ' hello world ') 'hello world'
capture = cv.CaptureFromCAM(0) frame = cv.QueryFrame(capture) #some code ... del(capture)
from Tkinter import * def dummy(root): root.after(1000, dummy, root) print '', def main(): root = Tk() root.withdraw() dummy(root) mainloop() if __name__ == "__main__": main()
gdk_pointer_ungrab(GDK_CURRENT_TIME); gdk_keyboard_ungrab(GDK_CURRENT_TIME); gtk_grab_remove(menu);
from selenium import webdriver from selenium.webdriver.common.keys import Keys from BeautifulSoup import BeautifulSoup import time browser = webdriver.Firefox() baseURL="http://www.codechef.com/users/peeyushy95" browser.get(baseURL) time.sleep(5) soup=BeautifulSoup(browser.page_source) L=str(soup) f_out=open("/home/adi/experi/data_up.txt","w") f_out.write(L) f_out.close()
with self.canvas: rect = Rectangle(pos=(0, 0), size=(10, 10)) rect.pos = (50, 50)
>>> re.findall(r"(?<![\$\d])(\d+)", "I spent $100 on 10 12-inch subs") ['10', '12']
import os import tempfile import subprocess def ocr(path): temp = tempfile.NamedTemporaryFile(delete=False) process = subprocess.Popen(['tesseract', path, temp.name], stdout=subprocess.PIPE, stderr=subprocess.STDOUT) process.communicate() with open(temp.name + '.txt', 'r') as handle: contents = handle.read() os.remove(temp.name + '.txt') os.remove(temp.name) return contents
import re fin = open('snp.txt','r').readlines() l = [ re.match('.*(\(.*?\))',line).group(1) for line in fin] l = [ '%d %f\n'%eval(i) for i in l] with open('o.txt','w') as fout: fout.writelines(l) fout.close()
def override(p, methods): oldType = type(p) newType = type(oldType.__name__ + "_Override", (oldType,), methods) p.__class__ = newType class Test(object): def __str__(self): return "Test" def p(self): print(str(self)) def monkey(x): override(x, {"__del__": p}) a=Test() b=Test() monkey(a) print "Deleting a:" del a print "Deleting b:" del b
#!/usr/bin/python from datetime import datetime import time your_time = 1.28946608161e+12 print time.strftime("%a, %d %b %Y %H:%M:%S +0000", datetime.fromtimestamp(your_time/1000).timetuple() )
h2_details = soup.find('h2', text='Case details') table = h2_details.find_next_sibling('table') details = {} for row in table.find_all('tr'): cells = row.find_all('td', limit=2) details[cells[0].string] = cells[1].string
ghost = Ghost() ghost.frame('<your frame name>') g.content # Your frame content g.frame() # ascent back to root frame
db.users.aggregate([ { "$match": { "name": { "$in": [ "John", "Peter" ] } }}, { "$unwind": "$users" }, { "$group": { "_id": "$users", "count": { "$sum": 1 } }}, { "$match": { "count": { "$gt": 1 } }}, { "$group": { "_id": null, "count": { "$sum": 1 } }} ])
In [72]: df = pd.DataFrame({'accredited': ['10/10/2011', 'is not accredited']}) In [73]: df Out[73]: accredited 0 10/10/2011 1 is not accredited In [74]: df['accredited'] = df['accredited'].str.replace(r'(?i).*not.*', 'not accredited') In [75]: df Out[75]: accredited 0 10/10/2011 1 not accredited
class BigWidget(QWidget): def __init__(self, parent=None, **kwargs): QWidget.__init__(self, parent, **kwargs) ... def DrawManyWidgets(self, parent): self.setVisible(False) ... self.setVisible(True)
import subprocess subprocess.call('nircmd.exe win close class "CabinetWClass"' , shell=True)
Class MyTable: def __init__(self): self.dates = [] // where dates[i] might be something like {date: [P, A, ...]} // you will have to figure out how and what do you want to represent self.data = [] // where data[i] is something like {ab:[P, A, B, None]} // define different methods to fill dates and data fields
import os, sys filename = os.path.splitext(os.path.basename(sys.argv[0]))[0] if not os.path.exists(filename): # filename does not exists, we will emulate cmd behaviour sys.stderr.write("'%s' is not recognized as an internal or external command,\noperable program or batch file." % filename) sys.exit(9009) ret = os.system("python %s %s" % ( filename, " ".join(sys.argv[1:]) )) exit(ret)
PyObject *function = PyObject_GetAttrString(add_module, "add"); PyObject *args = PyTuple_New(0); PyObject *kwargs = Py_BuildValue("{s:i}", "b", 5) result = PyObject_Call(function, args, kwargs); Py_DECREF(kwargs); Py_DECREF(args); Py_DECREF(function);
python manage.py my_cool_command
import os import shutil srcfile = 'a/long/long/path/to/file.py' dstroot = '/home/myhome/new_folder' assert not os.path.isabs(srcfile) dstdir = os.path.join(dstroot, os.path.dirname(srcfile)) os.makedirs(dstdir) # create all directories, raise an error if it already exists shutil.copy(srcfile, dstdir)
return HttpResponse("<script>alert('hello world');</script>")
class CustomImage(Image): """ Override - to use inline image instead; inexplicable bug with non inline images """ def draw(self): lazy = self._lazy if lazy>=2: self._lazy = 1 self.canv.drawInlineImage(self.filename, getattr(self,'_offs_x',0), getattr(self,'_offs_y',0), self.drawWidth, self.drawHeight ) if lazy>=2: self._img = None self._lazy = lazy
>>> a = ('helloWorld', 20) >>> a[1] 20 >>>
class LiveServerTestCase(TransactionTestCase): static_handler = _StaticFilesHandler @property def live_server_url(self): return 'http://%s:%s' % ( self.server_thread.host, self.server_thread.port)
a = "0343523" a.isdigit() True b = "934sjsspam" b.isdigit() False
n = int(input("Enter a positive integer value: ")) for i in range(n, 0, -1): if i == 1 or i == n: print("*" * i) else: print("*" + (" " * (i - 2)) + "*")
def run_process(record): result = ping(record) pool = Pool(processes=10) results = pool.map_async(run_process, [records]) for r in results.get(): write_to_database(r)
@app.route('/callback/<address>') def callback(address): sid = get_sid_from_address(address) socketio.send('payment seen on blockchain', room=sid) @socketio.on('address') def socketlisten(address): associate_address_with_sid(address, request.sid)
import csv from glob import iglob unique_headers = set() for filename in iglob('*.csv'): with open(filename, 'rb') as fin: csvin = csv.reader(fin) unique_headers.update(next(csvin, []))
def get(*keys): ret = mydict for key in keys: ret = ret[key] return ret
persons = [] for human in world: attributes = {} attributes['name'] = human['name'] attributes['eye_color'] = human['eyes'] persons.append(attributes)
import os for root,dirs,files in os.walk(path): for fname in files: if fname.endswith('.html'): fq = os.path.join(root, fname) for line in open(fq): if 'sub_middle_1col' in line: ...
>>> import urllib >>> response = urllib.urlopen( 'http://api.hostip.info/get_html.php?ip=12.215.42.19&position=true').read() >>> print response Country: UNITED STATES (US) City: Aurora, TX Latitude: 33.0582 Longitude: -97.5159 IP: 12.215.42.19
import heapq elements = heapq.nsmallest(4, my_list, key=f) foo = choice(elements)
from __future__ import print_function # remove the above line if you're using Python 3.x with open('color.txt') as f: colors = ', '.join(f.read().splitlines()).split(', ') with open('car.txt') as f: for i in f: for car in i.strip().split(', '): for color in colors: print(car, color)
> x = df.ix[[0]] > y = df.ix[[1]] > type(x) pandas.core.frame.DataFrame > type(y) pandas.core.frame.DataFrame
def sum(a,b): if a>0 and b>0: return str(a*b) + "\n" + str(sum(a,b-1)) else: return ""
In [18]: df['labels'] = df['labels'].apply(lambda x: [w.lower() for w in x]) df Out[18]: labels 0 [cat, dog, horse] 1 [pig, fish, giraffe]
import re u_id = input("Input User ID: ") #DECLARE u_id : string rex = re.compile("^[A-Z][a-z]{2}[0-9]{3}$") if rex.match(u_id): print("Correct format") else: print("Incorrect")
import re ... pattern = re.compile("|".join(searchlist)) with open("your_file") as f: for line in f: if not re.search(pattern, line): print(line)
time_a = time.time() # ... some operations ... ten_minutes = 10 * 60 time_span = time.time() - time_a if time_span > ten_minutes: # time span is larger than 10 minutes.
from Tkinter import * root = Tk() var = IntVar() # instantiate the IntVar variable class var.set(0) # set it to 0 as the initial value # the button command is a lambda expression that calls the set method on the var, # with the var value (var.get) increased by 1 as the argument Button(root, text="Next Customer", command=lambda: var.set(var.get() + 1)).pack() # the label's textvariable is set to the variable class instance Label(root, textvariable=var).pack() mainloop()
if success: # On Success - Mark message as processed. ch.basic_ack(delivery_tag=method.delivery_tag) else: # Else - Mark message as rejected and move it back to the queue. ch.basic_reject(delivery_tag=method.delivery_tag, requeue=True)
>>> [any(i in j for i in a) for j in b] [True, False, True, False]
# emails is a set of emails for line in fileinput.input("csvfile.csv",inplace =1): parts = line.split(',') if parts[3] not in emails: print line
import time class something(object): def __init__(self,c): self.c=c def inc(self): new = self.c+1 # if the thread is interrupted by another inc() call its result is wrong time.sleep(0.001) # sleep makes the os continue another thread self.c = new x = something(0) import threading for _ in range(10000): threading.Thread(target=x.inc).start() print x.c # ~900 here, instead of 10000
def getcol(cols, index, default=None): try: return cols[index].findAll(text=True)[0] except IndexError: return default
from itertools import ifilter, islice def ello_bruce(limit=None): for i in islice(ifilter(predicate, xrange(10**5)), limit): # do whatever you want with i here
from collections import defaultdict words_seen = defaultdict(list) for word,filedate in get_words(): words_seen[word].append(filedate)
@app.context_processor def inject_test(): return {'test': 'Available to all'}
brew install python brew install sdl sdl_image sdl_mixer sdl_ttf smpeg portmidi /usr/local/share/python/pip install hg+http://bitbucket.org/pygame/pygame
In [13]: with open("filelists.txt") as f: for line in f: data=re.findall(r"_H\d+_M\d+_S\d+",line) if data: print [x.strip("HMS") for x in data[0].split("_")[1:]] ....: ['1', '1', '1'] ['1', '1', '2'] ['2', '1', '1'] ['2', '1', '2']
class A(object): pass class A: pass
import gc def foo(): code = """ class DummyA(object): pass """ context = {} exec code in context exec code in context gc.collect() print len(gc.garbage), len(gc.get_objects()) gc.enable() foo(); foo() # amount of objects doesn't increase gc.set_debug(gc.DEBUG_LEAK) foo() # leaks
dict((vert, i) for (i, cl) in enumerate(clusters) for vert in cl.vertices)
set_script_timeout(time_to_wait) Set the amount of time that the script should wait during an execute_async_script call before throwing an error. Args : time_to_wait: The amount of time to wait (in seconds) Usage : driver.set_script_timeout(30)
fetcher_dict = {'X':XDataFetcher,'Y':YDataFetcher} data_source = ... fetcher = fetcher_dict[data_source]()
query = "SELECT *, ((ACOS(SIN(%s * PI() / 180) * SIN(lat * PI() / 180) + COS(%s * PI() / 180) * COS(lat * PI() / 180) * COS((%s - lon) * PI() / 180)) * 180 / PI()) * 60 * 1.1515) AS distance FROM app_car WHERE price BETWEEN %s AND %s HAVING distance<=%s ORDER BY distance ASC" cars = Car.objects.raw(query, [lat, lat, lon, min_price, max_price, miles]) return HttpResponse(len(list(cars))
def pythagorus(a: int, b: int) -> int: """ calculate a**2 + b**2 ... usage example, etc ... """ return math.sqrt(a**2 + b**2)
>>> import win32file >>> win32file.GetVolumeNameForVolumeMountPoint("C:\\") '\\\\?\\Volume{50c800a9-c62e-11df-b5bb-806e6f6e6963}\\' >>> win32file.GetVolumeNameForVolumeMountPoint("K:\\") Traceback (most recent call last): File "<stdin>", line 1, in <module> pywintypes.error: (87, 'GetVolumeNameForVolumeMountPoint', 'The parameter is incorrect.')
import pylab as plt import numpy as np x=np.arange(1,1e5) # Normal plot #plt.plot(x,x,'o-') # Log plot idx=np.logspace(0,np.log10(len(x)),10).astype('int')-1 plt.plot(x[idx],x[idx],'o-') plt.xscale('log') plt.yscale('log') plt.show()
print('Let\'s print "Happiness" out') print("Let's print \"Happiness\" out") print('''Let's print "Happiness" out''') print("""Let's print "Happiness" out""")
[i for (i,e) in enumerate(list) if e==1][5]
alldata = impdat.root.data datastruct = {} for names in impdat.rood.data.__members___: datastruct[names] = eval('alldata.' + names + '[0][:]')
let numbers = [ 10000, 10303, 30913, 50000, 100000, 101039, 1000000 ] let evenNumbers = numbers.filter { $0 % 2 == 0 } // [ 10000, 50000, 100000, 1000000 ]
from django.core import exceptions class DocumentWizard(SessionWizardView): # ... def get_form_initial(self, step): # ... determine document_id document = Document.objects.get(id=document_id) if self.request.user == document.owner: document_dict = model_to_dict(document) return document_dict else: raise exceptions.PermissionDenied
event = gtk.gdk.Event(gtk.gdk.FOCUS_CHANGE) event.window = entry.get_window() # the gtk.gdk.Window of the widget event.send_event = True # this means you sent the event explicitly event.in_ = False # False for focus out, True for focus in
root@trelte:/ # . /sdcard/qpyenv.sh root@trelte:/ # python Python 2.7.2 (default, Oct 25 2014, 20:52:15) [GCC 4.9 20140827 (prerelease)] on linux2 Type "help", "copyright", "credits" or "license" for more information. >>> import os >>>
for key, d1_list in dict_1.iteritems(): for element in d1_list: for ind, d2_list in enumerate(dict_2[key]): if element in d2_list: print element, key, ind
from collections import defaultdict my_dict = defaultdict(int) >>> lst = [1,2,2,2,3] >>> for i in lst: ... my_dict[i]+=1 ... >>> >>> my_dict defaultdict(<type 'int'>, {1: 1, 2: 3, 3: 1}) >>> my_dict = defaultdict(list) >>> >>> for i,j in enumerate(lst): ... my_dict[j].append(i) ... >>> my_dict defaultdict(<type 'list'>, {1: [0], 2: [1, 2, 3], 3: [4]})
#!/usr/bin/env python import re buffer = ''' \tNow is the time\t for all good men\r\tto come to the aid\t\r of their party. ''' nlinePat = re.compile(r'\r\n?|\n') bufferPos = 0 nlineCounter = 0 bl = nlinePat.split (buffer) for line in bl: print(line.strip ()) nlineCounter += 1 print nlineCounter
socket.getaddrinfo("example.com", None, socket.AF_INET6)
max_dict = {} def keep_row(row): if row.calls > max_dict.get((row.ID, row.SerialNo), 0): max_dict[(row.ID, row.SerialNo)] = row.calls return True else: return False Table1_mod = Table1[Table1.apply(keep_row, axis=1)]
import json from odftoarray import ODSReader # renamed the file to odftoarray.py r = ODSReader("your_file.ods") arrays = r.getSheet("your_data_sheet_name") json.dumps(arrays)
In [1]: class data: ...: def __init__(self, **kwargs): ...: self.__dict__.update(kwargs) ...: In [2]: d = data(foo=1, bar=2) In [3]: d.foo Out[3]: 1 In [4]: d.bar Out[4]: 2
tweet=re.sub('|'.join(lst), 'DELETESENTENCE', tweet)
User post save signal which adds 'change_profile' permission to new user objects @receiver(post_save, sender=User, dispatch_uid='user.created') def user_created(sender, instance, created, raw, using, **kwargs): """ Adds 'change_profile' permission to created user objects """ if created: from guardian.shortcuts import assign assign('change_profile', instance, instance.get_profile())
ares = (a.transpose(0,1,3,2) * v).transpose(0,1,3,2)
for i in ReadOnlyCollection: i.doSomething()
import numpy as np # a 10GB memory-mapped array x = np.memmap('/tmp/x.mm', mode='w+', dtype=np.ubyte, shape=(int(1E10),)) # create a memory-mapped .npy file with the same dimensions and dtype y = open_memmap('/tmp/y.npy', mode='w+', dtype=x.dtype, shape=x.shape) # copy the array contents y[:] = x[:]
(r'^(?P<chararg>\w+)/(?P<arg>[\w\+%_& ]+)/(?P<intarg>\d+)', 'dest')
fixed_angle = np.where(z > 0, angle, -angle)
from configobj import ConfigObj conf = ConfigObj('filename.ini') section = conf['section'] value = section['value']
data = client_sock.recv(1024) with open('textfile.txt', 'a') as f: for ch in data: f.write('{}\n'.format(ord(ch)))
from django.utils.html import escape def create_markup(event): output = ... return escape(output)
>>> from ast import literal_eval >>> >>> s = r'''[{'text': 'This is my legit "test" \'message\' with "lots" of \'quotation marks\'', 'type': 'message', 'user': '<userID>', 'channel': '<channelID>', 'ts': '1450501889.000074', 'team': '<teamID'}]''' >>> print(literal_eval(s)[0]["text"]) This is my legit "test" 'message' with "lots" of 'quotation marks'
from collections import defaultdict lists = defaultdict(list) def time_price_pair(a, b): if 32400 <= a < 53460: i = (a-32400)/540 lists[i].append(b)
df1 = (df.groupby('CloneID').filter(lambda x: (x.ID.str.startswith("H").any()))) df1.groupby('CloneID').apply(lambda x: x.to_csv('CloneID{}.txt'.format(x.name), index=False))
globals()[string1 + string2]() locals()[string1 + string2]()
mystring = "a1234f" data = list(mystring)
from django.contrib.auth.signals import user_logged_in, user_logged_out def record_user_logged_in(sender, user, request, **kwargs): # Record the user logged in def record_user_logged_out(sender, user, request, **kwargs): # Record the user logged out user_logged_in.connect(record_user_logged_in) user_logged_out.connect(record_user_logged_out)
f = int(raw_input("Enter height: ")) s = '' for i in xrange(f): for j in xrange(f-i-1): s += ' ' for j in xrange(2*i+1): s += '*' s += '\n' print s
>>> from datetime import datetime >>> datetime.strptime("2012-11-09-165420", "%Y-%m-%d-%H%M%S") datetime.datetime(2012, 11, 9, 16, 54, 20)
>>> x = raw_input("Int array") Int array>? 1 2 3 >>> map(int, x.split()) [1, 2, 3]
# Create the dict for the movies object. id_movies = dict([(m.id, m) for m in movies]) # Get the data in order. order_movies = [id_movies[i] for i in movie_ids]
if player_a in reward_dict: reward_dict[player] += money else: reward_dict[player] = money
(require 'cl) (setq mylist '("foo" "bar" "baz" "qux" "frobnitz")) (subseq mylist 1 4) ;; ("bar" "baz" "qux")
- (void)applicationWillResignActive:(UIApplication *)application - (void)applicationDidBecomeActive:(UIApplication *)application
from models import Name from datetime import datetime # create a new model name = Name(city='New York', state='NY') # fields can also be set this way name.zipcode = '10027' # save the model to the database name.save() # find a model by zipcode name = Name.objects.filter(zipcode='10027') # modify it name.curr_time = datetime.now() # save it name.save()
from django.utils.html import strip_tags template_values = { 'company_id': company.id } template_file = os.path.join(os.path.dirname(__file__), 'templates/email.html') html = template.render(template_file, template_values) plain_text = strip_tags(html)
while running: rect = pygame.Rect(10, 20, 30, 30) pygame.draw.rect(screen, (255,0,0), rect) pygame.display.flip() for event in pygame.event.get(): if event.type == pygame.MOUSEBUTTONDOWN: mouse_pressed = True if event.type == pygame.QUIT: running = False while mouse_pressed: # do your stuff mouse_pressed = False
import wave start_time = 5.43 stop_time = 5.81 time_period = stop_time - start_time wav = wave.open('test.wav') time_period_frames = time_period * wav.getnframes()
import sys def is_kernel(): if 'IPython' not in sys.modules: # IPython hasn't been imported, definitely not return False from IPython import get_ipython # check for `kernel` attribute on the IPython instance return getattr(get_ipython(), 'kernel', None) is not None
t=np.linspace(0, np.pi, num=x) p=np.linspace(-np.pi,np.pi,num=x) [T,P]=np.meshgrid(t,p) F_c=0.0 F_s=0.0 for i in xrange(n): F_c+=F_c_F_s.F_c(theta[i],phi[i],T,P) F_s+=F_c_F_s.F_s(theta[i],phi[i],T,P) mod_F=(np.log10((np.power(F_c,2)+np.power(F_s,2))))
col_idx = -1 for idx, mt in enumerate(sheet.row_values(0)): print mt if mt=='MT': col_idx = idx break
import heapq return heapq.nlargest(n, l)
print open(__file__).read()
pos = text.index(INSERT)
In [1]: from jupyter_client import find_connection_file In [2]: find_connection_file() Out[2]: 'C:\\Users\\me\\AppData\\Roaming\\jupyter\\runtime\\kernel-1234.json'
@property def output(self): return self... #not sure how you are tracking output on/off @output.setter def output(self, state): if state: self.set_output_on() else: self.set_output_off()
>>> ids = set(' '.join(item.split()[:2]) ... for item in blabla['Condition'].unique())) # set(['no2 med1', 'no1 med1', 'no1 med2']) >>> len(ids) 3
n=3 N=2 df_list=[] for i in range(n): df_list.append(pd.concat([df.apply(np.random.choice, axis=1) for i in range(N)], ignore_index=True)) new_df = pd.concat(df_list, axis=1, ignore_index=True).T
for i in range(10): filename = "C:\\%d.txt" % i with open(filename, 'a') as f: ....
for i,line in enumerate(input): line = clean2(line) if i in (1, 4): outfile.write(line)
def get_decorator(arg1): def my_decorator(function): print "get_decorator argument: %s" % arg1 return function return my_decorator class Foo(object): def __init__(self, arg1): self.var1 = arg1 self.method1 = get_decorator(self.var1)(self.method1) def method1(self): print "method1" foo = Foo("abc") foo.method1()
import glob import pandas as pd combined = [] for filepath in glob.glob('path/to/your/files/*.exp'): combined.append(pd.read_table(filepath, sep='\t', header=None)) combined = pd.concat(combined, ignore_index=True)
>>> foo = type('Foo', (), {})() >>> foo <__main__.Foo object at 0x100499f50>
visited = set() queue = ['www.google.com', 'www.yahoo.com', 'www.microsfot.com'] def crawl_the_page(link): # ...crawling... visited.add(link) return # you just for through the queue list # no need to pop the list, use the set() to compare instead for url in queue: if url not in visited: #... do your stuff ... #... crawl your pages ... crawl_the_page(url)
X = np.random.rand(5, 3) a = np.random.randint(0, 3, 5) In [12]: X[np.arange(a.size), a] Out[12]: array([ 0.99653335, 0.30275346, 0.92844957, 0.54728781, 0.43535668]) In [13]: for i, ind in enumerate(a): print X[i][ind] # ....: #0.996533345844 #0.30275345582 #0.92844956619 #0.54728781105 #0.435356681672
post_data = [('name','Gladys'),] # a sequence of two element tuples result = urllib2.urlopen('http://example.com', urllib.urlencode(post_data)) content = result.read()
>>> def multisplit(s, delims): ... pos = 0 ... for i, c in enumerate(s): ... if c in delims: ... yield s[pos:i] ... pos = i + 1 ... yield s[pos:] ... >>> list(multisplit('hello there[my]friend', ' []')) ['hello', 'there', 'my', 'friend']
# steps not shown where you set up api u = api.get_user(783214) print u.screen_name
def parse(self, response): hxs = HtmlXPathSelector(response) for tb in hxs.xpath('//table'): heading = tb.xpath('.//thead/tr/th/a/text()').extract()[0] for td in tb.xpath('.//tbody/tr'): il = WebsiteLoader(response=response, selector=td) ... il.add_value('heading', heading) yield il.load_item()
ax1[:set_yticks]([0.2,0.4,0.6,0.8,1.0]) ax1[:set_yticklabels](["-40dB","-30dB","-20dB","-10dB","0dB"])
from xml.etree.ElementTree import Element, SubElement, Comment, tostring # Configure one attribute with set() root = Element('opml') root.set('version', '1.0') root.append(Comment('Generated by ElementTree_csv_to_xml.py for PyMOTW'))
foo = '"MARY","PATRICIA","LINDA","BARBARA","ELIZABETH","JENNIFER","MARIA","SUSAN","MARGARET","DOROTHY","LISA","NANCY","KAREN","BETTY","HELEN","SANDRA","DONNA","CAROL"' output = foo.replace('"','').split(",")
def enterPiece(aBoard, aColour, aPoint): c = aBoard if 0 < aPoint <= aBoard.size: for j in range(aPoint): c.removePieceFromPoint(aColour, 0) c.addPieceToPoint(aColour, aPoint) return True else: return False
import ast original_ast = ast.parse(""" import sys for a in range(0,10): print(a) sys.exit(0)""") altered_ast = ast.parse(""" import sys for a in range(0,10): print(a + 1) sys.exit(0)""") ast.dump(original_ast) == ast.dump(altered_ast)
liPos = [(2,5),(8,9),(18,22)] s = "I hope that I will find an answer to my question!" exclusions = set().union(* (set(range(t[0], t[1]+1)) for t in liPos) ) pruned = ''.join(c for i,c in enumerate(s) if i not in exclusions) print pruned
class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter): pass parser = argparse.ArgumentParser(description='test\ntest\ntest.', epilog='test\ntest\ntest.', formatter_class=CustomFormatter)
import web urls = ( '/(.*)', 'hello' ) app = web.application(urls, globals()) class hello: def GET(self, name): if not name: name = 'World' return 'Hello, ' + name + '!' if __name__ == "__main__": app.run()
>>> import hashlib >>> import numpy >>> a = numpy.random.rand(10, 100) >>> b = a.view(numpy.uint8) >>> hashlib.sha1(b).hexdigest() '15c61fba5c969e5ed12cee619551881be908f11b' >>> t=timeit.Timer("hashlib.sha1(a.view(numpy.uint8)).hexdigest()", "import hashlib;import numpy;a=numpy.random.rand(10,10)") >>> t.timeit(number=10000)/10000 2.5790500640869139e-05
import xlwt as xl doc = xl.Workbook() #Create document #Add a worksheet sheet = doc.add_sheet("Some Sheet") for i in range(100): #Write 2 columns sheet.write(i, 0, i+1) sheet.write(i, 1, i*2) #Write result (SUM for example) sheet.write(i, 2, xl.Formula("SUM(A%d:B%d)" % (i+1, i+1))) doc.save("my_table.xls")
from django.db.models import Sum, F qs = Leg.objects.filter(timetrial__leg__order__lte=F('order')) qs = qs.annotate(duration_prefix_sum=Sum('timetrial__leg__duration'))
def _generate_row (row_number, prev_row): if row_number == 1: return [1] row_data = [0] + prev_row + [0] return [sum(row_data[a:a+2]) for a in xrange(0, len(row_data)-1)] def generate(num_rows): prev_row = None for i in xrange(1, num_rows+1): prev_row = _generate_row(i, prev_row) yield prev_row print list(generate(5))
import fileinput import glob import sys for line in fileinput.input(glob.glob('*.mod'), inplace=True): sys.stdout.write(line.replace('sit', 'SIT')) if fileinput.filelineno() == 32: #adds new line and text to line 32 sys.stdout.write('TextToInsertIntoLine32' '\n')
f = open('namesonly.txt', 'w') ... for line in reader: if "new" in line[2]: #line = line.split(',') #<- you don't need this line because you are reading the input as a delimitd string already f.write(line[0] + '\n') # write the first thing before the first comma (your names) f.close()
import numpy as np from sklearn.metrics.pairwise import pairwise_distances mat_1 = np.matrix([[1,2,3],[3,4,5]]) vec_1 = (2, 3, 5) # Make sure the dimensions of the vector and matrix are equal >>>print pairwise_distances(mat_1, vec_1, metric = 'cosine') [[ 0.00282354] [ 0.01351234]]
my_plist = plistlib.readPlist() settings = my_plist["settings"] for d in settings: if "scope" in d: if "comment" not in d["scope"]: print "A scope with no comment!" else: print "A dict with no scope!"
class MyClass: @classmethod def foo(cls): print "hi" @classmethod def bar(cls): cls.foo()
subprocess.call("git commit -am \"Changing Things\" --date=\"Sat, 26 Mar 2016 18:46:44 -0800\"", env=dict(os.environ, "GIT_COMMITTER_DATE":"Sat, 26 Mar 2016 18:46:44 -0800"))
everything=[] for tr in tree.xpath("//tr[td[@class='section_detail']]"): row={} row['endorsement']=tr.xpath("td[@bgcolor='#8AFF8A']") row['auth']=tr.xpath("td[@bgcolor='#FFFFCC']") everything.append(row)
.. figure:: images/my_image.svg :width: 100%
def f_FactorialTailZeros(v_Num): if v_Num < 5: return 0 return v_Num // 5 + f_FactorialTailZeros(v_Num // 5)
line = "2014-09-15 00:00:00,2014-09-15 15:14:18,Ford,Superduty,0c1a7358-dd51-4db7-9632-993b050ac74c" line_list = line.split(',') lot_date = line_list[0] sale_date = line_list[1] auto_make = line_list[2:-1] vin = line_list[-1]
['python', 'script_name']
In [39]: df.groupby(['Date','ID','Name']).sum().reset_index() Out[39]: Date ID Name Amount 0 21-Oct-2015 1 John 14 1 22-Oct-2015 1 John 10 2 22-Oct-2015 2 Jill 9 3 23-Oct-2015 2 Jill 11
pid = read_pidfile(pidfile) if pid: try: os.kill(int(pid), 0) return pid except OSError, e: if e.errno == errno.EPERM: return pid return None
import asyncio, random q = asyncio.Queue() @asyncio.coroutine def produce(): while True: yield from q.put(random.random()) yield from asyncio.sleep(0.5 + random.random()) @asyncio.coroutine def consume(): while True: value = yield from q.get() print("Consumed", value) loop = asyncio.get_event_loop() loop.create_task(produce()) loop.create_task(consume()) loop.run_forever()
>>> import urllib2 >>> f = urllib2.urlopen('http://www.python.org/') >>> print f.read(100)
from pyspark.sql.functions import explode, avg, col ratio = avg( # If status "S" then 1.0 else 0.0 (col("status") == "S").cast("double") ).alias("ratio") (df .withColumn("keyword", explode("keywords")) .groupBy("id", "type", "keyword") .agg(ratio))
CREATE UNIQUE INDEX foo_only_one_active ON foo(state) WHERE (state = 'active'); CREATE UNIQUE INDEX foo_only_one_active ON foo(state) WHERE (state = 'next');
>>> from collections import Counter >>> lis = ['*,V*,UV,**,a2*,IR' , 'SB*,V*,UV,**,*,a2*,IR' , '*,V*,a2*'] >>> Counter(y for x in lis for y in x.split(',') if '*' in y) Counter({'V*': 3, '*': 3, 'a2*': 3, '**': 2, 'SB*': 1})
USERAGENT = 'something' HEADERS = {'User-Agent': USERAGENT} req = urllib2.Request(URL_HERE, headers=HEADERS) f = urllib2.urlopen(req) s = f.read() f.close()
class SomeClass(Base): __tablename__ = 'some_table' id = Column(Integer, primary_key=True) name = deferred(Column(String(50)))
return [FormRequest.from_response(response, formdata={'search': 'you\'re search string'}, callback=self.parse)]
import multiprocessing as mp jobs = [] for i in process_data: p = mp.Process(target=download_pdf, args=(i[0], i[1])) jobs.append(p) p.start() for i, data in enumerate(process_data): print data p = mp.Process(target=pdf2text, args=(data[1],)) jobs[i].join() p.start()
for membership in redmine.project.get('my_project').memberships: print membership.user_id
m = re.search('something\s\((.+)\)', input_string) if m: list_of_vars = m.group(1).split()
def oddn(x,y,z): odd_number_keeper = [] for item in [x,y,z]: if item % 2==1: odd_number_keeper.append(item) if not odd_number_keeper: print 'No odd number is found' return return max(odd_number_keeper)
import urllib, urllib2, cookielib username = 'myuser' password = 'mypassword' cj = cookielib.CookieJar() opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj)) login_data = urllib.urlencode({'username' : username, 'j_password' : password}) opener.open('http://www.example.com/login.php', login_data) resp = opener.open('http://www.example.com/hiddenpage.php') print resp.read()
hidden_strings = ['python','java','ruby'] with open('path/to/textfile/as/in/example.txt') as infile: for line in infile: for hidden_string in hidden_strings: if hidden_string in line: print(hidden_string)
re.sub(r'\d+\.\d*', lambda match: str(int(round(float(match.group(0))))), line)
suggestion_list = pyenchant_function(document_filled_with_typos) number_of_suggestions = len(suggestion_list) MAX_SUGGESTIONS = 3 # you choose what you like if number_of_suggestions > MAX_SUGGESTIONS: answer = suggestion_list[0:(MAX_Suggestions-1)] # python lists are indexed to 0 else: answer = suggestion_list
# To fit your estimator gnb.fit(data_numpy[0], data_numpy[1]) # To serialize import pickle with open('our_estimator.pkl', 'wb') as fid: pickle.dump(gnb, fid) # To deserialize estimator later with open('our_estimator.pkl', 'rb') as fid: gnb = pickle.load(fid)
g = Gnuplot.Gnuplot(debug=1) #xpos is always the same xpos=0.0 for plotnr,datafile in enumerate(glob.glob('*.dat')): #ypos as a function of the plot-number, e.g. ypos=plotnr*2.0 g("set key at "+str(xpos)+","+str(ypos)) d = Gnuplot.File(datafile, using='1:2', with_='l', title=datafile) g.plot(d)
import re p = re.compile("<br>\((\d+%)\)<\/TD>", re.IGNORECASE) for m in p.finditer(html_code): print m.start(), m.group()
import re new_list = sorted(l, key=lambda s: re.sub('[aioue]', '', s))
