import glob with open('test.txt') as f: for line
import sys from PIL import Image from PIL import ImageTk def change
>>> a = np.array([[1,2,3],[4,5
>>> import re >>> s = "a=b&c=d&d=
class MyClass(object): def __init__(self, name, value
import sys import csv with open('file.txt', 'w') as
def func(a, b): return a + b def f(
from django.db import models from django.db.models import Column class
from selenium import webdriver driver = webdriver.Firefox() driver.get('
import os def dirname(path): return os.path.dirname(
import os def main(): os.system("python -m python -
class MyClass(object): def __init__(self, name, value
def get_list(list1, list2): return [tuple(x
>>> import unicodedata >>> unicodedata.normalize('NFKD', 'NFK
import os with open('filename.txt', 'r') as f:
In [1]: df.groupby('id').sum() Out[1]:
>>> import re >>> s = """<a href="http://www.example.
>>> from decimal import Decimal >>> decimal = Decimal(100) >>> decimal '
def __iter__(self): return iter(self) def __
import urllib2 url = 'http://www.google.com/search?
import os import sys def main(): print "Entering the script
class MyModel(models.Model): def __init__(self, *
import vim class MyModule(object): def __init__(self
import os import sys def main(): os.system('python setup
import sys from PyQt4 import QtGui, QtCore class MyWindow(Qt
>>> from collections import OrderedDict >>> a = OrderedDict() >>> b = OrderedDict()
>>> from itertools import product >>> a = [1,2,3,4,
>>> import lxml.etree.ElementTree as ET >>> tree = ET.parse
>>> from collections import OrderedDict >>> a = [1,2,3,4,
import numpy as np import matplotlib.pyplot as plt # Create a histogram
import pygame class MainWindow(pygame.Window): def __
>>> from collections import Counter >>> l = [1,2,3,4,
class MyModelForm(models.ModelForm): def clean(self):
In [1]: import pandas as pd In [2]: df = pd.
for line in file: if line.startswith('#'): break
import sys import numpy as np import matplotlib.pyplot as plt def
def my_function(a, b): return a + b my
class MyModelView(models.ModelView): def get_queryset(self
import sys def main(): print("Enter your input:")
import sys def main(): sys.argv[1] ='my
import Tkinter as tk class MainWindow(tk.Frame):
>>> from itertools import izip >>> l = [1,2,3,4
>>> from itertools import groupby >>> from itertools import groupby >>> from itertools import groupby
>>> import re >>> s = "Hello, world!" >>> re.sub(
if (condition == True): print "True"
def is_valid(self, value): if value is None:
import time def main(): while True: time.sleep(
import re tree = re.compile(r'(\d+)\.(\d
from sqlalchemy import create_engine conn = create_engine('mysql://localhost
def add_int(a, b): return a + b
>>> import re >>> re.sub(r'[A-Z]', r
import os import subprocess # This is the path to the script # which
def foo(a, b): return a + b def bar(
import os import os.path def get_absolute_path(path):
import time def main(): time.sleep(1) time
>>> import datetime >>> datetime.datetime.strptime(datetime.datetime.now(),
>>> a = [1,2,3,4,5,6,7,
import time def main(): while True: time.sleep(
import subprocess subprocess.call(["python", "-c", "test.
>>> import re >>> s = "a,b,c,d,e,
from flask import Flask, request class MyApp(App): def __
import google.appengine.ext.server as server def get_blob
def is_valid(x): return True def is_valid_
import urllib2 import urllib import urllib.request url = 'http://
class Foo(object): def __init__(self, name):
>>> a = [1,2,3,4,5,6,7,
import pandas as pd import datetime df = pd.read_excel('test
def generator(a, b): return [a[0] for a in
class MyForm(forms.Form): def __init__(self, *
import subprocess def main(): subprocess.call(["python", "python
import asyncio import time import asyncio def wait_for_timeout(timeout
>>> import itertools >>> l = [1,2,3,4,5,
def run_function(func): def wrapped(*args): return func
>>> import collections >>> def __init__(self, value): ... self
>>> import datetime >>> from datetime import datetime >>> d = datetime.datetime.now
class MyClass(object): def __init__(self, name):
class Foo(object): def __init__(self, name):
import re def find_lines(text): return re.search(
def pipeline(func): return func(*args) def func_with
def set_names(self, names): if len(names) == 1
import multiprocessing import os def process_local_storage(filename):
>>> import re >>> s = "Hello, world!" >>> re.findall
import matplotlib.pyplot as plt import numpy as np x = np.
class A(object): def __init__(self, name):
class MyModel(models.Model): def __init__(self, *
>>> import re >>> s = "Hello, world!" >>> re.split(
>>> import struct >>> struct.pack('<i', 'a', 'b')
import os def open_file(filename): with open(filename,
import re def parse_file(file): """Parse a file with
class MyModel(models.Model): id = models.CharField(max
import os import re def read_file(filename): with open
import random class MyClass(object): def __init__(self
>>> from itertools import product >>> a = [1,2,3,4,
import numpy as np import matplotlib.pyplot as plt x = np.
>>> from collections import OrderedDict >>> d = OrderedDict() >>> d['a'] =
from django.db import models class MyModel(models.Model):
class MyClass(object): def __init__(self, name):
>>> from collections import Counter >>> max(map(int, t) for t in
import web class MyApp(web.Application): def __init__
import csv with open('file.csv', 'r') as f:
import numpy as np import matplotlib.pyplot as plt # Create random data
from Tkinter import * class MySlot(object): def __
import sys def main(): print("Entering a function")
def sort_by_score(score): return score def sort_
import numpy as np import matplotlib.pyplot as plt def main():
import pyaudio import sys import time def play(audio, filename):
class MyView(View): def get_context_data(self, **
>>> import hashlib >>> md5 = hashlib.md5() >>> hash(str
import os import sys import inspect # import sys sys.path.
from selenium import webdriver driver = webdriver.Firefox() driver.get('
import urllib2 import urllib url = 'http://www.google.com
>>> a = [1,2,3,4,5,6,7,
def profile(func): def wrapper(func): return func(*args
import tkinter as tk class MyFrame(tk.Frame): def
import subprocess subprocess.call(["python", "command.py", "-
import numpy as np import scipy.stats as stats def beta_product(
>>> from collections import Counter >>> l = ['a', 'b', 'c',
import cgi def parse_request(self, request): if request
import matplotlib.pyplot as plt import numpy as np # create the data
>>> import decimal >>> decimal = '0.01' >>> decimal.from_
import netsnmp # Create a list of all the SNMP indices indices =
from selenium.webdriver.common.exceptions import WebDriverException from selenium.webdriver
def map_func(x, y): return x + y def
import os import subprocess # This is the main script # which is the
>>> import datetime >>> from datetime import datetime >>> d = datetime.datetime.now
from django.conf import settings def load_settings(self, *args,
def count_of_equality(x, y): return sum(x
import sys import indent class MyClass(object): def __init
import logging logging.basicConfig(level=logging.DEBUG) #
import socket import socket def get_port(self): return socket
>>> a = [1,2,3,4,5,6,7,
from PyQt4 import QtGui, QtCore class MyWidget(QtGui.Q
import readline def read_file(filename): with open(filename,
>>> from itertools import product >>> from itertools import product >>> from itertools import product
>>> import binascii >>> binascii.unhexlify('o\xf2\x00
>>> d = {'a': 1, 'b': 2, 'c': 3}
import sys sys.modules[__name__] = __import__(sys.
from django.contrib.auth.models import User from django.contrib.auth.
from pymongo import MongoClient from pymongo import MongoClient class MyMongo
import sys from IPython.display import display from IPython.display import display
import csv with open('file.txt', 'w') as f:
import os import os.path os.rename(os.path.join
>>> from itertools import product >>> a = [1,2,3,4,
import urllib2 import urllib2 url = 'http://www.example.
from scrapy.contrib.auth.models import User from scrapy.
import subprocess subprocess.call(["python", "python", "python",
def func(x): return x def func_list(x):
import Tkinter as tk class MainWindow(tk.Frame):
class Foo(object): def __init__(self, name):
import paramiko import paramiko import os import paramiko.transport import
import urllib2 url = 'http://www.google.com/search?
mysql.connect('mysql://localhost:27017/mydb')
def update_list(self, list_of_parameters): if len(
import glob def find_files(path): return glob.glob(
import os import tempfile def temporary_file(filename): with open
>>> import re >>> s = ['a', 'b', 'c', 'd
>>> import re >>> l = ['a', 'b', 'c', 'd
class A(object): def __init__(self, name):
with open('file.txt', 'r') as f: for line in
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import re >>> re.findall(r'[a-zA-Z
import csv with open('file.csv', 'w') as f:
import mpipy import numpy as np import mpipy.mipi
from datetime import datetime def sort_dates(date): return datetime.
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> d = {'a': 'a', 'b': 'b', 'c':
import re def test(s): if s.startswith(''
import subprocess import time def run_command(cmd): print cmd
>>> from itertools import product >>> a = [1,2,3,4,
import time import datetime def get_time(self): return datetime
>>> from itertools import product >>> d = {('a', 'b'), ('c
import numpy as np import matplotlib.pyplot as plt # Create some data
import sys import time def main(): print "Starting..."
>>> a = [1,2,3,4,5,6,7,
>>> from itertools import product >>> a = [1,2,3,4,
import os import os.path def mask_file(filename):
>>> a = np.array([[1,2,3],[4,5
import collatz class Boring(collatz.Collatz):
>>> import re >>> s = "Hello, world!" >>> re.search(
>>> import re >>> s = """<a href="http://www.example.
class MyModelAdmin(admin.ModelAdmin): name = models.CharField
import pandas as pd import numpy as np import pandas as pd df =
>>> import datetime >>> datetime.datetime.now() datetime.datetime.now().
from django.contrib.auth.utils import login from django.contrib.auth.
from django.http import HttpResponse from django.http import HttpResponse class MyRequestHandler
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
import urllib2 url = 'http://www.example.com/search?
import urllib2 import urllib url = 'http://www.example.com
import csv with open('file.txt', 'r') as f:
import os import os.path import os.path # Create a virtual
>>> from email import message >>> from email.utils import parse_email >>> from
def my_function(a, b): return a + b def
import subprocess subprocess.call(["python", "python", "python",
import zipfile def zip_file(filename): with zipfile.ZipFile(
>>> from collections import defaultdict >>> a = [1,2,3,4,
import sys from functools import wraps class MyClass(object): def
>>> from itertools import product >>> a = [1,2,3,4,
import csv with open('output.csv', 'wb') as f:
from django.conf import settings from django.conf import settings def test_
import csv with open('file.csv', 'wb') as f:
from django.contrib.auth.models import User from django.contrib.auth.
>>> from itertools import product >>> a = [1,2,3,4,
>>> from collections import defaultdict >>> a = [1,2,3,4,
import psycopg2 class MyClass(object): def __
urlpatterns = patterns('', url(r'^www/', 'www/
import numpy as np import numpy as np # Create a random number num
import numpy as np import numpy as np # create a numpy array of the
import subprocess subprocess.call(["python", "python", "python",
import numpy as np import matplotlib.pyplot as plt # create a matrix
>>> from itertools import groupby >>> words = [word for word in groupby(words,
import pyopencv import os import os.path import pyopenc
import simplecv import numpy as np import numpy as np def stop_
>>> d = {1:1, 2:2, 3:3, 4:
from django.contrib.auth.models import User from django.contrib.auth.
>>> import re >>> s = ['a', 'b', 'c', 'd
In [1]: df = pd.DataFrame({'a': [1,2,
>>> import math >>> a = 0.5 >>> b = 0.5
import mercurial def merge(file_name, file_path):
def sorted_iter(iterable): for i in range(len(iterable))
from django.conf import settings from django.conf import settings from django.conf
import re def search(text, search_string): if search_
class MyModel(models.Model): name = models.CharField(max
>>> import numpy as np >>> x = np.array([1,2,3
>>> a = [1,2,3,4,5,6,7,
import csv with open('file.csv', 'r') as f:
from collections import Counter class Average(object): def __init__(
def func(a, b): return a + b def func_
import re import os def video_file_name(filename):
class MyModel(models.Model): name = models.CharField(max
class MyModel(models.Model): def __init__(self, *
>>> import re >>> s = "Hello, world!" >>> re.sub(
import sys def print_variable(name): print name print
import xmlrpclib import cStringIO import cStringIO class
def get_url(self, url): return url.split('?')
import sys import re def my_function(name): return re
bucket = boto3.resource('bucket') bucket_name = bucket.name
import matplotlib.pyplot as plt import numpy as np x = np.
from django.contrib.auth.models import User from django.contrib.auth.
def all(self): return self.all(1)
cursor = db.cursor() cursor.execute("CREATE TABLE my_table (id
>>> from itertools import chain >>> l = [1,2,3,4,
>>> from collections import defaultdict >>> a = [1,2,3,4,
from selenium import webdriver from selenium.webdriver.common.exceptions import WebDriverException
import sqlite3 conn = sqlite3.connect('/tmp/db')
>>> import re >>> s = """<div class="my_class"> ...
import os import os.path def add_domain(domain, filename):
import subprocess def read_file(filename): with open(filename,
from tornado.web import web class MyHandler(web.RequestHandler):
>>> import re >>> s = "Hello, world!" >>> re.findall
from django.db import models class Distance(models.Model): distance
>>> import re >>> s = "Hello, world!" >>> re.sub(
from bs4 import BeautifulSoup html = """<html> <head>
import re def parse_file(file): """Parse a file into
import re def remove_comments(text): if text.startswith
>>> import itertools >>> a = [1,2,3,4,5,
>>> import re >>> s = 'a\b\b\b\b\
import csv with open('output.csv', 'wb') as f:
import numpy as np import matplotlib.pyplot as plt # Create a new
class Foo(object): def __init__(self, name):
>>> from collections import defaultdict >>> a = [1,2,3,4,
import os os.chdir('.egg')
>>> import json >>> json.loads(my_dict) ['a', '
import pandas as pd import numpy as np df = pd.DataFrame({'
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
import matplotlib.pyplot as plt import numpy as np # create a numpy
import gevent import time def main(): gevent.spawn
import numpy as np import matplotlib.pyplot as plt x = np.
from django.contrib.auth.urls import redirect def my_view(request
import os import os.path s3 = boto.connect_s3
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import re >>> s = "Hello, world!" >>> re.sub(
from django.db import models class Month(models.Model): date
from lxml import etree root = etree.parse('<root>')
from django.contrib.auth.models import User from django.contrib.auth.
>>> import numpy as np >>> np.array([[1,2,3],
>>> df = pd.DataFrame({'a':[1,2,3,4
from django.template import Template from django.template import Template def generate_
from django.db import models class MyModel(models.Model):
import matplotlib.pyplot as plt import numpy as np import matplotlib.dates as
import pyffmpeg import time # Create a new file handle # Use
>>> import re >>> s = "Hello, world!" >>> re.sub(
counter = 0 for i in range(0,len(html)):
import os import os.path def get_file_path(path):
import multiprocessing def main(): # do something # do something
<html> <head> <title>Hello World!</title
>>> from collections import OrderedDict >>> d = OrderedDict() >>> d['a'] =
import sys from ctypes import * def unpack_android(self, filename):
>>> import itertools >>> a = [1,2,3,4,5,
class MyModel(ndb.Model): name = ndb.StringProperty
def check_for_duplicates(request): if request.method == 'POST
df['A'] = df.groupby('A').apply(lambda x: x
import csv with open('file.csv', 'wb') as f:
In [1]: df = pd.DataFrame({'a':[1,2,
import numpy as np import bokeh.plotting as plt import numpy as np
import socket import socket def tcp_handler(sock): sock.
>>> a = [1,2,3,4,5,6,7,
import gae def push_task(queue, task): # do
import random with open('file.txt', 'w') as f:
import csv with open('file.csv', 'wb') as f:
>>> a = [1,2,3,4,5,6,7,
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
import social from social.auth import SocialBackend from social.auth.backend import
import numpy as np import matplotlib.pyplot as plt # Create a random
import sys import os import sys import sys sys.path.append
import sys def main(): print "Hello, world!" sys
>>> a = [1,2,3,4,5,6,7,
>>> import re >>> s = "a\x41\x41\x41
class MyModel(models.Model): name = models.CharField(max
>>> import datetime >>> datetime.datetime.now() datetime.datetime.now().
>>> import re >>> s = "a,b,c,d,e,
import re def parse_string(s): return re.sub(
import itertools def product(a, b): return itertools.product(*
>>> import re >>> s = "a\x00\x00\x00
import subprocess subprocess.call(["python", "python", "test.
from django.template import Template from django.template import Template class MyTemplate
>>> import re >>> s = "Hello, world!" >>> re.sub(
import re with open('file1.txt', 'r') as f1
>>> from collections import defaultdict >>> a = [1,2,3,4,
class MyModelAdmin(admin.ModelAdmin): def get_queryset(self
from django.template.filters import filter from django.template.filters import filter_
import tkinter as tk class MyFrame(tk.Frame): def
import urllib2 import urllib2 url = 'http://www.google.
>>> d = {'a':1, 'b':2, 'c':3}
from bs4 import BeautifulSoup soup = BeautifulSoup(open('file.json',
>>> import re >>> s = 'a=b&c=d' >>>
import base64 import requests s3 = boto.connect_s3()
import sys from importlib import import_module from importlib import import_module
import matplotlib.pyplot as plt import numpy as np def callback(x
import datetime import datetime def subtract_dates(start, end):
import os import sys def write_file(filename): with open
from django.db import models class MyModel(models.Model):
import requests url = 'http://www.google.com/search?q
>>> import re >>> s = "Hello, world!" >>> re.split('
import urllib2 import Image url = 'http://www.google.com
import numpy as np def find_n_values(x, n):
>>> import re >>> s = "a=b&c=d&d=
from sphinx.template import Template from sphinx.core import Template from sphinx.core
import zipfile def zip_file(filename, filename_list): with
import dbus import os def watch_dir(path): if os
def is_valid(value): return isinstance(value, bool)
with open('file1.txt', 'r') as f1: for
from django.contrib.auth.models import User from django.contrib.auth.
>>> a = np.array([[1,2,3],[4,5
import sys import time def main(): print "Hello, world!"
import numpy as np import matplotlib.pyplot as plt def m(x
import math def math_formula(x): return math.sqrt(
import os import subprocess # Get the current process's status status = subprocess
>>> from collections import OrderedDict >>> d = OrderedDict() >>> d.sort(key
from kivy.app import App from kivy.app.actions import
import web def delete_cookie(self, cookie): if cookie.
def rolling_mean(x, y): return np.mean(x,
>>> d = {'a':1, 'b':2, 'c':3}
>>> from itertools import chain >>> l = [1,2,3,4,
>>> import re >>> s = 'a\b\b\b\b\
import numpy as np import scipy.sparse as sp # create a sparse matrix
import requests url = 'http://www.google.com' cookies =
import urllib2 import urllib2 url = 'http://www.google.
import numpy as np import matplotlib.pyplot as plt import matplotlib.pyplot
import sys sys.path.append(__file__)
from ndb import * class MyModel(BaseModel): __tab
from django.http import HttpResponse from django.http import HttpResponse class MyRequestHandler
def unit_of_work(x): return x def unit_
>>> import re >>> s = "email@example.com" >>> re.
class MyClass(object): def __init__(self, name):
import bottle bottle.init() bottle.set_log_
>>> import re >>> s = "Hello, world!" >>> re.findall
import numpy as np import random # Create random image img = np.
>>> from itertools import groupby >>> l = [1,2,3,4,
import csv with open('test.csv', 'r') as f:
def test(x): if x == '1': return True
class MyClass(object): def __init__(self, name):
>>> import numpy as np >>> a = np.array([1,2,3
from django.db import models class MyModel(models.Model):
def recursive_method(func): def wrapper(self, x):
from xml.etree import ElementTree as ET root = ET.Element('root')
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
import csv with open('file.csv', 'r') as f:
import matplotlib.pyplot as plt import numpy as np import matplotlib.dates as
for i in range(1,10): print i
import wx class MyWindow(wx.Frame): def __init__
>>> import sys >>> sys.argv[1] '-c' >>>
import numpy as np import matplotlib.pyplot as plt def create_row
import re def is_variable_name(name): return re.
>>> import re >>> re.sub(r'[A-Z]', u
from sqlalchemy import create_engine query = """SELECT * FROM t WHERE t
>>> import re >>> re.sub(r'(\d+)', r'\1
class MyClass(object): def __init__(self, name):
def get_request_metadata(request): return request.META
import sys from PyQt4 import QtGui, QtCore class MyWidget(Qt
from sqlalchemy.sql.expression import Expression from sqlalchemy.orm import sessionmaker
>>> np.mean(np.array([1,2,3,4,5
import numpy as np def process_array(array, n): return
import pandas as pd import pandas as pd x = pd.read_excel
def square_root(x): return x**2
class MyModelFormset(models.ModelFormset): queryset = MyModel
import paramiko import paramiko import paramiko.transport import paramiko.
>>> from collections import defaultdict >>> a = [1,2,3,4,
>>> import decimal >>> decimal.Decimal('0.0') '0.0
from flask import Flask, request class MyApp(Flask): def
>>> import re >>> s = "a,b,c,d,e,
import os import sys #!/usr/bin/env python
def f(x): return x def f(x):
import urllib2 import urllib url = 'http://www.example.com
df.rolling_apply(lambda x: x.apply(lambda y: y.
with open('file.txt', 'r') as f: for line in
>>> import re >>> s = "1,2,3,4,5,
import os def listdir(path): return os.listdir(
import boto bucket = boto.connect_s3() bucket_name =
import sys sys.path.append(os.path.dirname(__file__
import json data = json.loads(json.dumps(data))
class Foo(object): def __init__(self, name):
import csv with open('data.csv', 'rb') as f:
import os import sys import os.path def open_pdf(filename
import numpy as np import matplotlib.pyplot as plt # Create a numpy
class MyClass(object): def __init__(self, filename):
import numpy as np x = np.array([1,2,3,
import urllib2 import os url = 'http://www.example.com
import openpyxl # Create a list of rows rows = [row[
def __call__(self, *args, **kwargs): """Function to
>>> import re >>> s = 'a=b&c=d&d=
import re def check_time(text): if re.search(
class MyClass(object): def __init__(self, name):
>>> a = [1,2,3,4,5,6,7,
import github from github.contrib.auth import User from github.contrib.auth
class MyList(list): def __init__(self, *args,
import os with open('file.txt', 'r') as f:
from one2many.models import TreeView from one2many.models import Tree
import datetime date_time = datetime.datetime.now() # now
import pytz import time tz = pytz.timezone('UTC') #
import numpy as np import matplotlib.pyplot as plt x = np.
class MyClass(object): def __init__(self, *args,
class MyModel(models.Model): id = models.CharField(max
>>> from itertools import groupby >>> a = [1,2,3,4,
with open('file.txt', 'r') as f: for line in
>>> import json >>> json.dumps(my_list) '[object
>>> from collections import Counter >>> a = Counter() >>> b = Counter()
driver.get('http://www.google.com/search?q=1&
import re def count_blank_lines(text): count = 0
>>> import numpy as np >>> d = np.dct(np.arange
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
import time def test_time(text): time.sleep(1
class MyModel(models.Model): today = models.DateTimeField(default
class MyModel(models.Model): id = models.CharField(max
df['A'] = df.groupby('A').apply(lambda x: x
df['A'] = df.apply(lambda x: x.apply(lambda x
import urllib2 import urllib import urllib.request url = 'http://
>>> import re >>> s = "Hello, world!" >>> re.sub(
from django.db import models class MyModel(models.Model):
from selenium import webdriver driver = webdriver.Firefox() driver.get('
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
>>> import re >>> s = "Hello, world!" >>> re.sub(
from django.contrib.auth.models import User from django.contrib.auth.
class MyModel(models.Model): name = models.CharField(max
>>> from itertools import combinations >>> a = [1,2,3,4,
def get_list(self): return [x for x in self.list
>>> import numpy as np >>> a = np.array([1,2,3
import sys from PyQt4 import QtGui, QtCore class MyThread(Qt
from bs4 import BeautifulSoup html = """ <html> <head>
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for element
>>> import re >>> s = 'a' >>> re.search(r'
class MyModel(models.Model): name = models.CharField(max
import pandas as pd import sys import sys import time def main():
df['count'] = df.groupby('name').count()
def add_to_stack(self, table): self.table.append
>>> import re >>> s = '1.2.3.4' >>>
from selenium import webdriver driver = webdriver.Firefox() driver.get('
def get_value(self, key): return self.get_value(
from sklearn.metrics import Score class Score(object): def __
import numpy as np import matplotlib.pyplot as plt def set_a
import xml.etree.ElementTree as ET root = ET.parse('http
from django.template.loader import TemplateLoader from django.template.loader import Template
from datetime import datetime days = datetime.timedelta(days=2)
>>> from collections import defaultdict >>> from collections import defaultdict >>> d = defaultdict(list
import os def main(): # do stuff # do stuff
import seaborn as sns import matplotlib.pyplot as plt import numpy as
import numpy as np x = np.array([1,2,3,
import json with open('output.json', 'w') as f:
import os with open('filename', 'w') as f: for
>>> import collections >>> def list_of_lists(a): ... return
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for key,
>>> a = [1,2,3,4,5,6,7,
from django.contrib.auth.views import login_view from django.contrib.
def get_list(self, key): return list(self.get_
def replace_nested(x,y): for i in range(len(
from celery.tasks import Task from celery.tasks import Task from cel
import csv with open('file.csv', 'r') as f:
from django.db import models class MyModelAdmin(admin.ModelAdmin):
>>> from itertools import product >>> a = [1,2,3,4,
import Tkinter as tk class Window(tk.Frame): def
import requests url = 'http://www.google.com/morsel
import sys from multiprocessing import Pool def memory_usage(n):
>>> a = [1,2,3,4,5,6,7,
def get_number(self): return self.number
>>> d = {'a': ['a', 'b', 'c', 'd'],
import os import Image def get_latest_image(path):
import matplotlib.pyplot as plt import numpy as np x = np.
import datetime def format_datetime(date): return datetime.strptime
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
import matplotlib.pyplot as plt import numpy as np x = np.
import networkx as nx import networkx as nx def get_successors
docker run -c "docker container --name docker.container --name docker.container --
import sys import random def main(): print "Hello, world!"
class MyModel(models.Model): id = models.CharField(max
import numpy as np import random def noise(x): return random
>>> import cStringIO >>> s = "a" >>> s.read()
class MyFormSet(forms.ModelFormSet): def clean(self):
In [1]: df.groupby('group').count() Out[1]:
class MyList(list): def __init__(self, list):
def get_url(self, request): return url_for('/my
df['A'] = df['B'].set_index('A').set_index
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> d = {'a': 1, 'b': 2} >>> d['c
In [1]: df = pd.DataFrame({'a': [1,2,
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import re >>> s = """<html> <head> <title
>>> import re >>> s = 'a\b\b\b\b\
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> from itertools import combinations >>> a = [1,2,3,4,
import subprocess p = subprocess.Popen(['grep', '-l',
import cv2 def resize(video, size): if size == 0
>>> import re >>> s = "Hello, world!" >>> re.split('
from django.conf import settings from django.http import HttpResponseRedirect def redirect(
import os import sys import os.path import os.path import os
>>> import re >>> s = "a" >>> re.findall(r
>>> import random >>> random.choice(['a', 'b', 'c',
def eval_module(module): return module.eval(module.eval_
import requests url = 'http://www.google.com' def
import argparse parser = argparse.ArgumentParser(description='A help message')
class MyModel(models.Model): name = models.CharField(max
def func(x): return x def func_1(x):
class MyModel(models.Model): name = models.CharField(max
import configparser def parse_config(config_file): config_
with open('output.txt', 'w') as f: for line in
import csv with open('file.csv', 'r') as f:
from flask import Flask, request from flask.ext.middleware import WorkerMiddleware from
import csv with open('output.csv', 'w') as f:
import sys import time def main(): print "Hello, world!"
import argparse parser = argparse.ArgumentParser() parser.add_argument('
class Foo(object): def __init__(self, name):
import glob def find_command(pattern): return glob.glob(
from flask import Flask, request from django.template import Template from django.utils
>>> import re >>> s = "Hello, world!" >>> re.sub(
In [1]: df = pd.DataFrame({'a':['a', 'b
while True: if not my_bool: break my_
>>> def itemgetter(x): ... return x.lower() ... return
>>> import math >>> a = 0 >>> b = 0 >>> c = 0
>>> import decimal >>> decimal.Decimal(0.01) '0.01
In [1]: df.groupby('A').apply(lambda x: x.
>>> import math >>> a = 0 >>> b = 0 >>> c = 0
>>> import re >>> s = "John Doe" >>> re.sub
>>> import re >>> s = "Hello, world!" >>> re.sub(
def show_all(self, request): if request.method == 'POST
>>> a = np.array([[1,2,3],[4,5
import matplotlib.pyplot as plt import numpy as np # Create a pdf
import numpy as np import matplotlib.pyplot as plt # Create some data
import os def load_files(path): for file in os.
import re def print_words(text): print(re.sub
def get_value(self, key): return self.get_value(
import itertools def print_list(l): for i in range(
from cursa import objects objects = objects.filter( 'name__
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> a = [1,2,3,4,5,6,7,
import os import sys def create_file(filename): with open
import wlan class WlanManager(wlan.Manager): def
>>> import unicodedata >>> unicodedata.normalize('NFKD', unicodedata.
from datetime import datetime date_time = datetime.strptime(str1,
import matplotlib.pyplot as plt import numpy as np x = np.
import numpy as np import matplotlib.pyplot as plt x = np.
df = pd.DataFrame({'a':['a', 'b', 'c',
import requests class MyApp(webapp2.RequestHandler): def get
import numpy as np import matplotlib.pyplot as plt # Create a 3
from django.db import models class MyModel(models.Model):
class MyModel(models.Model): def __init__(self, *
>>> import sys >>> sys.version_info = sys.version_info >>>
import csv with open('output.csv', 'w') as f:
>>> import numpy as np >>> a = np.array([1,2,3
import tornado.web class MyHandler(tornado.web.RequestHandler):
>>> import re >>> s = "a\b\b\b\b\
from bs4 import BeautifulSoup from bs4 import BeautifulSoup soup = BeautifulSoup(
>>> import re >>> s = "John Doe" >>> re.sub
df = pd.DataFrame({'a':['a', 'b', 'c',
class MyForm(forms.ModelForm): def __init__(self,
import random # Create a list of all the movies and ratings #
>>> a = [1,2,3,4,5,6,7,
import sys from lisp.lib.frame import Frame from lisp.lib
import networkx as nx import networkx.graph as nx # create a
import numpy as np import matplotlib.pyplot as plt # create a random
def main(): for i in range(10): print i
import random def random_sort(a, b): return random.
>>> a = [1,2,3,4,5,6,7,
def change_features(x, y): for i in range(len(
import kivy from kivy.colors import Color def absolute_
>>> a = np.array([1,2,3,4,5,6
import numpy as np import matplotlib.pyplot as plt # create a histogram
import csv with open('file.csv', 'r') as f:
import sys from PyQt4 import QtGui, QtCore class MyWidget(Qt
def is_chained(x): return x in chain(x, y
>>> from datetime import datetime >>> from datetime import datetime >>> d = datetime.datetime
>>> import re >>> s = "Hello, world!" >>> re.findall
import opencv import time class MyObject(object): def
import blender def set_shapekey(shapekey, value):
import vim import sys class MyApp(vim.App):
>>> import re >>> s = 'a,b,c,d,e,
import sys import time def main(): print "Hello, world!"
from mock import mock class Test(object): def __init__(
import numpy as np import matplotlib.pyplot as plt x = np.
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import ctypes >>> import unicodedata >>> unicodedata.c_char_p
import httplib class MyHttpConnection(httplib.HTTPConnection):
import urllib2 import urllib url = 'http://www.example.com
fromrabbitmq import Connection fromrabbitmq.client import Client class
>>> import re >>> s = "Hello, world!" >>> re.findall
import matplotlib.pyplot as plt import numpy as np fig = plt.
>>> import collections >>> def order_by(s): ... return sorted(
In [1]: df = pd.DataFrame({'a':['a', 'b
import urllib2 import urllib url = 'http://www.google.com
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
>>> import ctypes >>> c_char_p = ctypes.c_char_p
>>> import itertools >>> a = [(1, 2), (3, 4),
import sqlite3 conn = sqlite3.connect(host='localhost', port='
import mrjob from mrjob.mapper import Mapper from mrjob.filters import
>>> from collections import Counter >>> l = [1,2,3,4,
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for tag
>>> import math >>> a = 0.5 >>> b = 0.5
class MyStruct(object): def __init__(self, name, value
import csv with open('test.csv', 'r') as f:
>>> import datetime >>> datetime.datetime.now() datetime.datetime(2011
>>> l = [1,2,3,4,5,6,7,
import pandas as pd import numpy as np df = pd.DataFrame({'
import re with open('file1.txt', 'r') as f1
def test_function(func): if func(func1): return
import random def random_number(n): return random.randint
>>> import re >>> s = "a.b.c.d.e.
import sys from Tkinter import * class MyButton(Tk):
import sys import os def main(): print "Hello, world!"
import os import subprocess def redirect_pipe(pipe): return os
import os def extract_last_name(path): return os.
from django.db import models from django.db.models import Column class
import wx class RichtextCtrl(wx.Frame): def
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> import re >>> s = "Hello, world!" >>> re.findall
from sphinx.ext.docutils import DocsGenerator from sphinx.ext.doc
import sys import time def main(): print "Hello, world!"
import os import time def test_server(server): if server
>>> import operator >>> x = [1,2,3,4,5,
>>> import itertools >>> l = [1,2,3,4,5,
import os import sys def main(): print "Running script..."
>>> s = '0.0.0.0' >>> pad = '0
from sqlalchemy.orm import sessionmaker class MyModel(models.Model):
import requests url = "http://www.wallbase.cc/search?
import pyny def change_text(text): text = p
In [1]: df = pd.DataFrame({'a':['a', 'b
import urllib2 import urllib url = 'http://www.google.com
>>> a = [1,2,3,4,5,6,7,
import inspect import sys def backtrace(func): return inspect.stack
>>> import re >>> s = "a\b\c\d\d\
import sys from importlib import import_module class MyModule(object):
import boto.s3 bucket = boto.s3.bucket('mybucket
def test_one(a, b): if a == b:
import os import numpy as np import matplotlib.pyplot as plt def
import vim class MyApp(object): def __init__(self
from django.utils.html import escape def html_to_html(self
docker run -v docker --home=/home/nltk/docker
>>> from itertools import product >>> a = [1,2,3,4,
import csv with open('file.csv', 'w') as f:
def decorator(f): def wrapper(f): return f(*args
>>> import fnmatch >>> s = 'a.b.c' >>> s.
import matplotlib.pyplot as plt import numpy as np x = np.
>>> import re >>> s = 'a[1,2,3,4,
from django.template import Template from django.template import Template class MyForm
>>> a = [1,2,3,4,5,6,7,
from datetime import datetime query = """SELECT * FROM t WHERE t.date_
import threading import time class MyThread(threading.Thread):
>>> import re >>> re.sub(r'[A-Z]', '',
>>> import re >>> s = "a,b,c,d,e,
>>> import re >>> s = 'a\b\b\b\b\
>>> import binascii >>> binascii.hexlify(0x010101010101
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for child in
import Tkinter as tk class Frame(tk.Frame): def
import datetime def time_to_time(x, y, z):
>>> import collections >>> d = collections.OrderedDict(['a', 'b',
import os def split_file(filename): with open(filename,
import numpy as np import matplotlib.pyplot as plt def get_sp
import librtypes import sys class MyLibrtypes(librtypes
>>> from collections import defaultdict >>> a = defaultdict(list) >>> b = defaultdict
>>> d = {'a': 'b', 'c': 'd'} >>>
>>> import pyparsing >>> s = 'a' >>> s.rstrip
>>> from collections import Counter >>> l = [1,2,3,4,
with open('file.txt', 'r') as f: reader = csv
import logging logging.basicConfig(filename='log.txt',
import urllib2 import urllib3 url = 'http://www.google.
import uu def encode(self, value): return uu.
>>> import itertools >>> from itertools import count >>> from itertools import product >>> from
import matplotlib.pyplot as plt import numpy as np x = np.
from django.conf import settings def main(): settings = settings.get
class A(object): def __init__(self, x):
import multiprocessing def parallel_func(n): for i in range(
import numpy as np import numpy as np def subselection(x, y
with open('file.txt', 'r') as f: for line in
import mechanize def download_file(filename): # do something
import re def search(text, search): if search in text:
import subprocess def main(): subprocess.call(["python", "-m
import zipfile # Create a zip file with the given name # and the path
>>> a = [1,2,3,4,5,6,7,
import os import glob def main(): with open('file1.
with open('file.txt', 'r') as f: for line in
{% for row in db.rows %} {% for col in col
>>> import ast >>> ast.print_nl("Hello, world!") >>>
class MyClass(object): def __init__(self, name):
import threading import time def main(): print "Hello, world!"
class MyForm(forms.Form): def clean(self): return
In [1]: df = pd.DataFrame({'A': [1,2,
class MyModel(models.Model): name = models.CharField(max
class MyClass(object): def __init__(self, name):
import requests url = 'http://www.google.com/search?q
>>> import re >>> s = "A,B,C,D,E,
var a = "1" var b = "2" var c = "
>>> import random >>> s = "Hello, world!" >>> random.choice(
>>> from itertools import product >>> a = [1,2,3,4,
>>> import random >>> a = [1,2,3,4,5,
import wx class MainFrame(wx.Frame): def __init__
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> from itertools import combinations >>> numbers = ['1', '2', '3',
import pandas as pd import stringio with open('file.txt', '
import os import sys def freeze(filename): with open(filename
>>> def func(a, b): ... return a + b ...
import random words = [word for word in random.sample(words, size
class MyForm(forms.ModelForm): def __init__(self,
>>> import re >>> s = 'a' >>> re.search(r'
>>> import re >>> s = "Hello, world!" >>> re.findall
def func(x): return x def func_2(x):
>>> import re >>> s = "Hello, world!" >>> re.sub(
import itertools def start_iter(l): for i in range(
>>> from collections import OrderedDict >>> d = OrderedDict() >>> sorted(d.items
import wx class RichtextCtrl(wx.Frame): def
class MyClass(object): def __init__(self, name):
def test(x): if x == 'a': return True
import datetime now = datetime.datetime.now() now.strftime("%
import os import glob files = glob.glob('*.txt') sorted
def get_global_name(name): global name return name
import os import os.path os.path.join(os.path
import pandas as pd import numpy as np import matplotlib.pyplot as plt
from flask import Flask from flask.ext.middleware import FlaskMiddleware from flask.
>>> import datetime >>> from datetime import datetime >>> d = datetime.datetime.now
import os import os.path def open_parent(parent):
import numpy as np import matplotlib.pyplot as plt # Create a random
import urllib2 from bs4 import BeautifulSoup url = 'http://www.
def search(string, search): if search == "a": return
from scrapy.http import Request from scrapy.http import Response
from django.db import models class MyModelView(models.ModelView):
import statsmodels import sys import sys import time class MyModel(
>>> from collections import defaultdict >>> l = [1,2,3,4,
import json with open('file.json', 'r') as f:
>>> import pandas as pd >>> df = pd.DataFrame({'a':[1
import re def parse_html(self, response): html = response
import tqdm import time class MyProgressbar(tqdm.ProgressBar):
import subprocess proc = subprocess.Popen(['/usr/bin/python
def is_true(x): return x == True
import sys import time def main(): print "Hello, world!"
import rpy2 import sys sys.stdout = sys.stdout sys.
>>> a = [1,2,3,4,5,6,7,
import xml.etree.ElementTree as ET root = ET.parse('http
>>> from itertools import product >>> a = [1,2,3,4,
import urllib2 url = 'http://www.example.com/feeds
import matplotlib.pyplot as plt import numpy as np x = np.
from selenium.webdriver.support import webdriver from selenium.webdriver.support import
from django.contrib.auth.models import File from django.contrib.auth.
class MyModel(models.Model): name = models.CharField(max
from sqlalchemy.orm import sessionmaker class MyModel(models.Model):
import multiprocessing class Pool(object): def __init__(self,
import re def print_list(list): for line in list:
>>> import re >>> s = "Hello, world!" >>> re.findall
class UserAdmin(admin.ModelAdmin): user_groups = ('user',
>>> df = pd.DataFrame({'a':[1,2,3,4
>>> import operator >>> x = 'a' >>> x = 'b'
>>> import re >>> s = "Hello, world!" >>> re.findall
import numpy as np import matplotlib.pyplot as plt def perturb_
>>> from itertools import groupby >>> l = [1,2,3,4,
import sys def print_max(x): print x print
In [1]: df = pd.DataFrame({'a':['a', 'b
import subprocess subprocess.call(["python", "pip", "-c",
def iter_elements(iterable): for element in iterable: yield element
import numpy as np import matplotlib.pyplot as plt x = np.
>>> import re >>> s = 'a\b\b\b\b\
>>> import re >>> s = "Hello, world!" >>> re.search(
def get_list(list): return [i for i in list if i
def find_capital(s): return s.lower()
class MyModel(models.Model): def __init__(self, *
def is_in_list(list): if list[0] in list
import numpy as np import matplotlib.pyplot as plt x = np.
import os def create_dirs(dir_list): for root,
>>> a = [1,2,3,4,5,6,7,
>>> import simplejson >>> d = {'a': 'b', 'b': '
class UserAdmin(admin.ModelAdmin): def get_context_data(
class MyTable(Base): __tablename__ ='my_table'
import numpy as np import matplotlib.pylab as plt fig = plt.
from sqlalchemy import session from sqlalchemy.orm import sessionmaker class My
import win32com.client import win32com.client.client_socket
import numpy as np import matplotlib.pyplot as plt # create a list
df = pd.DataFrame({'a': [1,2,3,4,
from selenium import webdriver driver = webdriver.Firefox() driver.get('
def func(a, b): return a + b def func_
import socket import socket def test_server(): socket.setdefault
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import decimal >>> decimal.Decimal('0.0') '0.0
>>> import re >>> s = "a,b,c,d,e,
import csv with open('file.csv', 'r') as f:
import numpy as np import cv2 img = cv2.imread('
from django.contrib.auth.models import User from django.contrib.auth.
>>> import re >>> s = """<div> ... <div>
from bs4 import BeautifulSoup from bs4 import BeautifulSoup soup = BeautifulSoup(
import nose def test_coverage(nse_file): #
min(x, key=lambda x: x[0])
from pylongs import * class MyController(object): def __
df['histogram'] = df.groupby('histogram').agg(lambda x: x
def my_function(a, b): return a + b
class MyModel(models.Model): def __init__(self, *
>>> import re >>> s = "Hello, world!" >>> re.sub(
import servo servo.set_servo_counter(1)
from pyramid.contrib.auth import User from pyramid.contrib.auth.
import numpy as np import matplotlib.pyplot as plt x = np.
>>> import re >>> s = "Hello, world!" >>> re.findall
import numpy as np import numpy as np # create a new matrix a
import pygame import pygame.image as im def get_image(
import sympy def solve(x): return x.solve(x
from django.db import models class MyModel(models.Model):
from Tkinter import * class MainWindow(Frame): def __
def remove_card(card): if card[0] == '1':
import matplotlib.pyplot as plt import numpy as np fig = plt.
import sys import time def main(): print "Hello, world!"
>>> import binascii >>> binascii.hexlify(u'0x' + u'
import ctypes def c_int(x): return ctypes.c_
import numpy as np import matplotlib.pyplot as plt # Create a figure
def repaired(x): return x + 1
import requests url = 'https://api.github.com/repos/google
class MyClass(object): def __init__(self, name):
import os import os.path def create_folder(path):
import urllib2 import urllib url = 'http://www.google.com
with open('output.txt', 'w') as f: for line in
import os for filename in os.listdir(path): with open
>>> import datetime >>> from datetime import timedelta >>> t = datetime.datetime.now
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for d in
In [1]: df = pd.DataFrame({'a': [1,2,
>>> import itertools >>> x = [1,2,3,4,5,
>>> import re >>> s = "Hello, world!" >>> re.findall
with open('output.txt', 'w') as f: for line in
import irc import time class MyHandler(irc.RequestHandler):
class MyModel(db.Model): name = db.StringProperty()
import sklearn import numpy as np # create a new array of standards
>>> a = [1,2,3,4,5,6,7,
>>> d = {'a':1, 'b':2, 'c':3}
import logging logging.basicConfig(level=logging.DEBUG)
>>> import socket >>> s = '192.168.1.1' >>>
import unittest class TestCase(unittest.TestCase): def
from datetime import datetime def default_datetime(self): return datetime.
>>> a = np.array([1,2,3,4,5,6
import sqlite3 conn = sqlite3.connect('/tmp/my_database
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import csv >>> csv.reader(open('file.csv', 'r')
>>> import re >>> s = 'a\b\b\b\b\
import os import sys sys.path = ['/path/to/python
def count_iter(n): for i in range(n):
>>> from itertools import product >>> a = [1,2,3,4,
import matplotlib.pyplot as plt import numpy as np x = np.
import urllib2 import urllib2.request url = 'http://www.
>>> import re >>> re.sub(r'(\d+)', r'\1
import jfilechooser class MyFileChooser(jfilechooser.J
import pandas as pd import numpy as np import matplotlib.pyplot as plt
from couchdb import Document from couchdb.models import Document doc_ids
def get_list(self, key): return list(self.get_
import numpy as np import matplotlib.pyplot as plt def test_m
import sys import ctypes def get_value(self): return ctypes
import sys from PyQt4 import QtGui, QtCore class Window(QtGui
>>> import re >>> s = '1.2.3.4' >>>
In [1]: df = pd.DataFrame({'a':['a', 'b
import sys import os import sys def read_file(filename):
>>> a = np.array([1,2,3,4,5,6
from django.db import models from django.utils.timezone import timezone class
import random def random_list(n): return [random.choice
import os import subprocess def main(): print "Running", os.
class Foo(object): def __init__(self, *args, **
def f(x): return x def g(): return g
import sys import time def main(): print "Hello, world!"
import ftp def ftp_read(self, path): ftp.login
>>> import numpy as np >>> a = np.array([1,2,3
In [1]: df.pivot_table(index=['a', 'b',
from django.db import models class MyModel(models.Model):
class MainWindow(Gtk.Window): def __init__(self,
import pandas as pd import numpy as np import pandas as pd df =
import gmail import os import os.path def get_email_
>>> import re >>> re.search(r'(?<=\w)([A-
import numpy as np import matplotlib.pyplot as plt x = np.
import json json_data = json.loads(open('file.json',
def validate_number_or_null(value): if value is not None
import tkinter as tk class MyFrame(tk.Frame): def
import pandas as pd import numpy as np # read the data data =
import numpy as np import matplotlib.pyplot as plt def transform(x
import requests url = 'https://www.googleapis.com/auth/
import re def test_script(filename): return re.search(
import gtk class PopWindow(gtk.Window): def __init
>>> from itertools import product >>> a = [1,2,3,4,
from PyQt4 import QtGui, QtCore class MyTableWidget(QtGui.
>>> from datetime import datetime >>> from datetime import timedelta >>> from datetime import timedelta
>>> import sys >>> sys.stdout.write('Hello, world!') >>>
import sys from pygame import * def main(): global ppts
def get_lines(line): lines = line.split() for
import xml.etree.ElementTree as ET root = ET.parse('http
In [1]: df = pd.DataFrame({'a':[1,2,
import cython cython.init() cython.init() cy
import subprocess def main(): subprocess.call(["python", "python
import urllib2 url = 'http://www.google.com'
>>> import decimal >>> decimal.Decimal(0.01) '01.01
class Foo(object): def __init__(self, name):
import csv with open('file.csv', 'w') as f:
import Tkinter as tk class MainWindow(tk.Frame):
>>> a = [1,2,3,4,5,6,7,
import datetime import time def myfunc(x): return x +
import pandas as pd import os import sys # Create a pandas dataframe with
df = pd.DataFrame({'a':['a', 'b', 'c',
import time def wait_for_data(data): while True:
{% for i in range(1,10): %}
>>> a = np.array([[1,2,3],[4,5
def func(a, b): return a + b def func_
import os def find_file(path): return os.path.
def is_letter(s): if s.isdigit(): return
def func(x): return x * x def func2(x
import matplotlib.pyplot as plt def func(x): return x
import logging def log_level(level): if level == 'DEBUG
In [1]: df = pd.DataFrame({'a':['a', 'b
class MyModel(models.Model): name = models.CharField(max
>>> import re >>> s = "Hello, world!" >>> re.findall
import os import sys sys.path.append(os.path.dirname
import sys def convert_to_string(string): return string
>>> from collections import Counter >>> d = {1: [1, 2, 3
import sys def main(): print("Hello World!") sys
import gtk class App(gtk.Window): def __init__
import monogo import sqlite3 conn = monogo.connect('
import cgi def print_html(self, text): print(
class MyForm(forms.ModelForm): def clean(self):
In [1]: df = pd.DataFrame({'a': [1,2,
In [1]: df.xticks.set_index('x') In
with open('file1.txt', 'r') as f1: for
class MyModel(db.Model): id = db.IntegerField(max
class MyClass(object): def __init__(self, name):
import serial import sys class MySerial(serial.Serial): def
>>> from collections import Counter >>> a = Counter() >>> b = Counter()
def f(x): return x def g(x):
class Content(models.Model): name = models.CharField(max_
import sympy def solve(x): return sympy.solve(
>>> import collections >>> list(collections.defaultdict(list)) [('a
from math import radians from math import sin, cos def angle_from_
>>> import re >>> re.findall(r'(?<=\w)(?=\
def main(): print "Hello, world!" print "Hello, world
from PyQt4 import QtGui, QtCore class MyTreeView(QtGui.
>>> import re >>> re.findall('(\d+)(\.\d+)',
import numpy as np import matplotlib.pyplot as plt # Create a histogram
class MyModel(models.Model): name = models.CharField(max
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import re >>> s = "Hello, world!" >>> re.findall
def test_a(a, b): if a == b:
>>> import re >>> s = "Hello, world!" >>> re.findall
import os import os.path def create_torrent(path):
from sphinx.contrib.sphinx.api import Docs from sphinx.contrib.
import pymongo db = pymongo.MongoClient() # create a
from django.db import models from django.db import models class MyModel
import os import subprocess # This is the main script # This is
import eve def get_params(self, request): params =
>>> d = {'a': 1, 'b': 2} >>> d['c
df = pd.DataFrame({'a':['a', 'b', 'c',
>>> d = {'a':1, 'b':2, 'c':3}
import subprocess subprocess.call(["python", "-m", "python",
import os import os.path os.path.exists('/path/
from lxml import html html = html.getroot() for root
import Image import numpy as np def load_image(filename):
import subprocess subprocess.call(["python", "command", "prompt",
import requests class MyRestfulAPI(restful.RestfulAPI):
class Foo(object): def __init__(self, x):
import matplotlib.pyplot as plt import numpy as np x = np.
from sqlalchemy import create_engine engine = create_engine('postgresql://
def test_prob(x): return x == 1
>>> import sys >>> sys.version_info '2.7.0'
import sqlite3 conn = sqlite3.connect('/home/john/
>>> import re >>> d = {'a': 'a', 'b': 'b
import os import os.path def get_env_var(name):
>>> from itertools import groupby >>> from itertools import product >>> from itertools import product
>>> import datetime >>> datetime.datetime.strptime(datetime.datetime.now().
>>> import re >>> s = "a,b,c,d,e,
import trac class TracLink(trac.TracLink):
>>> import re >>> s = u'a' >>> re.sub(r
>>> import urllib2 >>> q = urllib2.urlopen('http://www.
import matplotlib.pyplot as plt import numpy as np x = np.
>>> import pandas as pd >>> df = pd.DataFrame({'a':[1
import canapi class BulbMode(canapi.BulbMode
class MyModel(models.Model): name = models.CharField(max
from shopify.ext.products import Product from shopify.ext.products import
def parse_list(list_of_strings): for line in list_
import re def split_string(string): return re.sub(
>>> from collections import Counter >>> c = Counter() >>> c.count()
import numpy as np import numpy as np x = np.arange(
import biopython from biopython.utils import check_dna
>>> import cython >>> import numpy as np >>> a = np.array([
import os import sys import sys import os.path # install the
import qgis class MyApp(QApplication): def __init__
import os def join_dir(dir, parent): return os.
>>> from itertools import groupby >>> l = [1,2,3,4,
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import re >>> s = 'a,b,c,d,e,
def delay(func): def wrapper(func): return func(*args
In [1]: df1 = pd.DataFrame({'a':['a', '
from django.db import models class MyModel(models.Model):
def foo(a,b): return a + b
from tkinter import * class MyLabel(tk.Label): def
import networkx as nx import numpy as np # create a list of all
def get_variables(self): return self.variables
import csv with open('file.csv', 'r') as f:
>>> import datetime >>> datetime.datetime.now() - datetime.datetime.now()
>>> from datetime import datetime >>> t = datetime.datetime.now() >>> t
def parse_args(self, args): args = args.split()
import serial class MySerial(serial.Serial): def __init__
import time def log_time(n): time.sleep(n
import perl def parse(self, file): with open(file
from collections import Counter words = ['a', 'b', 'c', '
In [1]: df.groupby('A').apply(lambda x: x.
import matplotlib.pyplot as plt import numpy as np import matplotlib.dates as
import re def get_line(line): if line.startswith
class MyModel(models.Model): def __init__(self, *
>>> class A(object): ... def __init__(self, x):
import re def find_file(filename): return re.search(
>>> from itertools import permutations >>> from itertools import product >>> from itertools import combinations
import csv with open('file.csv', 'r') as f:
import csv with open('file.csv', 'w') as f:
>>> import re >>> s = '1.2.3.4' >>>
import urllib2 from bs4 import BeautifulSoup soup = BeautifulSoup(urllib
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import random >>> random.choice(['a', 'b', 'c',
import urllib2 urllib2.urlopen('http://www.google.
>>> import re >>> s = "Hello, world!" >>> re.split('
>>> import sympy >>> x = sympy.Expression(x) >>> x
>>> a = [1,2,3,4,5,6,7,
from sublime.plugin import Plugin from sublime.plugin.textcommand import Text
<a href="{{ url_for('my_page','my_page_
from django.db import models class MyModel(models.Model):
>>> import operator >>> x = 1 >>> x = 2 >>> x = 2
>>> from itertools import groupby >>> l = [1,2,3,4,
>>> a = [1,2,3,4,5,6,7,
import wx class MyFrame(wx.Frame): def __init__
import pygame def rect(self): return self.rect.get
>>> from datetime import datetime >>> from datetime import timedelta >>> d = datetime.date
class MyClass(object): def __init__(self, name):
>>> import datetime >>> datetime.datetime.strptime(datetime.datetime.strptime
>>> a = np.array([[1,2,3],[4,5
def range(self, start, end): if start < end:
class MyModel(models.Model): name = models.CharField(max
>>> import datetime >>> datetime.datetime.now() datetime.datetime.now().
import wx import wx.lib.bitmap as bitmap class MyFrame(
>>> import re >>> s = "Hello, world!" >>> re.findall
import os def main(): os.system('ls -l -l
from django.forms import forms class MyForm(forms.ModelForm):
>>> from collections import Counter >>> a = Counter() >>> b = Counter()
from bs4 import BeautifulSoup url = "http://www.google.com/
import pyxmms2 import pyxmms2.client as client
>>> a = [1,2,3,4,5,6,7,
import os def rename_files(dir, files): for filename in
>>> from itertools import product >>> a = [(1,2), (3,
>>> from itertools import product >>> a = [1,2,3,4,
>>> import re >>> s = "a=b&c=d&d=
import pandas as pd import numpy as np df = pd.DataFrame({'
import numpy as np import scipy.stats as stats # calculate the hmm
from django.contrib.auth.models import User from django.contrib.auth.
class MyView(View): def get(self, request): return
def is_in(x, y): if x == y:
import sys import csv def read_csv(filename): with open
from flask import Flask, request class MyForm(wtforms.Form):
In [1]: df['close_price'] = df['close_price'].
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for tag
from bs4 import BeautifulSoup tags = ['a', 'b', 'c',
<script type="text/javascript"> function my_function(x, y
def decorator(func): def wrapper(kwargs): return func(*kwargs
>>> a = np.array([1,2,3,4,5,6
>>> a = [1,2,3,4,5,6,7,
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
class Foo(object): def __init__(self, name):
>>> l = [1,2,3,4,5,6,7,
def get_md5(self): return md5(self.data)
>>> a = [1,2,3,4,5,6,7,
from sqlalchemy import create_engine conn = create_engine('sqlite:///:
>>> import decimal >>> decimal.Decimal('0.00', decimal.Decimal('0
from tkinter import * class MyFrame(Frame): def __init
>>> d = {'a':1, 'b':2, 'c':3}
import Tkinter as tk class MyWidget(tk.Frame):
import os import numpy as np def image_to_qpixmap(
import pygame import time def move_image(self, image):
>>> import re >>> s = "a,b,c,d,e,
import numpy as np import scipy.ndimage as np import scipy.ndimage
import urllib2 import urllib url = 'http://www.google.com
with open('file.txt', 'r') as f: for line in
import sys import sys def main(): sys.exit(1)
with open('file.txt', 'w') as f: for line in
import sst from sst.common.css import CSS_CLASS from s
def func(x): return x def func_1(x):
In [1]: df = pd.DataFrame({'a':[1,2,
import csv with open('file.csv', 'r') as f:
>>> import re >>> s = "Hello, world!" >>> re.search(
import subprocess subprocess.call(['dd', '-c','myfile
>>> import re >>> s = "a,b,c,d,e,
from email.mime.mime import MIMEMultipart from email.mime.text import MIME
<div class="quote"> <p>{{ quote }}</p>
import numpy as np def f(x): return np.array([
from bs4 import BeautifulSoup soup = BeautifulSoup(html_content) for
from twisted.internet import reactor from twisted.internet.internet
>>> import re >>> s = "Hello, world!" >>> re.search(
from django.template import Template from django.template.loader import loader from django
df['A'].apply(lambda x: x[1])
import Tkinter as tk class MyDialog(tk.Frame):
import pandas as pd import numpy as np df = pd.DataFrame({'
from django.db import models class Category(models.Model): category
from PyQt4 import QtGui, QtCore class MyTextEdit(QtGui.
>>> import random >>> s = "abcde" >>> re.findall(
>>> import re >>> s = "Hello, world!" >>> re.sub(
from lxml import etree root = etree.parse('http://www.s
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> from itertools import product >>> a = [(1,2),(3,
from django.contrib.auth.models import User class User(models.Model
import sys from PyQt4 import QtGui, QtCore class MyQObject(
import logging import sys def get_filename(logger): filename =
class User(models.Model): user = models.ForeignKey(User)
class Option(models.Model): name = models.CharField(max_
>>> import re >>> s = 'a@☘@☘@
import sqlite3 conn = sqlite3.connect('/tmp/db.db
>>> from itertools import product >>> a = [1,2,3,4,
>>> a = np.array([[1,2,3],[4,5
>>> import re >>> s = "a,b,c,d,e,
class MyModelAdmin(admin.ModelAdmin): def get_instance(self
>>> from itertools import product >>> a = [1,2,3,4,
import numpy as np x = np.array([1,2,3,
import os import sys def delete_file(filename): with open
import os def get_size(path): return os.stat(
>>> import itertools >>> l = [1,2,3,4,5,
import lxml.etree as ET root = ET.fromstring(u'
>>> from itertools import combinations >>> numbers = ['1', '2', '3',
import re def hex_to_hex(hex_string): return
import requests r = requests.get('http://www.example.com/
import bs4 data = bs4.BeautifulSoup(data, 'html
>>> import re >>> s = "Hello, world!" >>> re.findall
df['data'] = df.groupby('data').apply(lambda x: x
>>> import re >>> re.sub(r'(\r\n|\n)
class MyModel(models.Model): id = models.CharField(max
>>> import binascii >>> binascii.hexlify(u'0x' + u'
def get_list(self): for i in range(1,10):
import socket import time def create_socket(socket): socket.
def get_participants(self, expression): if expression.startswith('
>>> import re >>> s = '1.2.3.4' >>>
import gxl # Create a new GXL file gxl = g
import bittorrent import time def parse_sync_log(log_
import numpy as np import PIL import numpy as np def main():
import numpy as np import matplotlib.pyplot as plt # Create some data
from Tkinter import * class MainWindow(Frame): def __
>>> import re >>> s = "a,b,c,d,e,
import os def find_file(path): return os.path.
def recursive_method(self, func): def wrapper(*args, **kwargs
import Image import numpy as np def optimize(x, y):
from django.db import models class MyModel(models.Model):
import serial import sys import time class MySerial(serial.Serial):
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
import urllib2 import urllib url = 'http://www.google.com
>>> import numpy as np >>> a = np.array([0,0,0
import subprocess # Create a shell command command = "python -c " +
>>> from itertools import product >>> a = [1,2,3,4,
>>> import re >>> s = u'abc' >>> re.sub(r
from tastypie.api import create_list class MyModel(models
import re def print_words(text): for i in range(
from sqlalchemy.orm import sessionmaker from sqlalchemy.orm import scoped_query
import csv with open('file.csv', 'r') as f:
>>> a = np.array([[1,2,3],[4,5
>>> a = np.array([1,2,3,4,5,6
import time import wx class MyFrame(wx.Frame): def
import sys import logging logging.basicConfig(level=logging.DEBUG)
In [1]: df = pd.DataFrame({'a': [1, 2,
In [1]: df = pd.DataFrame({'a': [1,2,
import sys from PyQt4 import QtGui, QtCore class MyScene(Qt
with open('output.txt', 'w') as f: for line in
def add_to_list(list): for i in range(0,
import datetime import time # Create a string to store the date and time stamp
In [1]: import pandas as pd In [2]: df = pd.
>>> import re >>> s = 'a\b\b\b\b\
import matplotlib.pyplot as plt import numpy as np x = np.
def func(x): return x def func2(x):
from bs4 import BeautifulSoup from bs4 import BeautifulSoup soup = BeautifulSoup(
>>> from itertools import product >>> a = [1,2,3,4,
import xml.etree.ElementTree as ET def test_compare_xml(
>>> import re >>> s = "Hello, world!" >>> re.sub(
import lmdb db = lmdb.connect('mydb.db')
>>> from collections import OrderedDict >>> a = [1,2,3,4,
class MyClass(object): def __init__(self, name, value
def def_cdef(self, cdef): return cdef
df = pd.DataFrame({'a':['a', 'b', 'c',
import os import subprocess # Create a new shell shell = subprocess.P
import os import sys def copy_file(filename, destination):
import zipfile zipfile = zipfile.ZipFile('test.zip') zip
class MyModel(models.Model): def __init__(self, *
with open('file.txt', 'r') as f: for line in
import zipfile def extract_zip(file_name, zip_file):
import numpy as np import random def word_frequency(n):
import xlwt import xlwt.workbook as wb workbook = wb
>>> import re >>> s = "Hello, world!" >>> re.sub(
from django.contrib.auth.models import User class UserView(models.
from bs4 import BeautifulSoup html = """<html> <body>
from sqlalchemy import create_engine def get_results(self, query):
df['name'] = df['name'].str.strip().split(' ')
import nose def main(): with open('output.txt', '
In [1]: df = pd.DataFrame({'a': [1,2,
>>> from collections import Counter >>> d = Counter() >>> for k, v in
>>> import re >>> s = "a,b,c,d,e,
from PyQt4 import QtGui, QtCore class MyTableWidget(QtGui.
>>> a = [1,2,3,4,5,6,7,
>>> import re >>> s = '1.1.1' >>> re.
>>> from itertools import product >>> a = [1,2,3,4,
from tkinter import * class MyEntry(object): def __init
import os import glob files = glob.glob('*.txt') sorted
>>> import unicodedata >>> unicodedata.normalize('utf-16-le', '
def get_list(self, key): if key == 'a':
import sys def main(): print "Hello, world!" sys
import sqlite3 conn = sqlite3.connect('/home/john/
import re with open('file.txt', 'r') as f:
import subprocess import sys def main(): print "Running command..."
from scipy.optimize import * from scipy.optimize import * # Load the
class MyClass(object): def __init__(self, name):
import gae import time class BackendTask(gae.Task):
import re def search(text): if text.startswith('<
import re def script_tag_regex(text): return re.
def func(x): return x def func2(x):
>>> a = [1,2,3,4,5,6,7,
>>> from itertools import product >>> a = [1,2,3,4,
from Tkinter import * class MyWidget(Frame): def __
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import sys >>> import random >>> random.randint(0, 10)
>>> import re >>> s = "Hello, world!" >>> re.findall
import sys import traceback def print_traceback(exc_info):
df.groupby('a').agg(lambda x: x.groupby('a
>>> import re >>> s = "Hello, world!" >>> re.findall
import sys def main(): print "Hello, world!" sys
df = pd.DataFrame({'a':['a', 'b', 'c',
import matplotlib.pyplot as plt import numpy as np x = np.
import subprocess def print_output(command): print("Command: "
>>> import urllib2 >>> urllib2.urlopen('http://www.google.
class MyFormSet(forms.ModelFormSet): def __init__(
df['A'] = df.index.apply(lambda x: x.isin
>>> df = pd.DataFrame({'a': [1,2,3,4
import numpy as np import matplotlib.pyplot as plt # create a 2
df['A'] = df.groupby('A').apply(lambda x: x
import zipfile zipfile = zipfile.ZipFile('/path/to/zipfile
class MyModel(models.Model): id = models.CharField(max
from django.contrib.auth.models import User from django.contrib.auth.
from apple.api import Apple from apple.api import AppleAPI
import urllib2 url = 'http://www.example.com/index.
>>> import re >>> s = "1.2.3.4" >>>
from Tkinter import * class MyWidget(Frame): def __
>>> a = [1,2,3,4,5,6,7,
class MyForm(forms.ModelForm): def __init__(self,
df['count'] = df.groupby('count').sum()
>>> from decimal import Decimal >>> decimal(0x01010101010101
import ftp ftp = ftp.FTP() ftp.login() ftp.
import pygame from pygame.locals import * def is_circle_
import numpy as np import matplotlib.pyplot as plt x = np.
class Foo(object): def __init__(self, name):
>>> a = [1,2,3,4,5,6,7,
import time def main(): time.sleep(1) time
def main(): while True: print("Hello, world!")
>>> a = np.array([1,2,3,4,5,6
class MyForm(forms.ModelForm): name = forms.CharField(
def parallelize(iterable): return iter(iterable) def parallelize
from pybrain.network import Network from pybrain.network_ext import
import os import numpy as np import matplotlib.pyplot as plt #
import datetime def get_time(self): return datetime.datetime.
In [1]: df = pd.DataFrame({'A': [1,2,
import time import threading def main(): time.sleep(1)
>>> a = [1,2,3,4,5,6,7,
import gtk class MyTreeView(gtk.TreeView): def
>>> from collections import Counter >>> d = Counter() >>> for k, v in
import pytz import time tz = pytz.timezone('America/New_Y
import datetime def get_datetime(start, end): return datetime.
df = pd.DataFrame({'a':['a', 'b', 'c',
import requests url = 'https://www.googleapis.com/auth/
import urllib2 import urllib2 import urllib url = 'https://www
>>> from collections import defaultdict >>> a = [1,2,3,4,
import csv with open('file.csv', 'r') as f:
from django.db import models from django.db.models import Thread class
In [1]: df = pd.DataFrame({'a':['a', 'b
from hublspot.filters import HublspotFilter class HublspotFilter
import os import sphinx # Create a list of all files to ignore for
from django.contrib.auth.models import User from django.contrib.auth.
>>> a = [1,2,3,4,5,6,7,
In [1]: df['date'] = df.date.replace(hour=
import sys def main(): print "Hello, world!" sys
class MyModel(models.Model): id = models.CharField(max
>>> d = {k: v for k, v in d.items()} >>>
import matplotlib.pyplot as plt import numpy as np x = np.
from collections import defaultdict def filter_by_id(ids, filter_by
def set_default_value(self, value): if value is None:
import os import sys import sys def main(): print "Hello
import sys import time def bottom_up(self): print "
import netifaces def get_ipv4_address(addr):
import numpy as np import sqlite3 conn = sqlite3.connect('/
import codecs with codecs.open('file.txt', 'r') as f
class MyClass(object): def __init__(self, name):
from django.contrib.auth.models import User from django.contrib.auth.
import urllib2 url = 'http://www.example.com/index.
>>> import re >>> s = "This is a test" >>> re.find
import pandas as pd import csv df = pd.read_csv('test
>>> import re >>> l = ['a', 'b', 'c', 'd
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for tag
import sqlite3 conn = sqlite3.connect('/tmp/db.db
import re def decode(self, data): if data.startswith
>>> a = (1,2,3,4) >>> b = (1
from pyspark.sql.sql import select from pyspark.sql.sql.
from django.contrib.auth.views import index def index(request):
import sys import os import sys import sys def main():
import SeqIO from itertools import groupby def get_sequences(fasta_file
>>> a = np.array([1,2,3,4,5,6
import subprocess import sys p = subprocess.Popen(['/usr/
import urllib2 import urllib2 import urllib2.request url = '
>>> a = np.array([[1,2,3],[4,5
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> a = [1,2,3,4,5,6,7,
>>> from itertools import product >>> a = [1,2,3,4,
import re def split_lines(lines): for line in lines:
import numpy as np import matplotlib.pyplot as plt def is_long
from sqlalchemy import create_engine class MyModel(BaseModel):
import requests import datetime import urllib2 import urllib2.request url
import json data = json.dumps(data)
import pandas as pd import numpy as np import matplotlib.pyplot as plt
import datetime # Create a datetime object dt = datetime.datetime.strptime
def patch_item(self, item): if item.type == 'item
>>> import random >>> random.randint(0, 10) 1 >>>
import coreimage import numpy as np import matplotlib.pyplot as plt
import pyaudio import sys import time def main(): # This
import wx class MainWindow(wx.Frame): def __init__
import socket import sys def read_file(filename): with open
>>> import rpy2 >>> a = [1,2,3,4,
import numpy as np import matplotlib.pyplot as plt x = np.
import optparse parser = optparse.OptionParser(description='A description')
>>> import re >>> s = 'a\b\c\d\d\
import json json_data = json.loads(json_data)
from datetime import datetime class MyModel(models.Model): date =
>>> import re >>> s = "a\n\n\n\n\
>>> import datetime >>> from datetime import datetime >>> s = '2013-01
df['date'] = df['date'].str.replace('T', '')
import numpy as np import matplotlib.pyplot as plt x = np.
import re def parse_html(self, response): html = response
class MyModel(models.Model): year = models.DateTimeField(max
>>> import re >>> s = "a,b,c,d,e,
class TestSuper(object): def __init__(self, name, value
import win32com.client import win32com.client.client.WindowsAPI
from django.db import models class MyModel(models.Model):
>>> import numpy as np >>> a = np.array([1,2,3
class MulticlassClassifier(scikit.classification.MulticlassClassifier):
import sys def delete_memory(filename): if filename.endswith
import base64 import socket def decode_help(data): """
import xampp conn = xampp.connect('localhost', '127
import numpy as np import matplotlib.pyplot as plt x = np.
import baseball def get_text(self, text): return self
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> from collections import Counter >>> d = {1: [1,2,3
class MyModel(models.Model): __tablename__ ='my_
def filter_func(func): return func(func)
class A(object): def __init__(self, obj):
import numpy as np import sys def main(): sys.path.
def simplify(x): return x.strip()
import wx class MyWindow(wx.Frame): def __init__
>>> import re >>> s = "Hello, world!" >>> re.findall
import sys def main(): print "Hello, world!" sys
from django.db import models class MyModel(models.Model):
>>> from itertools import groupby >>> a = [1,2,3,4,
from django.db import models class MyModel(models.Model):
from Tkinter import * class MainWindow(Frame): def __
import tornado.web class MyRequestHandler(tornado.web.RequestHandler):
def replace(self, other): if other.id == self.id:
import pandas as pd import numpy as np df = pd.DataFrame({'
import glob for root, dirs, files in os.walk(os.path
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import re >>> s = 'a,b,c,d,e,
import zipfile def create_archive(path): zipfile.ZipFile(path
from Tkinter import * class MainWindow(Frame): def __
>>> import struct >>> struct.unpack('<i', 'a', 'b')
>>> d = {'a': 1, 'b': 2} >>> d['c
import wx class MainWindow(wx.Frame): def __init__
class UserForm(forms.ModelForm): user = forms.CharField(
class MyClass(object): def __init__(self, name):
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for word in
import random def process_one(n): for i in range(
from django.db import models class Tag(models.Model): name
import os import subprocess def diff(path): with open(path
import docutils import re def extract_tables(text): for
import os import sys import os.path import os.path import os
import sys import pprint def print_line(line): print(
>>> import re >>> s = "a,b,c,d,e,
>>> import re >>> s = "a,b,c,d,e,
import time import subprocess def main(): process = subprocess.Popen
from flask import Flask, redirect, redirect_to, redirect_to @app
>>> a = [[1,2,3],[4,5,6],[
import random def sample_k(n): k = random.rand
>>> l = [1,2,3,4,5,6,7,
import json json_file = open('file.json', 'r')
import urllib2 from bs4 import BeautifulSoup soup = BeautifulSoup(urllib
import re def parse_crontab(line): """Parse crontab
import psycopg2 class Date(object): def __init
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import re >>> re.sub(r'[A-Z]', r
import tkinter as tk class MyEntry(tk.Entry): def
>>> from collections import defaultdict >>> a = [1,2,3,4,
from sqlalchemy import create_engine conn = create_engine('sqlite:///:
>>> import re >>> s = "a,b,c,d,e,
from bs4 import BeautifulSoup from bs4.text import Text class MyPlugin
In [1]: df = pd.DataFrame({'a':['a', 'b
import sys import os import sys def main(): print "Running
>>> import ctypes >>> ctypes.windll.kernel32.GetCurrentProcess().Get
from web.web.common.text import Paragraph html = """ <table
class Foo(object): def __init__(self, name):
In [1]: df = pd.DataFrame({'a':[1,2,
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
>>> import re >>> s = "Hello, world!" >>> re.split('
>>> import numpy as np >>> a = np.array([1,2,3
class TestOpen(unittest.TestCase): def test_open(self
In [1]: df = pd.DataFrame({'a':['a', 'b
class MyModel(models.Model): name = models.CharField(max
import socket import subprocess def get_host_by_name(host):
>>> import numpy as np >>> a = np.array([1,2,3
>>> a = np.array([1,2,3,4,5,6
import sys sys.stdout.write('Hello world!') sys.stdout.
>>> import re >>> s = "Hello, world!" >>> re.sub(
def func(a): return a def func_1():
from collections import OrderedDict def order_genders(genders, numbers):
from google.appengine.ext.auth import User from google.appen
import zipfile import os def extract_zip(zipfile, filename):
from itertools import product def get_adjacency_matrix(d):
import zipfile # Create a zip archive zip_archive = zipfile.ZipFile('
import subprocess subprocess.Popen(['/usr/bin/python',
import numpy as np import matplotlib.pyplot as plt # create a list
from flask import Flask, request class MyHandler(webapp2.RequestHandler):
>>> import re >>> s = "Hello, world!" >>> re.findall
import networkx as nx import networkx.client as nx # Create a
import sys import subprocess # This is the main program from wget import
import sys import csv # Create a new workbook with the password workbook
import requests url = 'http://www.example.com/search?q
from django.utils.text import slugify def slugify(text): return
import sys import time def my_function(x): return x
def func(x, y): return x + y def func2
import sqlite3 conn = sqlite3.connect('/tmp/db')
>>> import re >>> re.findall(r'(\d+)(\d+)
>>> import operator >>> x = 1 >>> y = 2 >>> x = x
>>> a = [1,2,3,4,5,6,7,
>>> import cStringIO >>> cStringIO.StringIO(cStringIO.
>>> import numpy as np >>> a = [1,2,3,4,
import csv import scrapy class MyCSVWriter(scrapy.
import xmlrpclib import xmlrpclib.client as client class
class MyModelChoiceField(forms.ModelChoiceField): def __init__
df['A'] = df.groupby('A').apply(lambda x: x
>>> a = [[1,2,3],[4,5,6],[
import aptana import sys import sys def main(): sys
import sys from PyQt4 import QtGui, QtCore class MyTableWidget(
<div class="range"> <div class="item"> <div
>>> import numpy as np >>> a = np.array([1,2,3
df['A'].sort(key=lambda x: x['A'].str.lower
import os import subprocess # This is the main program # and the subprocess
from flask import Flask, request class MyApp(webapp.RequestHandler):
>>> from collections import OrderedDict >>> d = OrderedDict() >>> for k, v in
>>> import re >>> re.sub(r'[A-Z]', r
from PyQt4 import QtGui, QtCore class MyWidget(QtGui.Q
import os import inspect def get_namespace(name): return os
import google.appengine.api.drive.mediauploadprogress import google.
>>> a = np.array([1,2,3,4,5,6
class Child(models.Model): name = models.CharField(max_
with open('file1.txt', 'r') as f: for line
import matplotlib.pyplot as plt import numpy as np x = np.
>>> a = np.array([[1,2,3],[4,5
class MyForm(forms.ModelForm): name = forms.CharField(
>>> d = {'a': 1, 'b': 2} >>> d['c
def f(x): return x def g(): return g
for section in ini.sections(): for key, value in ini.items():
>>> import itertools >>> c = itertools.chain.from_iterable(['a',
In [1]: df = pd.DataFrame({'a':['a', 'b
from datetime import datetime class MyModel(models.Model): datetime =
import ftp def copy_file(self, filename): with open(
>>> import re >>> re.search(r'(?<=\w)(?<=\w
class A(object): def __init__(self, x, y):
>>> from itertools import product >>> a = [1,2,3,4,
from django.contrib.auth.models import User from django.contrib.auth.
import numpy as np import matplotlib.pyplot as plt # Create a new
from django.db import models class MyModel(models.Model):
>>> a = [1,2,3,4,5,6,7,
import subprocess def main(): subprocess.call(["python", "python
>>> a = [1,2,3,4,5,6,7,
>>> from itertools import permutations >>> a = [1,2,3,4,
>>> from collections import OrderedDict >>> a = OrderedDict() >>> b = OrderedDict()
import numpy as np import matplotlib.pyplot as plt x = np.
>>> a = [1,2,3,4,5,6,7,
import os import time def generate_key(self): return os
import csv with open('output.csv', 'w') as f:
>>> import re >>> s = "Hello, world!" >>> re.sub(
import csv with open('test.csv', 'w') as f:
import numpy as np import matplotlib.pyplot as plt x = np.
>>> a = [1,2,3,4,5,6,7,
>>> import operator >>> operator.in_(['a', 'b', 'c
>>> from itertools import chain >>> a = [1,2,3,4,
>>> import numpy as np >>> a = np.array([1,2,3
>>> d = { ... 'a': [1, 2, 3],
def is_present(iterable): if any(i in iterable for i in
import json json_response = json.loads(response_string)
import sys import sys def main(): sys.argv[1]
class A(object): def __init__(self, x):
from email.mime.mime import MIMEMultipart from email.mime.mime_types
def callback(self, *args, **kwargs): # do something with args
>>> from collections import OrderedDict >>> a = [1,2,3,4,
import gae app = gae.application.create_app(
class MyClass(object): def __init__(self, *args,
class Foo(object): def __init__(self, name):
class MyClass(object): def __init__(self, name):
import datetime start_date = datetime.datetime.now() end_date
import sys def my_function(a, b): return a +
class MyClass(object): def __init__(self, parent=None
>>> import re >>> s = "Hello, world!" >>> re.search(
from django.db import models class MyModel(models.Model):
def is_valid(input, desired_values): if desired_values in
def trueskill(player, ratings): if player.rating > rat
import os import bottle def check_file_size(self, filename
import datetime def get_time(self): return datetime.datetime.
>>> from bs4 import BeautifulSoup >>> html = """<html> ... <body
import re def main(): """This is the main function."""
>>> a = [1,2,3,4,5,6,7,
def get_children(self, node): if node.parent is None:
In [1]: df = pd.DataFrame({'a':['a', 'b
import numpy as np import matplotlib.pyplot as plt def get_data
from django.contrib.auth.models import User from django.contrib.auth.
class Base(object): def __init__(self, x):
import matplotlib.pyplot as plt import numpy as np x = np.
import csv with open('file.csv', 'r') as f:
import numpy as np import matplotlib.pyplot as plt def main():
import numpy as np import matplotlib.pyplot as plt def fit_curve
import sys from PyQt4 import QtGui, QtCore class MyQString(
from django.utils.date import parse from django.utils.dates import parse_
with open('test.txt', 'r') as f: for line in
import win32com.client class MyClient(win32com.client.
import os import sys import os.path # Create a virtualenv #
import pandas as pd import numpy as np df = pd.DataFrame({'
import os import re def check_file(filename): with open
from django.template import Template from django.template.loader import TemplateLoader
import scrapy from scrapy.client import Client from scrapy
class MyClass(object): def __init__(self, name, bases
from traitsui.ui import * from traitsui.ui.common.contextmenu
import google.appengine.api.v1.drive.v1.Drive
import numpy as np import matplotlib.pyplot as plt # Create a list
import imaging import os import sys def main(): print "
>>> import re >>> s = "0.0.0.0" >>>
import csv import datetime # get the year from the csv file year_
from sqlalchemy import * class MyModel(BaseModel): __tab
import csv with open('file.csv', 'w') as f:
def compare_nested(l1, l2): if l1 == l
>>> import struct >>> struct.pack('<i', 'a', 'b',
>>> import re >>> re.sub(r'[\u00a0-\u
from django.db import models class MyModel(models.Model):
import numpy as np def make_array(x): return np.
from sqlalchemy import * class MyModel(BaseModel): __tab
import subprocess import time def main(): print "Running..."
In [1]: df = pd.DataFrame({'a': [1,2,
import c_int def main(): print "Hello World!"
from sqlalchemy.orm import sessionmaker from sqlalchemy.orm import Column from
import redis keys = redis.keys() for key in keys:
>>> import itertools >>> a = [1,2,3,4,5,
>>> import itertools >>> a = [1,2,3,4,5,
import vim class MyCommand(vim.Command): def __init
import odoo config = odoo.Config() config.write
import sqlite3 conn = sqlite3.connect('/home/john/
from PyQt4 import QtGui, QtCore class MyQListWidget(QtGui
class MyModelAdmin(admin.ModelAdmin): def save(self, *
>>> import re >>> s = "a,b,c,d,e,
import urllib2 import urllib url = 'http://www.example.com
>>> import datetime >>> datetime.datetime.strptime(datetime.datetime.now(),
>>> from itertools import product >>> a = [1,2,3,4,
>>> from itertools import product >>> a = [1,2,3,4,
>>> import re >>> d = {'a': 'a', 'b': 'b
import sqlite3 conn = sqlite3.connect('/tmp/mysql.db
import urllib2 import urllib url = 'http://www.google.com
>>> a = [1,2,3,4,5,6,7,
def do_something(self): while True: print "I'm
import sys def main(): print("Hello World!") sys
>>> from itertools import chain >>> l = [1,2,3,4,
import socket import time class MySocket(socket.socket): def
class MyClass(object): def __init__(self, name, value
class MyModel(models.Model): id = models.IntegerField(max
import pycairo import numpy as np import matplotlib.pyplot as plt
>>> from itertools import groupby >>> from itertools import islice >>> from itertools import is
>>> from collections import Counter >>> l = [1,2,3,4,
>>> s = "Hello, world!" >>> re.sub(r'(?<=\
import numpy as np import scipy.stats as stats # Create a random number
import web class MyRequestHandler(web.RequestHandler): def get(self
import sys import sys import time def main(): print("Hello
import sys def main(): sys.exit(1) def
class MyModel(models.Model): id = models.CharField(max
>>> from collections import defaultdict >>> a = [1,2,3,4,
import subprocess def main(): subprocess.call(["c:\Program Files
class MyClass(object): def __init__(self, name, value
from BeautifulSoup import BeautifulSoup from BeautifulSoup import BeautifulSoup class MyMarkdown(object):
>>> import re >>> s = 'a,b,c,d,e,
import os import os.path def get_permissions(path):
>>> import re >>> s = "Hello, world!" >>> re.findall
def do_something(self): if self.is_break():
>>> import re >>> s = "Hello, world!" >>> re.sub(
from dask import * def main(): # do stuff #
from google.appengine.ext import calendar calendar = calendar.Calendar()
import sys from selenium import webdriver class Test(webdriver.webdriver.
import subprocess import time def main(): print "Running..."
import subprocess subprocess.call(["python", "python", "python",
import csv with open('file.txt') as f: for line
import pygal as gp def size_limit(self, width, height):
import urllib2 url = 'http://www.google.com'
import time def main(): print "Hello, world!" time
def round_to_decimal(n): return round(n, 2)
import os import sys def write_file(filename, data):
>>> a = np.array([1,2,3,4,5,6
import urllib2 import urllib url = 'http://www.google.com
import os def change_directory(dir): if dir == '.':
import numpy as np import matplotlib.pyplot as plt # create a matrix
import google.appengine.api.v1.analytics.v1.Analytics
import sys import random def star_rating(x): return random
import hadoop.io import hadoop.streaming class Stream(hadoop.
from django.contrib.auth.models import User from django.contrib.auth.
import numpy as np import matplotlib.pyplot as plt def update_list
import numpy as np import matplotlib.pyplot as plt # create a list
>>> np.argmax(np.array(a), axis=1) array
>>> import struct >>> struct.unpack('<i', b'\x00\x
class MyModel(models.Model): def __init__(self, *
from django.db import models from django.db.models import Q class
from scrapy.http import Request from scrapy.http import Response
def random_number(n): return random.randint(0, 10
import sys import os import time def print_frame(frame):
>>> d = {'a': 1, 'b': 2} >>> d['c
class MyClass(object): def __init__(self, name):
In [1]: df = pd.DataFrame({'a':['a', 'b
import time import citibike def generate_feed(time):
def composition(self, *args, **kwargs): if self.is_
import soap class MyService(object): def __init__(self
import pygame class MyWindow(pygame.Frame): def __
class MyModelAdmin(admin.ModelAdmin): def get_queryset(self
def test_one(): while True: if test_one():
import re def get_value(self, value): return value
import time def main(): time.sleep(1) time
class MyModelForm(models.ModelForm): name = models.CharField
from django.contrib.auth.models import User class UserAdmin(admin.
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> import decimal >>> decimal.Decimal(100) '0.0.0
import numpy as np import scipy.optimize as p # create a copy of
import rpy2 import pandas as pd df = pd.DataFrame({'
>>> import re >>> s = "a,b,c,d,e,
import multiprocessing def main(): # do stuff # do stuff
>>> import datetime >>> date = datetime.datetime.now() >>> date = date
>>> import re >>> s = "a,b,c" >>> re.
def process_key(key, value): if key in value:
import requests url = 'http://www.google.com/search?q
import vtk class MyVT(vtk.VT): def
import os import re def split_file(filename): """
In [1]: df = pd.DataFrame({'a':['a', 'b
import pandas as pd import numpy as np import matplotlib.pyplot as plt
class Foo(object): def __init__(self, name):
>>> import numpy as np >>> a = np.array([1,2,3
>>> import re >>> s = "Hello, world!" >>> re.sub(
def myfunc(x): return x myfunc(1, 2
import z39.50 class Client(z39.50.Client):
import os def remove_extension(filename): if os.path.
import pandas as pd import json df = pd.DataFrame({'a':
import matplotlib.pyplot as plt import numpy as np x = np.
def get_name(self, name): return name def get_
>>> import json >>> d = {'a': 1, 'b': 2, '
>>> from itertools import izip >>> a = [(1,2), (3
from django.contrib.auth.models import User from django.contrib.auth.
class Test(object): def __init__(self, value):
import os import sys def main(): print "Hello, world!"
from sklearn.clustering import Cluster from sklearn.clustering import SVC
>>> l = [1,2,3,4,5,6,7,
import io def read_file(filename): return io.BytesIO
import sys sys.path.append(os.path.dirname(__file__
class MyModel(models.Model): name = models.CharField(max
def get_list(list): for i in range(len(list))
import sys from time import sleep def main(): print("Hello,
>>> from itertools import combinations >>> a = [(1,2),(3,
import numpy as np import matplotlib.pyplot as plt # create a figure
import xml.etree.ElementTree as ET root = ET.parse('http
>>> import numpy as np >>> a = np.array([1,2,3
from django.conf import settings def debug_app(app): app
import sys def print_alignment(x, y): print "alignment
def decorator(func): return func def decorator_wrapper(func):
import os import hashlib # Create a file with the given data with open
import matplotlib.pyplot as plt import numpy as np # Create a grid
import pandas as pd import pandas as pd df = pd.DataFrame({'
In [1]: df = pd.DataFrame({'a':['a', 'b
import matplotlib.pyplot as plt import numpy as np x = np.
from django.contrib.auth.models import User class UserView(View):
import matplotlib.pyplot as plt import numpy as np x = np.
import subprocess subprocess.call(['python', '-c','myfile
from django.db import models class MyModel(models.Model):
from selenium import webdriver driver = webdriver.Firefox() driver.get('
>>> import decimal >>> decimal.Decimal(u'0.0.0')
import sys import time def main(): print("Hello World!")
import struct class Client(object): def __init__(self,
>>> a = [1,2,3,4,5,6,7,
class MyView(View): def get_context_data(self, **
import sqlite3 conn = sqlite3.connect('/tmp/db')
import time import time def get_offset(start, end):
>>> import re >>> s = "a\x00\x00\x00
import sys from PyQt4 import QtGui, QtCore class MyQt(Qt
def get_redirect_url(request): return reverse('admin:post_
from twisted.internet import reactor from twisted.internet.socket import
import os if os.path.exists('/tmp/myfile.txt
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
import os import os.path def remove_first_letter(path):
>>> import re >>> s = "Hello, world!" >>> re.sub(
from django.db import models class MyModel(models.Model):
import sys from PyQt4 import QtGui, QtCore class Window(QtGui
import pandas as pd import numpy as np data = np.loadtxt('
import json json.dumps(my_dict, indent=4)
>>> from itertools import product >>> a = [1,2,3,4,
>>> import re >>> s = 'hello world' >>> re.findall(
import Tkinter as tk class MyFrame(tk.Frame):
import requests def upload_file(filename): with open(filename,
>>> a = [1,2,3,4,5,6,7,
import win32clipboard clipboard = win32clipboard.Clipboard()
import sys from Tkinter import * class MainWindow(Frame):
>>> import re >>> s = 'a=b=c=d=e=
import pandas as pd import numpy as np df = pd.DataFrame({'
from django.conf import settings settings['DJANGO_SETTINGS_MODULE']
def func(x): return x def func_lambda(x):
>>> a = np.array([[1,2,3],[4,5
import numpy as np import numpy as np x = np.arange(
>>> d = {'a': [1, 2, 3], 'b': [4
import csv with open('file.txt', 'r') as f:
sudo sudo -p "sudo -p "sudo password" -p "sudo password"
import csv with open('file.csv', 'r') as f:
>>> a = [1,2,3,4,5,6,7,
import pandas as pd import numpy as np df = pd.DataFrame({'
import numpy as np import matplotlib.pyplot as plt # Create some data
>>> import re >>> s = "Hello, world!" >>> re.findall
import numpy as np import matplotlib.pyplot as plt # Create a new
import csv with open('test.csv', 'r') as f:
import urllib2 import urllib url = 'http://www.example.com
import requests import urllib2 url = 'http://www.google.com
import os import os.path def get_absolute_path(path):
import os import sys # Create a list of all the projects # and
import os import csv with open('file1.csv', 'w')
from rabbitmq.client import Client from rabbitmq.client import
from psycopg2 import * query = "SELECT * FROM mytable
from gi.repository import gtk class MyListStore(gtk.ListStore
import pygame def find_closest_open_place(self, game
import win32gui class Window(win32gui.Window): def
>>> df = pd.DataFrame({'a':['a', 'b', 'c
class MyDecorator(object): def __init__(self, *args,
class A(object): def __init__(self, x):
>>> import re >>> s = "Hello, world!" >>> re.findall
import meteor class MyClient(meteor.MongoClient):
>>> import re >>> s = "Hello, world!" >>> re.search(
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import re >>> s = """<div class="my_class"> ...
from sqlalchemy.ext.declarative import declarative_base from sql
import subprocess import sys import time def main(): print "Hello
import seaborn as sns import numpy as np import seaborn.data
def combine(a, b): return a + b def combine_
>>> import codecs >>> codecs.encode('utf-8') 'utf-8
>>> from itertools import combinations >>> numbers = [1,2,3,4,
def get_value(self, value): if value is None:
import sys from IPython.display import display from IPython.display import display
>>> import re >>> s = "0.0.0.0" >>>
>>> s = "a,b,c,d,e,f,g,
import re with open('file.txt', 'r') as f:
import matplotlib.pyplot as plt import numpy as np x = np.
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
>>> import re >>> re.sub(r'(\d+)', r'\1
>>> import re >>> s = "Hello, world!" >>> re.sub(
import gtk class MyTextView(gtk.TextView): def
def walk(tree): for i in tree: if i == 0
from django.db import models class MyModel(models.Model):
import time def run_after_seconds(seconds): time.sleep
>>> from collections import OrderedDict >>> sorted(list(x)) [('a',
>>> import struct >>> struct.unpack('<i', b'\x00\x
class MyModelAdmin(admin.ModelAdmin): def get_queryset(self
df['label'] = df['label'].apply(lambda x: x.apply(
def generate_name(name): return name def generate_name(
>>> a = np.array([[1,2,3],[4,5
import struct def read_packet(self, data): if data ==
import re def read_number(number): return re.search(
import datetime import time # now is the time that the user entered now
import wx class MyFrame(wx.Frame): def __init__
>>> a = 0 >>> a = 0 >>> a = 0 >>> a =
>>> import re >>> s = 'a\b\b\b\b\
>>> np.array([[1,2,3],[4,5,6
import matplotlib.pyplot as plt import numpy as np x = np.
import matplotlib.pyplot as plt import numpy as np import matplotlib.cm as
def divide(x, y): return x / y def divide(
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> from sqlalchemy.ext.declarative import declarative_base >>>
import subprocess def main(): process = subprocess.Popen(['/
from django.db import models from django.db.models import Post class
import Image import numpy as np import matplotlib.pyplot as plt #
df['a'] = df.apply(lambda x: x[1])
>>> a = np.array([1,2,3,4,5,6
In [1]: import pandas as pd In [2]: df = pd.
import subprocess subprocess.call(["python", "-m", "python",
import datetime date_time = datetime.datetime.strptime(date_str
import pypng import numpy as np import numpy as np img = np
df = pd.DataFrame({'a':['a', 'b', 'c',
import time def time_to_sleep(seconds): time.sleep
import praw import urllib url = "http://www.example.com
import socket import socket def send_packet(self, data):
import requests url = 'http://www.example.com/search?q
import zipfile def zip_file(zip_file_path): with
import pandas as pd import pandas as pd df = pd.read_excel
>>> import re >>> s = "a\nb\nc\nd
import numpy as np import scipy.signal as signal # create a numpy array
>>> import re >>> s = 'a\b\b\b\b\
def get_position(self, x): return self.x + self.
>>> from collections import Counter >>> d = Counter() >>> d['a'] =
import google.maps import time class MyMap(object): def
from django.db import models class MyModel(models.Model):
class MyModel(Base): __tablename__ ='my_model'
class MyModel(models.Model): id = models.CharField(max
for i in range(1,10): print i
import Image import tkinter as tk class ImageCanvas(tk.Frame):
from django.conf import settings from django.http import HttpResponse def get_
import Tkinter as tk class MainWindow(tk.Frame):
def pulp_function(x): return x * x def p
import pandas as pd import numpy as np df = pd.DataFrame({'
import csv with open('file.csv', 'w') as f:
def foo(a,b): return a + b
>>> import re >>> s = 'a\b\b\b\b\
import numpy as np import matplotlib.pyplot as plt x = np.
import pygame import pygame.image as im # Create a PIL image
>>> d = {'a': 'b', 'b': 'c'} >>>
import shutil import os def create_zip(path): zip_
>>> from itertools import product >>> a = [1,2,3,4,
import numpy as np import matplotlib.pyplot as plt import matplotlib.pyplot
class MyModel(models.Model): def __init__(self, *
class MyModel(models.Model): name = models.CharField(max
import getpass import sys password = getpass.getpass() password = password
>>> struct.unpack('<i', 'a', 'b', 'c')
import cv2 def move_image(x, y): cv2
import multiprocessing def snmp_alert(snmp_alert): snmp_alert
from bs4 import BeautifulSoup soup = BeautifulSoup(html) soup.
def get_all_values(self): return self.values
import numpy as np import matplotlib.pyplot as plt # Create a numpy
from bs4 import BeautifulSoup html = """<html> <body>
>>> from collections import defaultdict >>> a = [1,2,3,4,
import sys import matplotlib.pyplot as plt import numpy as np #
from sqlalchemy import create_engine conn = create_engine('mysql://localhost
>>> from itertools import groupby >>> a = [1,2,3,4,
with open('file.csv', 'r') as f: for row in
import Image import ImageDraw img = Image.open("test.jpg")
import re def parse_input(input_file): if input_
def autocomplete(request): if request.method == 'POST': return
import sys import sys import sys def main(): print "Hello
import requests url = 'http://www.google.com/search?q
>>> a = [1,2,3,4,5,6,7,
def __init__(self, name): self.name = name
from django.db import models from django.db import models class MyModel
class MyModel(models.Model): name = models.CharField(max
>>> from itertools import product >>> a = [1,2,3,4,
>>> import numpy as np >>> a = np.array([1,2,3
>>> a = [1,2,3,4,5,6,7,
import pandas as pd import matplotlib.pyplot as plt import numpy as np
In [1]: df = pd.DataFrame({'a':['a', 'b
import numpy as np import matplotlib.pyplot as plt # Create a dataframe
>>> import re >>> s = "a,b,c,d,e,
import pandas as pd import numpy as np import matplotlib.pyplot as plt
import pandas as pd import numpy as np df = pd.read_csv
>>> import re >>> s = "a=b&c=d&d=
from django.template import Template from django.conf import settings def save_
import cv2 import numpy as np img = cv2.imread('
from selenium import webdriver driver = webdriver.Firefox() driver.get('
import requests url = 'http://www.example.com/search?q
>>> import re >>> s = 'a\b\b\b\b\
from pymongo import MongoClient from pymongo import MongoClient class MyCollection
import matplotlib.pyplot as plt import numpy as np x = np.
import argparse parser = argparse.ArgumentParser() parser.add_argument('
>>> import re >>> re.search(r'[A-Z]', '
class MyClass(object): def __init__(self, name):
from flask import Flask, sqlalchemy from flask.ext.filters import filter from
def get_list(a, b): return [a[i] for
import matplotlib.pyplot as plt import numpy as np # Create some data
import os for root, dirs, files in os.walk(os.path
import os from pypi.repository import Repository from pypi.repository import Repository
def similarity(x, y): return (x - y) / (y
class GcsMeasure(models.Model): def __init__(self,
from django.contrib.auth.models import User from django.contrib.auth.
class Foo(object): def __init__(self, name):
import requests url = 'http://localhost:8080/api/v1
import java.util.concurrent class MyDict(dict): def
import re def autoescape(string): return re.sub(r
from django.db import models class MyModel(models.Model):
with open('file.txt', 'r') as f: for line in
import os def find_files(dir): for filename in os.
def visit_tree(self, node): if node.type == 'node
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
from bs4 import BeautifulSoup html = """<table> <tr>
import numpy as np import matplotlib.pyplot as plt x = np.
for i in range(10): print i
>>> import re >>> s = "Hello, world!" >>> re.findall
import sqlite3 conn = sqlite3.connect('/tmp/db')
import numpy as np import numpy as np def binary_tree(x):
class MyClass(object): def __init__(self, name, value
for line in open(filename, 'r'): print line
import collections class MySet(collections.MutableSet): def __init
from django.conf import settings from django.conf import settings from django.conf
>>> import re >>> l = ['a', 'b', 'c'] >>>
from django.db import models class MyModel(models.Model):
from BeautifulSoup import BeautifulSoup html = """ <html> <head>
with open('file.csv', 'r') as f: reader = csv
df.head(1)
class MyModelView(models.ModelView): def get_initial(self
>>> a = [1,2,3,4,5,6,7,
In [1]: df['date'] = df.date.str.replace('
def is_a(a, b, c): return a == b
import matplotlib.pyplot as plt import numpy as np fig = plt.
>>> import json >>> data = {'a': 'b', 'c': 'd
import time def loop_range(start, stop): while start <
import imapclient def read_body(self, message): if message
import numpy as np import scipy.stats as stats # create a random data
In [1]: df = pd.DataFrame({'a':['a', 'b
from spark import Spark from spark.sql.functions import combine from spark.sql
class MyModel(models.Model): name = models.CharField(max
class MyClass(object): def __init__(self, name):
import numpy as np import numpy.random # Get the version number #
import itertools def get_graph_data(graph): for i in
import csv import google.appengine.api import google.appengine
>>> import re >>> l = ['a', 'b', 'c', 'd
from selenium import webdriver from selenium.webdriver.common.keys import Keys
>>> import re >>> s = "a,b,c,d,e,
import multiprocessing def main(): # do stuff # do stuff
class MyModel(models.Model): id = models.CharField(max
import wx class MyMenu(wx.Frame): def __init__
import os import time def main(): print "Running..."
class MyModel(models.Model): name = models.CharField(max
>>> d = {'a': 'a', 'b': 'b', 'c':
def main(): while True: print("Hello, world!")
import sys from PyQt4 import QtGui, QtCore class MyTable(Qt
import sys def print_line(line): print(line)
from django.db import models class MyModel(models.Model):
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import collections >>> d = collections.OrderedDict() >>> for k, v
import csv with open('file.csv', 'r') as f:
import csv with open('file.csv', 'wb') as f:
import cypher cypher.connect('/home/john/myapp/
import urllib2 import urllib2 url = 'http://www.google.
import wx class MainWindow(wx.Frame): def __init__
>>> from collections import OrderedDict >>> a = OrderedDict() >>> b = OrderedDict()
import pandas as pd import csv df = pd.read_csv('file
import sys import sys import sys def test_no_report(filename
import seaborn as sns import seaborn.labels as labels def
import os import os.path # Check if the environment is in the virtualenv
import csv with open('file.csv', 'r') as f:
import time def my_function(x): time.sleep(x
import pandas as pd import numpy as np df = pd.DataFrame({'
from celery.consumer import Consumer from celery.consumer import Consumer from cel
import time def main(): time.sleep(1) print
import xml.etree.ElementTree as ET root = ET.parse('http
>>> a = [1,2,3,4,5,6,7,
>>> a = np.array([[1,2,3],[4,5
def eval_method(method): return method(self.a)
>>> a = [1,2,3,4,5,6,7,
import pylab import numpy as np import matplotlib.pyplot as plt
from scrapy.client import Client from scrapy.client import Client
import socket import socket def main(): socket.socket(socket.
class Base(object): def __init__(self, name):
import os import subprocess def main(): print "Running"
import xml.etree.ElementTree as ET root = ET.parse('http
def print_function(func): print func(func(func(func(
>>> a = [1,2,3,4,5,6,7,
>>> import datetime >>> from datetime import datetime >>> t = datetime.strptime('
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> import re >>> s = "a,b,c,d,e,
import datetime def parse_datetime(s): """Parse a datetime string
import cron class MyCronJob(cron.CronJob): def __
def get_template_string(request): return render_to_response('
import datetime def get_last_hours(self): return datetime.
def func(a, b): return a + b
import sys sys.path.append(os.path.dirname(__file__
import logging import time def gmt_log(filename): time
from sqlalchemy import session def sort_by_id(self, id):
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> a = np.array([1,2,3,4,5,6
from bs4 import BeautifulSoup html = '''<html> <body>
In [1]: df = pd.DataFrame({'a': [1,2,
In [1]: df.groupby('group').apply(lambda x: x.
def recursive_func(x): return x def recursive_func(
import os import sys def get_distribution(name): return os
class Entry(models.Model): name = models.CharField(max_
def partial(f, *args): return f(*args) def
import hashlib import hashlib # Generate a hash hash_str = 'abcdef
>>> import re >>> s = 'hello world' >>> re.findall(
>>> import re >>> s = "Hello, world!" >>> re.search(
In [1]: df = pd.DataFrame({'a': [1, 2,
>>> from itertools import groupby >>> from itertools import islice >>> from itertools import is
import os import numpy as np import matplotlib.pyplot as plt def
import tkinter as tk class MyFrame(tk.Frame): def
>>> import re >>> s = "Hello, world!" >>> re.search(
from django.contrib.auth.models import User from django.contrib.auth.
In [1]: df.groupby('A').apply(lambda x: x.
def get_list_of_tuples(self, context): return [tuple
from ldap import ldap def search(self, query): return ldap.
$ python setup.py install virtualenv
import tkinter as tk class FileMenu(tk.Frame): def
class MyClass(object): def __init__(self, name):
def callback(key, value): if key in dictionary: callback(
import mock class Test(object): def __init__(self,
import sys import sys def main(): sys.exit(1)
>>> import numpy as np >>> a = np.array([[1,2,
from django.conf import settings from django.conf import settings settings.DEBUG
import crypt import sys def create_crypt_key(key, password):
import numpy as np import pycuda def main(): """
import sys import time def print_time(time): print time
from django.contrib.auth.models import User from django.contrib.auth.
from web2py.menu import Menu class MyMenu(Menu):
import os import time def main(): # do something with the file
import os import sys def my_function(name): return os
class MyModel(models.Model): name = models.CharField(max
import matplotlib.pyplot as plt import numpy as np def func(x
class MyModel(models.Model): name = models.CharField(max
import csv with open('file.csv', 'r') as f:
def get_values(self, key): return self.values[key]
In [1]: df = pd.DataFrame({'a': [1,2,
>>> import cStringIO >>> cStringIO.StringIO(cStringIO.
from hashlib import sha1 # Create a hash hash = sha1(str
from nltk.nltk import * from nltk.nlt
def f(x): return x def g(): return g
import numpy as np import matplotlib.pyplot as plt x = np.
df['name'] = df['name']
import pygame import pygame.image as image def blit(x
import os def list_directories(self): return [os.path
>>> from itertools import groupby >>> a = [1,2,3,4,
def prime(n): return n % n
def do_something(self): while True: print("I'm
import sys from PyQt4 import QtGui, QtCore class MyApp(Qt
def delete_item(item): if item.name == 'item1':
import csv import igraph # read the data from the file data =
import numpy as np import sys def read_file(filename):
import numpy as np def get_matrix(x): return np.
import sys import json def var_dump(value): return json
import sys import sys import time class MyApp(object):
class Foo(object): def __init__(self, name):
import os import time def is_exiting(): return os.
def func(x): return x def func_1(x):
class MyForm(forms.ModelForm): def __init__(self,
from selenium import webdriver driver = webdriver.Firefox() driver.get('
>>> import asn1 >>> import binascii >>> binascii.unhexlify(b'
class MyModel(serializers.ModelSerializer): def serialize(self, obj
>>> import re >>> re.sub(r'_(\w+)', r'\
class MyModel(models.Model): id = models.CharField(max
>>> d = {'a': 1, 'b': 2, 'c': 3}
import time def time_func(x): return x + 1
import pandas as pd import urllib2 import urllib2 import urllib2.request
import sys import sys def main(): sys.stdout.write('
import numpy as np import matplotlib.pyplot as plt # Create a grid
import os import sys sys.path.append(os.path.dirname
import unittest import logging class TestLogger(logging.Handler):
>>> a = [1,2,3,4,5,6,7,
import os def get_filetype(filename): return os.path
import socket import urllib2 import urllib2.request def get_ip
from flask import Flask, request class MyApp(Flask): def
>>> import re >>> s = "Hello, world!" >>> re.findall
import nltk class MyConfig(nltk.Config):
import numpy as np import matplotlib.pyplot as plt # Create a 2
import matplotlib.pyplot as plt import numpy as np fig = plt.
from Tkinter import * class MyFrame(Frame): def __
class MyModel(models.Model): name = models.CharField(max
>>> from itertools import product >>> a = [1,2,3,4,
from django.contrib.mail import Email from django.contrib.auth.models import
import os import sys # Create a new shell shell = Popen('git
from bs4 import BeautifulSoup html = """<div> <div>
from datetime import datetime days = datetime.timedelta(days=1)
import redis def query(self, key): return "SELECT * FROM
import urllib2 url = 'http://www.google.com/wiki/
class Foo(object): def __init__(self, name, value):
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for i
import re def get_title(text): title = re.sub
>>> import re >>> s = "Hello, world!" >>> re.findall
import time def set_alarm(alarm): time.sleep(1
from sphinx.ext.docstrings import DocString doc = DocString(doc
import pandas as pd import pandas as pd # Create a pandas dataframe with the
import re def buildout(filename): return re.sub(r
import subprocess def main(): subprocess.call(["python", "-m
import numpy as np import random n = 10 x = np.
def find_best_deal(table): for row in table:
import pandas as pd import csv df = pd.read_csv('test
import rpy2 import matplotlib.pyplot as plt # Define the theme
import os with open('file1.txt', 'r') as f1
with open('file.txt', 'r') as f: for line in
import itertools def find_max_intersection(a, b): return
from django.db import models class MyModel(models.Model):
>>> a = [1,2,3,4,5,6,7,
import pandas as pd import numpy as np df = pd.DataFrame({'
from selenium import webdriver from selenium.webdriver.common.exceptions import WebDriverException
import os import urllib url = 'http://www.google.com/
import csv import os with open('file1.csv', 'r')
import sys from testlib import test_suite class TestCase(test_
import sys import sys import sys def main(): sys.argv
>>> import binascii >>> import binascii >>> binascii.unhexlify(u'abc
>>> a = np.array([1, 2, 3]) >>> b = np
from tor import tor from tor.api import Api from tor.api import Api
import Tkinter as tk class MyApp(tk.Tk):
In [1]: df = pd.DataFrame({'a':['1', '2
def distance(x, y): return np.linalg.norm(x
def recursive_method(self, func): for i in range(1,
import sys from PyQt4 import QtGui, QtCore class MainWindow(Qt
from django.contrib.auth.models import User from django.contrib.auth.
def get_variable(name): return getattr(name, name)
>>> from itertools import groupby >>> l = [[1,2,3],[4
with open('output.txt', 'w') as f: for line in
max_date = None for key, value in d.items(): if
import matplotlib.pyplot as plt import numpy as np x = np.
>>> a = [1,2,3,4,5,6,7,
with open('file1.txt', 'r') as f1: for
import subprocess def main(): subprocess.call(["python", "-m
from datetime import datetime def __range__(self, start, end):
import os import re with open('file.txt', 'r') as
import cython import os import sys # Create a new file #
def get_passage(self, passage): if passage == '
import numpy as np import matplotlib.pyplot as plt def get_tree
for key, value in d.items(): print key, value
import requests url = 'http://www.google.com/search?q
import os import sys import os.path def main(): print
import matplotlib.pyplot as plt import numpy as np x = np.
import sys import time def get_rss_limit(self, limit):
>>> import binascii >>> binascii.unhexlify(b'0b000000000000000000000000
class MyForm(forms.ModelForm): def __init__(self,
from django.utils.html import render_template def main(): html
import requests url = 'http://www.google.com/search?q
>>> import re >>> s = "Hello, world!", "Hello, world!
>>> import itertools >>> l = ['a', 'b', 'c', 'd
import pygame pygame.display.set_mode('screen')
>>> import xml.etree.ElementTree as ET >>> tree = ET.parse('
import time import subprocess def main(): """Process a command.
import time import subprocess def time_func(args): """Return
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import re >>> re.search(r'(\d+)(\.\d+)
import struct def read_int(f): return struct.unpack('
import seaborn as sns import numpy as np # create a list of
import configparser def get_config(self, name): return config
In [1]: df = pd.DataFrame({'a':['a', 'b
import datetime import datetime dt = datetime.datetime.now() #
from bsddb import * db = db.connect('mydb')
import asyncio import time def main(): print "Hello, world!"
from keras.core.training import Data, LinearRegression from keras.ext.
import subprocess if subprocess.call(['python', '-c', 'python',
from web2py.web import * class MyForm(web2py.
import os import os.path def delete_file(path):
from bs4 import BeautifulSoup url = "http://www.google.com/
>>> d = {'a':1, 'b':2, 'c':3}
import os import sys sys.path.append('/path/to/
class A(object): def __init__(self, name):
import itertools def add_nodes(n): for i in range(
>>> from collections import Counter >>> from collections import defaultdict >>> m = defaultdict(int
>>> from collections import defaultdict >>> a = [1,2,3,4,
import sys import sys sys.path.append('/path/to/
from sqlalchemy import create_engine conn = create_engine('mysql://localhost
import urllib2 import urllib url = 'http://localhost:8080/
import wx import time class MyApp(wx.Frame): def
class Test(object): def __init__(self, *args, **
def increment(self, x): if x == 0: return 0
>>> from operator import itemgetter >>> a = [1,2,3,4,
>>> import re >>> re.findall(r'([a-zA-Z
def is_in_range(x, y): return x >= y
import configparser def parse_config(config): config = configparser
import numpy as np import opencv # create a list of all the
def search(self, search_string): if search_string == "1
def get_view_url(self, request): return reverse('admin:
import urllib2 import urllib urllib2.request.add_header('
import os import sys def is_root(): return os.path
from flask import Flask, request class MyView(webapp2.RequestHandler):
def random_function(n): return random.choice(n)
>>> import re >>> s = "hello world" >>> re.findall(
def map(x, y): return x + y
import datetime # Create a list of events events = [ {
def func(a, b): return a + b def func_
def get_values(self, queryset): return queryset.values_list('
with open('file.txt', 'r') as f: for row in
from bs4 import BeautifulSoup soup = BeautifulSoup(html_string) so
In [1]: df.groupby('A').apply(lambda x: x.
>>> a = np.array([[1,2,3],[4,5
import sys from PyQt4 import QtGui, QtCore class MyModel(Qt
class Foo(object): def __init__(self, name):
from django.template.loader import TemplateLoader from django.template.locals import Context
import datetime def update_time(self, time): self.time
class MyClass(object): def __init__(self, name):
>>> import re >>> s = "Hello, world!" >>> re.findall
df['a'] = df.applymap(lambda x: x.replace(None
from selenium import webdriver from selenium.webdriver.common.keys import Keys
import tarfile def set_compression(compression_level): tarfile.set
from django.db import models class MyModel(models.Model):
>>> from itertools import product >>> a = [1,2,3,4,
>>> a = np.array([[1,2,3],[4,5
import urllib2 import urllib import urllib.request url = 'http://
import requests r = requests.post('http://www.ros.com/
import numpy as np import matplotlib.pyplot as plt img = np.
import numpy as np import matplotlib.pyplot as plt x = np.
import numpy as np import matplotlib.pyplot as plt # Create a notebook
>>> from bitarray import BitArray >>> a = BitArray(1) >>>
import os import sys def save_file(filename): if os
from django.db import models class MyModel(models.Model):
import sys def main(): sys.argv[1] = 'foo
from django.conf import settings from django.conf import settings settings.DEBUG
import datetime def now(): return datetime.datetime.now()
import subprocess import time def main(): print "Running..."
import avconv # Get the video duration video_duration = avconv.
import sys from PyQt4 import QtGui class MyQTextEdit(Qt
import numpy as np import sys def load_array(input_file):
import numpy as np import matplotlib.pyplot as plt # Create some random
>>> from itertools import product >>> a = [1,2,3,4,
>>> d = {'a': 'a', 'b': 'b', 'c':
>>> import re >>> re.findall(r'[a-zA-Z
>>> a = [1,2,3,4,5,6,7,
>>> import math >>> x = '0.0' >>> x = math.
import sys def print_list(list): for i in range(
>>> from itertools import groupby >>> a = [1,2,3,4,
def random_list(n): for i in range(n):
import win32gui class Window(win32gui.Window): def
>>> from itertools import product >>> a = [1,2,3,4,
import urllib2 url = 'http://www.google.com'
>>> import re >>> s = '1234567890' >>> re.findall
>>> from itertools import product >>> a = [1,2,3,4,
import spynner import urllib url = 'http://www.google.
import google.appengine.ext.v1beta1 def get_
>>> from itertools import groupby >>> a = [1,2,3,4,
def make_operator(operator, value): return operator + value
import requests def change_accept_language(self, request): if
>>> d = {'a': 'b', 'c': 'd'} >>>
>>> import datetime >>> datetime.datetime.strptime(datetime.datetime.strptime
def generate_numbers(n): return [random.randint(0,
import urllib2 url = 'http://www.example.com/search?
import Image import ImageDraw img = Image.open('test.png')
import os import os.path def open_local_folder(path):
from google.appengine.ext import app from google.appengine.
def get_view_name(request): return reverse('admin.dashboard.
import sqlite3 conn = sqlite3.connect('/home/john/
import xlwt import urllib2 import csv excel = xlwt.Workbook
with open('file.txt', 'r') as f: for line in
import os import sys def save_file(filename): with open
class MyClass(object): def __init__(self, *args,
from pyneo.cypher import cypher from pyneo.cypher
>>> import re >>> s = "mail@example.com" >>> re.
import re def translate(text, locale): return re.sub(
import numpy as np import numpy as np def clip(x, y):
import uuid uuid.uuid4()
df.loc[df.loc[df.loc[df.loc[df.
>>> l = [1,2,3,4,5,6,7,
def get_user_agent(self): return self.user_agent
>>> from itertools import groupby >>> from itertools import product >>> from itertools import product
import subprocess subprocess.call(["python", "-m", "python",
import sys import time def main(): print "Hello, world!"
import astroquery def get_data(self, data): if
>>> import re >>> s = "a,b,c,d,e,
>>> a = [1,2,3,4,5,6,7,
import sys import struct import sys import struct def read_string(
In [1]: df = pd.DataFrame({'a': [1,2,
import lxml.etree as ET root = ET.fromstring(u'
import pygame class MyWindow(pygame.Window): def __
from elasticsearch import Elasticsearch query = """ SELECT * FROM search_results WHERE
import threading import time def main(): print "Hello, world!"
from django.contrib.auth.models import User from django.contrib.auth.
import numpy as np import pandas as pd # create a dataframe with the data
from openerp.client import Client class MyClient(Client): def
>>> import re >>> s = "a,b,c,d,e,
class MyClass(object): def __init__(self, *args,
>>> import math >>> import math >>> a = 0.5 >>> b =
def main(): for i in range(10): print i
from google.appengine.ext import app from google.appengine.
import re with open('file.txt', 'r') as f:
import pexpect def countdown(self): return self.countdown
import os def skip_svn_directories(path): if os.
import matplotlib.pyplot as plt import numpy as np # Create a random
import os import sys def open_file(filename): with open
>>> a = [1,2,3,4,5,6,7,
>>> from itertools import product >>> a = [1,2,3,4,
import struct def pack(data, dtype): """Pack a binary string
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for tag
class MyModel(models.Model): def __init__(self, *
>>> import re >>> s = "a,b,c,d,e,
>>> import socket >>> socket.inet_aton('192.168.1.1
import sklearn # Create a sklearn library sklearn.init()
import pandas as pd import csv df = pd.read_csv('test
import lxml.html root = lxml.html.fromstring(u
import xcode def print_code(code): print code
import wx class MyFrame(wx.Frame): def __init__
def func(x): return x def func_1():
import re def parse_html(self, response): """
import os import os.path def waitpid(pid): if
from django.db import models from django.db.models import User from django
>>> import re >>> s = 'a=b&c=c&d=
>>> a = np.array([1,2,3,4,5,6
import os import sys def main(): print "Hello, world!"
import os import pip # Create the directory to hold the pip files #
>>> import re >>> s = "Hello, world!" >>> re.findall
class Foo(object): def __init__(self, name):
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for child
import re def find_display_rows(text): return re.
>>> import re >>> re.sub(r'[A-Z][A-
import grafana import urllib2 import urllib2 url = 'http
import numpy as np import matplotlib.pyplot as plt def map_data
>>> import struct >>> struct.pack('<i', 'a', 'b',
>>> import codecs >>> codecs.encode('utf-8', 'ignore') '
def partial_function(func): return func(*args) def partial
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import re >>> s = ['a', 'b', 'c', 'd
import cexapi class MyClass(object): def __init__
import bottle class MyHandler(bottle.RequestHandler): def get
import sys sys.path.append(os.path.dirname(__file__
import subprocess def main(): subprocess.call(["python", "-c
>>> import sympy >>> sympy.sympify(sympy.sy
import docx docx.docx_init(docx_docx
import subprocess subprocess.call(['bash', '-c','myscript
class MyClass(object): def __init__(self, value):
import socket import socket import time def send_packet(self, data
import networkx as nx import networkx as nx # Create a graph
>>> import re >>> re.findall('\w+', 'a')
import pythonttle class MyApp(object): def __
from django.core.management.management import Application from django.core.management.
class MyClass(object): def __init__(self, name):
def generator(n): for i in range(n): yield i
>>> class Foo(object): ... def __init__(self, value):
>>> df = pd.DataFrame({'a': [1,2,3,4
import numpy as np import scipy.interpolate import scipy.interpolate.interpol
>>> import re >>> version = '1.0.0' >>> re.
>>> a = [1,2,3,4,5,6,7,
>>> import re >>> re.sub(r'(\s+)', r'\1
import sys import os import sys # OpenCGI version 2.0
from Tkinter import * class MainWindow(Frame): def __
from gi.repository import gtk class MainWindow(gtk.Window):
import codechef # get the user id user_id = codech
from kivy.widgets import Widget from kivy.widgets import Text,
>>> import re >>> s = 'a\b\b\b\b\
import os import sys os.system("python -m ocr -m
import re with open('file.txt', 'r') as f:
def __del__(self): self.f = None self.
import datetime import time # Create a timestamp object timestamp = datetime.datetime
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for row
import ghost import urllib import urllib.request url = 'http://
from pymongo import MongoClient from pymongo import MongoClient class MyDB
>>> df = pd.DataFrame({'a':['a', 'b', 'c
import sys from PyQt4 import QtGui, QtCore class MyApp(Qt
import os import os.path def close_all_windows(path):
<div class="row"> <tr> <td>{{ value
import os import sys # This is the main script # and the script
def my_func(self, *args, **kwargs): if args is
from django.db import models from django.db.models import Job class
import os import shutil def copy_file(filename): with open
import requests url = 'http://www.google.com/search?q
import os import reportlab def get_image(filename): return
>>> import itertools >>> l = ['a', 'b', 'c', 'd
from django.contrib.auth.models import User from django.contrib.auth.
import csv with open('file.csv', 'r') as f:
>>> import re >>> re.findall(r'(\d+)', 'a
def main(): # do something # do something
import socketio import flask import socketio import socketio.io
import csv with open('file.csv', 'rb') as f:
def func(d): return d[1] def func_1
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for i in
for root, dirs, files in os.walk(path): for file in
import urllib2 import urllib url = 'http://www.google.com
>>> from itertools import groupby >>> l = [1,2,3,4,
import itertools with open('file1.txt', 'r') as f1
In [1]: df = pd.DataFrame({'a': [1,2,
def print_line(line): print line print_line(line
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> import re >>> s = "Hello, world!" >>> re.search(
import csv with open('file.csv', 'r') as f:
>>> import time >>> t = time.time() >>> t.time()
import wx class MyButton(wx.Button): def __init__
import multiprocessing import time def worker(timeout=None): while True
>>> a = ['a', 'b', 'c', 'd'] >>> b
>>> l = ['a', 'b', 'c', 'd'] >>> l
import threading class MyThread(threading.Thread): def __init
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for soup in
def test_loop(n): while n: n -= 1
import numpy as np import matplotlib.pyplot as plt # create a list
def get_items(self, request): return self.get_items_
import os import sys import os.path # Create a virtualenv #
>>> import re >>> s = "Hello, world!" >>> re.findall
class Foo(object): def __init__(self, name):
class MyClass(object): def __init__(self, name):
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for i in
driver.get('http://www.google.com')
def main(): print "Hello, world!" print "Hello, world
from django.db.models import Count class MyModel(models.Model):
import sys def main(): print "Hello World!" sys.
import os import os.path def get_local_drives(path
import matplotlib.pyplot as plt import numpy as np # Create some data
>>> s = "a=b&c=c&d=d&e=
>>> from itertools import groupby >>> a = [1,2,3,4,
import numpy as np import matplotlib.pyplot as plt # Create a new
def filter(self, obj): return isinstance(obj, Filter)
class MyForm(forms.ModelForm): def __init__(self,
import gtk class MyApp(gtk.App): def __init
import subprocess subprocess.call(["adb", "shell", "q
>>> d = {'a': 1, 'b': 2} >>> for k,
>>> d = {'a':1, 'b':2, 'c':3}
>>> import re >>> re.findall(r'(\r\n|\n
>>> import socket >>> socket.gethostbyaddr(socket.gethost
df = pd.DataFrame({'a':['a', 'b', 'c',
import json def read_json(file_path): json_data
class MyClass(object): def __init__(self, name, value
>>> import re >>> s = "Hello, world!" >>> re.findall
from django.contrib.auth.models import User from django.contrib.auth.
>>> a = np.array([1,2,3,4,5,6
class MyCollection(object): def __init__(self, name, value
import numpy as np import numpy.io import numpy.io.memmap as
>>> import re >>> s = 'a' >>> re.findall(r
>>> a = np.array([1,2,3,4,5,6
import configobj def parse_settings(self, filename): """Parse
import socket def read_data(socket, data): if data is
def get_user_data(request): user = request.user
>>> import re >>> s = "Hello, world!" >>> re.sub(
import re def shorten(s): return re.sub(r'
import pandas as pd import os import os.path df = pd.
>>> import functools >>> def f(x): ... return x ...
>>> import binascii >>> binascii.unhexlify(s) '0b0
from django.contrib.auth.models import User from django.contrib.auth.
import numpy as np import matplotlib.pyplot as plt x = np.
>>> import re >>> s = "Hello, world!" >>> re.split(
>>> import numpy as np >>> a = np.array([1,2,3
>>> from collections import OrderedDict >>> d = OrderedDict() >>> for i, l in
def get_value(self, value): return value def get_
>>> import numpy as np >>> a = np.array([1,2,3
import time import os def sleep_standby(sleep_time):
class MyModel(models.Model): name = models.CharField(max
<div class="list-item"> <a href="{{ url }}">
import pygame def main(): pygame.init() py
import datetime import time # Get the number of frames in the given time range
import ipython import sys import time def is_notebook(filename):
import numpy as np import matplotlib.pyplot as plt import matplotlib.ticker
>>> import numpy as np >>> a = np.array([1,2,3
>>> from collections import Counter >>> l = [1,2,3,4,
import sys import sys def main(): print "Hello, world!"
import tkinter as tk class MyText(tk.Frame): def
import os import sys def find_connection_file(path):
def test_function(x): return x == 1 def test_
>>> from collections import Counter >>> from collections import Counter >>> l = [1,
import random def random_choice(n): return random.choice(
import os import os.path def get_file_name(filename):
with open('file.txt', 'r') as f: for line in
class Foo(object): def __init__(self, *args, **
import pandas as pd import numpy as np # create a dataframe with the data
class MyClass(object): def __init__(self, name):
from collections import Counter def get_first_item(queue): while
>>> a = np.array([1,2,3,4,5,6
from django.contrib.auth.models import User from django.contrib.auth.
>>> import re >>> s = "Hello, world!" >>> re.split(
from tweepy.api import User from tweepy.api import User
from scrapy.ext.scrapy import ItemLoader from scrapy
import numpy as np import matplotlib.pyplot as plt import matplotlib.pyplot
import xml.etree.ElementTree as ET root = ET.parse('http
>>> import re >>> s = "Hello, world!" >>> re.split('
def get_int(self): return int(self.value)
import re def check_for_whitespace(text): if text.
>>> import itertools >>> a = ['a', 'b', 'c', 'd
import argparse parser = argparse.ArgumentParser(description='Example',
import requests url = 'http://www.example.com/search?q
import numpy as np import hashlib # Create a hash table hash_table
import xlwt # Create a new table with the given name # and the
class MyModel(models.Model): name = models.CharField(max
import sys def main(): print "Hello, world!" sys
import os import os.path def modify_files(path):
import csv with open('test.csv', 'r') as f:
import numpy as np import scipy.sparse as sp # create a sparse matrix
>>> import plist >>> plist = plist.plist >>> for key in plist.keys
class Foo(object): def __init__(self, name):
git add -A -A -b -c "git add -A -b "
import re def find_nodes(self, node): return re.
import numpy as np import sphinx.sphinx.api as s # Create
def recursive_function(func): def wrapper(*args, **kwargs):
import csv with open('file.csv', 'r') as f:
import subprocess for p in subprocess.Popen(["python", "-m",
In [1]: df = pd.DataFrame({'a':['a', 'b
import os import time def main(): print "Running..."
import asyncio import time import random def worker(n): while
import os import sys def main(): print "Hello world!"
import pandas as pd import pandas as pd df = pd.DataFrame({'
from sqlalchemy.orm import sessionmaker from sqlalchemy.orm import create_engine
>>> a = np.array([1,2,3,4,5,6
import urllib2 url = 'http://www.google.com'
from sqlalchemy.orm import sessionmaker from sqlalchemy.orm import Column from
import urllib2 import requests url = 'http://www.google.com
import urllib2 import urllib url = 'http://www.google.com
from django.contrib.auth.models import User from django.contrib.auth.
>>> import re >>> s = "Hello, world!" >>> re.compile(
def biggest(a, b): return a + b
import requests url = 'http://www.google.com' cookies =
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import re >>> s = "a,b,c,d,e,
import pyencha class Test(object): def __init__(
from sklearn.training import train from sklearn.training.model import Model
import numpy as np import matplotlib.pyplot as plt x = np.
>>> import re >>> s = 'a\b\b\b\b\
>>> from itertools import groupby >>> a = [1,2,3,4,
import getpass password = getpass.getpass() password = password.encode('
import requests url = 'https://www.googleapis.com/auth/
import os def find_subfolders(path): for root, dirs
import csv with open('file.csv', 'r') as f:
pip install django
>>> import re >>> s = "a,b,c,d,e,
import threading import time class Thread(threading.Thread): def
import sys from PyQt4 import QtGui, QtCore class MainWindow(Qt
import sys import sys def main(): print "Hello, world!"
>>> a = [1,2,3,4,5,6,7,
import sys sys.stdout.write('Hello World!') sys.stdout.
from django.template import Template from django.template.loader import TemplateLoader from
import pandas as pd import matplotlib.pyplot as plt df = pd.
class MyClass(object): def __init__(self, name):
import sys from PyQt4 import QtGui, QtCore class MyPopup(Qt
import sys sys.path.append(sys.argv[1])
import sys def main(): global sys.argv sys.argv
from boto.sqs import Queue from boto.sqs.client import Queue
import numpy as np import pandas as pd def load_dict(data):
import sys sys.stdout.flush() sys.stdout.flush()
import sys import random def cyrillic(n): return
import numpy as np import matplotlib.pyplot as plt # read the data
from sqlalchemy import * from sqlalchemy.orm import * class MyModel
class MyModel(models.Model): id = models.CharField(max
>>> list(set(x) for x in list_of_tuples) [
>>> import numpy as np >>> a = np.array([1,2,3
>>> import urllib >>> s = "http://www.example.com/a/
from selenium import webdriver from selenium.webdriver.support.ui import WebDriverWait
from PyQt4 import QtGui, QtCore class MyApp(QtGui.Q
import cronjob cronjob.start()
import sys import time class MyApp(object): def __init
from rest_api import RestClient client = RestClient() client.get
import pygame from pygame.locals import * def translate(x,
>>> a = [1,2,3,4,5,6,7,
import Tkinter as tk class MainFrame(tk.Frame):
import random def f(x): return random.choice(x)
def find_solution(solution): if solution == "a": return
def search(data): for i in range(len(data)):
import os def sort_folders(folders): for root, dirs,
import readline def complete(line): if line.startswith('-'
>>> d = {'a': [1, 2, 3], 'b': [4
import csv with open('output.csv', 'w') as f:
import psycopg2 conn = psycopg2.connect("
import sys from IPython.display import display def run_file(filename):
import csv with open('test.tsv') as f: for line
import wx class MyFrame(wx.Frame): def __init__
import sys import time def main(): print("Hello, world!"
def my_function(a, b): return a + b
from gentoo.api import Gentoo from gentoo.api import
>>> from itertools import groupby >>> x = [1,2,3,4,
import wx class MyPanel(wx.Panel): def __init__
>>> import urllib2 >>> urllib2.unquote('http://www.example.
import json class MyModel(models.Model): def __init__
import sys import struct def convert_string(string): return struct
import pandas as pd import numpy as np df = pd.DataFrame({'
>>> import re >>> s = "Hello, world!" >>> re.sub(
import numpy as np import matplotlib.pyplot as plt x = np.
class Foo(object): def __init__(self, *args, **
import crypto import urllib2 url = 'https://www.google.com
from django.db import connection class MyModel(models.Model):
import sys import sys def read_input(filename): if filename
import pyx import sys def sun(x): return x.
import datastore import os def is_empty(datastore): return datastore
from psycopg2 import * class MyTable(Base):
>>> from itertools import product >>> a = [1,2,3,4,
from django.contrib.auth.models import User from django.contrib.auth.
import subprocess import sys def main(): subprocess.call(['python
import wx class MyFrame(wx.Frame): def __init__
for i in range(0, len(list_of_ids)):
>>> a = [1,2,3,4,5,6,7,
from unittest import TestCase class TestCase(TestCase): def
class MyClass(object): def __init__(self, name):
>>> import re >>> s = 'a\b\b\b\b\
>>> import numpy as np >>> a = np.array([1,2,3
def is_in(a, b): return any(x in b for
>>> import numpy as np >>> a = np.array([1,2,3
>>> a = np.array([[1,2,3],[4,5
import re pattern = re.compile(r'(?P<name>.*
class Foo(object): def __init__(self, name):
import os import sys def set_exec(filename): if os
>>> import decimal >>> decimal.Decimal(0.01) '0.01
>>> import re >>> s = "Hello, world!" >>> re.findall
class MyFormatter(object): def __init__(self, formatter):
import subprocess def main(): subprocess.call(["bash", "-c
from django.db import models class MyModel(models.Model):
import os import os.path def find_top_level_directory(
import tkinter as tk class MyFrame(tk.Frame): def
>>> a = [1,2,3,4,5,6,7,
import pandas as pd import numpy as np df = pd.DataFrame({'
import urllib2 import gzip url = 'http://www.google.com
import subprocess def main(): subprocess.call(["python", "python
import re def word_frequency(word): return re.search(
class MyModel(models.Model): id = models.IntegerField()
import inspect import sys def get_module(name): module =
from django.contrib.auth.models import Redirect def redirect_to_other
>>> import re >>> s = '0.0.0.0' >>>
from selenium import webdriver driver = webdriver.Firefox() driver.get('
>>> from itertools import groupby >>> from itertools import product >>> from itertools import product
>>> import xml.etree.ElementTree as ET >>> s = '<a href
class MyClass(object): def __init__(self, name, value
>>> import ctypes >>> ctypes.windll.kernel32.GetCurrentProcess().Get
from bs4 import BeautifulSoup soup = BeautifulSoup(html) table = soup
>>> import re >>> d = {'a': 'a', 'b': 'b
>>> from itertools import product >>> a = [1,2,3,4,
import sys import time def myfunc(x): return x
class MyClass(object): def __init__(self, name):
import os import os.path def get_icon_path(path):
import adventure import time class MyInventory(adventure.Inventory
>>> import re >>> s = 'a\b\b\b\b\
>>> from itertools import izip >>> l = [1,2,3,4
>>> import itertools >>> a = [1,2,3,4,5,
import matplotlib.pyplot as plt import seaborn as sns fig =
import re def underscore(s): return re.sub(r'
class MyModel(models.Model): id = models.CharField(max
>>> import re >>> s = "Hello, world! You can do this with a
import csv with open('file.csv', 'r') as f:
>>> import re >>> s = 'a\b\b\b\b\
import wx import wx.lib.image as image class MyImage(wx
from django.contrib.auth.models import User from django.contrib.auth.
import re def remove_tags(text): if text.startswith
def print_function(func): print func.func_name print
<p> <a href="http://www.example.com">
>>> d = {'a': 1, 'b': 2} >>> d['c
>>> import re >>> s = "0.00" >>> re.split('
class MyModelAdmin(admin.ModelAdmin): class Meta: model
from django.template import Template from django.template import Template class MyModel
import os def create_file(filename): with open(filename,
import wx class MyFrame(wx.Frame): def __init__
import lxml.html def parse_meta(xml_file):
import random def random_number(n): return random.randint
def get_function_name(self): return self.name
df = pd.DataFrame({'a':['a', 'b', 'c',
import codecs def check_utf8(file_name): if not
class MyModelAdmin(admin.ModelAdmin): def save(self, *
import mate def get_origin(self): return self.get
import re def get_values(self, text): return re.
import sys from Tkinter import * class MyApp(object):
class MyModel(models.Model): id = models.CharField(max
import numpy as np # create a numpy array x = np.array([
import socket import time def send_message(self, message):
import os import time def diff_file(filename): with open
import os import os.path def trim_last_few_characters
import matplotlib.pyplot as plt import numpy as np x = np.
def update_attribute(self, name, value): if name in self.
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for element
import sqlite3 conn = sqlite3.connect('my_database.db')
>>> import re >>> s = "Hello, world!" >>> re.search(
import numpy as np import scipy.stats as stats # create a numpy array
import os import sys def main(): print "Running", sys.
>>> import struct >>> struct.pack('<i', 'a', 'b',
def main(): print "Hello, world!" print "Hello, world
>>> import urllib >>> d = datetime.datetime.now() >>> d.str
from django.db import models class MyModel(models.Model):
>>> import itertools >>> a = [1,2,3,4,5,
from django.contrib.auth.urls import url_for def get_view
import subprocess subprocess.call(["python", "-c", "python",
class MyClass(object): def __init__(self, name, value
class MyModel(models.Model): name = models.CharField(max
import json import sys import time def send_data(data):
import urllib2 url = 'http://www.example.com/search?
def get_circular_reference(self, obj): return self.schema
import pyttsx import pyttsx.client class MyVoice(py
>>> from random import choice >>> a = [1,2,3,4,
from django.http import HttpResponse from django.http import HttpResponse class MyHandler
import sys import csv with open('input.csv', 'r') as
import random def random_number(n): return random.randint
>>> import re >>> s = "Hello, world!" >>> re.findall
import pygame def gravity(x, y): if x > 0
from bs4 import BeautifulSoup from bs4 import BeautifulSoup soup = BeautifulSoup(
import numpy as np import sys def load_file(filename):
import subprocess p = subprocess.Popen(['/usr/bin/python
class MyModel(BaseModel): __tablename__ ='my_model
import numpy as np import os import sys def read_file(filename
import Tkinter as tk class MainWindow(tk.Frame):
import numpy as np import scipy.stats as stats # create a data set
import csv with open('file.csv', 'r') as f:
In [1]: df = pd.DataFrame({'a':['a', 'b
def compare(x, y): return x > y
import fileio def read_file(filename): with open(filename
import json json_data = json.loads(open('file.json',
import sys from PyQt4 import QtGui, QtCore class MyFileDialog(
>>> a = np.array([[1,2,3],[4,5
def add_label(x, label): for i in range(x):
import numpy as np import scipy.interpolate x = np.array([
>>> a = np.array([1,2,3,4,5,6
import time import sys def main(): print "Hello, world!"
def test_decorator(f): def wrapper(*args, **kwargs):
import socket def connect(host, port): if not host:
import ftp def ftp_sync(host, port): ftp.login
import numpy as np import matplotlib.pyplot as plt # Create a polygon
class MyModelAdmin(admin.ModelAdmin): def get_queryset(self
df['A'] = df.groupby('A').apply(lambda x: x
>>> import collections >>> from collections import defaultdict >>> d = defaultdict(list)
import requests r = requests.get('http://www.google.com')
import wx class MyGrid(wx.Grid): def __init__
class Foo(object): def __init__(self, name):
>>> import re >>> import os >>> re.match('\.(mp4|
def is_valid(self, value): if value == '1':
>>> import struct >>> struct.unpack('<i', 'a', 'b')
import xmlrpclib class MyRequest(xmlrpclib.Request):
import sys from PyQt4 import QtGui, QtCore class MyWindow(Qt
def myfunc(x): return x myfunc(x)
from collections import defaultdict def get_all_data(self, query):
import numpy as np import matplotlib.pyplot as plt # create a 2
import matplotlib.pyplot as plt import numpy as np x = np.
import os # Create a folder with the content of the current folder # and
with open('file1.txt', 'r') as f1: for
for line in open('file.txt', 'r'): print line
>>> a = np.array([1,2,3,4,5,6
import csv with open('file.csv', 'r') as f:
>>> d = {'a': 1, 'b': 2} >>> d['c
from sqlalchemy.orm import sessionmaker class MyModel(models.Model):
def cut(x): return x[0] def cut(x
def gzip_chunk(chunk_size, chunk_size): gzip_chunk
from collections import Counter def remove_balls(balls): for
def check_for_in_list(list_of_in_list):
>>> import math >>> x = 1.0 >>> x = math.exp(-
>>> import re >>> s = "a\b\b\b\b\
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for tag in
import wx class MyFrame(wx.Frame): def __init__
import csv with open('file.csv', 'r') as f:
class A(object): def __init__(self, x):
class MyModelSerializer(serializers.ModelSerializer): def save(self,
import pandas as pd import numpy as np def root_identification(data
>>> from itertools import product >>> a = [(1, 2), (3,
>>> a = [1,2,3,4,5,6,7,
>>> import collections >>> def get_objects(self): ... return collections.
from django.db import models from django.http import HttpResponse class Upload(
class MyModel(models.Model): max_num = models.IntegerField
import os import os.path def main(): os.chdir
class User(models.Model): user = models.ForeignKey(User)
>>> import re >>> s = "a,b,c,d,e,
import flask from flask.ext.upload import Upload from flask.ext.upload
import sys def tab_four(n): print "Enter a
import matplotlib.pyplot as plt import numpy as np x = np.
>>> import re >>> s = "Hello, world!" >>> re.search(
>>> a = [1,2,3,4,5,6,7,
class MyModel(models.Model): id = models.CharField(max
import os import sys def check_dark_mode(self):
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
from django.db import models class Order(models.Model): id
from django.contrib.auth.models import Site from django.contrib.auth.
>>> import re >>> s = "a,b,c,d,e,
def f(x): return x * x def f(x):
import cx_oracle class MyOracle(object): def __init
import numpy as np import matplotlib.pyplot as plt def millim
def main(): while True: print("Hello, world!")
from datetime import datetime def halfhour(start, end): return start
>>> a = [1,2,3,4,5,6,7,
import os import sys def main(): os.system('python -
import Image import sys import numpy as np import PIL def image_
>>> import math >>> x = 'a' >>> x = 'b'
import os def find_directories(path): return os.path.
import os import os.path def get_workspace_path(path):
import os def get_size(filename): return os.stat(
import nose def test_name(self): return self.name
import xmpp class MucServer(xmpp.Server): def
import threading class Event(object): def __init__(self,
import wx class MyApp(wx.Frame): def __init__
import subprocess def process_input(input_file, output_file):
import numpy as np import matplotlib.pyplot as plt # Create a new
>>> from collections import OrderedDict >>> d = OrderedDict() >>> for key, value in
import time def test_time(self): time.sleep(10
import xml.etree.ElementTree as ET root = ET.parse('http
import sys sys.path.append(os.path.dirname(__file__
with open('file1.txt', 'r') as f1: for
>>> import re >>> s = "Hello, world!" >>> re.sub(
from selenium import webdriver driver = webdriver.Firefox() driver.get('
import tornado.httpserver class MyRequestHandler(tornado.web.RequestHandler):
>>> from itertools import product >>> a = [1,2,3,4,
import datetime import pytest class MyTest(object): def __
>>> from collections import defaultdict >>> a = [1,2,3,4,
def breadth_first(n): if n == 0: return
In [1]: df = pd.DataFrame({'a':['a', 'b
import pymongo class MyMongoClient(pymongo.MongoClient):
>>> from itertools import combinations >>> [(1, 2), (3, 4),
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for i in
import win32com.client class MyApp(win32com.client.
import re def search(text): if text.startswith('#'
from sphinx.contrib.authttp.flask import AutoHTTPFlask from sphinx
>>> import time >>> time.mktime(0) '2009-01
import sys def update_dict(dict): if 'a' in
>>> import base64 >>> base64.b64encode(hmac.new().hex
import pygame from pygame.locals import * def mouse_to_
import numpy as np import scipy.optimize as plt # Create a random sample
from email.parser import MIMEText from email.parser import MIMEText def
import boto bucket = boto.resource('s3', region_name='us
>>> import itertools >>> a = [1,2,3,4,5,
def get_settings(self): return self.settings
>>> a = [1,2,3,4,5,6,7,
class MyModelForm(forms.ModelForm): def __init__(self
>>> import re >>> s = 'a,b,c,d,e,
import cElementTree as cElementTree def parse_file(file):
for root, dirs, files in os.walk(path): for root,
from tkinter import * class MyFrame(Frame): def __init
class MyView(View): def get_view_args(self, *
import os import mock def test_open(filename): with open
class Base(object): def __init__(self, name):
class MyModel(models.Model): name = models.CharField(max
from django.db import models class MyModel(models.Model):
@app.route('/', methods=['GET']) def get(self):
>>> a = np.array([[1,2,3],[4,5
>>> d = {'a': [1, 2, 3], 'b': [4
import pytest def test_repeat(self, n): self.
from flask import Flask, sessionmaker from flask.ext.db import Base from
import win32com.client import win32com.client.client.Win32
class MyModel(models.Model): name = models.CharField(max
from django.db import models from django.db import models class MyModel
def get_value(self, key): return self[key]
import sys import time def main(): print "Hello, world!"
def find_all(a, b): for i in range(len(
from django.contrib.auth.urls import redirect def get_urls(self
>>> a = [[1,2,3],[4,5,6],[
def func(arg): return arg def func_arg(arg):
import sqlite3 conn = sqlite3.connect('/tmp/db.db
def is_active(input): if input == 'y': return
import urllib2 import csv url = 'http://www.example.com
>>> a = [1,2,3,4,5,6,7,
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import cStringIO >>> s = "Hello, world!" >>> cString
import xlwt import csv excel = xlwt.Workbook() excel.
from sqlalchemy import sessionmaker class MyModel(models.Model):
import os import subprocess # Create a virtualenv # This is the main directory
import pybluetooth from pybluetooth.ext import * from pybluetooth
import urllib2 url = 'http://www.example.com/search?
>>> a = np.array([[1,2,3],[4,5
from selenium.webdriver.common.keys import Keys class Selenium(web
from django.contrib.auth.models import File from django.contrib.auth.
class MyModel(models.Model): def __init__(self, *
>>> a = np.array([1,2,3,4,5,6
import sys sys.path.append(os.path.dirname(__file__
import numpy as np import random def shuffled_random_array(
>>> import re >>> s = "Hello, world!" >>> re.split('
from selenium import webdriver class MyApp(webapp.RequestHandler): def
import nltk import numpy as np def category_classification(x):
import urllib2 import urllib2 url = 'http://www.google.
import re def parse_file(filename): with open(filename,
from bs4 import BeautifulSoup from bs4.html import BeautifulSoup soup =
>>> from itertools import product >>> a = [1,2,3,4,
from ndb import * class MyModel(object): def __init
class PostView(View): def get_object(self, request):
from torndb.models import * class MyModel(models.Model):
>>> import struct >>> struct.unpack('<L', l) 'L'
from django.db import models class MyModelView(models.ModelView):
import sys from jython.ext.loader import Loader from jython.ext
import wx class MyPanel(wx.Panel): def __init__
import matplotlib.pyplot as plt import numpy as np x = np.
import numpy as np import matplotlib.pyplot as plt x = np.
import raw_input def my_input(string): if string ==
def is_true(a): return a == True
import cv2 import cv2 def test_resolution(self, frame):
import re def parse_file(filename): with open(filename,
>>> import re >>> re.search(r'(?P<password>.*?)
>>> a = np.array([1,2,3,4,5,6
import csv with open('file.csv', 'r') as f:
class MyModel(models.Model): name = models.CharField(max
>>> import decimal >>> decimal.Decimal('0.0') '0.0
def update_view(request, *args, **kwargs): if request.
import pandas as pd import json data = {'a': 'a', '
class MyModel(models.Model): id = models.CharField(max
import doxygen class MyClass(object): def __init__
import wx class MyWindow(wx.Frame): def __init__
import csv with open('file.csv', 'r') as f:
>>> import re >>> s = '1.1.1.1' >>>
>>> import re >>> s = 'a=b&c=d&d=
from django.db import models class MyModel(models.Model):
import os import sys def save_clipboard(filename): with
import os for root, dirs, files in os.walk(os.path
import urllib2 import urllib import urllib2 url = 'http://www
>>> import re >>> s = "Hello, world!" >>> re.findall
import os import time def pollpri(file): while True:
import numpy as np import scipy.interpolate x = np.linspace
import wx class Button(wx.Frame): def __init__(
def foo(a, b): return a + b def bar(
from twitter.client import TwitterClient from twitter.client import User from twitter.
class Foo(object): def __init__(self, *args, **
import pygame from PyQt4 import QtGui class MyFrame(QtGui
df = pd.DataFrame({'a':['a', 'b', 'c',
import pandas as pd import pandas as pd df = pd.DataFrame({'
>>> a = np.array([1,2,3,4,5,6
import xml.etree.ElementTree as ET root = ET.parse('http
import urllib2 import urllib url = "http://www.google.com
import numpy as np import matplotlib.pyplot as plt # Create a matrix
>>> from binascii import unhexlify >>> unhexlify(0x010101
import numpy as np import matplotlib.pyplot as plt # create a sample
import re def add_operation(op, value): if op ==
{% for number in numbers %} <div class="number">
class MyModel(models.Model): name = models.CharField(max
>>> a = [1,2,3,4,5,6,7,
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> a = [1,2,3,4,5,6,7,
from django.db import models class MyModel(models.Model):
>>> def formatter(s): ... return s.format(s) ...
>>> import json >>> json.loads(json_string) {'a': '
>>> import re >>> s = "Hello, world!" >>> re.findall
from django.contrib.auth.views import login_view from django.contrib.
from Tkinter import * class Window(Frame): def __init
>>> import re >>> s = '0.0.0.0' >>>
class MyClass(object): def __init__(self, name, value
import argparse parser = argparse.ArgumentParser(description='A parser') parser
import pandas as pd import numpy as np df = pd.DataFrame({'
def get_last_time(self): return self.last_time
>>> a = [1,2,3,4,5,6,7,
from celery.tasks import Task from celery.tasks import Task from cel
def is_true(value): return value == True
import sys import os import time def print_file(filename):
>>> a = np.array([[1,2,3],[4,5
import optparse parser = optparse.OptionParser(description='This is a
df['groupby'] = df.groupby('groupby').agg(lambda x
from sqlalchemy import create_engine class MyModel(BaseModel):
>>> d = {'a':1, 'b':2, 'c':3}
In [1]: df = pd.DataFrame({'a':['a', 'b
import sys import cython import pyximport # This is the main
from email.mime.mime import MIMEMultipart from email.mime.text import MIME
import xmlrpclib class Client(xmlrpclib.XMLRPCClient
import random def print_random_string(n): print("Random
>>> from decimal import Decimal >>> from decimal import Decimal >>> from decimal import Decimal
class Foo(object): def __init__(self, name):
import os import sys def check_packages(path): if os
import pyglet import time class MyInput(pyglet.Input
from google.appengine.ext import bigquery class MyApp(big
>>> a = np.array([1,2,3,4]) >>> b
import os import multiprocessing def main(): with open('file1.
import pandas as pd import numpy as np # create a dataframe with the data
>>> import pandas as pd >>> d = {'a':[1,2,3
with open('file.txt', 'r') as f: for line in
from sphinx.ext.lightbox import Lightbox from sphinx.ext.lightbox
import jython from jython.ext.jython import Jython from j
>>> import numpy as np >>> a = np.array([1,2,3
def loop(x): for i in range(x): print i
class MyModel(models.Model): id = models.CharField(max
import os import sys # Create a new screen screen = os.open
>>> from collections import Counter >>> l = [1,2,3,4,
from couchdb import client def get_keys(self, key):
>>> from collections import defaultdict >>> l = [1,2,3,4,
def get_value(self, key): if key == 'a':
import numpy as np import matplotlib.pyplot as plt # create a 3
>>> import re >>> s = 'a\b\c\d\d\
from selenium import webdriver driver = webdriver.Firefox() driver.get('
>>> import random >>> list(random.sample(list1)) [('a
>>> import re >>> s = 'a\b\b\b\b\
class MyClass(object): def __init__(self, name):
import sqlite3 conn = sqlite3.connect('localhost', 'postgresql://
from my_template import Template def main(): template = Template('my
import tornado.ioloop import tornado.ioloop class MyHandler
import arcgis class Label(arcgis.Label): def __init
>>> d = {'a': 'a', 'b': 'b', 'c':
import re def strip_comments(text): return re.sub(
import sys def print_list(list): for i in range(
import threading import time class MyThread(threading.Thread):
import sys import sys import numpy as np def print_results(results
>>> a = [(1,2),(3,4),(5,6
>>> import re >>> s = "abcde" >>> re.sub(r
import zipfile zipfile = zipfile.ZipFile('myzipfile.zip')
import csv with open('file.csv', 'r') as f:
class A(object): def __init__(self, name):
import time def timer_func(x): return x def
>>> tree = {'a': {'a': 1, 'b': 2}, 'c
>>> from itertools import product >>> d = {1: [1,2,3
import numpy as np import matplotlib.pyplot as plt x = np.
import re with open('file.txt', 'r') as f:
import numpy as np import numpy as np def stiff_odes(
from bs4 import BeautifulSoup html = """<html><body> <
from jinja2 import Environment from jinja2.template import Template from jinja2.
import os import time def main(): print "Running..."
import requests url = 'http://www.google.com/api/v
>>> import re >>> s = "a=b&c=d&d=
In [1]: df = pd.DataFrame({'a': [0, 1],
with open('file.txt', 'w') as f: for line in
>>> a = np.array([1,2,3,4,5,6
import datetime import datetime class MyModel(models.Model): date
import numpy as np import matplotlib.pyplot as plt def image_to
import sys def get_line_buffer(line): return '\r
>>> a = np.array([[1,2,3],[4,5
import os with open('file.txt', 'w') as f:
class MyModelAdmin(admin.ModelAdmin): def get_queryset(self
import re def parse_line(line): if not line.strip
class MyModel(models.Model): name = models.CharField(max
from django.db import models from django.db.models import Column from django
def asserquals(a, b): return a == b def
>>> import random >>> a = random.randint(1, 5) >>>
import os import time def check_modification(file_path, file_
import numpy as np import matplotlib.pyplot as plt def get_codon
import os import sys # install python sys.path.append('python
import subprocess def main(): process = subprocess.Popen(['/
>>> import re >>> s = "Hello, world!" >>> re.findall
import excelvba import sys import time class MyApp(excelv
>>> import re >>> s = "Hello, world!" >>> re.sub(
import os import subprocess # Create a directory containing the script # and the
import pygame def get_resolution(self): return self.resolution
>>> d = {'a': ['a', 'b', 'c', 'd'],
>>> df.iloc[0] array([[0, 1, 2,
from django.conf import settings settings['django.conf.settings'] = settings
>>> import ctypes >>> c_void_p = ctypes.c_void_p
import matplotlib.pyplot as plt import numpy as np x = np.
>>> a = np.array([1,2,3,4,5,6
import numpy as np import matplotlib.pyplot as plt x = np.
>>> from binascii import unhexlify >>> unhexlify(b'\x00\
class MyForm(forms.ModelForm): name = forms.CharField(
>>> import re >>> s = "a,b,c,d,e,
import os import os.path def my_documents(path):
>>> from collections import defaultdict >>> d = defaultdict(list) >>> d['a
class MyForm(forms.ModelForm): def clean(self):
import inspect import sys class MyClass(object): def __init
class Foo(object): def __init__(self, name):
class MyModelView(models.ModelView): def save(self, request
from alembic.ext.schema import Schema from alembic.
class MyClass(object): def __init__(self, name):
def test_one(): if test_one(): print "one"
import socket import socket def filter_ipv6(sock): if
>>> import numpy as np >>> a = np.array([1,2,3
from PyQt4 import QtGui, QtCore class MyWizard(QtGui.Q
from sqlalchemy import create_engine def create_query(self, query):
import time def main(): while True: time.sleep(
import csv with open('test.csv', 'rb') as f:
import pandas as pd import numpy as np # create a dataframe with the data
>>> d = {'a':1, 'b':2, 'c':3}
>>> a = [1,2,3,4,5,6,7,
from django.conf import settings settings.SETTINGS['SETTINGS_FILE'] = settings
import os import sys import sys def main(): sys.path
import matplotlib.pyplot as plt import numpy as np x = np.
from Tkinter import * class MainWindow(Frame): def __
>>> import collections >>> d = collections.defaultdict(list) >>> d['
class MyModel(models.Model): name = models.CharField(max
import sys from Tkinter import * class MainWindow(Frame):
>>> import re >>> s = "Hello, world!" >>> re.findall
import sys import os def main(): print "Hello, world!"
>>> import re >>> s = 'a\b\b\b\b\
from zpt import * def is_home(url): return url
import fsctl # Create a new file handle # Create a new file handle
from datetime import datetime class DateFilter(object): def __init__
def range(x, y): return x + y
import numpy as np import pygame # create a list of all visible rows
import socket def get_ip(self): return socket.inet_
from boto.sqs import Message from boto.sqs import Message #
import re def process_line(line): if line.startswith
import fabric from fabric.api import fabric fabric.run('/home/
>>> from itertools import product >>> a = [1,2,3,4,
import base64 def convert_image(image): return base64.
import checklisteditor class MyList(list): def __init__
>>> from itertools import groupby >>> l = [1,2,3,4,
import os def list_subdirs(dir): for root, dirs
import os import time def get_login_time(username):
import azure class EventHub(azure.hub.Hub): def __
import xml.etree.ElementTree as ET root = ET.parse('http
>>> a = [1,2,3,4,5,6,7,
with open('file.txt', 'r') as f: for line in
def generate_generators(n): for i in range(n):
import numpy as np import matplotlib.pyplot as plt import matplotlib.dates as
import himage import numpy as np import himage.image as im
import binascii def hex2hex(hex): hex = hex.decode
import unittest class TestProject(unittest.TestCase): def
def my_function(a, b): return a + b def
class MyModel(models.Model): id = models.CharField(max
import csv with open('file.txt', 'r') as f:
import numpy as np import pycassa def get_indexed_slices
>>> from collections import defaultdict >>> a = defaultdict(list) >>> b = defaultdict
import webcomics import sys import time def download_file():
import multiprocessing def read_data(queue): while True:
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for i in
>>> a = (1,2,3,4,5,6,7,
import urllib2 import urllib2 url = 'http://www.example.
class MyModel(models.Model): name = models.CharField(max
import random year = random.randint(0, 12) date =
import pygame # Create the window window = pygame.display.set
>>> import re >>> s = "1.2.3.4" >>>
>>> import re >>> s = 'a\b\c\d\d\
>>> from collections import OrderedDict >>> d = OrderedDict() >>> sorted(d, key
>>> import re >>> s = "Hello, world!" >>> re.split('
def main(): for i in range(10): print i
class MyForm(forms.ModelForm): def clean(self):
>>> a = [1,2,3,4,5,6,7,
def check_list(list): for i in range(len(list))
def increment(self, x): if x == 1: return 0
In [1]: df = pd.DataFrame({'a':['a', 'b
from llvmlite import LLVMLite from llvmlite.
>>> from collections import defaultdict >>> a = [1,2,3,4,
def find_in_list(list1, list2): if list1
import argparse parser = argparse.ArgumentParser() parser.add_argument('
>>> import sympy >>> sympy.sympify(sympy.sy
import re def split_file(filename): with open(filename,
import requests import json data = {'name': 'John', 'age
>>> import json >>> d = {'a': 'b', 'c': 'd
>>> import numpy as np >>> a = np.array([1,2,3
>>> from itertools import product >>> a = [(1,2), (3,
import subprocess subprocess.call(["bash", "-c", "test.
def func(x): return x def func_1(x):
>>> import numpy as np >>> a = np.array([1,2,3
from django.template import Template from django.template.loader import TemplateLoader from
import wx class MyDialog(wx.Dialog): def __init__
def get_even_odd(l): for i in range(len(
import matplotlib.pyplot as plt import numpy as np x = np.
In [1]: df = pd.DataFrame({'a': [1, 2,
import sys from io import BytesIO def read_file(filename):
with open('file.txt', 'r') as f: for line in
In [1]: df = pd.DataFrame({'a': [1,2,
import ntfs # Create a new ntfs filesystem # Create a new nt
from sqlalchemy import create_engine def get_data(self, query):
def get_variables(self, variable): return self.variables[variable]
from sqlalchemy.ext.sqlalchemy import * from sqlalchemy.ext.sql
class Foo(object): def __init__(self, name):
import numpy as np import matplotlib.pyplot as plt # create a numpy
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for i in
import matplotlib.pyplot as plt import numpy as np def remove_border
import re def parse_file(file_name): with open(
import matplotlib.pyplot as plt import numpy as np # Create some data
import matplotlib.pyplot as plt import numpy as np fig = plt.
import logging class MyLogger(logging.Logger): def __init__
import mayvi def get_extent(self, extent): return extent
>>> from itertools import groupby >>> a = [1,2,3,4,
def get_value(self, key): return self.get_value(
>>> from datetime import datetime >>> d = { ... '2014-01
import urllib2 import urllib.request url = 'http://www.example
>>> from itertools import groupby >>> a = [1,2,3,4,
import requests url = 'http://www.google.com/search?q
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import itertools >>> a = [1,2,3,4,5,
def range_to_list(range): return [range(i) for
>>> import re >>> re.sub(r'(\d+)', r'\1
>>> import re >>> s = 'a\nb\nc\nd
def decorator(func): def wrapper(self, *args, **kwargs):
import xmpp import time class MyHandler(xmpp.RequestHandler):
>>> a = np.array([[1,2,3],[4,5
In [1]: import pandas as pd In [2]: df = pd.
>>> import struct >>> struct.pack('<B', 'a', 'b')
import csv with open('file.csv', 'r') as f:
import requests class MyAPIWrapper(object): def __init__(
>>> import numpy as np >>> a = np.array([1,2,3
def walk_tree(tree): for node in tree: if node
import socket import time def get_response(self, response):
>>> import re >>> s = '[1,2,3,4]' >>>
import numpy as np import random # Generate random data data = np.
import random import random # Create random data data = [] #
import os import time def move_user(user): if user
>>> import re >>> re.sub(r'[A-Z]', r
import os import os.path # Check if the directory exists # If
import collections class MyClass(object): def __init__(self
import os import os.path def get_module(name):
import subprocess subprocess.call(["python", "python", "python",
import re def parse_string(string): return re.sub(
import pyramid import numpy as np import pyramid.io def main
from django.conf import settings from django.conf import settings from django.conf
>>> import re >>> url = r'http://www.example.com/search
import random def random_function(d): return random.choice(
from django.contrib.auth.models import User from django.contrib.auth.
class A(object): def __init__(self, name):
import os import signal def kill_process(pid): print "
class Base(Base): def __init__(self, *args, **
>>> import re >>> s = "Hello, world!" >>> re.findall
import pandas as pd import mysql # create a dataframe with the columns you want
>>> import decimal >>> decimal.Decimal('0.01') '0.01
import cStringIO import socket def send_image(self, image):
from django.db import models from django.utils.html import HTML from django
import requests url = 'http://www.google.com/search?q
class MyStruct(object): def __init__(self, name, value
>>> a = [1,2,3,4,5,6,7,
class A(object): def __init__(self, name):
from django.db import models class MyModel(models.Model):
import subprocess subprocess.call(["python", "python", "python",
>>> import re >>> s = "a,b,c,d,e,
>>> d = {'a': [1, 2, 3], 'b': [4
import os def create_file(filename): with open(filename,
import numpy as np import matplotlib.pyplot as plt # create a list
>>> import re >>> s = '0x0b0c0c0c
from datetime import datetime d = datetime.date(2014, 1, 1
class MyModel(models.Model): name = models.CharField(max
import numpy as np import scipy.stats as stats def variance_coefficient
import os import os.path def relative_dir(path):
import time def log_second(n): return time.time()
>>> from itertools import product >>> a = [1,2,3,4,
>>> import re >>> s = "Hello, world!" >>> re.sub(
def func(x): return x def func_1(x):
import random def sample_list(list): return list[random.
import ftp conn = ftp.FTP() conn.login() conn.
from django.contrib.auth.models import User from django.contrib.auth.
import numpy as np import matplotlib.pyplot as plt def row_flag
from django.contrib.auth.urls import redirect def get_root_url
df = pd.DataFrame({'a':['a', 'b', 'c'],
def f(a, b): return a + b def f(
import ftplib import sys import os import os.path def upload
import os import shutil def main(): # Create a new directory
>>> from collections import OrderedDict >>> d = OrderedDict() >>> for key, value in
>>> import re >>> s = "Hello, world!" >>> re.sub(
with open('file.txt', 'r') as f: for line in
>>> import re >>> s = "a=b=c=d=e=
>>> a = np.array([1,2,3,4,5,6
import numpy as np import matplotlib.pyplot as plt def gaussian_height
from celery.app import App from celery.models import Event class
>>> import itertools >>> l = [1,2,3,4,5,
import pygraphviz as nx import matplotlib.pyplot as plt # Create
class CharField(models.CharField): name = models.CharField(
>>> import re >>> s = 'a=b=c=d=e=
import random def main(): random.seed(42) random
import os def print_files(dir): for filename in os.
import numpy as np import opencv def transform(x, y):
def func(x): return x def func_list(x):
>>> import operator >>> sum(operator.mul(x, x)) 1
df = pd.DataFrame({'a':['a', 'b', 'c',
import os def get_parent_dir(path): return os.
import numpy as np import matplotlib.pyplot as plt # create a matrix
import matplotlib.pyplot as plt import matplotlib.backend as backend # Create
import random def print_number(n): while n < 10:
import requests # http://stackoverflow.com/questions/455934/
>>> from itertools import product >>> from itertools import product >>> a = [1,
import sys import time def main(): print "Hello, world!"
from nltk.tokenize import tokenize tokenizer = tokenize.Tokenizer(
import os import time def main(): os.system('python -
import unittest class TestCase(unittest.TestCase): def
import win32com.client class MyService(win32com.client.
import csv import os import os.path def download_file(request
>>> import re >>> s = "Hello, world!" >>> re.split(
from datetime import datetime date_str = '2014-01-01 00
import cirlces import numpy as np def monkey(x):
def f(x, y): return [x, y] def
import os import pdf pdf = pdf.open('pdf.pdf')
>>> import re >>> s = "Hello, world!" >>> re.sub(
import warnings def user_profile_warning(user): warnings.warn
import os import sys def main(): # do stuff #
class Base(object): def __init__(self, name):
import json json.dumps(my_array, indent=4)
>>> from collections import defaultdict >>> a = [1,2,3,4,
import numpy as np import matplotlib.pyplot as plt # Create some data
>>> df = pd.DataFrame({'a':['a', 'b', 'c
import csv with open('file.csv', 'r') as f:
from django.contrib.auth.exceptions import Unauthorized from django.contrib.auth.
In [1]: df = pd.DataFrame({'a':['1', '2
from mock import Mock class Test(object): def __init__(
import time def hello(): time.sleep(1) print
import matplotlib.pyplot as plt import numpy as np fig = plt.
>>> a = [[1,2,3],[4,5,6],[
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import re >>> s = "1.2.3.4" >>>
from pymongo import MongoClient db = MongoClient() # Get all
import xlwt import numpy as np import xlwt.workbook as wb
class MyModel(models.Model): name = models.CharField(max
>>> import re >>> s = "a,b,c,d,e,
>>> import re >>> s = "a\x00\x00\x00
import os def write_file(filename, path): with open(
import sys def main(): print("Hello, world!")
import datetime import pytz # get the datetime object dt = datetime.datetime
>>> import numpy as np >>> a = np.array([1,2,3
with open('file.txt', 'r') as f: for line in
import itertools def main(): for i in range(10):
from django.contrib.auth.urls import redirect def redirect_to_url
from flask import Flask, request from flask.ext.sqlalchemy import Column, Column
import random with open('file1.txt', 'rb') as f1
import ldap def list_root_dn(dn): return ldap.
import csv with open('file.csv', 'rb') as f:
>>> from itertools import chain >>> l = [1,2,3,4,
>>> d = {'a':1, 'b':2, 'c':3}
import requests import time class MyRequestHandler(requests.RequestHandler): def
class User(db.Model): name = db.CharField(max_
class MyModel(models.Model): def __init__(self, *
from bs4 import BeautifulSoup html = """ <html> <body>
import csv with open('file1.txt', 'r') as f1
>>> a = [1,2,3,4,5,6,7,
>>> import numpy as np >>> a = np.array([1,2,3
def main(): # this is the main function # this is the main
import numpy as np import numpy.fft as fft # create a numpy array
class Base(object): def __init__(self, name):
class MyModel(models.Model): name = models.CharField(max
>>> from collections import OrderedDict >>> d = OrderedDict() >>> d['a'] =
class MyView(models.ModelView): def get_queryset(self,
>>> import itertools >>> l = [1,2,3,4,5,
import os import sys # This is the main function from pkg_resources
import os import os.path def get_file_contents(self,
>>> import json >>> json.dumps(dict(a=1, b=
>>> a = [1,2,3,4,5,6,7,
import unittest class Test(unittest.TestCase): def test
import sys def main(): print "Hello world!" sys.
import csv with open('file.csv', 'r') as f:
import matplotlib.pyplot as plt import numpy as np x = np.
import subprocess import sys import time def run(self): print
>>> import string >>> s = "a\nb\nc\nd
def sum(self, x): return sum(self.items)
import wsgiref class MyHandler(wsgiref.RequestHandler):
>>> import urllib2 >>> urllib2.urlopen('http://www.example.
import numpy as np import matplotlib.pyplot as plt x = np.
class Foo(object): def __init__(self, name):
>>> import sys >>> sys.stdout.write('>>'* 10) '
import untitest class Test(untitest.TestCase):
>>> import re >>> s = "a=b&c=d&d=
import h5py import numpy as np # Create a hdf5 file with
import os import time def delete_tabs(self, tab_index):
from iqr import * class MyList(list): def __init
>>> import re >>> s = "Hello, world!" >>> re.findall
from django.contrib.auth.models import User from django.contrib.auth.
from collections import defaultdict def trigram_frequency(d): return
def main(): while True: print("Hello, world!")
import os import glob def split_file(filename): with open
>>> import math >>> a = 1 >>> b = 2 >>> c = 3
import os import urllib2 import urllib2 def test_delete_media
import requests url = "http://www.google.com/search?q
def print_function(func): print func(1) print func
class MyList(list): def __init__(self, name):
import re def remove_non_english_sub_headings(text
import mqtt def loop(): while True: try:
import os import os.path def get_full_path(path):
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> a = [(1,2), (3,4), (5,6
def recursive_function(f): for i in range(1, len(
import sys import time def print_line(): print("Hello,
import subprocess subprocess.call(["python", "-m", "python",
>>> a = np.array([1,2,3,4,5,6
import matplotlib.pyplot as plt import numpy as np # Create some data
import matplotlib.pyplot as plt import numpy as np # create a random
import numpy as np import matplotlib.pyplot as plt # Create some data
from django.contrib.upload import Upload from django.contrib.files import File
import requests import urllib2 import oauth2 url = 'https://www
>>> l = [1,2,3,4,5] >>> [tuple
from selenium import webdriver driver = webdriver.Firefox() driver.get('
>>> a = [1,2,3,4,5,6,7,
class MyDict(dict): def __init__(self, name, value
import re def write_unicode(s, text): with open(
import numpy as np import numpy as np # create a numpy array x
import sys import sys def my_str(name): return '
def func(x): return x def func_1():
import termios import time def main(): print "Entering a
import pandas as pd import os # Create a pandas dataframe with all the files
import numpy as np import matplotlib.pyplot as plt x = np.
class Foo(object): def __init__(self, name):
from neo4j.api import Bulbs class MyModel(Model
import os def create_lockfile(pid): lockfile = os
import sys sys.path.append(sys.argv[1]) sys.
import matplotlib.pyplot as plt import numpy as np x = np.
class MyModel(models.Model): name = models.CharField(max
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
df['A'] = df.groupby('A').apply(lambda x: x
class MyClass(object): def __init__(self, name, value
>>> d = {'a':1, 'b':2, 'c':3}
from flask import Flask, request from sqlalchemy import * class MyModel(
In [1]: df = pd.DataFrame({'a': [1, 2,
import sys from PyQt4 import QtGui, QtCore class MyQObject(
>>> from datetime import datetime >>> from datetime import timedelta >>> d = datetime.date
from Tkinter import * class MyFrame(Frame): def __
class MyModel(models.Model): id = models.CharField(max
>>> import numpy as np >>> a = np.array([[1,2,
def f(n=1): return f(n)
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import datetime >>> date_string = '2014-01-01 00:
>>> import re >>> re.findall(r'(\d+)(\.\d
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for i in
from sqlalchemy import create_engine engine = create_engine('mysql://localhost
def get_subsets(sublists, start, end): for i
class MyModel(models.Model): id = models.CharField(max
import sys from PyQt4 import QtGui, QtCore class MyText(Qt
class MyClass(object): def __init__(self, name):
from Tkinter import * class MyScene(object): def __
import numpy as np import matplotlib.pyplot as plt x = np.
>>> import collections >>> a = collections.defaultdict(list) >>> b =
def random_user(request): if request.method == 'POST':
import threading import random class MySpider(object): def __
>>> from itertools import product >>> l = [1,2,3,4,
import os import sys def get_path(path): return os
class MyModelForm(forms.ModelForm): def clean(self):
import urllib2 import urllib import urllib.request url = 'http://
import sys import os import sys # setuptools sys.path.
import requests class MyHandler(tornado.web.RequestHandler): def
from pytest import TestCase class MyTestCase(TestCase):
import numpy as np import math def round_to_n(x):
>>> import re >>> s = "a,b,c,d,e,
import pandas as pd import numpy as np df = pd.read_csv
import email def check_encryption(email, password): if not email
>>> from itertools import product >>> a = [1,2,3,4,
>>> a = np.array([[1,2,3],[4,5
def func(d): return d[k] def func_1
import multiprocessing import numpy as np import matplotlib.pyplot as plt def
import datetime date_string = '2014-01-01 00:00
with open('file.txt', 'r') as f: for line in
import os import os.path def open_file(filename):
import os import subprocess # Create a process with the pid p = subprocess
from django.db import models from django.db.models import QObject, Q
import requests import urllib2 import urllib2.request class MyProxy(
import sys import sys def main(): sys.stdout.write('
>>> import re >>> s = "Hello, world!" >>> re.split(
>>> import re >>> m = re.compile(r'@method\s+
import subprocess import sys def read_file(filename): with open
def recursive_read(path): for i in range(len(path))
import argparse parser = argparse.ArgumentParser() parser.add_argument('
import os import subprocess def main(): subprocess.call(["python
class MyClass(object): def __init__(self, name):
import matplotlib.pyplot as plt import numpy as np x = np.
import csv with open('file.csv', 'r') as f:
import pygments def format_code(code): return '<code
import csv with open('file1.csv', 'w') as f1
import matplotlib.pyplot as plt import numpy as np # Create a random
from django.contrib.auth.models import User from django.contrib.auth.
class Foo(object): def __init__(self, name):
>>> np.array([[1, 2, 3], [4, 5
class MyModelForm(forms.ModelForm): def __init__(self
import os with open('file.txt', 'r') as f:
>>> import re >>> s = 'a\b\b\b\b\
import sys def make_newline(self, line): return '\n
from jquery.fileupload import FileUpload from jquery.fileupload.file_handler
>>> import inspect >>> d = {'a': 1, 'b': 2, '
def set_default_value(self, value): self.entry_widget
import sys import sys def main(): sys.stdout.flush()
import tkinter as tk class MyLabel(tk.Label): def
import csv with open('data.csv', 'r') as f:
from tornado.ioloop import IOLoop from tornado.web import *
import csv with open('file.txt', 'w') as f:
>>> import decimal >>> decimal.Decimal(0.01) '01.01
import numpy as np import biopython.core as core def convert_
import os import glob def find_files(path): return glob
import numpy as np import scipy.optimize as p def linear_optimization
import numpy as np def triangle(x, y): return np.
import numpy as np import matplotlib.pyplot as plt def binomial_
>>> import re >>> s = "a,b,c,d,e,
import itertools def merge(a, b): return a + b
In [1]: df = pd.DataFrame({'a':['a', 'b
import sys import time def read_file(filename): with open
>>> from itertools import product >>> a = [1,2,3,4,
import urllib2 import urllib url = 'http://www.google.com
>>> import re >>> s = "a\u00a0\u00a
>>> from collections import Counter >>> from collections import Counter >>> count = Counter(map
from books import books # Create a book with the given name book
import datetime import datetime #... #... #... #
import distutils # Create the __init__.py file # Create the
import sys from PyQt4 import QtCore, QtGui class MyTimer(Qt
df['max_date'] = df['max_date'].apply(lambda x:
>>> import re >>> s = "a,b,c,d,e,
In [1]: df = pd.DataFrame({'a': [1, 2,
import re with open('file1.txt', 'r') as f1
from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker
def cap_int(x): return int(x)
def reverse_assignment(x): return x
>>> import numpy as np >>> a = np.array([1,2,3
import pylab as pl # Create a notebook pylab.init()
>>> import numpy as np >>> a = np.array([1,2,3
class Foo(object): def __init__(self, name):
import matplotlib.pyplot as plt import numpy as np x = np.
>>> import collections >>> d = collections.defaultdict(list) >>> for k
from gae.template import Template from gae.filters import filter class
import ctypes class MyClass(ctypes.Structure): def __init
>>> from collections import defaultdict >>> a = [(1,2), (3,
import os import sys def write_file(filename, data):
>>> import itertools >>> for i in itertools.permutations(string): ...
def tally(x): return x def tally_function(
>>> from itertools import product >>> a = [1,2,3,4,
import os import sys def main(): # This is the main function
import matplotlib.pyplot as plt import numpy as np # create a figure
import com.google.appengine.api.server class MyServer(
import numpy as np import matplotlib.pyplot as plt # Create a random
from django.conf import settings from django.http import HttpResponse from django.http
>>> from itertools import combinations >>> from itertools import combinations >>> from itertools import combinations
import csv with open('file.csv', 'r') as f:
>>> import re >>> s = "Hello, world!" >>> re.sub(
import cPickle import datetime class MyBatcher(cPickle.
import hask def main(): print "Hello, world!"
from celery.tasks import Task from celery.tasks import Task from cel
import re def extract_text(log, text): if not text
import sys sys.stdout.flush() sys.stdout.flush()
>>> import random >>> random.randint(1, 5) 1 >>>
>>> import re >>> re.sub(r'[a-zA-Z0
import matplotlib.pyplot as plt import numpy as np x = np.
>>> import re >>> re.findall(r'(\d+)', 'a
import os import sys def write_file(filename, data):
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for item in
>>> import re >>> s = "Hello, world!" >>> re.sub(
import json with open('file.json', 'r') as f:
>>> import struct >>> d = {'a': 1, 'b': 2, '
def iter_iter(iterable): for i in range(len(iterable))
>>> from collections import Counter >>> a = [1,2,3,4,
import xml.etree.ElementTree as ET root = ET.parse('http
from stanford.ner.model import StanfordNerModel from
import subprocess subprocess.call(["python", "python", "python",
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for tag
import socket import socket import time def handle_close(self, fd
import numpy as np import matplotlib.pyplot as plt def find_equ
import sys from PyQt4 import QtGui, QtCore class MyFileDialog(
>>> l = [1,2,3,4,5,6,7,
>>> s = 'a' >>> s.rstrip('\n') '
>>> from itertools import groupby >>> a = [1,2,3,4,
from itertools import chain def merge(table1, table2): with
import numpy as np import matplotlib.pyplot as plt x = np.
>>> import numpy as np >>> a = np.array([1,2,3
import payroll class MyEvent(payroll.Event): def __
import sys import time def my_func(): print "my_
>>> import datetime >>> datetime.datetime.strptime(datetime.datetime.strptime
df['C'] = df.groupby('C').apply(lambda x: x
from django.db import models from django.db import models class TestCreate
>>> from itertools import groupby >>> l = [1,2,3,4,
import kivy class MyTextInput(kivy.TextInput):
>>> a = np.array([1,2,3,4,5,6
>>> import re >>> s = "a\b\b\b\b\
import gae class MyToken(gae.Token): def __
import os import re #!/usr/bin/env python
>>> from itertools import product >>> a = [1,2,3,4,
>>> import collections >>> a = collections.defaultdict(list) >>> b =
>>> a = [1,2,3,4,5,6,7,
import sys from PyQt4 import QtGui, QtCore class MainWindow(Qt
from django.db import models class MyModel(models.Model):
import multiprocessing class Process(object): def __init__(self,
>>> import re >>> s = "a=b&c=c&d=
>>> import random >>> random.choice(mylist) 'a' >>>
>>> from itertools import islice >>> a = [1,2,3,4
import json json_data = json.loads(data) def parse
>>> a = np.array([[1,2,3],[4,5
def doubletob(list): for i in range(len(list
class MyModel(models.Model): id = models.CharField(max
>>> import pandas as pd >>> df = pd.DataFrame({'a':['a
import sys import sys sys.path.append('/home/john
import numpy as np import matplotlib.pyplot as plt # create a list
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
import numpy as np x = np.arange(0,10)
import time class Test(object): def __init__(self,
import inspect import inspect.stack def get_stack_trace(func):
import datetime date_list = ['2014-01-01', '201
import socket import os import time def listen(port): if
class MyClass(object): def __init__(self, name):
from django.contrib.auth.models import User class UserView(models.
from flask import Flask, request class MyModel(models.Model):
import zipfile zipfile = zipfile.ZipFile('test.zip') with
>>> a = [1,2,3,4,5,6,7,
import os import os.path def mkdir(path): if os
import codecs with codecs.open('file.txt', 'r') as f
class MyClass(object): def __init__(self, x):
def subtract(x, y): return x - y
>>> import re >>> s = "Hello, world!" >>> re.findall
from sklearn.elastic.l1_ratio import L1Ratio from sklearn
import glob files = glob.glob('*.obj') for filename in files
>>> a = np.array([1,2,3,4,5,6
import pygame def move(x, y): if x < 0
>>> import itertools >>> a = [1,2,3,4,5,
import requests class MyForm(forms.Form): def __init__
from django.contrib.auth.views import cache_view def get_view
>>> a = [True, False, False, True, True, True, True,
class MyForm(forms.ModelForm): def __init__(self,
import matplotlib.pyplot as plt import numpy as np x = np.
def main(): while True: print("Hello, world!")
import numpy as np import matplotlib.pyplot as plt def save_data
import pandas as pd import numpy as np # create a dataframe with the data
>>> import bs4 >>> s = "Hello, world!" >>> s.lower
import random def sample_list(list): for i in range(
>>> from datetime import datetime >>> d = {'2014-01-01': '
>>> import re >>> s = "Hello, world!" >>> re.sub(
class Foo(object): def __init__(self, name):
>>> a = np.array([1,2,3,4,5,6
import time def timer_func(x): return x + 1
import threading import time class MyThread(threading.Thread):
import matplotlib.pyplot as plt import numpy as np x = np.
>>> import base64 >>> base64.b64decode(data) 'b
from django.db import models from datetime import datetime class MyModel(models
import time def time_func(x): return time.time()
df['A'] = df.groupby('A').apply(lambda x: x
>>> import re >>> s = '1.2.3.4' >>>
>>> from collections import defaultdict >>> from collections import defaultdict >>> my_list = defaultdict
def func(x): return x def func2(x):
import re def print_art(art): print("{0}
>>> import re >>> s = "a,b,c,d,e,
from mechanize.http import Request from mechanize.cookies import CookieJar
import pygame from pygame.locals import * def get_screenshot(
import sys import sys import sys def main(): sys.exit
class Foo(object): def __init__(self, name, value):
>>> import numpy as np >>> a = np.array([1,2,3
import numpy as np import matplotlib.pyplot as plt img = np.
import sys from ipython.lang import * from ipython.lang import *
import pyramid def view_prefix(self, view_name):
class MyModel(models.Model): def __init__(self, *
import csv with open('file.csv', 'r') as f:
import numpy as np def get_data(data): return np.
from sqlalchemy import * class MyModel(object): def __init
>>> import numpy as np >>> a = np.array([[1,2,
def is_in_array(a, b): return any(a ==
import csv with open('file1.csv', 'wb') as f1
import matplotlib.pyplot as plt import numpy as np x = np.
>>> from collections import defaultdict >>> indices = defaultdict(list) >>> for i in
class MyModel(models.Model): name = models.CharField(max
import os import time def sleep_file(filename): with open
>>> from itertools import product >>> a = [(1, 2), (3,
from selenium import webdriver from selenium.webdriver.common.exceptions import WebDriverException
from django.db import models class MyModel(models.Model):
def test_if(x): if x == 1: return True
>>> l_counts = [0, 0, 0, 0, 0, 0,
import distutils # install distutils from distutils.command import install_
import os import glob with open('file1.txt') as f1
import csv import matplotlib.pyplot as plt import numpy as np #
>>> from collections import Counter >>> l = [1,2,3,4,
class Foo(object): def __init__(self, name):
import threading import time class Thread(threading.Thread): def
class MyModel(models.Model): title = models.CharField(max
from django.db import models class MyModel(models.Model):
>>> a = [[1,2,3],[4,5,6],[
import os import os.path def get_file_path(path):
import locale locale.setlocale(locale.LC_ALL, locale.LC_
from movies.models import Movie # Get the list of movies that are
>>> import json >>> data = {'a': 'b', 'c': 'd
{% for item in item %} {% for item in item %}
>>> from itertools import combinations >>> l = ['a', 'b', 'c',
import os def create_folder(path): if os.path.
def free_list(l): l.sort() l.append
import matplotlib.pyplot as plt import numpy as np x = np.
from mechanize.core import * class MyForm(mechanize.
>>> import numpy as np >>> a = np.array([1,2,3
from sqlalchemy.orm import sessionmaker from sqlalchemy.orm import relationship
import os import sys def main(): print "Running main"
In [1]: df = pd.DataFrame({'a': [1,2,
import sys from PyQt4 import QtGui, QtCore class MyQObject(
def f(x): return x + b
from datetime import datetime total_time = datetime.datetime.now() - datetime
import gobject import numpy as np import matplotlib.pyplot as plt import
import os for path in os.listdir(path): if os
from django.db import models class MyModel(models.Model):
import wx class MyPanel(wx.Panel): def __init__
>>> from itertools import groupby >>> a = [1,2,3,4,
def main(): for i in range(10): print i
>>> import re >>> re.sub(r'<.*?>.*?</.*?>'
import requests import urllib2 import urllib url = 'http://www.
import numpy as np import matplotlib.pyplot as plt x = np.
import pickle import tkinter as tk class MyFrame(tk.Frame):
>>> import csv >>> data = [('a', 'b'), ('c', '
import csv with open('file1.csv', 'r') as f1
from django.db import models class MyModel(models.Model):
from cherrypy.web import web class MyApp(web.Application):
>>> import unicode >>> unicode(self) 'abc'
import numpy as np import matplotlib.pyplot as plt def check_overlap
import sqlite3 conn = sqlite3.connect('/tmp/my_database
>>> import codecs >>> codecs.decode('utf-16le', 'utf-16
from sqlalchemy import create_engine conn = create_engine('postgresql://
import threading import time class TestThread(threading.Thread):
>>> import itertools >>> from itertools import product >>> a = [1,2,
>>> import itertools >>> l = [1,2,3,4,5,
>>> a = np.array([1,2,3,4,5,6
>>> import datetime >>> datetime.datetime.strptime(datetime.datetime.now(),
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
import os import sys def get_file_contents(filename):
import ctypes def callback(x): return x def callback_
>>> import random >>> a = [1,2,3,4,5,
import seaborn as sns import numpy as np # Create a histogram
import vim class MyApp(object): def __init__(self
import os import glob def find_subdirs(filename): return
>>> a = [1,2,3,4,5,6,7,
import time def main(): while True: time.sleep(
>>> from itertools import groupby >>> a = [1,2,3,4,
import re def analyze_file(filename): keywords = re.find
>>> import re >>> s = "Hello, world!" >>> re.search(
import sys from PIL import Image def test_screenshot(self):
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> from itertools import product >>> from itertools import product >>> d = dict(zip
import wx class MyFrame(wx.Frame): def __init__
for i in range(len(a)): print a[i]
>>> import numpy as np >>> a = np.array([1,2,3
import re #!/usr/bin/env python import sys import
def get_default_value(self): return self.get_value()
from salesforce.api import User from salesforce.api import User
>>> l = [1,2,3,4,5,6,7,
import matplotlib.pyplot as plt import numpy as np x = np.
>>> import numpy as np >>> a = np.array([1,2,3
import os import os.path def main(): os.system('
from sqlalchemy import * class MyModel(BaseModel): date =
import biopython def search(s): return s.search(
from django.contrib.news.models import AtNewsItem from django.contrib.
import socket import time class MySocket(socket.socket): def
import tesseract from tesseract.ext.tesseract
import csv with open('output.csv', 'w') as f:
import os def get_directory(path): return os.path.
def closest_point(x, y): return x - y def
import numpy as np import matplotlib.pyplot as plt # Load the image
import os import sys def main(): print "Running..."
>>> a = np.array([1,2,3,4,5,6
from django.db import models class MyModel(models.Model):
class MyModel(models.Model): name = models.CharField(max
for i in range(1,10): print i
import Image import numpy as np import matplotlib.pyplot as plt img
import os def find_folder(path): return os.path.
class MyClass(object): def __init__(self, name, value
from Tkinter import * class Window(Frame): def __init
>>> a = [1,2,3,4,5,6,7,
def poster_buffer(buffer): if buffer is None: buffer
>>> from collections import defaultdict >>> a = [1,2,3,4,
import pandas as pd import time df = pd.DataFrame({'a':
class MyModelChoiceField(forms.ModelChoiceField): def __init__
class MyForm(forms.ModelForm): def save(self, *args
>>> a = np.array([1,2,3,4,5,6
>>> import re >>> s = "a=b&c=d&d=
class Test(object): def __init__(self, obj):
from PyQt4 import QtGui, QtCore class MyWindow(QtGui.Q
>>> import re >>> s = "Hello, world!" >>> re.findall
import os import sys def save_variable(name, value):
import urllib2 url = 'http://www.google.com'
>>> import re >>> s = "Hello, world!" >>> re.search(
import os import random def random_string(length): return random
df = pd.DataFrame({'a':['a', 'b', 'c',
class MyClass(object): def __init__(self, name):
import os import sys def main(): # This is the main function
import os import re def merge(filename, files): with open
import ctypes class MyClass(ctypes.Structure): def __init
df = pd.DataFrame({'a':['a', 'b'], 'c':
class Foo(object): def __init__(self, name):
import requests url = 'http://www.jenkins.com/config/
>>> from math import pow >>> pow(2, 32) 32
cursor = sqlite3.connect('/home/john/mydb/test.
>>> import numpy as np >>> a = np.array([[1,2,
def create_default_id(self, prefix): return self.id +
import wsgiref def main(): server = wsgiref
import xmpp class MyClient(xmpp.Client): def __
>>> import numpy as np >>> a = np.array([1,2,3
def func(x): return x def func2(x):
import os import sys import os.path def main(): os
In [1]: df = pd.DataFrame({'a':['a', 'b
def random_task(task): if task.id == 0:
In [1]: df = pd.DataFrame({'a': [1,2,
import urllib2 import urllib url = 'http://www.google.com
import warnings import sys def log_stacktrace(stack): warnings
sudo -s /path/to/fabric/fabric-config.py sudo -s
def set_value(self, value): self.value = value
from boto.contrib.codecommit import CodeCommit from boto.contrib.codecommit
import matplotlib.pyplot as plt import numpy as np x = np.
>>> import re >>> s = ['a', 'b', 'c', 'd
>>> import re >>> s = "a\b\b\b\b\
>>> import datetime >>> datetime.datetime.now() - datetime.timedelta(days=
import numpy as np import lapack import numpy.linalg as lm
import matplotlib.pyplot as plt import numpy as np x = np.
def id(self): return self.id
>>> from collections import defaultdict >>> a = [1,2,3,4,
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
import numpy as np import matplotlib.pyplot as plt # create a list
def f(x): return x def g(x):
with open('file.txt', 'r') as f: for line in
In [1]: df.groupby('A').apply(lambda x: x.
class Foo(object): def __init__(self, x):
<script> <script> <script> <script>
class Foo(object): def __init__(self, name, value):
>>> import re >>> s = "Hello, world!" >>> re.search(
>>> list(zip(a,b)) [(1, 2), (3
import numpy as np import matplotlib.pyplot as plt x = np.
import os import subprocess # Create a new instance of the plugin plugin =
import matplotlib.pyplot as plt import numpy as np x = np.
from Tkinter import * class Window(Frame): def __init
>>> import re >>> s = "a=b&c=c&d=
import socket import time import socket import time import time import time
class MyModel(models.Model): user = models.CharField(max
from django.contrib.auth.models import User from django.contrib.auth.
>>> a = [1,2,3,4,5,6,7,
df = pd.DataFrame({'a':['a', 'b', 'c',
import cgi import os import time def main(): print "
>>> from itertools import groupby >>> from itertools import groupby >>> from itertools import groupby
import collections def get_dict(self): return collections.defaultdict
>>> type(value) <type 'object'> >>> isinstance(value, object
def callback(key, value): callback(key, value)
import numpy as np import matplotlib.pyplot as plt # Create a list
class MyClass(object): def __init__(self, name, value
from django.db import models class MyModel(models.Model):
import sys import time def main(): print "Hello, world!"
>>> import re >>> re.compile(r'(?P<copyright>\S+)
import csv with open('file.csv', 'r') as f:
import optparse parser = optparse.OptionParser(description='A description of
from keras.training import train_data from keras.training import train_
import time def print_thread(thread): print("Thread: %
from django.contrib.auth.models import User from django.contrib.auth.
def get_default_args(self, *args, **kwargs): if
import numpy as np import matplotlib.pyplot as plt x = np.
import fabric fabric.init() fabric.run_script('/bin/bash
import time import time def get_time(time): return time
>>> import numpy as np >>> a = np.array([1,2,3
import socket import time def update(self, data): self.
class MyListView(View): def get_context_data(self,
import decimal def read_decimal(filename): return decimal.Decimal(
import socket def redirect(self, port): if port == 80:
from pyspark.sql.sql import Integer from pyspark.sql.sql.
from slack.api import User from slack.api import Token class User(
from django.utils.datetime import datetime def datetime_safe(value):
from peewee.models import * class MyModel(object):
def get_value(self, key): return self.get_value(
import numpy as np x = np.array([[1,2,3
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for tag in
from eve.api import Api class MyModel(models.Model):
>>> from itertools import combinations >>> l = [1,2,3,4,
import subprocess p = subprocess.Popen(['jpgs', '-c',
def loop(x): for i in range(x): if x
from django.db import models class MyModel(models.Model):
import scapy class MyHandler(scapy.RequestHandler):
>>> a = [1,2,3,4,5,6,7,
import subprocess import time def benchmark_script(filename): with open
def find_smaller(a, b): return len(a) -
import matplotlib.pyplot as plt import numpy as np x = np.
import sys def main(): print "Hello world!" sys.
from pylons.app import App from pylons.utils import timeit
>>> import datetime >>> dt = datetime.datetime.now() >>> dt.str
def is_in_list(l): if l[0] in l
>>> import numpy as np >>> a = np.array([[1,2,
import lxml.etree as ET root = ET.parse('http://www
>>> a = [[1,2,3],[4,5,6],[
>>> from itertools import product >>> a = [1,2,3,4,
import threading import time class MyThread(threading.Thread):
import os import csv # Create a temporary file with the default filename #
import matplotlib.pyplot as plt import numpy as np x = np.
class MyClass(object): def __init__(self, name):
from selenium import webdriver driver = webdriver.Firefox() driver.get('
class MyModel(models.Model): name = models.CharField(max
class MyModel(models.Model): id = models.CharField(max
import numpy as np import random # Create random data data = np.
>>> a = [1,2,3,4,5,6,7,
from django.db import models class MyModel(models.Model):
>>> from collections import defaultdict >>> a = [1,2,3,4,
from django.db import models from django.db import models from django.db
from twitter.api import User from twitter.api import User from twitter.api
import Image import ImageDraw img = Image.open("test.png")
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> import itertools >>> l = [1,2,3,4,5,
>>> from itertools import izip >>> l = [1,2,3,4
import time import time def timer_func(x): time.
class MyModel(models.Model): name = models.CharField(max
import os import sys def count_file_extensions(filename):
import httplib import urllib2 import urllib2 class MyProfile(htt
import rdflib import xml.etree.ElementTree as ET def write_
import os os.system("osx -s /usr/bin/python
import matplotlib.pyplot as plt import numpy as np x = np.
def func(x): return x def func_1():
import numpy as np import matplotlib.pyplot as plt # Create a 3
from mixpanel import * class MyPanel(mixpanel.Panel):
from Tkinter import * class Window(Frame): def __init
from tastypie.api import Api class MyModel(Api.Model
import flexget import yaml def parse_config(config_file):
import signal def on_signal(signum, frame): signal.
def func(x): return x def func_1(x):
>>> import re >>> s = "Hello, world!" >>> re.findall
def main(): for i in range(10): print i
import numpy as np import matplotlib.pyplot as plt def calc_ph
import cv2 def compare(img1, img2): if img
import subprocess def main(): subprocess.call(["python", "-c
import travis # This is the version number that is used to test #
In [1]: df = pd.DataFrame({'a':['a', 'b
def get_value(self, key): if key in self.data:
import os def process_directory(dir): for filename in os.
>>> l = ['a', 'b', 'c', 'd'] >>> l
import numpy as np import matplotlib.pyplot as plt # Create a matrix
from pymongo import MongoClient class MyCollection(MongoClient): def
def primefinder(n): if n == 0: return False
def get_list(self, key): return [item for item in self
import os path = 'C:/Users/john/Desktop/Desktop/
import matplotlib.pyplot as plt import numpy as np x = np.
import csv with open('file.csv', 'r') as f:
class Document(mongo.Model): id = ObjectId('id') name
if (x == 1) and (y == 2) and (x == 3):
import mysqldb mysqldb.connect('localhost', '127.0.0
>>> import re >>> s = ['a', 'b', 'c', 'd
>>> a = np.array([[1,2,3],[4,5
>>> a = np.array([1,2,3,4,5,6
import numpy as np import matplotlib.pyplot as plt def densest
import inspect def find_functions(module): return inspect.getmembers
import sys from PyQt4 import QtGui, QtCore class MyQMenu(
>>> a = [1,2,3,4,5,6,7,
class MyClass(object): def __init__(self, name, value
>>> from collections import defaultdict >>> a = [1,2,3,4,
>>> import re >>> s = "Hello, world!" >>> re.sub(
class MyClass(object): def __init__(self, name):
>>> a = [1,2,3,4,5,6,7,
import ironpython class MyClass(object): def __init__
import matplotlib.pyplot as plt import numpy as np x = np.
import csv with open('file.txt', 'r') as f:
def hash_function(a, b): return hash_function(a,
import sys import random def main(): print "Hello, world!"
>>> import re >>> ip = '192.168.1.1' >>>
import urllib2 import urllib url = 'http://www.example.com
import numpy as np import scipy.stats as stats df = pd.DataFrame
from sqlalchemy import session from sqlalchemy.orm import sessionmaker class My
>>> import math >>> a = 0.5 >>> b = 0.5
>>> import datetime >>> datetime.datetime.now() datetime.datetime.strptime
import numpy as np import csv with open('file.csv', 'r
>>> import collections >>> a = [1,2,3,4,5,
import matplotlib.pyplot as plt import numpy as np fig = plt.
from sphinx.ext.link import Link from sphinx.ext.link_link import
import xml.etree.ElementTree as ET root = ET.parse('http
>>> from itertools import groupby >>> l = [1,2,3,4,
import numpy as np import matplotlib.pyplot as plt # Create the pdf
import sys from functools import wraps def main(): """A function that
def distance(x, y): return x - y def distance_
import numpy as np import matplotlib.pyplot as plt x = np.
>>> from random import choice >>> [i for i in range(n)] [
import matplotlib.pyplot as plt import matplotlib.colors as colors fig =
import wx class MyFrame(wx.Frame): def __init__
>>> import re >>> s = "Hello, world!" >>> re.sub(
class MyModel(models.Model): def __init__(self, *
import matplotlib.pyplot as plt import numpy as np x = np.
from scikit-learn.tfidf import tfidf from scik
class MyModelView(models.ModelView): queryset = MyModel.objects
>>> import re >>> s = "Hello, world!" >>> re.sub(
for i in range(10): print i
import numpy as np import scipy.stats as stats # Create a Gaussian distribution
>>> import re >>> l = ['a', 'b', 'c', 'd
def __iter__(self): return [self.x for x in self
>>> a = np.array([[1,2,3],[4,5
import wx class MyListBox(wx.ScrolledListBox):
import os def is_repo(path): return os.path.
class MyModel(models.Model): name = models.CharField(max
import sys from pydevd import * def main(): print "
>>> a = np.array([1,2,3,4,5,6
import sys sys.modules[__name__] = __import__(sys.
import subprocess def main(): subprocess.call(["python", "script
import zipfile zipfile = zipfile.ZipFile('test.zip') with
>>> from itertools import count >>> l = [1,2,3,4,
import subprocess cmd = "ls -l -l -l -l -l
import web2py def get_values(self, key): return
import numpy as np import matplotlib.pyplot as plt # create a matrix
import os import sys def open_file(filename): with open
import subprocess p = subprocess.Popen(['bash', '-c', '
from google.appengine.ext import * class MyModel(models.
import pywinauto class Window(pywinauto.Window): def
import os import subprocess # create a shell command shell = subprocess.P
>>> from collections import Counter >>> d = {1: 1, 2: 2,
import subprocess subprocess.call(["python", "-c", "python",
>>> import re >>> s = "This is a test" >>> re.sub
import matplotlib.pyplot as plt import numpy as np x = np.
from django.db import models class MyModel(models.Model):
from django.contrib.auth.models import User from django.contrib.auth.
>>> a = [1,2,3,4,5,6,7,
>>> from collections import Counter >>> from collections import Counter >>> d = Counter()
import re def print_line(line): if line.startswith
import matplotlib.pyplot as plt import numpy as np x = np.
from flask import Flask from flask.ext.static import static_folder from flask
import numpy as np def k_nearest_neighbors(n, k):
import sys sys.path.append(os.path.dirname(__file__
from sqlalchemy import create_engine def reset_variables(self, *args
class A(object): def __init__(self, name):
import matplotlib.pyplot as plt import numpy as np # Create some random
>>> import re >>> s = "Hello, world!" >>> re.findall
import re def parse_file(filename): with open(filename,
import os import subprocess # Create a new shell shell = subprocess.P
class MyClass(object): def __init__(self, *args,
from sphinx.ext.html import HtmlFile from sphinx.ext.html import Html
import wx class MyDialog(wx.Dialog): def __init__
>>> import re >>> s = 'a\b\b\b\b\
import os import sys import time def main(): # Create a
import scrapy import urllib import urllib2 url = 'http://
class Foo(object): def __init__(self, foo):
import numpy as np import matplotlib.pyfits as plt # Create a fits
with open('file1.txt', 'r') as f1: for
import configparser def align_values(config, values): for key
import gtk class MyWindow(gtk.Window): def __init
def my_function(a, b): global a a = a
import Tkinter as tk class Selection(tk.Frame): def
class MyClass(object): def __init__(self, name, value
import re def replace_newline(text): return re.sub(
class MyModel(models.Model): def __init__(self, *
>>> import re >>> s = "a,b,c,d,e,
from scrapy.webdriver.common.exceptions import WebDriverException from scrap
svn commit -m "git commit -m "git commit -m "git commit -
import re def clean_data(data): if data.startswith
import subprocess import os import sys def test_check_output(filename
>>> import struct >>> s = 'a' >>> struct.unpack('<i
>>> import re >>> s = "1,2,3,4,5,
with open('file.txt', 'r') as f: for line in
import csv with open('file.txt', 'r') as f:
def test_method(self): return self.method_name
def main(): while True: print("Hello, world!")
>>> d = {'a': 'b', 'b': 'c'} >>>
from django.db import models from django.db import models from django.db
class Foo(object): def __init__(self, *args, **
>>> import re >>> s = "Hello, world!" >>> re.sub(
from django.db import models class Child(models.Model): id
import sklearn import numpy as np # create a random dataset # create
>>> import json >>> json.dumps(['a', 'b', 'c
>>> df = DataFrame({'a':[1,2,3], 'b':
>>> from itertools import chain >>> l = [1,2,3,4,
>>> from collections import defaultdict >>> d = {1: [1,2,3
def queue_write(self, message): if not self.queue:
def is_valid(value): return isinstance(value, bool)
class MyForm(forms.Form): def __init__(self, *
>>> from ctypes import * >>> from ctypes import * >>> n = 4 >>>
>>> from itertools import product >>> from itertools import product >>> hash(tuple(x
>>> import decimal >>> decimal.Decimal(1.0) '1.0
import datetime import time def rotate(x, y): return x
>>> import numpy as np >>> a = np.array([1,2,3
class MyClass(object): def __init__(self, name):
from django.contrib.auth.models import User from django.contrib.auth.
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> from collections import Counter >>> l = [1,2,3,4,
In [1]: df = pd.DataFrame({'a':['a', 'b
import subprocess subprocess.call(["bash", "-c", "test.
def tree_structure(tree): if isinstance(tree, dict):
import qss class GlowingBorder(qss.QWidget):
import sys sys.path.append(os.path.dirname(__file__
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for key,
import sys def my_function(x): return x def
import datetime import requests def get_periodic_requests(self, period
import pandas as pd import numpy as np import pandas as pd def read
import pymitmproxy import sys import sys class MyProxy(py
def common_factor(x, y): return x * y def
>>> import json >>> json.dumps(my_dict) '{"id
>>> import re >>> s = """<div> ... <div>
class MySearch(models.Model): search_fields = ['name', '
from PyQt4 import QtCore, QtGui class MyEvent(QtGui.Q
>>> import math >>> a = 1.0 >>> b = 1.0
def transform(self, tree): if isinstance(tree, list):
def my_function(a, b): return a + b my
>>> import re >>> s = "Hello, world!" >>> re.sub(
from mock import mock class MyMock(object): def __init__
>>> import re >>> s = "a,b,c,d,e,
import pandas as pd import numpy as np df = pd.DataFrame({'
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
from django.template import Template from django.conf import settings def get_
from datetime import datetime def is_day_in_date(date):
>>> d = {'a': 1, 'b': 2, 'c': 3}
import numpy as np import matplotlib.pyplot as plt x = np.
>>> a = [1,2,3,4,5,6,7,
import numpy as np import matplotlib.pyplot as plt x, y =
def get_list(self, key): if key == 'a':
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> d = {'a':[1,2,3], 'b':[4
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for tag
import gevent import sys class MyHandler(gevent.RequestHandler):
from sqlalchemy import create_engine class MyModel(db.Model):
>>> a = [(1,2),(3,4),(5,6
>>> import re >>> s = "a\b\b\b\b\
import pandas as pd import numpy as np # create a dataframe with the data
>>> from itertools import combinations >>> from itertools import combinations >>> a = ['a',
def comment_form(request): comment_form = CommentForm(request.
import sys def main(): print("Hello World!") sys
import urllib2 url = 'http://www.example.com/search?
import inspect import sys def get_line_numbers(self):
>>> a = [True, False, True, True, True, True, True,
>>> import re >>> s = 'a' >>> re.sub(r'
>>> s = "Hello, world!" >>> s.split(' ') ['Hello
import re def get_html(text): return re.sub(
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for i
import subprocess p = subprocess.Popen(['python', '-c', '
>>> import inspect >>> inspect.isfunction(a) True >>> inspect.
>>> import re >>> s = ['a', 'b', 'c', 'd
import sys import os import sys def main(): print "Running
from ndb import * class MyModel(models.Model): id
from PyQt4 import QtGui, QtCore class MyListWidget(QtGui.
import glob with open('file1.txt', 'r') as f1
>>> import re >>> s = '1.2.3.4' >>>
import sqlite3 conn = sqlite3.connect('/home/john/
import numpy as np import matplotlib.pyplot as plt # Create a new
>>> import numpy as np >>> a = np.array([1,2,3
>>> a = [1,2,3,4,5,6,7,
>>> d = {'a': 1, 'b': 2, 'c': 3}
import csv with open('file.csv', 'r') as f:
>>> import re >>> s = "a,b,c,d,e,
>>> import itertools >>> a = [1,2,3,4,5,
import codecs import sys def open_file(filename): with codecs
def gen_list(n): for i in range(n):
def main(): print "Hello, world!" print "Hello, world
>>> import re >>> s = "Hello, world!" >>> re.findall
import twisted.internet.socket import twisted.internet.socket.
class MyModel(models.Model): name = models.CharField(max
def f(x): return x * x def g(x):
git config --get local_settings.py
>>> import cStringIO >>> s = cStringIO.StringIO() >>>
import os import sys def get_subapps(app): return
import Image import ImageDraw img = Image.open('test.png')
def factorial(x): return x * factorial(x)
>>> from itertools import product >>> from itertools import product >>> from itertools import product
import rospy import time import time def serve_forever(self
from django.contrib.auth.views import static_view from django.contrib.
def my_function(a, b): global a a = a
import urllib2 import urllib url = 'http://www.example.com
>>> from collections import Counter >>> from collections import defaultdict >>> d = defaultdict(int
import os import time def kill_process(pid): print pid
import fabric import os def source(host, port): return "
>>> import re >>> s = "Hello, world!" >>> re.split(
from sqlalchemy import create_engine conn = create_engine('sqlite:///:
>>> a = np.array([1,2,3,4,5,6
>>> import collections >>> d = collections.defaultdict(list) >>> for key
import subprocess subprocess.call(["python", "python", "python",
import ipyparallel def set_process_numbers(node):
>>> import re >>> s = "Hello, world!" >>> re.findall
import urllib2 import urllib2 url = 'http://www.google.
from django.core.files import File from django.core.exceptions import ValidationError
>>> import re >>> s = "This is a text that is a text that is
import numpy as np import scipy.optimize as p def ppf(x
import zipfile zipfile = zipfile.ZipFile('/path/to/zipfile
>>> a = [1,2,3,4,5,6,7,
def get_data(self, data): return data def get_
>>> from datetime import datetime >>> from datetime import datetime >>> df = DataFrame({'
from django.contrib.auth.models import User from django.contrib.auth.
import re def get_data(self, data): if data is
class UserAdmin(admin.ModelAdmin): def get_queryset(self,
class MyList(object): def __init__(self, value):
import wx class MyWindow(wx.Frame): def __init__
from django.core.image import Image def cut_image(image, width
from django.contrib.auth.models import User from django.contrib.auth.
import re def parse_html(self, html): """Parse HTML
import time def time_counter(self): time.sleep(1
from selenium import webdriver driver = webdriver.Firefox() driver.get('
import numpy as np import matplotlib.pyplot as plt x = np.
import inspect def func_name(func): return inspect.getsource
import os import os.path # Get the path to the python package
import xml.etree.minidom as ET root = ET.parse('
def len_dict(d): return len(d)
df = pd.DataFrame({'a':['a', 'b', 'c',
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
class LogEntry(models.Model): slug = models.CharField(max_
class MyModel(models.Model): id = models.CharField(max
import matplotlib.pyplot as plt import numpy as np x = np.
import pygame import pygame.time class Sprite(pygame.
import subprocess subprocess.call(["python", "python", "python",
import inspect def func_list(module): return inspect.getmembers
>>> a = np.array([1,2,3,4,5,6
import numpy as np import matplotlib.pyplot as plt # create a matrix
import wx class MyFrame(wx.Frame): def __init__
import os def get_file_size(filename): return os.
from kivy.app import App from kivy.app.actions import
def do_something(self, *args, **kwargs): if self.
import chef def main(): print "Hello, world!"
>>> from itertools import product >>> a = [1,2,3,4,
def newpointerobj(self, arg): if arg is None:
>>> import re >>> s = "Hello, world!" >>> re.split('
import numpy as np import matplotlib.pyplot as plt x = np.
def foo(**kwargs): return foo(**kwargs)
class InlineInlineAdmin(admin.ModelAdmin): queryset = InlineInline.objects
import os import multiprocessing def download_file(filename): with open
import numpy as np import numpy as np def get_indices(x):
import sys def main(): print("Hello world!") sys
import pygame def get_pos(self, x, y):
def foo(a, b): return a + b
import matplotlib.pyplot as plt import numpy as np x = np.
import glob import numpy as np def find_coordinates(x, y):
import json json_data = json.loads(data)
import numpy as np import matplotlib.pyplot as plt # create a dataframe
import twisted.internet.twisted.socket import twisted.internet
>>> import numpy as np >>> a = np.array([1,2,3
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> a = (1,2,3) >>> b = (4,5
import subprocess subprocess.call(["python", "start", "-c",
import time import time def sleep_and_sleep(seconds):
def freeze(self): self.a = 0 self.b =
>>> import codecs >>> codecs.encode('utf-8') 'utf-8
>>> import re >>> s = "Hello, world!" >>> re.findall
import json data = {'a': [1, 2, 3], 'b
import pandas as pd import sys # Create a pandas dataframe with the data
import pygame import pygame.time def play_next_song
import matplotlib.pyplot as plt import numpy as np fig = plt.
>>> import re >>> s = 'January 1 January 1 2014'
import sys sys.stdout = sys.stdout sys.stderr = sys.stderr
import csv with open('file.csv', 'r') as f:
>>> import re >>> s = 'a\b\b\b\b\
>>> import re >>> s = "Hello, world!" >>> re.sub(
import json import re json_data = json.loads(open('data
from sqlalchemy import sessionmaker from sqlalchemy.orm import sessionmaker class
import urllib2 import urllib2.request class MyProxy(object):
import sys import os def write_file(filename): print filename
import requests class MyModel(models.Model): def __init__
>>> import itertools >>> l = [1,2,3,4,5,
from django.db import models class MyModel(models.Model):
>>> import re >>> s = '1.2.3.4' >>>
import sympy as sympy def get_matrix(x): return
import numpy as np def print_matrix(matrix): """Print a
>>> import struct >>> struct.pack('<i', 'x', 'y')
>>> from itertools import groupby >>> a = [1,2,3,4,
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for element
>>> import numpy as np >>> a = np.array([1,2,3
df['name'] = df['name'].rename(columns=['name'])
>>> import urllib2 >>> url = 'http://www.example.com/search
>>> s = "Hello, world!" >>> s.replace(' ','').
import yaml def load_yaml(yaml_file): yaml_file
import json import yui.io class MyHandler(yui.io
def get_value(self, key): if key in self.values:
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> from itertools import groupby >>> a = [(1,2), (3,
>>> import math >>> a = [1,2,3,4,5,
from django.contrib.auth.models import User from django.contrib.auth.
class User(models.Model): user = models.ForeignKey(User)
import numpy as np import os with open('file.txt', 'r
import pygame def main(): pygame.init() py
from django.contrib.auth.utils import login from django.contrib.auth.
import tkinter as tk class MyFrame(tk.Frame): def
import win32api class MyPrinter(win32api.Printer):
>>> d = {'a': 1, 'b': 2, 'c': 3}
import urllib2 url = 'http://www.example.com/search?
>>> import re >>> re.sub(r'(\d+)', r'\1
import os import os.path base_dir = os.path.dirname
class MonthlyTotal(object): def __init__(self, month):
import google.appengine.api.v2 # Create a new token
>>> a = [1,2,3,4,5,6,7,
def synchronize(l): l.append(1) l.append
import sys sys.stdout = sys.stdout sys.stdout.flush()
class MyModel(models.Model): name = models.CharField(max
>>> import binascii >>> data = "abcde" >>> binascii.unhexlify
from django.db import models from django.db.models import Model from django
import datetime # create a list of datetime objects dates = [datetime.datetime
import os import re def find_file(filename): return re
>>> import decimal >>> decimal.Decimal(1.0) '1.0
import numpy as np import matplotlib.pyplot as plt # Create a new
>>> import re >>> s = "a,b,c,d,e,
import datetime def run_everyday(start_date, end_date):
from django.db import models from django.contrib.auth.models import User
import datetime import time # get the datetime object dt = datetime.datetime
import re def bullet_text(text): return re.sub(
class MyModel(BaseModel): __tablename__ ='my_model
def func(): return lambda x: x
class MyClass(object): def __init__(self, name):
class Foo(object): def __init__(self, name):
from bs4 import BeautifulSoup soup = BeautifulSoup(html) soup.
>>> import re >>> s = "Hello, world!" >>> re.findall
import sys from spynner.gui import * from spynner.gui
import sys import sys import sys import time def main():
>>> d = {'a':1, 'b':2, 'c':3}
>>> a = np.array([1,2,3,4,5,6
>>> decimal = '0.01' >>> decimal.round(decimal) 0
import csv with open('file.csv', 'r') as f:
import numpy as np import numpy as np def f(x):
>>> import re >>> s = "Hello, world!" >>> re.sub(
import requests import time def get_data(url): data =
def test_function(func): return func(1,2)
import threading import time class Thread(threading.Thread): def
import xml.etree.ElementTree as ET def parse(self, response):
def is_equal(amount, total): if total == 0:
>>> a = np.array([[1,2,3],[4,5
>>> import re >>> s = "Hello, world!" >>> re.sub(
import os def main(): with open('file1.txt', '
>>> from itertools import groupby >>> from itertools import product >>> from itertools import product
>>> a = np.array([1,2,3,4,5,6
import sys import time def main(): print "Hello, world!"
class MyModel(models.Model): name = models.CharField(max
from google.appengine.ext import static_stylesheet from google.appen
>>> import re >>> re.findall(r'(?<=\d)\s+
def get_data(self, request): data = self.request.json
class Negation(object): def __init__(self, value):
import logging class MyLogger(logging.Handler): def __init__
>>> import re >>> s = 'a\b\b\b\b\
import os import sys def create_file(filename): with open
>>> import re >>> s = "Hello, world!" >>> re.sub(
import matplotlib.pyplot as plt import numpy as np x = np.
import requests class MyHandler(tornado.web.RequestHandler): def
import Image import ImageDraw img = Image.open('test.jpg')
>>> import itertools >>> a = [1,2,3,4,5,
class MyModelChoiceField(forms.ModelChoiceField): def clean(self
>>> import datetime >>> from datetime import datetime >>> datetime.datetime.now()
In [1]: df = pd.DataFrame({'a':['a', 'b
def sum_numbers(n): return sum(n)
>>> from itertools import groupby >>> a = [[1,2,3],[4
from django.db import connection class MyModel(object): def __
import warnings import numpy as np import numpy as np def image_not
def move_all(self, x, y): if x == y:
from bs4 import BeautifulSoup html = """<table> <tr>
import argparse parser = argparse.ArgumentParser(description='This is a help message
def get_list(start_point, start_index): for i in
class MyModel(models.Model): name = models.CharField(max
import os import os.path def upload_file(filename):
import wx class Window(wx.Frame): def __init__(
import xlwt import xlwt.workbook as wb workbook = wb
import sys import os import sys def main(): sys.path
import math def degree_average(x): return math.sqrt(
>>> from collections import defaultdict >>> a = defaultdict(list) >>> b = defaultdict
import requests url = 'http://www.google.com/search?q
def get_id(self): return self.id def get_
>>> import re >>> s = "Hello, world!" >>> re.match(
import win32clipboard def read_clipboard(clipboard):
class A(object): def __init__(self, name, bases,
import csv with open('output.csv', 'wb') as f:
>>> s = "a" >>> s.rstrip('\n') '
>>> import email >>> email.utils.parse_email(email_string)
class MyModel(models.Model): title = models.CharField(max
from lxml import etree root = etree.fromstring(u'<div
import ndb def get_blob_data(self, blob_name):
import urllib2 import urllib2 url = 'http://www.google.
import socket import socket def find_ip(sock): if sock
>>> a = np.array([1,2,3,4,5,6
class MyModel(models.Model): id = models.CharField(max
def get_url(self): return "http://www.example.com
import urllib2 import urllib url = 'http://www.example.com
df['A'].apply(lambda x: x.isin(df['B'].
import tkinter as tk class MyFrame(tk.Frame): def
import subprocess subprocess.call(["ls", "-l", "1",
>>> import re >>> s = 'a\b\b\b\b\
def foo(a,b): return a + b
import json url = 'http://www.google.com/search?q
import re def extract_text(text): if re.search(
def render_function(self, name, *args, **kwargs): if
class MyMock(object): def __init__(self, *args,
import arcpy # Create a new table with the values of the same name
import win32com.client import win32com.client.api class
import sys import time def main(): print "Entering a program
>>> d = {'a':1, 'b':2, 'c':3}
import os import sys def add_text(text): """Add
import wx class MyWindow(wx.Frame): def __init__
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> from itertools import combinations >>> [int(x) for x in combinations(x
import pygame def nearest_coords(x, y): return (
def func(x): return x def func_2(x):
df = pd.DataFrame({'a':['a', 'b', 'c',
def main(): for i in range(10): print i
class MyModel(models.Model): name = models.CharField(max
for i in range(10): print i
>>> import re >>> s = "Hello, world!" >>> re.split('
import matplotlib.pyplot as plt import numpy as np import matplotlib.cm as
import os import socket def write_to_file(filename):
>>> import decimal >>> decimal.Decimal(0.123) '0.123
import tkinter as tk class MyDialog(tk.Frame): def
<div class="my_template"> <div class="my_template_
def set_variable(self, name, value): if name in self.
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for link
import sys def main(): sys.argv[1] = 'test
def get_list(self): for i in range(1, len(
import time import pygame def play(): print "Playing..."
class SpellChecker(object): def __init__(self, spell_
>>> import re >>> re.sub(r'(\d+)', r'\1
import datetime import sys class MyQObject(QObject): def
>>> a = [1,2,3,4,5,6,7,
import os import os.path def copy_file(path, dest):
>>> import re >>> re.sub(r'[a-zA-Z0
def get_range(self, start, end): if start < end:
import numpy as np import matplotlib.pyplot as plt x = np.
>>> a = np.array([[1,2,3],[4,5
import subprocess subprocess.call(["python", "-c", "python",
>>> import re >>> s = '2014-01-01 00:00:
import numpy as np import numpy as np def linear_cost(x):
import re def word_accuracy(text): return re.search(
import sympy def product(x, y): return x * y
In [1]: df = pd.DataFrame({'a':['a', 'b
import subprocess import sys def read_file(filename): with open
from mssql import * query = """SELECT * FROM mytable WHERE id
class MyClass(object): def __init__(self, name):
import pygame import numpy as np import pygame.pygame as pygame
import itertools def pairwise2(x,y): return itertools.product
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
import subprocess subprocess.call(["python", "python", "python",
import os import sys # Create a virtualenv # Create a virtualenv #
import datetime date_format = '%Y-%m-%d %H:%M
import time import sys def main(): print "Hello, world!"
import itertools def get_list(self, articles): for article in
import subprocess import os import subprocess ssh = subprocess.Popen(['
>>> import decimal >>> [(1, 2), (3, 4), (5
import os import sys def main(): os.environ['PYTHON
import xml.etree.ElementTree as ET root = ET.parse('http
import os import subprocess # Create a shell shell = subprocess.Popen
>>> import numpy as np >>> a = np.array([1,2,3
def float_to_float(x): return float(x)
import csv with open('file.txt') as f: for line
import subprocess subprocess.call(["python", "python", "python",
from mock import TestCase class TestCase(TestCase): def test
import time def main(): time.sleep(1) time
import subprocess subprocess.call(["python", "-m", "python",
>>> from bitarray import BitArray >>> n = 8 >>> bitarray(n
df['count'] = df.groupby('count').apply(lambda x: x
>>> from collections import Counter >>> a = ['a', 'b', 'c',
import sys from tor import * from tor.core import * def main
def factorial(x, y): return x * y def reduce
>>> import re >>> url = r'http://www.example.com/search
>>> import re >>> s = "123123123123123123123123123123
def test_time(func): time.sleep(1) return
import os def next_file(f): while True:
import subprocess p = subprocess.Popen(['/usr/bin/python
import sys import time def hello(): print "Hello world!"
import base64 import hashlib # Generate a hash of the file # This
def wait_for_message(self, message): while True:
>>> import re >>> s = 'a\b\b\b\b\
>>> import collections >>> d = collections.defaultdict(list) >>> for k
>>> import re >>> s = "This is a test file" >>> re.
>>> import math >>> x = float(math.sqrt(2)) >>> x
import re def parse_string(s): return re.sub(
from django.db import models class MyModel(models.Model):
import sys sys.path.append(os.path.dirname(__file__
>>> import re >>> re.search(r'[a-zA-Z0
while True: print("Hello, world!") print("Hello,
import urllib2 url = 'http://www.example.com/search?
>>> a = [1,2,3,4,5,6,7,
>>> import re >>> re.findall(r'function\s+([a
class MyClass(object): def __init__(self, name):
>>> import itertools >>> l = ['a', 'b', 'c', 'd
import suds import urllib2 import suds.http class
import matplotlib.pyplot as plt import numpy as np x = np.
class MyModel(object): def __init__(self, *args,
import requests import urllib2 import requests url = 'http://www.
class MyClass(object): def __init__(self, name):
>>> import numpy as np >>> a = np.array([1,2,3
from PyQt4 import QtGui, QtCore class MyWidget(QtGui.Q
import requests url = 'http://www.google.com/search?q
from sqlalchemy import create_engine class MyTable(create_engine.Model
df = pd.DataFrame({'a':['a', 'b', 'c',
>>> import itertools >>> l = [1,2,3,4,5,
from bs4 import BeautifulSoup soup = BeautifulSoup(html) soup.
class Child(object): def __init__(self, parent):
import urllib2 import urllib url = 'http://www.google.com
import binascii def hex_to_utf16(hex_string):
import sqlite3 conn = sqlite3.connect('/home/john/
def foo(a, b): return a + b def bar(
class MyTemplate(object): def __repr__(self): return
import re # get the root node root = re.compile(r'
import oauth2 oauth2.set_default_redirect_uri('http://
import ctypes def __init__(self, x): self.x
import pybluetooth from pybluetooth.interfaces import Device from pybluetooth
from mock import TestCase class TestCase(TestCase): def test
>>> a = np.array([1,2,3,4,5,6
import Tkinter as tk class MyFrame(tk.Frame):
import numpy as np import scipy.optimize as optimize x = np.array
>>> import random >>> random.permutation(x) [(0, 1
import sys from PyQt4 import QtGui, QtCore class MyWidget(Qt
>>> from itertools import groupby >>> from itertools import groupby >>> from itertools import islice
with open('file.txt', 'r') as f: for line in
>>> import re >>> s = "Hello, world!" >>> re.sub(
import scikit import numpy as np import scikit def black
>>> s = "Hello, world!" >>> re.sub(r'(?<=\
>>> import decimal >>> decimal.Decimal(0.01) '01.01
>>> import re >>> s = "a[0-9]+b[0-
>>> import re >>> s = "Hello, world!" >>> re.findall
import sys sys.stdout = sys.stdout sys.stdout.flush()
from gae.web.cache import Cache from gae.web.cache import
def run_function(func): def func(x): return x
import sys from PyQt4 import QtGui, QtCore class MyWidget(Qt
def get_args(self, func): args = [getattr(self
>>> a = [1,2,3,4,5,6,7,
In [1]: df = pd.DataFrame({'a':['a', 'b
import os import datetime def create_file(filename): with open
from PyQt4 import QtGui, QtCore class MyWidget(QtGui.Q
>>> import itertools >>> a = [1,2,3,4,5,
df = pd.DataFrame({'a':['a', 'b', 'c',
import numpy as np import pytables as tables # create a table with the
import os import sys def get_path(filename): return os
import json data = json.loads(data) # create a json
>>> from operator import itemgetter >>> x = [1,2,3,4,
class Child(models.Model): name = models.CharField(max_
>>> import itertools >>> a = [1,2,3,4,5,
>>> from operator import or_ >>> a = or_(1,2)
def case_alternatives(s): return set(s.lower().lower
import soundcloud import requests class SoundCloudAPI(soundcloud.Sound
import chaco import numpy as np # create a numpy array x =
>>> a = np.array([[1,2,3],[4,5
class MyModel(models.Model): id = models.CharField(max
import numpy as np import matplotlib.pyplot as plt def vvehicle
import Image import ImageDraw img = Image.open('test.png')
import openpyxl xl = openpyxl.xl.OpenXLSX
from pymongo import MongoClient class MyCollection(MongoClient): def
>>> import datetime >>> from datetime import datetime >>> date = datetime.datetime.now
>>> a = [1,2,3,4,5,6,7,
import numpy as np import matplotlib.pyplot as plt # Create a notebook
>>> import re >>> re.sub(r'\\\\(', r'\1\
import numpy as np import csv with open('file1.csv', '
import subprocess subprocess.call(["ls", "-l", "1",
import numpy as np import random def random_array(n):
import matplotlib.pyplot as plt import numpy as np x = np.
def func(a, b): return a + b def func_
from django.contrib.auth.models import User from django.contrib.auth.
import os import sys import os.path os.path.append(
import json data = json.loads(response.body)
from django.contrib.auth.models import User from django.contrib.auth.
def recursive_func(a, b): return a + b
import Tkinter as tk class PlaySound(tk.Frame):
>>> import re >>> s = "a,b,c,d,e,
def test_array(a, b): if isinstance(a, list):
import wx class MyFrame(wx.Frame): def __init__
from twisted.internet import reactor from twisted.internet.finger
import os import numpy as np def save_data(filename):
>>> from collections import Counter >>> l = [1,2,3,4,
import os def delete_dir(dir): for root, dirs,
>>> from itertools import product >>> a = [1,2,3,4,
import wx class MyFrame(wx.Frame): def __init__
import time import twisted.internet.io import twisted.internet
>>> import csv >>> from itertools import groupby >>> from itertools import islice >>>
>>> from collections import OrderedDict >>> a = [1,2,3,4,
import matplotlib.pyplot as plt import numpy as np x = np.
import random def random_int(n): return random.randint
import urllib2 import urllib import urllib.request url = 'http://
with open('file.txt', 'r') as f: for line in
>>> import re >>> s = "a" >>> re.sub(r'
>>> import re >>> s = "Hello, world!" >>> re.findall
class MyModel(models.Model): def __init__(self, *
import os import urllib2 url = 'http://www.example.com
import requests url = 'https://www.googleapis.com/search?
import argparse parser = argparse.ArgumentParser(description='A parser for the settings
import numpy as np import matplotlib.pyplot as plt # create a matrix
import numpy as np import matplotlib.pyplot as plt def print_range
def main(): print "Hello, world!" print "Hello, world
def repeat(x): while x!= 0: x = x +
>>> from itertools import product >>> a = [1,2,3,4,
import matplotlib.pyplot as plt import numpy as np x = np.
import xml.etree.ElementTree as ET root = ET.parse('http
import lxml.etree as ET root = ET.parse('http://www
class MyModelAdmin(admin.ModelAdmin): def save(self, request
from django.db import models from django.db.models import Index class
>>> import re >>> s = "Hello, world!" >>> re.sub(
import pygame class MyGame(pygame.Game): def __
>>> from collections import Counter >>> l = [1,2,3,4,
from django.http import HttpResponse from django.http import HttpResponse class MyRequestHandler
from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker
>>> import re >>> s = "a=b&c=d&d=
>>> import re >>> s = '123.123.123' >>> re.
import numpy as np import scipy.optimize as optimize def dictvectorize(
>>> import re >>> s = "a,b,c,d,e,
>>> from random import randint >>> a = [1,2,3,4,
class Foo(object): def __init__(self, *args, **
def get_peaks(self, x): return np.array([[0
>>> import random >>> a = [0, 1, 2, 3, 4,
>>> a = [1,2,3,4,5,6,7,
from selenium import webdriver from selenium.webdriver.common.exceptions import WebDriverException
from django.utils.timezone import timezone def get_timezone(self):
import re def render_tabular_output(self, context):
import soundcloud import requests # Get the tracks from the soundcloud server
class MyObject(object): def __init__(self, *args,
import csv with open('test.csv', 'r') as f:
>>> import numpy as np >>> a = np.array([1,2,3
import os import time def read_file(filename): return open
class MyComponent(object): def __init__(self, parent=None
import urllib2 url = 'http://www.example.com/search?
import os import sys def main(): os.system("echo "
class MyModelAdmin(admin.ModelAdmin): def get_queryset(self
import Tkinter as tk class MyText(tk.Frame):
import os import re with open('file1.txt', 'r')
import numpy as np import pyfastaq as pd # Create a list of
from django.contrib.auth.models import User from django.contrib.auth.
import matplotlib.pyplot as plt import numpy as np x = np.
import distutils # This is the main function # # This is the
import sys from PyQt4 import QtGui, QtCore class MyApp(Qt
>>> import random >>> random.choice(['a', 'b', 'c',
import hgstatus hgstatus = hgstatus.hgstatus(hgstatus.hg
import numpy as np import matplotlib.pyplot as plt # Create a triangle
>>> from itertools import product >>> a = [1,2,3,4,
import nose def setup(self): self.nose = no
from django.db import models class MyModel(models.Model):
import pandas as pd import numpy as np df = pd.DataFrame({'
import time import sys def pause(): time.sleep(1)
>>> import re >>> s = 'a\b\c\d\d\
import re def set_value(self, value): if value ==
def main(): for i in range(1,10): print i
def assert_has_calls(self, method): assert isinstance(method,
from sqlalchemy import create_engine query = """SELECT * FROM mytable WHERE
def random_method(a, b): return random.choice(a)
>>> import re >>> s = "a,b,c,d,e,
import gevent import time def main(): gevent.sleep(
import csv with open('output.csv', 'w') as f:
import sys sys.path.append(sys.argv[1]) sys.
>>> import re >>> s = "a=b&c=d&d=
import requests class MyRequest(requests.Request): def put(self
import numpy as np import matplotlib.pyplot as plt # Create a new
class A(object): def __init__(self, name):
import urllib2 import gevent import gevent.gevent.io import
df = pd.DataFrame({'A': [1,2,3,4,
from sphinx.ext.docutils import Document from sphinx.ext.docutils.
import xlwt import xlwt.workbook as wb workbook = wb
import urllib2 from bs4 import BeautifulSoup url = 'http://www.
class MyModel(models.Model): name = models.CharField(max
class MyModel(models.Model): name = models.CharField(max
>>> import re >>> s = "Hello, world!" >>> re.search(
class MyClass(object): def __init__(self, *args,
from selenium import webdriver driver = webdriver.Firefox() driver.get('
import sys def print_list(list): for i in range(
import re def clean_file(filename): if re.search(
def my_function(request): return render_to_response('my_
class MyModelForm(forms.ModelForm): def clean(self):
import numpy as np import matplotlib.pyplot as plt def count_comb
>>> import re >>> s = 'a\b\c\d\d\
import random with open('file.txt', 'r') as f:
import Image import numpy as np def generate_image(data):
import os import re path = 'C:\Users\Desktop\Desktop\
>>> import numpy as np >>> a = np.array([1,2,3
import os import sys def subpackage(name, dir): if
class MyClass(object): def __init__(self, name):
import pycallgraph import numpy as np import matplotlib.pyplot as plt
import lxml.html def count_elements(doc): for element
>>> import re >>> s = "Hello, world!" >>> re.findall
import re def is_extractable(pdf): return re.search
>>> from itertools import groupby >>> table = [1,2,3,4,
import numpy as np import matplotlib.pyplot as plt x = np.
>>> import numpy as np >>> a = np.array([1,2,3
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for item
class MyClass(object): def __init__(self, name):
import subprocess subprocess.call(['python','script.py'], shell
from django.db import models from django.db import models class MyModel
>>> struct.unpack('<i', b'\x00\x00\x00
import subprocess def main(): subprocess.call(["python", "-m
>>> a = [1,2,3,4,5,6,7,
>>> import math >>> a = [1,2,3,4,5,
import re def parse_user_agent(string): """Parse user
with open('file1.txt', 'r') as f1: for
>>> a = np.array([1,2,3,4,5,6
class MyModelForm(forms.ModelForm): def clean(self):
import json json_data = json.loads(open('file.json',
def my_function(a, b): return a + b
import boto.s3 # Create a copy of the snapshot # Create a
class UserAdmin(admin.ModelAdmin): user = models.ForeignKey(User
from django.contrib.auth.models import User from django.contrib.auth.
class A(object): def __init__(self, name):
from Tkinter import * class MainWindow(Frame): def __
from PyQt4 import QtGui, QtCore class MyTabbedWidget(QtGui
import datetime dt = datetime.datetime.now() dt.replace(day
import numpy as np import random def primes(n): return
>>> x = [1,2,3,4,5,6,7,
from django.db import models class MyModel(models.Model):
class Foo(object): def __init__(self, x):
from django.db import models from django.db.models import File from django
>>> import re >>> s = "a,b,c,d,e,
import numpy as np import matplotlib.pyplot as plt def calc(x
class User(models.Model): name = models.CharField(max_
import audiolab import time import time import time import time import
from django.contrib.pdf import PdfDocument from django.contrib.pages.pages
>>> import ctypes >>> c_char_p = ctypes.c_char_p
import random def randomint(n): return random.randint(
class Form(forms.ModelForm): def clean(self): if
for i in range(len(d)): d[i] = d
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> import ctypes >>> c = ctypes.c_char_p >>> c.
def view_args(self, **kwargs): if self.request.method
import requests class MyList(object): def __init__(self
In [1]: df.index.sort_values('x') Out[1
>>> import sympy >>> a = sympy.matrix(np.arange(
def get_user_id(request): return request.user.id
import win32com.client import win32com.client.sapi
import gtk class MyStyle(gtk.Style): def __init
from django.db import models from django.db import models class MyModel
>>> from collections import Counter >>> from collections import Counter >>> c = Counter()
>>> import re >>> s = "Hello, world!" >>> re.findall
import os import sys def main(): print "Hello, world!"
>>> from itertools import product >>> a = [(1,2), (3,
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
import sys import sys import time def main(): print "Hello
df['A'] = df.groupby('A').apply(lambda x: x
from django.db import models from django.db import models class MyModel
>>> import numpy as np >>> a = np.array([1,2,3
from gtk3.menuactions import MenuActions class MyMenuActions(MenuActions
from PyQt4 import QtCore, QtGui class MyTreeView(QtGui.
import sys import sys def ignore(self): if self.ignore
>>> import re >>> s = "Hello, world!" >>> re.sub(
from bs4 import BeautifulSoup html = """ <html> <head>
import urllib2 url = 'http://www.example.com/file.
df['max_value'] = df['max_value'].diff()
>>> import re >>> s = "a\b\b\b\b\
import xlsxwriter xlsxwriter = xlsxwriter.Workbook() # Create
from bs4 import BeautifulSoup html = """<html> <table>
>>> import re >>> s = "Hello, world!" >>> re.sub(
In [1]: df.groupby('A').apply(lambda x: x.
import os def sort_files(dir): return sorted(os.
import numpy as np import matplotlib.pyplot as plt # Create a binary
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for key,
class MyClass(object): def __init__(self, name, value
import numpy as np import numpy as np x = np.array([1
import tkinter as tk class MyFrame(tk.Frame): def
>>> import re >>> s = "Hello, world!" >>> re.search(
def get_list(self): for i in range(1,10):
import urllib2 url = 'http://www.google.com/search?
>>> from random import randint >>> d = {'a': 1, 'b': 2
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> import re >>> s = 'a\b\b\b\b\
import mmap mmap.mmap_f(0, 0)
import subprocess import os import os.path def main(): print
class MyClass(object): def __init__(self, name):
>>> from collections import defaultdict >>> a = defaultdict(list) >>> b = defaultdict
def get_session_name(request): return request.session['name']
import gae class MyApp(gae.App): def __
class Foo(object): def __init__(self, name):
import matplotlib.pyplot as plt import numpy as np x = np.
from django.db import models from django.db import models class MyModel
class MyModule(object): def __init__(self, name):
class A(object): def __init__(self, name, value):
import pytest class TestCase(pytest.TestCase): def
from django.db import models class MyModel(models.Model):
import csv with open('file.csv', 'r') as f:
>>> import csv >>> data = ['a', 'b', 'c', 'd
class User(models.Model): user = models.CharField(max_
class MyClass(object): def __init__(self, name, value
>>> a = np.array([1,2,3,4,5,6
import sys sys.path.append(os.path.dirname(__file__
>>> import re >>> s = "Hello, world!" >>> re.findall
from tornado.ioloop import IOLoop from tornado.ioloop import IO
>>> import re >>> s = "a\b\c\d\d\
>>> import decimal >>> decimal.Decimal(0.01) 2 >>> decimal
class MyClass(object): def __init__(self, name):
import requests cookies = requests.cookies() cookies.set_cookie_jar
def func(a, b): return a + b def func_
import sys sys.stdout.write('Hello world!') sys.stdout.
import tkinter as tk class MyEntrybox(tk.Entrybox):
import requests url = "http://www.google.com/search?q
>>> import re >>> s = "a\b\b\b\b\
import socket import time class MySocket(socket.socket): def
import lmdb def count_keys(self, key): return len
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> a = np.array([1,2,3,4,5,6
def next(self): while True: yield self.next()
from PyQt4 import QtGui, QtCore class MyQWidget(QtGui.
from django.core.management.management import Application from django.core.management.
>>> from itertools import combinations >>> l = [1,2,3,4,
import datetime def current_quarter(year): return datetime.str
import numpy as np import matplotlib.pyplot as plt def range_of
import xappengine country = 'USA' country_code =
def main(): for i in range(10): print i
import numpy as np def find_rows(x): return np.
import urllib2 import urllib2 url = 'http://www.example.
from django.db import models class MyModel(models.Model):
>>> from itertools import product >>> a = [1,2,3,4,
from django.db import models class MyModel(models.Model):
import xml.etree.ElementTree as ET root = ET.parse('http
class MyForm(forms.ModelForm): def clean(self):
from flask import Flask, request class MyModel(models.Model):
df['A'] = df.groupby('A').apply(lambda x: x
<div class="row"> <div class="col-md-12">
from django.contrib.auth.models import User from django.contrib.auth.
import re def get_number(number): return int(number)
import vim import sys import os import subprocess # install vim #
import numpy as np import matplotlib.pyplot as plt def main():
import datetime import calendar # Create a calendar object calendar = calendar.Calendar
def get_name(self): return self.name
class MyClass(object): def __init__(self, value):
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
import gtk import time class MyTable(gtk.Table):
import subprocess import os def get_stdin(pid): return subprocess
>>> x = np.array([1,2,3,4,5,6
>>> import re >>> s = "a,b,c,d,e,
import os import sys def list_dlls(path): return
from django.template import Template def main(): template_name = '
class MyDict(object): def __init__(self, name, value
import subprocess subprocess.call(["python", "python", "python",
>>> a = np.array([[1,2,3],[4,5
import sys sys.path.append(sys.path.dirname(__file__
class User(models.Model): id = models.CharField(max_
>>> from collections import defaultdict >>> a = [1,2,3,4,
import boto.ec2 from boto.sql import connect conn = boto.
df['highest'] = df.groupby('id').max().apply(lambda
class Foo(object): def __init__(self, name):
import re def parse_html(html): """ Parse HTML
with open('file.txt', 'r') as f: for line in
def func(x): return x def func_1(x):
import os import sys def convert_file_to_file(filename):
>>> import sys >>> sys.stdin.readline() '0' >>>
def process_data(self, data): if data is None:
import logging class Level(logging.Handler): def __init__(
import pandas as pd import numpy as np df = pd.DataFrame({'
import concurrent.futures def run_job(job): try:
>>> import re >>> s = ['a', 'b', 'c', 'd
>>> from itertools import groupby >>> words = ['a', 'b', 'c',
>>> import re >>> s = "Hello, world!" >>> re.sub(
def func(x): return x def func_dict(x):
class MyModel(models.Model): name = models.CharField(max
>>> import json >>> data = ['a', 'b', 'c', 'd
import math def atan(x): return math.atan(
import elasticsearch class MyElasticsearch(elasticsearch.Elasticsearch): def __init
>>> a = np.array([1,2,3,4,5,6
def myfunc(a, b): return a + b myfunc
import re def get_user_agent(user): return "M
from gdk.command import Command command = Command('/usr/bin/
from django.core.mail import Email from django.core.mail.message import
import random def generate_password(password): random.shuffle(password
>>> import re >>> s = "a=b&c=c&d=
>>> from itertools import product >>> a = [1,2,3,4,
import psycopg2 class MyWindow(psycopg2.
class MyClass(object): def __init__(self, name, bases
import sympy import numpy as np def radical_output(x):
import os import sys import os.path # This is the path to
def get_value(self, key): return self.get_value(
df = pd.DataFrame({'a':['a', 'b', 'c',
import subprocess import time def main(): print "Running..."
import datetime def get_dates(date): return [date.str
import csv with open('file.csv', 'r') as f:
In [1]: df = pd.DataFrame({'a':['a', 'b
import time def do_something(self): time.sleep(1000
import urllib2 import urllib url = 'http://www.google.com
>>> import struct >>> struct.pack('<i', *a) '<
>>> l = [1,2,3,4,5,6,7,
>>> d = {'a': 1, 'b': 2} >>> d['c
class MyClass(object): def __init__(self, name):
import valgrind def main(): print "Running..." print
import xml.etree.ElementTree as ET def replace_text(text,
import numpy as np import matplotlib.pyplot as plt # read the file
>>> import datetime >>> datetime.datetime.now() datetime.datetime.now().
>>> import re >>> s = 'A\b\b\b\b\
In [1]: df.groupby('A').apply(lambda x: x.
import os import sys def main(): # do something #
import matplotlib.pyplot as plt import numpy as np x = np.
In [1]: df.index.set_index('a') Out[1
class User(models.Model): password = models.CharField(max_
>>> d = {'a': 1, 'b': 2, 'c': 3}
def f(x): return x def f(x):
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for soup
import numpy as np x = np.arange(0,10)
import matplotlib.pyplot as plt import numpy as np # Define some variables
import sys import os def write_file(): sys.stdout.
from django.db import models class MyModel(models.Model):
import random def random_int(n): return random.randint
class MyModelAdmin(admin.ModelAdmin): def get_initial_values
from django.contrib.auth.models import User class UserView(ModelView
from lxml import html html = '<html><body> <p
import re def combine(text1, text2): if text1
import requests class MyHandler(webapp2.RequestHandler): def get
>>> import re >>> s = "A,B,C,D,E,
import os import sys # This is the main python module # This
from gae.client import Client class MyClient(Client): def
import os def create_folder(path): for root, dirs,
>>> import re >>> s = "Hello, world!" >>> re.findall
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
class MyModel(models.Model): name = models.CharField(max
>>> a = [1,2,3,4,5,6,7,
import numpy as np import pandas as pd import pandas as pd # Load
>>> import re >>> s = "abcde" >>> re.sub(r
def zip_function(a, b): return zip(a, b)
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import re >>> s = "a.b.c.d.e.
import os import subprocess root = subprocess.check_output("python -m
import os import sys sys.path.append(os.path.dirname
>>> import base64 >>> base64.b64encode(b'0x'
>>> import re >>> re.sub(r'\\\\(',r'\1\
>>> import itertools >>> a = [('a', 'b'), ('c', '
import sys import sys def main(): sys.stdout.write('
def is_in(x, y): return x in y
import os def recursive_dir(dir): for root, dirs,
In [1]: df['a'] = df.apply(lambda x: x
>>> import sys >>> sys.version '2.7.0'
>>> from collections import Counter >>> a = [1,2,3,4,
d = {k: v for k, v in d.items()}
import matplotlib.pyplot as plt import numpy as np import matplotlib.dates as
import subprocess def main(): process = subprocess.Popen(['map
import sympy import numpy as np def factorial(x):
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import json >>> json.dumps(my_dict) '{"id
from django.db import models class MyModel(models.Model):
import urllib2 import urllib url = 'http://www.example.com
class MyClass(object): def __init__(self, *args,
def f(l): return [l[i] for i in l]
import os import re filename = 'test.txt' with open
>>> from collections import defaultdict >>> a = defaultdict(list) >>> b = defaultdict
import csv with open('file1.csv', 'w') as f1
from collections import defaultdict def tournament_path(lst): for i
from django.template import Template from django.conf import settings from django.conf
import numpy as np import matplotlib.pyplot as plt def gradient(x
def count(l): for i in range(len(l)):
import urllib2 url = 'http://www.example.com/search?
def flush(self): self.db.execute("SELECT * FROM my_
import os import sys def min_pdf(filename): return os
>>> import datetime >>> datetime.datetime.now() datetime.datetime.now().
>>> import decimal >>> decimal.Decimal(1.0) 1.0
def main(): for i in range(1,10): print i
for key, value in dict.items(): if key == 'key':
def get_value(self, key): return self.get_value(
def func(x): return x def func_list(x):
from django.utils.pdfkit import PDFKit from django.utils.html import
>>> a = [1,2,3,4,5,6,7,
>>> a = [1,2,3,4,5,6,7,
class MyModel(models.Model): id = models.CharField(max
import gtk class MyGrid(gtk.Grid): def __init
import os import sys # This is the main function import sys
import sys sys.path.append(os.path.dirname(__file__
class MyClass(object): def __init__(self, name):
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import numpy as np >>> a = np.array([1,2,3
def get_list(self): return [x for x in self.list
import sys def update_module(module): if module.name ==
def get_value(self, key): return self[key]
import csv with open('file1.txt', 'r') as f:
import numpy as np import sklearn # create a random vectorizer n
import nix def vi_keys(self, key): return [
import matplotlib.pyplot as plt import numpy as np x = np.
with open('file1.txt', 'r') as f1: for
from django.template import Template def template_count(self, template_name
import pymc class MyClass(object): def __init__(
import numpy as np import matplotlib.pyplot as plt # Create a list
def main(): for i in range(10): print i
In [1]: df = pd.DataFrame({'a':[1,2,
for i in range(10): print i
>>> import itertools >>> from itertools import permutations >>> from itertools import product >>> from
import csv with open('file.csv', 'r') as f:
>>> import re >>> s = "Hello, world!" >>> re.findall
from nose.test import TestCase class TestCase(TestCase):
>>> import itertools >>> a = [1,2,3,4,5,
class MyClass(object): def __init__(self, *args,
>>> class MyClass(object): ... def __repr__(self):
import csv with open('test.csv', 'r') as f:
def my_function(a, b): return a == b def
>>> from itertools import groupby >>> a = [1,2,3,4,
def get_answer(self, answer): if answer == "OK":
import subprocess import os p = subprocess.Popen(['/usr/
from django.contrib.auth.models import User from django.contrib.auth.
import xml.etree.ElementTree as ET root = ET.parse('http
from pytables.sql import * from pytables.sql.table import *
>>> import re >>> s = """<a href="http://www.example.
import numpy as np import matplotlib.pyplot as plt x = np.
import os import subprocess ssh = subprocess.Popen(['ssh', '-
def next(self): while True: yield self.get_next
>>> import datetime >>> date = datetime.strptime('2014-01-01
import re def get_variable(name): return re.sub(
from scrapy.web import Request from scrapy.web import HtmlParser
import gtk class MyTextView(gtk.TextView): def
class MyModel(models.Model): id = models.CharField(max
from sqlalchemy import create_engine def get_user_id(self):
import pandas as pd import numpy as np # create a dataframe df =
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import re >>> s = "Hello, world!" >>> re.sub(
import sys import time def print_time(time): print time
df['A'] = df.groupby('A').apply(lambda x: x
def func(x): return x def func_1(x):
import numpy as np import matplotlib.pyplot as plt def print_sc
>>> from collections import Counter >>> l = [1,2,3,4,
import sys import time import rmp import time import time import time
import unittest class TestCase(unittest.TestCase): def
import os import os.path # Get the path to the directory that contains
import random def random_probability(n): return random.choice(
>>> import re >>> s = 'a\n\n\n\n\
import vba def swap(x, y): x = x.
import pygame # Create a new window window = pygame.display.
df = pd.read_excel('test.xlsx', header=None, index
from sqlalchemy import create_engine conn = create_engine('mysql://localhost
import requests class MyRequestHandler(requests.RequestHandler): def get(self
from django.utils.date import parse def change_time(self, request
>>> import copy >>> a = [1,2,3,4,5,
import subprocess subprocess.call(["python", "python", "python",
import re def search(text): if text.startswith('#'
>>> import re >>> s = "a,b,c,d,e,
>>> l = [1,2,3,4,5,6,7,
import gc def main(): global list_of_lists list
>>> a = np.array([1,2,3,4,5,6
import multiprocessing import time def worker(n): while True:
def set(self, value): if value is None: return self
import binascii with open('file.txt', 'rb') as f:
>>> from collections import Counter >>> l = [1,2,3,4,
with open('file.txt', 'r') as f: for line in
import subprocess import sys subprocess.call(["python", "python",
import cstringio def read_string(string): return string.
class MyClass(object): def __init__(self, *args,
import rpc class MyRPCServer(rpc.RPCServer): def __
import itertools def get_permutations(n): for i in range
import zmq import time class Client(zmq.Socket): def
import os def get_subfolders(path): return [os.
import matplotlib.pyplot as plt import numpy as np x = np.
from twisted.internet import reactor from twisted.internet.api import
def is_valid(value): if value == '1': return
>>> a = [1,2,3,4,5,6,7,
from selenium import webdriver from selenium.webdriver.common.exceptions import WebDriverWait
import Image import numpy as np img = Image.open('test.jpg
>>> from collections import Counter >>> d = {k:1 for k, v in
df['A'] = df.groupby('A').apply(lambda x: x
import re def make_letters(text): return re.sub(
for key, value in d.iteritems(): print key, value
import matplotlib.pyplot as plt import time def main(): print
import numpy as np def is_valid(x): return x >=
import nose2 def test_run(self): if self.
import requests url = "http://www.google.com/search?q
def func(a, b): return a + b def func_
import numpy as np import scipy.stats as stats # create a random data
import threading import time class Thread(threading.Thread): def
from sqlalchemy.ext.declarative import declarative_base from sql
import networkx as nx import networkx as nx # Create a graph
import multiprocessing def main(): # do stuff # do stuff
def validate_username(self, username): if username is None:
>>> import c++ >>> a = [1,2,3,4,5
class A(object): def __init__(self, name):
>>> d = {} >>> for i in range(10): ... d[
import os import gae.app def upload_file(filename):
from gtk.cellrenderertoggle import CellRenderer from gtk.grid import Grid
import xml.etree.ElementTree as ET from xml.etree import ElementTree
>>> import re >>> words = ['a', 'b', 'c', 'd
>>> import cStringIO >>> s = cStringIO.StringIO() >>>
import re with open('file.txt', 'r') as f:
class MyDict(object): def __init__(self, name, value
class Foo(object): def __init__(self, name):
class A(object): def __init__(self, name):
def max_and_min(x): return max(x)
>>> import re >>> url = 'http://www.example.com/search?
import numpy as np import numpy.epd as epd # create a
def ploneformgen(n): for i in range(n):
import sys from multiprocessing import Pool def main(): pool = Pool(
def set_default(self, value): self.item = value
>>> import re >>> s = "a\b\b\b\b\
import csv with open('input.csv', 'r') as f:
class MyClass(object): def __init__(self, *args,
>>> from itertools import izip >>> l = ['a', 'b', 'c
import sqlite3 conn = sqlite3.connect('/home/john/
import atom import time def read_atom(file_name):
import logging class MyLogger(logging.Handler): def __init__
import numpy as np import matplotlib.pyplot as plt def make_window
def func(x): return x def func_1(x):
from flask import Flask, render_template class MyApp(webapp.RequestHandler
>>> import re >>> s = "Hello, world!" >>> re.sub(
from collections import defaultdict def get_tags(self, tag): return
In [1]: df['label'] = df.index.set_index
def f(x): return x def f(x):
class MyForm(forms.Form): def __init__(self, *
import urllib2 import urllib3 import urllib.request url = 'http
import re def print_words(words): for word in words:
import sys sys.path.append(os.path.dirname(__file__
class MyClass(object): def __init__(self, name):
from test.test import TestCase class TestCase(TestCase):
import os import shutil def copy_file(filename): with open
>>> import re >>> s = "0xde 0xad 0xbe 0
import numpy as np import scipy.stats as stats # create a numpy array
>>> import datetime >>> datetime.datetime.now() '2013-01-
import urllib2 url = 'http://www.example.com/images/
>>> import re >>> s = "Hello, world!" >>> re.findall
import pandas as pd import numpy as np df = pd.DataFrame({'
import re def wrap(text): return re.sub(r'
>>> d = {'a': 'a', 'b': 'b', 'c':
>>> import codecs >>> codecs.encode('utf8') 'utf8'
from django.db import models class MyModel(models.Model):
def f(x): return x def g(x):
>>> import datetime >>> datetime.strptime('2014-01-01', '%
from sphinx.ext.restructuredtext import RestructuredText from sphinx.
import numpy as np import scipy.io import numpy as np def get
import pandas as pd import numpy as np df = pd.DataFrame({'
>>> import re >>> s = "This is a test" >>> re.find
import numpy as np import scipy.ndimage as ndimage # Create a
import os def read_file(filename): return open(filename,
>>> from decimal import Decimal >>> decimal = Decimal(0.01) >>> decimal
def cosine_similarity(x, y): return np.cos(x
import subprocess subprocess.call(["python", "python", "python",
>>> import re >>> re.findall('\d+', 'test1')
>>> import re >>> s = "Hello, world!" >>> re.findall
from django.db import models class MyModelAdmin(admin.ModelAdmin):
from Tkinter import * class Turtle(Frame): def
import turtle def circle(x, y): return tur
pip install -r pip.py
def f(x): return x def g(x):
>>> from collections import OrderedDict >>> a = OrderedDict() >>> b = OrderedDict()
import Image import numpy as np import scipy.ndimage as nd def
import distutils # Create a new python script python_script = distutils
>>> import re >>> s = "a,b,c,d,e,
import xlsxwriter xlsxwriter = xlsxwriter.Workbook() xlsxwriter
import tensorflow as tf import numpy as np def evaluate_node(node):
class MyOption(object): def __init__(self, *args,
import matplotlib.pyplot as plt import numpy as np x = np.
class MyHandler(object): def __init__(self, *args,
class MyClass(object): def __init__(self, name, value
import subprocess def main(): subprocess.call(["python", "python
import numpy as np import matplotlib.pyplot as plt # create a random
>>> d = {'a': 1, 'b': 2, 'c': 3}
import os def dir_recursive(dir): if dir(os.
import sys sys.path.append(os.path.dirname(__file__
>>> import decimal >>> decimal.Decimal('0.0') '0.0
import socket import socket def send_packet(self, data):
def get_parameters(self, cursor): return cursor.fetchone()
df['A'] = df.dropna() df['B'] = df.
>>> a = [1,2,3,4,5,6,7,
>>> import numpy as np >>> a = np.array([[1,2,
class MyModel(models.Model): def __init__(self, *
>>> l = ['a', 'b', 'c', 'd', 'e',
from twisted.internet import reactor from twisted.internet.socket import
from flask import Flask, request from flask.ext.sphinx import Docs
import threading import time class MyThread(threading.Thread):
class MyModel(models.Model): id = models.CharField(max
import subprocess import time def kill_process(pid): print pid
def is_valid(value): if value == '1': return
import re with open('file.txt', 'r') as f:
from email.mime.mime import MIMEMultipart from email.mime.mime_types
>>> d = {'a': 'a', 'b': 'b', 'c':
<div class="row"> <tr> <td>{{ row
import argparse def main(): args = argparse.ArgumentParser(description='
class MyModel(models.Model): name = models.CharField(max
>>> np.asarray(np.arange(10), dtype=np.float
class MyModel(models.Model): name = models.CharField(max
from shapely.geometry import Point from shapely.geometry import Polygon #
import matplotlib.pyplot as plt import numpy as np fig = plt.
import random def random_choice(n): return random.choice(
import subprocess def main(): subprocess.call(["python", "-m
class Foo(object): def __init__(self, name):
import numpy as np import matplotlib.pyplot as plt def main():
>>> from itertools import groupby >>> d = {'a':1, 'b':2
>>> from collections import defaultdict >>> l = [1,2,3,4,
>>> import re >>> s = "a,b,c,d,e,
>>> a = [1,2,3,4,5,6,7,
import Tkinter as tk class ImageCanvas(tk.Frame):
import xml.etree.ElementTree as ET root = ET.parse('http
import pandas as pd import numpy as np df = pd.DataFrame({'
import sys from pylint import * def test_function(func):
>>> d = {'a':1, 'b':2} >>> d['c
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
import datetime import datetime class MyApp(object): def __init
>>> import re >>> s = 'a=b&c=c&d=
import sys from bs4 import BeautifulSoup class Boring(object):
class MyModel(models.Model): __tablename__ ='my_
def __iter__(self): return iter(self) def __
>>> from itertools import islice >>> l = [1,2,3,4
>>> from itertools import product >>> a = [1,2,3,4,
>>> import re >>> s = 'a\b\b\b\b\
from cassandra.ext.concurrent import RedisClient from cassandra.ext.concurrent
>>> import re >>> s = "Hello, world!" >>> re.sub(
import numpy as np import numpy as np # Create a numpy array of integers
class MyModel(models.Model): def __init__(self, *
>>> import itertools >>> a = [1,2,3,4,5,
def my_function(n): return n my_function(1
from selenium import webdriver driver = webdriver.Firefox() driver.get('
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> d = {'a':1, 'b':2, 'c':3}
>>> a = np.array([1,2,3,4,5,6
import sys import subprocess def main(): print "Hello, world!"
for i in range(10): print i
class MyClass(object): def __init__(self, name):
from time import sleep def test_speed(self): sleep(1
>>> from itertools import groupby >>> a = [1,2,3,4,
def main_page(request): if request.method == 'GET':
from flask import Flask, request class MyForm(forms.Form):
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for word in
import xlwt import csv sheet = xlwt.Workbook() sheet.
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for i,
import sys def main(): print "Hello, world!" sys
import pyqtgraph class MyListView(pyqtgraph.ObjectListView
>>> import datetime >>> datetime.datetime.today() datetime.datetime.now()
from IPython.display import display from IPython.display import display from IPython.display
from sqlalchemy import create_engine conn = create_engine('sqlite:///:
import csv with open('file.csv', 'r') as f:
from bs4 import BeautifulSoup html = """<html> <body>
>>> [(x[0], x[1]) for x in zip(a,
import networkx as nx import networkx as nx # create a graph
>>> d = {'a':1, 'b':2, 'c':3}
class MyClass(object): def __init__(self, name):
>>> from itertools import product >>> a = [1,2,3,4,
class MyDate(object): def __str__(self): return
import pylucene lucene = pylucene.Lucene() l
>>> a = [1,2,3,4,5,6,7,
class MyClass(object): def __init__(self, name):
import numpy as np import matplotlib.pyplot as plt # Create some data
def main(): for i in range(10): print i
>>> import datetime >>> datetime.datetime.now().strftime('%Y-%m-%
def foo(): return foo()
import pyxb class MyTree(pyxb.Tree): def __
>>> from itertools import product >>> a = [1,2,3,4,
class Foo(object): def __init__(self, name):
import numpy as np import pil import pil.io data =
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> d = {'a':1, 'b':2, 'c':3}
import urllib2 url = 'http://www.example.com/search?
>>> import re >>> s = "Hello, world!" >>> re.findall
import pygame class MyGame(pygame.Game): def __
def is_empty(self, value): if value is None:
>>> import re >>> s = "a,b,c,d,e,
import subprocess subprocess.call(["python", "script.py", "
from django.db import models from django.conf import settings from django.conf
import sys from bs4 import BeautifulSoup class MyApp(webapp2.
def generator(n): for i in range(n): yield i
from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker
>>> import json >>> json.dumps(my_dict) '{"value
class Base(object): def __init__(self, name, value):
class MyModel(models.Model): def __init__(self, *
import os with open('file.txt', 'r') as f:
from django.db import models class MyModel(models.Model):
>>> import urllib >>> urllib.urlencode(my_string) 'http://
>>> import re >>> s = "a,b,c,d,e,
import xml.etree.ElementTree as ET root = ET.parse('http
class MyModel(models.Model): id = models.CharField(max
from django.db import models class MyModel(models.Model):
import requests url = 'http://www.google.com' #
>>> import datetime >>> datetime.datetime.strptime(str, '%Y-%m
>>> import ctypes >>> ctypes.windll.kernel32.GetCurrentProcess().Get
>>> from itertools import product >>> a = [1,2,3,4,
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
import time def main(): while True: time.sleep(
>>> from itertools import groupby >>> l = [1,2,3,4,
def add_option(self, option): if option.name == 'option
import subprocess subprocess.call(["ec2", "run", "-c
import os import json data = json.loads(open('data.json
>>> import itertools >>> l = [1,2,3,4,5,
>>> import decimal >>> decimal.Decimal('0.0') '0.0
def get_number_of_spaces(x, y): return len(
>>> import itertools >>> l = [1,2,3,4,5,
import time def main(): time.sleep(1) time
def redirect(request): return redirect('/')
from django.db import models class MyModel(models.Model):
>>> import json >>> json.dumps(['a', 'b', 'c
import pynotebook from pynotebook.client import Client from pynotebook.client import
>>> from collections import Counter >>> l = [1,2,3,4,
>>> a = [1,2,3,4,5,6,7,
>>> import math >>> x = 1.0 >>> x = 2.0
import sys import re def hex_to_hex(hex_string):
import subprocess subprocess.call(["sed", "-i", "a",
def get_highest_score(self, score): return self.score
df = pd.DataFrame({'a':['a', 'b', 'c',
>>> a = np.array([[1,2,3],[4,5
import pygame import pygame.locals def drag_handler(event):
def test_arg(arg): if arg is None: arg =
import win32com.client import win32com.client.client.Win32
from Tkinter import * class MyFrame(Frame): def __
from jinja2 import Template class MyTemplate(Template): def get_
def generate_requirements(self, requirements): with open('requirements.txt',
>>> d = {'a': [1, 2, 3], 'b': [4
>>> import re >>> s = "a,b,c,d,e,
>>> d = {'a':1, 'b':2, 'c':3}
def __delitem__(self, key): if key in self.keys
from django.conf import settings def get_secret(self): return
import pandas as pd import numpy as np # create a dataframe with the data
import numpy as np import scipy.optimize as p classifier = p.
df = pd.DataFrame({'a':['a', 'b', 'c',
def func(a, b): return a + b def func_
>>> import numpy as np >>> s = "a,b,c,d,
>>> import itertools >>> a = [1,2,3,4,5,
from django.http import HttpResponse from django.http import HttpResponse class MyHandler
>>> a = [1,2,3,4,5,6,7,
import robot def parse_args(args): """Parse args."""
>>> import math >>> x = float(math.ceil(x/2))
In [1]: df = pd.DataFrame({'A': [1,2,
import sys import sys import time def setup_script(filename):
import sys sys.path.append(os.path.join(os.path
import time def main(): print "Hello, world!" time
>>> import re >>> s = 'a\x00\x00\x00
>>> import re >>> s = 'a,b,c,d,e,
df['name'] = df['name']
from flask import Flask, stream from flask.ext.stream import StreamHandler from
>>> import re >>> s = "a\b\b\b\b\
class MyClass(object): def __init__(self, name):
def lda_iter(n): return n def iter_gen
import re def count_words(text): return re.findall
class MyModel(models.Model): name = models.CharField(max
with open('file.txt', 'r') as f: for line in
>>> import unicodedata >>> unicodedata.unicode_dump(unicodedata.unicode_
import os import random def random_file(filename): with open
def count_strings(l): return len(l) def count
def func(x): return x * x def func_1(
import matplotlib.pyplot as plt import numpy as np x = np.
import struct def read_bytes(data): return struct.unpack('
import subprocess def main(): subprocess.call(["python", "-m
import boto.s3 s3 = boto.connect_s3()
>>> import inspect >>> inspect.getmodule(__name__) '__main
import sys from importlib import import_module class MyClass(object):
import multiprocessing def main(): for i in range(10):
def add_variable(name, value): if name == 'a':
import sys from IPython.display import display from IPython.display import display
class MyClass(object): def __init__(self, name, value
from django.db import models class MyModel(models.Model):
import csv data = [1,2,3,4,5,6
import Tkinter as tk class MainWindow(tk.Frame):
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for tag in
>>> from itertools import product >>> zip(list1, list2) [('
def main(): while True: print("Hello, world!")
>>> import re >>> s = "Hello, world!" >>> re.findall
class MyModelIndex(models.ModelIndex): def __init__(self
import csv with open('output.csv', 'w') as f:
from django.contrib.auth.models import User from django.contrib.auth.
class MyClass(object): def __init__(self, name):
class MyView(View): def get_context_data(self, **
import numpy as np import runge_kutta3 def runge
>>> import codecs >>> codecs.decode('utf-8', 'ignore') u
import gtk class MyWindow(gtk.Window): def __init
def f(x): return x def f(x):
import pandas as pd import numpy as np # create a dataframe with the data
import matplotlib.pyplot as plt import numpy as np x = np.
import configobj configobj.install(sys.argv)
import azure.storage # Create a new Azure Storage instance # Create a new
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> from collections import OrderedDict >>> sorted(OrderedDict(zip(a, b))
>>> import re >>> s = "a\b\b\b\b\
In [1]: df.index.values Out[1]: A
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import re >>> d = {'a': 'a', 'b': 'b
import warnings class MyClass(object): def __init__(self
import urllib2 import requests url = 'http://www.google.com
import pandas as pd import numpy as np df = pd.DataFrame({'
import tkinter as tk class MyFrame(tk.Frame): def
>>> a = [1,2,3,4,5,6,7,
import networkx as nx import numpy as np # create a graph graph
import subprocess import sys def main(): print "Running"
>>> import datetime >>> datetime.strptime(str(datetime.datetime.now()
from sqlalchemy import create_engine def replace_ids(table, ids):
import webbrowser browser = webbrowser.Firefox() browser.get('
import subprocess def main(): subprocess.call(["python", "-c
from sqlalchemy.ext.declarative import declarative_base from sql
import urllib url = 'http://www.example.com/search?q
>>> a = [True, False, False, False, False, False, False,
import subprocess import time def main(): subprocess.call(["ub
import threading import time class MyThread(threading.Thread):
import subprocess subprocess.call(["python", "-m", "python",
import numpy as np import scipy.stats as stats def weighted_moving
>>> a = [1,2,3,4,5,6,7,
import threading import time def main(): print "Running..."
>>> import numpy as np >>> a = np.array([1,2,3
from scrapy.spider import Spider from scrapy.spider
import numpy as np import scipy.signal # create a dataframe with the data
import Tkinter as tk class MainFrame(tk.Frame):
In [1]: df = pd.DataFrame({'a':['a', 'b
import gtk class MyGtk(gtk.Window): def __
import subprocess p = subprocess.Popen(['bash', '-c', '
>>> import re >>> s = "A\u00a0\u00a
>>> from itertools import groupby >>> from itertools import product >>> from itertools import product
def compare(x,y): return x == y
import os import os.path def set_owner(self, owner):
import os import subprocess subprocess.call(["python", "-m",
with open('file1.txt', 'w') as f: for line
with open('file1.txt', 'w') as f1: for
>>> import re >>> s = "Hello, world!" >>> re.sub(
In [1]: df = pd.DataFrame({'a':['a', 'b
def func(x): return lambda x: x == x[0]
import csv with open('file.csv', 'r') as f:
>>> a = [1,2,3,4,5,6,7,
import vtk import numpy as np import vtk.pyplot as plt import vtk
from django.contrib.auth.models import User from django.contrib.auth.
>>> a = [1,2,3,4,5,6,7,
def test_condition(condition): if condition: print "condition is
class MyForm(forms.Form): def __init__(self, *
df['count'] = df.groupby('count').sum()
>>> from collections import defaultdict >>> a = defaultdict(list) >>> b = defaultdict
def get_search_results(self, request, search_string): if
def get_url(self, request): return reverse('admin.dashboard.
class MyClass(object): def __init__(self, name, bases
class MyModel(models.Model): name = models.CharField(max
import cache def get_cache(key): return cache.get(
import random def random_number(n): return random.randint
def render_view(self, request, view): if request.method ==
import subprocess subprocess.call(["python", "-c", "stdout",
from Tkinter import * class MyFrame(Frame): def __
import requests import time class MyRequestHandler(webapp2.RequestHandler):
def __iter__(self): for i in range(1,10):
import numpy as np import csv with open('file.txt', 'r
from selenium import webdriver from selenium.webdriver.support import webdriver_support
>>> from math import sqrt >>> sqrt(math.sqrt(2)) 0.
>>> from itertools import groupby >>> from itertools import product >>> d = {1:
>>> from itertools import groupby >>> a = [1,2,3,4,
import os import subprocess # Create a directory to store the virtualenv wrapper
In [1]: df = pd.DataFrame({'a': [1, 2,
import paramiko import paramiko import paramiko.client class MyClient
>>> import sys >>> import itertools >>> a = [1,2,3,
class MyModel(models.Model): name = models.CharField(max
def my_function(): def f(): print "Hello, world!"
>>> a = [1,2,3,4,5,6,7,
import sys import sys def main(): print "Hello, world!"
>>> import re >>> s = "Hello, world!" >>> re.sub(
class MyModelAdmin(admin.ModelAdmin): def save(self, request
from flask import Flask, restful class MyApp(restful.Application):
>>> a = np.array([1,2,3,4,5,6
>>> import struct >>> struct.unpack('<i', b'\x00\x
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
import csv with open('test.csv', 'wb') as f:
class MyModel(models.Model): name = models.CharField(max
import google class App(object): def __init__(self,
>>> a = np.array([1,2,3,4,5,6
import sys import sys class MyTransform(object): def __init
>>> from collections import Counter >>> k = Counter(range(10)) >>> for
>>> import re >>> s = "a=b=c=d=e=
>>> import collections >>> a = [1,2,3,4,5,
class MyList(list): def __init__(self, name, value
import pygame def main(): pygame.init() py
from datetime import datetime def generate_time(self): return datetime.
import pyrax from pyrax.cloudserver.api import cloudserver
>>> a = np.array([[1,2,3],[4,5
class MyModel(models.Model): id = models.CharField(max
from django.contrib.auth.models import Upload from django.contrib.auth.
def leftouterjoin(table, key, value): if key == 'id
df['A'] = df.pivot_table.pivot_table.apply(lambda
>>> import random >>> random.randint(0, 10) 1 >>>
import simplehttp class MyRequestHandler(simplehttp.RequestHandler): def get
df['date'] = df.apply(lambda x: x.strftime('%Y
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for i in
>>> a = [1,2,3,4,5,6,7,
>>> a = [1,2,3,4,5,6,7,
>>> from itertools import product >>> a = [1,2,3,4,
import sys import inspect def load_module(name): module =
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for child
import urllib2 import urllib url = 'http://www.example.com
import sys from importlib import import_module class MyModule(object):
import sqlite3 conn = sqlite3.connect('/home/john/
>>> import numpy as np >>> a = np.array([1,2,3
from django.contrib.auth.models import User from django.contrib.auth.
import numpy as np import ironpy def npv_to_ir
>>> from scipy.ndimage import * >>> points = [(x, y)
<div class="tag-group"> <div class="tag-group-
import pandas as pd import numpy as np import pandas as pd df =
import urllib2 import urllib import urllib.request url = 'http://
df['A'] = df.groupby('A').mean()
import os import socket def ip_address(ip_address):
import Tkinter as tk root = tk.Tk() root.
>>> [(1, 2), (3, 4), (5, 6), (
import csv with open('test.csv', 'r') as f:
class MyModelView(models.ModelView): id = models.CharField
import os import sys def rename_file(filename): if os
df['date'] = df['date'].apply(lambda x: x.strftime
import numpy as np import matplotlib.pyplot as plt x = np.
>>> from itertools import combinations >>> from itertools import product >>> from itertools import combinations
def print_answer(answer): if answer % 2 == 0:
>>> import re >>> s = 'a\x00\x00\x00
import csv with open('test.tsv') as f: for row
import subprocess def main(): subprocess.call(["python", "python
import sys import sys import threading class MyThread(threading.Thread
from bs4 import BeautifulSoup from bs4 import BeautifulSoup soup = BeautifulSoup(
import os import sys def main(): os.system("python setup
import requests class MyHandler(object): def get(self):
def quick_sort(a, b): return sorted(a, key=
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> from itertools import product >>> a = [1,2,3,4,
from sqlalchemy.orm import sessionmaker from sqlalchemy.orm import sessionmaker
>>> import datetime >>> from datetime import datetime >>> d = datetime.datetime.str
from django.db import models class MyModel(models.Model):
class A(object): def __init__(self, name, value):
import numpy as np def read_float_dict(filename): return
import signal def signal_handler(signum, frame): signal.
import random from randomforestregressor import RandomForestRegressor
>>> import re >>> s = "a,b,c,d,e,
>>> from itertools import groupby >>> a = [1,2,3,4,
class MyModel(models.Model): name = models.CharField(max
import argparse parser = argparse.ArgumentParser(description='A test program')
>>> from collections import Counter >>> d = {1: [1, 2, 3
>>> from collections import defaultdict >>> a = defaultdict(list) >>> b = defaultdict
import serial import sys import sys class Serial(serial.Serial):
import datetime t = datetime.datetime.now() t.strftime('%
>>> import ctypes >>> struct = ctypes.Structure(ctypes.POINTER(c
import os import subprocess # This is the main program # and the other
>>> import re >>> s = "a,b,c,d,e,
import os def change_folder(path): if os.path.
>>> a = [1,2,3,4,5,6,7,
>>> import binascii >>> binascii.unhexlify(s) '0x'
>>> import re >>> s = "abcde" >>> re.findall(
>>> import re >>> s = "Hello, world!" >>> re.sub(
In [1]: df.sort_index(axis=1) Out[1
import socket import time def _read(self, filename): if
def get_neutral_start_point(x): return x -
>>> from itertools import product >>> a = [1,2,3,4,
>>> import pprint >>> pprint.pprint(input_string) 'Hello,
class MyClass(object): def __init__(self, name):
import requests url = 'http://www.example.com/search?q
df['A'] = df.groupby('A').apply(lambda x: x
from django.utils.hash import md5 password = getpass.getpass()
import sys import time def print_lines(lines): print(
import sqlite3 conn = sqlite3.connect('/home/john/
from bokeh.core.widgets import Column from bokeh.widgets import Column
import matplotlib.pyplot as plt import numpy as np # Create a figure
import subprocess p = subprocess.Popen(['/usr/bin/python',
import numpy as np import matplotlib.pyplot as plt # Create a random
with open('file1.txt', 'r') as f1: for
import time def time_to_time(t): return time.
import re def add_line(text, line): if line.
import numpy as np import matplotlib.pyplot as plt x = np.
class MyModel(models.Model): name = models.CharField(max
import gtk class Example(gtk.Frame): def __init__
>>> a = np.array([1,2,3,4,5,6
import numpy as np import matplotlib.pyplot as plt x = np.
import unittest class TestCase(unittest.TestCase): def
>>> a = [1,2,3,4,5,6,7,
def set_value(self, value): if value == 1:
df['date'] = df['date'].str.replace('-', '').replace
from sphinx.ext.link import link from sphinx.ext.link import link
>>> import re >>> s = 'a\b\b\b\b\
def f(x): return x def b(): return b
import socketserver import socketserver.socketserver as s # Create a socket
>>> from xmltodict import defaultdict >>> d = defaultdict(list) >>>
from datetime import datetime def previous_day(date): return datetime.
>>> import re >>> s = 'This is a string' >>> re.sub
>>> import decimal >>> decimal.Decimal(100) '0.0'
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
>>> l = ['a', 'b', 'c', 'd'] >>> l
df['business_day'] = df.groupby('business_day').apply(
import threading class MyThread(threading.Thread): def __init
>>> import re >>> url = 'http://www.example.com/search?
import ctypes import ctypes.lib ctypes.windll.kernel32.
from tornado.web import tornado from tornado.web import web class MyHandler
class Foo(object): def __init__(self, name):
import os import os.path def change_startup_folder(path):
>>> import re >>> s = "Hello, world!" >>> re.sub(
class Foo(object): def __init__(self, *args, **
import itertools def get_combinations(n): return itertools.
class A(object): def __init__(self, name):
from django.contrib.auth.models import User from django.contrib.auth.
def get_url(self, path): return url(self.base_
class A(object): def __init__(self, *args, **
{% for item in item %} <div class="item">
import sys def write_file(filename, data): with open(
import socket import time def open_socket(socket_path):
class Person(models.Model): name = models.CharField(max_
from selenium import webdriver from selenium.webdriver.support.ui import WebDriverWait
import pygobject import time class MyWindow(pygobject.Window
import time def hour_to_hour(hour): return time.
import numpy as np import matplotlib.pyplot as plt # create a list
import random def test_uniformity(x, y): return random
>>> d = {'a': ['a', 'b', 'c', 'd'],
import os import urllib2 def upload(filename): with open(
from django.template.loader import TemplateLoader from django.template.loader import Template
import sys import sys def main(): sys.stdout.write('
>>> import re >>> s = "a,b,c,d,e,
import time import subprocess def main(): while True: print
import subprocess subprocess.call(["python", "python", "python",
import Tkinter as tk class MyEntry(tk.Entry):
>>> import re >>> s = "Hello, world!" >>> re.findall
def length(l): return len(l) def length(l
>>> from collections import OrderedDict >>> d = OrderedDict() >>> d['previous'] =
import os def create_menu(dir): menu = Menu(dir
In [1]: df = pd.DataFrame({'a':['a', 'b
class MyClass(object): def __init__(self, name, value
class MyClass(object): def __init__(self, name):
import cStringIO def main(): for line in cStringIO.
>>> import re >>> s = "Hello, world!" >>> re.findall
import re def get_latex(text): return re.sub(
import sys def read_file(filename): with open(filename,
import numpy as np import scipy.stats as stats def simulate(x,
def go_to(x): return x + 1
>>> from collections import Counter >>> d = defaultdict(int) >>> for i in
import google.maps import google.maps.distance_matrix class GoogleMaps
import os import json import json.loads def get_data(self
import os import sys def remove_file(filename): if os
import os def create_dirs(dir): for root, dirs,
from scrapy.html import BeautifulSoup from scrapy.html import HtmlParser
import numpy as np import matplotlib.pyplot as plt x = np.
>>> from collections import OrderedDict >>> a = OrderedDict() >>> b = OrderedDict()
>>> import re >>> s = "Hello, world!" >>> re.sub(
import random def proxy_random_select(d): return random.
import numpy as np import numpy as np # create a 2D array
class MyClass(object): def __init__(self, name, value
import numpy as np import matplotlib.pyplot as plt # create a histogram
>>> import numpy as np >>> a = np.array([1,2,3
>>> a = [1,2,3,4,5,6,7,
import numpy as np import multiprocessing def read_data(data):
In [1]: df.index.str.replace('-', '').str.
>>> import re >>> s = "1.2.3.4" >>>
import subprocess p = subprocess.Popen(['/usr/bin/python
>>> from collections import Counter >>> l = [1,2,3,4,
import re html = """<html> <head> <title>
import os import sys sys.path.append(os.path.dirname
def func(x): return x def func_1():
import urllib2 url = 'http://www.google.com/search?
class MyModel(models.Model): name = models.CharField(max
class MyClass(object): def __init__(self, name):
import re with open('file.txt', 'r') as f:
def foo(): return foo()
def get_index(self, item): return self.index
from bs4 import BeautifulSoup from bs4 import BeautifulSoup class MyPage(Page
import threading import time class Thread(threading.Thread): def
class MyModel(models.Model): id = models.CharField(max
import os import sys def read_file(filename): with open
>>> a = [1,2,3,4,5,6,7,
class MyModelForm(forms.ModelForm): def __init__(self
>>> import urllib2 >>> urllib2.urlopen('http://www.example.
import csv with open('output.csv', 'wb') as f:
def flip_args(func): return func(*args) def flip
>>> import decimal >>> decimal.Decimal(0.01) '0.01
import os import os.path def get_egg_path(path):
import numpy as np import matplotlib.pyplot as plt x = np.
>>> import decimal >>> decimal.Decimal(100) '100.0'
import csv with open('file.csv', 'r') as f:
>>> a = np.array([1,2,3,4,5,6
def my_function(): print "my_function called" print "
class MyClass(object): def __init__(self, name):
import matplotlib.pyplot as plt import numpy as np x = np.
from twillio.restclient import Client from twillio.restclient.
from flask import Flask from flask.ext.files import File from flask.ext
>>> import re >>> s = 'a\b\b\b\b\
import seaborn as sns import numpy as np import seaborn.plot
def is_equal(x, y): return x == y
import pygame import numpy as np import matplotlib.pyplot as plt
import os import re def save_file(filename): with open
def check_list(list): if len(list) == 1:
import locale import requests def handle_request(self, request):
>>> import re >>> s = "Hello, world!" >>> re.sub(
def get_reference(self, reference): return self.reference
import curses def get_text(text): return text.replace('
>>> import re >>> s = "a,b,c,d,e,
import pandas as pd import numpy as np import pandas as pd def read
class MyForm(forms.ModelForm): def clean(self):
>>> import re >>> s = "Hello, world!" >>> re.findall
from igraph import Graph from igraph.graph import Graph def get_
import subprocess def run_command(command): """Execute command.
from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker
while True: if input("Enter a number: ") == "1":
>>> a = np.array([True, False, False, False, False, False
>>> d = {'a': [1, 2, 3], 'b': [4
import sys sys.path.append(os.path.dirname(__file__
>>> import json >>> json.dumps(['a', 'b', 'c
import sys from PyQt4 import QtGui, QtCore class MyLogger(Qt
>>> d = {'a':1, 'b':2, 'c':3}
import subprocess subprocess.call(["python", "test.py", "
>>> import itertools >>> l = [1,2,3,4,5,
import re def filter_text(text, marks): if len(
>>> import numpy as np >>> a = np.array([1,2,3
>>> import re >>> s = "Hello, world!" >>> re.sub(
import re def find_ignore_patterns(pattern): return re.
import spark from spark.sql.sql import File from spark.sql.sql
>>> import numpy as np >>> a = np.array([1,2,3
from sqlalchemy import create_engine engine = create_engine('sqlite:///
>>> from collections import defaultdict >>> a = [1,2,3,4,
class Foo(object): def __init__(self, name):
>>> import re >>> s = "a,b,c,d,e,
def takewhile(x): for i in range(len(
class MyClass(object): def __init__(self, value):
In [1]: df = pd.DataFrame({'a': [1,2,
import xml.etree.ElementTree as ET import urllib2 def download_
import numpy as np import matplotlib.pyplot as plt x = np.
from django.contrib.auth.models import User from django.contrib.auth.
from sqlalchemy import create_engine def replace_duplicate(query, new_
from selenium import webdriver from selenium.webdriver.common.keys import Keys
import subprocess def main(): subprocess.call(["bash", "-c
df = pd.DataFrame({'a':['a', 'b', 'c'],
>>> import sys >>> sys.maxsize 1000000 >>> sys.maxsize
>>> from itertools import product >>> a = [(1,2), (3,
import numpy as np import openoffice as o def sort_by_score
from scrapy.http import Request from scrapy.http import Response
>>> import codecs >>> codecs.decode('utf-8', 'ignore') '
from sqlalchemy import session from sqlalchemy.orm import sessionmaker class My
def get_redirect_url(request): return reverse('admin:users_
with open('file1.txt', 'r') as f1: for
def get_form_data(self, request, form): form = form
def foo(x): return x def bar(x):
import numpy as np import scipy.integrate as i def f(x
>>> from collections import defaultdict >>> a = [1,2,3,4,
import Image import ImageDraw img = Image.open('test.png')
from celery.client import Client from celery.client import Client client
import os import csv with open('output.csv', 'w') as
>>> from itertools import product >>> a = [1,2,3,4,
def is_equal(x, y): return x == y
class MyModel(models.Model): name = models.CharField(max
import csv with open('file.csv', 'r') as f:
df['title'] = df.groupby('title').apply(lambda x: x
import sys sys.path.append(os.path.dirname(__file__
import boto from boto.ec2 import EC2 conn = boto.connect
import re def find_matches(s, pattern): return re.
import numpy as np import fits # read the fits file fits = fits
import matplotlib.pyplot as plt import numpy as np x = np.
>>> import re >>> s = 'a\x01\x02\x03
from django.template import Template from django.conf import settings class MyForm
from django.contrib.auth.models import User from django.contrib.auth.
from sqlalchemy import * from sqlalchemy.orm import * class MyModel
import matplotlib.pyplot as plt import numpy as np x = np.
>>> import socket >>> socket.inet_aton('0.0.0.0
>>> d = { ... 'a': [1, 2, 3],
import csv import csv with open('output.csv', 'w') as
from tornado.test import TestRunner from tornado.test import TestRunner class
from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker
import urllib2 url = 'http://www.google.com/search?
import sys from xml.etree import ElementTree root = ElementTree.parse('http
In [1]: df = pd.DataFrame({'a': [1,2,
>>> import numpy as np >>> a = np.array([1,2,3
for item in list_of_objects: if item.name == 'name
>>> from collections import Counter >>> l = [1,2,3,4,
>>> a = [1,2,3,4,5,6,7,
import datetime date_str = '2014-01-01 00:00
from selenium import webdriver from selenium.webdriver.common.exceptions import WebDriverException
>>> from itertools import groupby >>> l = [1,2,3,4,
root = Tk() root.after_cancel(lambda: root.destroy())
class BaseModel(models.Model): id = models.CharField(max
class MyClass(object): def __init__(self, name):
import numpy as np import matplotlib.pyplot as plt # create a list
>>> import csv >>> d = {'a': 'b', 'c': 'd
def hash_function(x): return hash(x)
class Foo(object): def __init__(self, name):
>>> import re >>> s = "Hello, world!" >>> re.sub(
pip install opencv3
import os import re def create_html_file(filename):
>>> import numpy as np >>> a = np.array([1,2,3
>>> import struct >>> struct.unpack('<i', b'\x00\x
def f(x): return x def g(x):
from django.db import models class MyModel(models.Model):
In [1]: df = pd.DataFrame({'a':['a', 'b
def get_value(self, key): if key == 'value':
from sqlalchemy import create_engine engine = create_engine('sqlite:///:
>>> import shlex >>> s = "hello world" >>> shlex.split(s
import pandas as pd import datetime df = pd.read_excel('test
import datetime def minute_to_seconds(minutes): return timedelta(
import numpy as np def read_array(array): return np.
from sqlalchemy import create_engine cursor = create_engine('postgresql://
from flask import Flask, render_template def main(): app = Flask
>>> import re >>> s = 'a,b,c,d,e,
import pexpect import urllib2 class MyApp(object): def
import numpy as np import matplotlib.pyplot as plt # Create some data
>>> from itertools import product >>> a = [1,2,3,4,
import urllib2 url_list = [url.decode('utf-8')
import sshclient sshclient.connect('/home/john/my/
>>> import re >>> s = "Hello, world!" >>> re.sub(
import re def parse_line(line): if re.search(
def f(x): return x def g(): return g
import matplotlib.pyplot as plt import datetime # Create a datetime object
import gevent import nginx app = nginx.WSGIApplication(
import urllib2 url = 'http://www.google.com/search?
import cron # Create a cron job to run the cron job cron.cron
import time def get_time(self): time.sleep(1
>>> from itertools import product >>> from itertools import product >>> from itertools import product
import os import sys def test_file(filename): with open
>>> import struct >>> struct.unpack('<i', 'a') <struct
import java import time class MyThread(threading.Thread):
import os import os.path def get_owner(path):
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
import re img = re.compile(r'<img src="(.*?
from django.contrib.auth.models import User from django.contrib.auth.
>>> from collections import defaultdict >>> d = defaultdict(list) >>> d['a
from django.template import Template from django.conf import settings from django.conf
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> a = [1,2,3,4,5,6,7,
def trace(func): def wrapper(*args, **kwargs): if
import numpy as np import matplotlib.pyplot as plt def parallel_func
import unittest class TestCase(unittest.TestCase): def
from django.db import models class MyModel(models.Model):
def func(x): return x def func2(x):
import perl def mac_count(file): for line in file
import random def random_number(n): return random.randint
import os with open('file1.txt', 'w') as f1
>>> import collections >>> d = collections.defaultdict(list) >>> for key
import xml.etree.ElementTree as ET root = ET.parse('http
>>> from collections import Counter >>> max(my_list) [1, 2
>>> import re >>> s = "a,b,c,d,e,
from flask import Flask, request class MyHandler(webapp2.RequestHandler):
import cv2 import numpy as np import cv2 img = cv2
with open('file.txt', 'r') as f: for line in
<div class="form-group"> <input type="text" name="
from bs4 import BeautifulSoup from bs4 import BeautifulSoup soup = BeautifulSoup(
def get_value(self): return self.value
import numpy as np import math def hash_point(x, y):
>>> import itertools >>> l = [1,2,3,4,5,
import pandas as pd import pandas as pd df = pd.DataFrame({'
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> from itertools import product >>> a = [1,2,3,4,
>>> a = ['a', 'b', 'c', 'd'] >>> a
import collections def update_dict(d): d['old_dict
import pandas as pd import numpy as np def get_data(data):
class Foo(object): def __init__(self, name):
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> import re >>> s = "Hello, world!" >>> re.sub(
from django.db import models class MyModelForm(forms.ModelForm):
>>> import numpy as np >>> a = np.array([1,2,3
>>> from itertools import product >>> a = [1,2,3,4,
import sys import time def get_event_log(self):
import csv import csv with open('file1.csv', 'r')
>>> x = 1 >>> x == 1 True >>> x == 1 False
import sys import sys def main(): sys.exit(1)
def get_list(self): for i in range(1,10):
>>> a = [1,2,3,4,5,6,7,
>>> def is_callable(a): ... return isinstance(a, bool)
import time def test_sleep(self): time.sleep(1
import wave import time # Get the wave data data = wave.open
import urllib2 url = 'http://www.example.com/search?
class MyClass(object): def __init__(self, name):
>>> sum(x for x in range(1,10)) 0
import time def delay_function(x): return x + 1
>>> from itertools import product >>> a = [1,2,3,4,
>>> import ctypes >>> c = ctypes.c_void_p >>> c.
sudo -c'sudo /usr/bin/sudo -c'sudo /usr/
import sqlite3 conn = sqlite3.connect('/tmp/db')
def get_success_url(self, request): return reverse('admin.
>>> import random >>> s = "abc" >>> random.choice(s)
class Foo(object): def __init__(self, name):
def is_valid(value): if value == '1': return
>>> import re >>> s = 'a\b\b\b\b\
import binascii import binascii.unhexlify def pem_to_pem(
>>> from collections import Counter >>> a = Counter() >>> b = Counter()
import numpy as np import scipy.optimize as plt def is_valid(
class MyClass(object): def __init__(self, name):
import networkx as nx def set_colors(node, color):
class A(object): def __init__(self, name, value):
import random def random_function(n): return random.choice(
def get_value(self, key): return self.data[key]
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,
def test(a, b): if a == b: return True
>>> import collections >>> d = collections.OrderedDict(['a', 'b',
import csv with open('file.csv', 'r') as f:
>>> import re >>> re.sub(r'(\d+)(\d+)',
>>> from collections import Counter >>> a = [1,2,3,4,
In [1]: df = pd.DataFrame({'a':np.random.rand
>>> from collections import OrderedDict >>> d = OrderedDict() >>> for key, value in
#!/usr/bin/env python # -*- coding: utf
>>> import decimal >>> decimal.Decimal('0.01') '0.01
>>> from collections import Counter >>> a = Counter(map(lambda x: x[
class Foo(object): def __init__(self, *args, **
from PyQt4 import QtGui, QtCore class MyWidget(QtGui.Q
from django.contrib.auth.models import User from django.contrib.auth.
import urllib2 import urllib2.request url = 'http://www.
import sqlite3 import sqlite3.sql as sql conn = sqlite3.
import pyodbc import sqlalchemy import pyodbc.sql #
import urllib2 import urllib url = 'http://www.example.com
>>> import decimal >>> decimal.Decimal(1.0) '1.0
import codecs with codecs.open('file.txt', 'w') as f
>>> import json >>> json.dumps(list1) ['a', '
import subprocess p = subprocess.Popen(['python', '-m', '
>>> import re >>> s = "a,b,c,d,e,
def __getattr__(self, name): return getattr(self, name
>>> import re >>> s = 'a,b,c,d,e,
with open('file1.txt', 'r') as f1: for
def yield_statement(x): yield x
import sys from PyQt4 import QtGui, QtCore class MyConsole(Qt
import os import os.path def get_files(path):
>>> import re >>> re.sub(r'(\d+)(\d+)',
>>> import re >>> s = "Hello, world!" >>> re.sub(
>>> a = np.arange(10) >>> b = np.arange
import iptables class Test(iptables.IPTables): def __
import matplotlib.pyplot as plt import numpy as np x = np.
>>> a = np.array([1,2,3,4,5,6
>>> from collections import Counter >>> from collections import defaultdict >>> words = ['a',
from kotti.app import App from kotti.app.views import
class MyClass(object): def __init__(self, name, value
import networkx as nx import networkx as nx # Create a graph with
from django.db.models import Q def remove_items(self, queryset
import json data = {'a': 'b', 'c': 'd'
class MyModel(models.Model): name = models.CharField(max
def f(x): return x def g(x):
import os import sys def save_file(filename): with open
import os def clean_file(filename): with open(filename,
def find_circular_list(list): for i in range(len
from django.contrib.auth.models import User from django.contrib.auth.
def get_value(self, key): if key == 'value':
>>> a = np.array([1,2,3,4,5,6
from django.contrib.auth.models import User class UserView(View):
class MyModelLoader(models.ModelLoader): def get_queryset(self
from django.contrib.auth.models import User from django.contrib.auth.
>>> import re >>> s = "Hello, world!" >>> re.sub(
class MyClass(object): def __init__(self, *args,
import sys from qnet import QNetwork, QNetwork, QNetwork.QNetwork
from datetime import datetime def relativedelta(start, end): return
>>> import itertools >>> l = [(1,2),(3,4),
>>> import re >>> s = "Hello, world!" >>> re.findall
import Tkinter as tk class MainWindow(tk.Frame):
import argparse parser = argparse.ArgumentParser() parser.add_argument('
if any(x in y for x in x for y in y)
>>> from urlparse import urljoin >>> url = urljoin(base_url, 'index.
import sys sys.path.append(os.path.join(os.path
import nokia nokia.n73.init() nokia.n
import pandas as pd import matplotlib.pyplot as plt df = pd.
import numpy as np import matplotlib.pyplot as plt x = np.
import numpy as np import matplotlib.pyplot as plt import numpy as np
def sendline(self, data): if data is None: return
def test(x): if x == 0: return True
>>> from datetime import datetime >>> datetime.datetime.now() datetime.datetime(
def get_cumulative_value(self, value): return value.get
import numpy as np import matplotlib.pyplot as plt x = np.
>>> a = np.array([1,2,3,4,5,6
import scipy.sparse as csr import numpy as np # create a sparse matrix
import threading class MyThread(threading.Thread): def __init
>>> from itertools import product >>> from itertools import islice >>> a = [1
>>> import hashlib >>> hash(str) '5a5a5a5
>>> import re >>> s = "Hello, world!" >>> re.split('
from test.fixture import TestFixture from test.fixture import TestFixture
>>> import urllib2 >>> urllib2.urlopen('http://www.example.
>>> from collections import Counter >>> max_count = Counter(map(int, my
from django.db import models class MyModel(models.Model):
In [1]: df.groupby('A').apply(lambda x: x.
import numpy as np import matplotlib.pyplot as plt def get_model
import itertools def permute(n, r): for i in range
>>> import binascii >>> binascii.b16encode(b16) 'b16
import json import urllib2 import urllib2 url = 'http://www
import subprocess def get_value(filename): return subprocess.check_
def f(a, b): return a + b def g():
import gtk class Example(gtk.Frame): def __init__
import os def search_folders(path): for root, dirs,
>>> import datetime >>> datetime.datetime.now() datetime.datetime.now().
def compare_numbers(num_list): if num_list == 1:
def test_function_called(func): if func.__name__ ==
In [1]: df['date'] = df['date'].max()
import sys import re def get_text(text): return re
class MyModel(models.Model): name = models.CharField(max
def set_zero(self, value): self.value = value
from flask import Flask, User from flask.ext.sqlalchemy import sessionmaker
import csv with open('file.txt', 'r') as f:
>>> from itertools import groupby >>> from itertools import islice >>> from itertools import is
import random def print_list(list): for i in range(
import itertools def zip_longest(iterable, key): return zip
In [1]: df = pd.DataFrame({'a':[1,2,
import subprocess cmd = 'python -m python3.7.0 -c
import os import sys import os.path def main(): os
df['a'] = df.apply(lambda x: x.apply(lambda x
In [1]: df = pd.DataFrame({'a': [1,2,
import os import os.path def get_python_scripts(path):
import subprocess subprocess.call(["python", "python", "python",
import sys import sys class MainWindow(Frame): def __init
import subprocess def main(): subprocess.call(["python", "-m
import pandas as pd import pandas as pd # Create a pandas dataframe with the
>>> import numpy as np >>> a = np.array([1,2,3
import gtk class Window(gtk.Window): def __init__
from django.contrib.auth.models import User from django.contrib.auth.
import numpy as np import matplotlib.pyplot as plt x = np.
>>> import re >>> re.sub(r'(\/|\/)', r
>>> import re >>> s = "a,b,c,d,e,
>>> from itertools import product >>> a = [1,2,3,4,
In [1]: df = pd.DataFrame({'a':['a', 'b
>>> a = [1,2,3,4,5,6,7,
import random with open('file.txt', 'w') as f:
import xml.etree.ElementTree as ET root = ET.parse('http
import re def replace_line(line, start, end): if
def func(a, b): return a + b def func_
import numpy as np import stats def friedmanchisquare(x
import pylita import numpy as np import pylita.image as Image
import time import subprocess def run_command(command): print command
from multiprocessing import Pool def get_function(func): return func.
>>> import re >>> s = "a\b\c\d\d\
from bs4 import BeautifulSoup html = """<html> <head>
import random def my_function(x): return random.randint
class A(object): def __init__(self, x):
In [1]: df.index.name Out[1]: A
import re with open('file.txt', 'r') as f:
from unittest import TestCase class TestCase(TestCase): def
import numpy as np import matplotlib.pyplot as plt # Create some data
import gtk class Entry(gtk.Entry): def __init__
>>> import re >>> re.findall(r'<p>([^<]+)
import xlsxwriter sheet = xlsxwriter.workbook('test.xlsx')
import sys from IPython.display import display class MyWindow(display.Frame
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
import pandas as pd import csv # Create a dataframe with the data df
def generator(n): for i in range(n): yield i
def reset_function(self): self.func = self.func_1
>>> from collections import Counter >>> d = {1:1, 2:2,
sudo sudo -c "sudo /home/user/bin/sudo" -p "
import os import sys def get_data(self): return os
>>> from collections import OrderedDict >>> d = OrderedDict() >>> d.keys()
import sys from bitfield import Bitfield def octave(value):
import re def search(filename): if not re.search(r
def get_data(self, data): if data is None:
In [1]: df.sort_values('name', inplace=True) Out
import numpy as np import matplotlib.pyplot as plt x = np.
with open('file.txt', 'w') as f: for line in
def get_value(self, key): return self.get_value(
import tornado.web class MyApp(tornado.web.Application):
In [1]: df.groupby('time').apply(lambda x: x.
>>> import re >>> re.sub(r'(\s+)', r'\1
def func_dict(func): return dict(map(func, args))
import sys import time class MyClass(object): def __init
class MyClass(object): def __init__(self, name, value
In [1]: df.index.str.replace('', '') Out[1
import urllib2 url = 'http://www.google.com/search?
from sphinx.ext.docutils import DocsDocGenerator from sphinx.ext.
import os import glob path = 'C:/Users/john/Desktop
from elixir.models import Count class Count(models.Model):
def test_random_number(n): return random.choice(n)
>>> import re >>> s = "Hello, world!" >>> re.split('
from pymongo import MongoClient class MyCollection(MongoClient): def
import subprocess subprocess.call(["python", "-m", "python",
with open('file1.txt', 'r') as f1: for
import matplotlib.pyplot as plt import numpy as np fig = plt.
>>> from itertools import groupby >>> from itertools import islice >>> from itertools import is
import datetime import time def get_time(self): return datetime
from sqlalchemy import create_engine conn = create_engine('postgresql://
import os import datetime # Create a list of dates dates = []
import gevent import gevent.gevent.thread import gevent.g
class Foo(object): def __init__(self, name):
import urllib2 url = 'http://www.example.com/index.
class MyClass(object): def __init__(self, mock_func
import email from email.mime.mime import MIMEMultipart from email.mime.
>>> import re >>> s = "Hello, world!" >>> re.sub(
import os import sys def main(): print "Hello, world!"
import re def parse_file(filename): with open(filename,
>>> from itertools import product >>> d = {1: [1,2,3
import Image import ImageDraw img = Image.open("test.jpg")
import numpy as np import matplotlib.pyplot as plt # Create a matrix
import lxml.html root = lxml.html.fromstring(open
def sort_by_score(score): return score def sort_
import numpy as np import matplotlib.pyplot as plt # create a numpy
>>> from collections import Counter >>> l = [1,2,3,4,
import subprocess def get_value(self, arg): return self.
import socket import sys def is_connected(addr): return not
>>> from collections import Counter >>> from collections import Counter >>> from collections import Counter
>>> a = [1,2,3,4,5,6,7,
>>> from collections import Counter >>> a = Counter() >>> b = Counter()
search_results = { 'search_results': { 'search_
from celery import Task from celery.tasks import Task from celery.
import re def parse_html(html): for line in html:
>>> a = [1,2,3,4,5,6,7,
import urllib2 import urllib url = 'http://www.example.com
>>> import re >>> s = "a\b\b\b\b\
import pandas as pd import pandas as pd df = pd.read_csv
import sys import time def main(): while True: time
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
>>> from collections import Counter >>> l = [1,2,3,4,
from django.template import Template from django.template import Template class MyTemplate
>>> from collections import defaultdict >>> a = defaultdict(list) >>> b = defaultdict
{% for i in range(0, len(my_list)) %}
import re soup = BeautifulSoup(text, 'html.parser') so
from azure.queue import Queue queue = Queue( queue_name='
>>> import re >>> re.sub(r'\\(\w+\\)',
>>> a = [1,2,3,4,5,6,7,
import sys sys.path.append(os.path.dirname(__file__
>>> import re >>> s = "Hello, world!" >>> re.search(
import urllib2 import urllib url = 'http://www.google.com
>>> from collections import Counter >>> l = [1,2,3,4,
import os def get_full_path(path): return os.
>>> import struct >>> struct.pack('<i', 'a', 'b')
>>> import re >>> s = 'a%s%s%s%s%
import pandas as pd import numpy as np import pandas as pd df =
import requests url = 'http://www.apiclient.com/discovery
import re def parse_docstrings(docstrings): """Parse doc
import sys import time def print_time(time): print time
import pandas as pd import matplotlib.pyplot as plt import datetime df
with open('file1.txt', 'r') as f: for line
import matplotlib.pyplot as plt import numpy as np x = np.
import sys def main(): print "Hello, world!" sys
import numpy as np import matplotlib.pyplot as plt # Create a graph
import subprocess subprocess.call(["python", "-m", "python",
import urllib2 import urllib url = 'http://www.google.com
from mako.core import * def get_data(self, key):
from selenium import webdriver driver = webdriver.Firefox() driver.get('
from django.db import models class MyModel(models.Model):
>>> from math import floor >>> from math import ceil >>> a = floor(2
>>> import re >>> re.sub(r'%([^%]+)%', r
import sys import sys # This is the main program from ide import ide
from flask import Flask, template from flask.ext.linkify import Linkify
>>> from collections import defaultdict >>> d = defaultdict(list) >>> d[0
from bs4 import BeautifulSoup soup = BeautifulSoup(html) soup.
#!/usr/bin/env python # -*- coding: utf
>>> a = np.array([[1,2,3],[4,5
def myfunc(x): return x myfunc(x)
import numpy as np import scipy.sparse as sp # create a sparse matrix
def sliding_window(x, y): return [x[0]
import re def split_string(s): return re.sub(
import zipfile with zipfile.ZipFile('test.zip') as f:
class MyClass(object): def __init__(self, name):
>>> import re >>> s = "Hello, world!" >>> re.sub(
import subprocess import sys def main(): print "Running command..."
import numpy as np import matplotlib.pyplot as plt def get_sat
>>> a = [1,2,3,4,5,6,7,
>>> d = {'a': 1, 'b': 2, 'c': 3}
import Tkinter as tk class Canvas(tk.Frame): def
if not hasattr(self,'my_variable_name'): self.
>>> from itertools import product >>> a = [1,2,3,4,
import threading class Thread(threading.Thread): def __init__
>>> import re >>> s = 'a\s+b\s+c\
class Foo(object): def __init__(self, name):
import xml.etree.ElementTree as ET root = ET.parse('http
from pyramid.orm import session session.query(User)
>>> d = {'a':1, 'b':2, 'c':3}
def step_function(x, y): return x[y]
>>> import binascii >>> binascii.hexlify(str(x)) '0x
>>> import hashlib >>> hash(str(x)) 0x7f7f
import gobject class MyApp(object): def __init__(
from flask import Flask from flask.ext.logging import logger class MyRequestHandler
class MyClass(object): def __init__(self, name):
>>> import re >>> s = u'abc' >>> re.sub(r
>>> import re >>> s = "Hello, world!" >>> re.findall
>>> import re >>> s = "Hello, world!" >>> re.sub(
import urllib2 import urllib2 url = 'http://www.google.
def default_input(self, input): if input == 'y':
import numpy as np import pygame def math_to_float(x
import urllib2 import urllib2 url = 'http://www.google.
>>> import re >>> s = ['a', 'b', 'c', 'd
from django.db import models class MyModel(models.Model):
from django.contrib.auth.models import User from django.contrib.auth.
import json json_file = open('test.json', 'w')
import requests url = 'http://www.example.com/index.php
import os import subprocess # This is the main program # and the subprocess
In [1]: df = pd.DataFrame({'a':['a', 'b
def is_valid(self, value): if value == '1':
import sqlite3 conn = sqlite3.connect('/tmp/mydb.
>>> from random import randint >>> a = [1,2,3,4,
import os import csv with open('file.txt', 'r') as
import time def main(): print "Running..." time.sleep
>>> import datetime >>> datetime.datetime.now() >>> datetime.datetime.now
if (int(arg) == 1) and (int(arg) == 2):
import inspect def is_function(func): return inspect.isfunction
