select time, activities, count(*) from table group by time, activities;
SELECT i_adgroup_id, array_agg(i_category_id) FROM adgroupcategories_br WHERE i_adgroup_id IN ( SELECT i_adgroup_id FROM adgroupusers_br WHERE i_user_id = 103713 ) GROUP BY i_adgroup_id;
SELECT @RecordType AS RecordType_1, AbstractData.AccountNumber AS AcctNum_2, COALESCE(AD.Diagnosis, '') AS Dx_3 FROM AbstractData LEFT JOIN AbsDrgDiagnoses AD ON AD.VisitID = AbstractData.VisitID WHERE AbstractData.PtStatus <> 'REF' AND AD.DiagnosisSeqID = '1'
111.045*DEGREES(ACOS(COS(RADIANS(lat1)) * COS(RADIANS(lat2)) * COS(RADIANS(long1) - RADIANS(long2)) + SIN(RADIANS(lat1)) * SIN(RADIANS(lat2)))) AS distance_in_km
delimiter // create trigger ins_table2 after insert on table1 for each row begin declare t2_cnt_index int default 1; while t2_cnt_index <= new.num do insert into Table2 (desc2,id1) values (new.desc2,new.id1); set t2_cnt_index := t2_cnt_index + 1; end while ; end ; // delimiter ;
update table set TRANSFER_TITLE = ID || PAYMENT_BASE || PAYMENT_A || PAYMENT_B || PAYMENT_C || PARTNER_ID
SELECT DISTINCT u.host ,first_value(usage) OVER w AS first_usage ,last_value(usage) OVER w AS last_usage FROM usage u WINDOW w AS (PARTITION BY host ORDER BY logtime, usage ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
Dim d As DAO.Database Dim r As DAO.Recordset Dim s As String Set d = CurrentDb() Set r = d.OpenRecordset("SELECT foo, bar, baz FROM foobar") s = "" While Not r.EOF s = s & r!foo & "," & r!bar & "," & r!baz & ";" r.MoveNext Wend r.Close Set r = Nothing Set d = Nothing s = SHA1TRUNC(s)
delete from campaingMailList where campaingId not in (select campaingid from campaigns)
;WITH Data AS ( SELECT [QUOTE Ref], [Product Line], [Value] FROM ( SELECT [QUOTE Ref], [Product A], [Product B], [Product C], [Product D] FROM [Table1] ) p UNPIVOT ([Value] FOR [Product Line] IN ([Product A], [Product B], [Product C], [Product D] ) )AS unpvt ) SELECT * FROM DATA WHERE Value <> 0;
SELECT CONCAT(fo.first_name, ' ', fo.last_name, if (fights.winner=1, "Winner", "Loser")) 'Fighter 1', CONCAT(ft.first_name, ' ', ft.last_name, if (fights.winner=2, "Winner", "Loser")) 'Fighter 2', CONCAT(victory_method.name, ' (', method_notes, ')') 'Victory' FROM fights INNER JOIN fighters as fo ON fights.fighter1_id = fo.id INNER JOIN fighters as ft ON fights.fighter2_id = ft.id INNER JOIN victory_method ON fights.victory_method_id = victory_method.id
array_length(array[[1, 2], [3, 4], [5, 6]], 1) ---> 3 array_length(array[[1, 2], [3, 4], [5, 6]], 2) ---> 2
SELECT CategoryId, MIN(SWITCH(YourTable.Flag = 'a',Value)) AS aValue, MIN(SWITCH(YourTable.Flag = 'm',Value)) AS mValue, MIN(SWITCH(YourTable.Flag = 'p',Value)) AS pValue FROM YourTable GROUP BY CategoryId
case when regexp_like(A, 'XXX/MOSCOW/XXXMSX/[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]') then 'true' else 'false' end
select t1.column2 from table1 t1 left join table2 t2 on t1.id = t2.id
IF @DateExpired = 1 SELECT sens.date1 AS Expired FROM sens ELSE SELECT sens.date1 AS [Due Date] FROM sens
SELECT CASE @Flag WHEN 1 THEN t.field1 WHEN 2 THEN t.field2 WHEN 3 THEN t.field3 END as field, [A bunch of other fields], @Flag as flag FROM table t
Select ID, Type, Price, Code, Date from tblPRODUCT tbpr where (Code = '1234' AND Date IN (Select MAX(Date) from tblPRODUCT where type= tbpr.type and code = '1234')) OR Date IN (Select MAX(Date) from tblPRODUCT where type= tbpr.type and not exists(select code from tblPRODUCT where type= tbpr.type and code is not null) )
SELECT tbl2.userid, tb2.col3 AS [your name here], tbl1.col1 AS [your name here], ... FROM tbl2 INNER JOIN tbl1 ON tbl1.userid = tb2.userid WHERE tbl2.userid = "testuser"
SELECT Key FROM keys k INNER JOIN users u ON k.UserId = u.UserId WHERE u.UserName = 'username'
SELECT Col1, Col2, Col3, Col4 FROM MyTable WHERE Col1 NOT IN (Col2,Col3,Col4) AND Col2 NOT IN (Col3,Col4) AND Col3 <> Col4
select ... from ... order by case when name is null then 0 else 4 end + case when distance is null then 0 else 3 end + case when proximity is null then 0 else 2 end desc
SELECT s.studentid, s.name,notes.courseid ,count(1) CNT FROM student s INNER JOIN notes ON s.studentid = notes.studentid WHERE (notes.note) < "50" group by s.studentid, s.name, notes.courseid ORDER BY student.name
@topParam select TOP (COALESCE (@topParam, 1000000000))
CREATE OR REPLACE TYPE PARENT AS OBJECT (...); CREATE OR REPLACE TYPE CHILD UNDER PARENT (...); CREATE TABLE PEOPLE OF PARENT;
CREATE TABLE Member ( MemberID , Org_Type , Name , ... , Role , PRIMARY KEY (MemberID) , UNIQUE KEY (Org_Type, MemberID) , CHECK Org_Type IN (1, 2, 3) ) ; CREATE TABLE Member_Type_1 ( MemberID , Org_Type , Location , PRIMARY KEY (MemberID) , FOREIGN KEY (Org_Type, MemberID) REFERENCES Member(Org_Type, MemberID) , CHECK Org_Type = 1 ) ;
select * from dbo.myDatabase where ([Date] = (select max([Date]) from /* your query */ ) or [Date] = (select min([Date]) from /* your query */ )) and MachineId = '7B788EE88E-6527-4CB4-AA4D-01B7F4048559' -- or any other id
SELECT CAST((columnName * 100) as INTEGER) NewValue FROM TableName;
SELECT allSt.* FROM students allSt join students st -- check the same majorSubject AND the same minorSubject -- on allSt.majorSubject = st.majorSubject and allSt.minorSubject = st.minorSubject WHERE st.rollNumber = '<rollNumber>' AND -- exclude student with the given rollNumber from the result set -- allSt.rollNumber <> '<rollNumber>'
mysql> select find_in_set(2, '1, 2, 3'); +---------------------------+ | find_in_set(2, '1, 2, 3') | +---------------------------+ | 0 | +---------------------------+ mysql> select find_in_set(2, '1,2,3'); +-------------------------+ | find_in_set(2, '1,2,3') | +-------------------------+ | 2 | +-------------------------+
SELECT user.name, profile.bio, rate.rate FROM user LEFT JOIN profile ON user.id = profile.user_id LEFT JOIN rate ON user.id = rate.user_id WHERE status = 'active'
select id, name,parentID from @a where name like @Letter or ID in (select ParentID from @a where name like @Letter)
areaid areaname townname 1 AA AA 1 AA BB
UNHEX(REPLACE(UUID(),'-',''))
DECLARE TABLE @MYTABLE ( ID INT IDENTITY, VALUES...... ) INSERT INTO @MYTABLE SELECT MYVALUES..... SELECT * FROM @MYTABLE
update mytable1 t1 inner join mytable2 t2 on (t1.a=t2.a or t1.b=t2.b or t2.c=t1.c) set t1.state=5,t2.state=5 where((cast(t1.a=t2.a as unsigned integer) + (cast(t1.b=t2.b as unsigned integer) + (cast(t1.c=t2.c as unsigned integer)) <3) and t1.state=0;
SELECT ... FROM ... WHERE somecol >= '2011-01-01' AND somecol <= '2011-01-30'
INSERT INTO second_table (Bill_Number, Rest_Inform_Status, Rest_Response_Status) SELECT ft.Bill_Number, @default_inform_status, @default_response_status FROM first_table ft LEFT JOIN second_table st ON st.Bill_Number = ft.Bill_number WHERE st.Bill_Number IS NULL
INSERT INTO Colleges (CollegeName) SELECT DISTINCT CollegeName FROM OLdTable ; INSERT INTO Courses (CollegeID, CourseName) SELECT Colleges.CollegeID, OldTable.CourseName FROM OldTable JOIN Colleges ON OldTable.CollegeName = Colleges.CollegeName ;
with c as ( select *, row_number() over(partition by name, name2, [user] order by id) as n from YourTable ) delete from c where n > 1;
select 'SC' as Characteristic_Name, SC as Val from yourtable union all select 'DO' as Characteristic_Name, DO as Val from yourtable union all select 'temp' as Characteristic_Name, temp as Val from yourtable union all select 'pH' as Characteristic_Name, pH as Val from yourtable union all select 'etc' as Characteristic_Name, etc as Val from yourtable;
UPDATE tablename SET value1 = concat(0,value1) WHERE length(value1)=4
delete p1 from product p1 join product_description d1 on d1.product_id = p1.product_id join product_description d2 on d2.product_id <> d1.product_id and d2.language_id = d1.language_id and d2.name = d1.name join product p2 on p2.product_id = d2.product_id where d1.language_id = 1 -- define the language used for product name and (p2.price > p1.price -- delete if higher price exists or p2.price = p1.price and p2.product_id < p1.product_id -- delete if same price with lower id exists ) ;
Select CHARINDEX ('S','MICROSOFT SQL SERVER 2000') Result: 6
select datediff(second,depart_dt, arrived_dt)/86400 as Day, datediff(second,depart_dt, arrived_dt)/3600%24 as Hour, datediff(second,depart_dt, arrived_dt)/60%60 as Minute, datediff(second,depart_dt, arrived_dt)%60 as Second from yourtable
SELECT (CASE WHEN id_1 IN ('1', 'AF', 'C') THEN id_1 WHEN id_2 IN ('1', 'AF', 'C') THEN id_2 WHEN id_3 IN ('1', 'AF', 'C') THEN id_3 ELSE 0 END ) id ,name FROM table WHERE (id_1 IN ('1', 'AF', 'C')) OR (id_2 IN ('1', 'AF', 'C')) OR (id_3 IN ('1', 'AF', 'C'));
SELECT objectName, objectType FROM objectTable INNER JOIN objectids ON (objecttable.objectid = objectids.id)
SELECT * FROM myTable WHERE desc LIKE U&'%\2028%'
select b.* from yourtable a left join yourtable b on ( a.Patient_ID = b.Patient_ID and a.DateOfService = b.DateOfService) where a.CPTCode = "some value"
CREATE TRIGGER [dbo].[Group_Update] ON [dbo].[TBL_ADM_USER_GROUP] AFTER UPDATE AS BEGIN SET NOCOUNT ON; INSERT INTO TBL_TestTable -- define column list for clarity SELECT CONCAT('Group "' ,i.name,'" is updated'), 'GROUP', 'Update', SYSDATETIME(), i.changer_user_id FROM inserted i; END
Select GeneName, count(*) from genes group by GeneName;
SELECT cpe.entity_id, cpe.sku, cpe_int.value as visibility FROM catalog_product_entity as cpe LEFT JOIN catalog_category_product as ccp on cpe.entity_id = ccp.product_id LEFT JOIN catalog_product_entity_int as cpe_int ON cpe.entity_id = cpe_int.entity_id AND cpe_int.attribute_id = 89 WHERE ccp.category_id IS NULL
insert into tab2 (field1, field2, field3, field4) select field1, field2, field3, 'New Value' from tab1
SELECT d.device, s.service, r.hits FROM dt_devs d INNER JOIN dt_serv s ON d.serviceID = s.serviceID LEFT JOIN results r ON d.deviceID = r.deviceID
strDdl = "ALTER TABLE Dummy ALTER COLUMN ID COUNTER(1, 1);" CurrentProject.Connection.Execute strDdl
CREATE SEQUENCE your_pk_seq; CREATE TRIGGER trg_populate_pk BEFORE INSERT ON your_table_name FOR EACH ROW BEGIN SELECT 'S' || to_char( your_pk_seq.nextval ) INTO :new.primary_key_column FROM dual; END;
select Years,number as Month,isnull(Total,0) as Total from( select number from master..spt_values where type='P' and number between 1 and 12) seq cross join (select distinct Year([date]) as Years from Table1) y left join (select Year([date])as Year,month([date])as Month,sum(total) as Total from Table1 group by Year([date]),month([date]))t on seq.number=t.Month and t.year=y.Years
select o.OrderNo, OrderDate, ol.Amount,(select sum(oll.Amount * oll.UnitPrice) from OrderLine oll where oll.OrderNo = o.OrderNo) as OrderTotal ....
select empid, sum(case when attendance = 'P' then 1 end) as presents, sum(case when attendance = 'A' then 1 end) as absents from EmpAttendance group by empid
SELECT rec_date_sf(registration) as date_rent_start, registration FROM i_booking WHERE registration = 'E246WFC';
=Join(LookupSet(Fields!grade.Value & Fields!od.Value & Fields!wall.Value & Fields!id.Value, Fields!grade.Value & Fields!od.Value & Fields!wall.Value & Fields!id.Value, RTrim(Fields!stock_number.Value), "FOC"), ", ")
SELECT coalesce(t1.x, t2.x) x, t1.y, t2.z FROM (select count(y), x from a group by x) t1 full join (select count(z), x from b group by x) t2 on (t1.x = t2.x)
select p.* from (select p.*, (lag(clock, 1) over () - clock) as diff from plays p ) p where possession = 'away';
SELECT product_tracking.user_id, SUM(CASE WHEN product_tracking.product='A' THEN 1 ELSE 0 END) AS A, SUM(CASE WHEN product_tracking.product='B' THEN 1 ELSE 0 END) AS B, SUM(CASE WHEN product_tracking.product='C' THEN 1 ELSE 0 END) AS C FROM product_tracking GROUP BY product_tracking.user_id
SELECT cities, CASE WHEN COUNT(*) = 1 THEN '1' WHEN COUNT(*) BETWEEN 2 AND 5 THEN '2-5' WHEN COUNT(*) > 5 THEN '5' END category, LISTAGG(people, ',') WITHIN GROUP (ORDER BY people) AS names FROM your_table GROUP BY cities
SELECT t1.Id, t1.Name, t2.Color from TableA t1 left outer join TableB t2 on t1.Id_TableB = t2.Id;
SELECT t.Opp, avg(Points) FROM (SELECT gl.team, gl.Opp, AVG(gl.Points) as Points FROM Players p INNER JOIN NBAGameLog gl ON p.Player_ID = gl.Player_ID WHERE (gl.Date_Played Between Date()-15 And Date() AND p.Position = "C" GROUP BY gl.team, gl.Opp; ) t GROUP BY t.Opp;
SELECT name, continent, population FROM world x WHERE continent in (SELECT continent FROM world group by continent having max(population) < 25000000)
SELECT COUNT(*) AS cnt FROM products WHERE ExternalProductId IS NOT NULL GROUP BY ExternalProductId, SourceId HAVING cnt > 1
begin dbms_job.broken(23, true); commit; end; /
select coalesce(p.name, f.name) as name from contacts c left join people p on p.contacts_id = c.id and c.type = 'person' left join firms f on f.contacts_id = c.id and c.type = 'firm' where c.id = 42;
select i1.item_id,i2.item_id,count(1) from items i1 join categorizations c1 on c1.item_id=i1.item_id join categorizations c2 on c2.category_id=c1.category_id join items i2 on c2.item_id=i2.item_id where i1.item_id <> i2.item_id group by i1.item_id,i2.item_id order by count(1)
DECLARE @ID BIGINT INSERT INTO dbo.TABLE_ID (Table_NAME) SELECT 'Table_Products' SELECT @ID = SCOPE_IDENTITY() INSERT INTO dbo.Table_Products (ID, Product_Name) SELECT @ID, 'SomeProduct'
WHERE field LIKE '%ZZZ%' AND field NOT LIKE 'Additional comments:%ZZZ%'
SELECT CAST(CASE WHEN OLEFLOAT > 0 THEN OLEFLOAT-2.0 ELSE 2*CAST(OLEFLOAT AS INT) - 2.0 + ABS(OLEFLOAT) END as datetime)
SELECT MY_TABLE.*, (CHANGE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS FORMATED_DATE FROM MY_TABLE;
select p.floor,p.[1] as room1,p.[2] as room2,p.[3] as room3 from ( select floor,apt,row_number() over(partition by floor order by apt) as rn from #t) as t pivot ( min(t.apt) for t.rn in([1],[2],[3]) )as p;
select c.id_contract , p.id_pfo , nvl(l.budget,0) value from contracts c cross join portfolios p left outer join "contract_Linked_pfo" l on l.id_contract = c.id_contract and l.id_pfo = p.id_pfo ;
:setvar filename somefile.ext :setvar version 1 :on error exit print 'This is version $(version) on $(filename)' -- the rest of the actual script
SELECT cust, date, store, COUNT(*) AS n_items, SUM(item_type = 1) AS item1, SUM(item_type = 2) AS item2, SUM(item_type = 3) AS item3, SUM(item_type = 4) AS item4 FROM t GROUP BY cust, date, store
WHERE DTH.PointPerson LIKE @userParam AND ActivityDate >= @startDateParam AND ActivityDate <= @endDateParam AND ( (@orgTeamPK = '%' AND (USR.[OrganizationalTeamId] LIKE @orgTeamPK OR USR.[OrganizationalTeamId] IS NULL) ) OR (@orgTeamPK <> '%' AND (USR.[OrganizationalTeamId] LIKE @orgTeamPK ) )
SELECT a,b FROM table WHERE b = (SELECT MAX(b) FROM table)
create function hun_first_letter(name in varchar2) return varchar2 as begin if substr(upper(name),1,3) in ('DZS') then return substr(name,1,3); elsif substr(upper(name),1,2) in ('CS','DZ','LY','NY','SZ','TY','ZS','GY') then return substr(name,1,2); else return substr(name,1,1); end if; end;
SELECT hist.I_PAYT_REF AS PAY_REF, hist.C_USERID AS USER_ID, PAYT.I_PAYT_REQ_SUM AS PAYMENT_FILE_ID FROM SP.TSP_CP_HIST hist left join SP.TSP_CP_PAYT_RQ_DTL PAYT ON PAYT.I_PAYT_REF = hist.I_PAYT_REF WHERE hist.C_HIST_TYPE ='V'
CREATE TABLE User ( Name VARCHAR(10) NOT NULL , PRIMARY KEY (Name) ) ; CREATE TABLE MutualFriendship ( u1 VARCHAR(10) NOT NULL , u2 VARCHAR(10) NOT NULL , PRIMARY KEY (u1, u2) , FOREIGN KEY (u1) REFERENCES User(Name) , FOREIGN KEY (u2) REFERENCES User(Name) , CHECK (u1 < u2) ) ;
where datetime('now') >= coalesce(fromDate, datetime('now')) datetime('now') <= coalesce(toDate, datetime('now'))
SELECT e.id, e.title, COALESCE(ca.text, es.text, e.content) content FROM events e LEFT JOIN localizations ca ON ca.row_id = e.id AND ca.language = 'ca' LEFT JOIN localizations es ON es.row_id = e.id AND es.language = 'es'
select ItemId from Item_has_category group by ItemId having sum(case when CategoryId = 1 then 1 end) = 1 or sum(case when CategoryId = 2 then 1 end) = 1 andsum(case when CategoryId = 3 then 1 end) = 1
UPDATE a75ting.username SET points = points - 5
INSERT INTO actions(Action) VALUES ('Go to the pub'); SET @aid = LAST_INSERT_ID(); INSERT INTO statements(statement, Language) VALUES ('Have a pint', 'English'); SET @sid = LAST_INSERT_ID(); INSERT INTO Relationships(SID,AID) VALUES (@sid,@aid);
SELECT A.ID, A.NAME, A.DESC, CASE B.ISEMPTY WHEN 1 THEN 1 ELSE A.ISEMPTY END CASE AS ISEMPTY FROM TABLE2 A LEFT JOIN TABLE1 B ON A.ID=B.ID
SELECT SUM(COUNT) AS Actions, (CASE event WHEN 1 THEN 'Web' WHEN 2 THEN 'iOS' WHEN 3 THEN 'Android' WHEN 4 THEN 'Windows' WHEN 5 THEN 'Mac' ELSE 'Unknown' END ) AS Platform FROM METRICS_WEEKLY WHERE EVENT IN (1, 2, 3, 4 ,5 ,6) GROUP BY EVENT
select suppcode, count(distinct storecode) as StoresSupplied from stocks group by suppcode having count(distinct storecode) > 3
sqlite> create table t(f); sqlite> create index tf on t(f); sqlite> explain query plan select * from t where ifnull(f,0)=1; 0|0|0|SCAN TABLE t (~500000 rows) sqlite> explain query plan select * from t where f is null; 0|0|0|SEARCH TABLE t USING COVERING INDEX tf (f=?) (~10 rows) sqlite> explain query plan select * from t where f=1; 0|0|0|SEARCH TABLE t USING COVERING INDEX tf (f=?) (~10 rows)
DECLARE @readerrorlog_results TABLE ( LogDate date, ProcessInfo varchar(max), Text varchar(max) ) INSERT INTO @readerrorlog_results (LogDate,ProcessInfo,Text) EXEC sp_readerrorlog 0, 1, 'Login failed' INSERT INTO FailedLogins (LogDate, ServerName,ProcessInfo,Text) SELECT LogDate,@@SERVERNAME,ProcessInfo,Text FROM @readerrorlog_results
INSERT INTO table (product_id, value, branch_id) SELECT t1.product_id, t1.value, '71' FROM table AS t1 LEFT JOIN table AS t2 ON t1.product_id = t2.product_id AND t2.branch_id = '71' WHERE t1.branch_id = '53' AND t2.product_id IS NULL
INSERT INTO `consumption` (consumption, total_consumption) VALUES (8, consumption + (SELECT MAX(total_consumption) FROM consumption) );
select distinct c1.ID, c2.category from mytable c1 join mytable c2 ON c1.category = c2.category and c1.ID <> c2.ID group by c1.category, c2.ID;
SELECT id, summary, owner, c1.value, c2.value FROM ticket t INNER JOIN ticket_custom c1 ON t.id = c1.ticket AND c1.name = 'X' INNER JOIN ticket_custom c2 ON t.id = c2.ticket AND c2.name = 'Y'
SELECT * INTO newA FROM a EXCEPT SELECT * FROM b ; SELECT * INTO newB FROM b EXCEPT SELECT * FROM a ;
SELECT DISTINCT WEEKLY_TIMECARD.WEEK_NUMBER FROM WEEKLY_TIMECARD, DAILY_CALCULATIONS, EMPLOYEE_PROFILES WHERE EMPLOYEE_PROFILES.EMPLOYEE_NUMBER = WEEKLY_TIMECARD.EMPLOYEE_NUMBER AND EMPLOYEE_PROFILES.EMPLOYEE_NUMBER = DAILY_CALCULATIONS.EMPLOYEE_NUMBER AND WEEKLY_TIMECARD.WEEK_NUMBER = DAILY_CALCULATIONS.WEEK_NUMBER
ALTER TABLE tablename CHANGE columnname columnname BOOLEAN DEFAULT '1' NOT NULL
select * from subjects s left join enrollment e on s.subno = e.subno where sno=9800007
UPDATE r1 SET r1.mutationcode = 1 FROM record as r1 join record as r2 on r2.loadno < r1.loadno and r2.firstname = r1.firstname and r2.lastname = r1.lastname WHERE r2.street != r1.street or r2.streetno != r1.streetno ;
UPDATE my_table SET path = substring(path, 8, 9999); where path like '/PicsDB%'
ALTER TABLE fin_stavke ADD CONSTRAINT fin_stavke_knjizenje CHECK ( doc_id IS NOT NULL OR protocol_id IS NOT NULL)
SELECT DebugData CASE WHEN lower(DebugData) LIKE 'veri%' THEN 'Verizon' WHEN REGEXP_MATCH(LOWER(DebugData),r'^\d+[^a-zA-Z]*$') THEN c.Network ELSE REGEXP_REPLACE(lower(DebugData),r'[^a-zA-Z]', ' ') END AS ActualCarrier From table
SELECT ..., t.read FROM items i LEFT JOIN items_tracking t ON (t.item_id = i.id)
SELECT COUNT(color) AS cnt, color FROM YourTable GROUP BY color
create table T ( ID char(8) not null, /* other columns */ constraint PK_T PRIMARY KEY (ID) ) create table PhoneNumbers ( ID char(8) not null, PhoneType varchar(12) not null, Number varchar(15) not null, constraint PK_PhoneNumbers PRIMARY KEY (PhoneNumbers,PhoneType), constraint CK_PhoneNumber_Types CHECK (PhoneType in ('Home','Work','Mobile')), constraint FK_PhoneNUmbers_T FOREIGN KEY (ID) references T(ID) )
Select * from table1 Where number in (14,23) and id in( Select id from table1 Where number in (14,23) Group by id Having count(distinct number) = 2)
var connectionStringBuilder = new SqlConnectionStringBuilder(_db.ConnectionString); string databaseName = connectionStringBuilder.InitialCatalog;
update table set animal = case anmial when 'dog' then 'fox' else 'dog' end where animal in ('dog', 'fox')
where priceratio < cast(@input_number as int)
SELECT Article_Name, Tag, COUNT( * ) AS count FROM articletagview GROUP BY Article_Name, Tag HAVING COUNT(*) > 1 ORDER BY count DESC
SELECT A.[DATE], A.[TIME], A.[User], A.[Entry] FROM @Table A CROSS APPLY(SELECT MIN([Date]) FROM @Table WHERE [Entry] LIKE 'Some Job%') CA_min(start_dt) CROSS APPLY(SELECT MAX([Date]) FROM @Table WHERE [Entry] LIKE 'Some Job%') CA_max(end_dt) WHERE [DATE] BETWEEN start_dt AND end_dt
SELECT CAST('July,1999' AS DATETIME)
select ps.id, ps.created_date, pst.last_updated, pst.from_state, pst.to_state, ( select min(last_updated) from mwcrm.process_state_transition subpst where subpst.last_updated > pst.last_updated and subpst.process_state = ps.id) as next_response from <the rest>
// internal GetDecimal // ------------------- // Get Value of type SQL_DECIMAL or SQL_NUMERIC // Due to provider incompatibilities with SQL_DECIMAL or SQL_NUMERIC types we always read the value // as SQL_C_WCHAR and convert it back to the Decimal data type
$this->db->set('a.firstname', 'Pekka'); $this->db->set('a.lastname', 'Kuronen'); $this->db->set('b.companyname', 'Suomi Oy'); $this->db->set('b.companyaddress', 'Mannerheimtie 123, Helsinki Suomi'); $this->db->where('a.id', 1); $this->db->where('a.id = b.id'); $this->db->update('table as a, table2 as b');
update MyTable set IsLatestReading = 0 inner join DELETE on DELETE.AssetID = MyTable and IsLatestReading = 1 update table MyTable set IsLatestReady = 1 inner join INSERTED on INSERTED.MeterReadingID = MyTable.MeterReadingID
UPDATE a FROM table2 a, table1 b SET hour1=b.mou WHERE a.access_method_id=b.access_method_id AND hour='hour1'
EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM ' || t.owner || '.' || t.table_name || ' WHERE '||t.column_name||' like :1' INTO match_count USING '%ALERT%';
UPDATE Users SET AccountId = RIGHT(lastName, 5) + RIGHT(UserId, 6)
SELECT t1.* FROM tableA as t1 LEFT JOIN tableB t2 ON t1.email=t2.email WHERE t2.id IS NULL
select housenumber, street, town, country postcode, count(*) as cnt, min(a.id) as masterid, max(a.id) as childid from #address a group by housenumber, street, town, country postcode having count(*) >= 2;
SELECT CASE WHEN COLUMN_A LIKE '%.%' THEN TO_CHAR(CAST(COLUMN_A AS DECIMAL(10,3))*100, '999.0') || '%' ELSE COLUMN_A END AS COLUMN_F FROM Table_a;
SELECT * FROM A INNER JOIN B ON B.AID = A.AID INNER JOIN C ON C.BID = B.BID INNER JOIN D ON D.AID = A.AID INNER JOIN E ON E.DID = D.DID INNER JOIN F ON F.EID = E.EID WHERE C.Field = F.Field
SELECT SUM([Item quantity]) as totalItems , SUM([Item quantity]) / 160 as totalBoxes , MOD(SUM([Item Quantity), 160) amountInLastBox FROM [Transactions] GROUP BY [Transaction Id]
select created_at, s.label, amount from ( select count(r.Source) as amount, r.source, r.created_at from related_table r group by r.source, r.created_at) a inner join source_table s on a.source = s.source_id where created_at between '2013-12-01' and '2013-12-31' order by amount desc, created_at desc
select emp_number, datepart(year, order_date), datepart(month, order_date), datepart(wk, order_date), sum(grand_total) from order_details group by emp_number, datepart(year, order_date), datepart(month, order_date), datepart(wk, order_date) order by 1, 2, 3, 4
INSERT INTO [JDatabase].[dbo].[MineOp] (Name) SELECT Name FROM [JDatabase].[dbo].[MineOp$];
p = subprocess.Popen('/usr/bin/slonik',stdout=subprocess.PIPE,stdin=subprocess.PIPE) p.stdin.write('<slon commands here>') p.stdin.close()
SELECT * FROM EMPLOYEE_T WHERE EXTRACT (YEAR FROM EmployeeDateHired) = 1999
select k.transactid, k.Hbarcode into Khanger2013 from KHanger_tbl k inner join Transaction_tbl t on t.transactid=k.transactid where t.dtime <='2013-12-30
SELECT CASE WHEN stageCompleted = 1 THEN 'Final' WHEN StartDate < NOW() THEN 'Active' ELSE 'Inactive' END, ID FROM Stage
DELETE FROM table_a WHERE ref_b IS NOT NULL AND NOT EXISTS ( SELECT 1 FROM table_b WHERE table_b.id = table_a.ref_b )
=QUERY(Website!$A16:$D, "select B WHERE (lower(C)=lower('"&$B$1&"') OR lower(B) contains lower('"&$B$1&"'))", -1)
select top 1 l.klantId, bh.rechten, kg.voornaam, kg.achternaam, kg.woonplaats, kg.telefoonnr, og.klantbericht, s.klantstatus from login l inner join klantGegevens kg on l.klantId=kg.klantid inner join bevoegdheden bh on l.rechten=bh.id inner join orderGegevens og on og.loginNr=l.klantid inner join status s on s.id=og.klantstatus where l.klantid=1 order by ordernr desc
from items left join sales on ITEMS.ITEM_CD =sales.ITEM_CD left join purchase on items.ITEM_CD =purchase.ITEM_CD
use DBI; my $db = DBI->connect('dbi:Oracle:tnsname','user','password',{RaiseError=>1}); my $txt = ($db->selectrow_array('select my_clob_col from my table where ...'))[0]; $db->close; open my $fh, '>out.txt' or die $!; print $fh $txt; close $fh;
to_char(sysdate,'Dy Mon dd','NLS_DATE_LANGUAGE = FRENCH') to_char(sysdate,'Dy Mon dd','NLS_DATE_LANGUAGE = AMERICAN')
my @day = (1,1,1,2,2,2,3,3,3); my @product = qw(banana apple pear orange cherry strawberry blueberry yogurt lettuce); my @total = (22,44,67,34,76,44,67,45,86); my $cnt = @day - 1; for my $i (0..$cnt) { $insert_products_total->execute($day[$i], $product[$i], $total[$i]); }
WHERE IFNULL(a.entity_id, 0) = IFNULL(b.entity_id, 0);
UPDATE a SET Status = 'FAIL' FROM TableA a INNER JOIN ( SELECT a.MatchID1 FROM TableA a INNER JOIN b ON a.MatchID1 = b.MatchID1 AND a.MatchID2 <> b.MatchID2 GROUP BY a.MatchID1 ) x ON a.MatchID1 = x.MatchID1
select a.id, a.ans, count(*) as cnt from submitted_answers sa join answers a on concat(', ', sa.ans, ', ') like concat('%, ', a.id, ', %') group by a.id, a.ans order by cnt desc limit 5
UPDATE tablename SET url = SUBSTRING_INDEX(url, "?", 1);
IF NOT EXISTS (SELECT 1 FROM City WHERE City = 'Paris') Insert INTO City (City) VALUES ('Paris') DECLARE @Cid int = (SELECT CityID FROM City WHERE City = 'Paris') INSERT INTO people (lname, fname, city, age, salary) VALUES (' Doe','John', @cid, '25','1000$' )
UPDATE YourTable SET DateField1 = DATEADD(mm, -2, DateField1) WHERE .....
SELECT * FROM ( select serial_Number, system_id, date_time from acp_parts ap UNION ALL select serial_Number, system_id, date_time from acp_parts test_results tr ) ORDER BY serial_Number, date_time
SELECT EXTRACT(HOUR FROM NUMTODSINTERVAL(SUM(HOURS_WORKED), 'HOUR'))||':' ||EXTRACT(MINUTE FROM NUMTODSINTERVAL(SUM(HOURS_WORKED), 'HOUR')) AS TOTAL_HOURS FROM (...
select concat(substring_index(ip, '.', 3), '.', substring_index(ip, '.', -1) -1 ) as NewIP
select malecount+femalecount as sumcount from (select count(if(gender="male",1,null)) as malecount, count(if(gender="female",1,null)) as femalecount from biodata) as query
where REGEXP_SIMILAR (int_cust_ip_addr, '^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$') = 1
INSERT INTO priceRule SELECT user.id, parentPriceRule.product_id, parentPriceRule.price FROM user LEFT JOIN priceRule AS parentPriceRule ON parentPriceRule.user_id = user.belongs_to_id LEFT JOIN priceRule AS myPriceRule ON myPriceRule.user_id = user.id AND myPriceRule.product_id = parentPriceRule.product_id WHERE myPriceRule.id IS NULL
select (case when dept like 'Car%' then 'Car' when dept in ('MC1', ...) then 'MC' when ... end case) dept, sum(...), sum(...) from ... group by (case when dept like 'Car%' then 'Car' when dept in ('MC1', ...) then 'MC' when ... end case)
SELECT movie.celeb, movieCount, albumCount FROM (SELECT celeb, count(1) movieCount FROM star GROUP BY celeb) movie INNER JOIN (SELECT celeb, count(1) albumCount FROM releases GROUP BY celeb) album ON movie.celeb=album.celeb
SELECT (SELECT COUNT(*) FROM categories), (SELECT COUNT(*) FROM serverfuncs), (SELECT COUNT(*) FROM clientfuncs);
CREATE TABLE Rental ( status char(6), date datetime, id int PRIMARY KEY ); alter table Rental add constraint status_valid_value check (status is null or (status in ('open','closed')));
select ur.uno, count(q.eno)*5 from userresponse ur left outer join question q on( ur.eno = q.eno and q.correctanswer = ur.response and q.qno = ur.qno and q.eno = '1') where ur.uno = '1' group by ur.uno
SELECT workername, closedCalls, totalCalls - closedCalss AS openCalls FROM (SELECT workername, COUNT(closeddate) AS closedcalls, COUNT(*) totalCalls FROM mybanksupport GROUP BY workername) t
SELECT * FROM table WHERE EMPLOYEE_ID = ?? AND DTL_ID = ?? UNION SELECT * FROM table WHERE EMPLOYEE_ID = ?? AND DTL_ID = 0 AND NOT EXISTS (SELECT * FROM table WHERE EMPLOYEE_ID = ?? AND DTL_ID = ??)
select projectnum, allw, budjet, substring(projectnum, 1, 3) + '-' + substring(projectnum, 7, 3) + case when len(projectnum) = 10 then '-' + substring(projectnum, len(projectnum) - 1, 1) end as project_code into new_table from old_table
SELECT u.user, COUNT(s.score) as WINS FROM users u INNER JOIN scores s ON u.user_id = s.user_id WHERE s.score = 1 GROUP BY u.user_id (and any other columns you need from the user table) ORDER BY WINS
with NT as ( select ID, Row_Number() over (PARTITION BY RedirectLink ORDER BY ID)-1 as Nr from Table1 ) update T set T.RedirectLink = T.RedirectLink + '_' + cast(NT.Nr as varchar) FROM Table1 T JOIN NT ON (NT.ID = T.ID) where Nr>0
SELECT 'SELECT * ' + char(13) + char(10) + 'FROM LIFE'
GetDataByChinese_Name(@"你好");
select nhi ,sum(case when length='dna' then 1 else 0 end) dna_count from table group by nhi having sum(case when length='dna' then 1 else 0 end)>3;
SELECT SerialNumber, ModelNumber, Date, CustomerName FROM (SELECT pft.*, count(*) over (partition by SerialNumber) as cnt FROM PreQcFormTable pft WHERE Date BETWEEN '2014-02-14' AND '2014-03-05' AND ProductOrigin = 'P' ) t WHERE cnt = 1 AND FailCodes = '';
SELECT U.UnitID as UnitID, U.Name as Unit FROM Product PR inner join Unit U on U.UnitID in (PR.BaseUnitID, PR.SecondaryUnitID, PR.PrimaryUnitID) where Productid = 1;
USE Server SELECT firstName AS EmployeeFirstname , lastName AS EmployeeLastname , title AS EmployeeTitle , id AS EmployeeID , Case When emailAddress Like '%@mycompany.com' Then emailAddress Else Null End AS EmployeeEmailAddress FROM db.Information WHERE ISNUMERIC(id)<> 0 AND empStatus = 'A'
where [column] not like '[cd]%' or [column] is null
select Distinct a.Sequence, b.RELEASED_TITLE from IncludedIn a inner join FinishedTrack b on a.OriginatesFrom = b.IIOriginatesFrom Inner join CdInfo c on a.IIALBUM_ID = c.ALBUM_ID Order By a.Sequence
SELECT e.id, e.name, e.description, (SELECT count(*) FROM day d WHERE d.event_id = e.id) AS days FROM event e;
SELECT ABC.Pays FROM SR1.DB1.SC1.Tbl1 ABC UNION ALL SELECT DEF.Pays FROM SR2.DB1.SC1.Tbl1 DEF
select col1, col2, count(*) from yourTable group by col1, col2 having count(*) > 1
SELECT LoanAccs.name , Department.depAdress , book.author , book.title LEFT OUTER JOIN LoanedBooks ON loanAccs.loanAcc = loanedBooks.loanAcc LEFT OUTER JOIN Department ON loanAccs.depCode = department.DepCode LEFT OUTER JOIN Book ON loanedBooks.ISBN = books.ISBN WHERE DATEDIFF(dd, CURRENT_DATE, loanedbooks.returndate) <= 28 ORDER BY depAdress, depCode, name desc
SELECT H.hotelName, SUM(R.roomPrice) as 'Room Price' FROM hotel H JOIN room R ON H.hotelNo = R.hotelNo GROUP BY H.hotelNo;
UPDATE TableA AS a JOIN TableA b ON a.`Source` = b.`Source` AND a.`Date` > b.`Date` LEFT JOIN TableA c ON a.`Source` = c.`Source` AND a.`Date` > c.`Date` AND c.`Date` > b.`Date` SET a.`new fans` = a.`fans` - b.`fans` WHERE c.`Date` IS NULL
SELECT MINIMUM_SALARY,DEPARTMENT_ID FROM ( SELECT AVG(SALARY) AS AVERAGE_SALARY, MIN(SALARY) AS MINIMUM_SALARY, DEPARTMENT_ID FROM EMPLOYEES GROUP BY DEPARTMENT_ID )EMPLOYEE_AGGREGATED WHERE AVERAGE_SALARY = (SELECT MAX(AVG(SALARY)) FROM EMPLOYEES GROUP BY DEPARTMENT_ID)
DECLARE @SQL AS VARCHAR(MAX); SELECT @SQL = COALESCE(@SQL + ' ', '') + 'SELECT * FROM ' + TableName + CASE WHEN TableName = MAX(TableName) OVER () THEN '' ELSE ' UNION ALL ' END FROM TableNames; EXEC(@SQL);
SELECT COALESCE(a.master,b.master) master, a.ColA, b.ColB FROM a FULL OUTER JOIN B ON a.master = b.master AND (a.ColA = b.ColB or a.ColA is Null or b.ColB is Null) ORDER BY COALESCE(a.master,b.master), COALESCE(a.cola,b.colB)
update tblCustomer set IsHappy = 1 where country = 1 and firstname in ('ian', 'bob', 'sam', 'joe')
SELECT P.PARENTID FROM PARENT P WHERE EXISTS (SELECT 1 FROM CHILD C WHERE C.PARENTID = P.PARENTID AND C.ISACTIVE = 1)
select 1.0 * data / sum(data) over () from tableName
select * from table1 pivot ( max("Value") for "Machine" in ('M1', 'M2') )
SELECT ADD_SECONDS (TO_TIMESTAMP('2014-04-10 09:11:45'), 0.1) FROM DUMMY
select top 10 foo from bar where foo like '%[^A-Z0-9]%'
SELECT * FROM POSITION WHERE NOT EXISTS (SELECT 1 FROM OFFICER WHERE OrganizationID = '2016-02081-0' AND OFFICER.PosID = POSITION.PosID);
select * from ( select foreign_serial_num, msg_id, data_value, timestamp , row_number() over (partition by oreign_serial_num, msg_id order by timestamp desc) as rn from external_data ) ordered where ordered.rn = 1
select productid, sum(IsProcess * Yield) ProcessYield, sum(IsCosmetic * Yield) CosmeticYield from myTable group by productid
create view v_table select * from table where createdat >= now() - interval 1 minute;
SELECT CASE WHEN ( T1.Field1 = T2.Field1 OR (T1.Field1 IS NULL AND T2.Field1 IS NULL) ) THEN NULL ELSE T2.Field1 END AS Field1, CASE WHEN ( T1.Field2 = T2.Field2 OR (T1.Field2 IS NULL AND T2.Field2 IS NULL) ) THEN NULL ELSE T2.Field1 END AS Field2 /** and so on **/ FROM Table1 T1 FULL OUTER JOIN Table2 T2 ON T1.JoinField = T2.JoinField
AND dte_vouch_start <= #myDate# AND dte_vouch_expiry >= #myDate#
Cursor cursor = sqLiteDatabase.query(MYDATABASE_TABLE, columns, null, null, null, null, "CAST(" + KEY_CONTENT + " as integer) desc");
SELECT FK_ID FROM MYTABLE WHERE NUMBER = 0 GROUP BY FK_ID HAVING COUNT(*) >= 2;
select dvdID as 'unique number', count(*) as 'times hired' from MonthlyRental where month(dateHired) = 8 group by dvdId
select t1.id as ID, sum(case when t2.field1 = 1102 then (t2.field3 - t2.field2) end) as A, sum(case when t2.field1 = 1112 then (t2.field3 - t2.field2) end) as B, sum(case when t2.field1 = 1113 then (t2.field3 - t2.field2) end) as C, sum(case when t2.field1 = 1106 then (t2.field3 - t2.field2) end) as D from table1 t1 left join table2 t2 on t1.id = t2.id group by 1;
;with cte as ( select id, type_id, value, sort_order, rn = row_number() over(partition by id order by type_id, sort_order) from yourtable ) select id, type_id, value, sort_order from cte where rn = 1
SELECT * FROM users u WHERE u.user_name LIKE (select '%arthur%' from dual);
select id, speed, min(time), max(time) from (select t.*, (row_number() over (partition by id order by time) - row_number() over (partition by id, speed order by time) ) as grp from table t ) t where speed = 0 group by id, speed, grp;
select col1. col2 from your_table group by col1, col2 having count(*) > 1
replace(columnToSearch,' ',' ')
SELECT id, schoolid, sex, age, diagnose FROM tbl_1 WHERE diagnose = 'Cholera' UNION ALL SELECT id, patientid, sex, age, diagnose FROM tbl_2 WHERE diagnose = 'Cholera' ORDER BY age, sex;
Student(id,name,mail,password) Article(id,art_name,description)
INSERT INTO mytable (mykeycolumn,col1,col2) VALUES ((SELECT MAX(mykeycolumn)+1 FROM mytable),'val1','val2');
UPDATE Reservations r JOIN Train t ON (r.Train = t.TrainID) SET t.Capacity = t.Capacity + r.NoSeats WHERE r.ReservationID = ?;
select created_at, 'a' as tab_name from table_a union all select created_at, 'b' as tab_name from table_b order by created_at
SELECT city, to_char(day,'iw'), max(high), min(low), sum(NVL(count,0)), max(first) keep (dense_rank first order by day) as first, max(last) keep (dense_rank last order by day) as last FROM dailyX WHERE day > to_date(20140101,'YYYYMMDD') GROUP BY city, to_char(day,'iw');
CREATE TABLE User ( UNAME VARCHAR(100), FNAME VARCHAR(100), LNAME VARCHAR(100), CONSTRAINT CHECK_USERS CHECK(INSTR(UNAME, FNAME) = 0 AND INSTR(UNAME, LNAME) = 0) )
SELECT Users.full_name FROM Users INNER JOIN profiles ON profiles.user_id = users.id WHERE profiles.zipcode = '$ZIPCODE' ORDER BY users.full_name ASC
scope :recent_flag, -> { where(product.created_at > 40.days.ago)}
SELECT YEAR(BeginTimePeriodDT), MONTH(BeginTimePeriodDT), DAY(BeginTimePeriodDT), User_ID, SUM(TotalLoginTime) FROM MyTable GROUP BY YEAR(BeginTimePeriodDT), MONTH(BeginTimePeriodDT), DAY(BeginTimePeriodDT), User_ID
select car.Brand, car.model, car.Color, car.AdministrationNo, car.InsuranceNo, car.RegistrationExp, Administration.City from Car left join Administration ON Administration.AdministrationNo = Car.AdministrationNo where car.PlateNo = xxx
Select e.* From employee e Where Not Exists ( Select 1 From employee_roles r Where r.employee_id = e.employee_id And r.role_id = 5330 )
select A, B from ( select A, B, ROW_NUMBER() OVER (PARTITION BY A ORDER BY C_B DESC) as rn from ( select A, COUNT (B) as C_B, B from table group by A, B ) count_table ) order_table where rn = 1;
select cu.cust_id, cu.cust_name, ci.location from cinema ci join booking b on ci.c_id = b.c_id join customer cu on b.cust_id = cu.cust_id where ci.location <> 'Paris'
SELECT SUBSTRING(name,2,2) AS ShortComp FROM table;
SELECT id, date, text FROM (SELECT id, date, text, 1 AS priority FROM timeline UNION ALL SELECT *, 2 AS priority FROM reps) u ORDER BY priority, date DESC
FOR idx IN 1..(LENGTH(w)-NgramLen+1) LOOP -- do what you want here DBMS_OUTPUT.PUT_LINE(SUBSTR(w,idx,NgramLen)); END LOOP;
SELECT games.id, games.title, GROUP_CONCAT(DISTINCT dc.name) AS developers, GROUP_CONCAT(DISTINCT pc.name) AS publishers INNER JOIN game_developer ON game_developer.games_id = games.id INNER JOIN companies AS dc ON dc.id = game_developer.companies_id INNER JOIN game_publisher AS gp ON gp.games_id = games.id INNER JOIN companies AS dp ON dp.id = gp.companies_id GROUP BY games.id ORDER BY games.title LIMIT 50
Select * from table t1 where t1.date between '20160511 00:00:00' and '20160513 23:59:59'; select * from table t1 where cast(t1.date as date) IN ('20160511');
select l1.name from table_1 l1 where not exists (select 1 from table_2 l2 where l2.name = l1.name) and not exists (select 1 from table_3 l3 where l3.name = l1.name);
select id, code from (select id, code, row_number() over ( partition by id order by last_upd_date desc) as rn from tbl where is_current = 'CURRENT' and org = 'E') where rn = 1
SELECT t.idMain, sub_t.minSecondary, t.textValue FROM your_table t JOIN (SELECT idMain, MIN(idSecondary) minSecondary FROM your_table GROUP BY idMain) sub_t ON (sub_t.idMain = t.idMain);
SELECT product_id FROM accounts_products GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT Tag FROM UserSpecifiedTags LEFT OUTER JOIN AllTags ON UserSpecifiedTags.Tag = AllTags.Tag WHERE AllTags.Tag IS NULL
DECLARE @Status nVARCHAR(400), @SQL nvarchar(500) SET @status = '''Closed'''+','+'''OPEN''' set @SQL = ' select * from [MYTABLE] where status in('+@status +')' exec sp_executesql @SQL GO
select * from table1 where Col1 = (select max(Col1) from table1 where Col1 <= 8) and Col2 = (select min(Col2) from table1 where Col2 >= 8)
SELECT ji.issuestatus, cf.ID AS customfield_id, ROUND(SUM(cfv.NUMBERVALUE),0) AS mysum FROM jissue ji CROSS JOIN customfield cf LEFT JOIN customfieldvalue cfv ON cfv.ISSUE=ji.ID AND cfv.customfield=cf.ID WHERE ji.pkey LIKE '%PB-%' AND ji.issuestatus IN (10127,10128,10129,10130,10131) AND cf.ID IN IN (11381, 11382) GROUP BY ji.issuestatus, cf.ID;
Laptop ------------- LaptopId (PK) ... LCD ------------- LCDId (PK) LaptopId (FK, Non-null, Unique constraint)
SELECT * FROM `users` WHERE ( fname LIKE '%Toms%' OR lname LIKE '%Toms%' ) AND ( bDate < "1991-12-03" AND regDate > "2000-12-03" AND lastActivity > "2000-12-03" ) LIMIT 0 , 30
SELECT M.Machine_ID, M.Machine_Name, COUNT(CASE WHEN E.Event_ID='1' THEN 1 ELSE NULL END) AS Event1, COUNT(CASE WHEN E.Event_ID='2' THEN 1 ELSE NULL END) AS Event2 FROM Machines M JOIN Events E ON M.Machine_ID = E.Machine_ID GROUP BY M.Machine_ID, M.Machine_Name
update the_table t1 set value = (select value from the_table t2 where quantity < 0 and t2.id = t1.id) where quantity > 0 and id = 'id1';
select * from dbo.ONE where LastLogin is NULL and datediff(ss,regdate,GetDate())<30
regexp_replace('''val1'',''val2''','(''.*?'')','upper(\1)')
SELECT t.*, (@i := if(@c = column, @i + 1, if(@c := column, 1, 1) ) ) as rank FROM table t CROSS JOIN (SELECT @i := 0, @c := '') params ORDER BY column, time;
select trim(substr(legacy, 1 - instr(reverse(legacy), ' '))) as surname, trim(substr(legacy, 1, length(legacy) - instr(reverse(legacy), ' '))) as restname
select A.IdentifyingNumber as IdentifyingNumberL, A.Included as IncludedL, B.IdentifyingNumber as IdentifyingNumberR, B.Included as IncludedR from ( select ROW_NUMBER() OVER(ORDER BY IdentifyingNumber) AS Row, IdentifyingNumber, Included from @EntityList where Included=0 ) A full outer join ( select ROW_NUMBER() OVER(ORDER BY IdentifyingNumber) AS Row, IdentifyingNumber,Included from @EntityList where Included=1 )B on A.Row=B.Row
define( 'WP_USE_THEMES', false ); require( '/path/to/your/wordpress/root/directory/wp-blog-header.php' ); status_header( 200 );
CREATE TABLE agents ( agent_id int PRIMARY KEY, ... more columns ... ); CREATE TABLE customers ( customer_id int PRIMARY KEY, agent_id int REFERENCES agents, ... more columns ... );
select * from actions join ( select action_id, group_concat(name,'=',value order by name separator ',') as csv // MySQL // string_agg(name || '=' || value, ',' order by name) as csv // PostgreSQL from meta where name in ('planet', 'object') group by action_id ) meta on actions.id = meta.action_id where csv = 'object=building,planet=earth'
SELECT package.id, user_id, package_name, date, package_content.* FROM package INNER JOIN package_content on package.id = package_content.id WHERE whatever ORDER BY whatever
$this->Model->find('all', array('conditions' => array('OR' => array( array('UserEntityVarchar.entity_id' => 1, 'EavAttribute.attribute_code' => 'firstname'), array('UserEntityVarchar.entity_id' => 1, 'EavAttribute.attribute_code' => 'lastname')))));
declare @userId int; set @userId = <your user ID>; SELECT p.ProgramId, (CASE WHEN g.ProgramID IS NULL THEN 0 ELSE 1 END) AS IsSubscribed FROM Programs p LEFT OUTER JOIN Gateway g ON (g.ProgramID = p.ProgramID AND g.UserID = @userId)
SELECT PC.Category_Name, Sum(P.Products_Inventory) FROM Products_Category PC INNER JOIN Products P ON PC.ProductId = P.ProductId GROUP BY PC.Category_Name
contact_id super_id relationship 1 10 Parent 1 20 Grandparent 10 20 Parent
insert into NewTable (Decision) select case Decision when 'N' then 0 when 'Y' then 1 else 2 end from OldTable
echo $this->element('sql_dump');
SELECT * FROM testing WHERE fruits IN ( SELECT fruits FROM testing GROUP BY fruits HAVING COUNT(*)>1 ) ORDER BY id
SELECT c.comment, m.* FROM comments c JOIN ( SELECT t.match_id, max(t.timestampe) as maxtimestamp, count(t.match_id) as comments_no FROM comments t GROUP BY t.match_id ) m on c.match_id = m.match_id and c.timestampe = m.maxtimestamp
SELECT LAST_DAY(DATE_ADD('2010-11-24', INTERVAL 3 YEAR))
WHERE StoreID = @StoreID
select SIMULATION, [USSIC Aviation], [Avemco Aviation], [Property], [Life] from ( select SIMULATION, replace(PRODUCT,'_',' ') Product, value from CM.CorrelationData where Product_Description='UW' ) d pivot ( min(Value) for PRODUCT in ([USSIC Aviation], [Avemco Aviation], [Property], [Life]) ) piv
SELECT sub.RecDate, Sum(sub.AdjYield) AS SumOfAdjYield FROM ( SELECT RecDate, Weight * YTD / (SELECT SUM(Weight) From Records WHERE Class1=t2.Class1 AND Class2 = t2.Class2) as AdjYield From Records as t2 WHERE Class1="fi" AND Class2="ra" ) AS sub GROUP BY sub.RecDate;
select * from master.sys.syslogins WHERE [name] ='loginname'
SELECT i.* , GROUP_CONCAT(tag_name) tags FROM items i JOIN items_tags_xref it ON it.item_id = i.item_id JOIN tags t ON t.tag_id = it.tag_id GROUP BY i.item_id;
SELECT 'Table1' AS TableName, name, lastname FROM Table1 OUTER JOIN Table2 ON Table1.name = Table2.name2 AND Table1.lastname = Table2.lastname WHERE Table2.name2 IS NULL UNION SELECT 'Table2' AS TableName, name2 as name, lastname2 as lastname FROM Table2 OUTER JOIN Table1 ON Table2.name2 = Table1.name AND Table2.lastname2 = Table1.lastname WHERE Table1.name IS NULL
SELECT b.* FROM yourTable b INNER JOIN (SELECT MIN(VEH_ID) as minV, GLASS_ID as g FROM yourTable GROUP BY GLASS_ID) as d ON b.Glass_ID = d.g and b.VEH_ID = d.minV WHERE b.GLASS_ID LIKE '%DB00%'
create dbo.MyProc ( @Param int = 30; ) . . .
update top (1) table with (readpast) set Column1=1 output inserted.* where Column1 = 0
res.render('index', { title: 'Home', rows: rows });
DECLARE @Mileage NVARCHAR(75) = NULL, @IsMiles BIT = 1, @Converted NVARCHAR(75) = NULL select a.* from (SELECT [Id],Odometer,IsMiles, CASE when IsMiles=0 THEN OdometerValue * 0.62137 else Odometer end as ConvertedOdometer FROM [dbo].[Vehicle] where IsMiles = 0)a where a.ConvertedOdometer >=0 AND a.ConvertedOdometer <= @Mileage
SELECT * FROM `lead` WHERE (`added_on` >= '$from' AND `added_on` <= '$to') AND `status` IN ('Hot', 'Paid')
select * from your_table where id > 5 order by id asc limit 5
SELECT a.* FROM addresses a JOIN individuals i ON a.AddressID = i.AddressID GROUP BY a.StreetName, i.FirstName, i.Surname HAVING COUNT(1) > 1
with tree as ( SELECT t.name, t.id, t.parent, LEVEL lvl, connect_by_root(id) root FROM t CONNECT BY PRIOR parent = id START WITH id IN (83, 98, 46, 43, 48) ), ordered_tree as ( select name, id, parent, row_number() over (partition by id order by id) rn from tree order by root, lvl desc ) select name, id, parent from ordered_tree where rn = 1
SELECT COMPANY, PROJECT FROM TABLE GROUP BY COMPANY, PROJECT HAVING MAX(TYPE) = MIN(TYPE) AND MAX(TYPE) = 'DUMMY'
SELECT t.[From] AS FromAddress FROM MyAddresses AS t
DECLARE @TEST TABLE (ID INT, WORDS VARCHAR(10)) INSERT INTO @TEST VALUES (1, 'A�AA') INSERT INTO @TEST VALUES (2, 'BBB') INSERT INTO @TEST VALUES (3, 'CC�C') INSERT INTO @TEST VALUES (4, 'DDD') SELECT * FROM @TEST WHERE WORDS LIKE '%' + NCHAR(UNICODE('�')) + '%' UPDATE @TEST SET WORDS = REPLACE(WORDS, NCHAR(UNICODE('�')), 'X') SELECT * FROM @TEST WHERE WORDS LIKE '%' + NCHAR(UNICODE('�')) + '%' SELECT * FROM @TEST
SELECT k.location, l.description, h.parent, SUM(CASE WHEN k.status = 'ECCAPR' THEN 1 ELSE 0 END) as cnt_ECCAPR, SUM(CASE WHEN k.status = 'FSAPR' THEN 1 ELSE 0 END) as cnt_FSAPR FROM KINDICENT k JOIN LOCATIONS l ON k.location = l.location JOIN LOCHIERARCHY h ON l.location = h.location GROUP BY k.location, l.description, h.parent ORDER BY parent;
select * from dba_objects where data_object_id = dbms_rowid.rowid_object(ROWID_OF_THE_ROW)
SELECT a.id, a.title, b.title, c.title FROM table1 AS a INNER JOIN table2 AS b ON b.id = a.cat1_id INNER JOIN table3 AS c ON c.id = b.cat2_id ORDER BY a.id DESC
ALTER TABLE Table_3 ADD CONSTRAINT my_name CHECK (column_3 in (SELECT Column_1 FROM Table_1))
select col1, col2, col3 = ( select col3 + ',' from TestTable for xml path('') ) from TestTable group by col1, col2
SELECT E1.last_name Boss, E2.last_name Subordinate FROM Employee E1 FULL JOIN Employee E2 ON E1.id = E2.boss_id WHERE (CASE WHEN E1.ID is null THEN 'M' ELSE E1.sex END) = 'M' AND (CASE WHEN E2.ID is null THEN 'M' ELSE E2.sex END) = 'M';
SELECT COUNT(DISTINCT PoliticianId) AS result FROM Votes WHERE UserId = 1010 ;
Update stuff; Delete stuff; Update stuff;
SELECT project_id, Sum(rate * quantity) AS total_price FROM orders WHERE client_id = 1 GROUP BY project_id
where ',' + @PostCode + ',' like '%,' + PCode + ',%'
declare @StartDate date = cast(dateadd(month, -12, GetDate()) as date) declare @EndDate date = cast(GetDate() as date) declare @YMList TABLE (YYYYMM INT) ;with dates as ( SELECT cast(@StartDate as Date) [date] UNION ALL SELECT DATEADD(month,1,t.date) FROM dates t WHERE t.[date] < @EndDate ) insert @YMList (YYYYMM) select YEAR([Date]) * 100 + MONTH([Date]) AS YYYYMM from dates WHERE [Date] < @EndDate OPTION (MAXRECURSION 10000)
SELECT name , create_date, modify_date ,sm.definition FROM sys.procedures sp Inner join sys.sql_modules sm ON sp.object_id = sm.object_id WHERE CONVERT(DATE,sp.modify_date) = CONVERT(DATE, '02/19/2013')
UPDATE S SET Column1 = CASE WHEN CHARINDEX('(', REVERSE(S.Column1)) > 0 THEN REVERSE(RIGHT(REVERSE(S.Column1), LEN(S.Column1) - CHARINDEX('(', REVERSE(S.Column1)))) ELSE S.Column1 END FROM dbo.Source AS S;
select r.id, r.computername, r.event, r.timestamp from raw r inner join ( select max(id) as id from raw group by computerName ) as maxEventPerComputer on r.id = maxEventPerComputer.Id
Select * from Street where Street_Name like REPLACE('%Park Ave 10%',' ', '%')
SELECT COUNT(DISTINCT p.id) AS pictures, COUNT(DISTINCT m.id) AS songs, COUNT(DISTINCT l.id) AS likes, CAST(p.date_of_upload AS DATE) AS Posted FROM pictures p LEFT JOIN music m ON p.id = m.pictures_id LEFT JOIN likes l ON p.id = l.pictures_id WHERE p.date_of_upload > DATE_ADD(CURRENT_DATE(), INTERVAL - 14 DAY)
IF (NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'MyDbo')) BEGIN EXEC ('CREATE SCHEMA [MyDbo] AUTHORIZATION [dbo]') END ALTER SCHEMA MyDbo TRANSFER dbo.your_old_table GO
SELECT p.`product_id`, p.`name`, SUM(o.`quantity`) AS quantity FROM `Order_Detail` AS o INNER JOIN `Product` AS p ON o.`product_id` = p.`product_id` GROUP BY o.`product_id` ORDER BY SUM(o.`quantity`) DESC, p.`name` ASC LIMIT 3
SELECT min(reserved_date) AS start_date , max(reserved_date) AS end_date FROM ( SELECT reserved_date , reserved_date - row_number() OVER (ORDER BY reserved_date)::int AS grp FROM reserved_dates ) sub GROUP BY grp ORDER BY grp;
SELECT post.ID,max(post.Title),max(post.Author),min(post.CreateDate), min(comment.CreateDate), datediff(mi,min(post.CreateDate),min(comment.CreateDate)) as 'first comment in minutes' FROM Posts as post INNER JOIN Comments as comments on post.ID = comment.PostID where comment.Type != 'initial' group by post.id
SELECT @BaseProductId, Id, Row_Number() OVER (ORDER BY ....), @UserId, GETUTCDATE(), @UserID, GETUTCDATE() FROM @ImageIDs;
DECLARE @myTable TABLE([Fruits] VARCHAR(20)) INSERT INTO @myTable VALUES('Apple') INSERT INTO @myTable VALUES('Pear') INSERT INTO @myTable VALUES('Peach') INSERT INTO @myTable VALUES('Plum') INSERT INTO @myTable VALUES('Grape') SELECT * FROM @myTable ORDER BY CASE WHEN([Fruits] = 'Grape') THEN 0 ELSE 1 END, [Fruits]
SELECT StuffYouWant FROM (SELECT * FROM TableA UNION ALL SELECT * FROM TableB) c
SELECT ITEM, STORE, SUM(CASE WHEN REASON = 183 THEN QUANTITY ELSE 0 END)- SUM(CASE WHEN REASON = 182 THEN QUANTITY ELSE 0 END) FROM TRANSACTION GROUP BY ITEM, STORE
SELECT c.custId, c.firstname, SUM(i.unitcost*li.quantity) total_spent FROM customers c JOIN orders o ON c.custId = o.custId JOIN lineitems li ON o.orderId = li.orderId JOIN items i ON li.itemId = i.itemId GROUP BY c.custId, c.firstname HAVING COUNT(DISTINCT o.orderID)>1 LIMIT 0,30
SELECT * FROM undefined_table_name GROUP BY image_type ORDER BY image_type ASC;
select u.ufn, u.uln, u.ue, t.unit, t.address from users u inner join ( select uid, max(start_date) as newest_start_date from transactions group by uid) x on u.uid = x.uid inner join transactions t on t.start_Date = x.newest_start_date and t.uid = u.uid
SELECT name CASE WHEN ' ' || name || ' ' LIKE '% N %' THEN 'Red' WHEN ' ' || name || ' ' LIKE '% B %' THEN 'White' WHEN ' ' || name || ' ' LIKE '% RS %' THEN 'Green' ELSE 'Other' END FROM mytable
... UNIQUE (UserID, IsType) ON CONFLICT REPLACE
SELECT Date, MIN(CASE WHEN Product = 'P1' THEN Sold END) AS "P1", MIN(CASE WHEN Product = 'P2' THEN Sold END) AS "P2", MIN(CASE WHEN Product = 'P3' THEN Sold END) AS "P3" FROM ___insert_table_name_here___ GROUP BY Date ;
UPDATE someTable SET yourField = <SOME-VALUE> WHERE emp_id = emp_id_in AND some_date BETWEEN TO_DATE('9/3/2011', 'MM/DD/RRRR') AND TO_DATE('9/6/2011', 'MM/DD/RRRR')
UPDATE MPOLITICAS SET NOM_POLITICA = REPLACE(NOM_POLITICA, '%' , ' PERCENT');
Select m.Description, st.Description FROM BaseTable bt LEFT JOIN Mapping m where m.toID = bt.id LEFT JOIN BaseTable bt2 where m.FromID = bt2.id, inner join SubTypeTable stt on bt2.subTypeID = stt.id
select permission_name, state_desc, type_desc, U.name, OBJECT_NAME(major_id) from sys.database_permissions P JOIN sys.tables T ON P.major_id = T.object_id JOIN sysusers U ON U.uid = P.grantee_principal_id
select d.datePlaying, p.namePlayer from table2 p cross join (select distinct datePlaying from table1) d left join table1 t on t.idPlayer = p.idPlayer and t.datePlaying = d.datePlaying where t.idPlayer is null
select userid from (select t.*, dateadd(d, -seqnum, t.date) as diff from (select t.*, row_number() over (partition by userid order by date) as seqnum from t where datediff(d, t.date, getdate()) <= 30 and leave = 'Y' ) t ) t group by userid, diff having count(*) > 1
phoneplan_id (P) phone_id (F) package_id (F) point
select user.user_fname ,user.user_lname ,parent.user_fname ,parent.user_lname from users as user join users as parent on parent.user_id = user.user_parent_id where user.user_id = $_GET[id]
select a.* from (select a.*, row_number() over (partition by Customer_nr order by [Months left till service expiry] desc) as seqnum from a ) a where seqnum = 1;
UPDATE employee SET Salary= CASE WHEN Salary < 10000 THEN Salary + 500 CASE WHEN Salary >= 10000 and Salary < 20000 then Salary+600 CASE WHEN Salary >= 20000 and Salary < 30000 then Salary+700 ELSE Salary END
select case when isnull (ff.ff_sales,aa.ff_sales) is null then '---' else cast(isnull (ff.ff_sales,aa.ff_sales) as varchar) end as 'Total Revenue'
SELECT No FROM ( SELECT No, MAX(Field1) AS MaxField1 FROM tableX GROUP BY No, Type ) AS tmp GROUP BY No HAVING MIN(MaxField1) > 0 ;
UPDATE f SET f_status = 0 WHERE ( f_userid1 = @userid1 AND f_userid2 = @userid2 ) OR ( f_userid1 = @userid2 AND f_userid2 = @userid1 );
SELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) AS Id, * FROM ( SELECT DISTINCT Word, STUFF((SELECT ',' + description FROM Your_Table WHERE Word = T.Word FOR XML PATH('')), 1, 1, '') AS description FROM Your_Table T) AS A
declare @city nvarchar(50) = 'mm', @state nvarchar(50) = 'ap' Select * From (Select * from YourTable Where city = @city or state = @state )z order by Case When city = @city and state = @state Then 1 When City = @city then 2 Else 3 end
Imports System Imports System.Data Imports System.Math Imports Microsoft.SqlServer.Dts.Pipeline.Wrapper Imports Microsoft.SqlServer.Dts.Runtime.Wrapper <microsoft.sqlserver.dts.pipeline.ssisscriptcomponententrypointattribute> _ <clscompliant(false)> _ Public Class ScriptMain Inherits UserComponent Public Overrides Sub Input0_ProcessInputRow(ByVal Row As Input0Buffer) ' Create a Globally Unique Identifier with SSIS Row.Guid = System.Guid.NewGuid() End Sub End Class
SELECT Customer, Date, Row_Number() Over (Partition By Customer Order By Date) RN FROM YourTable ORDER BY Customer, Date
DECLARE @output TABLE (id int) Insert into A (fname, lname) OUTPUT inserted.ID INTO @output SELECT fname, lname FROM B select * from @output
WITH ranking AS ( SELECT *, RANK() OVER (ORDER BY score DESC) userRank FROM TableName ) SELECT * FROM ranking WHERE userRank BETWEEN (SELECT userRank - 1 FROM ranking WHERE userID = 'bbb') AND (SELECT userRank + 1 FROM ranking WHERE userID = 'bbb')
select n_rec, my_field from (select n_rec, my_field , count(*) over (partition by my_field) as Counter from myTable where my_field = ?) where Counter = 1
DECLARE @FiscalYear INT = 2014, @fyLowerBound DATE; SET @fyLowerBound = CAST(CAST((@FiscalYear - 1) AS CHAR(4)) + '1001' AS DATE) SELECT @fyLowerBound;
COLUMN number_column FORMAT 999999999999999
select id, p1.value as company, p2.value as budget, sum(p2.value) over (partition by p1.value) as CompanyBudget FROM process p LEFT JOIN Param p1 on p1.ID = p.ID AND p1.NAME = 'Company' LEFT JOIN Param p2 ON p2.ID = p.ID AND p2.NAME = 'Budget' where type = 'Authorization';
case when DailyNet = max(DailyNet) over(partition by TillID) then 'Yes' else 'No'
USE master; GO CREATE MASTER KEY ENCRYPTION BY PASSWORD = '5tr0ngP@ssW0rd' GO OPEN MASTER KEY DECRYPTION BY PASSWORD = '5tr0ngP@ssW0rd' CREATE CERTIFICATE MyDBcert WITH SUBJECT = 'The Cert For MyDB'; GO USE MyDB; GO CREATE DATABASE ENCRYPTION KEY WITH ALGORITHM = AES_256 ENCRYPTION BY SERVER CERTIFICATE MyDBcert; GO
SELECT street_name, store_id, count(*) FROM streets GROUP BY street_name HAVING COUNT(DISTINCT store_id) > 1
SELECT col1, col2 FROM mytable WHERE foo = 'bar' LIMIT 42;
DECLARE @empid int; DECLARE vend_cursor CURSOR FOR select employee_id from employee where employee_team = 1 and employee_role = 1 OPEN vend_cursor FETCH NEXT FROM vend_cursor into @empid; WHILE @@FETCH_STATUS = 0 BEGIN // your query with @mpid FETCH NEXT FROM db_cursor INTO @name END CLOSE vend_cursor DEALLOCATE vend_cursor
alter session set nls_date_format='dd-mon-yyyy hh24:mi' / with cte as ( select trunc(sysdate) as start_date from dual ) select start_date + ((level-1)/(24*60)) as date_w_mins from cte connect by level <= (24*60) /
SELECT category.category_id, category.name, COUNT(item.item_id) as items_in_category, AVG(item.rate) as avg_rate FROM category INNER JOIN item_category ON category.category_id = item_CATEGORY.category_id INNER JOIN item ON item_category.item_id = item.item_id GROUP BY category.category_id, category.name
SELECT 1.Label, COUNT(2.values) FROM Table1 1 LEFT JOIN Table2 2 ON 1.fk = 1.pk and 2.Date BETWEEN 1/1/2010 AND 12/31/2010 GROUP BY 1.Label
SELECT * FROM ( SELECT (SELECT max(level) FROM students "inner" WHERE "inner".level < "outer".level) as Level , sum(Case When grade = 'Pass' Then 1.0 Else 0.0 End) / count(*) as Percentage FROM students "outer" GROUP BY level union all SELECT max(level) as Level , null as Percentage FROM students ) mylevels WHERE level is not null
var emails; var matchingMails = users.find({"email" : {$in : emails}}, {"email":1, "_id":0}); var newEmails = emails.subtract(matchingMails); // set difference db.batchInsert(createUsersFromEmails(newEmails));
declare @str varchar(max); select @str='Hello,world,continent,nation,city'; SELECT @str=''''+REPLACE(@str,',',''',''')+'''' exec('select * from mytable where col_word in('+@str +')')
SELECT 'NetworkKey' AS AuthKey, COUNT(*) AS TotalCount, SUM(CASE WHEN NetworkSK IS NULL THEN 1 ELSE 0 END) AS NUllcount, SUM(CASE WHEN NetworkSK IS NOT NULL THEN 1 ELSE 0 END) AS NotNullcount FROM EDW.Fact.AuthorizationRequest
SELECT d.department_name, d.manager_id, m.name, AVG(e.salary) FROM employees e INNER JOIN departments d ON (e.department_id = d.department_id) LEFT OUTER JOIN employees m ON (m.employee_id = d.manager_id) GROUP BY d.department_name, d.manager_id, m.name;
Select * FROM Items WHERE Extra IS NULL OR Extra = ''
Spinner mySpinner = (Spinner)findViewbyId(R.id.spinner); int position = mySpinner.getSelectedItemPosition(); String Text = yourCityList[position].toString(); // dont know which list is holding the city list... // i didn't use any db in any of my app so cant tell you how can you get list... // leaving it to you... :)
SELECT A.ID, A.Date, COUNT(c.ID) AS Comments FROM Article A LEFT JOIN Comment c ON A.id = c.FK_Article GROUP BY A.ID, A.Date ORDER BY A.ID;
DECLARE @EndDate date; SELECT @EndDate = DATEADD(day, 1, atvcEndDate) FROM tbUserReport WHERE atvcUserId = @UserId;
SELECT table_1.*, table_2.*, table_3.*, table_4.* FROM table_1 INNER JOIN table_2 ON table_1.age_grp = table_2.age_grp AND table_1.gender = table_2.gender INNER JOIN table_3 ON table_2.age_grp = table_3.age_grp AND table_2.gender = table_3.gender INNER JOIN table_4 ON table_3.age_grp = table_4.age_grp AND table_3.gender = table_4.gender
SELECT SUM(CASE WHEN a=1 THEN 1 ELSE 0 END)- SUM(CASE WHEN a=0 THEN 1 ELSE 0 END) AS Result FROM table
INSERT INTO Table1(colm1,colm2,colm3) SELECT clom1,constant,constant FROM TABLE2
lib.my_val { select { pidInList = 100000 max = 1 where = UNIX_TIMESTAMP(effective_date) < UNIX_TIMESTAMP() orderBy = UNIX_TIMESTAMP(effective_date) DESC } table = tx_my_table }
SELECT 'colname1', 'colname2', 'colname3', 1 AS ordering FROM dual UNION SELECT colname1, colname2, colname3, 2 AS ordering FROM yourtable ORDER BY ordering;
declare @t table (id int) insert @t (id) exec myoldsp @parameters
SELECT T1.X, T1.Y, T1.A, T1.B FROM (SELECT X, Y, A, B, ROW_NUMBER() OVER (Partition BY X,Y Order By A,B) AS RowNum FROM T ) T1 WHERE T1.RowNum = 1
DECLARE @T TABLE (Code VARCHAR(5)) INSERT @T VALUES ('EM010'), ('EM100'), ('EM101'), ('EM105'), ('EM106') SELECT T1.Code, ( SELECT MAX(Code) FROM @T t2 WHERE t1.Code > t2.Code ) AS Code2 FROM @T t1
SELECT DISTINCT ON(companies.name, employees.first_name) applicants.id, companies.name, employees.first_name, departments.name, applied_date FROM applicants INNER JOIN departments ON applicants.department_id = departments.id INNER JOIN companies ON departments.university_id = companies.id INNER JOIN employees ON applicants.student_id = employees.id ORDER BY companies.name, employees.first_name, applied_date
SELECT b.id AS next_id FROM tableb b LEFT JOIN tablea a ON (b.id =a.Table_b_fk ) WHERE b.M1=100 AND b.M2 =100 AND b.id >4 ORDER BY b.id ASC LIMIT 1
Command.ExecuteReader(CommandBehavior.KeyInfo)
select user_id, date, case when date - lag(date) over (partition by user_id order by date) > interval '40' minute then 1 else 0 end as diff_flag from the_table order by user_id, date
update tableA tA set tA.value = ( select tB.value from tableB tB inner join tableC tC on tB.value = tC.value where tB.id = tA.id )
SELECT sysdate - date '1900-01-01' days_since_jan_1_1900 FROM dual;
SELECT IFNULL(m.local_mir, o.localParty) as local, IFNULL(m.remote_mir, o.remoteParty) as remote FROM data as o LEFT JOIN mirror_data as m ON (o.localParty = m.local OR o.remoteParty = m.remote) LIMIT 0,10;
SELECT SUBSTR(t.column_one, 1, INSTR(t.column_one, ' ')-1) AS col_one, SUBSTR(t.column_one, INSTR(t.column_one, ' ')+1) AS col_two FROM YOUR_TABLE t
WHERE String_Finder(Log_Table.Message, 1, 2) NOT LIKE 'NO_TYPE'
select T.*, someFunction(T.Value) from T cross join F
select min(category_id) as min_cat, group_concat(distinct category_id order by category_id) as category_list, bookmark_id from your_table group by bookmark_id
Live - Cardinality Estimate Expression="CONVERT_IMPLICIT(nchar(18),[pn].[PartNumber],0)" Test - Cardinality Estimate Expression="CONVERT_IMPLICIT(nvarchar(50),[pn].[PartNumber],0)"
SELECT OrderID FROM OrderDetailTable JOIN OrderedTable USING (ItemID) GROUP BY OrderID HAVING COUNT(DISTINCT ItemID) = (SELECT COUNT(DISTINCT ItemID) FROM OrderedTable)
SELECT DISTINCT T.C.value('local-name(.)[1]', 'varchar(100)') FROM @Employees CROSS APPLY EmployeeDetails.nodes('Employee/EmployeeDetails/*') AS T(C)
SELECT m.Meal, COUNT(*) AS Orders FROM tbl_Meal_Options AS m LEFT JOIN ( SELECT Meal_1 AS Meal FROM tbl_Invitations UNION ALL SELECT Meal_2 AS Meal FROM tbl_Invitations UNION ALL SELECT Meal_3 AS Meal FROM tbl_Invitations UNION ALL SELECT Meal_4 AS Meal FROM tbl_Invitations ) AS i ON m.Meal_Option = i.Meal GROUP BY m.Meal
UPDATE tableName SET coldate = DATE_FORMAT(STR_TO_DATE(colDate,'%m/%d/%y'),'%Y/%m/%d')
SELECT SystemName, Caption, Label, Capacity, FreeSpace, 100*freespace/capacity [% of free space], capacity-freespace [used space] FROM CCS_Win32_Volume ORDER BY SystemName, Caption
SELECT newTable.MyData, newTable.CreationDate FROM (SELECT MyData, CreationDate FROM Table1 UNION SELECT MyData, CreationDate FROM Table2) AS newTable ORDER BY newTable.CreationDate DESC
select sum(QTY),GROUP from table where TO_CHAR(order_date,'DY', 'NLS_DATE_LANGUAGE=AMERICAN') in ('SUN','SAT') group by GROUP;
class Order(models.Model): order_id = models.IntegerField(...) class Step(models.Model): name = models.CharField(max_length=128) orders = models.ManyToManyField(Order, through='StepOrder') class StepOrder(models.Model): order = models.ForeignKey(Order) step = models.ForeignKey(Step) ## date of the order starting this step date_created = models.DateField(...) date_end = models.DateField(...) status = models.CharField(max_length=128, default="Pending")
select min(A),B from table group by B
select tableA.id from tableA left outer join tableB on (tableA.id = tableB.id) where tableB.id is null order by tableA.id desc
SELECT * FROM (SELECT TOP 2 * FROM mytable WHERE someid = @something ORDER BY added DESC) ORDER BY added
SELECT COUNT(*) FROM your_table WHERE 1 IN (n1,n2,n3,n4,n5) AND 26 IN (n1,n2,n3,n4,n5)
SELECT DISTINCT t.item_code, t.item_name FROM mytable t INNER JOIN (SELECT item_code, COUNT(DISTINCT item_name) num FROM mytable GROUP BY item_code) code ON (t.item_code = code.item_code) INNER JOIN (SELECT item_name, COUNT(DISTINCT item_code) num FROM mytable GROUP BY item_name) name ON (t.item_name = name.item_name) WHERE code.num > 1 OR name.num > 1
SELECT DISTINCT a.* FROM table a JOIN table b ON a.colA = b.colA AND a.colB != b.colB
SELECT firstName AS "First Name", lastName AS "Last Name", dependent_name AS "Dependent Name" FROM employee LEFT JOIN dependent ON dependent.essn = employee.ssn;
select name, count(*) over (partition by name) as name_count, amount from table t;
<?php $xml=simplexml_load_file("yourxml.xml"); echo $xml->name . "<br>"; echo $xml->surname . "<br>"; echo $xml->image1 . "<br>"; echo $xml->image2; ?>
CREATE TABLE ranks SELECT DISTINCT rank+0 as id, CONCAT('',rank) as rank FROM soldiers
DECLARE @array TABLE( tag varchar(50) ) INSERT INTO @array VALUES('test') INSERT INTO @array VALUES('braindead') select * from bookmark_model_bookmark where id in( select bookmark_model_bookmark_id FROM bookmark_tag x INNER JOIN bookmark_model_tag t ON t.id = x.bookmark_model_tag_id where t.name in (select tag from @array) group by bookmark_model_bookmark_id having bookmark_model_bookmark_id >= (select count(0) from @array))
SELECT CalendarEventID, dbo.GetLatestDate( FromDate, ToDate, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday, EveryNWeeks, EndAfterNOccurences) AS LatestDate FROM CalendarEvents ORDER BY 2
SELECT a.ELM_NUM,a.COMBO, CASE WHEN abs(a.N_1) > abs(a.N_2) THEN a.N_1 ELSE a.N_2 END as maxN from ntm a order by a.ELM_NUM
INSERT INTO student(name, age) SELECT name, age FROM toMerge.student;
;with cte as ( select case when stat = 'N' and duedate > GETDATE() then 'NG' when stat = 'N' and duedate < GETDATE() then 'NL' else stat end As S, duedate from activity) select S,COUNT(*) from CTE group by (S)
WITH RECURSIVE children AS ( -- select leaf nodes SELECT id, value, parent FROM t WHERE value IS NOT NULL UNION ALL -- propagate values of leaf nodes up, adding rows SELECT t.id, children.value, t.parent FROM children JOIN t ON children.parent = t.id ) SELECT id, sum(value) FROM children GROUP BY id -- sum up appropriate rows ORDER BY id;
Select 'KEYWORD' as KEYWORD, 'PART1_D1' as PART1_D1, 'PART1_D2' as PART1_D2, 'PART1_D3' as PART1_D3, 'PART1_D4' as PART1_D4, 'PART2_D5' as PART2_D5, UNION Select KEYWORD, cast(PART1_D1 as varchar(50), cast(PART1_D2 as varchar(50), cast(PART1_D3 as varchar(50), cast(PART1_D4 as varchar(50), cast(PART2_D5 as varchar(50) From sample
Select column1, column2 from MyTable GROUP BY column1, column2
SELECT T1.SubmissionStatus FROM Table1 T1 JOIN Table0 T0 ON T1.primaryKey = T0.foreignKey UNION SELECT T2.SubmissionStatus FROM Table1 T2 JOIN Table0 T0 ON T2.primaryKey = T0.foreignKey UNION SELECT T3.SubmissionStatus FROM Table1 T3 JOIN Table0 T0 ON T3.primaryKey = T0.foreignKey
SELECT TOP (100) PERCENT me.Path, MAX(pd.SampleValue) AS Sample, DATEADD(MI, -(DATEPART(MI, pd.DateTime) % 5), pd.DateTime) AS PeriodStart FROM ... WHERE ... GROUP BY me.Path, DATEADD(MI, -(DATEPART(MI, pd.DateTime) % 5), pd.DateTime) ORDER BY me.Path
select productname, max(test1) from ( SELECT *, row_number() over (order by test2 asc) - row_number() over (partition by productname order by test2 asc) as GRP from @MyTable ) X group by productname, GRP
DECLARE @listStr VARCHAR(MAX) SELECT @listStr = COALESCE(@listStr+',' ,'') + Isnull(CAST (CONVERT(DATE,SP.StartDateTime,103) as Varchar),'') FROM testtable AS SP SELECT @listStr GO
select startid = min(id) from customer; select maxid = max(id) from customer; i = startid while i <= maxid begin with myCTE as (select ... from customer where id >= i and id < i + 1000) insert into xxx (....) select .... from myCustomerChunk join productcustomers pc on .... join product p on .... i = i+1000 end
Lcid SportID Description 3081 1 Soccer 3082 1 Futbol
select login_id , sum(case when status_name='open' then count end) open , sum(case when status_name='closed' then count end) closed , sum(case when status_name='inprogress' then count end) inprogress , sum(case when status_name='pending' then count end) pending from table group by login_id
SELECT origin, destination FROM mytable GROUP BY origin, destination HAVING COUNT(*) > 1
DECLARE @sqlstmt VARCHAR(MAX) SET @sqlstmt = 'SELECT vin FROM cars WHERE 1=1' IF @interior<>'No Preference' SET @sqlstmt = @sqlstmt + ' AND interior = '''+@interior+''' IF @color<>'No Preference' SET @sqlstmt = @sqlstmt + ' AND color = '''+@color+''' ... exec(@sqlstmt)
If rrow = 1 then DoCmd.RunSQL "SELECT [Oracle JE].* INTO Unmatched FROM [Oracle JE] WHERE [Oracle JE].[Account Code]=" & start Else DoCmd.RunSQL "INSERT INTO Unmatched SELECT [Oracle JE].* FROM [Oracle JE] WHERE [Oracle JE].[Account Code]=" & start End
select * from table where YEAR(date) = YEAR(CURDATE())
HAVING ISNULL(max(m.Init_Amnt) - sum(d.Amnt-Appl), 1) > 0
select (5 - 3)
stores id code name address ... items id code name description barcode retail_price ... stocks store_id item_id stock_count inventories id inventory_date store_id inventory_items inventory_id item_id original_stock_count corrected_stock_count
SELECT "DATE", BUS, VALUE FROM {your_table} WHERE "DATE" >= trunc(sysdate) and "DATE" < trunc(sysdate+1)
SELECT Reference.quote_date As Date, Customer.name As Name , Customer.surname AS Surname, Customer.postcode, Customer.telephone, Reference.ref_ID AS PolicyRefNo, Reference.agent_ID, (reference.call_id IN(1,2,3)) as Tel, (reference.call_id IN(4,5,6)) as F2F FROM Customer INNER JOIN Reference ON Customer.customer_ID = Reference.customer_ID;
SELECT btst.Ordnungsbegriff AS BBNR, COUNT(vp.KVNR) FROM ... GROUP BY vz."VALIDTO", vz."BETRIEBSNUMMER", btst.Ordnungsbegriff
select ou.* from (select u.FullName, u.Id, o.FullAddress, Price, Payment, o.Created, StartDelivery as Delivering, [Status], o.Id, COUNT(*) OVER (PARTITION BY o.CustomerId) AS CountOfOrders from orders o full outer join users u on o.CustomerId = u.Id ) ou where [Status] = 2
wampmanager -> Apache -> Version -> click on the version number
SELECT product_id, COUNT(product_id) AS cnt FROM warehouse GROUP BY product_id HAVING COUNT(product_id) MOD 2 = 1;
IF @CORP IN ('something', 'somethingElse') BEGIN -- your code END
ALTER MyTable NOCHECK CONSTRAINT FK_MyTable_AnotherTable
ALTER PROCEDURE [dbo].[SP_GET_QUEUESINFO_BY_DATE] AS BEGIN declare @date2 datetime set @date2= '2012-09-21' select COUNT(QueueID) , sum(case when QueueNumIn != 0 THEN 1 else 0 end) as 'InQueue', sum(case when QueueNumOut != 0 THEN 1 else 0 end) as 'OutQueue' from Queue where CAST(QueueDate as DATE) >= @date2 -- QueueDate = @date2 END
Select t.Name TownName, c.Name, d.Id From Towns t Join Companies c ON t.Id = c.Town Join Documents d ON c.Id = d.Company Order By c.Name
select array_agg(attr => val) from t1;
select id, lname, fname from table1 t1 where t1.id not exists in (select id from table2)
UPDATE second_table AS s, pay_periods AS pp SET s.[Pay Period] = [pp].[Pay Period] WHERE s.Date Between [pp].[Start Date] And [pp].[End Date];
DECLARE @Text AS VARCHAR(100) DECLARE @Cmd AS VARCHAR(100) SET @Text = 'Hello world^| ' SET @Cmd ='echo ' + @Text + ' > C:\AppTextFile.txt' EXECUTE Master.dbo.xp_CmdShell @Cmd
SELECT * FROM (SELECT Id, Lat, Lng, (6367 * acos(cos(radians(45.444)) * cos(radians(Lat)) * cos(radians(Lng) - radians(158.554)) + sin(radians(4545)) * sin(radians(Lat)))) AS distance FROM Posts) p WHERE p.distance < 15 ORDER BY p.distance
SELECT x.* FROM x WHERE (x.id = @NameFilter OR @NameFilter is null) AND (x.typeId = @typeFilter OR -1 = @typeFilter) AND (x.date = @date OR @date is null) AND (x.someStingType = @someStringType Or '' = @someStringType)
/* All deployments get the reference data */ :r .\ReferenceData.PostDeployment.sql IF ('$(SampleSet)' = 'ClientA') BEGIN :r .\SampleData.ClientA.PostDeployment.sql END ELSE IF ('$(SampleSet)' = 'ClientB') BEGIN :r .\SampleData.ClientB.PostDeployment.sql END
select * from RBOTRANSACTIONSALESTRANS main where main.DATAAREAID = 'DAT' and exists ( select 1 from RBOTRANSACTIONSALESTRANS sub where sub.QTY < 0 and sub.DATAAREAID = main.DATAAREAID and sub.STORE = main.STORE and sub.TERMINALID = main.TERMINALID and sub.TRANSACTIONID = main.TRANSACTIONID ) order by main.TRANSACTIONID
select Department1 from tab union select Department2 from tab
select FOO from BAZ limit 50 union select FOO from BAZ limit 50, 1 union select FOO from BAZ limit 99, 1 union select FOO from BAZ limit 100, 1 union select FOO from BAZ limit 149, 1
SELECT a.id,a.first_name,a.last_name,b.value as user_type,b.value AS user_type, b2.value as user_status FROM user AS a JOIN reference AS b ON 'user'=b.table AND 'type'=b.type AND a.type = b.value JOIN reference AS b2 ON 'user'=b2.table AND 'status'=b2.type AND a.status = b2.value
SELECT u.firstName, u.lastName, u.fbId, MIN(q.dateUsed) as dateUsed, u.codesLeft FROM Users u INNER JOIN Code q ON u.Id = q.userId GROUP BY u.firstName, u.lastName, u.fbId, u.codesLeft
declare @query varchar(max) = 'select * into #t from table' EXEC(@query) select * FROM #t
SELECT H.transaction_no, H.customer_id, H.operator_id, H.purchase_date FROM Sales_Transactions_Header H INNER JOIN (SELECT customer_id, MIN(purchase_date) As first_occurence FROM Sales_Transactions_Header GROUP BY customer_id) X ON H.customer_id = X.customer_id AND H.purchase_date = X.first_occurence
SELECT f.fruit, SUM(f.cnt) AS cnt FROM ( SELECT d.Fruit1 AS fruit, COUNT(1) AS cnt FROM Fruits d GROUP BY d.Fruit1 UNION ALL SELECT e.Fruit2 AS fruit, COUNT(1) AS cnt FROM Fruits e GROUP BY e.Fruit2 ) f GROUP BY f.fruit ORDER BY f.fruit
SELECT number, COUNT(CASE WHEN answer = 'yes' THEN 1 END) AS total_yes, COUNT(CASE WHEN answer = 'no' THEN 1 END) AS total_no FROM test_table GROUP BY number
select guid, sum(datediff(ms, t.[date], t.nextInactive)) as duration_ms from (select t.*, (select min([date]) from t t2 where t2.guid = t.guid and t2.[date] > t.[date] and t2.status = 'Inactive' ) as nextInactive from t where t.status = 'Active' ) t group by guid
SELECT t1.activity_status_id, Count(*), t2.description, t2.color FROM dbo.Activity t1 INNER JOIN dbo.Activity_Status t2 ON t1.activity_status_id = t2.id GROUP BY t1.activity_status_id ,t2.description,t2.color
where 'Kitchen Towel w/ Red-Brown Stripes' like productname || '%'
select count(*), round(mynum/3.0) foo from mytable group by foo;
SELECT A.x FROM A LEFT OUTER JOIN B ON A.x = B.x WHERE B.x IS NULL
select t.* from table t left outer join table sub on t.subid = sub.id where 'Tom' = t.name or 'Tom' = sub.name;
SELECT ROUND((SUM((to_number((case when g.grade='DRP' then '5.00' else g.grade end), '9D99') * s.subjunits)))/(SUM(s.subjunits)), 2)
-- Survey/Quiz "has many Questions" Survey (SurveyStartedAt, SurveyExpiresAt) -- Question "belongs to a Survey" Question (FK Survey, QuestionPrompt, QuestionRules..) -- Each Participant can "respond to a Survey" Response (FK Participant, FK Survey, ResponseTime) -- And each Answer, of which there are many per Response, -- "contains the answer for a single Question" Answer (FK Response, FK Question, Value)
update tbl t join (select post_id, meta_value from tbl where meta_value is not null) x on t.post_id = x.post_id set t.meta_value = replace(x.meta_value, '_ico', '_img') where t.meta_key = '_wpbdp[fields][10]'
Insert into Itemlookup (ItemNumber, Cases, [TimeStamp]) Select a.ItemNumber, b.CaseCount, a.TimeStamp from ItemsProduced a inner join MasterItemList b on a.ItemNumber = b.ItemNumber left join Itemlookup i on i.ItemNumber = a.ItemNumber and i.Cases= b.CaseCount and i.TimeStamp = a.TimeStamp where i.ItemNumber is null
INSERT INTO [ITD640_B].[dbo].[employee] ([employee_no] ,[employee_fname] ,[employee_lname] ,[store_no]) SELECT 123456 ,'YourFirstName' ,'YourLastName' ,[store_no] FROM store WHERE store_name = 'Rocky Mountain Produce';
select profile,sum(to_number(limit))from dba_profiles where ascii(substr(limit,1,1))between 48 and 57 and resource_name in ('PASSWORD_GRACE_TIME','PASSWORD_LIFE_TIME') group by profile;
1. Make TableA.CId and TableB.CId both FKs to Table C.ID. 2. Add a unique index in TableA on columns AId and CId. 3. Add a unique index in TableB on columns BId and CId. 4. Add a CId column to TableM. 5. Then Add two FKs in Table M, a. One using columns (AId, CId) pointing to Unique composite Index in Table A, and b. the other using columns (BId, CId) pointing to Unique composite Index in Table B.
select t1.a, t1.b into t4 from t1 join t2 on t1.a = t2.a and t1.c = t2.c join t3 on t1.a = t3.a and t1.c = t3.c where t3.e / t2.d < x
SELECT STR_TO_DATE('201038 Sunday', '%X%V %W');
SELECT [Quarter], [Month], SUM([Group]) as [Group], SUM([Member]) as Member, SUM([Value]) as [Value] FROM dbo.YourTableName GROUP BY [Quarter], [Month]
NSString *pathLocal; // Path to your SQlite DB file NSFileManager *fileManager = [NSFileManager defaultManager]; NSDictionary *localAttr = [fileManager attributesOfItemAtPath:pathLocal error:&error]; NSDate *localDate = [localAttr objectForKey:NSFileModificationDate]; // localDate here has the info you're looking for
public static Bitmap getBitmapFromBytes(byte[] bytes) { Bitmap bmp; bmp = BitmapFactory.decodeByteArray(bytes, 0, bytes.length); Bitmap mutableBitmap = bmp.copy(Bitmap.Config.ARGB_8888, true); return mutableBitmap; }
IF @date = CAST(getdate() as date) BEGIN SELECT * FROM server1.db1..MyTable ELSE SELECT * FROM server2.db2..MyTable_history WHERE date = @date END
select * from content_definition where content_id = 'hhhh233';
SELECT id AS newid FROM test WHERE newid=1; -- must use "id" in WHERE clause
TRANSFORM Sum(tbl_timesheet_hours.[work_order_hours]) AS SumOfwork_order_hours SELECT tbl_timesheet_hours.[work_order_no], Sum(tbl_timesheet_hours.[work_order_hours]) AS [Total Of work_order_hours] FROM tbl_timesheet_hours GROUP BY tbl_timesheet_hours.[work_order_no] ORDER BY Format([work_order_date],'ddd') PIVOT Format([work_order_date],'ddd') In ("Mon","Tue","Wed","Thu","Fri","Sat","Sun");
Users ----- UserID (PK) ... (Other user details) Product ------- ProductID (PK) ... (Other product details) Order ----- OrderID (PK) UserID (FK) OrderDate OrderLine --------- OrderID (PK) ProductID (PK) OrderQuantity
SELECT ... From ... WHERE date > DATEADD(year,-1,GETDATE())
SELECT c.*, m.first_name, m.last_name FROM charges c LEFT JOIN member m ON c.member_id=m.member_id INNER JOIN members_groups mg ON mg.group_id=1 AND mg.member_id = m.member_id
alter table tbl1 with check add constraint FK_tbl1_tbl2 foreign key (fkID1, fkID2) references tbl2 (pkID1, pkID2)
SELECT State, City, Device, Stat_A, Stat_B, null FROM A UNION SELECT State, City, Device, null, null, Stat_C FROM B;
select i from generate_series(current_timestamp - interval '24' hour, current_timestamp, interval '1' hour) i
SELECT t.* FROM dbo.tbh_table t CROSS APPLY dbo.fn_split(TopicID) split WHERE split.value = 19
SELECT T_RATE_ID, T_INPUTDATE, T_INPUTTIME, T_SINCEDATE FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY T_SINCEDATE ORDER BY T_INPUTDATE DESC, T_INPUTTIME DESC) rn FROM YourTable WHERE T_SINCEDATE<= sysdate) T WHERE rn = 1
select (select max(count1) from ( select count1 union all select count2 union all select count3 union all select count4 union all select count5) X) as MaxCount from tbl
update t1 set grp = t2.grp from yourtable t1 join yourtable t2 on t1.code = t2.code and t2.grp is not null where t1.grp is null
select * from ( select *, rnum = ROW_NUMBER() over ( partition by #tmp.foreignKeyId order by #tmp.startDate desc) from #tmp ) t where t.rnum = 1
SELECT t.col, s.Item FROM dbo.tablename AS t CROSS APPLY dbo.function_name(t.value) AS s;
SELECT OrderNumber, sum(SellPrice * Quantity) AS TotalCost FROM OrderDetail INNER JOIN Product ON Product.ProductID = OrderDetail.ProductID group by OrderNumber
SELECT EAM_Model, new_Model, count(*) FROM rollout_systems WHERE scope_ID = '.$id.' GROUP BY EAM_Model, new_Model
var results = from r in MyXmlFieldTable let date = context.XQueryDateTime( r.XmlValues, "MyContainer/MyDateTime" ) where date < DateTime.Now.AddDays( -5 ) select new { Date = date, FirstName = context.XQueryString( r.XmlValues, "MyContainer/FirstName" ), LastName = context.XQueryString( r.XmlValues, "MyContainer/LastName" ) };
select userid, checktime, checktype, verifycode from ( select userid, checktime, checktype, verifycode, case when checktype = lag(checktype) over (order by checktime) then 1 else 0 end as is_repeated from mytable ) marked where is_repeated = 0 order by checktime;
select schema1.Usage('element', 20140101, 20140714), schema1.TOTAL_Usage('element', 20140101, 20140714) schema1.CAPABILITY_Usage('element', 20140101, 20140714)/schema1.TOTAL_Usage('element', 20140101, 20140714) AS X(a) from sysibm.sysdummy1;
SELECT id, DatabaseYouUsed.dbo.functionYouWrote(id) FROM DatabaseYouUsed.dbo.TableWithIDs
select top 1 cola, colb from table1 order by cola, colb
SELECT * FROM ( SELECT CASE WHEN pet NOT IN ('dog','cat') THEN 'others' ELSE pet END pet, age FROM Pet.Info) AS B PIVOT (AVG(age) FOR pet IN ([dog],[cat],[others])) AS C
SELECT FISCAL_PERIOD, FISCAL_year, amount FROM MAXTABLE where fiscal_period = 5 union all SELECT FISCAL_PERIOD, FISCAL_year, amount FROM MAXTABLE where fiscal_period = (select max(fiscal_period) from MAXTABLE) and not exists (select * from MAXTABLE where fiscal_period = 5)
$sql = "SELECT p.id, m.menu_name, m.image_id, i.file_url FROM product p INNER JOIN menu m ON m.id = p.menu_id INNER JOIN icon i ON i.id = m.image_id WHERE ... ";
select t1.EmpID, t1.TimeIn, t1.TimeOut, datediff(minute, max(t2.TimeOut), t1.TimeIn) as minutes from timesheet t1 left join timesheet t2 on t1.EmpID = t2.EmpID and t2.TimeOut < t1.TimeIn group by t1.EmpID, t1.TimeIn, t1.TimeOut
$price=filter_var($_POST['price'], FILTER_SANITIZE_STRING); //USER SUBMITTED sanitization stage 1. $query=$dbh->prepare("SELECT * FROM $table WHERE price=?;"); $query->execute(array($price));
USE [Target DB]; DECLARE @view VARCHAR(MAX) DECLARE curs CURSOR FOR SELECT VIEW_DEFINITION FROM [Source DB].INFORMATION_SCHEMA.VIEWS OPEN curs FETCH NEXT FROM curs INTO @view WHILE @@FETCH_STATUS = 0 BEGIN EXEC(@view) FETCH NEXT FROM curs INTO @view END CLOSE curs DEALLOCATE curs
CREATE TABLE tblMembers ( Member_ID int identity(1, 1) not null primary key Name varchar(255) ); CREATE TABLE tblHorses ( Horse_ID int identity(1, 1) not nullprimary key Name varchar(255), Age int, Member_ID int references tblMembers(member_id) );
update t set num = num-1 where num > <val deleted>
CREATE SCHEMA cdbo AUTHORIZATION dbo;
select PM.PM_Eng_Name, sum(isnull(PMOutput.Quantity, 0)) as TotalOut from PM left outer join PMOutput on PM.PM_code = PMOutput.PM_code and PMOutput.Output_Date BETWEEN ‘2013-01-01’ AND ‘2013-08-25’ group by PM.PM_Eng_Name
(select a as yourField from d1) union (select b from d2) union (select c from d3) order by yourField desc limit 5
select ol1.orderId, ol1.orderLineId, count(*) as lineNumber from orderLine ol1 inner join orderLine ol2 on ol1.orderId = ol2.orderId and ol1.orderLineId >= ol2.orderLineId group by ol1.orderId, ol1.orderLineId
CREATE OR REPLACE FUNCTION func2(IDs integer[]) RETURNS SETOF y AS $BODY$ DECLARE a_id int; BEGIN FOREACH a_id IN ARRAY $1 LOOP RETURN QUERY SELECT * FROM func1(a_id); END LOOP; RETURN; END; $BODY$ LANGUAGE plpgsql STABLE STRICT;
SELECT @i := @i + 1 AS i, COUNT(*), ... FROM affiliates_earnings JOIN (SELECT @i := 0) dummy WHERE ... GROUP BY ...;
CREATE PROCEDURE [dbo].[proc_search_patient_ByID] ( @PatID_pk int , @Cntid smallint, @FamID int ) AS SET NOCOUNT ON IF @Cntid IS NULL BEGIN --Use select stmt of a table END ELSE --Use select stmt of another table BEGIN END
SELECT rnk, name ,gender FROM ( SELECT STRAIGHT_JOIN id, name, @y:=IF(@gender=gender,@y+1,1) AS rnk, @gender:=gender AS gender FROM (SELECT @gender:=NULL) AS x JOIN test ORDER BY gender, name DESC ) AS t ORDER BY rnk ASC, gender DESC;
SELECT stuff FROM foo INNER JOIN bar ON (join predicates here) WHERE (static filters here)
var query = product.OrderByDescending(m => m.ProductScore) .ThenBy(m => m.ProductId);
select id from your_table group by id having sum(rank=1 and `case`=0) > 0 and sum(rank=2 and `case`=1) > 0 and sum(rank=3 and `case`=0) > 0
SELECT ... FROM Table JOIN ( SELECT x.value(N'.',N'uniqueidentifier') as guid FROM @values.nodes(N'/guids/guid') t(x)) as guids ON Table.guid = guids.guid;
select school_ucn,count(DISTINCT otc_order_number) from storiacloud.schl_storia_revenue_fact group by school_ucn having count(distinct otc_order_number)>1
select projectid, group_concat(case when roleid = 1 then userid end) junior, group_concat(case when roleid = 2 then userid end) senior, group_concat(case when roleid = 3 then userid end) TL from table1 group by projectid
select 'answer1' as questions, sum(case when answer1 = 1 then 1 end) as total_1, sum(case when answer1 = 0 then 1 end) as total_0, sum(case when answer1 = NA then 1 end) as total_NA from tablename UNION ALL select 'answer2' as questions, sum(case when answer2 = 1 then 1 end) as total_1, sum(case when answer2 = 0 then 1 end) as total_0, sum(case when answer2 = NA then 1 end) as total_NA from tablename etc...
create table football_players ( id VARCHAR(36) PRIMARY KEY, name VARCHAR(20), surname VARCHAR(20), constraint chk_name_surname check (name is not null or surname is not null) );
Insert into tRestituiri (DataRestituire,CodCD , CodCV,CodAB) SELECT DataScadenta,CodCD , CodCV,CodAB FROM tImprumuturi WHERE DataScadenta>GETDATE()-60
select * from supplier s cross join Customer c
CREATE SCHEMA [billing] CREATE PROCEDURE billing.sp_IssueInvoice ( /*parameters*/ ) AS BEGIN -- Your code END CREATE PROCEDURE billing.sp_CancelInvoice ( /*parameters*/ ) AS BEGIN -- Your code END CREATE SCHEMA [ordering] CREATE PROCEDURE ordering.sp_SubmitOrder ( /*parameters*/ ) AS BEGIN -- Your code END CREATE PROCEDURE ordering.sp_UpdateOrder ( /*parameters*/ ) AS BEGIN -- Your code END
select vehiclename, sum(case when oil = 'oil1' then volume end) as oil_1, sum(case when oil = 'oil2' then volume end) as oil_2, sum(case when oil = 'oil3' then volume end) as oil_3 from the_table group by vehiclename order by vehiclename;
echo "UPDATE artwork SET location='storage' WHERE name='Mona Lisa' | psql -u some_user -d some_database
SELECT Shiftindex, ID, Time, x00 AS xGPS, y00 AS yGPS FROM GPS UNION SELECT Shiftindex, ID, Time, x01 AS xGPS, y00 AS yGPS FROM GPS
SELECT h.Hotelname, Sum(r.FreeRooms) as FreeRooms FROM hotel h INNER JOIN hotel_room r ON r.H_ID = h.H_ID GROUP BY h.Hotelname
select Items.itemId, count(MyTbl.itemId) as count from Items left join MyTbl on (MyTbl.ItemID = Items.ItemID) group by Items.itemId order by Items.itemId
WHERE field <> 'deactivated' OR field IS NULL
SET @dt = 'Mon Jun 13 2011 11:30:00 GMT-0400 (EDT)'; SELECT CONVERT_TZ( -- Parse all, but timezone STR_TO_DATE(@dt, '%a %b %e %Y %H:%i:%s'), -- Parse timezone to '+NN:NN' format INSERT(SUBSTRING_INDEX(SUBSTRING_INDEX(@dt, 'GMT', -1), ' ', 1), 4, 0, ':'), -- Our unified timezone '+00:00' ); -- Result: 2011-06-13 15:30:00
Select location,Cashier,[Time], stuff((SELECT distinct ', ' + cast(ref as varchar(500)) FROM t t2 where t2.location = t1.location FOR XML PATH('')),1,1,'') Grom t t1 Group By location, Cashier,[Time]
INSERT INTO UserPermission (UserPermissionID, UserID, PermissionID, RegionID) SELECT NEWID(), UserID, @PermID, NULL FROM UserRole r WHERE RoleID = '<specific guid>' AND NOT EXISTS (SELECT * FROM UserPermission WHERE UserID = r.UserID AND @PERMID = PermissionID);
select cast(DATEADD(hour, 13, 0) as time)
select 1.page_name, count(*) as ExitPageCount from WebLog l inner join ( select http_session_id, max(page_hit_timestamp) from WebLog group by session ) lm on l.http_session_id = lm.http_session_id and l.page_hit_timestamp = lm.page_hit_timestamp group by 1.page_name
SELECT Verticals.Vertical_Name as V_name, COUNT(*) AS [Count] FROM Impressions Inner Join Verticals ON Impressions.Campaign_id = Verticals.Campaign_id GROUP BY Verticals.Vertical_Name
SELECT COUNT(*) FROM AllScoringPlays WHERE GameId = 6124 AND SeasonId = 1 AND (P_AssistId = 21 OR S_AssistId = 21);
SELECT *, (select count (*) from Applications as A1 where A.ID = A1.AdID ) as Applicants, (select count(*) from Referrals as R where A.ID = R.AdID ) as Referrals, (select count(*) from Subscribers as S where A.ID = S.AdID ) as Subscribers, (select count(*) from Views as V where A.ID = V.AdID ) as Views FROM Ads as A
SELECT ID, MAX(CASE WHEN Position = 1 THEN Email ELSE '' END) AS primary_email, MAX(CASE WHEN Position = 2 THEN Email ELSE '' END) AS Secondary_email FROM YourTable GROUP BY ID;
WITH C AS ( SELECT MAX(IMAGE_ORD) M FROM TBL_IMAGE ) SELECT TBL_IMAGE.IMAGE_PATH, TBL_IMAGE.IMAGE_ID, TBL_IMAGE.DOC_NID FROM TBL_IMAGE JOIN C ON IMAGE_ORD = C.M WHERE ROWNUM < 2
SELECT * FROM table ORDER BY id = 5 DESC, id ASC
SELECT node_id, group_concat(name SEPARATOR ' ') FROM taggings INNER JOIN tags ON taggings.tag_id=tags.id INNER JOIN (SELECT node.id AS node_id, parent.id AS parent_id FROM categories AS node, categories AS parent WHERE node.lft BETWEEN parent.lft AND parent.rgt) subcategories ON subcategories.parent_id=taggings.taggable_id GROUP BY (node_id);
select t1.run, t1.code, t2.code from tablename t1, tablename t2 where t1.run = t2.run and t1.code = 1 and t2.code = 8;
SELECT photos.id,max(otherColumn) FROM \"photos\" INNER JOIN \"taggings\" ON \"photos\".\"id\" = \"taggings\".\"photo_id\" INNER JOIN \"tags\" ON \"tags\".\"id\" = \"taggings\".\"tag_id\" WHERE \"tags\".\"name\" IN ('foo', 'bar') group by photos.id having count(*) = 2 --2 is the number of items in your array of tags.
SELECT collections.collectionid as collectionid, photos.name as photo_name, 'photo' as document_type FROM collections LEFT JOIN photos on collections.collectionid = photos.collectionid WHERE collections.collectionid = 14 UNION ALL SELECT collections.collectionid as collectionid, song.name as photo_name 'song' as document_type FROM collections LEFT JOIN songs on collections.collectionid = songs.collectionid WHERE collections.collectionid = 14
SELECT customer_name, COUNT(DISTINCT product_ID) as products_count FROM customer_table INNER JOIN orders_table ON customer_table.customer_ID = orders_table.customer_ID GROUP BY customer_table.customer_ID, customer_name HAVING COUNT(DISTINCT product_ID) > 10
SELECT u.ID, u.fname, u.lname , d1.name as div_1_name , d2.name as div_2_name FROM USERS u LEFT JOIN DIVISIONS d1 ON u.div_1_id = d1.ID LEFT JOIN DIVISIONS d2 ON u.div_2_id = d2.ID
CREATE TABLE temp (startdate varchar(255), stuff varchar(255)); INSERT INTO temp SELECT startdate,stuff FROM mytable; TRUNCATE TABLE mytable; ALTER TABLE mytable ALTER COLUMN startdate DATETIME NOT NULL; INSERT INTO mytable SELECT CAST(startdate AS DATETIME), stuff FROM temp; DROP TABLE temp;
Select c.Id, c.Name from Client c Join ClientArticle ca on c.ID = ca.ClientID Join Article a on ca.ArticleID = a.ArticleId Where a.Value = 'Y'
http://download.oracle.com/docs/cd/B19306_01/appdev.102/b14352/toc.htm
SELECT ID, MAX(Total) FROM ( SELECT ID, Total FROM Table1 UNION ALL SELECT ID, Total FROM Table2 ) foo GROUP BY ID
SELECT c1.name, c1.country, c2.name, c2.country FROM city c1, city c2 WHERE c1.country < c2.country
select L1.Session, L1.Date, L1.Level, L1.Context, 'Api Call' AS Message, L3.ExecutionTime, L1.Parameters as InputModel, L2.Parameters as OutputModel, L3.Parameters as HttpResponse from Log L1 inner join Log L2 ON L1.Session = L2.Session inner join Log L3 ON L1.Session = L3.Session where L1.Message = 'Call Begin' and L2.Message = 'Call Response' and L3.Message = 'Call End'
select t.country, t.month, t.code, t.code_count, 100 * t.code_count / cast( x.scc as float) as percentage from t left join ( select country, month, sum(code_count) as scc from t group by country, month ) x on x.month = t.month
update pd set EAC = r.EAC from [dbo].[Projectdetails] pd join [dbo].['RAC'] r on pd.[ProjectKey] = r.[Project _ID]);
select ?husband ?color where {?husband <spouse> ?wife . ?husband <likes> ?color . OPTIONAL {?wife <likes> ?wifecolor FILTER (?wifecolor = ?color)} FILTER (!BOUND(?wifecolor))}
SELECT picture,person_id, firstname+ ' ' +middlename+ ' ' +lastname AS fullName FROM PERSON WHERE (firstname+ ' ' + LTRIM(middlename + ' ') + lastname LIKE"%#queryString#%")
select count(distinct recipient_id) from email e1 where e1.activity = 'delivered' and exists (select * from email e2 where e1.recipient_id = e2.recipient_id and e2.activity = 'open' and datediff(e2.action_date,e1.action_date) <= 1)
SELECT TOP (1) WITH TIES a, b, c, ROW_NUMBER() OVER (ORDER BY a) as ROWNUM, ROW_NUMBER() OVER (ORDER BY a) % 2 as BOOL FROM love ORDER BY BOOL DESC;
DELETE a.* FROM accounts a JOIN (SELECT email FROM accounts GROUP BY email HAVING COUNT(*) > 1) dup ON a.email = dup.email
update d_dim set FLAG = case when id in (select id from t_temp) then 'Y' else 'N' end;
INSERT INTO `<table>` (column1, column2, ...) -- Not IDENTITY columns SELECT column1, column2, ... FROM ...
<img src="data:image/jpeg;base64,<?php echo base64_encode($_SESSION['pic']); ?>" />
User (UserID, firstname, lastname, etc.) Event (EventID, Name, Date, Location, Capacity, etc.) EventRegistration (EventRegistrationID, UserID, EventID, ParticipantTypeID, etc.) ParticipantType (ParticipantTypeID, Name)
Data Source=myServerAddress;Failover Partner=myMirrorServerAddress;Initial Catalog=myDataBase;Integrated Security=True;
DECLARE @ItemBack1 TABLE ( column1 int, column2 int, someInt int, someVarChar nvarchar(50) ); INSERT INTO @ItemBack1 SELECT column1, column2, someInt, someVarChar FROM table2 WHERE table2.ID = 7;
Select f.name, t.name, message from messages Left join users as f on messages.fromID = f.uid Left join users as t On messages.toid = t.uid
SELECT A.id, A.name, B.[datetime] FROM tableA A LEFT OUTER JOIN tableB B ON A.Id = B.id AND B.[datetime] < @date
Update YourTable set shortDate = date_format(`Date`, '%m%d')
SELECT b.foreignkey, count(b.foreignkey) as bidcount FROM b WHERE b.foreignkey IN (SELECT a.id FROM a) GROUP BY b.foreignkey HAVING count(b.foreignkey) < 3
WITH t AS ( SELECT Client, Task, Hours, ROW_NUMBER() OVER(PARTITION BY Client,Task,Date ORDER BY Date) rn, DATEPART(dw,date) DayOfWeek FROM MyTable ) SELECT Client, Task, [1] Sun, [2] Mon, [3] Tues, [4] Wed, [5] Thu, [6] Fri, [7] Sat FROM t PIVOT(SUM(Hours) FOR DayOfWeek IN ([1],[2],[3],[4],[5],[6],[7])) p
response.write " $('li','#myList').each(function(i,li) { " int i = 1; sql= "INSERT INTO links SET headline='"& headline &"',datum='"& datum &"',links_adress='"& links_adress &"', userId=" & userId & ", avd_id=" & i & " ;" i++; conn.Execute (sql) response.write" })"
SELECT Count(DISTINCT ORD.ORDERNUMMER) FROM Orders AS ORD INNER JOIN Material AS KP ON KP.Ordernummer = ORD.Ordernummer WHERE (KP.SOORT = 'SCREEN') AND ORD.PRODUCTIEORDER = '201132' AND ORD.LAND = 'Belgie'
SELECT GENDER, R = ROW_NUMBER() OVER (PARTITION BY GENDER ORDER BY GENDER) FROM PERSON ORDER BY R, GENDER DESC
IList<string> sorted = context.Terms.ToList() .OrderBy(t => Regex.Replace(t.Term, @"\W*","")).ToList();
SELECT DISTINCT(ans) FROM ( SELECT right AS ans FROM answers UNION SELECT wrong1 AS ans FROM answers UNION SELECT wrong2 AS ans FROM answers UNION SELECT wrong3 AS ans FROM answers UNION SELECT wrong4 AS ans FROM answers ) AS Temp
select * from Sales where SaleDate between @StartDate and @EndDate and ( (@SalesUserId is not null and SalesUserId = @SalesUserID) or (@SiteId is not null and SiteId = @SiteId) or (BrandId = @BrandID) )
ADOQueryToUpdate->FieldByName("Column_Name")->AsInteger = ADOQueryFillingList->FieldByName("Column_Name")->AsInteger;
You can add a primary key! It just has to be over two columns and not just one. ALTER TABLE your_table ADD PRIMARY KEY(idA, idB)
SELECT * FROM table_name WHERE Login <> Alias
SELECT EID, SUM(PCNUM) FROM table1 GROUP BY EID;
CREATE TABLE Location ( LocationID INT PRIMARY KEY, CompanyID INT NOT NULL, -- References Company table, not shown here. LocationName VARCHAR(50) NOT NULL, -- Possibly UNIQUE? IsPrimary INT CHECK (IsPrimary IS NULL OR IsPrimary = 1), -- Use a BIT or BOOLEAN if supported by your DBMS. CONSTRAINT Locations_U1 UNIQUE (CompanyID, IsPrimary) );
DECLARE @object int exec sp_OACreate 'SQLDMO.SQLServer', @object OUT exec sp_OASetProperty @object, 'LoginSecure', TRUE exec sp_OAMethod @object,'Connect(sqltest)' exec sp_OAMethod @object, 'Jobserver.Jobs().Script()' exec sp_OADestroy @object
UPDATE STUDENT s SET points = s.points + CONSTANT * (SELECT p.score FROM PLAYSIN p WHERE p.name = s.name)
COUNT(case when Recordings_Sum >= 60 AND Recordings_Sum < 100 then 1 end) AS DaysAbove60 COUNT(case when Recordings_Sum >= 100 AND Recordings_Sum < 140 then 1 end) AS DaysAbove100 COUNT(case when Recordings_Sum >= 140 then 1 end) AS DaysAbove140
select id, sum(value) from ( select id, value from table1 union all select id, value from table2 union all select id, value from table3 ) t group by id
SELECT u.id, u.name FROM users u, relationships r WHERE u.id = r.follows_user_id AND r.user_id = N
SELECT COLUMN_NAME, MY_TIMESTAMP FROM TABLE_NAME WHERE MY_TIMESTAMP >= SYSDATE - INTERVAL '3600' SECOND ORDER BY MY_TIMESTAMP
DELETE FROM BatchProducts WHERE BatchProducts.ID = @ID AND EXISTS (SELECT * FROM [Batch] WHERE [Batch].ID = BatchProducts.BatchID AND [Batch].RetailerID = @RetailerID)
//OrderVal/Orderattrs/Orderattr/(@Ordername, OrderVals/OrderVal/listvalue)/data(.)
create procedure prTest @i int = null, @i2 int = null as select @i,@i2 go exec prTest 1 --just pass 1 parameter, 2nd is default go exec prTest -- leave all as default go exec prTest @i2 = 5 --to pass in a param if it is not 1st, use names go exec prTest null,5 --same as above
UPDATE likes INNER JOIN votes ON votes.votedElm = likes.id AND votes.country = likes.country SET likes.votes = IF(votes.vote_type = 0,likes.votes+1,likes.votes-1), votes.voteProcessed = 1 WHERE votes.voteProcessed = 0
SELECT * FROM PROFILE WHERE upper(no) = upper(?);
UPDATE inventar i INNER JOIN product_to_category ptc ON ptc.product_id = i.product_id INNER JOIN category_description cd ON cd.category_id = ptc.category_id SET i.category = cd.name;
CREATE OR REPLACE PROCEDURE proc_main AS BEGIN EXECUTE IMMEDIATE 'BEGIN proc_child1; END;'; EXECUTE IMMEDIATE 'BEGIN proc_child2; END;'; EXECUTE IMMEDIATE 'BEGIN proc_child3; END;'; proc_compile_invalids; -- This invokes -- "alter procedure <procedure_name> compile" -- statement for all the invalids. END;
CREATE TABLE a(id INT); INSERT INTO a (id) VALUES (1,2,3,4,5,6); CREATE TABLE b(id INT); INSERT INTO b (id) VALUES (10,20,30,40,50,60); CREATE TABLE c (a_id INT, b_id INT) AS SELECT a.id AS a_id, b.id AS b_id FROM a,b;
SELECT l.country, c.list, c.list_count FROM location l LEFT JOIN ( SELECT location_id AS id ,array_agg(id) AS list ,count(*) AS list_count FROM competition GROUP BY 1 ) c USING (id)
Select dmvndn "Vendor Number", IFNULL(sum(dmsls) / NULLIF(sum(dmprc), 0), 0) "Calculation" From MyFile Group By dmvndn
exec sp_msforeachtable "dbcc dbreindex('?')"
Select Table1.* from Table1 where (X = 0 or Width = X) and (Y = 0 or Height = Y) and (Z = 0 or Length = Z)
SELECT a.name, SUM(B.sequence + B.length) AS total FROM Tbl1 A INNER JOIN Tbl2 B ON B.sequence = A.sequence WHERE A.loc <> -1 AND A.id = 10201 GROUP BY a.name ORDER BY A.location
WHERE REPLACE ( REPLACE ( some_column, "-", "" ), ".", "" ) in ('10000000000', '1999999999')
public function ReplaceCodes(str as string) as string dim returnString as string returnString = str returnString = replace(returnString,"abc-longcode","") // ... etc... ReplaceCodes = returnString end function
SELECT ITEM_ID, (SELECT name FROM Code WHERE CODE_ID = Claim_ID) AS Claim_ID_NAME, (SELECT name FROM Code WHERE CODE_ID = status_ID) AS status_ID_name FROM Claim
select id, max(case when seqnum = 1 then value end) as value from (select t.*, row_number() over (partition by id order by modifieddate desc) as seqnum from table t ) t group by id having max(case when seqnum = 1 then value end) <> max(case when seqnum = 2 then value end);
CREATE OR REPLACE PROCEDURE ReverseOf(input IN varchar2) IS reverse varchar2(50); BEGIN FOR i in reverse 1..length(input) LOOP reverse := reverse||''||substr(input, i, 1); END LOOP; dbms_output.put_line(reverse); END;
Set @seq = 0; Set @type_id = -1; Update `log` Set `sequence` = If(@type_id=(@type_id:=`type_id`), (@seq:=@seq+1), (@seq:=1)) Order By `type_id`, `created_at`;
SELECT * FROM run WHERE run_id NOT IN (SELECT runID FROM booking WHERE startDate >= '10/07/2015' AND endDate <= '15/07/2015');
select unique id from table as t1 where (t1.source = 'a' or t1.source='f') and exists (select * from table as t2 where t2.id = t1.id and (t2.source = 'c' or t2.source='g') )
select case when your_varchar_column = 'N' then 1 else 0 end as your_bool_result from your_table
SELECT v.id, MAX(duration) FROM video v JOIN source s ON s.id IN (v.source_low, v.source_med, v.source_high) GROUP BY v.id
select * from table1 t1 union all select * from table2 t2 where not exists (select * from table1 t1 where t1.invno = t2.invno );
select spj1.jnum as jnum1, spj2.jnum as jnum2 from spj spj1 join spj spj2 on spj1.pnum = spj2.pnum and spj1.jnum < spj2.jnum group by spj1.jnum, spj2.jnum having count(distinct spj1.pnum) >= 100;
SELECT message, count(commentID) FROM tableA LEFT JOIN tableB ON tableA.messageID = tableB.messageID GROUP BY message
select d.employee_id, h.week_start_date from detail d join header h on h.header_id = d.header_id group by d.employee_id, h.week_start_date -- employees with same week_start_date having ( count(distinct h.location_code) > 1 -- have more than 1 location or count(distinct h.department_code) > 1 -- or more than 1 department )
Sale table: ----------------------------- sale_id autonumeric(1,1) PK , emp_id int FK , prod_id int FK , price decimal(10,2) , sold_date datetime(2) , other_interesting_sale_details
mysql -uroot -p database_name < backup.sql
select t1.id , t1.job_id , t1.updatedate , t2.rn as rnt2 from temprwithrn as t1 left join temprwithrn as t2 on t1.rn = t2.rn + 1 where t1.job_id <> t2.job_id or t2.job_id is null
db=# select current_date - interval '15' year; ?column? --------------------- 1997-04-26 00:00:00 db=# select current_date - interval '15' years --------------------- 2012-04-25 23:59:45 db=# select current_date - interval '15 year'; ?column? --------------------- 1997-04-26 00:00:00
MyTable: ID Interval Date 1 1 10-10-2001 SELECT ID, DATEADD(D, Interval, GETDATE()) AS NewDate FROM MyTable SELECT e.* FROM [events] e INNER JOIN [interval] i on e.customerID = i.customerID WHERE e.date = DATEADD(D, i.daysBefore, DATEADD(D, 0, DATEDIFF(D, 0, GETDATE())))
SELECT p.ID, m1.meta_value as event_address, m2.meta_value as event_date, p.post_title from events_posts p inner join events_postmeta m1 on p.ID=m1.post_id and p.post_type='event' and (p.post_status='publish' or p.post_status='recurring') and m1.meta_key='address' inner join events_postmeta m2 on p.ID=m2.post_id and p.post_type='event' and (p.post_status='publish' or p.post_status='recurring') and m2.meta_key='st_date' order by p.ID
SELECT * FROM posts ORDER BY DATE(published_at)=DATE(NOW()) DESC, DATE(published_at)<DATE(NOW()) DESC, DATE(published_at)>DATE(NOW()) ASC`
select * from Table Where SSN not Like '[0-9][0-9][0-9][0-9]'
SELECT * FROM categories AS c LEFT JOIN (SELECT * FROM articles ORDER BY id DESC) AS a ON c.id = a.id_category AND /criterias about joining/ WHERE /more criterias/ GROUP BY c.id
DECLARE @T TABLE ( b1 bit ,b2 bit ,b3 bit ); DECLARE @T2 TABLE ( b1 bit ,b2 bit ,b3 bit ,b4 bit ,b5 bit ); INSERT INTO @T VALUES (0,0,0),(1,1,1); INSERT INTO @T2 VALUES (0,0,0,0,0),(1,1,1,1,1); SELECT CHECKSUM(*) FROM @T; SELECT CHECKSUM(*) FROM @T2;
var customerName = ""; var customerEmail = ""; if (Request.Cookies["BookingReq"] != null) { var breq = db.Query("SELECT * FROM BookingRequests WHERE BookingGUID = @0", Request.Cookies["BookingReq"].Value); //I don't know webmatrix so I don't know what happens to breq if that value doesn't exist - I'll assume it's null if (breq != null) { customerName = breq.CustomerName; customerEmail = breq.CustomerEmail; } }
SELECT * FROM ( SELECT pk_id, user_id, some_timestamp, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY some_timestamp DESC) col FROM table) x WHERE x.col = 1
UPDATE `User` u LEFT JOIN `User` maxUser ON u.user = maxUser.user AND maxUser.endDate > u.endDate SET u.`endDate` = NULL WHERE maxUser.user IS NULL;
ALTER TABLE `invoices`.`invoices` CHANGE `DateTime` `DateTime` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
select key1, key2, key3, emailSent_Date, row_number() over (partition by key2, key3 order by key1) as "Count" from "table";
/* All parents without children */ SELECT a.* FROM tbl_Categories a WHERE NOT EXISTS ( SELECT * FROM tbl_Categories b WHERE b.CategoryId_fk = a.CategoryId ) /* All children */ UNION ALL SELECT a.* FROM tbl_Categories a WHERE CategoryId_fk IS NOT NULL
select t.* from (select t.*, sum(case when cust_type = 'M' then 1 else 0 end) over (partition by sales_id) as NumMs from table t ) t where NumMs > 1;
WHILE @Id IS NOT NULL AND @Id <> @AncestorId BEGIN SET @Id = ( SELECT ManagerId FROM dbo.Users WHERE UserId = @Id ) END RETURN CASE WHEN @Id IS NOT NULL THEN 1 ELSE 0 END
SELECT t2.person_id, COUNT(*) int_size, GROUP_CONCAT(t2.preference_id) shared_preferences FROM table t1 JOIN table t2 ON t1.preference_id = t2.preference_id WHERE t1.person_id = 1 AND t2.person_id != 1 GROUP BY t2.person_id ORDER BY int_size DESC LIMIT 10
ORDER BY DECODE( GRADE_MASTER.GRADE_DESCRIPTION, 'SENIOR DIRECTOR', 1, 'DIRECTOR', 2, 'MANAGER', 3, 'EMPLOYEE', 4, 5)
SELECT b.id, group_concat(c.a) a FROM a_b JOIN a ON a.id = a_b.a JOIN b ON b.id = a_b.b JOIN a_b c on b.id = c.b WHERE a.name = 'bob' GROUP BY b.id
SELECT InspectionProcedureName AS Inspection, COUNT(*) AS Total FROM UnitData_Vehicle WHERE (DATEDIFF(day, InspectionDateTime, GETDATE()) = 1) GROUP BY InspectionProcedureName UNION ALL SELECT InspectionProcedureName AS Inspection, COUNT(*) AS Total FROM AnotherTable WHERE (DATEDIFF(day, InspectionDateTime, GETDATE()) = 1) GROUP BY InspectionProcedureName UNION ALL -- Next query etc...
SELECT ID FROM FA WHERE MASS = 800 - (SELECT MASS FROM FA WHERE ID = '14:0')
SELECT DISTINCT SUBSTRING( 6pp, 1, 4 ) AS postcode FROM `6pp` WHERE EXISTS (SELECT 1 FROM tmp_orderimport oi WHERE oi.gebiedID = `6pp`.gemeenteID AND typeGebied = 'Gemeente' AND idorder = 1733 AND STATUS = TRUE );
$data = unserialize("thatlongstring"); print_r($data);
select t.candidateid , @curRank := @curRank + 1 AS rank, if(@prevote=-1, 0,@prevote-t.num) as sub, @prevote:=t.num as num from ( SELECT candidateid, count(*) as num FROM vote p group by candidateid ORDER BY num desc ) t, (SELECT @curRank := 0, @prevote:=-1) r
FOR i IN coll_nt.FIRST .. coll_nt.LAST LOOP dbms_output.put_line(i||': '||coll_nt(i)); END LOOP;
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY cav_id ORDER BY updated DESC) seq FROM yourTable) dt WHERE seq = 1;
SELECT UserID, COUNT(*) Total, SUM(CASE WHEN JoinStatus = 2 THEN 1 END) Joined FROM Customer WHERE JoinYear = 2016 AND JoinMonth = 1 AND JoinWeek = 2 AND JoinDay = 1 GROUP BY UserID
CREATE OR REPLACE PACKAGE my_constants AS color_alpha constant integer := 255; END my_constants;
CREATE OR REPLACE FUNCTION task_manager(task integer, params text) RETURNS integer AS $$ BEGIN IF task = 1 OR task = 2 THEN -- some work 1 END IF; IF task = 2 THEN -- some work 2 END IF; RETURN null; END; $$ LANGUAGE plpgsql;
sigma=0 demo_by_age = Demo.objects.filter(age_group=age); popn=demo_by_age.count() #One card_list = demo_by_age.values_list('card_no', flat=True) # Two dic = Fact_table.objects.filter(card_no__in=card_list).aggregate(Sum('duration') #Three sigma = dic['duration__sum'] avgDur=sigma/popn
private void UpgradeDatabaseWithDacpac(string connectionString, string databaseName, string dacpacFileName) { DacPackage dacPackage = DacPackage.Load(dacpacFileName); DacServices dacServices = new DacServices(connectionString); dacServices.Deploy(dacPackage, databaseName, true); }
SELECT city,state, CASE WHEN (city IS NULL OR city='') AND (state IS NULL or state='') THEN '' ELSE country END as country_1 FROM `table`
declare @caroptions table ( car varchar(1000) ) insert into @caroptions values ('BMW') insert into @caroptions values ('Toyota') insert into @caroptions values ('Nissan') select * from cars where make in (select car from @caroptions)
;WITH oc AS ( SELECT [order], COUNT([order]) AS order_count FROM order_comment GROUP BY [order] ), occ AS ( SELECT o.*, order_count AS comment, ROW_NUMBER() OVER (ORDER BY order_count DESC) AS [rownum] FROM [order] o INNER JOIN oc ON oc.[order] = o.id ) SELECT * FROM occ WHERE [rownum] BETWEEN 0 AND 10 ORDER BY [rownum]
update your_table set column1 = column1 || column2
select (case when su1.id is not null and su2.id is not null then 'BOTH' when su1.id is not null then 'TYPE1' when su2.id is not null then 'TYPE2' else 'Neither' end) from (select 999 as user_id from dual) u left join sub_user_1 su1 on su1.id = u.user_id left join sub_user_2 su2 on su2.id = u.user_id
SELECT title, body FROM messages WHERE tsv @@ to_tsquery('english', 'title & body')
SELECT a.StringValue, COUNT(a.StringValue) FROM Attributes a INNER JOIN ProductAssociations p ON a.ProductAssociation = p.ID AND p.ProductCode = 'MyProductCode' LEFT JOIN Attributes a2 ON a2.ProductAssociation = p.ID AND a2.Name = 'Is Test' AND a2.BooleanValue = 0 WHERE Name = 'Windows OS Version' AND StringValue IS NOT NULL AND COALESCE(a2.ProductAssociation, NULLIF(@IsTestsIncluded, 1)) IS NOT NULL GROUP BY a.StringValue
SELECT integername FROM tblintegerlist WHERE (integername-<variable>) BETWEEN -1 AND 1
;WITH cte AS ( SELECT Id, Name, ParentId FROM Color WHERE ParentId = @parentIdValue UNION ALL SELECT c2.Id, c2.Name, c2.ParentId FROM cte c1 INNER JOIN Color c2 ON c2.ParentId = c1.Id ) SELECT * FROM cte;
SELECT CONVERT(char(30), '2006-09-08 14:39:41.000',126)
SELECT CONCAT('DROP TABLE `',t.table_schema,'`.`',t.table_name,'`;') AS stmt FROM information_schema.tables t WHERE t.table_name LIKE 'USER_%%' ESCAPE '\\' ORDER BY t.table_name
SELECT locations.id as loc_id, meets.id as meets_id, ... FROM meets LEFT JOIN locations ON locations.id=meets.loc ORDER BY date DESC
select Account, security_name, broker_name, balance_bf, tran_amt, tran_date, FIRST_VALUE(balance_bf) OVER (PARTITION BY security_name, broker_name ORDER BY tran_date) as first_balance, FIRST_VALUE(tran_date) OVER (PARTITION BY security_name, broker_name ORDER BY tran_date) as first_tran_date from customer_transactions;
WITH RECURSIVE intervals(t) AS ( VALUES(1413902400000) UNION ALL SELECT t + 600000 FROM intervals WHERE t < 1413972000000 ) SELECT intervals.t, COUNT(*) FROM intervals LEFT JOIN MyTable ON MyTable.unixtime BETWEEN intervals.t AND intervals.t + 599999 GROUP BY 1;
public function getStatusAttribute($value) { return ($value) ? "Approved" : "Pending"; }
select p1.gameId from participants as p1, participants as p2 where p1.name = 'Team1' and p2.name='Team2' and p1.gameId = p2.gameId
INSERT INTO NewTable (flagNewTableCol,othercolumns) SELECT CASE WHEN flagColunn = 'Y' THEN 1 ELSE 0 END, othercolumns FROM OldTable
SELECT orders.user, orders.item, orders.date FROM orders, (SELECT * FROM orders WHERE item = 'ball') ball_table WHERE orders.user = ball_table.user AND orders.date > ball_table.date;
select a.Data, b.Data from Table1 a left join Table2 b on b.JoinValue = a.JoinValue and b.DateField =( select Max( DateField ) from Table2 where JoinValue = b.JoinValue );
INSERT INTO table1 (username) SELECT CONCAT(COALESCE(prefix, 'AB'), LPAD(COALESCE(MAX(id), 0) + 1, 3, '0')) FROM table1
select sum(order_total) as total_amount, to_char(trunc(created_date), 'DD/MM/YYYY') as grouped_date from orders where status = 'Complete' and created_date >= trunc(sysdate-30) group by trunc(created_date) order by trunc(created_date) asc
update _Items SET CodeName = REPLACE(CodeName,'_08_','_07_') where CodeName LIKE '%_08_%'
WHERE start_date <= sysdate AND closing_date >= sysdate
UPDATE i SET TrimNumber = tempintr.TempTrimNumber FROM Interpreters AS i INNER JOIN #InterpreterTrimNumbers tempintr ON i.TrimNumber= tempintr.TempTrimNumber
SELECT XMLQuery(' for $customer in ora:view("customer")/ROW return $customer/LAST_NAME ' RETURNING CONTENT) FROM DUAL;
select t.id, t.col, t.filter from (select t.*, @rn := if(@f = filter, @rn + 1, if(@f := filter, 1, 1)) as rn from table t cross join (select @f := '', @rn := 0) vars order by filter, id ) t order by rn, field(filter, 'type1', 'type2', 'type3');
SELECT COUNT(DISTINCT CustomerID) as Total, COUNT(DISTINCT CASE WHEN OrderDate >= '2016-01-01' THEN CustomerID END) as Total_2016 FROM Orders;
SELECT TO_CHAR(696585242087, '99G999G999G9999', 'NLS_NUMERIC_CHARACTERS=",."') FROM dual
essais=> SELECT * FROM Test1; id | foo | bar ----+-----+----- 2 | 1 | 2 essais=> ALTER TABLE Test1 RENAME COLUMN foo TO baz; ALTER TABLE essais=> SELECT * FROM Test1; id | baz | bar ----+-----+----- 2 | 1 | 2
with C as ( select *, row_number() over(partition by ToOrganizationID order by ToLastModifiedDate desc) as rnTo, row_number() over(partition by ToOrganizationID order by FromLastModifiedDate desc) as rnFrom from MergeAndDeleteNonprofitDetails ) select * from C where rnTo = 1 or rnFrom = 1
select student, greatest(q1, q2, q3, q4) as greatest_value from sample;
UPDATE topMovies SET movieId = REPLACE(REPLACE(movieId,'/title/',''),'/',''), year = REPLACE(REPLACE(year,'(',''), ')','')
SELECT *, ROW_NUMBER() OVER (PARTITION BY ReportId ORDER BY Time) as IncrementColumn FROM ProcessMaster
select user_1, user_2 from t group by user_1, user_2 having count(*) >= 2;
DELIMITER $$ CREATE TRIGGER `yourDB_polozky` BEFORE INSERT ON `yourDB`.`polozky` FOR EACH ROW BEGIN DECLARE vat_rate float; SELECT DPH INTO dph_rate FROM `yourDB`.`dph` WHERE id = new.dph_id; SET new.cena = (1 + dph_rate) * (new.cena_za_kus * new.mnozstvi); END $$
select * from ( select *, case when location = 'berlin' then 5 else 0 end + case when royality >= 100 then 1 else 0 end + case when familylaw = null then 1 else 0 end + case when criminallaw = true then 1 else 0 end as score from tbl ) scored order by score desc
DECLARE @from INT=1 DECLARE @to INT=5, @cnt INT, @sql NVARCHAR(max) SET @cnt=@from SET @sql='select ' WHILE @cnt <= @to BEGIN SET @sql += 'sum(sum' + CONVERT(VARCHAR(50), @cnt) + '),' SET @cnt+=1 END SELECT @sql = LEFT(@sql, Len(@sql)-1)+ ' from tablename group by GroupByID' exec sp_executesql @sql
SELECT ... Product.ProductPrice as Price, CustomerRules.ProductPriceRules as Rules FROM Product LEFT JOIN Customer ON ... LEFT JOIN CustomerRules ON Product.ProductID = CustomerRules.ProductID AND Customer.CustomerID = CustomerRules.CustomerID
SELECT CCID, COUNT(CASE WHEN TypeID = 5 THEN CCID END) as OurTypeCnt, COUNT(CASE WHEN TypeID <> 5 THEN CCID END) as NotOurTypeCnt FROM CCsTransactions GROUP BY CCID HAVING ((OurTypeCnt >= 1) AND (NotOurTypeCnt < 1))
select distinct t1.[key], STUFF((SELECT distinct ', ' + t2.plant from yourtable t2 where t1.[key] = t2.[key] FOR XML PATH(''), TYPE ).value('.', 'NVARCHAR(MAX)') ,1,2,'') plant from yourtable t1;
WITH tempTable AS (select userid, AVG(score) FROM sample GROUP BY userid) SELECT * FROM tempTable WHERE score = (SELECT MAX(score) FROM tempTable)
Me!AutoNumber.Value = Format(Val(Nz(Right(DMax("[AutoNumber]", "[YourTable]"), 3), 0)) + 1, "\D000")
UPDATE TableName SET Col2 = Col1, Col1 = NULL WHERE Col1 IS NOT NULL
select * from A inner join B on A.id_x = B.id_x inner join C on B.id_y = C.id_y inner join D on C.id_z = D.id_z where A.date > '2014-01-01' and A.id_y = 154 and D.id_t = 2 AND A.id_x IN ( SELECT A.id_x FROM A GROUP BY A.id_x HAVING count(A.id_x)>1);
SELECT --Set image for xmas CASE WHEN @CurrentMonth = 12 AND @CurrentDate = 25 THEN 'imagetest.png' --Set for easter WHEN @CurrentMonth = 3 AND @CurrentDate = 19 THEN 'imagetest2.png' --Keep setting images for events WHEN @CurrentMonth = 3 AND @CurrentDate = 19 THEN 'imagetest3.png' --If no match, return default image ELSE 'logo.png' END AS url
delete from GlassesColor where GlassesID in (select GlassesID from Glasses where CollectionID = 3)
SELECT Column_Name, Data_Type, Data_Length, Data_Precision, Nullable FROM All_Tab_Columns WHERE Owner = '<schema>' AND Table_Name = '<table>' ORDER BY Column_ID
UPDATE accounts SET account_id = '30' WHERE account_id = '20' AND user_id = '10';
select a.Id from proxy a, account b where a.ID = b.proxyId group by a.ID having count(*) <= 10
awk -F \* 'NR==FNR{if (/\*/)a[$1]} NR>FNR{ if (/\*/) {print;next} s=0 for (i in a) {if ($0~i){s++;break}} if (s==0) print }' file file
INSERT INTO [NewDB].[dbo].[Aliases] SELECT columns FROM [OldDB].[Terminal].[Alias]
SELECT p.*, o.* FROM Policy p JOIN OtherPolicyFile o on o.PolicyId = p.PolicyId LEFT JOIN OtherPolicyFile o9or10 on o9or10.PolicyId = p.PolicyId and o9or10.Status IN (9,10) WHERE o.Status IN (9,10) OR o.Status = 11 AND o9or10.PolicyId is NOT NULL GROUP BY <whatever key you need>
SELECT source_id, company_id, MAX(avg_click) as max_click FROM (SELECT source_id,company_id,AVG(clicks) AS avg_click FROM table_company GROUP BY source_id,company_id ORDER BY avg_click DESC) tmp GROUP BY company_id
SQLString = "UPDATE tblRegister" & _ " SET tblRegister.Status = " & IIF(StatusID=0,"NULL", StatusID) & _ " WHERE tblRegister.ID = 'reg01'
insert into `films_genres_temp` (`id`,`film_id`,`genre_id`,`num`) values (1,1,1,1), (2,1,17,2), (3,2,1,1), ... insert into `films_genres` (`film_id`,`genre_id`) select `film_id`,`genre_id` from `films_genres_temp`
ORDER BY Val(MasterPNo)
select place from myTable where Designation='Manager' and timeOfJoining > '1930-10-10' and timeOfLeaving < '1950-10-10';
select setval('keyword_id_seq', 3);
select b.KeyValue, a.rqstId, a.orchiveId, case when c.KeyTypeName = 'key2' then 0 else 1 end as KeyTypeNameForOrder from rqst a, key b, keyType c where a.statusId = 102 and a.requestType = 4 and a.processTypeId = 5 and b.rqstId = a.rqstId and c.KeyTypeId = b.keyTypeId order by 4
select g.*, coalesce(s1.erynda_kakayato, konkretnaya_hren) from general g left join secondary1 s1 on s1.general_id = g.id and g.type_id = 1 left join secondary s2 on s2.general_id = g.id and g.type_id = 2 ;
SELECT SUBSTRING('Z00056ABC00044', 1, CHARINDEX('ABC', 'Z00056ABC00044') -1)
sum(case when day([date]) = 1 then 1 else 0 end) as day1, sum(case when day([date]) = 2 then 1 else 0 end) as day2, sum(case when day([date]) = 3 then 1 else 0 end) as day3, sum(case when day([date]) = 4 then 1 else 0 end) as day4, etc sum(case when day([date]) = 31 then 1 else 0 end) as day31
CREATE TABLE a ( id int, other_id int REFERENCES b(id) ); CREATE TABLE b ( id int, other_id int REFERENCES a(id) ); INSERT INTO a VALUES (1,1); INSERT INTO b VALUES (1,1);
SELECT UserID, MIN(Login_Date) as First_Login_Date FROM Login WHERE Login_Date BETWEEN inputStartDate AND inputEndDate GROUP BY UserID, YEAR(Login_Date), MONTH(Login_Date), DAY(Login_Date)
select staff_id as id, totalrentaltranscations from a_table order by 2 desc limit 1;
SELECT au.*,p.* FROM account_users au INNER JOIN posts p ON p.account_users.id = au.id GROUP BY p.post_id HAVING count(*) > 5
INSERT INTO delivery(Manifest_Id, Expected_Start_DateTime, Expected_End_DateTime) VALUES ('SGP1361645SGP','2013-10-23 14:00:00','2013-10-23 18:00:00')
SELECT MIN(CASE WHEN company = 'walmart' THEN 'True' ELSE 'False' END) FROM Table1 WHERE users IN ('a','b','e') --False SELECT MIN(CASE WHEN company = 'google' THEN 'True' ELSE 'False' END) FROM Table1 WHERE users IN ('c','d','e') --True
SELECT A.ID_NO,A.NAME B.APPL_STATUS FROM PERSON A LEFT JOIN FORM_DETAILS B ON A.ID_NO=B.ID_NO WHERE B.APPL_DATE BETWEEN '12/07/2009' AND '12/09/2009' AND (B.STATUS = 'A' OR B.STATUS = 'C') ORDER BY APPL_DATE
-- A time interval must be either completely "to the left" or completely -- "to the right" of the other time interval for them not to overlap. SELECT * FROM EVENT WHERE NOT( (:s < DTSTART AND :s < DTEND AND :e < DTSTART AND :e < DTEND) OR (:s > DTSTART AND :s > DTEND AND :e > DTSTART AND :e > DTEND) )
select count(*) from (SELECT XMLTYPE( DBMS_XMLGEN.GETXML('select SEARCH_CONDITION from user_constraints ') ).extract('//SEARCH_CONDITION/text()').getstringval() srch_cond from dual) where srch_cond like '%&apos;g&apos;%'
SELECT * FROM Customers WHERE Country LIKE '%land%' order by charindex('land', Country)
SELECT bands.band_id, track_id FROM bands LEFT JOIN tracks ON tracks.band_id = bands.band_id WHERE bands.property1 = xyz;
MULTIPLY PRICE BY QUANTITY GIVING COST.
SELECT ArchiveTravelNewsByMonth, NewsDatePosted FROM( SELECT DISTINCT TOP 12 SUBSTRING(CONVERT(VARCHAR(11), NewsDatePosted, 113), 4, 8) AS ArchiveTravelNewsByMonth, NewsDatePosted FROM dbo.at_News)x ORDER BY CONVERT(DATETIME, ArchiveTravelNewsByMonth)
SELECT A.SVC_PREFIX, B.SVC_CD, A.anotherData, CD.SVC_ID, CD.isGood, CD.isHappy FROM A JOIN B ON B.SVC_PREFIX = A.SVC_PREFIX AND B.SVC_CD = A.SVC_CD JOIN ( SELECT SVC_ID, isGood, isHappy FROM C UNION SELECT SVC_ID, isGood, NULL AS isHappy FROM D ) AS CD ON CD.SVC_ID = B.SVC_ID
DENY UPDATE ON dbo.MyTable (Creator, CreationDate) TO SampleRole;
SELECT id, first_name, last_name FROM users WHERE (first_name LIKE 'jo%' OR last_name like 'jo%')
SELECT foo FROM Table WHERE CAST(foo as int)>@n
insert into holdings (accountid, holdingdate, holdingid, holdingvalue) select v.accountid, v.valuationdate, 999, v.valuation from valuations v left join holdings h on h.accountid=v.accountid and h.holdingdate=v.valuationdate where h.holdingdate is null EDIT: Corrected the second version to use a correlated WHERE clause. insert into holdings (accountid, holdingdate, holdingid, holdingvalue) select v.accountid, v.valuationdate, 999, v.valuation from valuations v where v.valuationdate not in (select distinct holdingdate from holdings where accountid=v.accountid)
SELECT options.optid as id, options.value as value, options.vid as voteid, ( SELECT COUNT(*) FROM vote_votes votes WHERE votes.optid = options.optid ) as votes FROM vote_options options WHERE options.vid = {$vote['vid']} ORDER BY votes DESC;
SELECT count(*) FROM comments WHERE thread=1 AND parent_id=0 AND NOT EXISTS (SELECT 1 FROM users WHERE users.user_id=comments.user_id)
select * from myTable order by field(myID, 8, 7, 6) desc;
Select T1.Id Ida, t2.id idb, T3.id idc FROM T3 LEFT JOIN (T2 LEFT JOIN T1 ON (T1.ID = T2.ID)) ON (T1.ID= T3.ID);
SELECT TOP 1 * FROM ( SELECT Patient_ID, Appt_Resource_ID, COUNT(*) AS theCount FROM vwGenPatApptInfo GROUP BY Patient_ID, Appt_Resource_ID WHERE ApptDateTime >= DATEADD(yyyy, -2, GETDATE()) and Appt_Cancelled_Date is NULL ) b JOIN vwGenPatInfo p ON p.Patient_ID = b.Patient_ID ORDER BY theCount DESC
select m.*, ms.TotalValue from MyTable m inner join ( select [Order], sum(Price * Quantity) as TotalValue from MyTable group by [Order] ) ms on m.[Order] = ms.[Order]
INSERT INTO Temp (id, name) VALUES (1, VARBINARY('rg_book'));
UPDATE Table1, Table2 SET Table1.Value = Table2.Value WHERE Table2.Name = "Table 1"
SELECT * FROM my_table;
select * from mytable where mydate = current date - (case when dayofweek(current date) = 1 then 2 -- sonntag when dayofweek(current date) = 2 then 3 -- montag else 1 end) days
def updateContact(id: Int, firstName: Option[String], lastName:Option[String], ...): Unit = { val q1 = Query(Contacts).filter(_.id === id) val c = q1.first val modifiedC = c.copy( firstName = firstName.getOrElse(c.firstName), lastName = lastName.getOrElse(c.lastName), ... ) q1.update(modifiedC) }
Select s.Branch, s.Date, s.containers, lag(s.Date) over (partition by branch order by date) as prev_Date, lag(s.containers) over (partition by branch order by date) as prev_Containers from shipping s;
select date(now() + trunc(random() * 20) * '1 day'::interval);
SELECT * FROM table1 WHERE str_col LIKE 'FR10%' OR str_col LIKE 'FR1%' OR str_col LIKE 'FR%' OR str_col LIKE 'F%' ORDER BY 4 * (str_col LIKE 'FR10%') + 3 * (str_col LIKE 'FR1%') + 2 * (str_col LIKE 'FR%') + 1 * (str_col LIKE 'F%') DESC, CHAR_LENGTH(str_col), str_col
BEGIN; INSERT INTO fields VALUES ('field1'); COMMIT;
SELECT t1.col1, t2.col2, t2.col3 FROM table1 t1 LEFT JOIN table2 t2 ON t1.col1=t2.col1 ;
SELECT * FROM posts WHERE STATUS=2 AND INSTR(tags,'featured video')>0 OR INSTR(tags,'video')=0
select TicketNum from TicketBooks a where Used='No' and TicketNum < (select MAX(b.TicketNum) from TicketBooks b where b.Used='Yes' and b.TicketBookNum = a.TicketBookNum) order by TicketNum desc
select * from t1 union all select * from t2 where Not exists (select 1 from t1 where t1.age = t2.age)
SELECT p.id, ..., creationdate FROM Post p LEFT JOIN Post_Has_Post php ON p.id = php.child_id ORDER BY COALESCE(php.parent_id, p.id), creationdate
select customer, max(case when seqnum = 1 then distributor end) as distributor1, max(case when seqnum = 2 then distributor end) as distributor2 from (select t.*, row_number() over (partition by customer order by (select null)) as seqnum from t ) t group by customer;
SELECT id, name as title, description as body, ( select GROUP_CONCAT( b.attributeValue ) as attributeValue from shop_product a, shop_product_attribute b where a.id = b.productId and b.attributeName="Tag" ) as tags FROM shop_product a
SELECT RIGHT(INC_DATE, 4);
declare @arr table (result int) insert @arr (result) select 1 union select 2
SQL> select to_char(systimestamp, 'YYYY-MM-DD HH24:MI:SS.FF TZD') as d from dual; D ---------------------------------- 2008-10-21 17:00:43.501591
SELECT * FROM Users WHERE MONTH( Users.Birthdate ) = MONTH( GetDate() ) AND DAY( Users.Birthdate ) = DAY( GetDate() )
select * from t where enrolldate= (select max(enrolldate) from t as t1 where t.id=t1.id) and t.code='WHEAT'
SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='your DB_Name' AND........{additional conditions }....
DELETE FROM `catalog_product_link` WHERE `link_type_id` = 5;
SELECT sum( CASE WHEN network = 'Search Network' THEN Ctr ELSE 0 END )
SELECT user_id FROM table_user_flags WHERE flag IN (1,2) GROUP BY user_id HAVING COUNT(DISTINCT flag)=2;
open table_cursor for 'SELECT * FROM REALM_ENTRIES WHERE ID IN (SELECT ID FROM APP_ENTRIES where APP_EXT_CODE =:appcode AND VERSION_NUMBER=:version_number)' using appcode, version_number;
UPDATE login SET is_admin=1 where memberid IN (1, 6, 10, 12, 7, 3)
SELECT Q1.customer_name, Q1.order_date, Q1.price, ( SELECT COUNT(*) + 1 FROM MyQuery AS Q2 WHERE Q2.customer_name = Q1.customer_name AND Q2.order_date < Q1.order_date ) AS pivot_id FROM MyQuery AS Q1;
SELECT c.id,l.login, AVG(f.mark) AS AVGRating FROM logininfo l JOIN person p ON l.id = p.info_id JOIN candidate c ON p.id = c.id JOIN feedback f ON c.id = f.candidat_id -- < -- this one GROUP BY c.id ORDER BY AVGRating ASC;
select id, sum(id*prm) from tablename group by id order by 2 desc
select t.in_click, t.first_name, t.create_date from tracker t where t.create_date = (select min(create_date) from tracker where in_click = t.in_click) or t.create_date = (select max(create_date) from tracker where in_click = t.in_click)
select * from (select skl.*, row_number() over (partition by skl.KeyId order by skl.PublishDate desc) as rn from ServerKeyLog skl where skl.PublishDate >= date '2015-08-01' and skl.PublishDate < date '2015-09-01') where rn = 1 and IsActive = 'T' order by KeyId
SELECT StudentName FROM tblStudents WHERE LEFT(StudentName,1)= RIGHT(StudentName,1)
Get Distance: float[] results = new float[1]; Location.distanceBetween(SQLitePosition.latitude, SQLitePosition.longitude, CurrentPosition.latitude, CurrentPosition.longitude, results);
DELETE student WHERE ApplicationDateTime <> (SELECT max(ApplicationDateTime) FROM student s2 WHERE s2.StudentID = student.StudentID)
SELECT fd.cust_id FROM fd JOIN loan USING (cust_id) GROUP BY fd.cust_id, fd.amount HAVING fd.amount < sum(loan.amount)
SELECT t.* FROM table t JOIN (SELECT rid, MAX(revision) MaxRevision FROM table GROUP BY rid) mt ON t.rid = mt.rid AND t.revision = mt.MaxRevision
#!/bin/bash if [ $( ps aux | grep WLS_FORMS |wc -l) -eq 1 ] then echo "Process is not running." service oracleforms start else echo "Process is running." fi
CREATE TABLE user_rating ( rated_user_id INTEGER NOT NULL, rater_user_id INTEGER NOT NULL, value FLOAT, time TIMESTAMP, PRIMARY KEY (rated_user_id, rater_user_id));
SELECT [RowKey], x.y.value('(.)[1]', 'INT') AS ItemKey FROM dbo.[tbl_MyDataTable] AS t CROSS APPLY t.[Format].nodes('/MultiSelect/ItemKey') x(y)
column startval new_value v_startval SELECT MAX(customer_id) + 1 FROM customer; create sequence customer_seq start with &v_startval.;
SELECT ... CASE WHEN LEFT(LTRIM(RTRIM([consent_complete])),1) = '2' THEN 'Complete' ELSE 'Incomplete' END AS [Complete?] FROM ...
dim x as integer for x = 0 to datTable.rows.count - 1 listOfCanteenSwipe.Add(datTable.rows(x).item("datarec")) next
SELECT min(ID), City FROM Cities Group by City
SQL> ed Wrote file afiedt.buf 1 select rpad( '* ', level*2, '* ' ) 2 from dual 3* connect by level <= 3 SQL> / RPAD('*',LEVEL*2,'*') -------------------------------------------------------------------------------- * * * * * *
WHERE t.something = 'something' AND (t.lastname = 'smith' or t.name <> 'john')
select * from case C left join P on P.case_id = C.case_id and P.primary_party != '' where P.case_id is null
UPDATE tContractsInTransit SET Paid = 'true' FROM tContractsInTransit cit INNER JOIN (SELECT CtrlNo ,SUM(Amt)/COUNT(DISTINCT CtrlNo) AS Tot FROM tContractsInTransit GROUP BY CtrlNo HAVING SUM(Amt)/COUNT(DISTINCT CtrlNo) = 0) t ON cit.CtrlNo = t.CtrlNo
SELECT r.Restaurant_ID, m.Item_Name, m.Item_price FROM restaurants r LEFT JOIN menu m ON r.Restaurant_ID=m.Rest_ID WHERE Item_ID=1
SELECT name FROM tbl_name GROUP BY name HAVING COUNT(name) = 1
Select * From YourTable Where IsDate([myDtField]) And DateDiff("d", DateValue([myDtField]), Date()) > 120
select cnt.loginid, COUNT(*) from contact cnt right join grpmem list on cnt.contact_uuid = list.member left join contact grp on grp.contact_uuid = list.group_id join contact_acctyp cntacc on cnt.contact_uuid = cntacc.contact_uuid where cntacc.c_acctyp_id in (select id from acctyp_v2 where sym like 'CDN%') GROUP BY cnt.loginid
;with numbered as ( SELECT event_type, department_name, effective_time, row_number() OVER (ORDER BY effective_time) row FROM a ) SELECT cur.event_type, cur.department_name, cur.effective_time FROM numbered cur LEFT JOIN numbered prev ON cur.row = prev.row + 1 WHERE cur.row = 1 or prev.event_type <> cur.event_type or prev.department_name <> cur.department_name ORDER BY cur.effective_time
from t1 in tab1 from t2 in tab2.Where(t2 => t2.SomeCol == t1.SomeCol).Take(1) select new { t1, t2 }
--will not count NULLS select @totalrecs= count(id) from table1 --will count NULLS select @totalrecs= count(*) from table1
SELECT * FROM table WHERE theDate < convert(date, GetDate())
SELECT CustomerType, COUNT(*), SUM(CASE WHEN Status = 'C' THEN 1 ELSE 0 END), SUM(CASE WHEN Status = 'A' THEN 1 ELSE 0 END), SUM(Amount) FROM Customers GROUP BY CustomerType ORDER BY CustomerType
INSERT INTO `wp_postmeta` (post_id, meta_key, meta_value) SELECT post_id, 'custom', custom FROM `wp_temp` WHERE custom IS NOT NULL UNION ALL SELECT post_id, '_custom', 'field_514e91e73640d' FROM `wp_temp` WHERE custom IS NOT NULL
SELECT SUM(CASE WHEN field_id_207 != '' then 1 else 0 end) as total_1, COUNT(exp_channel_data.entry_id) AS total_2 FROM exp_channel_data JOIN exp_channel_titles ON exp_channel_titles.entry_id = exp_channel_data.entry_id AND status = 'open' AND exp_channel_data.channel_id = '18' AND author_id = "CURRENT_USER"
dbo_agreements_1.end_date >= DateSerial(Year(Date()), Month(Date()) -1, 1) AND dbo_agreements_1.end_date < DateSerial(Year(Date()), Month(Date()), 1)
update old set NewID = new.NewID from ContactRecords as old inner join NewContact as New on new.OriginalID = old.OriginalID
DateTime startDate = DateTime.Now.Date.AddDays(-13).Date;
CREATE TEMPORARY TABLE tc AS (SELECT company.id AS cid, temp_company.scode AS tcode FROM temp_company INNER JOIN company ON temp_company.number = company.number WHERE temp_company.scode IS NOT NULL AND temp_company.scode != "") CREATE TEMPORARY TABLE rc AS (SELECT tc.cid as cid FROM tc LEFT JOIN company_scode ON tc.cid = company_scode.company_id WHERE tc.tcode = company_scode.code) SELECT * FROM tc WHERE tc.cid NOT IN (SELECT cid FROM rc)
select p.* from Table1 as p inner join (SELECT ProductName, MIN(Price) AS minPrice FROM Table1 GROUP BY ProductName) t on p.productname = t.ProductName and p.price = t.minPrice
debug($node);
sum(case when t.credit then t.amount else -t.amount end)
SQL> select 1 from dual where regexp_like('?:', '(?:)'); 1 ---------- 1 1 row selected.
SELECT months.id_month, Count(DISTINCT ad.email) FROM `months` LEFT OUTER JOIN `ad` ON id_month = Month(ad.created_at) AND Year(ad.created_at) = 2015 GROUP BY id_month ORDER BY id_month ASC
SELECT NAMA_AKUN, REPLACE(NAMA_AKUN, 'DOLLAR AMERICA', 'USD') AS NEW_NAMA_AKUN FROM MONDES_MSTR_CHART_OF_ACCOUNT WHERE INSTR(NAMA_AKUN, 'DOLLAR AMERICA') > 0;
CREATE TABLE #tmp_NoRotadayOff ( DayOfYear datetime , Rota varchar(10) COLLATE DATABASE_DEFAULT , RotaTemplate varchar(50) COLLATE DATABASE_DEFAULT );
SELECT * FROM exp_categories WHERE parent_id IN (4, 5, 6, 7) ORDER BY cat_id ASC;
SELECT * FROM [dbo].[tickets] WHERE t_date_time_issued > DATEADD(mm, - 30, GetDate()) AND Cast(t_date_time_issued as TIME) between '06:00' and '09:10'
INSERT INTO transactions(itemid, userid, tdate) SELECT TOP 1 items.ID, users.ID, NOW() FROM items, users ORDER BY Rnd(-(1000*items.ID*users.ID)*Time()), items.ID, users.ID
select t.* from (select t.*, dense_rank() over (partition by x order by y) as seqnum from atable t ) t where seqnum <= 2;
using (var dataContext = new DataContext(ConnectionString)) { dataContext.TABLE_NAME.Attach(modifiedEntity); dataContext.SubmitChanges(); }
select dte, count(*) from (select trip_id, min(date_trunc('day', timestamp)) as dte from t group by trip_id ) t group by dte order by dte;
select firstname, lastname, count(*) as `Name Count` from table group by firstname, lastname
SELECT * FROM YourTable WHERE X IN ( SELECT T1.X FROM YourTable T1 INNER JOIN YourTable T2 ON T1.X = T2.X WHERE T1.DATE <> T2.DATE );
IF EXISTS (SELECT * FROM sys.synonyms WHERE name = N'TABLE_SYNONYM') DROP SYNONYM [dbo].[TABLE_SYNONYM] IF @region_id not in (2,3) CREATE SYNONYM [dbo].[TABLE_SYNONYM] FOR [DB_US].[dbo].[mytable] IF @region_id = 2 CREATE SYNONYM [dbo].[TABLE_SYNONYM] FOR [DB_EU].[dbo].[mytable] IF @region_id = 3 CREATE SYNONYM [dbo].[TABLE_SYNONYM] FOR [DB_Asia].[dbo].[mytable] insert into [dbo].[TABLE_SYNONYM] (...) select ....
SELECT F.fruitName FROM tblFruits as F INNER JOIN tblFruitTagJunc AS FTJ on F.fruitID = FTJ.fruitID INNER JOIN tbltag as T ON FTJ.tagID = T.tagID GROUP BY F.fruitName HAVING SUM(iif(t.tag in ('Orange'), 1, 0) > 0 AND COUNT(t.tag) = 1;
CREATE TABLE locationCreatedNew SELECT * FROM location RIGHT JOIN locationdata ON location.id=locationdata.location_location_id;
create table #t ( name sysname, rows bigint, reserved varchar(50), data varchar(50), index_size varchar(50), unused varchar(50) ) EXEC sp_MSForEachtable 'insert into #t EXEC sp_spaceused ''?''' select name,rows,reserved,data,index_size,unused from #t
ORA-01922: CASCADE must be specified to drop 'THE_USER'
select category, series, CntS from ( select distinct count(category) over (partition by category) cntC, count(series) over (partition by category, series ) cntS, category, series from fruit ) Tab order by CntC desc, cntS desc;
select (select count(*) from data where 991 in (insurance1, insurance2, insurance3)) + (select count(*) from sat where 991 in (insurance1, insurance2, insurance3));
SELECT COUNT(u) FROM RAZUserBundle:User u WHERE u.id NOT IN ( SELECT u2.id FROM RAZUserBundle:User u2 JOIN u2.groups g WITH g.id = 70 )
sqlite> create table selfref (id integer primary key, name string, parent integer references selfref (id)); sqlite> .schema CREATE TABLE selfref (id integer primary key, name string, parent integer references selfref (id)); sqlite> insert into selfref values (null, "alice", null); sqlite> insert into selfref values (null, "bob", null); sqlite> insert into selfref values (null, "charlie", (select id from selfref where name = "alice")); sqlite> select * from selfref; 1|alice| 2|bob| 3|charlie|1 sqlite>
SELECT t.column1 AS "@Name", t.column2 AS Subcategory FROM TABLE t FOR XML PATH ('Category')
select c.*, e.cnt from [Contract] c inner join (select e.ContractId, count(*) as cnt from Envelope e group by e.ContractId having count(*) >= 10 ) e on e.ContractID = c.ID;
select a.name,b.manufacturer_id,c.id,c.item_desc from manufacturers as a inner join item_manufacturers as b on b.manufacturer_id=a.id inner join item as c on c.id=b.item_id
with recursive tc as( select $1 as player_id, 1 as level union select ph2.player_id, level+1 from tc, phone_hashes ph1, phone_hashes ph2 where tc.player_id=ph1.player_id and ph1.hash=ph2.hash and tc.level < 6 ) select distinct player_id from tc
UPDATE links1 INNER JOIN links2 ON (links1.URL = links2.URL) SET links1.UTitle = links2.title, links1.UDesc = links2.description
UPDATE products AS p JOIN categories AS c ON p.scategory = c.scategory SET p.fcategory = c.scategory
SELECT C.conContractID, COALESCE(C.conWkActual, C.conWkPlanned, C.conWkBaseline) AS 'YourDatecolumn', C.conService, C.conCapRev, C.conContractType, C.conSection, C.conContractStatus FROM Contracts C WHERE ConContractStatus = 'Cancelled';
SELECT /*+ INDEX (t index_name_on_col1) */ * FROM mytable t WHERE col1 IS NOT NULL
select * from cards_data where id in ( select cards_id from con_cards_colors group by cards_id having count(case when colors_id in (select id from colors where name in ('Red','Blue')) then 1 end) = 2 -- i.e. find all and count(*) = 2 -- i.e. find only those and no others );
SELECT CASE WHEN fruit IN ('orange', 'grapefruit') THEN 'citrus' ELSE fruit END, SUM(price) FROM inventory GROUP BY CASE WHEN fruit IN ('orange', 'grapefruit') THEN 'citrus' ELSE fruit END
use tempdb go CREATE TABLE example ( id BIT DEFAULT (0) ) INSERT example (id) VALUES (null) SELECT * FROM example
select column1, count (*) from mytable where column2 = column3 group by column1, column2;
Select distinct pair From table2 join table1 b on b.CUR = t.bas join table1 u on u.id = b.id and u.CUR = t.under
select idStudent, SUM( hourCourse * mark ) / SUM( hourCourse ) AS WeightedAvg from ( SELECT t.*, case when @idStudent<>t.idStudent then @cumSum:=hourCourse else @cumSum:=@cumSum+hourCourse end as cumSum, @idStudent:=t.idStudent FROM `test` t, (select @idStudent:=0,@cumSum:=0) r order by idStudent, `key` ) t where t.cumSum <= 30 group by idStudent;
;WITH CTE as (Select *, ROW_NUMBER()over(partition by OUTPUTVALUE order by id)rn From #Temp A Inner Join #Temp2 B On A.Id=B.Table1Id Where A.Value=1) SELECT OUTPUTVALUE FROM cte where rn >= 3
Insert into TagSoftarerel (SoftwareID, TagID) Select m.Id, (Select T.TagId from Tag T where T.Tag = m.Keyword) as TagId from MAIN m
DoCmd.SetWarnings False ' do stuff here DoCmd.SetWarnings True
SELECT email, COUNT(*) AS num_tables FROM (SELECT DISTINCT email FROM table1 UNION ALL SELECT DISTINCT email FROM table2 UNION ALL -- All the other tables ) t GROUP BY email HAVING COUNT(*) > 1
select a.city, count(b.city) as cnt from a left join b on a.id=b.city and b.active=1 group by a.id, a.city order by count(b.city) desc
<cfquery name='b'> SELECT ID , AVG( DECODE( Pen_Type, 'Type A', Pen_Price, 0 ) ) AS Price_A , AVG( DECODE( Pen_Type, 'Type B', Pen_Price, 0 ) ) AS Price_B , AVG( DECODE( Pen_Type, 'Type C', Pen_Price, 0 ) ) AS Price_C FROM Pen_Table WHERE Date_Purchase = #Date# GROUP BY ID </cfquery>
column title_column1 new_value vc1 column title_column2 new_value vc2 column title_column3 new_value vc3 select title_column1,title_column2,title_column3 from test_columns; select &vc1,&vc2,&vc3 from test_data;
createdb -p 5433 -T template0 db_name pg_restore -p 5433 --no-owner --role=owner2 -d db_name db_name.dump
SELECT IDIDAT, COUNT(*) FROM CA1665AFCV.SROISDPL T01 WHERE IDIDAT >= '20160101' AND IDORDT = 'FB' GROUP BY IDIDAT
$user = User::findOrFail($id); $user->getGroups(); foreach($user->groups as $group) { echo $group->name; }
SELECT PB_BANK_CODE, PB_BANK_NAME, ISNULL(SUM(PC_AMOUNT),0) FROM GLAS_PDC_BANKS inner join GLAS_PDC_CHEQUES on GLAS_PDC_BANKS.PB_BANK_CODE = GLAS_PDC_CHEQUES.PC_BANK_FROM WHERE PB_COMP_CODE='1' AND PB_BANK_CODE='025' AND ISNULL(PC_DISCD,'X') != 'C' AND PC_DUE_DATETIME BETWEEN '05/05/2008' AND '05/06/2008'
insert into table (all_Dates) SELECT * FROM OPENQUERY(USLinkedServer, 'SELECT getdate()') union SELECT * FROM OPENQUERY(UKLinkedServer, 'SELECT getdate()') union SELECT * FROM OPENQUERY(AUSLinkedServer, 'SELECT getdate()') . . .
DELETE * FROM 'list' WHERE id NOT IN ( SELECT id FROM 'list' ORDER BY id DESC LIMIT 25 )
select convert(varchar(10), getdate(), 105) + ' ' + SUBSTRING(CONVERT(varchar, getdate(), 100), 14, 4)+ ' ' + RIGHT(convert(varchar, getdate(), 100), 2)
table authorities: username id bob 1 bob 3 bob 5
select ServerName,Downloaded,Failed, RebootRequired, Administrator from Table1 t1 left join Table2 t2 on t1.ServerName=t2.ServerName
select contentID, title, created from content where created < dateadd(week,-3,getdate());
SELECT MTGUID * 1.35 as calculatedMTGUID, SUBSEL.* FROM ( SELECT BKRETAIL.* FROM BKRETAIL WHERE BKRETAIL.MKEY='SOMEKEY' UNION SELECT BKWHOLESALE.* FROM BKWHOLESALE WHERE MKEY='SOMEKEY') SUBSEL ORDER BY case STATUS WHEN 'RT' then 1 WHEN 'WH' then 2 WHEN 'OL' then 3 WHEN 'OD' then 4 WHEN NULL then 5 else 6 end;
SELECT COUNT(*) FROM ( SELECT Col1 FROM Table GROUP BY Col1 ) tbl
SELECT w.fizz FROM widgets w WHERE w.special_id = 2394 AND ( ( w.buzz != null AND w.foo = 12 ) OR ( w.blah = 'YES' AND w.num = 4 ) )
select a.mnth,b.leavecount from ( SELECT to_char(to_date(LVL,'MM'),'MM') mnth FROM (select level lvl from dual CONNECT BY LEVEL <=12) ) a ,(SELECT to_char(leavedate,'MM') AS MONTH,leavecount..."your query")b WHERE a.mnth=b.MONTH(+)
update fruittable set fruitvalue = (SELECT MAX (fruitvalue) FROM fruit WHERE fruitname IN ('apple','pear')); where fruitname in ('apple', 'pear');
select term, count(DISTINCT iso) as doc_frequency from countries , regexp_split_to_table(name, '[^\.\w]') term where term <> '' group by term;
<fieldType name="signatureNgrams" stored="false" class="solr.StrField"> <analyzer type="index"> <tokenizer class="solr.analysis.NGramTokenizerFactory" minGramSize="4" maxGramSize="4" /> <filter class="solr.LowerCaseFilterFactory"/> </analyzer> </fieldType>
SELECT Format(Sum(IIf(MONTH(Sale_PickupDateTime)=1,1,0))/Count(Sale_PickupDateTime) , "Percent") AS January FROM [Sales Table];
SELECT COUNT(1) FROM (SELECT t1.name as name1, t2.name as name2 FROM Locations t1, Locations t2 WHERE t1.name <> t2.name)
UPDATE mytable SET myfield = REPLACE(myfield, CHAR(0), '')
UPDATE t2 SET t2.id = t1.id FROM T t2 JOIN S1.<dbname>.dbo.T t1 ON t2.somefield = t1.somefield -- AND t2.otherfield = t1.otherfield
select distinct director, title, stars from (movie join rating using (mid)) m where stars in (select max(stars) from rating join movie using (mid) where m.director = director);
(CASE WHEN [Control_Stage2] IS NULL THEN NULL -- or -1 or what you like ELSE datediff(day,[Control_OpenDate],getdate()) END)
order by Table1.Name, Table2.Money
while not exists (select * from QueueTable) begin wait for delay '00:01' end
SET SERVEROUTPUT ON BEGIN -- A PL/SQL cursor FOR cursor1 IN (SELECT * FROM table1) LOOP DBMS_OUTPUT.PUT_LINE('Column 1 = ' || cursor1.column1 || ', Column 2 = ' || cursor1.column2); END LOOP; END; /
SELECT * FROM dbo.TestFunction (your_parameters_separated_by_commas)
UPDATE tbl2 t INNER JOIN tbl1 s ON(t.transaction_id = s.id) set t.transaction_id = s.id_trans
SELECT CAST(CAST(@ReminderDate AS Date) AS DateTime) + CAST(DATEADD(HOUR,-3,@ReminderTime) AS TIME)
SELECT firstName, lastName FROM Presidents WHERE endTerm > DATE_ADD(beginTerm, INTERVAL 4 YEAR)
create materialized view first_view as select a.column_one, b.column_two, c.column_three from table_a a join table_b b on a.id = b.aid join table_c c on b.id = c.bid; create materialized view second_view as select x.some_column, f.* from other_table x join first_view f on x.id = f.column_one;
select id, max(col1) as col1, max(col2) as col2, max(col3) as col3, max(col4) as col4 from t group by id;
SELECT SUM(CASE WHEN order.state = 3 AND order.source = 1 THEN 1 ELSE 0 END) AS equal, SUM(CASE WHEN order.state <> 3 AND order.source <> 1 THEN 1 ELSE 0 END) AS different FROM order;
SELECT Name, 'Users' AS Type FROM users WHERE name LIKE '%alex%' UNION SELECT Name, 'Admins' AS Type FROM admins WHERE name LIKE'%alex%'
SELECT ( SELECT COUNT( WiningComment) FROM Threads WHERE WiningComment IN (SELECT CommentsID FROM Comments WHERE UsersID=@UserID) ) as 'WinningAnswers', ( SELECT COUNT(CommentsID) FROM Comments WHERE UsersID=@UserID ) as 'TotalAnswers'
WITH MyCte AS (SELECT MyWeek = 1 UNION ALL SELECT MyWeek + 1 FROM MyCte WHERE MyWeek < 53) SELECT MyWeek, DATEPART(year, DATEADD(wk, -MyWeek, GETDATE())), DATEPART(month, DATEADD(wk, -MyWeek, GETDATE())), DATEPART(wk, DATEADD(wk, -MyWeek, GETDATE())) FROM MyCte
select B.caseNumber, ISNULL(count(C.checkupNumber) ,0) from BaseTable B left join Checkup C on B.caseNumber = C.caseNumber where B.patientId ='P201' group by B.caseNumber
... = MONTH(DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 MONTH));
rm db/development.sqlite3
SELECT POI.Name FROM POI INNER JOIN rtgitems ON POI.Vote=rtgitems.item where totalrate= (select min(totalrate) from rtgitems) GROUP BY POI.Name
Select case when t2.statusid = 3 then t2.Id end as MatchedId, case when t2.statusid <> 3 then t1.Id end as UnmatchedId ,t2.Number,t1.Date from Table1 t1 left join Table2 t2 on t2.Id = t1.Id;
delete from tbl where id NOT in ( select min(id) from tbl group by sourceid )
CREATE TRIGGER dbo.trg ON customer AFTER INSERT,UPDATE AS BEGIN -- SET NOCOUNT ON added to prevent extra result sets from -- interfering with SELECT statements. SET NOCOUNT ON; IF EXISTS (SELECT 1 FROM inserted WHERE comm_preference IN ('E', 'B') BEGIN INSERT INTO email_sent SELECT customerno, email, GETDATE() from inserted END END
SELECT a.*, b.city FROM tableA a LEFT JOIN tableB b ON a.ID = b.ID
with scd_table ( select a.* , lead(from_date,1,to_date('31/12/9999','dd/mm/yyyy')) over (partition by a order by from_date asc) as to_date from YOUR_TABLE a ) select * from scd_table where :d >= from_date and :d < to_date
ALTER TABLE Items ADD UNIQUE INDEX(ItemName, ItemSize);
--EXECUTE AS USER = 'Wanida'; SELECT * FROM fn_my_permissions('dbo.MyProc','OBJECT') ORDER BY subentity_name, permission_name;
ROW_NUMBER() OVER(PARTITION BY docRefID ORDER BY docExternalContent)
DROP SYNONYM syn_a; CREATE SYNONYM a FOR STAGEDB.SCHEMA.SOURCE; DROP SYNONYM syn_b; CREATE SYNONYM b FOR STAGEDB.SCHEMA.TABLEA; DROP SYNONYM syn_target; CREATE SYNONYM target FOR SOURCEDB.SCHEMA.DESTINATIONTABLE; MERGE INTO syn_target as TARGET USING (SELECT COLA, COLB, COLC FROM syn_a as A INNER JOIN syn_b as B ) AS SOURCE ON TARGET.ID = SOURCE.ID WHEN MATCHED THEN UPDATE-- WHEN NOT MATCHED INSERT
SELECT * FROM table1 WHERE Id IN ( SELECT Id FROM table1 GROUP BY Id HAVING COUNT(DISTINCT [Customer No_]) > 1 )
SELECT tbl.name FROM ( SELECT name FROM customer UNION SELECT name FROM vendor ) tbl
SELECT ABS(ROUND(DATEDIFF(MI,CONVERT(TIME,date1), CONVERT(TIME,date2))/60.0,0))
SELECT id, checkresult.pcname, pcuser, checkTime as lastCheckTime, TIMESTAMPDIFF(SECOND,checkTime,now()) as lastCheckAge, lastBackup, diff, threshold, backupStatus, TIMESTAMPDIFF(SECOND,lastBackup,now()) as ageNow FROM checkresult join (SELECT pcname, max(checkTime) as maxct FROM checkresult GROUP BY pcname ) pm on checkresult.pcname = pm.pcname and checkresult.checkTime = pm.maxct ORDER BY id desc;
update software s inner join equimentinventory ei on s.id = ei.id set s.name = "windows 7" where ei.item="computer"
INSERT INTO myCrazyHugeTable (column1Name, column2Name) VALUES ('column1Val', 'column2Val');
SELECT hero, AVG(pointEarned > 0) p FROM gamestatistics GROUP BY hero ORDER BY p DESC
SELECT date, SUM(case when payed = 1 then amount else 0 end) as PaidAmount, SUM(case when payed = 0 then amount else 0 end) as UnPaidAmount FROM events GROUP BY DATE;
select sum(t.population) from ( select population from table A union all select population from table B union all select population from table A ) t
ALTER DATABASE YourDatabaseName SET AUTO_CLOSE OFF;
SELECT g.naam,g.gebruikerID ,g2.naam,g2.gebruikerID FROM gebruiker g , gebruiker g2, vriend v WHERE g.gebruikerID = v.gebruikerID_Jezelf OR g2.gebruikerID = v.gebruikerID_Persoon AND g.gebruikerID IN(SELECT gebruikerID_Jezelf FROM vriend) OR g2.gebruikerID IN(SELECT gebruikerID_Persoon FROM vriend);
UPDATE tblOperation SET tblOperation.DateDifference = DateDiff("d",[tblOperation].[Date],[tblOperation].[FinalDate]), tblOperation.Tax = tblOperation.Value*tblOperation.Percentage/3000*(DateDiff("d",[tblOperation].[Date],[tblOperation].[FinalDate])), tblOperation.FinalValue = tblOperation.Value-(tblOperation.Value*tblOperation.Percentage/3000*(DateDiff("d",[tblOperation].[Date],[tblOperation].[FinalDate])));
CREATE UNIQUE INDEX foobar_test ON foobar (COALESCE(a_id, -1), COALESCE(b_id, -1), COALESCE(c_id, -1), ident) -- Nulls become -1 WHERE date_a is null and date_b is null; -- Only check when date_a and date_b is null
SELECT u.Name, c.[Description], hs.Duration FROM Users u CROSS JOIN Categories c LEFT OUTER JOIN HourlyStats hs ON u.UserID = hs.UserID AND c.EventID = hs.EventID
WITH cte AS ( SELECT *, ROW_NUMBER() OVER ( PARTITION BY Reg_No ORDER BY Transdate DESC ) AS RowNumber FROM unithistory ) SELECT * FROM cte WHERE RowNumber = 1
SELECT t.* FROM teams t WHERE NOT EXISTS (SELECT 1 FROM userteams ut WHERE t.teamname = ut.teamname AND ut.name = 'Gary')
add_months(trunc(add_months(sysdate, 10), 'YYYY'), 2) - 1
SELECT * FROM name WHERE strpos(LastName, FirstName) > 0;
SELECT id, timestamp, lat, lon FROM ( SELECT *, rn = ROW_NUMBER() OVER(PARTITION BY id ORDER BY timestamp DESC) FROM yourTable ) t WHERE rn = 1
SELECT SUM(Sale_Price) FROM sales WHERE Sale_Date < DATE '2015-10-12';
select td1.client_name,td1.TotalDebt,td2.TotalPayment from (SELECT client_name, sum(total_debts) as TotalDebt FROM client_debts GROUP BY client_name) as td1 inner JOIN (SELECT client_name, sum(payment) as TotalPayment FROM client_details GROUP BY client_name) as td2 on td1.client_name=td2.client_name
select i.id, s.date, t.type from (select distinct id from sample) i cross join (select distinct type from sample) t left join sample s on s.id = i.id and s.type = t.type;
SELECT prh.* FROM product_rate_history prh INNER JOIN (SELECT max(created_on) as maxco FROM product_rate_history WHERE prh.product_id = 16 GROUP BY Date(created_on) ) prh2 ON prh.created_on = prh2.maxco WHERE prh.product_id = 16 ORDER BY prh.created_on DESC;
SELECT <cols> FROM profiles INNER JOIN ( SELECT <primary key cols> FROM profiles WHERE x.sex='M' ORDER BY rating LIMIT 100000, 10 ) AS x USING(<primary key cols>);
ALTER TABLE table_name ALTER COLUMN column_name new_datatype nullability
Update t Set t.Email = '' Where t.Email in (Select email from YourTable group by email having count(*)>1)
SELECT pm.p_name "P_NAME", listagg(sm.s_number, ', ') WITHIN GROUP (ORDER BY pd.p_d_id) "S_NUMBER" FROM pattern_master pm, pattern_details pd, shift_master sm WHERE sm.s_id= pd.s_id AND pm.p_id = pd.p_id GROUP BY pm.p_name;
SELECT GROUP_CONCAT(ID) FROM tablename Where Running = 3
SELECT A.[id], Split.a.value('.', 'VARCHAR(100)') AS String FROM (SELECT [id], CAST ('<M>' + REPLACE([string], ',', '</M><M>') + '</M>' AS XML) AS String FROM TableA) AS A CROSS APPLY String.nodes ('/M') AS Split(a);
update your_table set lat_appx = substring(lat, 1, 6), long_appx = substring(`long`, 1, 6)
update table_1 set field_1 = table_2.value_1 from table_1 inner join table_2 on (table_1.id = table_2.id)
select PrimaryKeyColumn1, PrimaryKeyColumn2, stuff(((case when column_a = 1 then ',A' else '' end) + (case when column_b = 1 then ',B' else '' end) + (case when column_c = 1 then ',C' else '' end) ), 1, 1, '') as vals from . . .
select ALBUMS.category_id , ALBUMS.album_id , ALBUMS.album_name , ALBUMS.artist_id , ARTISTS.artist_name from ALBUMS inner join ARTISTS on ALBUMS.artist_id = ARTISTS.artist_id inner join CATEGORIES on ALBUMS.category_id = CATEGORIES .category_id where CATEGORIES.category_name = 'Your category name'
SELECT shops.*, shop_item.id AS attached FROM shops LEFT OUTER JOIN shop_item ON shops.id = shop_item.shop_id and shopt_item.item_id = 1;
select JOURNAL_NO, LINE_NO, SUM(AMOUNT), MAX(ACC_CODE) from ( select JOURNAL_NO, case when LINE_NO > 1000 then LINE_NO - 1000 else LINE_NO end as LINE_NO, AMOUNT, ACC_CODE from tablename ) dt group by JOURNAL_NO, LINE_NO
Previous Value := CALCULATE(SUM(Table[Value]) - CALCULATE(SUM(Table[Value]), PREVIOUSDAY(Table[date])))
$this->db->select('*'); $this->db->from('tbl_user'); $this->db->join('tbl_userinfo', 'tbl_user.user_id = tbl_userinfo.user_id'); $this->db->where('tbl_user.user_id', $data); $query = $this->db->get(); $result = $query->result(); return $result;
select ssw.* from sys.fulltext_system_stopwords ssw where ssw.language_id = 1033;
SELECT U.Name AS UserName, MAX(P.Date) AS LatestPost, (SELECT COUNT(F.userNameFollower) FROM Followers WHERE userID = U.userID) AS FollowerCount FROM User U INNER JOIN Post P ON (U.userID = P.userID) GROUP BY U.UserID
update your_table set your_column = your_column || '_[' || your_id || ']' where your_column is not null
SELECT i.* FROM checklist_item i INNER JOIN tab t ON i.tab_id = t.tab_id WHERE t.name = 'Household'
$sql = "UPDATE table SET salary = salary + 5 WHERE name = 'david' ORDER BY id LIMIT 1";
Select flights.name, flights.Departure from flights inner join Table2 on Table2.Dep = SUBSTRING(flights.Departure,1,4) and Table2.Arri = SUBSTRING(flights.Arrival,1,4) ;
SELECT p.id FROM Photo p JOIN PhotoConnect pc on pc.photo_id = p.id JOIN PhotoConnect pc1 on pc1.photo_id = p.id WHERE pc.outside_name = 'country' and pc.outside_key = 6 AND pc1.outside_name = 'region' and pc1.outside_key = 13 GROUP BY photo_id
SELECT a.user_id, b.user_id, count(*) AS num, collect_set(m.movie_title) FROM ratings a JOIN ratings b ON a.movie_id = b.movie_id JOIN movies m ON a.movie_id = m.movie_id WHERE a.user_id < b.user_id GROUP BY a.user_id, b.user_id ORDER BY num DESC;
select id, roomid, inv_date, count(room) from room_inventory group by id, roomid, inv_date having count(room) > 1;
SELECT u.id, u.name, u.isSpecial, d.country, d.zipCode FROM Users u LEFT JOIN Detals d ON u.id = d.userId WHERE u.name = 'Jorden' OR u.isSpecial = 1
UPDATE myTable SET voteCol = voteCol + 1 WHERE id = idOfInterest;
SELECT A.name, A.code, A.Account, A.remark, A.scheme FROM account_agent A INNER JOIN bulk_index B ON A.account = B.account WHERE A.scheme = 'as' AND A.code = '10'
select SubId, max(case when ProcessNumber = 802 then ReadTime end) as [802Time], max(case when ProcessNumber = 802 then Lineage end) as [802Lineage], .... from SourceTable group by SubId
SELECT * FROM [TIMESTAMP_ORGANISER].[dbo].[TEST_DB] ORDER BY timestamp, CASE WHEN remaining LIKE '%agentStateEvent%' THEN -1 WHEN remaining LIKE '%TerminalConnectionCreated%' THEN -2 ELSE -3 END
INSERT INTO t1_temp (id, NeighborhoodID, power, tag) SELECT id, NeighborhoodID, SUM(power), tag FROM CLOUD GROUP BY tag, NeighborhoodID ORDER BY NeighborhoodID
ALTER TABLE dbo.DEPARTMENT ALTER COLUMN BUDGET_CODE VARCHAR(100) ALTER COLUMN OFFICE_NUM VARCHAR(100)
select * from test where key0 >= '00 00 00 00 00 00' order by key0; key0 ------ (0 rows) select * from test where key0 >= '00 00 00 00 00 00' COLLATE "C" order by key0; key0 ---------------------------------------- 00 00 00 00 0000 (1 row)
select bid_id, status, created_at from ( select bid_id, status, created_at, row_number() over(partition by bid_id order by created_at desc) as rn from tablename ) x where x.rn = 2;
select t1.CustomerId, t1.CustomerName, max(case when seqnum = 1 then PhoneNmber end) as PhoneNmber1, max(case when seqnum = 2 then PhoneNmber end) as PhoneNmber2 from table1 t1 left join (select t2.*, row_number() over (partition by customerId order by customerId) as seqnum from table2 t2 ) t2 on t1.CustomerId = t2.CustomerId group by t1.CustomerId, t1.CustomerName;
CREATE VIEW database.pages_view AS SELECT p.p_name, p.slug, i.image, t.title, t.text, s.* FROM database.pages p LEFT JOIN database.page_image i ON p.id = i.ages_id LEFT JOIN database.page_text t ON p.id = t.pages_id LEFT JOIN database.sections s ON p.id = t.pages_id WHERE p.visible = 1;
update LTC_NEW.pfields_content c join LTC_OLD.phpbb_users u on c.member_id = u.user_id SET c.field_5 = u.user_gender
SELECT Title, COUNT(1) AS TitleCount FROM MaliciousCodeAlertDocument GROUP BY Title HAVING COUNT(1) > 1
SELECT [user_id], [first_name], COUNT(m.sender_id) as number_of_messages FROM [Member] LEFT JOIN [Message] m ON user_id = m.sender_id AND m.message_type = 0 GROUP BY [Member].[user_id], [first_name] ORDER BY number_of_messages DESC
BEGIN FOR cc IN (SELECT owner, table_name FROM all_tables WHERE tablespace_name = :x AND table_lock = 'DISABLED') LOOP EXECUTE IMMEDIATE 'ALTER TABLE "' || cc.owner || '"."' || cc.table_name || '" ENABLE TABLE LOCK'; END LOOP; END;
# NULL for appID INSERT INTO Applications VALUES (NULL, "app name") # NULL for fileID, LAST_INSERT_ID() for recently inserted appID INSERT INTO files VALUES (NULL, LAST_INSERT_ID(), "file name")
SELECT InstructorDetails.Name, count(*) totalCount FROM Instructor i INNER JOIN Person as InstructorDetails ON InstructorDetails.ID = i.InstructorID INNER JOIN Student as Mentees ON Mentees.MentorID = i.InstructorID GROUP BY InstructorDetails.Name
SELECT t1.`INDEX`, t1.`INDEX2`, t1.`SOMENUMBER` FROM TEST t1 INNER JOIN (SELECT `INDEX`, `INDEX2`, MAX(`DATE`) DATE FROM TEST GROUP BY `INDEX`, `INDEX2`) t2 ON t1.INDEX = t2.INDEX AND t1.INDEX2 = t2.INDEX2 AND t1.DATE = t2.DATE
DATEDIFF(second, '1 Jan 1970', tbl.LastChangeDate)
SELECT ClientId, body, MAX(DateModified) FROM Activity GROUP BY ClientId, body
SELECT counties.* FROM counties INNER JOIN (importedpatients INNER JOIN patients ON importedpatients.patientid = patients.patientID) ON counties.countyid = patients.countyid
update criminals set charge1 = replace(charge1,substring(charge1, charindex('#',charge1), len(charge1)),'') where charindex('#',charge1) > 0
ArrayList<Integer> partNumbers = new ArrayList<Integer>(); partNumbers.add(999); partNumbers.add(777); partNumbers.add(1234); // set up Database database = new Database(getConnection()); Table<Inventory> inventoryTable = database.getTable(Inventory.class); ArrayListSelectOperation<Inventory> operation = new ArrayListSelectOperation<Inventory>(inventoryTable, "partNumberIn"); // show results for (Inventory inventory: operation.selectAll(partNumbers)) System.out.println(inventory.getPartNumber());
DECLARE @QueryTime DATETIME SET @QueryTime = GetDate() INSERT INTO TableB SELECT X, @QueryTime FROM TableA SELECT X, Y FROM @TableA
IF @existPerson is null
insert into TBL3 select t1.col1, t2.col2 from (select row_number() over (order by NEWID()) rownum, col1 from TBL1) t1 inner join (select row_number() over (order by NEWID()) rownum, col2 from TBL2) t2 on t1.rownum = t2.rownum go 10
DECLARE @MaxKeyLength INT = (SELECT MAX(LEN([Name])) FROM testTable) select '(''{' + cast(UniqueId as varchar(MAX)) + '}'',''' + LEFT(LTRIM([Name]) + ''', ', @MaxKeyLength + 4) + '''' + Address+ '''),' from testTable;
LTRIM(RTRIM(EB.Liter))+'L '+LTRIM(RTRIM(EB.CC))+'cc '+'-ci'+LTRIM(RTRIM(EB.BlockType))+LTRIM(RTRIM(EB.Cylinders))+ + '('+ LTRIM(RTRIM(EB.EngBoreIn))+'x'+ LTRIM(RTRIM(EB.EngStrokeIn))+'; '+ LTRIM(RTRIM(EB.EngBoreMetric))+'x'+ LTRIM(RTRIM(EB.EngStrokeMetric)) +')' as EBase
select id,entity_type,likes_count from ( SELECT Row_number()OVER (partition BY entity_type ORDER BY likes_count DESC)rn,id,entity_type,likes_count FROM elements ) A ORDER BY rn, CASE entity_type WHEN 'Ride' THEN 1 WHEN 'Part' THEN 2 ELSE 3 END
SELECT name, surname, SUM(absentdays) AS total_absent_days FROM (SELECT name, surname, DATEDIFF("d", fromdate, todate) AS absentdays FROM DiseaseReport D, Employees E WHERE E.number = D.empnumber ) GROUP BY name, surname
Select * from ::fn_dblog(null,null)
CREATE TRIGGER mytrigger BEFORE INSERT ON mytable BEGIN SELECT CASE WHEN (SELECT COUNT (*) FROM mytable) >= 3 THEN RAISE(FAIL, "Activated - mytrigger.") END; END;
UPDATE `wp_posts` SET `post_content` = (SELECT CONCAT(SUBSTRING_INDEX(`post_content`,@search,@pos),'4321',SUBSTRING_INDEX(`post_content`,@search,(@pos-1-(LENGTH(`post_content`)-LENGTH(REPLACE(`post_content`,@search,'')))/LENGTH(@search)))));
select (case country when @c then @co = @co +1 else @co = 1, @c = country end ) as ax, country, country_id, town, IF(town_id = param_ti, population_c, NULL) as pop from tb_town a left join tb_country b on b.country_id = a.country_id;
SELECT DecadeStart, MAX(MovieCount) from ( SELECT m.year AS DecadeStart, ( SELECT COUNT(*) FROM Movie m2 WHERE m2.year >= m.year AND m2.year < (m.year + 10) AND m2.year IS NOT NULL) as MovieCount FROM Movie m GROUP BY m.year ) movie ;
SELECT COUNT(*) FROM tbl WHERE letter < 'F'
SELECT coll.title AS CollectionTitle, cont.CollectionID, cont.title AS ContainerTitle, cont.ID as ContainerID, cont.LevelContainerID, cont.ContentID, user.Title, user.Value, user.EADElementID FROM tblCollections_Content cont JOIN tblCollections_Collections coll ON cont.collectionid = coll.id JOIN tblCollections_UserFields user ON cont.ContentId = user.ContentId WHERE cont.title is NOT NULL ORDER BY CollectionID, ContainerID
select count(t1.id), t1.variety_id, t1.name from tblItem t1 inner join tblItem t2 ON t2.order_id = t1.order_id and t2.variety_id = 4005 where t1.variety_id != 4005 GROUP BY t1.variety_id, t1.name ORDER BY count(t1.id) DESC LIMIT 5;
SELECT p1.cost AS V1, p2.cost AS V2 , p3.cost AS V3 FROM product p1 LEFT JOIN product p2 on p2.id = 2 LEFT JOIN product p3 on p3.id = 3 WHERE p1.id = 1
select i_id, option, p_id from ( select i_id, option, p_id, row_number() over (partition by i_id order by case option when 'C' then 0 when 'B' then 1 when 'A' then 2 end) takeme from thetable where option in ('A', 'B', 'C') ) foo where takeme = 1
Select StartDate, [Status]=Case when DATEDIFF(m,StartDate,(Select MAX(Date) from Table2))>6 then 'Expired' Else 'Valid' end From Table1 where EndDate is not null
name = db.execute "SELECT price FROM Products WHERE product_code = ?", bind_variable_here
SELECT Nz(s1.CountOfPatient_ID,0) + Nz(s2.CountOfAll_ID,0) FROM [SELECT Count(Patient_ID) AS CountOfPatient_ID FROM Research]. AS s1, [SELECT Count(All_ID) AS CountOfAll_ID FROM Research]. AS s2
var s = "Welcome [CT Name=\"UserName\" /], We hope that you will enjoy our services and your subscription will be expired on [CT Name=\"ExpiredDate\" /]."; var pattern = "\\[CT\\s\\w+=\"\\w+\"\\s/\\]"; var matches = Regex.Matches(s, pattern); foreach (var match in matches) { Console.WriteLine(match.ToString()); } Console.ReadLine();
SELECT * FROM information_schema.columns c with (Nolock)
select ItemName, (select sum(Price) from Items) as AllPrices from Items
select count(*) from first_table f where not exists (select 1 from second_table s where s.infoid = f.id)
%% Converting of the UUIDs into integer C = unique(session); N = length(session); session2 = zeros(N, 1); for i = 1:N session2(i) = find(strcmp(C, session(i))); end
select * from events a events p on a.eventid = p.eventid and a.status = 'acknowledged' and p.status = processed;
select a, b, c from example join (select a, max(c) max_c from example group by a) max_c on example.a = max_c.a and example.c = max_c.max_c
SELECT emp_no, owner_id FROM ( SELECT emp_no ,owner_id ,COUNT(DISTINCT owner_id) OVER (PARTITION BY emp_no) c FROM TableB b INNER JOIN TableA a ON b.aid = a.aid ) WHERE c > 1;
select a.id, group_concat(c.id) from a join categories c on concat(', ', c.catename, ', ') like concat('%, ', name, ', %') group by a.id;
(select t.*, u.Name from thread_message t left join users u on FromUserId=u.Id where ToUserId=1) union (select t.*, u.Name from thread_message t left join users u on ToUserId=u.Id where FromUserId=1)
WITH cte AS ( SELECT *, rank() OVER (ORDER BY <something>) AS rnk FROM tbl ) SELECT * FROM cte WHERE rnk <= n;
SELECT emp.name, emp.lastname, emp.birthdate, emp.gender FROM employee emp inner join (select 1 as a union all select 2) a on 1 = 1 WHERE employeeid = 1
select d.`name` from z_dealer d where (select count(*) from z_order o WHERE o.promo_code = d.promo_code AND o.date_ordered > '2015-01-01') = 0
SELECT t.name FROM TEACHERS t JOIN CLASS c ON c.teacherid = t.teacherid JOIN STUDENTS s ON s.studentid = c.studentid AND s.name IN ('John', 'Bob') GROUP BY t.name HAVING COUNT(DISTINCT s.name) = 2
Set .Recordset = rs .Refresh
SELECT r.EventName, e.TotalSeats - SUM( r.NumSeats ) FROM Reservation r JOIN Event e ON e.Name = r.EventName GROUP BY r.EventName, e.TotalSeats;
SELECT dboUser.User, dboComputer.ComputerName FROM dboUser LEFT JOIN dboComputer ON dboUser.User = dboComputer.User WHERE dboUser.User IN ('user1', 'user2', 'user3');
select a.*, sum(SequenceStart) over (partition by user order by date) as seq from (select a.*, (case when date > dateadd(day, 45, lag(date) over (partition by user order by date)) then 1 else 0 end end) as SequenceStart from appointment a ) a;
SELECT pkm.pkm_code, pkm.pkm_name, group_concat(type.type_name) as typename FROM poketype JOIN pkm ON pkm.pkm_code=poketype.pkm_code JOIN type ON poketype.type_code=type.type_code WHERE pkm.pkm_code<=151 GROUP BY pkm.pkm_code, pkm.pkm_name;
INSERT INTO NEWTABLE (ID, VALUE, NEWVALUE) SELECT ID, VALUE, CASE OLDVALUE WHEN 'A' THEN 'Y' WHEN 'B' THEN 'Z' ELSE OLDVALUE END FROM OLDTABLE;
select case when extract(day from date_field) <= 25 then date_trunc('month', date_field + interval '3 months') else date_trunc('month', date_field + interval '4 months') end from t
SELECT * , prev_value = ( SELECT TOP 1 NewCustomerValue FROM #CustomerExampleLog l WHERE c.CustomerRecordId = l.CustomerRecordId AND l.NewCustomerValue <> c.CurrentCustomerValue ORDER BY LogCreateDate DESC ) FROM #CustomerExample c
SELECT * FROM `Fac__Invoice` ORDER BY CAST(`Fac__Invoice`.`invoice_number` AS UNSIGNED) ASC
sqlite3 your.db "pragma table_info(your_table)"
update table1 set "date" = to_date(date_txt, 'MM/DD/YYYY HH:MI:ss AM')
FROM subscriptions JOIN users ON users.user_id = subscriptions.following FROM subscriptions left JOIN users ON users.user_id = subscriptions.following FROM subscriptions CROSS JOIN users FROM subscriptions JOIN users ON users.referred by_id = subscriptions.following
SELECT cr.* FROM cliche c INNER JOIN cliche_revisao cr ON c.cliche_pk = cr.cliche_pk WHERE cr.numero = (SELECT MAX(number) FROM cliche_revisao cr2 WHERE cr2.cliche_pk = cr.cliche_pk)
UPDATE table_name SET timeout = timeout + interval '12' hour WHERE timeout > timein;
SELECT a.ID, SUBSTRING(d.NameList,1, LEN(d.NameList) - 1) Names FROM a CROSS APPLY ( SELECT DISTINCT [NAME] + '; ' FROM B WHERE A.ID = B.DupID FOR XML PATH('') ) D (NameList)
SELECT * FROM table1 WHERE CONCAT(column1, column2) = '0123456789';
UPDATE Orderdetails od INNER JOIN Titles t ON od.id = t.id SET t.No_of_copies_in_inventory = (t.No_of_copies_in_inventory - o.QtyOrdered) WHERE od.id = 'idhere'
SELECT tblSalaryBand.BandName, tblSalaryBandYear.BandMax, tblSalaryBandYear.BandMin, tblSalaryBand.ID AS SalaryBandID FROM tblSalaryBand LEFT JOIN ( SELECT * FROM tblSalaryBandYear WHERE ReviewYearID = [Forms]![frmHome]![SelectedYear] ) AS SBY ON tblSalaryBand.ID = SBY.SalaryBandID
SELECT REPLACE(note,';','') AS [note] FROM @T
LOAD DATA LOCAL INFILE 'c:/mytestfile.csv' INTO TABLE report.test FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n' IGNORE 1 LINES (ONE, TWO)
declare @sumc decimal declare @sumd decimal set @sumc=0 set @sumd=0 update myTable set @sumc+= case typ when 'c' then amn else 0 end, flwc=@sumc, @sumd+= case typ when 'd' then amn else 0 end, flwd=@sumd
DECLARE @currentDate DATE = '20160404' SELECT Status = CASE WHEN DueDate <= @currentDate AND ISNULL(Status, '') <> 'Complete' THEN 'Late' ELSE Status END, COUNT(*) FROM DispatchStatus GROUP BY CASE WHEN DueDate <= @currentDate AND ISNULL(Status, '') <> 'Complete' THEN 'Late' ELSE Status END
SELECT pd_id, pd_title, pd_description, pd_colour, pd_price,pd_large_image,pd_date,cat_sub_id_3,pd_new FROM product WHERE cat_sub_id_1 = '".$cat_sub_id."' AND cat_parent_id='".$cat_parent_id."' AND pd_id = (select max(pd_id) from product) GROUP BY pd_title
DECLARE @SQLQuery varchar(500) SET @SQLQuery = 'SELECT * FROM Employees WHERE EmployeeID = 123' EXECUTE(@SQLQuery)
SELECT t.name_id, t.last_name, a.street_address FROM NAME t JOIN ADDRESS a ON a.name_id = t.name_id JOIN (SELECT n.last_name FROM NAME n GROUP BY n.last_name HAVING COUNT(*) > 1) nn ON nn.last_name = t.last_name
CREATE TRIGGER trgCustInfo_Status ON CustInfo AFTER INSERT AS BEGIN DECLARE @id INT SELECT @id = Id FROM ( SELECT Id, ROW_NUMBER() OVER (ORDER BY Id DESC) rn FROM CustInfo ) t WHERE rn=2 UPDATE CustInfo SET EndDate = CAST(GETDATE() AS DATE), Status = 'OFF' WHERE Id = @id END
SELECT a.* FROM user a LEFT JOIN event b ON (b.user = a.id AND b.event = 'userjoined') WHERE a.joineddt < '1 week ago date' AND b.id IS NULL
SELECT * FROM MyTable WHERE parentId = '001' AND childId = (SELECT MAX(childId) FROM MyTable WHERE parentId = '001')
Select * from Admissions Where DATEDIFF(dd,AdmitDateTime,DepartDateTime)=0
SELECT * FROM MyTable WHERE CreateTime > DateAdd("d", -3, Now())
SELECT DISTINCT task_group FROM query_tst As a WHERE ( (NOT EXISTS ( SELECT NULL FROM query_tst As b WHERE ( (a.task_group = b.task_group) And (b.task_name <> 'Initial') And (b.performed_by <> 'AUTO') ) )) );
MyModel.objects.extra(group='FLOOR(quantity/100)')\ .values('group')\ .annotate(count=Sum('quantity'))\ .order_by()
SELECT MAX((SELECT AVG(watts) FROM tblworkoutdata d2 WHERE d2.workoutsummaryid = d1.workoutsummaryid AND d2.ticks BETWEEN d1.ticks AND d1.ticks + 60)) AS theMax FROM tblworkoutdata d1 WHERE workoutsummaryid = 198
SELECT *, DATEDIFF(start_time, CURDATE()) AS diff FROM events WHERE start_time >= CURDATE() OR ( start_time <= CURDATE() AND end_time >= CURDATE() ) ORDER BY CASE WHEN diff > 0 THEN 0 ELSE 1 end, diff ASC;
select entity_id from table where value = 1 intersect select entity_id from table where value = 2 select t1.entity_id from table t1 join table t2 on t1.entity_id = t2.entity_id where t1.value = 1 and t2.value = 2
select * from t_items where (code ='#itemcode#' and #itemcode# is not null) OR (definition like '%#definition#%' and #definition# is not null)
begin ctx_ddl.create_preference('my_multi', 'MULTI_COLUMN_DATASTORE'); ctx_ddl.set_attribute('my_multi', 'columns', 'column1, column2, column3'); end; create index myindex on mytable(docs) indextype is ctxsys.context parameters ('DATASTORE my_multi');
SELECT id, first, last, CASE WHEN first IN (q1,q2) THEN 1 ELSE 0 END + CASE WHEN last IN (q1,q2) THEN 1 ELSE 0 END AS points FROM dbo.users ORDER BY points DESC;
db.execSQL("DELETE FROM "+ TABLE_SERVER_CONTACTS);
select to_char(event_date + (l - 1),'dd/mm/yyyy') from tab1 t left outer join ( select level l from dual connect by level <= (select max(rang) + 1 from tab1) ) on l <= rang + 1 order by event_date, 1;
select a.orgid, b.orgaddressid, c.address from organization a left join organization_address b on a.orgid = b.orgid and b.isprimaryaddress = 'YES' left join address c on b.orgaddressid = c.addressid where a.orgid = 1;
CEILING(DATEDIFF(MONTH, DATE1, DATE2) / 12.0) as Total
SELECT customer , COUNT(DISTINCT product) ttl -- DISTINCT is only necessary if (customer,product) is NOT unique FROM t WHERE product IN ('p1', 'p2') GROUP BY customer HAVING COUNT(*) = 2 -- where 2 is equal to the number of items in IN();
UPDATE records SET earnings= (SELECT SUM(rate) FROM leads WHERE records.user_id=leads.user_id AND leads.datetime >= records.date And leads.datetime < records.date [+ one day]) -- however you do that in MySQL
SELECT * FROM #YourTable WHERE Batch IN (SELECT DISTINCT BATCH FROM #YourTable WHERE MajorCode >= 4000)
SELECT userName FROM tblUsers ORDER BY date ASC,score DESC
SELECT * FROM images LEFT JOIN links AS l1 ON l1.INO = images.INO LEFT JOIN tags AS t1 ON t1.TagNO = l1.TagNO LEFT JOIN links AS l2 ON l2.INO = images.INO LEFT JOIN tags AS t2 ON t2.TagNO = l2.TagNO [...] WHERE t1.tagNO = $tag1 AND t2.tagNO = $tag2 [...]
SELECT coral.name, COUNT(coralsampling.sampleno) number_of_samples FROM coral JOIN coralsampling ON coral.coralcode = coralsampling.coralcode AND coralsampling.dateofsampling BETWEEN '2007/1/1' AND '2008/1/1' GROUP BY coral.name HAVING COUNT(coralsampling.sampleno) > 1
CHECK(team_a_id < team_b_id)
SELECT Article.ID, Article.Title, Article.Content, COALESCE(Article_Likes.Time,'NOT LIKED') AS Time FROM Articles LEFT JOIN Article_Likes ON Article.ID = Article_Likes.ArticleID WHERE Article.ID = (ArticleID) LIMIT 1
select * from your_table order by case when colA > 0 then 1 when colA = 0 then 2 when colA < 0 then 3 end, colB
Select A,B,C From Table Where REGEXP_LIKE(Field, '[aeiou]{3,}', 'i');
SELECT Date, ColumnA, ColumnB FROM TableName WHERE Date = (SELECT max(Date) FROM TableName)
select id1,id2,id3, date1, isnull(lead(date1) over(partition by id1,id2,id3 order by date1)-1, '99991231') as date2 from test
SELECT OS_NAME FROM OS WHERE VERSION LIKE '*1*'
SELECT IFNULL((SELECT _id FROM empty_table LIMIT 1), 1)
SELECT CONCAT('Q', QUARTER(inv.duedate), ' ', YEAR(inv.duedate)) as quarter, SUM(inv.total) as total FROM invoices inv LEFT JOIN clients cli ON inv.client_id = cli.id WHERE cli.country = 'CA' GROUP BY quarter
WITH singleRow as ( select count(way), way from planet_osm_line group by way having count(way) = 1 ) SELECT P.* FROM planet_osm_line P JOIN singleRow S ON P.way = S.way
SELECT * FROM tbl WHERE (Column_1 = 'PENDING') OR (Column_2 = 'PENDING') OR (Column_3 = 'PENDING')
create table #inserted(insertorder int identity(0,1), prodId int, orderQuantity int ... <matches inserted row>) --cursor loop insert destination_table(prodId, orderQuantity, ...) output inserted.* into #inserted /*output inserted.* will just select it */ values @prodId, @orderQuantity ... --end loop --inserted rows; select * from #inserted order by insertorder
Declare @myDate Datetime Set @myDate = dateadd(HOUR, 5, getdate()) SELECT Left(Convert(varchar(10),@myDate,21),10) + stuff(right(convert(varchar(26), @myDate, 109 ), 15 ), 7, 7, ' ')
select [Level],Val from ( SELECT '0' as [Level], [Col001] as Ord, [Col001] as Val FROM @DataSource union SELECT '1' as [Level], [Col001]+[Col002] as Ord, [Col002] as Val FROM @DataSource union SELECT '2' as [Level], [Col001]+[Col002]+[Col003] as Ord, [Col003] as Val FROM @DataSource union SELECT '3' as [Level], [Col001]+[Col002]+[Col003]+[Col004] as Ord, [Col004] as Val FROM @DataSource ) as T1 ORDER BY Ord,[Level]
strDB = xlWb.Path & "\database\dbQueries.accdb" conn.Open "Driver={Microsoft Access Driver (*.mdb, *.accdb)};" & _ "Dbq=" & strDB & ";" & _ "Trusted_Connection=Yes;"
SELECT T1.ItemNum, T2.mySplits as Substitute FROM ( SELECT *, CAST('<X>'+replace(T.Substitutes,'/','</X><X>')+'</X>' as XML) as my_Xml FROM Table1 T ) T1 CROSS APPLY ( SELECT my_Data.D.value('.','varchar(50)') as mySplits FROM T1.my_Xml.nodes('X') as my_Data(D) ) T2
SELECT COUNT(s.id) FROM salesperson s, businesstrip b WHERE b.id = @BusinessTrip_ID AND s.isEligibleForTrip AND (s.canSpeakFrench OR NOT b.requiresFrench)
IF CAST(DateField1 AS DATE) = CAST(DateField2 AS DATE)
SELECT value FROM (SELECT value, dense_rank() over (order by value asc) rnk FROM table) WHERE rnk = 2
select users.id, (users.msg_limit - subq.msgs_used) as msgs_available from users inner join (select sum(msg_log.cnt) as msgs_used from msg_log where weekofyear(msg_log.date) = weekofyear(now()) and msg_log.user = :user_id_param) as subq;
INSERT IGNORE INTO `table` SELECT `alt1`.`nid`, `alt2`.`realm` FROM `table` AS `alt1`, `table` AS `alt2`
-- Clustered index (C index) NCCol2 IDA lockhash (these values are the "identifier" of locks) ------ --- -------------- 1 11 (29cf3326f583) 2 22 (31178495a25a) -- Non-Clustered index (NC index) NCCol2 lockhash ------ -------------- 1 (8194443284a0) 2 (61a06abd401c)
SELECT a.id, (SELECT count(*) FROM ancestors_table t where t.ancestors LIKE CONCAT('%,',a.id,',%') ) FROM ancestors_table a;
SELECT * FROM table ORDER BY RAND() LIMIT 40;
Select count(js_id) from yourtable WHERE DATEDIFF( m, applied_date, GETDATE() ) = 0
DELIMITER $$ DROP TRIGGER /*!50032 IF EXISTS */ `TR_Ebook`$$ CREATE TRIGGER `TR_Ebook` AFTER INSERT ON `Ebook` FOR EACH ROW BEGIN IF NOT EXISTS (SELECT 1 FROM MisLibros WHERE NEW.IdEbook = MisLibros.IdEbook) THEN INSERT INTO MisLibros (IdEbook) VALUES (NEW.IdEbook); END IF; END; $$ DELIMITER ;
select m.groupId from Members m group by m.groupId having count(*) > 1 and sum(case when m.userid = 1 then 1 else 0 end) > 0;
SELECT t1.Id_thread, t2.Name, t1.Date FROM t1 JOIN t2 ON t1.Id_thread = t2.Id_thread GROUP BY t1.Id_thread
SELECT DateTo,(((((EXTRACT(YEAR FROM Ht_LoanSusp.DateTo))-(EXTRACT(YEAR FROM Ht_LoanSusp.DateFrom)))*12)+ (EXTRACT(MONTH FROM Ht_LoanSusp.DateTo))-(EXTRACT(MONTH FROM Ht_LoanSusp.DateFrom)))+1) AS NoOfMonth FROM HT_LoanSusp
DECLARE @NewLineChar AS CHAR(2) = CHAR(13) + CHAR(10) PRINT ('SELECT FirstLine AS FL ' + @NewLineChar + 'SELECT SecondLine AS SL')
select a,b, rank() over (partition by b order by a) c from tbl order by a;
ALTER TABLE MY_TABLE ADD COLUMN NEW_COLUMN BLOB(2147483647); UPDATE MY_TABLE SET NEW_COLUMN=MY_COLUMN; ALTER TABLE MY_TABLE DROP COLUMN MY_COLUMN; RENAME COLUMN MY_TABLE.NEW_COLUMN TO MY_COLUMN;
select PK_Branch, [Branch Name DE], Country from DimBranch where ([Branch Name DE] like 'Lyss (CH)' or [Branch Name DE] like 'Sevilla') and Country like 'Spain'
SELECT * , lead(action_time) OVER (PARTITION BY user_id ORDER BY action_time) - action_time AS time_spent FROM tbl;
WITH actions(action) AS( VALUES ('X'),('Y'),('Z')) SELECT d.action ,Count(DISTINCT a.userid) FROM table1 as a LEFT JOIN table1 AS b ON a.userid = b.userid AND b.action = 'Y' AND a.timestamp < b.timestamp LEFT JOIN table1 AS c ON a.userid = c.userid AND c.action = 'Z' AND b.timestamp < c.timestamp JOIN actions AS d ON d.action IN (a.action, b.action, c.action) WHERE a.action = 'X' GROUP BY d.action
INSERT INTO ChatArchive (MsgId, MsgText, Filtered, LastFetched) SELECT MsgID, MsgText, Filtered, LastFetched FROM ChatCurrent WHERE ID <= (SELECT MAX(ID) from ChatCurrent) - 500; DELETE FROM ChatCurrent WHERE MsgId <= (SELECT MAX(MsgId) FROM ChatArchive);
SELECT SQL_CALC_FOUND_ROWS i.id_msg, i.id_user_from from_id, i.id_user_to to_id, u_from.name from_name, u_to.name to_name, i.message FROM inbox AS i INNER JOIN user AS u_from ON u_from.id_user = i.id_user_from INNER JOIN user AS u_to ON u_to.id_user = i.id_user_to WHERE (i.id_user_from = 1 AND i.id_user_to = 2) OR (i.id_user_from = 2 AND i.id_user_to = 1) ORDER BY date_msg DESC
SELECT name, repeat_status FROM `x` WHERE labref = '111' GROUP BY name ,repeat_status;
tbl_user UserID | firstName | Email | Password | LoginArea | GroupID 1 , Bill , email@email1.com , passwordhash344, Backend | 2 2 , Paul , email@email2.com , passwordhash123, Backend | 3
select * from mytable where REPLACE( `productcode` , ' ' , '' ) like '%searchparam%'
SELECT SUM(amount) totalamount, GROUP_CONCAT(amount) amounts, GROUP_CONCAT(doc_number) docno, doc_date docdate, scheme_description schemedesc FROM ( SELECT scheme_description, doc_date, doc_number, SUM(amount) amount FROM credit_notes GROUP BY scheme_description, doc_date, doc_number) t GROUP BY scheme_description, doc_date
SELECT f1.fUID, f1.fName FROM friends f1, friends f2 WHERE f1.UID = X1 AND f2.UID = X2 AND f1.fUID = f2.fUID
SELECT i.item_id, group_concat(p.property_id, ':', p.property_value separator ';') as properties FROM Item i INNER JOIN Property p ON i.item_id = p.item_id GROUP BY i.item_id;
select id, count(*) from (select x.*, row_number() over(partition by id order by ord) - row_number() over(partition by id, seg order by ord) as grp from tbl x) x where seg = 'B' group by id, grp order by grp
ADOQuery1.SQL.Text := 'INSERT INTO [dbo].[client] ([Meno],[Priezvisko]) ' + 'VALUES(:Meno, :Priezvisko)'; ADOQuery1.Parameters.ParamByName('Meno').Value := Edit1.Text; ADOQuery1.Parameters.ParamByName('Priezvisko').Value := Edit2.Text; ADOQuery1.ExecSQL;
SELECT m.ID, m.PN, m.CLASS, m.ZAHL, Count(M2.id) AS IncByPN FROM Table1 AS m INNER JOIN Table1 AS m2 ON m2.PN = m.PN AND m2.ID <= m.ID WHERE m.CLASS='ECN' GROUP BY m.ID, m.PN, m.CLASS, m.ZAHL ORDER BY m.ID
declare @Search varchar(20); set @Search = '3011'; select * from TableName where FieldName like '%' + @Search + '%';
While reader.Read() TextBox1.Text &= reader(0).ToString() & Environment.NewLine End While
Select empSal from Emp_Master where empID = '&1'; -- not &2 exit
\dt public.[^[:digit:]]+
UPDATE table_name SET url = CONCAT( 'www.', SUBSTR(url, 8, LENGTH(url) - 7) ) WHERE url LIKE 'http://%'
SQL> CREATE TABLE t(EMP_ID NUMBER); Table created. SQL> SQL> SELECT table_name, column_name 2 FROM all_tab_cols 3 WHERE owner='SCOTT' 4 AND column_name LIKE 'EMP\_%' ESCAPE '\'; TABLE_NAME COLUMN_NAME -------------------- -------------- T EMP_ID SQL>
SELECT AVG(volume) AS avg_vol, symbol_id FROM daily WHERE date > current_date - INTERVAL'20' day GROUP BY symbol_id ORDER BY AVG(volume) DESC LIMIT 100;
delete from sqltable where duplicateid > companyid and exists (select 1 from sqltable st2 where st2.duplicateid = sqltable.companyid and st2.companyid = sqltable.duplicateid );
to_char(10000,'FM99999')
SELECT * FROM project_category as a LEFT OUTER JOIN project_estimate_detail as b ON a.id = b.project_cat_id where (b.project_cat_id IS NULL) OR (b.project_cat_id not in ('21','22','2'))
select product_id from values where value in ('large','short') group by product_id having count(distinct value) = 2
SELECT max(name), place_code, max(email), max(phone), max(address), max(details), max(estd), max(others) FROM table_x GROUP BY substring(name,1,4),place_code
SELECT DATE_FORMAT(date_column, '%H:%i') FROM your_table
select * from TABLE order by field(ID,4,2,5,3,1)
SELECT a.VolumeID "WFID" , a.Manager , t.TimeEst , t.SALTRecordedBy , MAX(t.SALTRecordedDate) FROM ctxAssistanceWF a JOIN ctxAssistanceSaltWF t ON a.VolumeID = t.SaltWFID WHERE a.RowSeqNum = 1 GROUP BY a.VolumeID , a.Manager , t.TimeEst , t.SALTRecordedBy
(SELECT `products`.product_id, products.product_name FROM (`products`) WHERE `product_name` LIKE '%chair%' AND `products`.`active` = 1) UNION ALL (SELECT `products`.product_id, products.product_name FROM (`products`) WHERE `category_id` IN (128,135,136,138) AND `products`.`active` = 1) ORDER BY CASE WHEN `product_name` LIKE 'chair%' THEN 1 WHEN `product_name` LIKE '%chair' THEN 3 ELSE 2 END
with mf as ( select Message_id,field_id from DB1.MESSAGE_FIELDS a minus select Message_id,field_id from DB2.MESSAGE_FIELDS ) select mf.*, m.name from mf join messages m on mf.message_id = m.message_id;
select * from (select name , ROW_NUMBER() over(order by name) rn from user ) a where rn > 5 and rn<= 15
Select ,CAST(DATEDIFF(mi, Date1Column, Date2Column) as int) as 'DeltaMinutes' ,CAST(DATEDIFF(day, Date1Column, Date2Column) as int) as 'DeltaDays' ,ISNULL(DATEDIFF(MONTH, Date1Column, Date2Column), -9999) as 'LastSWAge' From Table
ORDER BY month_event (DATE, FORMAT 'mmm') ORDER BY CASE month_event WHEN 'jan' THEN 1 WHEN 'feb' THEN 2 WHEN 'mar' THEN 3 WHEN 'apr' THEN 4 WHEN 'may' THEN 5 WHEN 'jun' THEN 6 WHEN 'jul' THEN 7 WHEN 'aug' THEN 8 WHEN 'sep' THEN 9 WHEN 'oct' THEN 10 WHEN 'nov' THEN 11 WHEN 'dec' THEN 12 END
CREATE UNIQUE INDEX ON EventStaff (EventID) WHERE IsSupervisor = 1
SELECT Column1 , LISTAGG(Column2, ' ') WITHIN GROUP (ORDER BY Column2) AS employees FROM Table1 GROUP BY Column1 ;
update table1 set value1 = (select value3 from table2 where id=7) , value2 = (select value4 from table2 where id=7) where id=1
SELECT `auction_title`, `auction_seo_title`, `auction_description_1`, `auction_unixtime_expiration`, `auction_startPrice`, MAX(`bids`.`bid_price`) as `bid_price` FROM `auctions` LEFT JOIN `bids` ON `auctions`.`auction_id`=`bids`.`bid_belongs_to_auction` GROUP BY `auction_id` ORDER BY `auction_unixtime_expiration` ASC
@ORM\OneToOne(targetEntity="Paragraph", mappedBy="page",cascade={"persist", "remove"})
select t1.eid from t t1 where t1.fid = 'B' and not exists (select 1 from t t2 where t2.eid = t1.eid and t2.fid = 'A')
SELECT STUFF( (SELECT ',' + t.name FROM table_name t where t.foreingId = 1 FOR XML PATH ('')), 1, 1, '')
merge icdjxn as S using patientTbl as T on S.patientID = T.patientID when not matched then insert (patientID) values (patientID);
SELECT Id, Data, Date, Transition FROM mytable WHERE Id IN (SELECT MAX(Id) FROM mytable GROUP BY Data, Transition HAVING COUNT(*) > 1)
SELECT * FROM ( SELECT DEPT_ID, COUNT(*) AS stud_count, ROW_NUMBER() over (order by COUNT(*) desc) ROW_NUM FROM TBL_STUDENT_DEPARTMENT_593932 GROUP BY DEPT_ID ) WHERE ROW_NUM = 2;
select hour,sum(temperature) from MyTable group by hour
select ProductSerial, count(*) from testing where IsRead = 'True' group by ProductSerial order by ProductSerial
IF OBJECT_ID('tempdb..##Table' , 'U') IS NOT NULL drop TABLE ##Table
SELECT m.Name FROM Main m LEFT JOIN Net n ON n.AppID=m.AppID LEFT JOIN Env e ON e.AppID=m.AppID;
select rownum + 999 from your_table
CASE WHEN UPPER(wuu.URL) LIKE 'HTTP://%' THEN wuu.UR ELSE 'HTTP://' || wuu.URL END
WHILE 1 = 1 BEGIN DELETE TOP 10000 FROM myTable WHERE CreationDate < GetDate() IF @@ROWCOUNT = 0 BREAK END
SELECT * FROM CUSTOMERS WHERE STORE(ID) IN (SELECT STOREID FROM STORES WHERE AREA = DOWNTOWN)
SELECT * FROM Logs l JOIN ( SELECT prod, amt FROM Logs WHERE time between '02:00' and '06:00' GROUP BY prod, amt HAVING count(*)>1 ) tmp ON tmp.prod=l.prod AND tmp.amt=l.amt WHERE time between '02:00' and '06:00'
CREATE OR REPLACE PROCEDURE SP_IN_PARAM( INPARAM1 IN number, OUTPARAM2 OUT varchar ) AS BEGIN SELECT col1 INTO OUTPARAM2 FROM SAM_TEMP WHERE COL2=INPARAM1; END SP_IN_PARAM;
select uid, max(case when Report <> 'TRUE' then Report end) as Report, date from reports r group by uid, date having sum(case when Report = 'TRUE' then 1 else 0 end) > 0;
SELECT COUNT(m.meet_id), SUM(CASE WHEN m.meet_category = 'long' THEN 1 ELSE 0 END), SUM(CASE WHEN m.meet_category = 'short' THEN 1 ELSE 0 END) FROM Meetings m where meet_id in (select meet_id FROM Orders o WHERE o.order_date >= '2011-03-01');
ALTER INDEX idx1 [ INVISIBLE | VISIBLE ]
SELECT t.sPropertyCode, sDataDate, SFirstSeen, a1.sTaskType, a2.sTaskType, a3.sTaskType FROM tasks AS t INNER JOIN temp AS a1 on t.sPropertyCode = a1.sPropertyCode and a1.sTaskType = 'RF' INNER JOIN temp as a2 on t.sPropertyCode = a2.sPropertyCode and a2.sTaskType = 'IF' INNER JOIN temp as a3 on t.sPropertyCode = a3.sPropertyCode and a3.sTaskType = 'CM' WHERE iRemoved = 1 AND iBusinessStreamId = 9 ORDER BY sPropertyCode, sFirstSeen;
select * from tablename where length(rtrim(field1)) > 4
select * from tblactivity where action like N'រៀន%'
Select left(x.id, 1) + '\' + left(right(x.Id, 3), 1) + '\' + left(right(x.Id, 2), 1) + '\' + right(x.Id, 1) From ( Select Left(cast(idField as varchar(38)), 4) as Id From myTable ) x
SELECT a.*, b.* FROM table1 a LEFT JOIN ( SELECT cid, MIN(imagename) minImage FROM table2 GROUP BY cid ) c ON a.cid = c.cid LEFT JOIN table2 b ON c.cid = b.cid AND b.imageName = c.minImage
SELECT (SELECT id FROM test WHERE value < myvalue ORDER BY value DESC LIMIT 1) as below, (SELECT id FROM test WHERE value > myvalue ORDER BY value ASC LIMIT 1) as above;
select distinct p1.name,p1.article from products p1 where exists( select 1 from products p2 where p2.article = p1.article and p2.name <> p1.name )
Select * from 'myTable' where 'datetime' >= ( select `datetime` from myTable group by DATE(`datetime`) order by `datetime` desc 4,1 )
# relay log restrictions relay-log-space-limit=15G
SELECT COUNT(a.word) FROM concordance a JOIN (SELECT DISTINCT b.word FROM bigdic b) temp ON temp.word = a.word WHERE a.word LIKE '%" . $name . "%'"
begin dbms_stats.gather_table_stats(user,'M_CURRENT', method_opt=>'for columns TNE size 254', cascade=>false, granularity=>'ALL', degree=>8); end; /
SELECT * FROM table_name WHERE MONTH(Display_Date) = MONTH(CURDATE()) AND YEAR(Display_Date) = YEAR(CURDATE())
select * from (SELECT s.shout_id, s.user_id, s.time, 1 AS FromShouts FROM shouts s union all select v.post_id, v.sender_user_id, v.time, 0 AS FromShouts from void_post v) as derived_table order by time desc;
DECLARE @val nvarchar(max) SELECT @val = COALESCE(@val + ',' + col1, col1) FROM (SELECT col1 FROM dbo.twoColumns UNION SELECT col2 FROM dbo.twoColumns ) x SELECT @val
SELECT at.author_id, at.author_name, 'article' AS source_table, aat.id FROM author_table at JOIN article_author_table aat ON at.author_id = aat.author_id UNION ALL SELECT at.author_id, at.author_name, 'event' AS source_table, eat.id FROM author_table at JOIN event_author_table eat ON at.author_id = eat.author_id
SELECT A.City, B.number Sequence FROM Cities A CROSS JOIN (SELECT * FROM master.dbo.spt_values WHERE type = 'P' AND number > 0) B WHERE B.number <= A.NumberOfSchools
select quote_section_id, expense_id, q.quoted, p.procured, nvl(q.quoted, 0) - nvl(p.procured, 0) as balance from vw_pm_sum_quoted q full outer join vw_pm_sum_procured p using (quote_section_id, expense_id) where quote_section_id = '1000065052' order by quote_section_id, expense_id;
SELECT code, name, ST_Force2D(geom) FROM mytable WHERE mytable.city = 'Greater Sydney' UNION SELECT '0', 'Remaining Countries', ST_Collect(geom) FROM mytable WHERE mytable.city <> 'Greater Sydney';
HAVING (expr_for_ratio) > 0
insert into computer (computer_id, attr_name, attr_value) values (1, 'connection', 'HDMI') , (1, 'connection', 'USB') , (1, 'memory', '2 GB') ;
WITH CTE_VL AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ProductId ORDER BY vl.VirtualLicenseId ASC) RN FROM dbo.VirtualLicense vl LEFT JOIN dbo.Product p ON vl.ProductName = p.Name ) ,CTE_License AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY ProductId ORDER BY ExpiryDate ASC) RN FROM dbo.License ) SELECT VirtualLicenseId, LicenseId FROM CTE_VL vl LEFT JOIN CTE_License l ON vl.ProductId = l.ProductID AND vl.RN = l.RN
SELECT sales_cat.id_cat, sales_cat.name,case when user_cat.id is null then 0 else 1 end as "selected" FROM sales_cat LEFT JOIN user_cat ON user_cat.id_cat = sales_cat.id_cat and user_cat.id_user = 4
select m.* from messages m join ( select id_sender, max(id) maxid from messages group by id_sender ) t on m.id = t.maxid
Cursor cursor = this.db.query(TABLE_NAME_2, new String[] { "empid,username,emp_date,imagepath"}, null , null, null, null, "empid asc");
for each (id, csv_foreign_keys) in source_rows do foreign_keys = split ',', csv_foreign_keys for each fk in foreign_keys do insert (id, fk) into many-to-many link table
UPDATE a SET Listed = a.Listed + b.Listed, Sold = b.Sold, Volume = a.Volume + ISNULL(b.Volume, 0) FROM @DList1 a JOIN @DList2 b on a.ItemID = b.ItemID;
SELECT tenor_years, yield_pct, MostRecentDate FROM ( SELECT tenor_years, yield_pct, curve_date AS "MostRecentDate", RANK() OVER (PARTITION BY tenor_years ORDER BY curve_date DESC) N FROM yc_node_hist where fk_yc_update = 12 )M WHERE N = 1 ORDER BY tenor_years
SELECT cd.DiagCode, Count(cd.CustomerID) FROM (select distinct DiagCode, CustomerID from CustomerTable) as cd Group By cd.DiagCode;
select a.TranName,a.TranDate,a.TranCode from ( select TranName,TranDate,TranCode, SUM(TranQty) AS T1Qty Table1 group by TranName,TranDate,TranCode) a LEFT JOIN ( select TranName,TranDate,TranCode, SUM(TranQty) AS T1Qty Table2 group by TranName,TranDate,TranCode) b on (A.TranName = B.TranName AND A.TranDate = B.TranDate AND A.TranCode = B.TranCode) where a.T1Qty != b.T1Qty
SELECT idMovie, AVG(score) AS AvgScore FROM Critiques GROUP BY idMovie HAVING AVG(score) > 8
INSERT OR REPLACE INTO decryptionKeys VALUES ("999","Birthday","25.12.1988")
CREATE MATERIALIZED VIEW sales_mv BUILD IMMEDIATE REFRESH FAST ON COMMIT AS SELECT t.calendar_year, p.prod_id ... FROM ...
select column_name,ordinal_position from information_schema.columns where table_schema = ... and table_name = ... and ordinal_position <= 2
SELECT REPLACE('[30.345, -97.345, 4],[30.345, -97.345, 5],[30.345, -97.345, 6],[30.345, -97.345, 7].','],[','][');
Video.belongsToMany(models.User, {through: 'user_like_video', as: 'Like'}); Video.belongsToMany(models.User, {through: 'user_comment_video',as: 'Comment'});
CREATE PROC spCountAnyTableRows( @PassedTableName as NVarchar(255) ) AS -- Counts the number of rows from any non-system Table, *SAFELY* BEGIN DECLARE @ActualTableName AS NVarchar(255) SELECT @ActualTableName = QUOTENAME( TABLE_NAME ) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = @PassedTableName DECLARE @sql AS NVARCHAR(MAX) SELECT @sql = 'SELECT COUNT(*) FROM [' + @ActualTableName + '];' EXEC(@SQL) END
SELECT t.FinYearVal, t.Category, ISNULL(ttb.AMOUNT,0) FROM ( SELECT tta.FinYearVal, d.Category FROM @TempTableA tta CROSS JOIN (SELECT DISTINCT ttb.Category FROM @TempTableB ttb) AS d ) AS t LEFT OUTER JOIN @TempTableB ttb ON t.FinYearVal = ttb.FinYear AND ttb.Category = t.Category ORDER BY t.Category, t.FinYearVal
SELECT title, COUNT(art) AS art_count FROM table1 GROUP BY art HAVING art_count >= (select count(*) * X / 100 from table1)
SELECT p.name, p.create_date, p.modify_date, sm.definition FROM sys.procedures AS p INNER JOIN sys.sql_modules AS sm ON p.object_id = sm.object_id WHERE p.is_ms_shipped = 0 AND p.modify_date >= DATEADD(DAY, -10, DATEADD(DAY, -10, GETDATE())
select * from ( select 10Code, COUNT(10Code) AS NumOccurrences FROM test.table GROUP BY 10Code ) grouped join test.table src on src.10Code = grouped.10Code and (src.9Approximate is null or grouped.NumOccurrences == 1)
SELECT u.town l.userID, l.type FROM listings l INNER JOIN users u on u.userID = l.userID WHERE l.type = '{$type}' AND u.town = '{$town}'
SELECT u.* FROM USERS AS u JOIN ( SELECT EMAIL FROM USERS GROUP BY EMAIL HAVING COUNT(1) = 1) AS dt ON u.EMAIL = dt.email
select t1.* from aTable t1, (select parentid, max(id) as id from aTable group by parentid) t2 where t1.id = t2.id and t1.parentid = t2.parentid
SELECT name, city, addr, 12345 AS ph_no FROM table1
SELECT * FROM `t_activities` WHERE (`uid` = {$uid} OR `uid` in (SELECT `cid` FROM `t_con` WHERE `uid` = {$uid} AND `flag` = 1)) AND `del` = 0 GROUP BY `fid` ORDER BY `time` DESC LIMIT 10
SELECT * FROM TBL WHERE (@state is null and name is null) or (name = @state)
with s(name, distance) as ( values ('archer goblin', 10), ('dragon', 50) ), the_ids as ( insert into monster(name) select name from s returning id, name ) insert into ranged_monster (id_monster, distance) select id, distance from s inner join the_ids using (name)
SELECT COUNT(*) FROM ( select distinct profile_id from userprofile_... union all select distinct profile_id from productions_... ) x
CREATE TABLE [Comment]( CommentId int PRIMARY KEY IDENTITY(1,1), UserId int Not NULL, ArticleId int NOT NULL , FOREIGN KEY(UserId) references [User](UserId), FOREIGN KEY(ArticleId) references [Article](ArticleId) ON DELETE CASCADE )
;WITH MyCTE AS ( SELECT colA, colB, colC, ROW_NUMBER() OVER(PARTITION BY id ORDER BY colA, colB) AS rn FROM table WHERE id in (1, 2) ) SELECT * FROM MyCTE WHERE rn<= 10 ORDER BY colA, colB
START TRANSACTION -- Or SET autocommit = 0 INSERT INTO two SELECT * FROM one WHERE ...; DELETE FROM one WHERE ...; COMMIT
create unique index idx_table_userId_active on table(userId) where active = 1;
SELECT u.UserID, UserLastName, UserFirstName, UserName, Notified, CycleNumber, CycleCurrentStep, CycleDateReported, cycleid FROM [User] u left join Cycle c on (u.UserID = c.UserID) join UserDivSection us on (u.UserID = us.UserID and us.DivSectionID=26) where cyclenumber = ( select max(cyclenumber) from cycle where cycle.userid = u.userid)
select Top 2 Clientes.Nome, Clientes.NCartao, sum(Vendas.ValorCIva) ValorCIva from Clientes AS Cli, Vendas INNER JOIN Clientes ON Clientes.IdCliente = Vendas.IdCliente group by Clientes.Nome, Clientes.NCartao order by sum(Vendas.ValorCIva) DESC
select first.Id, first.Name from ( select top 1 * from Locations order by Id) first union all select last.Id, last.Name from ( select top 1 * from Locations order by Id desc) last
{ A → B A → C C → D }
DECLARE @SQL varchar(max) CREATE TABLE #tmp(Id int) SET @SQL = 'ALTER TABLE #tmp ADD Column1 varchar(20)' EXEC(@SQL)
select avg( greatest( coalesce(first_score,last_score) , coalesce(last_score,first_score) ) ) from mytable;
SELECT * FROM `table` ORDER BY FIELD(`genre`, 'horror', 'scifi', 'horror'), `name`;
select r.kpi_frequency, r.kpi_freq_time_unit, min(f.id) from rator_monitoring_configuration.kpi_definition r, wf_workflow@fonic_retail f where r.event_id = 10028 and f.start_date > sysdate - numtodsinterval ( r.kpi_frequency, r.kpi_freq_time_unit ); group by r.kpi_frequency, r.kpi_freq_time_unit order by r.kpi_frequency, r.kpi_freq_time_unit;
ResultSet res = st.executeQuery("select count(*) from pg_catalog.pg_database where datname = 'sample'") ; res.next(); int count = res.getInt("count"); System.out.println("Count : " + count); if(count == 0) { st.executeUpdate("CREATE DATABASE sample"); }
SELECT MIN(value_0-value) as MinDiff FROM TableName WHERE value_0>=value
select p.* from TableOfMaterialNeeds tomn join Products p on tomn.productid = p.productid join TableOfMaterials tom on tomn.materialid = tom.materialid group by p.productid having sum(find_in_set(tomn.material, @LISTOFMATERIALS) = 0) = 0;
$result = db_query("SELECT myimage FROM example"); $records = $result->fetchAll(); foreach ($records as $value) { $uri = $value['url']; $url = file_create_url($uri); }
select * from platform where entityid is null;
MERGE A2 AS target USING (SELECT * FROM A1) AS source ON (target.Id = source.Id AND target.a1 = Source.a1...) -- More join condition WHEN MATCHED THEN UPDATE SET a2 = source.a2, a3 = source.a3 ------ more columns WHEN NOT MATCHED THEN INSERT (Id, A1, a1, a2....) VALUES (source.Id, source.a1, source.a2.....) WHEN NOT MATCHED BY SOURCE THEN DELETE END;
FROM (invoice INNER JOIN ar ON invoice.trans_id = ar.ID) RIGHT JOIN parts ON parts.id = invoice.parts_id
select col1, col2, max(which) from ((select col1, col2, 1 as which from table1 t1 where exists (select 1 from table2 t2 where t2.col1 = t1.col1) ) union all (select col1, col2, 2 as which from table2 t2 where exists (select 1 from table1 t1 where t2.col1 = t1.col1) ) ) tt group by col1, col2 having count(*) = 1
SET A = CONCAT(isnull(A,''), '_b')
SELECT t1.id, value, (case when values like value || '%' then 'yes' end) as first FROM (SELECT t1.id, t1.values, regexp_split_to_table(t1.values, E',') as value FROM t1 ) t1;
SELECT server.id , COALESCE( AVG( playerData.player ) , 0 ) AS average FROM server LEFT JOIN playerData ON server.id = playerData.serverID AND (playerData.timestamp > UNIX_TIMESTAMP( ) -10000) group by server.id
SELECT g.*, gua.* FROM games g LEFT JOIN game_user_answers gua ON g.id = gua.id_game AND gua.answer_time>g.game_start_time AND points>0 WHERE g.id = 1 AND g.game_start_time = '2016-01-01 00:00:00'
SELECT name, bin, name || '-0' || lev AS id FROM mytable JOIN (SELECT LEVEL AS lev FROM dual CONNECT BY LEVEL <= 4) ON SUBSTR(bin, lev, 1) != '0'
Private Sub txtCC_LostFocus() txtCC.Text = Left(txtCC, 4) & String(8, "x") & Right(txtCC, 4) End Sub
SELECT s.ID, e1.Name, e2.Name FROM tblSale s INNER JOIN tblEmployee e1 ON e1.employeeID = s.employeeID INNER JOIN tblEmployee e2 ON e2.employeeID = s.employeeSaleID
SELECT sum(case when Stat='1' then 1 else 0 end) as Counted, sum(case when Stat='2' then 1 else 0 end) as Counted2 from dbo.Batch
select * from ( SELECT cur.name, log.price, log.valid_at, RANK() OVER (PARTITION BY cur.id order by valid_at DESC) as rnk FROM currency cur JOIN exchange_rate_log log on (cur.id = log.currency_id) WHERE log.exchange_currency = ? AND log.valid_at < ? ) dt where rnk = 1;
SELECT e.entity_id, eav.value AS name, eav2.value as price FROM catalog_product_entity e JOIN catalog_product_entity_varchar eav ON e.entity_id = eav.entity_id JOIN eav_attribute ea ON eav.attribute_id = ea.attribute_id JOIN catalog_product_entity_decimal eav2 ON e.entity_id = eav2.entity_id JOIN eav_attribute ea2 ON eav2.attribute_id = ea2.attribute_id WHERE ea.attribute_code = 'name' and ea2.attribute_code = 'price'
SELECT CURRENT_DATE - ((CURRENT_DATE - DATE '0001-01-07) MOD 7) AS BOW;
WITH myCTE AS ( SELECT t1.*, ROW_NUMBER() OVER (PARTITION BY t2.caseid ORDER BY LastSavedDate DESC) AS RowNumber FROM table1 t1 LEFT JOIN table2 t2 ON t1.propid = t2.propid WHERE t2.caseid in ('100','101') AND t1.active = '1' AND b.doc_type_id = '404' ) SELECT * FROM myCTE WHERE RowNumber = 1;
SELECT i.name AS IndexName, OBJECT_NAME (ic.OBJECT_ID) AS TableName, COL_NAME (ic.OBJECT_ID, ic.column_id) AS ColumnName, ic.Key_ordinal as ColumnOrder FROM sys.indexes AS i INNER JOIN sys.index_columns AS ic ON i.OBJECT_ID = ic.OBJECT_ID AND i.index_id = ic.index_id WHERE i.is_primary_key = 1 ORDER BY ic.OBJECT_ID, ic.Key_ordinal
SELECT t.Question, t.Answer, COUNT(*) AS 'Count' FROM YourTable AS t GROUP BY t.Question, t.Answer
SELECT Games.GameDate AS Date, SiteSchool.SchoolName AS Site, HomeSchool.SchoolName AS Home, VisitorSchool.SchoolName AS Visitor FROM Games INNER JOIN Schools SiteSchool ON SiteSchool.SchoolId = Games.SiteId INNER JOIN Schools HomeSchool ON HomeSchool.SchoolId = Games.HomeId INNER JOIN Schools VisitorSchool ON VisitorSchool.SchoolId = Games.VisitorId WHERE Games.GameId = '1'
person = db.person.insert(name=..., dob=..., ...) opslist = db.opslist.insert(opid=..., dop=..., ...) db.cardlist.insert(opid=opslist, name=person, ...)
SET IDENTITY_INSERT [your table] ON INSERT INTO [your table] (identityCol, col1,...) VALUES (identityCol, col1,...) SET IDENTITY_INSERT [your table] OFF
update TAB1 set col1='OLD ' || nvl(COL1, '') where to_char(COL2, 'yyyy') < 2001;
select * from sys.dm_tran_locks where resource_associated_entity_id = object_id('YourTable');
SELECT least(gps.time, cadence.added_on, `heart-rate`.added_on) FROM gps JOIN cadence ON cadence.rider_id = gps.rider_id JOIN `heart-rate` ON `heart-rate`.rider_id = gps.rider_id ORDER BY least(gps.time, cadence.added_on, `heart-rate`.added_on) LIMIT 1
SELECT (N * COUNT(*)) - ( COUNT(COLUMN_1) + COUNT(COLUMN_2) + ... + COUNT(COLUMN_N) ) FROM DATAPOINTS;
SELECT COUNT(*) * 15 FROM your_table
select * from t1 WHERE EXISTS( SELECT null FROM t2 WHERE t1.make = t2.make AND t1.model = t2.model AND t1.catcode= t2.catcode )
SELECT CONCAT(COALESCE(`affiliate_name`,''),'-',COALESCE(`model`,''),'-',COALESCE(`ip`,''),'-',COALESCE(`os_type`,''),'-',COALESCE(`os_version`,'')) AS device_name FROM devices
select t1.UniqueNumber from mytable t1 left join mytable t2 on t2.UniqueNumber = t1.UniqueNumber and t2.type = 'Response' where t1.type = 'Request' and t2.type is null
bc.SetSearchExpr("[Id]='a' or [Id]='b' or [Id]='c'"); bc.SetSearchSpec("Id", "='a' OR ='b' OR ='c'");
SELECT OBJECT_NAME(m.object_id), m.* FROM SYS.SQL_MODULES m WHERE m.definition LIKE N'%my_sp_name%'
DECLARE @productType INT = 1 DECLARE @table NVARCHAR(MAX) DECLARE @sql NVARCHAR(MAX) SELECT @table = CASE @productType WHEN 1 THEN 'products1' WHEN 2 THEN 'products2' END SELECT @sql = 'SELECT * FROM ' + QUOTENAME(@table); EXEC(@sql)
SELECT receiver, caller, category, playfilename, COUNT(*) OVER (PARTITION BY receiver, category) AS CountPerReceivercategoryGroup from tbl_record
SELECT * FROM TABLEA WHERE 20140630 < CASE WHEN RecvdDateID > GETDATE() THEN EnteredDateID ELSE RecvdDateID END
WITH MatchedRows AS SELECT A.a, B.b FROM A a INNER JOIN B b ON A.a = B.b SELECT MatchedRows.a, MatchedRows.b FROM MatchedRows UNION SELECT A.a, B.b FROM A a, B b WHERE A.a NOT IN (SELECT a FROM MatchedRows) AND B.b NOT IN (SELECT b FROM MatchedRows)
SELECT aWord, COUNT(*) AS WordOccuranceCount FROM (SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(concat(Text, ' '), ' ', aCnt), ' ', -1) AS aWord FROM table CROSS JOIN ( SELECT a.i+b.i*10+c.i*100 + 1 AS aCnt FROM integers a, integers b, integers c) Sub1 WHERE (LENGTH(Body) + 1 - LENGTH(REPLACE(Text, ' ', ''))) >= aCnt) Sub2 WHERE Sub2.aWord != '' AND LENGTH(Sub2.aWord) >= 5 GROUP BY aWord ORDER BY WordOccuranceCount DESC LIMIT 10
;WITH MonthlyOrders AS ( SELECT PartNo, [Desc], CONVERT(VARCHAR(6),OrderDate,112) YearMonth, SUM(OrderQty) OrderQty FROM YourTable GROUP BY PartNo, [Desc], CONVERT(VARCHAR(6),OrderDate,112) ),MaxOrders AS ( SELECT *, ROW_NUMBER() OVER(PARTITION BY PartNo, [Desc] ORDER BY OrderQty DESC) RN FROM MonthlyOrders ) SELECT PartNo, [Desc], OrderQty MaxSoldPerMonth, YearMonth FROM MaxOrders WHERE RN = 1;
select t.* from t where 'abc' like t.pattern;
select * from customer where (@customerid is null OR customer_id = @customerid)
SELECT * FROM Table2 EXCEPT SELECT * FROM Table1
SELECT SUM(Amount) FROM Master M WHERE M.ID IN ( SELECT DISTINCT MasterID FROM DETAIL WHERE PID IN (1,2,3) )
SELECT d.the_date FROM [date-table] AS d LEFT JOIN statHolidaysTbl AS h ON d.the_date = h.Date WHERE h.Date Is Null;
SELECT * FROM MyTable ORDER BY (ColumnA - ColumnB)
where created >= STR_TO_DATE('2014-09-01','%Y-%m-%d') and created < STR_TO_DATE('2014-10-01','%Y-%m-%d')
SELECT SUB_ACCT_NO_PAJ, CustomerType, POST_DTE_PAJ, IA_DateYear, ADJ_RSN_PAJ, SUM(POST_AMT_PAJ) AS POST_AMT_PAJ_total COUNT(*) AS [aCount] INTO TempTable1 FROM All_Adjustments GROUP BY SUB_ACCT_NO_PAJ, CustomerType, POST_DTE_PAJ, IA_DateYear, ADJ_RSN_PAJ
CREATE OR REPLACE TRIGGER UpdateLog BEFORE UPDATE OF title ON TestTable REFERENCING new as newrow old as oldrow FOR EACH ROW WHEN (newrow.title != oldrow.title) BEGIN INSERT INTO LogTable VALUES(:oldrow.title, make_ref(TestTable, :newrow.object_id)); END UpdateLog; /
SELECT movie_name FROM table1 JOIN table2 USING (movie_id) WHERE movie_genre = 'some_genre'
CHECKPOINT; GO DBCC DROPCLEANBUFFERS; --Clears query cache GO DBCC FREEPROCCACHE; --Clears execution plan cache GO
CREATE TABLE combined_things WITH OIDS AS (SELECT thing1.name, thing1.shape, CAST('public.thing1_source_table' AS CHAR(100)) source_id FROM public.thing1_source_table UNION SELECT thing2.name, thing2.shape, 'public.thing2_source_table' FROM public.thing2_source_table);
DELETE po.* FROM `Product ordered` po INNER JOIN `User Info` ui ON ui.userID = po.userID WHERE ui.userName = 'Tim'
db.col.find({"name":{$ne: "John"}})
SELECT CASE CHARINDEX('.', @summary1) -- determine if the sentence contains a full stop WHEN 0 THEN @summary1 -- if not return the whole sentence ELSE SUBSTRING(@summary1, 1, CHARINDEX('.', @summary1)) -- else first part END AS sentence
select t1.EmployeeId, t1.EmployeeCarModelID, t2emp.CarModelName as EmployeeCarModelName, t1.SpouseCarModelID, t2sp.CarModelName as SpouseCarModelName from table1 t1 left join table2 t2emp on t1.EmployeeCarModelID = t2emp.CarModelId left join table2 t2sp on t1.SpouseCarModelId = t2sp.CarModelId;
INSERT INTO DOCUMENTATION (NAME, VALUE, QUERY, INSERTDATE) SELECT 'Datafile paths', LISTAGG(name, ', ') WITHIN GROUP (ORDER BY name), 'select name from V$DATAFILE', SYSDATE FROM V$DATAFILE;
--CTE: WITH subq AS ( SELECT xx FROM a INNER JOIN aa ON a.col = aa.col UNION SELECT xx FROM b INNER JOIN bb on a.col = bb.col ) SELECT x from d left join subq on subq.xx = d.x where subq.xx is null
(SELECT TOP 1 config.Signal FROM config,bases WHERE config.ID = messages.ID AND bases.Name = messages.RecBy AND bases.NameNum = config.RecBy Order By...)
select column_name + ',' from information_schema.columns where table_name = 'your table name' and column_name like 'nvarchar%'
Declare @parameter1 float, @parameter2 float, @parameter3 float, @parameter4 float Select @parameter1 = name, @parameter2 = age, @parameter3 = postal, @parameter4 = weight from TableValues where ID = 1234 dbo.SqlFuntion(@parameter1, @parameter2, @parameter3, @parameter4)
SELECT * FROM myTable WHERE Column1 = 'test' AND (@ID = -1 OR Column2 = @ID)
select * from video where video_id in (select video_id from video_category where category_id not in (list of meaninless ids))
SELECT DISTINCT Cateogory, Subcategory 1, Subcategory 2 FROM your_table
SELECT t.*, @rownum := @rownum + 1 AS rank FROM TABLE t, (SELECT @rownum := 0) r
CREATE TABLE attachments ( ... ticket_id INTEGER, ... FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE ON UPDATE CASCADE )
;with C as ( select DisplayIndex, row_number() over (partition by [Group] order by DateCreated desc) as rn from Product ) update C set DisplayIndex = rn
insert into tbl(item_name, item_price) select item_name, item_price from tbl where id = 5
begin declare at_end sqlstate; declare name anchor emp.name; declare continue handler for not found set at_end = TRUE; declare c cursor for select tabname from emp for update; open c; fetch c into name; if at_end <> TRUE then update emp set name = 'foo' where current of c; end if; end@
SELECT Pers.value('self::*', 'nchar(10)') as 'ID' FROM @xmlUserId.nodes('/users/id') as EMP(Pers)
SELECT WEEK(FROM_UNIXTIME(time)) WeekNo, DATE_FORMAT(FROM_UNIXTIME(time),'%a') WeekName, COUNT(DISTINCT(session_id)) FROM T GROUP BY WEEK(FROM_UNIXTIME(time)), DATE_FORMAT(FROM_UNIXTIME(time),'%a')
SELECT x.value from form_data x, form_data y WHERE x.form_id=1 and x.field_id=1 and y.form_id=and y.field_id=1 GROUP BY x.value HAVING SUM(SIGN(1-SIGN(y.value-x.value))) = (COUNT(*)+1)/2;
select t2.*, t1.restock_date, (t1.restock_date - t2.analysis_date) as diff from table2 t2 left join lateral (select t1.* from table1 t1 where t2.part = t1.part and t2.analysis_date <= t1.restock_date order by t1.restock_date limit 1 ) t1;
var DuplicatePages = from a in DBContext.Pages join b in DBContext.Pages on a.MetaDescription equals b.MetaDescription where (a.PageID <> b.PageID) && (a.DomainID == ReportID) && (b.DomainID == ReportID) && (a.MetaDescription.Trim().Length > 0) && (a.URL < b.URL) orderby a.URL select new { Url = a.URL, DuplicateUrl = b.URL };
SELECT CASE WHEN ROW_NUMBER() > 7 THEN ROW_NUMBER()-7 ELSE '' END AS Wosequence , colum2, column3 FROM dbo.abc [..]
SELECT LEFT(ID, 8) AS nID, SUM(Value) AS tot FROM your_table GROUP BY LEFT(ID, 8)
select TaskId, ... from Tasks where State="New" limit 1; update Tasks set State="In Progress" where TaskId=<from above> and State="New";
declare @email varchar(100) set @email='sample@gmail.com' select substring(@email,1,charindex('@',@email)-1)
SELECT address, min(timestamp), max(timestamp) FROM ((SELECT address_from as address, timestamp FROM transactions ) UNION ALL (SELECT address_to as address, timestamp FROM transactions ) ) a GROUP BY address;
UserRank.trydato = System.DateTime.Today.AddDays(4).Date;
String query = "SELECT r.reservation_no, f.flight_no, r.departure_date, f.departure_time, f.duration FROM flights f, reservations r WHERE f.flight_no=r.flight_no AND r.customer_ssn="?" "; PreparedStatement ps = connection.prepareStatement(query); ps.setString(1, customer_ssn); result = ps.executeQuery();
INSERT INTO Membership (Id, StartDateTime, EndDateTime, Frozen, MembershipType) SELECT Id, GETDATE(), GETDATE(), 0, 'Free' FROM User
select regexp_split_to_table('hello world', E'\\s+'); hello world (2 rows)
SELECT DISTINCT X1.col1 FROM X X1 INNER JOIN X X2 ON X1.col1=X2.col1 WHERE X1.col2=2 AND X2.col2=4
(select * from a except select * openquery(LINKEDSERVER,'select * from a')) Union (select * openquery(LINKEDSERVER,'select * from a') except select * from a)
SELECT [Location Code], [Bill No_], SUM(Price) AS Price FROM (SELECT DISTINCT [Location Code], [Bill No_] , Price from [Item Ledger Entry] WHERE [Location Code] = '0001' and [Document Date] = '01.04.2015') t GROUP BY [Location Code], [Bill No_]
SELECT CASE WHEN name LIKE '% %' THEN LEFT(name, Charindex(' ', name) - 1) ELSE name END, CASE WHEN name LIKE '% %' THEN RIGHT(name, Charindex(' ', Reverse(name)) - 1) END FROM YourTable
select 24534534534345353||chr(160) "Really Long Number" from dual;
NodeA NodeB Hops ------ ------ ---- tog171 tog171 0 tog171 abb521 1 abb521 tog171 1 tog171 tog226 2 tog226 tog171 2 tog171 tog218 3 tog218 tog171 3
select * from Stations where lines IN (select distinct [column_name] from A) AND lines in (select distinct [column_name] from B)
SELECT DISTINCT Name, ID FROM TestTable where Name <> '' union all SELECT Name, ID FROM TestTable where Name = ''
alter table testTable add ( column1 number(1) default 0 not null )
SELECT DISTINCT A FROM MY_TABLE WHERE A NOT IN (SELECT DISTINCT A FROM MY_TABLE WHERE B = 1)
SELECT * FROM TABLE LIMIT 5 AND 20
select * from MYTABLE t WHERE REGEXP_LIKE (t.DESCRIPTION, '[a-z]', 'c')
select t1.*, t2.bar, t2.drink from t1 left join t2 on t1.id = t2.id and t2.bar = 9 where t1.name = 'Frank';
SELECT user, month, GROUP_CONCAT(event), SUM(gross) FROM xyz GROUP BY month
var games = from g in dataModel.MediaItems.OfType<Game> where g.LibraryItems.Any(item => item.LoanTo == 1) select g;
struct Shop { // other variables.... var record : CKRecord? var commentRef : CKReference? } struct Comment { // other variables.... var record : CKRecord? var clientRef : CKReference? } var shops : [Shop] var comments : [Comment] func commentsWithReference(ref: CKReference) -> [Comment] { let matchingComments = comments.filter {$0.record!.recordID == ref.recordID } return matchingComments } let shopComments = shops.map { commentsWithReference($0.commentRef!) }
SELECT r.* FROM my_table r WHERE r.Date IN (SELECT Date FROM my_table WHERE ID = r.ID ORDER BY Date LIMIT 5);
SELECT p.ProductID, p.Title, MAX(pi.FileName) as FileName FROM [Ordering].[Products] p INNER JOIN [Ordering].[ProductImages] pi ON p.ProductID =pi.FK_ProductID WHERE p.Title like '%' + @Title +'%' GROUP BY p.ProductID, p.Title ORDER BY p.Title ASC
CREATE TABLE Unavailability (Crew_ID varchar (9) NOT NULL, Available text (3), Licence_Number int (8), CONSTRAINT pk11 primary key (Crew_ID));
update the_table set pos = t.rn - 1 from ( select id, row_number() over (partition by fk_id) as rn from the_table ) t where t.id = the_table.id;
SELECT COUNT(*) FROM (SELECT col_appid, min(col_payment_issued_date) as PayDate FROM tbl_ui_paymentstubs WHERE isnull(col_payment_amount,0) > 0 GROUP BY col_appid HAVING min(col_payment_issued_date) >= '09/01/2010' and min(col_payment_issued_date) <= '09/30/2010') Claims
select messages.*, f.user_name as from_id, t.user_name as to_id from messages join users f on f.user_id = messages.from_id join users t on t.user_id = messages.to_id ;
select A.person from (SELECT DISTINCT person,product FROM yourtable) A where A.product in ('phone','suitcase','wallet','chair') group by A.person having count(*) = 4
WITH q AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY locationName ORDER BY id) rn FROM tTable ) DELETE FROM q WHERE rn > 1
with groupings as ( select concat(data) groups from Table1 group by ID ) select groups, rownumber() over () from groupings
SELECT col3, Format(Avg([col2]-[col1]),"hh:mm:ss") AS TimeDiff FROM Table1 GROUP BY col3;
select coalesce(maxtemptrans, maxtrans, 0) from (select max(transid) maxtemptrans from tbltrans_temp) t, (select max(transid) maxtrans from tbltrans ) t2
FOR I IN T_TITLE.FIRST.. T_TABLE.LAST LOOP IF T_TABLE(I).VAR_TITLE = PAR_TITLE THEN V_TITLE_ID = I; EXIT; END IF; END LOOP;
select max(id),value From foo group by value order by max(id) desc
select id,trunc(next_day - day) from (select id,day,lead(day) over (order by day) next_day from date_test) where id = '00';
with data as ( select Code, substring(Code, 1, len(Code) - 1) as Prefix, Name, Total from T ) select case when grouping(Name) = 1 then Prefix else min(Code) end as Code, case when grouping(Name) = 1 then '-' else Name end as Name, sum(Total) as Total from data group by grouping sets ( (Prefix, Name), (Prefix) ) order by Prefix, grouping(Name), Code
CREATE PROCEDURE dbo.SELECT_MEMBERS @ID int = NULL, @Name varchar(250)= NULL, @Deleted datetime =NULL AS BEGIN SET NOCOUNT ON; SELECT ID, Name, Deleted FROM dbo.Members WHERE ID = ID AND ISNULL(@Name, '') = ISNULL(Name, '') AND ISNULL(@Deleted, '') = ISNULL(Deleted, '') END GO
SELECT b.* FROM dbo.BRANCH b JOIN ( VALUES (1, 'C'), (2, 'D'), (3, 'A'), (4, 'F') ) c(ID, IDENTIFIER) ON c.IDENTIFIER = b.IDENTIFIER ORDER BY c.ID
UPDATE person SET dollars = GREATEST(0, dollars-20) WHERE id=1
with dtl_cnt as (select det_orderno , count(*) as tot_lines from detail group by det_ordno) select hdr_orderno , row_number() over (partition by hdr_orderno) as Line_no , dc.tot_lines , d.item from header join dtl_count dc on hdr_orderno = dc.det_orderno join detail d on hdr_orderno = d.det_orderno
product, name_1, value_1, name_2, value_2 apple, size, small, color, green apple, size, small, color, red apple, size, large, color, green apple, size, large, color, red car, type, coupe, fuel, diesel car, type, coupe, fuel, gas car, type, sedan, fuel, diesel car, type, sedan, fuel, gas
SELECT * FROM invoice_headers A LEFT OUTER JOIN user_info B ON A.debtor_id = B.user_id AND A.debtor_user_type = 0 LEFT OUTER JOIN company_info C ON A.debtor_id = C.company_id AND A.debtor_user_type <> 0
select t.*, (select sum(t2.CourseFee + t2.AdditionalCharges - t2.ExpenseAmount) from onetable t2 where t2.id <= t.id ) as NetAmount from onetable t;
select i.item, m.material, m.begin_time from items i join materials m on m.begin_time between i.begin_time and i.end_time union all select item, material, begin_time from (select i.item, m.material, m.begin_time, row_number() over (partition by i.item order by m.begin_time desc) as seqnum from items i join materials m on m.begin_time < i.begin_time ) im where seqnum <= 2;
where LENGTH(TRIM(TRANSLATE(YourField, ' +-.0123456789', ' '))) is not null
Select .... From ... Where create_date = trunc( (TO_DATE('06/30/14 21:41:11', 'MM/DD/YY HH24:MI:SS') - TO_DATE('01/01/1970 00:00:00', 'MM/DD/YYYY HH24:MI:SS') ) * 24 * 60 * 60 );
SELECT property.ID, property.address, property.postcode, property.lease, landlords.firstName, landlords.lastName FROM property INNER JOIN landlords ON landlords.ID = property.landlord WHERE landlords.firstName LIKE '%spina%' OR landlords.lastName LIKE '%spina%'
WHERE STR_TO_DATE(due, '%d-%b-%Y') < NOW()
select location, month, value from <yourquery here> unpivot ( value for month in (January, February, March, April, May, June, July, August, September, October, November, December) ) unpiv
SELECT DATE_FORMAT(AudiEvent.EventDate,'%d-%m-20%y') as Event_Date from AudiEvent ORDER BY AudiEvent.EventDate
DECLARE @id INT SET @id = 100 WHILE (@id <= 300) BEGIN insert into categories (categoryID) values (@id) SELECT @id = @id + 1 END
select substring(member_name, charindex('/', member_name) + 1, 1) as first_initial, left(member_name, charindex('/', member_name) - 1) as last_name from member
insert into table1 (col1, col2, col3) select cast(col1 as signed), col5, col7 from Table1_Temp
DELETE a FROM activities a LEFT JOIN (SELECT MAX(id) AS id FROM activities GROUP BY name) uniqId ON a.id=uniqId.id WHERE uniqId.id IS NULL;
select 1 from table where key = value; select count(1) from table where key = value;
@Column(name="BOOLEAN_COLUMN", columnDefinition = "varchar2(1)") @Type(type = "yes_no") private Boolean booCol;
SELECT f.* FROM FRIENDS f JOIN USERS u ON r.FRIEND_ID = u.USER_ID WHERE f.FRIEND_ID = ...
SELECT AVG(NO_OF_SEATS) "WEEKLY AVERAGE", TRUNC(TRAVEL_DATE,'IW') FROM RESER GROUP BY TRUNC(TRAVEL_DATE,'IW');
SELECT City, State, County, GROUP_CONCAT(Zipcode SEPARATOR ',') AS Zipcodes FROM MyTable WHERE <Whatever you have> GROUP BY City, State
declare @sql nvarchar(max); set @sql = N'select * from table where ' + quotename(@search) + N'=''1'''; exec sp_executesql @sql;
select Fname,Lname,Pname, Employee.DepartNum E_DNUM,Project.DepNum P_DNUM from Employee join WorksOn on WorksOn.EmpSSN = Employee.SSN join Project on WorksOn.ProjNum = Project.Pnumber join Department on Project.DepNum = Department.Dnumber where Employee.DepartNum <> Project.DepNum
SELECT a1, MAX(a2) AS a2 FROM table GROUP BY a1
select distinct t1.title_id, t1.shared_task_id from mytable t1 join mytable t2 on t1.shared_task_id = t2.shared_task_id and t1.title_id <> t2.title_id
SELECT TITLE_LOOK_UP.TITLE_NAME , STAFF.FIRST_NAME , STAFF.LAST_NAME , STAFF.DEPT_ID FROM STAFF, TITLE_LOOK_UP WHERE STAFF.POST_ID ='2' AND STAFF.TITLE_ID = TITLE_LOOK_UP.TITLE_ID ORDER BY STAFF.LAST_NAME ASC
SELECT cs.EmployeeRun, min(cs.Date) as MinDate, max(cs.Date) as MaxDate, SUM(cs.Total) as SumTotal FROM CusSalaryDay cs WHERE cs.Date Between '2012-12-03' and '2012-12-05' GROUP BY cs.EmployeeRun Order By EmployeeRun
SELECT r.* FROM `record_versions` r JOIN (SELECT MAX(`datetime`) `datetime`, account_id FROM record_versions GROUP BY account_id) t ON ( r.account_id = t.account_id AND r.datetime = t.datetime ) WHERE r.record_id = '26'
SELECT sub_id, SUM(ans1) FROM booktable WHERE book_id = 1 AND sub_id IN (4, 6) Group by sub_id
<select id="selectFoo" parameterType="com.foo.bar.SettingsBean"> select * from foo where rownum >= #{rowStart} and rownum < #{rowEnd} </select>
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE TO USER;
SELECT qr.* FROM question_records qr enrollments e questions q WHERE e.id = qr.enrollment_id AND q.id = qr.question_id -- your original WHERE condition AND enrollments.id IN (10,20) AND questions.id IN (500,600) AND question_records.id not in (3000,4000))
SELECT t1.*, MAX(t2.unixtimestamp as rj_time), t2.response_detail as rj_error FROM t1 LEFT JOIN table2 as t2 ON t1.id=t2.personid AND t1.clientcode=t2.client WHERE t1.clientcode='quouk' AND (t1.language = 'en_GB') GROUP BY t1.id ORDER BY t1.id
Create Materialized view temp_mv refresh complete start with (sysdate) next (add_months(trunc(sysdate,'mm'),1)+25)+0.5/24 with rowid as select * from temp;
select * from employee where Department = @dept AND (@flag != 1 OR @sal < 10000)
SELECT ... FROM TABLE_A AS A JOIN TABLE_B AS B ON CAST(SUBSTR(DIGITS(A.STR_NBR),3,3)AS CHAR(4)) = B.LOCN_NO
SELECT column1 FROM (SELECT nvl(column1, 0) column1 FROM table1) WHERE column1 <= 1
WITH cte AS ( SELECT id,code, ROW_NUMBER() OVER(PARTITION BY id ORDER BY code) as row FROM tableName ) SELECT id,code FROM cte WHERE row=1
from django.db.models import Sum Entry.objects.all().values('author','target').annotate('sum__points'=Sum('points'))
select a.mjor, a.course, b.grade from degree_plan as a left join student_record as b on a.course_no=b.course_no and b.id=4455 where a.major='COE'
select A.column1, B.column2 from tablename as A, tablename as B where (A.id != B.id) and (SOUNDEX(A.column1) = SOUNDEX(B.column2))
var suppliers = dbContext.Suppliers.Include(s => s.PrimaryContact.Addresses);
SELECT SUM(Amount) FROM mytable x WHERE Ident = 3 AND NOT EXISTS (SELECT * FROM mytable y WHERE x.OrderNr = y.OrderNr AND y.Ident = 14)
select id, name, (x + y) as total, (case when (x + y) = min(x + y) over (partition by id) then 0 else 1 end) as IsNotMinValue from t;
SELECT * FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY p.DtDistribuicao, p.Id) AS RowNumber FROM ProcessoInstanciaFonte as p ) AS q WHERE q.RowNumber BETWEEN 1 AND 20; ORDER BY q.RowNumber SELECT TOP 20 * FROM dbo.ProcessoInstanciaFonte AS p ORDER BY p.DtDistribuicao, p.Id
select cs.*, sum(cs.ActiveEachYear) over (order by cs.[year]) as TotalActiveInSystem from CurrentScenario cs order by cs.[year] desc;
SELECT stddev_pop(C) FROM ( SELECT B, C FROM table1 WHERE B < (SELECT AVG(B) FROM table1 ) ) s
SELECT CASE WHEN UPPER(name) LIKE 'THE %' THEN CONCAT(RIGHT(name, length(name)-4),', THE') ELSE name END AS name FROM artist ORDER BY name
CASE WHEN (org.org_misc_data = 'PAC') THEN 'pac|' ELSE '' END + CASE WHEN (org.dues_category = 'PART') THEN 'partner_member' WHEN (org.dues_category = 'FREE' AND org.org_status_flag = 'P') THEN 'associate_member' ELSE 'non_member' END AS org_status
SELECT (case when substr(locationPostcode, 2, 1) between 'A' and 'Z' then left(`locationPostcode`, 2) else left(locationPostcode, 1) end) as postcode_prefix, count(`locationPostcode`) as `locationCount` FROM `locations` WHERE `locationPostcode` IS NOT NULL AND `locationPostcode` <> '' GROUP BY postcode_prefix ORDER BY `locationCount` DESC;
select to_date('12/30/1899', 'MM/DD/YYYY') + 40676.2641666667 from dual;
SELECT COUNT(1) FROM (SELECT distinct ProductId from Sales UNION -- instead of union all to ensure that only distinct values are taken SELECT distinct ProductId from Links) products
ALTER TABLE HS_HR_PEA_EMPLOYEE MODIFY JS_PICKED_TIME DATE DEFAULT SYSDATE
SELECT distinct(*) FROM HS_IHE_ATNA_Repository.Aggregation a WHERE EventType = 'Retrieve Document Set' AND TimeStamp = (select min(b.TimeStamp) from from HS_IHE_ATNA_Repository.Aggregation b WHERE b.tid = a.tid) ORDER BY ID asc
select .. Agent, case when coalesce(MiddleName, '') = '' then FirstName + ' ' + LastName else FirstName + ' ' + MiddleName + ' ' + LastName end as Name, ... from tbSystemUser
SELECT skills.id, IF(IS NULL user_skills.skill_id, 'Yes', 'No') FROM skills LEFT JOIN user_skills ON ( skills.id = user_skills.skill_id AND user_skills.user_id = 1234 )
mysqldump -t -u root -p mytestdb mytable --where="datetime LIKE '2014-09%'"
SELECT id, SUM(CASE WHEN event IN ('end', 'prog') THEN viewtime WHEN event = 'rew' THEN -viewtime END) AS viewtime FROM tablename GROUP BY id
SELECT distance, floor(distance / 12) AS Feet, distance mod 12 as Inches from products
"... where ProductName+ProductNumber+GenericName like '%" & txtSearch & "%'"
replace( regexp_replace( regexp_replace( regexp_replace( string, '\s([a-zA-Z]+($|\W))', chr(0)||'\1' ), '((^|\W)[a-zA-Z]+)\s', '\1'||chr(0) ), '\s'), chr(0), ' ')
select entity_name, count(*) count from ( select e.entity_name, t.tag from tag t join entity e on (t.entity_id = e.entity_id) where t.tag in ('tag', 'tag', 'tag') )x group by entity_name order by count desc
CREATE TABLE tab ( id tinynot null CHECK (id BETWEEN 0 AND 9), value INT not null CHECK (id BETWEEN 1000000000 AND 9999999999) );
SELECT * FROM products INNER JOIN categories ON categories.id = products.category_id WHERE categories.lft > 2 and categories.rgt < 11
... SET @currText = textToExpolde; SET @sepLen = LENGTH( separator ); WHILE @currText != '' DO SET @word = SUBSTRING_INDEX(@currText, separator, 1); SET @currText = SUBSTRING(@currText, LENGTH(@word) + 1 + @sepLen); INSERT INTO extractor_words SET word = @word; END WHILE; ...
select orderid, case when maxprice is null then 0 else maxprice end as maxprice from ( select orderid = o.id, maxprice = (select MAX(price) from orderlines ol where ol.orderid = o.id) from orders o ) sub
SELECT [some fields] FROM SELECT firstname, lastname, CONCAT(firstname, ' ', lastname) as fullname FROM people) AS tmp WHERE firstname LIKE '%user_submitted_data%' OR lastname LIKE '%user_submitted_data%' OR fullname LIKE '%user_submitted_data%'
UPDATE Geo_location AS g JOIN users_data AS u ON u.member_num = g.member_num SET g.public = ud.acceptinClients
SELECT LastName, CASE FirstName WHEN 'Ian' THEN JobNo ELSE -1 END FROM Employees
UPDATE all_event_details SET venue_city = split_part(venue_city_state, ',', 1), venue_state = split_part(venue_city_state, ',', 2)
select user_id, game_id, (case when count(*) > 1 then timestampdiff(second, min(timestamp), max(timestamp)) / (count(*) - 1) end) as AvgDiffSeconds from game_logs gl where game_event_type_id = 3 group by user_id, game_id;
select id from table t order by id desc limit 1;
SELECT german FROM translate_content WHERE german = "A" UNION ALL SELECT german FROM translate_content WHERE german = "B" UNION ALL SELECT german FROM translate_content WHERE german = "C" UNION ALL SELECT german FROM translate_content WHERE german = "A"
SELECT cat, dog, mouse, ids, (SELECT cheese FROM my_second_table AS a WHERE find_in_set(a.ids, ids) LIMIT 1) AS cheese FROM my_first_table
SELECT MAX(ltrim(sys_connect_by_path(flow_run_id, ','), ',')) FROM ( select flow_run_id, rownum rn from table where CREATED_DATE < sysdate - 32 and rownum < 10 order by 1 desc ) START WITH rn = 1 CONNECT BY PRIOR rn = rn - 1
SELECT CASE WHEN rnk = 1 THEN MAKER ELSE '' END AS Mkr, type, rnk FROM Table1 ORDER BY MAKER,RNK
SELECT * FROM UserDB ORDER BY CASE Role WHEN 'Admin' THEN 0 WHEN 'User' THEN 1 WHEN 'Guest' THEN 2 END
SELECT REPLACE(text,CHR(26),otherChar) FROM .........
INSERT INTO example_table ([month], field, field, field) SELECT Forms!YourForm!txtSecondMonth AS [month], field, field, field FROM example_table WHERE [month] = Forms!YourForm!txtFirstMonth;
SELECT DISTINCT id FROM myTable WHERE @myInput IN (rColumn, sColumn);
DECLARE @FirstDayofPrevMonthPriorYear datetime DECLARE @LastDayofPrevMonthPriorYear datetime SET @FirstDayofPrevMonthPriorYear = DATEADD(year,-1,@FirstDayofPrevMonth) SET @LastDayofPrevMonthPriorYear = DATEADD(year,-1,@LastDayofPrevMonth)
SELECT CR.ID, CR.Name, Folder.Name AS FolderName FROM CR /* First join CR to VM */ INNER JOIN VM ON CR.ID = VM.ObjectID /* Then join VM to itself aliased as VMLoc, mapping Location to ObjectID */ INNER JOIN VM AS VMLoc ON VM.Location = VMLoc.ObjectID /* Finally join the second ObjectID to Folder to get Folder.Name */ INNER JOIN Folder ON Folder.ID = VMLoc.ObjectID
select A.product_desc, (select sum(B.qty) from product_sales_branch_a B where B.product_id = A.product_id), (select sum(C.qty) from product_sales_branch_b C where C.product_id = A.product_id) from product A where A.product_id = 'ABC'
SELECT Id, Name FROM Table1 JOIN Table2 ON Table2.FK1 = Table2.FK1
select * from questions where id NOT IN ( select distinct round1 from questions where user1 in (1,2) OR user2 in (1,2) UNION select distinct round2 from questions where user1 in (1,2) OR user2 in (1,2) UNION select distinct round3 from questions where user1 in (1,2) OR user2 in (1,2) )
SELECT s.name, s.email, l.link FROM subscribers s, links l WHERE s.id IN ('.$subscribers.') AND FIND_IN_SET(s.id, l.id_of_user_that_clicked)
UPDATE records SET name = CASE WHEN id = 3 THEN 'abc' WHEN id = 1 THEN 'def' ELSE name END
order by case when price between @priceMin and @priceMax and location = @location then 1 when price between @priceMin and @priceMax and district_id = @districtid then 2 when no_of_bedrooms = @no_of_bedrooms and districtid = @districtid then 3 when price between @priceMin and @priceMax and no_of_bedrooms = @no_of_bedrooms and property_area = @property_area and districtid <> @districtid then 4 else 5 end, price desc
where BUSINESS_UNIT=1227 and b.year_audit=2016 and taggable='YES' and ( ( (select count(*) from #tempdept) > 0 and fix_asset.department in (select item from #tempdept) ) or (select count(*) from #tempdept) = 0 )
WITH cte AS ( SELECT CustomerID, Date, DATEADD(DAY, -ROW_NUMBER() OVER (PARTITION BY CustomerID ORDER BY Date), Date) dt FROM trips ) SELECT CustomerID, Date, DENSE_RANK() OVER (PARTITION BY CustomerID ORDER BY dt) FROM cte;
WITH find_rec AS (SELECT id3 FROM s.t2 WHERE id4 = 'hello3') UPDATE s.t1 SET id2 = find_rec.id3 WHERE id1 = 2 AND EXISTS (SELECT 1 FROM find_rec);
select st.version as version, count(st.version) as total sys_ids,count(a),count(b),count(c) from ( SELECT sys_id,version,state, MAX(DECODE(state,'A',state)) as a, MAX(DECODE(state,'B',state)) as b, MAX(DECODE(state,'C',state)) as c FROM SYSTEM st group by sys_id,version,state ) group by version;
{ (Author, Date) (Author, URL) (Content) }
;WITH PricesCTE AS ( SELECT *, ROW_NUMBER()OVER(PARTITION BY companyid,product ORDER BY version DESC) AS rn FROM prices WHERE GETDATE() BETWEEN [start] AND [end] ) SELECT * FROM PricesCTE WHERE rn = 1
SELECT CONCAT_WS("", "$", FORMAT(COALESCE(db.billing.cost_per_month, 0.00), 2)) AS "Monthly Cost", CONCAT_WS("", "$", FORMAT(COALESCE(db.billing.additional_cost, 0.00), 2)) AS "Additional Cost", CONCAT_WS("", "$", FORMAT(COALESCE(db.billing.cost_per_month, 0.00) AS DECIMAL(60, 2)) + COALESCE(db.billing.additional_cost, 0.00), 2)) AS "Total Cost" FROM db.billing;
select name from syscolumns sc1 where id = object_id('table1') and exists(select 1 from syscolumns sc2 where sc2.name = sc1.name and sc2.id = object_id('table2'))
EXEC sys.sp_addextendedproperty @name=N'PersianName', @value=N' ''کارکنان'' ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Personnel' EXEC sys.sp_addextendedproperty @name=N'PersianColumnName', @value=N' ''شناسه''' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Personnel', @level2type=N'COLUMN',@level2name=N'Name'
select Numbers, count(*) as Count from MyTable group by Numbers
SELECT YEAR(time) AS year MONTH(time) AS month, COUNT(myTable.year) AS cnt, FROM months LEFT JOIN myTable ON months.year = myTable.year AND months.month = myTable.month GROUP BY months.year, months.month ORDER BY months.year, months.month
(mod(EXTRACT(MONTH FROM SYSDATE()), 3)) = (mod(EXTRACT(MONTH FROM <input date>), 3))
SELECT DAYOFWEEK('2007-02-03');
ORDER BY FIELD(color, 49, 2) DESC
SELECT p.name AS personName, p.slug AS personSlug, COUNT(p.slug) AS personCount FROM person AS p INNER JOIN person AS p2 ON p.checksum = p2.checksum WHERE p2.slug = 'john-doe' AND p.slug <> 'john-doe' GROUP BY personName ORDER BY personCount DESC
select right('000' + convert(varchar(3), intcolumn), 3) from yourtable
select pst.userid, pic.title from pictures pic inner join posted_by pst on pic.title = pst.title left join followers flw on pst.userid = flw.userid where pst.userid = <userid> or flw.followerid = <userid>
pg_dump -h 172.26.76.100 -p 5432 -U username your_db | psql -h localhost -p 5432 -U username your_db
SELECT a.Price FROM SalesReturnDetails a INNER JOIN ( SELECT DISTINCT Bill_number FROM SalesReturn WHERE Session='12-13' ) b ON a.Bill_number = b.Bill_number
select decode(kpi_def_id,NULL,'N', case when instr(ini||curr||downtime||manual,'N',1) = 0 then status else 'N' end) from ex_6
Select personid,lastname,firstname,age, Case when age between 26 and 27 then 'post graduate' when age between 28 and 30 then 'working and single' when age between 31 and 33 then ' middle level manager and married' Else 'Nil' End comments from persons
WITH CTE AS ( SELECT 1 N UNION ALL SELECT N + 1 FROM CTE WHERE N < 5 ) UPDATE MyTable SET MyNumber = ( SELECT TOP 1 N FROM CTE WHERE NOT EXISTS (SELECT * FROM MyTable WHERE MyNumber = N) ) WHERE PrimaryKey = 2
CREATE STORED PROCEDURE CheckPassword @username VARCHAR(20), @password varchar(20) AS BEGIN SET NOCOUNT ON IF EXISTS(SELECT * FROM usertable WHERE username = @username AND password = @password) SELECT 'true' AS UserExists ELSE SELECT 'false' AS UserExists END
SELECT phonenumber, dataplan AS currentplan, SUM(datamb) AS value_sum FROM maindata GROUP BY phonenumber, dataplan;
Dim db As DAO.Database Dim strInsert As String Set db = CurrentDb strInsert = "INSERT INTO [table1]([field 1], [field 2])" & vbCrLf & _ "VALUES ('value 1', 'value 2')" db.Execute strInsert, dbFailOnError TempVars.Add "itemNum", db.OpenRecordset("SELECT @@identity")(0).Value MsgBox "TempVars!itemNum: " & TempVars!itemNum
SELECT *, ROW_NUMBER() OVER (ORDER BY somefield) rownum FROM table;
select ut.* from URITable ut where @MYURL like ut.URIPattern;
FROM Objects o LEFT OUTER JOIN Attributes aa ON (o.Id = aa.ObjectId) and (aa.AttributeTypeId = 1)
SELECT p.* FROM players p INNER JOIN (SELECT age, Max(score) as mScore FROM players GROUP BY age) AS mp ON p.age = mp.age AND p.score = mp.mscore
select t1.*, t2.* from table1 t1 cross apply (select top 1 t2.* from table2 t2 order by distance(t1, t2) -- put your appropriate function here ) t2;
NODE id NODE_POST id pk fk node(id) title body NODE_COMMENT id pk fk node(id) body post_id fk node_post(id) parent_comment_id fk node_comment(id)
SELECT a.stagename, a.realname FROM Actor a LEFT JOIN ActedIn b ON a.stagename = b.stagename LEFT JOIN Movie c ON b.title = c.title AND a.year = b.year AND c.earnings >= c.budget WHERE c.title IS NULL GROUP BY a.stagename, a.realname
with dv as ( delete from book_version where version_id = 2 returning book_id, version_id ) delete from book b using dv where b.book_id = dv.book_id and not exists ( select version_id from book_version where book_id = dv.book_id and version_id != dv.version_id )
select id, students, sub1, sub2, sub3, sub4, sub5, sub6, ((sub1 < 40) + (sub2 < 40) + (sub3 < 40) + (sub4 < 40) + (sub5 < 40) + (sub6 < 40) ) as FailedIn from table t;
select m.month, sum(case when c.regionid = 1 then 1 else 0 end) as north, sum(case when c.regionid = 2 then 1 else 0 end) as south, sum(case when c.regionid = 3 then 1 else 0 end) as east, sum(case when c.regionid = 4 then 1 else 0 end) as west from region r cross join month m left join customer c on c.regionid = r.regionid and c.monthid = m.monthid group by m.monthid, m.month
USE USERS; SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'MEMBERS'
select * from subscribers ls join emailopens eo on ls.subscriberid=eo.subscriberid left join subscribers ls2 on ls.emailaddress=ls2.emailaddress and ls2.listid = 1384 where ls.listid=1381 and opentime > 1458864000 and ls2.emailaddress is null
CASE WHEN KPI IN (1, 4) THEN ACTUAL WHEN KPI = 2 THEN KPI / MIN(CASE WHEN KPI = 1 AND KPI <> 0 THEN ACTUAL END) OVER (PARTITION BY DATE, DIVISION) WHEN KPI = 3 THEN KPI / MIN(CASE WHEN KPI = 3 AND KPI <> 0 THEN ACTUAL END) OVER (PARTITION BY DATE, DIVISION) END
Select Sum(Case When Z = 1 Then A Else 0 End) As B, Sum(Case When Z = 2 Then A Else 0 End) As C From TableName
alter table t add column domain varchar(255); update t set domain = substring_index(email, '@', -1); create index idx_t_domain on t(domain);
SELECT WEEK(created), SUM(case WHEN status = 1 then 1 else 0 end) Status1, SUM(case WHEN status = 2 then 1 else 0 end) Status2, SUM(case WHEN status = 3 then 1 else 0 end) Status3, SUM(case WHEN status = 4 then 1 else 0 end) Status4, SUM(case WHEN status = 5 then 1 else 0 end) Status5 FROM contacts GROUP BY WEEK(created), YEAR(created);
SELECT * FROM emp WHERE (CASE WHEN (sal+comm) > 1700 THEN 1 ELSE 0 END) = 1
select ID_DISH, sum(ID_INGREDIENT not in (2, 4)) stillMissing from x group by ID_DISH having stillMissing != count(*) order by stillMissing
Private Sub TotalMonthlyEnquiries_Click() DoCmd.OpenForm "frmQuery2", acFormDS Forms!frmQuery2.Filter = "Format([DateOfEnquiry], ""mmmm"") = '" & Me![Month] & "'" Forms!frmQuery2.FilterOn = True End Sub
SELECT ID, DATE, 'TEST_1' AS TEST, TEST_1 AS SCORE FROM TABLE UNION ALL SELECT ID, DATE, 'TEST_2' AS TEST, TEST_2 AS SCORE FROM TABLE UNION ALL SELECT ID, DATE, 'TEST_3' AS TEST, TEST_3 AS SCORE FROM TABLE
SELECT * FROM Customer LEFT JOIN Product ON Customer.CustID=Product.CustID WHERE Item = 'Toaster' AND Customer.CustID NOT IN ( Select CustID FROM Product Where Item = 'Breadbox' ) AND (SELECT COUNT(*) FROM Returns WHERE Customer.CustId = Returns.CustID) <= 1
SELECT * FROM X INNER JOIN ( SELECT ROW_NUMBER() OVER (ORDER BY SomeVal) as rn, * FROM Y ) AS Z ON X.ID = Z.X_ID WHERE Z.rn <= X.IntegerAmount)
INSERT INTO prod_users (user_id, first_name, last_name) SELECT ID, FIRST_NAME, LAST_NAME FROM test_users
Select ... date_sub($(Start_Date), interval 1 year)... , ...date_sub($(end_date ), interval 1 year)... from ... ;
EXPLAIN SELECT foo,bar from glurch WHERE baz > 1 ORDER BY foo;
with cte as ( update mytable set val1 = 'Foo' where val13=1234 and val12=12 returning * ) select * from cte where val14=(select max(val14) from mytable )
;WITH CTE AS ( SELECT *, RN = ROW_NUMBER() OVER(PARTITION BY Name ORDER BY [Date]) FROM (...Your query here...) T ) SELECT * FROM CTE WHERE RN > 1;
select * from ( select *, row_number() over( partition by user_id order by createdat desc, rating desc ) as rn from t1 where status = 1 and some_field not in (?, ?, ..., ?) and user_id in (1,2,3) ) s where rn <= 10 order by user_id, rn
from a in objcxt.tableA join b in objcxt.tableB on new { a.fld1, a.fld2 } equals new { b.fld1, b.fld2 } into b_join from b in b_join.DefaultIfEmpty()
select user_id sum(amount) total, sum(least(amount,0)) total_negs, sum(greatest(amount,0)) total_pos from my_table group by user_id
CREATE TABLE my_table ( col1 VARCHAR(10), col2 VARCHAR(20), expiration_date DATE, is_expired AS CASE WHEN expiration_date > GETDATE() THEN 1 ELSE 0 END );
USE master GO CREATE LOGIN SomeLogin --FROM WINDOWS? GRANT CONNECT SQL TO SomeLogin GO USE MYDB GO CREATE USER SomeUser FOR LOGIN SomeLogin GRANT CONNECT TO SomeUser GO CREATE ROLE SomeRole AUTHORIZATION [dbo] GO EXEC sp_addrolemember 'SomeRole', 'SomeUser' GO
select top 1 email_id from update_winnerslist where item_index = 10 order by bid_amount desc
$sql = " SELECT Title, 1 FROM table1 UNION SELECT Title, 2 FROM table2 UNION SELECT Title, 3 FROM table3";
String sql = "Select to_date('1970-01-01 ' || ? ,'YYYY-MM-DD HH24:MI:SS) as MY_TIME from dual"; Connection conn = null; //get Connection from somewhere PreparedStatement stmt = conn.prepareStatement(sql); stmt.setString(1, "16:31:59"); ResultSet rs = stmt.executeQuery(); rs.next(); //get to first element of result set; java.sql.Time myTime = rs.getTime(1);
select u.User_ID from users u left join reviews r on r.user_id = u.user_id where r.review_id is null
select * from TableName unpivot(v for xyz in([Atest],[Btest],[Ctest]))u pivot(max(v) for yyyymmdd in([20150525],[20150526],[20150527]))p
select cast(left(r, charindex('%', r) - 1) AS float) as minVal, cast(replace(right(r, charindex('-', r) - 1), '%', '') as float) AS maxVal from ( select '22.45% - 42.32%' as r ) as tableStub
CREATE TABLE Table ( col DATETIMEOFFSET DEFAULT GETUTCDATE() ) GO
IN (SELECT myField from #myTable)
update [Table1] SET [Vote] = Vote + 1 WHERE ID = 1
INSERT INTO table2 (id, AddressNumber, Address) SELECT id, AddressNumber, CASE AddressNumber WHEN 1 THEN Address1 WHEN 2 THEN Address2 WHEN 3 THEN Address3 WHEN 4 THEN Address4 END Address FROM table1 t CROSS JOIN ( SELECT 1 AddressNumber UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 ) i HAVING Address IS NOT NULL ORDER BY id, AddressNumber;
DECLARE @TBL TABLE( C1 INT, C2 INT ) INSERT INTO @TBL (C1, C2) EXEC sptemp SELECT *, 34 FROM @TBL
;WITH sums AS ( SELECT m1, m2, SUM(m1) + SUM(m2) as Total, SUM(m1) + SUM(m2) as Total1 FROM dbo.stud GROUP BY m1, m2 ) SELECT m1, m2, total, total1, total+total1 AS 'GrandTotal' FROM sums
SELECT t.A, t.B, t.C, number = ROW_NUMBER() OVER (ORDER BY t.A) FROM dbo.tableZ AS t ORDER BY t.A;
CREATE TABLE `member_images` ( `image_id` BIGINT(20) UNSIGNED NOT NULL auto_increment, `member_id` BIGINT(20) UNSIGNED NOT NULL DEFAULT 0, `image_path` VARCHAR(255) NOT NULL DEFAULT '', PRIMARY KEY(`image_id`), KEY (`member_id`) );
SELECT SUM(CASE WHEN type = 1 THEN amount ELSE 0 END) amount1, SUM(CASE WHEN type = 2 THEN amount ELSE 0 END) amount2 FROM MyTbl
CREATE TABLE #foo ( IDColumn int NOT NULL IDENTITY(1,1), PayLoad varchar(100) NOT NULL, TheRealKey AS CONCAT('SLN', RIGHT(CONCAT('00000', IDColumn), 6)) PERSISTED PRIMARY KEY ) GO INSERT #foo (PayLoad) VALUES ('Row 1'), ('Row 2') GO SELECT * FROM #foo f
SELECT (CASE WHEN COUNT(*) = 3 THEN 'ALL PRESENT' ELSE 'MISSING FIELD' END) FROM `engine4_user_fields_values` WHERE (field_id = 3 AND value = 'test7') OR (field_id = 4 AND value = 'test7') OR (field_id = 13 AND value = 'Hemraj')
UPDATE sh SET sh.Col2 = (SELECT TOP 1 sh_inner.Col2 FROM Temp.dbo.Sheet4 sh_inner WHERE sh_inner.Col2 IS NOT NULL ORDER BY ABS(sh.Col1 - sh_inner.Col1)) FROM Temp.dbo.Sheet4 sh WHERE sh.Col2 IS NULL
mysql> delimiter // mysql> CREATE TRIGGER upd_check BEFORE UPDATE ON account -> FOR EACH ROW -> BEGIN -> IF NEW.amount < 0 THEN -> SET NEW.amount = 0; -> ELSEIF NEW.amount > 100 THEN -> SET NEW.amount = 100; -> END IF; -> END;// mysql> delimiter;
CREATE PROC MyInsertM2M(@fieldname1 int, @fieldname2 varchar(20), @Key1 int, @Key2 int etc) AS BEGIN INSERT INTO MyMainTable(fieldname1, fieldname2...) VALUES(@fieldname1, @fieldname2...) INSERT INTO MyResolverTable(KeyField1, Keyfield2) VALUES (@Key1, Key2) END
SELECT (CASE WHEN a.column1 is NULL THEN 'Active' ELSE 'Inactive' END) as Status_Define_Resources, <<some columns>>, (CASE WHEN b.column1 is NULL THEN 'ACTIVE' ELSE 'INACTIVE' END) as STATUS_USER, <<some columns>>, c.LASTNAME||','||c.FIRSTNAME||','||c.MIDDLENAME as "Complete Name" FROM table1 a, table2 b, table3 c
select year, month, day, sum(loginCount) from user group by year, month, day
transform count(*) as CountOfReceipts select Month(x.[Receipt Date]) as Month from the_table x where Department = 'marketing' group by Month(x.[Receipt Date]) pivot x.Type;
WHERE DATE(MyDate) = '2013-07-08'
textBox1.DataBindings.Add(new System.Windows.Forms.Binding("Text", n.ADataSet, "Table.date", true, System.Windows.Forms.DataSourceUpdateMode.OnValidation, null, "yyyy-MM-dd"));
select * from A t where exists ( select 1 from A where id = t.id having count(distinct partid) > 1)
SELECT BatchID, MAX(CASE WHEN EntityChanged = 'ABC' THEN ChangeValue END) 'ABC', MAX(CASE WHEN EntityChanged = 'ABCD' THEN ChangeValue END) 'ABCD', MAX(CASE WHEN EntityChanged = 'Something' THEN ChangeValue END) 'Something', MAX(CASE WHEN EntityChanged = 'SomethingMore' THEN ChangeValue END) 'SomethingMore' FROM YourTable t GROUP BY BatchID
SELECT u.user_id, u.name, b.billing, s.stocks FROM user_details u LEFT JOIN billing_details b on b.user_id = u.user_id LEFT JOIN stock_details s on s.user_id = u.user_id
SELECT t1.id, t1.Game, t1.Points, SUM(t2.Points) [Points (Add)] FROM yourTable t1 JOIN yourTable t2 ON t1.Game = t2.Game AND t1.id >= t2.id GROUP BY t1.id, t1.Game, t1.Points
select convert(varchar(8), getdate(),120) + convert(varchar(3),datename(month,getdate()))
select A, B, C from (select t.*, count(*) over (partition by A, B) as cnt from t ) t where cnt > 1;
insert into table (col1,col2,col3,col4,col5) select null,col2,col3,col4,col5 from table where col2 = 'anyvalue' and more conditions... ;
db.Execute "SQL DB", "INSERT INTO ABPCahirMIS.dbo.TESTDB (TEST) VALUES(1)"
SELECT mshiptype_name, timeslot_name, timetable_name FROM mshiptypes ST INNER JOIN paymentoption PO ON ST.mshiptype_id = PO.mshiptype_id INNER JOIN membertopaymentoption MPO ON PO.paymopt_Id = MPO.paymopt_Id INNER JOIN timetables TT ON ST.timetable_id = TT.timetable_id INNER JOIN timeslottotimetables TTT ON TT.timetable_id = TTT.timetable_id INNER JOIN timeslotss TS ON TTT.timeslot_id = TS.timeslot_id WHERE MPO.member_id = <members_id>
select * from ( select a.* , rank() over ( partition by fname, lname, accountid order by creation_date desc , update_date desc ) as rnk from my_table a ) where rnk = 1
SELECT ImpFile, DATEADD(hh, DATEDIFF(hh, 0, ImpDate), 0) FROM nol_artikula_izmaina
select substring_index(group_concat(bill_id order by date, bill_id desc desc), ',', 1) as bill_id, max(date) as date, substring_idnex(group-concat(bill_amount order by date, bill_id desc), ',', 1) as bill_amount from bills group by year(date), month(date)
SELECT rec.id, rec.username FROM users send JOIN messages ON (messages.send_id = send.id) JOIN users rec ON (messages.receive_id = rec.id) WHERE send.id = SOMEUSERID
SELECT x.f1,Count(x.f1) FROM (SELECT p1 As F1 FROM table UNION ALL SELECT p2 As F1 FROM table UNION ALL SELECT p3 As F1 FROM table) x GROUP BY x.f1
SELECT items, MAX(weight) FROM mytable GROUP BY items ORDER BY MAX(weight) DESC
update players, teams set players.team = teams.id where players.team = teams.name
UPDATE test SET name = INSERT(name, LENGTH(name), 0, '_');
^(\S+\s+){5}151
SELECT poverty FROM (SELECT COUNT(language) as langnum, country, RANK() OVER (ORDER BY COUNT(language) DESC) as ranking FROM "Language" GROUP BY country ) conto JOIN "Economy" AS E ON E.country=conto.country WHERE conto.ranking = 1 ORDER BY conto.langnum DESC;
select to_char(to_date(TMS,'YYYY-MM-DD')+3,'YYYY-MM-DD') from city;
Select Case When [Value] < 0 Then 0 Else [Value] End From Example
select date_format(begin_datum, '%e-%b-%y')
select count(*) as total_users , date(user_registered) as reg_date from wp_users group by reg_date having total_users > 0
select itemID, itemTitle, deleted, userID FROM( SELECT i.id_itemID, i.itemTitle, M.deleted, M.userID FROM MyList M right OUTER JOIN Items I ON I.itemID= M.itemID ) as MyTableItems where itemID = 3 or itemID is null
select date_start, date_finish from some group by date_start, date_finish order by max(id) desc
select 1 from tblMessage where '210' = STR(210,3)
select * from ( SELECT *, LAG(Group, 1,0) OVER (ORDER BY BeginDate) AS PreviousGroup FROM table ) where PreviousGroup is null or PreviousGroup <> group
SELECT username, value1, uploaded_date FROM (SELECT username, value1, uploaded_date, RANK() OVER (PARTITION BY username ORDER BY value1 ASC) AS rk FROM test) t WHERE rk = 1
DECLARE FUNCTION your_fnc() RETURN ... AS ... BEGIN SELECT your_fnc() FROM DUAL; END;
SELECT DISTINCT a.* FROM Vehicle AS a INNER JOIN Vehicle AS b ON a.License = b.License WHERE a.VIN != b.VIN AND a.Region != b.Region AND (a.Region = 1 OR b.Region = 1)
SELECT @username = user FROM MyTable WHERE id = @id;
SELECT dc.constraint_name, dc.constraint_type, dc.owner, dc.table_name FROM dba_cons_columns dcc JOIN dba_constraints dc ON (dcc.constraint_name = dc.r_constraint_name and dc.owner = dcc.owner) WHERE dcc.owner = 'OWNER_NAME' and dcc.table_name = 'TABLE_NAME';
select t1.id from t1 where t1.id not in (select t2.id from t2)
^(?!.*going to.*$)
select columna from your_table where columnb = 1 intersect select columna from your_table where columnb = 3
SELECT Id, SUM( CASE WHEN Item1 is NULL THEN 0 ELSE 1 END + CASE WHEN Item2 is NULL THEN 0 ELSE 1 END + CASE WHEN Item3 is NULL THEN 0 ELSE 1 END + CASE WHEN Item4 is NULL THEN 0 ELSE 1 END + CASE WHEN Item5 is NULL THEN 0 ELSE 1 END ) 'Count' FROM tableName GROUP BY Id
select * from employee where level <= 5 connect by prior id = .manager start with username = 'abc'
CREATE PROCEDURE [dbo].[viewSimilarRecords] @recordType varchar(25), @recordSource varchar(25) AS SELECT * FROM myTableName WHERE (recordtype =@recordType OR @recordType IS NULL) AND --<<change to OR?? (recordsource=@recordSource OR @recordSource IS NULL) --^^^^^^^^^^^^^^^^^^^^^^^^ GO
select t.A from mytable as t group by t.A having min(t.B) = max(t.B);
SELECT * FROM table_name WHERE Name LIKE '%query%' OR Tel.No LIKE '%query%' OR City LIKE '%query%' OR State LIKE '%query%' OR Address LIKE '%query%'
with testData as ( select 'Read Only, Write, read only, Admin' test from dual union all select 'Read, Write, read only, Admin' test from dual union all select 'Admin, Read Only (no), read only(see mgr), Admin' test from dual ) select * from testData where lower(test)||',' like '%read only,%';
select power(max(prod_year) - min(prod_year), 2) from mediaitems mi;
SELECT bar_id, bar_name, town_name, advert_text FROM bar b inner join towns t on t.town_id = b.town_id_fk left outer join baradverts ba on t.town_id = ba.town_id_fk AND b.bar_id = ba.bar_id_fk
SELECT COUNT(*) as Count, sum(sch.HomeTeamID = 34) AS Hawaii_home_count ...
Select username, select min(date) over (partition by username) as firstDate, date, row_number() over (partition by username order by date) as date_sequence from data as outer;
SELECT AVG(Value) FROM ( SELECT TOP (10) Value FROM YourTable WHERE ... ORDER BY DateColumn DESC ) AS s ;
update catalog_product_entity_text set value = "the product's name test hah test." where attribute_id = 66 and entity_id IN (select product_id from catalog_category_product where category_id = 40);
Example: SELECT last_day('2003-03-15 01:22:33') FROM src LIMIT 1; 2003-03-31 00:00:00
select ID, Name from sometable a group by id, name having count(id) > 2 or max(cast(a.[appointment date] as date)) > cast(GETDATE() - 5 as date)
SELECT [group_ID] FROM Table1 T WHERE [tax_Id] in (2,3,4) And not exists ( select 1 from Table1 E Where T.group_id = E.group_id And tax_id not in (2,3,4) ) Group by group_id Having count(distinct tax_id) =3
SELECT * FROM products WHERE date_available > CURDATE()
declare @money_sum decimal declare @days_count int set @money_sum = SELECT SUM(MONEY) FROM table_name set @days_count = SELECT COUNT(DISTINCT date) FROM table_name return @money_sum/ @days_count
SELECT * FROM TableA WHERE DATEDIFF(DAY, ExpirationDate, GETDATE()) = 7 OR DATEDIFF(DAY, ExpirationDate, GETDATE()) = 24
select _id, busnum, case cast (strftime('%w', servdate) as integer) when 0 then 'Sunday' when 1 then 'Monday' when 2 then 'Tuesday' when 3 then 'Wednesday' when 4 then 'Thursday' when 5 then 'Friday' else 'Saturday' end as servdayofweek from tb1 where ...
update table1 t1 join table2 t2 on t1.f2 = f2.e2 set f2 = 'foo', f3 = 'bar';
WHERE (Sub = @SubscriberState OR (@SubscriberState IS NULL AND Sub IS NULL))
... SET NEW.attendance_percent = (NEW.class_attended/NEW.class_total) ...
WITH LastDays (calc_date) AS (SELECT DATEADD(DAY, DATEDIFF(DAY, 0, CURRENT_TIMESTAMP) - 6, 0) UNION ALL SELECT DATEADD(DAY, 1, calc_date) FROM LastDays WHERE DATEADD(DAY, 1, calc_date) < CURRENT_TIMESTAMP) SELECT ... FROM LastDays l LEFT JOIN (YourQuery) t ON (l.cal_date = t.YourDateColumn);
select ROW_NUMBER() over (order by (select 0)) as ID,count(*) as count,kind1 as new1,kind2 as new2,kind3 as new3 from yourtable group by kind1,kind2,kind3
SELECT date,SUM(rainmm) FROM weather WHERE MOD(minute(time),60)=0 GROUP BY date ORDER BY date;
SELECT YourTable.PK, YourTable.[Date], YourTable.[Status], YourTable.Serial FROM ( SELECT Serial, MAX([Date]) AS [MaxDate] FROM YourTable GROUP BY Serial ) DerivedMaxDateBySerial LEFT OUTER JOIN YourTable ON DerivedMaxDateBySerial.Serial = YourTable.Serial AND DerivedMaxDateBySerial.[MaxDate] = YourTable.[Date] WHERE YourTable.[Status] != 8
SELECT * FROM sys.dm_exec_query_stats AS qs CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) AS st where st.text = 'Your Query Here'
CREATE PROCEDURE update_value( p_value IN varchar2 ) AS l_month_num integer := to_number( to_char( sysdate, 'mm' )) ; BEGIN IF( l_month_num = 1 ) THEN UPDATE report SET jan = p_value; ELSIF( l_month_num = 2 ) THEN UPDATE report SET feb = p_alue; ELSIF ... END IF; END;
WITH cte AS ( SELECT * ,[dec] = COUNT(CASE WHEN STATUS = 'DECLINE' THEN 1 END) OVER (PARTITION BY ID) ,[app] = COUNT(CASE WHEN STATUS = 'APPROVE' THEN 1 END) OVER (PARTITION BY ID) FROM #Audit ) SELECT ID, STATUS, [TIME] FROM cte WHERE NOT ([dec] >= 1 AND [app] >= 1 AND [STATUS] = 'DECLINE');
DECLARE @event_type varchar(42) IF EXISTS(SELECT * FROM inserted) IF EXISTS(SELECT * FROM deleted) SELECT @event_type = 'update' ELSE SELECT @event_type = 'insert' ELSE IF EXISTS(SELECT * FROM deleted) SELECT @event_type = 'delete' ELSE --no rows affected - cannot determine event SELECT @event_type = 'unknown'
time dbaccess <dbname> file.sql
class TestExecQueue { static mapping = { scenario column:'test_scenario_id' } TestScenario scenario }
<ul> <% dim irecordcount irecordcount=1 %> <li> <% do until rs.eof %> <img src="<%=rs("big_image")%>" /> <!--Im only displaying 30 images and here I write the </li><li> if it an even row, and also I dont write the last </li><li>--> <%if irecordcount mod 2=0 and irecordcount <>30 then%> </li> <li> <% end if irecordcount=irecordcount+1 rs.movenext loop%> </li> </ul>
UPDATE FACTBUDGET SET BUDGETAMOUNT = @JAN WHERE BUDGETDATEID > 20141231 AND BUDGETDATEID < 20150201 AND MISCID = 0 ;
SELECT eteam.teamname 'Team Name', COUNT(goal.teamid) 'Total Goals' FROM eteam JOIN goal ON eteam.id=goal.teamid GROUP BY goal.teamid ORDER BY eteam.teamname
SELECT name, file FROM users,userfiles, files WHERE users.id = userfiles.usrid AND usersfiles.fileid = files.id;
select courseid as cid, if ( select count(*) from instructor where courseid = cid ) > 2 then 'Committee' else list(name order by name) endif as profs from instructor group by courseid order by cid
SELECT MyTable.team AS team, MyTable.rel AS rel, AVG(iif(Testable,1,0)) AS result FROM MyTable WHERE MyTable.team IN (1,2) AND MyTable.rel IN (1,2,3) GROUP BY MyTable.rel, MyTable.team ORDER BY MyTable.team, MyTable.rel
select * from ( SELECT DISTINCT name, age FROM donates, persons WHERE name = donor AND name IN (SELECT receiver FROM donates) ORDER BY age DESC ) where ROWNUM <= 1;
select case when isnull(price, 0) <= 0 then 0 else 1 end as validprice
with t as ( select 'L10 1TY' as postcode from dual union all select 'WF2 5TG' from dual union all select 'W7 5RR' from dual ) select postcode, regexp_substr(postcode, '^[[:alpha:]]+', 1, 1) as region from t; POSTCODE REGION -------- ------- L10 1TY L WF2 5TG WF W7 5RR W
select case when RNum=1 then UserName else '' end UserName, case when RNum=1 then Fee else '' end Fee, ReferenceName, Billed from( select *, ROW_NUMBER() over (partition by UserName order by UserName) RNum from tbl )x
HASHBYTES('SHA1', ISNULL(CONVERT(varchar(20),[EmployeeID]),'') + '|' + ISNULL(CONVERT(varchar(20),[ClientID]),''))
SELECT LAG(TimeEnd, 1) OVER (ORDER BY PhaseID) TimeStart
SELECT o.`name` , COUNT(o.id) `count` FROM computers c LEFT JOIN operatingsystems o ON (c.operatingSystemId =o.id) GROUP BY o.id
NVL(NULLIF( ALIMENTATION_COD_ACT_MCH(ta.CA_DDE_TYP_DDE,tb.COD_SECVTE,tb.NUM_FOU1,ta.CA_COD_ENSCIAL), 'N'), '')
decode(count(distinct prl.suggested_vendor_name) over (partition by prh.requisition_header_id),1,prl.suggested_vendor_name,0,null,'MULTIPLE') vendor
SELECT e.name AS name, m.name AS manager_name FROM emp e LEFT JOIN emp m ON e.mgr_id = m.emp_id
SELECT [DocumentNo], ConcatRelated("[Description]","[TableName]","[DocumentNo] = " & [DocumentNo]) AS [Description] FROM [TableName];
select 'quote here: ''' , 'double quote'from dual union all select q'@quote here: ''@', 'q syntax, double quote means two quotes' from dual union all select q'@quote here: '@', 'q syntax, no need fou double quotes' from dual union all select 'two quotes here: ''''', 'same thing to have two quotes' from dual union all select q'@two quotes here: ''@', 'and two quotes with q syntax ' from dual union all select q'@this is the delimiter char: @.@', 'the delimiter character can be used wherever in the string' from dual union all select q'@@delimiter is in the beginning and in the end@@', 'you have to double the delimiter if you want it in the end or beginning' from dual
select d.name, sum(s.amount) from sales s join department_employees de on de.worker_id = s.worker_id join departments d on d.id = de.department_id group by d.name
select Item , ItemName , Quantity from yourtable A cross join (select num from numbers) b where a.Quantity <= b.num
SELECT fld_name FROM (tbl_product_colors JOIN tbl_product ON tbl_product_colors.fk_prod_id = tbl_product.fld_id) JOIN tbl_colors ON tbl_product_colors.fk_color_id = tbl_colors.fld_id
update yourtable set col = substring(col, 1, charindex(',', col)-1) where charindex(',', col) > 0 -- only update the rows with a comma
;WITH CTE AS ( SELECT docid, writing, submissionDate, ROW_NUMBER() OVER (ORDER BY submissionDate) AS position FROM My_Table ) SELECT docid, writing, submissionDate, position FROM CTE WHERE docid = 34
SELECT col, value FROM (SELECT CAST(col1 AS VARCHAR) AS col1, CAST(col2 AS VARCHAR) AS col2, CAST(col3 AS VARCHAR) AS col3, CAST(col4 AS VARCHAR) AS col4 FROM Table1) p UNPIVOT (value FOR col IN (col1, col2, col3, col4) ) AS unpvt;
SELECT SUBSTR (355560, 2, SUBSTR (355560, 1, 1)) FROM DUAL;
select max(case when csv not in(select orderid from mg_orders) then csv end) as csv1, max(case when csv not in(select orderid from lab_orders) then csv end) as csv2, max(case when csv not in(select orderid from pcg_pharmacogenetics) then csv end) as csv3, max(case when csv not in(select orderid from well_wellness) then csv end) as csv4 from csvdata
create view newest123 as ( -- this gets the newest review for member_id 123 select * from reviews where member_id = 123 order by date desc limit 1 ) select * from ( select * from newest123 union select * -- all the reviews that aren't for member_id 123 from reviews where member_id != 123) filtered order by date desc limit 10 -- sort 'em and take the top 10
select top (1) with ties C.CompanyName, Year(O.OrderDate) as Yr, sum(OD.Quantity) as Total from Orders as O join Customers as C on C.CustomerID = O.CustomerID join "Order Details" as OD on OD.OrderID = O.OrderID group by C.CompanyName, Year(O.OrderDate) order by row_number() over ( partition by Year(O.OrderDate) order by sum(OD.Quantity) desc );
;WITH cte AS ( SELECT (t1.Amount / t1.Tax * t1.Extra) AS [CalculatedValue], t1.Option1, t1.Option2, t1.Option3 FROM t1 ) SELECT cte.[CalculatedValue] + Option1 AS [Value1], cte.[CalculatedValue] + Option2 AS [Value2], cte.[CalculatedValue] + Option3 AS [Value3],
case when cast(isnull(f.routingnum, 0) as bigint) <> cast(isnull(replace(t.routingnum, '''', ''), 0) as bigint) then 'do not match' else 'match' end
SELECT * FROM tableName where Date >= DATE_SUB(NOW(),INTERVAL 3 HOUR);
SELECT a.gid, a.the_geom FROM pointsTable a LEFT JOIN river_100_1k b ON ST_Intersects(a.the_geom, b.the_geom) LEFT JOIN river_200_1k c ON NOT ST_Intersects(a.the_geom, c.the_geom) -- Not Intersects LEFT JOIN river_1000_1k d ON NOT ST_Intersects(a.the_geom, d.the_geom) -- Not Intersects WHERE AND c.gid IS NULL AND d.gid IS NULL AND b.gid=2 AND c.gid=2 AND d.gid=2 ;
concat(concat(INITCAP(lastname), INITCAP (firstname)), '~~~~~')
SELECT a.category, CASE WHEN a.salesVolumes < b.salesVolumes THEN 'TRUE' ELSE 'FALSE' END AS salesIncreasing FROM MyTable a INNER JOIN MyTable b ON a.category = b.category WHERE a.year = 2002 AND b.year = 2003
and <condition>
SELECT A, B FROM MyTable WHERE A IN ( SELECT A FROM MyTable GROUP BY A HAVING COUNT(*)>1 )
SELECT table1.name, table2.name2 , table3.name3 from table3 left join table2 on table3.table2Id = table2.table2Id left join table1 on table2.table1Id = table1.table1Id
SELECT * FROM tableOne WHERE (SELECT COUNT(*) FROM tableTwo WHERE tableTwo.data_id = tableOne.data_id) = 0 ORDER BY RAND() LIMIT 1
UPDATE table SET col1 = CASE WHEN col1 ='--' THEN col2 ELSE col1 END, col2 = CASE WHEN col2='--' THEN col1 ELSE col2 END WHERE col2='--' OR col1 ='--';
SELECT 1 FROM DUAL WHERE REGEXP_LIKE('23.9', '^\d+(\.\d+)?$', '')
ORDER BY d1, d2
SELECT id, tbl.dateof dateof FROM tbl INNER JOIN (SELECT fk, MAX(dateof) dateof FROM tbl GROUP BY fk) temp ON tbl.fk = temp.fk AND tbl.dateof = temp.dateof
SELECT a.number, max(c.quantity) as qty, max(c.retail_price) as price FROM catalog.product `a` JOIN catalog.product_variation `b` ON a.id = b.product_id JOIN catalog.price_regular `c` ON b.id = c.product_variation_id WHERE c.retail_price BETWEEN 5 AND 6 AND a.status_id = 1 GROUP BY a.number;
SELECT t.* FROM t ORDER BY (CASE WHEN A < B THEN A ELSE B END), (CASE WHEN A < B THEN B ELSE A END), A;
SET PAGESIZE 50000 SET MARKUP HTML ON TABLE "class=detail cellspacing=0" ENTMAP OFF column colA heading "<p style='width:800px'>800SetColA</p>" format a40 column colB heading "<p style='width:10px'>10SetColB</p>" format a40 spool test.html select level cola, level-5 colb from dual connect by level <10 ; spool off
INSERT INTO T1 (c1, c_additional) -- here SELECT C1, 'needed_value' -- just select a constant here FROM dblink( 'hostaddr=127.0.0.1 port=5432 dbname=DB2 user=postgres password=postgres', 'SELECT * FROM T2') AS T2_row(C1 integer)
drop procedure if exists sp_test; delimiter # create procedure sp_test( in p_facility_id int unsigned, -- p prefix = parameter in p_start_date date, in p_end_date date ) begin declare v_facility_name varchar(255) default null; -- v prefix = variable select f.facility_name into v_facility_name from facilities f where f.facility_id = p_facility_id limit 1; select f.*, upper(v_facility_name) as facility_name from facilities f; end# delimiter ; call sp_test (1, curdate() - interval 1 month, curdate());
CREATE TRIGGER trig_Insert_Stock ON [Product] FOR INSERT AS Begin Insert into Stock (ProductId, Stock) Select Distinct i.ProductId, 0 from Inserted i End
sqlite3 test.sqlite2 vacuum
SELECT t1.TimeStamp, t2.State, t1.OtherData FROM Table1 t1 inner join Table2 t2 on t1.SpecialNumber = t2.SpecialNumber inner join (SELECT MAX(time stamp) maxts, state FROM table1 inner join table2 ON table1.specialnumber = table2.specialnumber GROUP BY state) t3 on t2.State = t3.State and t1.TimeStamp = t3.maxts
UPDATE messages SET status=10 WHERE ID in (SELECT TOP (10) Id FROM Table WHERE status=0 ORDER BY priority DESC);
store_id zip 1 11111 1 12222 2 12222 2 22222
select col1,col2 from table union all select col1,col2 from some_other_table union all select col1,col2 from yet_another_table;
create table closure(parent int, child int); insert into closure values(1, 10), (10, 100); delete from closure where exists( select * from closure p, closure c where p.parent = closure.parent and c.child = closure.child and p.child=10 and c.parent=1);
select BusinessUnit, CustomerID, ProductFamily , Revenue , (table1.Cost * table2.Revenue ) / (SUM(Revenue) over(partition by table1.BusinessUnit, table1.ProductFamily )) AS Allocated_Cost from table1 INNER JOIN table2 ON ( table1.BusinessUnit = table2.BusinessUnit AND table1.ProductFamily = table2.ProductFamily ) ;
create temporary table tmp1 Select flatpos from archdetails where version='1.3' AND compname IN ( select distinct compname from svn3 where revno='r270294' ) create temporary table tmp2 select count(distinct compname) as c, sum(CASE WHEN inFlat=1 THEN 1 ELSE 0 END) as s, min(flatLoopIndex) as m from archdetails where version='1.3' AND compname IN ( select distinct compname from svn3 where revno='r270294' ) select * from tmp1 select tmp2.c, tmp2.s, tmp2.m from tmp1, tmp2
Dim str As String = "Data Source=DESKTOP; uid=" & ID & "; pwd=" & PASS & ";database=DB"
SELECT o.*, max(e.status) AS org_status FROM organization o JOIN event e ON e.organiszation_id = o.organization_id GROUP BY o.organization_id ORDER BY org_status DESC, o.rank DESC, o.name;
;with cte (rn, id, inst_id, person_name, email) as ( select row_number() over (partition by inst_id order by id) rn, * from person ) update f set person1 = cte1.person_name, email1 = cte1.email, person2 = cte2.person_name, email2 = cte2.email from firm f left join cte cte1 on f.inst_id = cte1.inst_id and cte1.rn = 1 left join cte cte2 on f.inst_id = cte2.inst_id and cte2.rn = 2
SELECT ft.thread_id, ft.thread_title, fp.*, pmin.postcount FROM forums_threads AS ft JOIN ( SELECT post_thread_id, MAX(post_date), COUNT(post_id) AS postcount FROM forums_posts GROUP BY post_thread_id ) AS pmin ON ft.thread_id=pmin.post_thread_id JOIN forums_posts AS fp ON fp.post_thread_id=pmin.post_thread_id AND fp.post_date = pmin.post_date WHERE ft.thread_forum_id=84 ORDER BY ft.thread_date DESC
select id,b,c from tablename inner join ( select id, count(A) as CountDuplicates from TableName as base group by A,id having (count(A) > 1) )d on tablename.id= d.id
select * from table_2 where not exists (select 1 from table_1 where table_1.emp_id = table_2.emp_id);
select `Caller_id` from `CallTable` group by `Caller_id` having sum(`Is_picked` = 'yes') = 0
SELECT a.*,b.type FROM article a INNER JOIN (SELECT id,'news' AS type FROM news UNION SELECT id,'courses' AS type FROM courses) b ON a.id=b.id;
SELECT base.packageID, servers.server, (SELECT count(*) FROM base AS b1 WHERE b1.packageId = base.packageId AND b1.server = servers.server) deployed FROM base, servers WHERE base.server = 'baseline' AND deployed = 0;
MERGE table2 AS target USING table1 AS source ON (target.email = source.email) WHEN NOT MATCHED BY TARGET THEN INSERT ( email, country, Phone ) VALUES ( source.email, source.country, source.phone );
SELECT ct.*, t.* FROM exp_channel_titles as ct LEFT JOIN transactions as t on (ct.entry_id = t.restaurant_id) WHERE t.cardid > 0 and t.restaurant_id=0 order by t.created DESC
SELECT COUNT(id_sale) AS total_transactions,sold_to, CAST(strftime('%m', sale_date) AS INTEGER) month, CAST(strftime('%Y', sale_date) AS INTEGER) year, sale_date FROM sales WHERE month=5
update YourTable set YourCol = '00' + STUFF( YourCol,6,0,'00') WHERE YourCol LIKE '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]'
create or replace trigger pick_a_name before insert or update on mytable for each row begin :new.full_name := :new.firstName ||' '|| :new.lastName; end pick_a_name;
with rank_query as ( SELECT section, name, score, RANK() OVER (PARTITION BY section ORDER BY score) score_rank FROM myTable ) select * from rank_query where score_rank <= 10;
SELECT sno, iif(Len([Code])<=5,[Code],iif(ASCII([Code])>57,Right([Code],Len([Code])-1),Mid([Code],3))) AS Codeno FROM table1
SELECT * FROM my_table WHERE createdate BETWEEN DATE_SUB(NOW(), INTERVAL 1 week) AND NOW(); SELECT * FROM my_table WHERE createdate BETWEEN DATE_SUB(NOW(), INTERVAL 1 month) AND NOW() ; SELECT * FROM my_table WHERE createdate BETWEEN DATE_SUB(NOW(), INTERVAL 1 year) AND NOW();
select distinct a.a_id, b.b_id, a.a_value, b.b_value from b full join a on b.b_id = a.a_id and a.a_cnt_id = 849 and b.b_cnt_id = 848;
CASE WHEN BP_Systolic >= '160' OR BP_Diastolic >= '100' THEN 'Stage 2 Hypertension' WHEN BP_Systolic BETWEEN '140' AND '159' OR BP_Diastolic BETWEEN '90' AND '99' THEN 'Stage 1 Hypertension' WHEN BP_Systolic BETWEEN '120' AND '139' OR BP_Diastolic BETWEEN '80' AND '89' THEN 'Prehypertension' WHEN BP_Systolic < '120' AND BP_Diastolic < '80' THEN 'Normal' END AS BP_Category
-- UserType table -- UserTypeID INT -- PK -- Type NVARCHAR(50)
if (rs.next()) { String option = rs.getString("options"); jAnswerA.setText(option); }; if (rs.next()) { String optionB = rs.getString("options"); jAnswerB.setText(optionB); };
USE [new_db_name] GO IF EXISTS (SELECT * FROM sys.database_principals WHERE name = N'login_name') DROP USER [login_name] GO CREATE USER [login_name] FOR LOGIN [login_name] GO EXEC sp_addrolemember N'My_StoredProcs', N'login_name' GO EXEC sp_addrolemember N'db_datareader', N'login_name' GO EXEC sp_addrolemember N'db_datawriter', N'login_name' GO
SELECT id, Status, DeliveryDate, PromiseDate FROM CustomerOrderT WHERE Status > 2 and Status <7 ORDER BY IIF(DeliveryDate > PromiseDate, PromiseDate, DeliveryDate);
declare @date datetime set @date='07/11/2013 11:22:07' SELECT cast(convert(varchar(20),substring(convert(nvarchar(20),@date, 9), 0, 21) + ' ' + substring(convert(nvarchar(30), @date, 9), 25, 2),105) as datetime)
select PersonID from Person p inner join (select value as AName from dbo.fnSplit('David;John;Kevin', ';')) Names on p.Name LIKE '%' + Names.Value + '%'
SELECT table_A.*, table_B.*, table_C.*, table_D.* FROM table_A INNER JOIN table_B ON table_A.my_field = table_B.my_field LEFT JOIN table_C ON table_B.my_field = table_C.my_field and table_B.complete ='1' LEFT JOIN table_D ON table_C.my_field = table_D.my_field
SELECT id, name, time FROM ( SELECT book_id id, book_name name, book_time time FROM books UNION SELECT movie_id id, movie_name name, movie_time time FROM movies ) booksandmovies ORDER BY time DESC;
CREATE UNIQUE INDEX unique_cd0_cd1 ON VARIANTCOMBINATIONRULE (least(VARRECID0, VARRECID1), greatest(VARRECID0, VARRECID1));
SELECT case when conditional = 1 then 'MAIN' when conditional <> 1 and conditional < 2 then UPPER(Title) else Title end as Title , COUNT(Title) AS NumberOfTitles FROM Table GROUP BY case when conditional = 1 then 'MAIN' when conditional <> 1 and conditional < 2 then UPPER(Title) else Title end ORDER BY case when conditional = 1 then 'MAIN' when conditional <> 1 and conditional < 2 then UPPER(Title) else Title end
SELECT GROUPS.*, USERS.* FROM GROUPS LEFT OUTER JOIN USERS ON GROUPS.ID = USERS.GROUPID AND USERS.ISDELETED = 'F'
select s.DateAdded, s.Souring, s.Inake, s.placement, s.PreviousSunday, CONCAT(s.DateAdded, ' => ', e.DateEnd) as DateStartEnd from table_name as s inner join (select MAX(DateAdded) as DateEnd, PreviousSunday from table_name group by PreviousSunday) as e on s.PreviousSunday = e.PreviousSunday group by e.DateEnd order by s.DateAdded
WHERE posteddate BETWEEN DATEADD(dd, -30, GETDATE()) AND GETDATE()
create table mytable( col_1 int ,col_2 varchar(100) ,col_3 date ,primary key(col_1) ) create table mytable_deleted( delete_id int not null auto_increment ,delete_dtm datetime not null -- All of the original columns ,col_1 int ,col_2 varchar(100) ,col_3 date ,index(col_1) ,primary key(delete_id) )
SELECT "from", "to", timestamp FROM ( SELECT "from", "to", timestamp, LAG(("from", "to")) OVER (ORDER BY timestamp) AS prev FROM Table1 ) T1 WHERE ("from", "to") IS DISTINCT FROM prev
SELECT Item FROM ( (SELECT Item, Count(*) Cnt FROM (SELECT Item FROM Received1 UNION ALL SELECT Item FROM Received2 UNION ALL SELECT Item FROM Received3 UNION ALL SELECT Item FROM Recovered1 UNION ALL SELECT Item FROM Recovered2 UNION ALL SELECT Item FROM Recovered3)A GROUP BY Item)B WHERE Cnt%2 = 0 --checks for multiples of 2
SELECT CASE WHEN Count(Account)=0 THEN (Sum(Amount))/(Count(Account)) END AS New_field FROM TableName
SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME='TABLE_NAME'
WITH sorted AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY substring(id,1,3) ORDER BY val, id) AS sequence_id FROM yourTable ) SELECT * FROM sorted WHERE sequence_id = 1
Select COUNT(*),SUBSTRING(column_name,1,2) FROM table_name GROUP BY SUBSTRING(column_name,1,2)
SELECT id, first, last, category FROM names WHERE ID NOT IN (SELECT id FROM names where category = 'Tutor')
SELECT ID, Description FROM( SELECT ID+1-ROW_NUMBER() OVER (ORDER BY ID) Col, * FROM YourTable WHERE ID>=83633 )x WHERE Col=83633
SELECT e1.firstName AS violatorFirstName, e1.lastName AS violatorLastName, e2.firstName AS supervisorFirstName, e2.lastName AS supervisorLastName FROM violator v LEFT JOIN employee e1 ON v.violatorId = e1.id LEFT JOIN employee e2 ON v. supervisorId = e2.id
;WITH cte As ( SELECT array_id, [date], comment, ROW_NUMBER() OVER (PARTITION BY array_id ORDER BY [date] DESC) AS RN FROM my_table WHERE master_frame = 1 ) SELECT array_id, [date], comment FROM cte WHERE RN=1;
$myPosts = $wpdb->get_row("SELECT * FROM wp_posts"); //Add column if not present. if(!isset($myPosts->my_custom_posts_column)){ $wpdb->query("ALTER TABLE wp_posts ADD my_custom_posts_column INT(1)"); }
n_cst_String lnv_String ltr_NewConnect.DBMS = SQLCA.DBMS ltr_NewConnect.AutoCommit = SQLCA.AutoCommit ltr_NewConnect.DBParm = lnv_String.of_GlobalReplace (SQLCA.DBParm, "mytestdb", "myotherdb")
BEGIN DECLARE @mth int SET @mth = DATEPART(MONTH, GETDATE()) IF @mth BETWEEN '1' AND '3' print '1' -- SELECT-Statement ELSE IF @mth BETWEEN '4' AND '6' print '2' -- SELECT-Statement ELSE IF @mth BETWEEN '7' AND '9' print '3' -- SELECT-Statement ELSE IF @mth BETWEEN '10' AND '12' print '4' -- SELECT-Statement END
Select t1.column1, t1.column2 From table1 t1, table2 t2 Where t1.id = t2.id and t1.some_column = t2.some_column and not exists (select 1 from table3 t3 where t1.id = t3.id)
begin :test := q'< many many lines many many lines >' ; end; /
select 'A', sum(A) from table union select 'B', sum(B) from table
BEGIN TRANSACTION; SELECT DISTINCT url FROM urls WHERE task_assigned is NULL ORDER BY id LIMIT 100 FOR UPDATE; UPDATE urls SET task_assigned = NOW() WHERE url IN [list of URLs] COLLATE utf8_bin; COMMIT;
SELECT a,b FROM my_table GROUP BY a
SELECT id, viewcount + ( SELECT COUNT(*) FROM likes l WHERE l.video = v.id ) AS points FROM video v WHERE location = 30 ORDER BY points DESC, id LIMIT 4
UPDATE mytable SET field = '88' + SUBSTRING(field, 3) WHERE SUBSTRING(field, 1, 2) = '99'
SELECT First Name + ' ' + Last Name FROM Employees ORDER BY 1 OFFSET 10 ROWS;
DataSource := 'Provider=Microsoft.Jet.OLEDB.4.0;Data Source=' + Filename + ';Persist Security Info=False'; ADOConnection1.ConnectionString := DataSource; ADOConnection1.LoginPrompt := False; ADOConnection1.Connected := true; // ADOConnection1.GetTableNames(listbox1.items); AdoTable1.Connection := ADOConnection1; AdoTable1.ReadOnly := false; //if u want to make changes ADOTable1.active := false; ADOTable1.TableName := 'B2777'; //table name ADOTable1.active := true;
SELECT Name, Composer, REPLACE(Composer,'/',',') AS Make FROM tracks
SELECT job_class, sum(case when finalrate like 'A%' then 1 else 0 end) as AA, sum(case when finalrate like 'B%' then 1 else 0 end) as B, sum(case when finalrate like 'C%' then 1 else 0 end) as C FROM t GROUP by job_class
mysql_query("UPDATE scan_list2 SET sl_scanned = '1' WHERE sl_scanned = '0' ORDER BY sl_id LIMIT 40"); $sql3 = mysql_query("SELECT * FROM config LIMIT 1"); $row3 = mysql_fetch_assoc($sql3); $log=$row3['con_log']; $sql2 = mysql_query("SELECT sl_start,sl_id FROM scan_list2 WHERE sl_scanned = '1' ORDER BY sl_id DESC LIMIT 40"); while($row2 = mysql_fetch_assoc($sql2)){ echo "crk|".$row2['sl_start']."|".$log."-"; }
WHERE CAST(CASE WHEN a.variable = 'X' THEN '10' ELSE a.variable END AS int) >= 2
INSERT #Table (Column1, Column2, Column3) EXEC SP1;
select extract(hour from numtodsinterval(to_date('14:00:00','HH24:MI:SS') - to_date('13:15:00','HH24:MI:SS'),'DAY')) ||':'|| extract(minute from numtodsinterval(to_date('14:00:00','HH24:MI:SS') - to_date('13:15:00','HH24:MI:SS'),'DAY')) diff from dual / DIFF ------------------ 0:45
select device, count(*) as cnt, max(time) <-- same as latest time from database.table group by device having cnt>1 order by device;
select distinct computerId from groupMemberships m1 join groupMemberships m2 on m2.groupId=m1.groupId and (m2.isSharing or m2.userId=m1.userId) join computers c on c.userId=m2.userId where m1.userId=?
select * from mytable mt where mycol in (timestamp(current date - 100 days, '00:00:00'), timestamp(current date - 200 days, '00:00:00') );
SELECT p.Alias, p.Name, g.Group FROM Person AS p LEFT OUTER JOIN Group AS s ON p.Alias=l.Alias LEFT OUTER JOIN CGLink AS l ON l.Type=s.Type ORDER BY p.Alias, p.Name;
SELECT user, SUM(points) AS points, SUM(case when date_achieved >= (CURRENT_DATE - INTERVAL 1 MONTH) THEN points else 0 END) points_last_Month FROM myTable GROUP BY user
proc sql; create table toto (col1 varchar(8)); update toto set col1="nvar&&pays&l"; quit;
CREATE TABLE #test(DateColumn DATETIME, IntColumn INT); INSERT INTO #test VALUES ({ts'2016-01-01 00:00:00'},1) ,({ts'2016-01-10 11:30:00'},-2) ,(GETDATE(),3); SELECT DateColumn AS A ,IntColumn AS B ,DATEADD(DAY,IntColumn,DateColumn) AS C FROM #test; DROP TABLE #test;
WHERE timestamp(start_date, start_time) <= timestamp(currdate, currtime) AND timestamp(end_date, end_time) >= timestamp(currdate, currtime)
SELECT e.language_name, ecc.language_animal_code, a.animal_code FROM language_animal_codes ecc INNER JOIN languages e ON e.language_id = ecc.language_id LEFT OUTER JOIN animals a ON ecc.animal_id = a.animal_id
SELECT TABLE_NAME, COLUMN_NAME FROM sysindexes AS i INNER JOIN sysobjects AS o ON i.id=o.id INNER JOIN INFORMATION_SCHEMA.COLUMNS ON o.NAME=TABLE_NAME WHERE(indid=0 or indid=1) and DATA_TYPE like '%varchar' and(CHARACTER_MAXIMUM_LENGTH=-1 or CHARACTER_MAXIMUM_LENGTH=2147483647);
SELECT cast(AVG(Price) as decimal(6, 2)) FROM Product WHERE ProductName = 'Shoe';
SELECT u.clan_id, sum(case when cv.type = 3 then cv.value else 0 end) as totalTime, sum(case when cv.type = 1 then cv.value else 0 end) as totalMass FROM users u INNER JOIN clan_values cv ON(u.id = cv.user_id) GROUP BY u.clan_id
Select mappingid, formTypeId as "Form Type", abbreviation, case when count(formtypeid) >= 2 then 2 else Count(formTypeID) end as "Chart Count" From tables.dbo.forms where questions = answered and formtypeid = 3 group by mappingid, formtypeid, abbreviation;
delimiter // CREATE TRIGGER trigger_check BEFORE INSERT ON your_table FOR EACH ROW BEGIN IF NEW.NUM > 99999 THEN SET NEW.NUM = 0; END IF; END //
SELECT * FROM ( SELECT id, value1, value2, version, max(version) over (partition by id) as max_version FROM T WHERE id IN (1, 2, 3, ... 10) ) t2 WHERE version = max_version
select col1,col2, row_number() over (partition by col1 order by col1) as _KEYCOL from align1
SELECT Userid, User, Max(UserUpdate) AS MaxDate FROM myTable GROUP BY Userid, User
<property name="insertSql" value="${sql.accountdao.insert}" /> <property name="selectSql" value="${sql.accountdao.select}" />
SELECT * FROM user WHERE (month(birthday) * 100) + day(birthday) between 0131 and 1231
$sql = "SELECT `id`, `name` FROM `records` WHERE `name` LIKE '%".mysql_real_escape_string($q)."%'";
CREATE TABLE #Proc1TempResults ( ColA INT, --OR WHATEVER DATA TYPE ColB INT, ColC INT ) INSERT INTO #Proc1TempResults (ColA, ColB, ColC) EXEC Proc1 @ID, 0 SELECT ColA, ColB FROM #Proc1TempResults
sp_addlinkedsrvlogin [ @rmtsrvname = ] 'rmtsrvname' [ , [ @useself = ] 'TRUE' | 'FALSE' | NULL ] [ , [ @locallogin = ] 'locallogin' ] [ , [ @rmtuser = ] 'rmtuser' ] [ , [ @rmtpassword = ] 'rmtpassword' ]
SELECT STUFF(SomeString,1,11,'')
select id, one_column, another_column from two_hundred_mb_table where id = 1 select sum(one_column) / sum(another_column) from two_hundred_mb_table
Grid grd = new Grid(); XpsDocumentWriter wrt = new XpsDocumentWriter(); //Bunch of code to manipulate your grid here //Now we calculate the scaling required: double ScaleX = PageWidth / grd.Width; //The page width must be in Device Independent Units double ScaleY = ScaleX; grd.RenderTransform = new ScaleTransform(ScaleX, ScaleY); wrt.Write(grd);
SELECT users.user_id,groups.group_id,(SELECT COUNT(*) FROM user_group WHERE user_group.group_id=groups.group_id) FROM groups INNER JOIN user_group ON groups.group_id=user_group.group_id INNER JOIN users ON user_group.user_id=users.user_id ORDER BY users.user_id,groups.group_id ASC
SELECT CASE WHEN Committed_Date >= '01/04/2011' THEN 'Y' ELSE 'N' END AS Current_YTD FROM YourTable
SELECT country_code , COUNT(emission_class) AS total , SUM(CASE WHEN emission_class = 'E0' THEN 1 ELSE 0 END) AS EURO0 , SUM(CASE WHEN emission_class = 'E?' THEN 1 ELSE 0 END) AS EURO? , ... FROM DB.CUSTOMER_VEHICLE GROUP BY country_code;
PostgresQL: 250 - 1600 depending on column types MySQL: upto 4096, depending on row size Oracle: 1000 IBM DB2: 1012 Mycrosoft SQL Server: 1024 - 30000 Sybase: 45000
CREATE DATABASE PROJECT GO USE PROJECT GO CREATE TABLE Courses ( CourseID INT NOT NULL PRIMARY KEY, Name VARCHAR(64) NOT NULL UNIQUE, Code CHAR(4) NOT NULL UNIQUE ) GO
declare @keywords table ( word varchar(100) ) insert into @keywords values ('catching') insert into @keywords values ('unicorns') select kw.word, count(*) as NumMessages from your_table t inner join @keywords kw on t.comment like '%' + kw.word + '%' group by kw.word order by NumMessages
SELECT * FROM bUser WHERE ( (id+'' LIKE @id) and (name LIKE '%'+@name+'%') AND (email LIKE '%'+@email+'%') )
declare @t1 as table (id int,date datetime) insert into @t1 select 1,'2016/1/05' insert into @t1 select 2,'2012/5/09' insert into @t1 select 3,'2010/6/23' insert into @t1 select 4,'2009/7/18' insert into @t1 select 5,'2002/2/13' declare @inputDate datetime = '2003/2/12' select top 1.id from @t1 order by abs(datediff(dd,date,@inputDate)) set @inputDate = '2016/1/02' select top 1.id from @t1 order by abs(datediff(dd,date,@inputDate))
select char_length((select text_field from table where key = 1));
SQL> describe sdo_geometry
SELECT name, code FROM new n WHERE NOT EXISTS(SELECT * FROM current c WHERE c.name = n.name OR c.code = n.code)
select distinct(DeviceID) from YourTable WHERE Transmission = 'Inventory' and DeviceID not in ( select distinct(DeviceID) from YourTable WHERE Transmission in('Starting', 'Stopping') );
SELECT DISTINCT msgID, msgSubject, msgBody -- and so on FROM messages m LEFT JOIN small_group_visibility sg ON sg.msg_id = m.msg_id LEFT JOIN big_group_visibility bg ON bg.msg_id = m.msg_id WHERE sg.group_id IN (1, 2, 3) OR bg.group_id IN (10, 20);
create table W_UK as select * from W_US where 1 = 2;
Select id, SUM(CASE W = w1 THEN S ELSE 0 END) over(Partition by id order by 1) total, W from yourtable
SELECT model, price FROM Product NATURAL JOIN PC WHERE maker = 'B' UNION ALL SELECT model, price FROM Product NATURAL JOIN Laptop WHERE maker = 'B' UNION ALL SELECT model, price FROM Product NATURAL JOIN Printer WHERE maker = 'B';
SELECT ... (SELECT ... ) AS 'Current - 1', (SELECT ... ) AS 'Current - 2', ... FROM ...
SELECT * FROM dbo.Table WITH (NOLOCK)
SELECT dbo.Team.ID, dbo.Team.Comment, MAX(dbo.Team.Date) LatestDate, dbo.TeamName.Name, dbo.Contacts.ContactName FROM dbo.Team INNER JOIN dbo.TeamName ON dbo.Team.ID = dbo.TeamName.id INNER JOIN dbo.Contacts ON dbo.Team.ContactID = dbo.Contacts.ContactID WHERE dbo.TeamName.idstatus = 'Active' GROUP BY dbo.Team.ID, dbo.Team.Comment, dbo.TeamName.Name, dbo.Contacts.ContactName
CREATE TABLE Departments ( ID integer primary key, Description varchar(255), HeadOfDepartment varchar(255), ParentDepartment integer references Departments(ID) );
UPDATE tbUser SET username = LEFT(username, CHARINDEX('@', username) - 1) WHERE username LIKE '%@%'
SELECT id, nr, cost, A.subtotal AS TOTAL FROM table1 INNER JOIN (SELECT nr, Sum(cost) AS subTotal FROM table1 GROUP BY nr) AS A ON table1.nr = A.nr
select count(*), datepart(year,created) as [year], datepart(month,created) as [month], datepart(day,created) as [day] from table where created >= '8/1/2009' and created < '9/1/2009' and datepart(hour,created) >= 8 and datepart(hour,created) <= 17 group by datepart(year,created), datepart(month,created), datepart(day,created)
SELECT activity,GROUP_CONCAT(userID,' ') AS Groups FROM Activity GROUP BY activity ORDER BY activity DESC;
dim i as integer for i = 1 to 7 docmd.runsql "insert into temp table select * from qry_Input_" + CStr(i) next i
select bank_id OldBankId ,bank_name OldBankName, bank_interest OldBankInterest , bank_fees OldBankFees, bank_pic_url as BankPic from bank where bank_Id =(select bank_id from bank where bank_id= $user_id)
db.Query(fmt.Sprintf("SELECT * FROM mytable WHERE %s = ?", col), searchStr)
CREATE TRIGGER Trig_INS_Test ON Test INSTEAD OF INSERT AS BEGIN SET NOCOUNT ON INSERT INTO Test (CommaSeperatedString) SELECT CommaSeperatedString FROM inserted END
select *, max(mt.version) over (partition by mt.partitiongroup) from mytable mt where mt.id = 'some uuid';
create or replace procedure proc_1 ( i IN number ) as PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO test_table@remote_sid (id, description) VALUES (i, 'Description for ' || i); COMMIT; END; / create or replace procedure proc_base ( i IN number ) as begin insert into local_tab (id) values (i); proc_1( i ); rollback; end; /
UPDATE a SET a.IDT2 = c.ID FROM Table2 a JOIN Table1 b ON a.BRID = b.BRID JOIN TAble2 c ON b.HQID = c.BRID
Me.List_history.RowSource = "SELECT [Date] " & _ "FROM Leaves " & _ "WHERE CodePersonali = '" & Nz(Me.CodePersonali.Value) & "'"
Select * from emp where group in (item1, item2, item3)
SELECT COUNT(DISTINCT t1.userid) AS user_count FROM TRANSACTIONS t1 JOIN TRANSACTIONS t2 USING (userid) WHERE t1.product_id = 'prod1' AND t2.product_id = 'prod2';
SELECT films.film_name FROM `films` JOIN popular_films ON popular_films.film_id = films.film_id;
WHERE ISNULL(Assetclass, 'Anything but Bond') <> 'Bond'
SELECT SUBSTR(text, ip_start, ip_len) AS ip_addr FROM ( SELECT text, (LOCATE('(', text) + 1) AS ip_start, (LOCATE(')', text) - (LOCATE('(', text) + 1)) AS ip_len FROM test ) temp;
SELECT MAX(CASE WHEN rd.REPNUMBER BETWEEN 11000000 and 11099999 THEN rd.REPNUMBER END) + 1 as REPNUMBER, MAX(ri.REPITEM) + 1 as REPITEM FROM REPORTDETAILS rd INNER JOIN REPORTITEMS ri ON rd.REPNUMBER = ri.REPNUMBER
update newLocations nl set description= (select MAX(l.description) from locations l where nl.id_location=l.id_location ) where exists (select 1 from locations l2 where nl.id_location=l2.id_location);
SELECT x1.<cols>, x2.<cols> FROM dbo.YourTable AS x1 INNER JOIN dbo.YourTable AS x2 ON x1.Vendor_Code = x2.Vendor_Code AND x1.Invoice_Number = x2.Invoice_Number AND x1.Check_Number = x2.Check_Number AND x1.Payment_Amount = -x2.Payment_Amount;
ALTER TABLE YourTable ALTER COLUMN YourColumn columnType NULL
select * from ( ( select * from TableInSchema1 minus select * from TableInSchema2) union all ( select * from TableInSchema2 minus select * from TableInSchema1) )
SELECT c.id, c.name, p.name the_default_printer, c.description FROM computers c INNER JOIN groups g ON g.id = c.guid INNER JOIN printers p ON g.default_printer = p.id OR c.default_printer = p.id WHERE p.name LIKE 'mfd%'
select * from MyTable where @Param is null or case when @Param is not null and FieldCode = 'Whatever' then case when FieldValue like '%' + @Param + '%' then 1 end end = 1
create proc proc1 as select 1 as one, 2 as two declare @result table (one int, two int) insert into @result exec proc1 select one from @result
UPDATE Projects SET Projects.Is_Ready = ALL_PROJECTS.Is_Ready FROM Projects, ALL_PROJECTS WHERE Projects.ProjectID = ALL_PROJECTS.ProjectCode;
update prof set counter = counterSum from prof join (select name, number, sum(counter) counterSum from prof where whatever group by name, number) temp on prof.name = temp.name and prf.number = temp.number where whatever
SELECT * FROM city ORDER BY population DESC LIMIT 5 -- or any other N
SELECT deptno, ename (your_counter-1) new_counter FROM ( SELECT deptno, ename , ROW_NUMBER() OVER (PARTITION BY deptno ORDER BY deptno, ename) your_counter FROM scott.emp ); 10 CLARK 0 10 KING 1 10 MILLER 2 20 ADAMS 0 20 FORD 1 20 JONES 2 20 SCOTT 3 ....
class Device include DataMapper::Resource property :id, Serial has n, :locations # You probably want :order => [:time.desc] here too has 1, :latest_location, :class_name => Location, :order => [:time.desc] def lat latest_location.lat end end
from bs4 import BeautifulSoup as soup table = soup.find(id="top-player-stats-summary-grid")
INTEGER PRIMARY KEY AUTOINCREMENT
SELECT NAME, COUNT(*) AS POPULARITY FROM CATTWO GROUP BY NAME HAVING COUNT(*) = ( SELECT COUNT(*) AS MAX_POPULARITY FROM CATTWO GROUP BY NAME ORDER BY MAX_POPULARITY DESC LIMIT 1 );
SELECT id, son, technology, ISNULL((select id from table t2 where t2.id = t1.son), 0) AS father, ROW_NUMBER() OVER (ORDER BY technology, father, son) AS RowNumber FROM table t1 ORDER BY RowNumber ASC
CREATE UNIQUE INDEX idx_order_unique ON foo (parent, ordering);
select SQL_CALC_FOUND_ROWS ID, Title, Author from yourtable limit 0, 10; SELECT FOUND_ROWS();
SELECT COUNT(*) FROM tablename
command.CommandText = string.Format("DELETE FROM {0}", tableName);
mysql> select abs(datediff('2009-09-18 00:00:00', '2009-10-17 00:00:00')); +-------------------------------------------------------------+ | abs(datediff('2009-09-18 00:00:00', '2009-10-17 00:00:00')) | +-------------------------------------------------------------+ | 29 | +-------------------------------------------------------------+ 1 row in set (0.00 sec)
UPDATE WorkOrder SET name2=name1+' '+name2
UPDATE training SET finalized = complete_date + INTERVAL FLOOR(1 + (RAND() * 3)) DAY
UPDATE table_spec_data SET coverage=33 WHERE (specification_id = 247 AND data_id = 1) OR (specification_id = 248 AND data_id = 2) OR (specification_id = 249 AND data_id = 3)
SELECT m.member_first_name, cr.c_id FROM classregistration cr INNER JOIN clases c ON cr.c_id = c.class_id INNER JOIN members m ON m.member_id = cr.m_id WHERE cr.c_id = 1
declare @t table (Name varchar(17) not null,Value bit not null) insert into @t(Name,Value) values ('Val1',1), ('Val2',1), ('Val3',0), ('Val4',0), ('Val1',0), ('Val2',0), ('Val3',0), ('Val4',1) select Name,CONVERT(bit,MAX(CONVERT(int,Value))) as Value from @t group by Name
SELECT COUNT(Student) FROM YourTable WHERE Start >= @Start AND End <= @End
CASE WHEN adres.CD_land = 'NL' THEN street ELSE upper(COALESCE(postalcode + ' ', '') + street) END as Street
SELECT * FROM MyTable WITH (INDEX(IndexName)) WHERE MyIndexedColumn = 0
List cats = sess.createCriteria(Cat.class) .add( Restrictions.like("name", "Fritz%") ) .add( Restrictions.or( Restrictions.eq( "age", new Integer(0) ), Restrictions.isNull("age") ) ) .list();
Profiles | | | +-----> PreferredPicture | +-----> | | \|/ | ProfilePictures
SELECT strftime('%W','2013-05-04')-strftime('%W','2013-05-01') +1;
SELECT * FROM dbo.NGPTimesheetsPosition WHERE ProjectNO = '12169-01-c' AND CreditorEmployeeID <> 'E0000' AND DocType = 'Time Sheet' AND TransactionDate <= @MyDateParameter -- ADDED!
SELECT GROUP_NAME, GROUP_ID, SUM(CASE WHEN PASS_FAIL = 'PASS' THEN 1 ELSE 0 END) as PASS, SUM(CASE WHEN PASS_FAIL = 'FAIL' THEN 1 ELSE 0 END) as FAIL FROM log a join group b on a.group_id=b.group_id GROUP BY b.group_name, a.group_id
Select u.first_name, u.last_name, n.status From users u Left Join networks n On ( ( n.user_id = 1 And n.friend_id = u.id ) Or ( n.friend_id = 1 And n.user_id = u.id ) Where u.id <> 1
DECLARE @cnt INT SELECT @cnt = COUNT(*) FROM LinkedServer.database.schemaname.tablename IF @cnt > 40 INSERT INTO table1 VALUES(col1, col2, col3 .....)
SELECT * FROM SYSCAT.COLUMNS WHERE TABNAME= (SELECT BASE_TABNAME FROM SYSCAT.TABLES WHERE TABNAME = 'Table')
var q = from p in ProductReport where !ClientProduct.Any(c => c.ClientId == new Guid("06ae6be1-ca94-44c9-bd30-f1d4f3ac3264") && p.ProductId == c.ProductId) select p.ProductId;
select column_1||', '||column_2 as "Concatenated_Result" , column_3 from table
SELECT * FROM mytable t1 INNER JOIN mytable t2 ON t1.idA = t2.idB AND t1.idB = t2.ida AND t1.ida<t1.idb
SELECT 'Job1', job1 FROM TAB UNION ALL SELECT 'Job2', job2 FROM TAB
SELECT DATALENGTH(inputstring);
int j=st.executeUpdate("insert into mtc (entryDate) values (SYSDATE())");
$rsm = new ResultSetMapping; $rsm->addEntityResult('Player', 'p'); $rsm->addFieldResult('p', 'id', 'player_id'); $rsm->addFieldResult('p', 'name', 'name'); $sql = " SELECT p.* FROM players p WHERE CONCAT(p.first_name, ' ', p.last_name) = ? "; $query = $this->getEntityManager()->createNativeQuery($sql, $rsm); $query->setParameter(1, $name);
setdbprefs('datareturnformat','structure'); result = fetch(conn,sql_query); result.(name) ans = ...
SELECT extract( hour from x) hours FROM (SELECT (date1 - date2)x FROM B)
UPDATE items SET score= 'a', count = (SELECT COUNT(votes.id) FROM votes WHERE votes.uri = items.uri) WHERE items.id = 'b'
with CTE as (select accesses, computer, dt, row_number() over (partition by computer order by accesses desc) rn from table1 ) select * from CTE where rn = 1
select p.id, p.name, case when min(c.classificationid) = max(c.classificationid) then max(c.classificationid) else -1 end CalculatedClassification from parent p join child c on p.id = c.parentrow group by p.id, p.name
SELECT j.id job_id ,sum(case when amount is null then 0 else amount end) FROM jobs j LEFT JOIN payments p ON j.id=p.job_id GROUP BY j.id HAVING sum(case when amount is null then 0 else amount end) < 1000;
SELECT Games.Title, Genres.Name FROM Games LEFT JOIN GameGenres ON Games.Id = GameGenres.GameId LEFT JOIN Genres ON GameGenres.GenreId = Genres.Id
SELECT Users.Name, Users.userid AS users,video_id FROM watching_list JOIN Users ON Users.UserID = watching_list.UserID GROUP BY Users.userid , video_id, Users.Name HAVING COUNT(*) > 1;
INSERT INTO Comments ( A, B, C, D, Comment ) SELECT DISTINCT C.A, C.B, C.C, C.D, C.comment_value_insert FROM Core AS C INNER JOIN Comments as C1 ON C.A = C1.A and C.B = C1.B and C.C = C1.C WHERE NOT EXISTS (SELECT * FROM Comments AS O WHERE O.Comment = "Critical" AND O.A = C.A AND O.B = C.B AND O.C = C.C);
SELECT a.name, a.salary, b.salary_grade FROM a JOIN b ON a.salary BETWEEN b.lower_bound AND b.upper_bound
LEFT OUTER JOIN tbl_advisor AS d ON d.id = c.advisor_id
SELECT * FROM a WHERE (status = 'x' AND a_date < NOW()) OR (status = 'y') ORDER BY status ASC, a_date ASC LIMIT 1;
SELECT customer_name FROM customer_billing WHERE LEAST(bill_day, EXTRACT(DAY FROM LAST_DAY(SYSDATE))) = EXTRACT(DAY FROM SYSDATE);
DELIMITER $$ CREATE TRIGGER tr_au_s_articles_details AFTER UPDATE ON s_articles_details FOR EACH ROW BEGIN -- Here you can access the id of the updated article New.id -- update/insert depending on the condition of the newvalue. -- Check if id corresponds to a main_detail_id in the s_articles table -- Here an int : select count(id) from s_articles where main_detail_id = new.id END; DELIMITER ;
SELECT * FROM items LEFT JOIN //left join readStatus ON items.itemId = readStatus.itemId WHERE (readStatus.status != 1 OR readStatus.status IS NULL);
SELECT id, CAST('0' + id AS INTEGER) A FROM "my.db" ORDER BY A, id
SELECT t1.* FROM table1 t1 inner join table2 t2 on (t1.sku = t2.sku) WHERE t1.sku = 'TERM' or t2.alt_sku = 'TERM'
DELETE T1 FROM Terms t1 JOIN ( SELECT TermID FROM TermOccurrences GROUP BY TermID HAVING SUM(Counter) <=2 ) T2 on T1.TermID = T2.TermID
select distinct c1.city_name from city c1 join city c2 on c2.city_name = c1.city_name and c1.state_name <> c2.state_name where not exists (select 1 from city c3 where c3.city_name = c1.city_name and c3.state_name not in (c1.state_name, c2.state_name));
strSource = "SELECT [Product Code],[Stock Level],[Description] " & _ "FROM [products/stock] " & _ "WHERE Mid([Product Code],1,5) = '" & Me.listSource & "';"
SELECT XX, CASE WHEN Y = 1 THEN (Select X from table2 where xx= ) WHEN Y = 2 THEN (Select X from table3 where xx=) END FROM table1
SELECT P.[MONTH] ,P.[Nationality] , COUNT(*) AS Total FROM #PAXS P GROUP BY P.[MONTH] , P.[Nationality]
SELECT DISTINCT category FROM mytable
glean2_saves(username, ses_id, save_status, id)
delete t1 from tTable t1, tTable t2 where t1.locationName = t2.locationName and t1.id > t2.id
SELECT * INTO XLImport4 FROM OPENROWSET('Microsoft.Jet.OLEDB.4.0', 'Excel 8.0;Database=C:\test\xltest.xls', [Customers$])
CREATE TABLE User ( user_id INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY, fname VARCHAR(100) NOT NULL, lname VARCHAR(100) NOT NULL, email VARCHAR(100), mobile VARCHAR(15), city VARCHAR(100), demo_id INT(1) NOT NULL )
where . . . having distance < 10 order by distance;
SELECT items.title, items.artist, orders.order_date, orders.ship_date FROM items JOIN orderline ON orderline.item_id = items.item_id JOIN orders ON orders.order_id = orderline.order_id
SELECT u2.name as id_name, u1.name as linked_id_name FROM link_view_user l join panel_user u1 on u1.id = l.linked_id join panel_user u2 on u2.id = l.id
select s.Security_id, nvl(c.odate, s.Maturity_date) as Maturity_date from Security s left join Callput c on s.Security_id = c.Security_id
SELECT student_id, course_id, result FROM tbl WHERE result = 0 AND student_id NOT IN (SELECT student_id FROM table WHERE result =1 and course_id = tbl.course_id )
SELECT *,IF(LOCATE('14_',B)+3<=Length(B), INSERT(B,LOCATE('14_',B),4,''),B) C FROM ( SELECT *,IF(LOCATE('14_',A)+3<=Length(A), INSERT(A,LOCATE('14_',A),4,''),A) B FROM ( SELECT *,IF(LOCATE('14_',x)+3<=Length(X), INSERT(X,LOCATE('14_',x),4,''),X) A FROM X ) Q1 ) Q2
SELECT d = REPLACE(CONVERT(CHAR(7), d, 121), '-', '/') FROM ( SELECT DISTINCT d = DATEADD(MONTH, DATEDIFF(MONTH, '19000101', colDate), '19000101') FROM dbo.MyTable WHERE colDate >= '20120101' AND colDate < '20140101' ) AS x ORDER BY d;
SELECT * FROM table t WHERE NOT EXISTS (SELECT * FROM table WHERE t.id_number = id_number AND date > t.date)
DECLARE @NewId nvarchar(45) set @NewId = newid() SELECT replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(@NewId, 1, 'A'), 2, 'B'), 3, 'C'), 4, 'D'), 5, 'E'), 6, 'F'), 7, 'G'), 8, 'H'), 9, 'I'), 0, 'L'), '-', 'M')
select * from your_table where 'N' in (webLoad, transmitted, transmissionRcvd, ackRcvd)
SELECT * FROM ActivityLog WHERE id in ( SELECT id + 1 FROM ActivityLog WHERE activityAt >= '2015-01-23 00:00:00' AND module LIKE 'Api' AND data LIKE '%"status":false%' AND ( action LIKE 'DeviceSignUp' OR action LIKE 'UniversityStudentSignUp' ) )
session.query( TestModel).group_by( TestModel.col1).all()
SELECT p.*, s.meta_value FROM posts p LEFT JOIN storage_varchars s ON p.id = s.post_id WHERE parent_id = 20 AND STR_TO_DATE(s.meta_value, '%d-%m-%Y') >= CURRENT_DATE() ORDER BY STR_TO_DATE(s.meta_value, '%d-%m-%Y') ASC;
SELECT photo.src_big, photo.created, photo.modified, photo.owner, photo.aid, photo.caption FROM photo inner join album on album.aid = photo.aid inner join friend on album.owner = friend.uid2 WHERE uid1=me() or uid2 = me() order by modified desc,created DESC LIMIT 30
SELECT ISNULL(COUNT(e.CODE), 0) AS OK, t.ORG AS ORG FROM( SELECT DISTINCT ORG FROM EVENTS )t LEFT JOIN EVENTS e ON e.ORG = t.ORG AND e.TYPE = 'A' AND e.DATE BETWEEN '2015-07-06' AND '2015-07-12' GROUP BY t.ORG
SELECT id, max_value FROM scores CROSS JOIN (SELECT MAX(value) AS max_value FROM scores) m
SELECT COUNT(*) AS SumAll, SUM( DEPARTMENT1 ) AS Sum1, SUM( DEPARTMENT2 ) AS Sum2, SUM( DEPARTMENT3 ) AS Sum3, SUM( DEPARTMENT4 ) AS Sum4, SUM( DEPARTMENT5 ) AS Sum5, SUM( DEPARTMENT6 ) AS Sum6, SUM( DEPARTMENT7 ) AS Sum7, SUM( DEPARTMENT8 ) AS Sum8 FROM RECLAMATION WHERE EXTRACT( YEAR FROM RECLAMATIONDATE ) = 2015
SELECT personTbl.* FROM personTbl LEFT OUTER JOIN ( SELECT DISTINCT filterValue FROM filterTable WHERE filterType = 'name' ) filter ON 1 = 1 WHERE filter.filterValue = personTbl.name OR filter.filterValue IS NULL ;
declare @value varchar(10); set @value = ''; SELECT COALESCE(NULLIF(@value,''), '0')
update a set phoneNumber = b.phoneNumber from TheTable a inner join TheTable b on b.contactFirstName = a.contactFirstName and b.contactLastName = a.contactLastName and b.statusID = 2 where a.statusID = 10 and a.phoneNumber is null
CREATE TABLE CURRENCIES ( ... CONSTRAINT c_asset_from CHECK(exists(select 1 from ASSETS a where a.id = from and a.type = 'CURRENCY')) );
SELECT A.name, A.regionID, b.Name FROM countries A Join regions B on B.id = A.RegionId ORDER BY A.name ASC
SELECT TableA.type_uid FROM TableA INNER JOIN TableB ON TableA.allowed_type_uid = TableB.type_uid GROUP BY TableA.type_uid HAVING COUNT(distinct TableB.type_uid) = (SELECT COUNT(distinct type_uid) FROM TableB)
select DATE(date),count(1) from videos_videoview group by DATE(date);
SELECT col1, col2 FROM table1, table2 WHERE table1.person_uid = table2.person_uid (+) AND table1.period = table2.period (+)
insert into table (ColumnA, ColumnB) select ColumnA, 'c' from table where columnA = 'a' and columnB = 'b'
select right(@string2, charindex('.', reverse(@string2), 1) - 1)
create table Area( ID int primary key, Name nvarchar2(200) ); create table Employee( ID int primary key, Name nvarchar2(200), IDArea int references Area(ID) );
Table1 Index: col1 and col2 (2-way index) col5
GRANT SELECT ON dbo.vwconfirmEmailSent TO PUBLIC;
WHERE (Date1 >= ISNULL(@DateFrom,'17531231') AND Date1 <= ISNULL(@dateTo,'20991231')) OR (Date2 >= ISNULL(@DateFrom,'1753-12-31') AND Date2 <= ISNULL(@dateTo,'20991231')) OR (Date3 >= ISNULL(@DateFrom,'1753-12-31') AND Date3 <= ISNULL(@dateTo,'20991231'))
SELECT * FROM pharmacy_items LEFT OUTER JOIN pharmacy_quantity_types ON pharmacy_items.quantity_type = pharmacy_quantity_types.id WHERE pharmacy_items.name LIKE '%query_here%' OR pharmacy_items.description LIKE '%query_here%'
SELECT coalesce(u1.name, u2.name) as name FROM matches m LEFT JOIN users u1 ON u.userId = m.userId1 AND m.userId2 = '1' LEFT JOIN users u2 ON u.userId = m.userId2 AND m.userId1 = '1' WHERE '1' in (m.userId1, m.userId2);
Select a,b from (select a,b from table order by b) as c group by a;
SELECT Fact_Stream.Free_Stream, 100.0 * COUNT(*) -- count per bit / SUM(COUNT(*)) OVER () -- sum of those counts = count of all rows As "Percentage of Streams" FROM Fact_Stream GROUP BY Free_Stream
Create Table Criteria ( UserSessionId ... , KeyValue .... ) Select ... From MyMainTable Join Criteria On Criteria.KeyValue = MyMainTable.col And Criteria.UserSessionId = ...
select s1.id as id1, s2.id as id2 from sentences s1 join sentences s2 on s1.creator_id = s2.creator_id and s1.order = s2.order - 1 where s1.text like '%first part%' and s2.text like '%second part%';
# assume userIdList is a list of ints that are entity key ids user_keys = [ndb.Key('User', k) for k in userIdList] users = ndb.get_multi(user_keys)
l_cur_string := 'SELECT ex1, ex2FROM exTable WHERE col1= '''|| vTest || '''';
SELECT avg(value) FROM (select value from que LIMIT 10 ) q;
select to_char(d, '99') || ' ' || to_char(h, '00') || ':' || to_char(m, '00') || ':00'
ALTER TABLE MyTable ADD CONSTRAINT UK_MyUniqueConstraint UNIQUE (MyColumn)
select EmployeeColumn, iff(iif(Date1 > Date2, Date1, Date2) > Date3, iif(Date1 > Date2, Date1, Date2), Date3) from yourTable
@JoinTable(name= "ticket_to_collectors") @ManyToMany private List<Person> collectors;
select row_number() over (order by FLD_A,FLD_B) as POS, FLD_A, FLD_B from My_Tbl where FLD_C='p'
DECLARE @totalCount AS INT SET @totalCount = (SELECT COUNT(p.Id) from players p inner join players_group pg on p.Id=pg.player_id) Select count(p.Id)/@totalCount * 100 as nb_play ,pg.group from players p inner join players_group pg on p.Id=pg.player_id group by pg.group order by pg.group;
SELECT Cust_Name FROM Customer_dim WHERE Cust_Id NOT IN ( SELECT c.Cust_Id FROM Product_dim p CROSS JOIN Customer_dim c LEFT JOIN Orders_fact o ON o.Prod_Id = p.Prod_Id AND c.Cust_Id = o.Cust_Id WHERE Ord_Id IS NULL )
SELECT ID, COUNT(ID) FROM table WHERE Age = 25 GROUP BY ID HAVING COUNT(ID) > 1
SELECT customerID, sum(sumOfLines) FROM ( SELECT header.CustomerID, (SELECT sum(Detail.LineTotal) FROM Sales.SalesOrderDetail.LineTotal as Detail WHERE Detail.SalesOrderID = header.SalesOrderID) as sumOfLines FROM Sales.SalesOrderHeader.CustomerID as header ) sub GROUP BY customerID
SELECT period, value, category FROM (SELECT VendorID, charcge,nocharge FROM Table) p UNPIVOT (value FOR category IN (charge,nocharge) )AS unpvt;
SELECT @t2.id, @t1.name from @t2 LEFT OUTER JOIN @t1 ON @t1.ID = @t2.ID
Select substring(Data, PatIndex('%[0-9]%', Data), 1) from( select 'Charged Hourly Fee for 3 CR for BCP202DL Personal Development II' as Data )x
create view v as select * from Student where major like '%Engineering%' with check option;
Select * From callforwarding Where Mastercode in (select SRFID from @SRFTable) and ApproverNo = @empID and ForwardDate in (Select max(ForwardDate) from CallForwarding where Mastercode in (select SRFID from @SRFTable) and ApproverNo = @empID group by Mastercode)
DECLARE @TableName NVARCHAR(512), @sql NVARCHAR(MAX), @xml NVARCHAR(MAX); SET @TableName = N'dbo.Feeds'; SET @sql = N'SELECT @xml = CONVERT(NVARCHAR(MAX), ( SELECT * FROM ' + @TableName + ' FOR XML AUTO, ELEMENTS));'; EXEC sp_executesql @sql, N'@xml NVARCHAR(MAX) OUTPUT', @xml OUTPUT; SELECT @xml;
SELECT r.* FROM `records` r LEFT JOIN `records` r3 ON r.name = r3.name AND r3.state=3 WHERE r3.state IS NULL
SELECT NUMTODSINTERVAL (SUM (total_secs), 'second') FROM (SELECT SUBSTR (duration, 1, 2) * 3600 + SUBSTR (duration, 4, 2) * 60 + SUBSTR (duration, 7, 2) total_secs FROM user_tab);
SELECT col1, COUNT(*) totalCount FROM tableName GROUP BY col1
select uf.user, count(*) as FeaturesInCommon from user_features uf join user_features uf2 on uf.feature = uf2.feature where uf2.user = $user group by uf.user order by FeaturesInCommon desc;
SELECT title, MIN(date) FROM financials GROUP BY title ORDER BY title
SELECT * FROM (SELECT et.*, MAX(TIMESTAMP_DATE) OVER (PARTITION BY EMPLOYEE_ID) as MAX_TIMESTAMP_DATE FROM EMPLOYEE_TIMESTAMPS ) et WHERE TIMESTAMP_DATE >= MAX_TIMESTAMP_DATE - 365;
SELECT * FROM resources AS r WHERE r.type = (SELECT type FROM resources s where s.culture= 'sk' and s.key= 'test')
select 'grant select on A.'||table_name||' to B' from dba_Tables where owner = 'A';
create table person_organization ( ssn number(9) , org_code varchar2(60) , constraint person_organization_pk primary key (ssn, org_code) , constraint person_organization_ssn_fk foreign key ( ssn ) references person ( ssn ) , constraint person_organization_oc_fk foreign key ( org_code ) references organization ( org_code ) );
select name, total, total/(select sum(total) from counts)*100 as percentage from counts
select 'Draft' as Enum union select 'Submitted' as Enum union select 'Cancelled' as Enum union select 'Accepted' as Enum union select 'Accepted and Modified' as Enum union select 'Open' as Enum union select 'Pending' as Enum union select 'Seller Reject' as Enum
return String.Format("SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST={0})(PORT={1}))(CONNECT_DATA=(SID={2})));uid={3};pwd={4};", host, port, sid, user, pass);
SELECT hostel_num, sum(num_of_stud) as total_students FROM HOSTELS GROUP BY hostel_num ORDER BY hostel_num;
select PreAgg.ID, PreAgg.Amount, @PrevBal := @PrevBal + PreAgg.Amount as Total from ( select YT.id, YT.amount from YourTable YT order by YT.id ) as PreAgg, ( select @PrevBal := 0.00 ) as SqlVars
select *, SUBSTRING(Result,2,2) as VF021, SUBSTRING(Result,5,2) as VF02b, SUBSTRING(Result,8,2) as VF02c, SUBSTRING(Result,11,2) as VF05b from DQS_RAW
NAMES.DEFAULT_DOMAIN = world
SELECT * FROM order_header INNER JOIN order_line ON order_header.header_id = order_line.header_id LEFT OUTER JOIN inventory ON order_line.product = inventory.product AND order_header.location = inventory.location WHERE order_header.header_id = xxx
ROUND(Value, 0) + (10 * (Value - ROUND(Value, 0)) / 3)
SELECT 'col1', 'col2' UNION ALL SELECT Name1, MAX(Name) OVER (PARTITION BY Name) FROM table
'www.myweb.com?q=id%3D'+convert(varchar(20),@id) +'%26action%3go​'
create or replace function calc(i_str in varchar2) return number is l_result number; begin execute immediate 'select ' || i_str || ' from dual' into l_result; return l_result; exception when others then return null; end; select calc(replace('0,4,2,88,6', ',', '+')) from dual --> 100
UPPER(CONVERT('value' USING latin1))
CREATE TABLE B(ID INT UNIQUE, A_ID INT); MERGE INTO B USING (VALUES 2, 3) I (ID, A_ID) ON (B.ID=I.ID) WHEN MATCHED THEN UPDATE SET B.A_ID = I.A_ID WHEN NOT MATCHED THEN INSERT (ID, A_ID) VALUES (I.ID, I.A_ID)
EXTRACT(HOUR FROM timestampcol)
select * from mytable where date > (select date from mytable where id = {id})
SELECT * FROM table_name WHERE email_address NOT IN ('email1', 'email2', 'email3')
SELECT A.clientid, A.EventNumber, B.City AS CityTo, A.EndDateTime AS MoveDateTime FROM MyTable A INNER JOIN MyTable B ON A.clientid = B.clientid AND A.EventNumber = B.EventNumber AND A.EndDateTime = B.StartDateTime WHERE A.City = 'Chester'
select . . ., count(distinct concat(key, ':', source)) as numcombos
;WITH Vals AS ( SELECT *, ROW_NUMBER() (PARTITION BY Path ORDER BY Minute) RowID FROM Table ) SELECT * FROM Vals WHERE RowID = 1
SELECT ID, duty, SUM(DATEDIFF(dd, startDate, endDate)) as duration FROM [Table] GROUP BY ID, duty
db.Books.find({"timestamp":{$gte: "2016-03-07 11:33:48", $lt: "2016-03-07 11:34:48"}})
DECLARE @contentID int, @contenttype varchar SET @contentid = 28861 SET @contenttype = 'resource' SELECT @contenttype
UPDATE foo SET bar = INSERT(bar, (LENGTH(bar) - 4) / 2 + 1, 4, 'xxxx');
SELECT MAX(owner_name), --floored to the second dateadd(second,datediff(second,'2000-01-01',start_date),'2000-01-01') AS StartDate From MyTable GROUP BY dateadd(second,datediff(second,'2000-01-01',start_date),'2000-01-01')
CREATE Table #Foo (fooID INT NOT NULL Identity (1,1), field1 varchar(20), field2 varchar(20), field3 varchar(20), field4 varchar(20), field5 varchar(20))
select distinct c.* from company c join postcode_areas p on p.company_id = c.company_id where c.name like <input> or c.location like <input> or p.postcode like <input>
SELECT Sum(libromayor.debe) AS IngresosGlobal, sum(IF(ear(libromayor.fechaevento) = Year(CurDate()), libromayor.debe, 0)) AS IngresosGlobal2 FROM libromayor
SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name' ORDER BY column_name
select userId, sum(date(timeOfLogin) = date(@day1)) as NumLogins_0, sum(date(timeOfLogin) = date(date(@day1) + 1)) as NumLogins_1, sum(date(timeOfLogin) = date(date(@day1) + 2)) as NumLogins_2, sum(date(timeOfLogin) = date(date(@day1) + 3)) as NumLogins_3, sum(date(timeOfLogin) = date(date(@day1) + 4)) as NumLogins_4 from table t group by userId;
select foo.id, foo.val, (select MAX(bar.val) from bar where bar.val < foo.val) as barval from foo
SELECT substring(Code,1,6) as Code, SUM(Number) AS [Sum] -- Add this line From Table Group by substring(Code,1,6) Order By Code
SELECT [Date] , CASE WHEN [Co] = 'XYZ' THEN 'Client' WHEN [Co] = 'PQR' THEN 'Partner' ELSE [Co] END AS [Co] FROM [Table1]
DB: there is no name of DB Table: sensor_readings (directly after from) Column: READING_SENSOR_TEMP (AVG function take column as an argument)
select TimeStamp,sum(electricity) from the_table where SiteId in(98,100) group by TimeStamp
Select U.userid, U.username , Count(TM.ticket_id) As tot_ticket From users As U Left Join ticket_master As TM On U.userid = TM.assignedto_user Group By U.userid, U.username
Select * from [Members] where [Expire] >= #" & Me.Text168 & "# And [MembType] IN ('A' , 'B', 'C' , 'D') And [MembType] <> 'E'
-- 1) Insert new record INSERT INTO old_table(id, column) SELECT n.id, n.column FROM new_table n LEFT JOIN old_table o ON n.id = o.id WHERE o.id IS NULL -- 2) Update existed record UPDATE o SET column = n.column FROM old_table o JOIN new_table n ON n.id = o.id
update myTable set Prefixes = case when Prefixes is null or Prefixes = '' then 'abc' else convert(nvarchar(max),Prefixes) + ', abc' end where MyCol='xyz' and (Prefixes not like '%abc%' or Prefixes is null)
TO_DATE(TO_CHAR(s.starttm, 'YYYY-MM-DD HH24:')||TRUNC(TO_NUMBER(TO_CHAR(s.starttm,'MI'))/30,0)*30||':00', 'YYYY-MM-DD HH24:MI:SS')
select tag_id, Count(*) as TagCount from relation where tag_id <> 1 group by tag_id order by Count(*) desc
*= (LEFT JOIN) =* (RIGHT JOIN)
SELECT p.productName FROM products p WHERE p.productName LIKE '%sun%' OR p.productName LIKE '%screen%' OR p.productName LIKE '%sun screen%' ORDER BY CASE WHEN p.productName LIKE '%sun screen%' THEN 1 ELSE 2 END
select (case when parent_id != -1 then parent_id else id end) as mid, max(create_dte ) from messages group by case when parent_id != -1 then parent_id else id end order by max(create_dte) desc;
SELECT A.AnswerID AS Answer, UA.AnswerID AS UserAnswer FROM quizanswers AS A LEFT JOIN useranswers UA ON UA.QuestionID = A.QuestionD WHERE A.CorrectAnswer = TRUE AND A.QuestionID = X
alter table studenttbl drop primary key;
DECLARE @Count INT SET @Count = ( SELECT COUNT(*) FROM dbo.DaylightSavings WHERE @time between Timestart AND Timeend) IF @Count > 0 SELECT DATEADD(HH, 2, @time) ELSE IF @Count = 0 SELECT DATEADD(HH, 1, @time)
SELECT invoice_line.item_id, invoice_line.amount, invoices.customer_name FROM db.invoice_line INNER JOIN db.invoices ON invoice_line.invoice_id = invoices.id_invoices WHERE invoices.customer = 'zzzz' AND invoices.transaction_date > DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) AND invoices.sales_rep = 'aaa' AND (invoice_line.item_id = 'xxx' OR invoice_line.item_id = 'yyy') ORDER BY invoice_line.item_id;
select case when col = 'yes' then 1 else 0 end as new_col_value from your_table
SELECT DISTINCT id FROM (SELECT id,col1 AS col from Yourtable UNION ALL SELECT id,col2 from Yourtable UNION ALL SELECT id,col3 from Yourtable UNION ALL SELECT id,col4 from Yourtable Union ALL .......) A GROUP BY id,col HAVING Count(1) > 3
UPDATE movies SET votes = (select value from info where info.movie_id=movies.id and info_type=3) WHERE EXISTS (select * from info where info.movie_id=movies.id and info_type=3)
SELECT players.Game AS Game, players.Name AS Name, 'W' AS Result, 'F' as Stage FROM MyTable stage JOIN MyTable players ON stage.Game = players.Game WHERE stage.stage = 'F' AND players.result = 'W'
SELECT t.created, COUNT(CASE WHEN t.status = '1' THEN 1 END) as cnt_status1, COUNT(CASE WHEN t.status = '2' THEN 1 END) as cnt_status2, COUNT(CASE WHEN t.status = '3' THEN 1 END) as cnt_status3, COUNT(CASE WHEN t.status = '4' THEN 1 END) as cnt_status4 FROM ticket t GROUP BY t.created
SELECT REGEXP_REPLACE( REGEXP_REPLACE( 'UPDATE PLUTO SET FIELD1='''',FIELD2='''',FIELD3=''TIGER'',FIELD4='''',FIELD5=''SCOTT'',FIELD9='''';', '(FIELD[0-9]+=(?'''',*))','') , '[, ]+;',';') from dual
var drs = from DataRow dr in Mytable.Rows where (col_Con == 'G' ? col_Val : 30) <= (col_Con == 'L' ? 30 : col_Val) select dr;
case when x = val1 or y = val2 or z in (val3, val4, val5) then result1 else defaultResult end
SELECT COUNT(cs.student_id) FROM Course c INNER JOIN course_student cs ON c.id = cs.course_id WHERE c.course_name = 'Database Design'
SELECT 'Average Is:' AS GRADE_TYPE_CODE, AVG(GRADE) AS GRADE FROM ( SELECT AVG(NUMERIC_GRADE) AS GRADE FROM GRADE WHERE STUDENT_ID = 5 AND SECTION_ID = 17 GROUP BY GRADE_TYPE_CODE ) myInnerTable;
select c.*, coalesce([DL-No], [SS-No], [State-ID-No]) as calculated from citizens c
SELECT t2.ID, t1.NAME FROM (SELECT ROW_NUMBER() OVER(ORDER BY ID DESC) AS rownumber, Name FROM MyTable) as t1 INNER JOIN (SELECT ROW_NUMBER() OVER(ORDER BY ID ASC) AS rownumber, ID FROM MyTable) as t2 ON t1.rownumber = t2.rownumber
SELECT DISTINCT ROUTINENAME, RESULT_SETS, REMARKS FROM SYSIBM.SYSROUTINES WHERE ROUTINESCHEMA='<schema>' AND FUNCTION_TYPE NOT IN ('S', 'T')
SELECT id FROM SomeTable INNER JOIN SomeTableGrouped ON (SomeTable.Column1 = SomeTableGrouped.Column1) AND (SomeTable.Column2 = SomeTableGrouped.Column2) AND (SomeTable.Column3 = SomeTableGrouped.Column3) WHERE SomeTableGrouped.id = ...
Product-Enquiries ============================= P_ID-E_ID PK, int, AUTO_INCR P_ID FK, int E_ID FK, int
select g.dte, coalesce(sum(dt.minutes), 0) as minutes from generate_series('2016-02-07'::timestamp, '2016-03-20'::timestamp, interval '7 day') g(dte) left join downtime dt on dt.timestamp >= g.dte and dt.timestamp < g.dte + interval '7 day' group by g.dte order by g.dte;
when matched update set .... merge_status = 'U' when not matched insert ( ...., merge_status, ... ) values ( ...., 'I', .... )
select "(" + DatabaseOpenHelper.KEY_ROW_ID + " - 1)/4 + 1" as field from table where field not like '%.%'
SELECT allCustomer.customerName, allCity.cityName FROM Customer finder JOIN City finderCity ON finder.zipCode = finderCity.ZipCode JOIN City allCity ON finderCity.CityName = allCity.CityName AND finderCity.StateCode = allCity.StateCode JOIN Customer allCustomer ON allCity.ZipCode = allCustomer.ZipCode WHERE finder.customerName = 'William' and allCustomer.customerName != 'William'
select 'All'= LTRIM(ISNULL(Name+' ','')+ISNULL(City+' ','')+ISNULL(CAST(Age as varchar(50))+' ','') from zPerson)
select code from tbl1 minus select code from tbl2;
update smf_members a, (select user_id, sum(if(karma_action='+',1,0)) karma_good, sum(if(karma_action='-',1,0)) karma_bad from phpbb_karma group by user_id) b set a.karma_good=b.karma_good, a.karma_bad = b.karma_bad where a.id_member = b.user_id;
Table Student_Teacher_Mapping Id (Int) TeacherId(Int) // foreign key for teacher table StudentId(Int) // foreign key for student table
;WITH Actions AS ( SELECT ActionID, ActionType, ActionDate, UserID, ContentID, RowNum = ROW_NUMBER() OVER(PARTITION BY ContentID, ActionType ORDER BY ActionDate DESC) FROM dbo.YourTable WHERE ...... ) SELECT ActionID, ActionType, ActionDate, UserID, ContentID, FROM Actions WHERE RowNum = 1 ORDER BY ActionDate DESC
SELECT SUM(CASE WHEN pid = 2 THEN area ELSE 0 END) As "2", SUM(CASE WHEN pid = 4 THEN area ELSE 0 END) As "4", SUM(CASE WHEN pid = 9 THEN area ELSE 0 END) As "9", SUM(CASE WHEN pid = 11 THEN area ELSE 0 END) As "11" FROM t GROUP BY class ORDER BY class
user.conversations.includes{messages}.group{id}.having{messages.id == max(messages.id)}
SELECT trunc(minutes/600)||' working days, '||trunc(mod(minutes,600)/60)||' working hours and '||mod(minutes,60)||' minutes' FROM (SELECT 1000 as minutes FROM dual)
SELECT t1.id + 1 FROM tbl t1 LEFT JOIN tbl t2 ON t1.id + 1 = t2.id WHERE t2.id IS NULL ORDER BY t1.id ASC LIMIT 1
SET DATEFORMAT dmy; GO UPDATE #Test SET new_CHQ_DATE = CONVERT(VARCHAR(20), CHQ_DATE, 105) WHERE ISDATE(CHQ_DATE) = 1; --reset DATEFORMAT back to whatever it was
CurveID = 15 Dim i As Integer For i = 0 to 76 MaxOfMarkAsofDate = #7/22/2015# - i 'Your inner code here ' Next i End Sub
TABLE: Transaction idTransaction INT NOT NULL AUTO_INCREMENT PRIMARY KEY TABLE: TransactionWorker fkTransaction INT NOT NULL fkWorker INT NOT NULL TABLE: Worker idWorker INT NOT NULL PRIMARY KEY
SELECT a = 'rajat' + tableB.a FROM dbo.b tableB WHERE tableB.b >= (SELECT TOP 1 c FROM d ORDER BY e DESC)
UPDATE myTable SET description = newdesc FROM Pieces WHERE Pieces.id = myTable.itemid
declare @createdon datetimeoffset set @createdon = '2008-12-19 17:30:09.1234567 +11:00' select CONVERT(datetime2, @createdon, 1) --Output: 2008-12-19 06:30:09.12 select convert(datetimeoffset,CONVERT(datetime2, @createdon, 1)) --Output: 2008-12-19 06:30:09.1234567 +00:00
select firstname, lastname FROM ( SELECT firstname, lastname, row_number() over (partition by status_id order by random()) as rn FROM calls WHERE status_id = ANY (ARRAY [1,2,3,4,5]) ) t where rn <= 50;
SELECT count(sales.for_Date) FROM (SELECT Trunc(current_date) - (LEVEL - 1) as d FROM Dual CONNECT BY Level <= 10) as DateRangeTbl LEFT JOIN sales ON Sales.for_Date = DateRangeTbl.d GROUP BY DateRangeTbl.d
--Replace db with your database name USE db --Create a database role CREATE ROLE db_execonly --Grant EXEC permissions to the role GRANT EXECUTE TO db_execonly --Add users to the new role EXEC sp_addrolemember 'db_execonly', 'user1' EXEC sp_addrolemember 'db_execonly', 'user2' --Deny permissions to specific objects for user2 DENY EXEC ON OBJECT::dbo.usp_sproc1 TO user2 DENY EXEC ON OBJECT::dbo.usp_sproc2 TO user2
SELECT Movies.* FROM Movies LEFT JOIN Rating ON Movies.mID = Rating.mID WHERE Rating.mID IS NULL
ALTER table phpbb_topics ADD poll_show_votes TINYINT(2) UNSIGNED NOT NULL DEFAULT 0
51sec * 120MB/sec ~ 6GB
SELECT PERSON FROM SPEAKS WHERE LANG IN( 'French', 'Russian', 'Italian') GROUP BY PERSON HAVING COUNT(DISTINCT LANG) = 3
INSERT INTO table (comment, otherCol1, otherCol2, otherCol3) SELECT 'Some comment', otherCol1, otherCol2, otherCol3 FROM table WHERE id=existingRowId;
Function CheckDateParameters(StartDate as Date, EndDate as Date) as Integer Dim msg as String msg = "" If (StartDate > EndDate) Then msg="Start Date should not be later than End Date" End If If msg <> "" Then MsgBox(msg, 16, "Report Validation") Err.Raise(6,Report) 'Raise an overflow End If End Function
SELECT fcategory,sum(fquantity*fprice) AS qty FROM items GROUP BY fcategory order by qty desc limit 1
SELECT tt.TOKENTYPE_NAME, t.TOKEN_NAME FROM TOKENS AS t JOIN TOKENTYPES AS tt ON tt.TOKENTYPE_ID = t.TOKENTYPE_ID
select b.name, b.date, sum(case when product='Apple' then qty end) Apples, sum(case when product='Banana' then qty end) Bananas from buyers b join purchases p on b.name = p.name and b.date = p.date group by b.name, b.date
SELECT Projects.*, UserLicenses.* FROM Projects LEFT JOIN UserLicenses ON Projects.id = UserLicenses.project_id and UserLicenses.user_id = 12 and UserLicences.Question = '6*7' and UserLicences.Answer = 42 ORDER BY name ASC
UPDATE lists l JOIN (SELECT listid, COUNT(*) AS cnt FROM list_items GROUP BY listid) li ON l.listid = li.listid SET l.subscribecount = cnt
SELECT DISTINCT A.MBLNR FROM MKPF A LEFT JOIN MSEG B ON B.SMBLN = A.MBLNR AND AND B.XBLNR_MKPF = '0150525913' WHERE A.XBLNR = '0150525913' and A.MANDT='368' and B.SMBLN is null;
UPDATE accounts SET account_id=CONCAT(LEFT(account_id,9), LPAD(id, 4, '0'))
UPDATE PS_Z_TREND_NOW_TBL a SET STATUS = ( CASE WHEN COUNT(SEC.IS_AW_AUTH_NAME) > 0 then 'M' ELSE null END ) FROM PS_IS_AW_SECURITY sec WHERE sec.IS_AW_AUTH_NAME LIKE '%Manager%'
select * from tblTagGlass ttg inner join tblTagGlass ttgC ON ttg.JobID = ttgC.JobID AND ttg.PartCode = ttgC.PartCode where (ttg.TagHeight != ttgC.TagHeight OR ttg.TagWidth != ttgC.TagWidth) AND ((ttg.TagHeight >= ttgC.TagHeight AND ttg.TagWidth >= ttgC.TagWidth) OR (ttg.TagHeight > ttgC.TagHeight AND ttg.TagWidth < ttgC.TagWidth)) order by ttg.PartCode
CREATE FUNCTION GetEmployees ( @EmployeeId int ) RETURNS TABLE AS RETURN ( WITH yourcte AS ( SELECT EmployeeId, ManagerID, Name FROM Employees WHERE EmployeeId = @EmployeeId UNION ALL SELECT e.EmployeeId, e.ManagerID, e.Name FROM Employees e JOIN yourcte y ON e.ManagerID = y.EmployeeId ) SELECT EmployeeId, ManagerID, Name FROM yourcte )
Select PRODUCT_ID_1, PRODUCT_ID_2 ,SCORE, (Case when b.Score= (Select Max(a.Score) from TableName a where a.PRODUCT_ID_1=b. PRODUCT_ID_1) then 1 else 0 End) as IS_MAX_SCORE_FOR_ID_1 from TableName b
SELECT c1.* FROM codes c1 LEFT OUTER JOIN codes c2 ON (c1.language_id = c2.language_id AND c1.time_posted < c2.time_posted) GROUP BY c1.id HAVING COUNT(*) < 5;
SELECT a.supplier_id , b.supplier_name , count(a.supplier_id) AS "number of foods" FROM l_suppliers b , LEFT JOIN l_foods a ON a.supplier_id = b.supplier_id GROUP BY b.supplier_id ,b.supplier_name ORDER BY b.supplier_id
TRANSFORM iif(Count(*)>0,"Y","N") AS Val SELECT Year(YourDate) AS Y, Month(YourDate) AS M FROM YourTable GROUP BY Year(YourDate), Month(YourDate) PIVOT Day(YourDate) In ("01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31");
update tbl1 set col1 = a.col1, col2 = a.col2, col3 = a.col3 from tbl2 a where tbl1.Id = 'someid' and a.Id = 'differentid'
select isnull(.. Massive subquery here..., FirstName)
SELECT COUNT(DISTINCT store_code), supplier_code FROM myTable GROUP BY supplier_code HAVING COUNT(DISTINCT store_code) >= 4 ORDER BY 2
UserID FirstName 1 Bob 2 John HobbyID HobbyName 1 Golf 2 Photography UserHobbyID UserID HobbyID 1 1 1 2 1 2 3 2 2
update crates cr set cr.total_pieces = ( select sum(bu.pieces) pieces from crates cr join boxes bo on bo.crate_id = cr.id join buckets bu on bu.box_id = box.id where crate.id = cr.id group by crate.id );
SELECT i.imports, e.exports, s.size FROM size AS s LEFT JOIN (SELECT size_id,sum(weight) AS imports FROM import_size GROUP BY size_id) AS i ON s.id=i.size_id LEFT JOIN (SELECT size_id,sum(weight) AS exports FROM export_size GROUP BY size_id) AS e ON s.id=e.size_id
SELECT * FROM `Users` ORDER BY (`city` = 'New York') DESC, `city`
SELECT users.*, COUNT(*) AS role_count, SUM(case roles.name when 'user' then 1 else 0 end) AS IsUser FROM users JOIN roles_users ON users.id = roles_users.user_id JOIN roles ON roles_users.role_id = roles.id GROUP BY users.id HAVING COUNT(*) = 1 AND SUM(case roles.name when 'user' then 1 else 0 end) = 1
select con, min(line_no), sum(wgt), pallet from dwd_temp group by con, pallet
SELECT A,B FROM table_name WHERE NOT (A = 'EF' AND B = 'RUI')
SELECT avg( col1 + col2 + col3)/3.0 FROM tbl
SELECT s.period, s.year, s.amount FROM salaries s where (s.year, s.period) in (select year, period from periods)
select '{?District}'
CREATE VIEW vw_table1 AS SELECT rownum a , b, c, d FROM table1
select (case when 1>2 then 1 else 0 end) from dual
var loginNames = session .CreateCriteria<SimpleUsers>() .Add(Restrictions.In("loginName", new[] { "admin", "oscar", "stig" })) .SetProjection(Projections.Property("loginName")) .List<string>();
declare @countryid int Insert into country (Name) values('canada'); SELECT @countryid = SCOPE_IDENTITY() Insert into provinces (CountryId, Name) values (@countryid,'ontario');
where Sp.sprite_change_ind is null and sh.TRAN_REQUEST_DATE between sysdate-1 and sysdate and (sf.stcr_term_code = '201401' or sf.stcr_term_code = '201402') AND SV.RSTS_ENRL = 'Y' and trim(NL.DGMR_DEGS_CODE) is null
select 'FY'||TRUNC(date + 83, 'YYYY') as FY, Site, count(*) from mytable group by 'FY'||TRUNC(date + 83, 'YYYY'), site
CREATE TRIGGER updateTotalsalary AFTER INSERT OR UPDATE ON salary FOR EACH ROW WHEN (pg_trigger_depth() = 0) EXECUTE PROCEDURE reCount();
SELECT COUNT(*) FROM subscriptions WHERE DAYOFMONTH(created_at) = DAYOFMONTH(NOW())
select StaffId, fName, lName, sum(Quantity) from DeliveryStaff ds, Orders o, OrderItems oi where StaffId = DeliveryStaffId and o.OrderId = oi.OrderId group by StaffId, fName, lName
SELECT name FROM table WHERE name LIKE '%'
var Query : TQuery; PIN : string; begin Query.Sql.Text := 'SELECT pin FROM table WHERE id = value' Query.Open; PIN :+ Query.FieldByName('pin').AsString; Query.Close end;
with drg as (SELECT DISTINCT patientID, admissionDate, dischargeDate, drgCode from largeTable) update s set s.drgCode = l.drgCode from smallTable s join drg l on s.patientId = l.patientId and s.admissionDate = l.admissionDate and s.dischargeDate = l.dischargeDate
ddply(tab, .(time, id), summarise, product = paste(product, collapse="&"))
write-host $DBname."Channel Database Name"
SELECT * FROM categories_widgets cw JOIN widgets w ON w.id = cw.widgets_id WHERE cw.category_id = $my_cat_id ORDER BY w.id DESC LIMIT 0,10
CREATE TABLE TEST(ID INT, NAME VARCHAR); INSERT INTO TEST VALUES(1, '10'); CREATE TABLE TEST2 AS SELECT CAST(ID AS VARCHAR) A, CAST(NAME AS INT) X FROM TEST;
SELECT * FROM table WHERE datetime LIKE '2007-05%'
SELECT distinct T0.CardCode ,T1.CardName ,T0.State FROM CRD1 T0 LEFT OUTER JOIN OCRD T1 ON T0.CardCode=T1.CardCode
CREATE TABLE #tempTable (Value int primary key); INSERT INTO #tempTable SELECT DISTINCT Value FROM dbo.func_ConvertListToTable('4,6,5,1,2,3,9,222',',')
SELECT E.EmployeeName, COUNT(T.TaskID) AS [Number of Tasks], SUM(T.Duration) as [Time Spent] FROM Employee E, EmployeeTasks ET, Tasks T WHERE ET.EmployeeID = E.EmployeeID AND ET.TaskID = T.TaskID GROUP BY E.EmployeeName
select * from Table t where lastRanAt < dateadd(mi, (t.refreshTime * -1), getdate())
... from product left join provider ON product.provider_id = provider.id left join product_attribute on product.id = product_attribute.product_id and product_attribute.attribute_id = 8 where `product`.`active` = '1' and `product`.`url` IS NOT NULL and `product`.`provider_id` = '7' ...
select * from yourtable order by case when comment = 'Do not use' then 1 else 0 end, comment, cp_code
select Column1 from YourTable order by convert(datetime, left(Column1, 3)+' 01, '+right(Column1, 4), 107)
Select ID, OrderID, Item, Price from customerOrders Where [Order] = 1 UNION ALL Select NULL, NULL, NULL, SUM(Price) from customerOrders Where [Order] = 1 ORDER BY CASE WHEN ID IS NULL THEN 2 ELSE 1 END, ID;
UPDATE aTable SET aColumn = 1 WHERE id IN (SELECT /*+ cardinality( pt 10 ) */ COLUMN_VALUE FROM TABLE (pTable) pt );
$name = 'John'; $order = new Zend_Db_Expr($this->getAdapter()->quoteInto("name = ?", $name) ." DESC, `name`"); $select = $this->select(); $select->order($order); return $this->fetchAll($select);
ALTER TABLE x ADD COLUMN y uniqueIdentifier null GO UPDATE TABLE x SET y = NEWID() --Or NEWSEQUENTIALID() if its safe GO ALTER TABLE x ALTER COLUMN y uniqueIdentifier NOT NULL GO ALTER TABLE x DROP CONSTRAINT PK_PrimaryKeyConstraintName GO ALTER TABLE x DROP COLUMN PrimaryKeyColumn GO ALTER TABLE x ADD CONSTRAINT PK_NewPrimaryKeyConstraint PRIMARY KEY CLUSTERED ( y ASC ) GO
1.9.3-p194 :014 > numberOfAccounts => [[#<BigDecimal:119cd90,'0.123E3',9(36)>], [#<BigDecimal:119cd18,'0.456E3',9(36)>]] 1.9.3-p194 :015 > numberOfAccounts.flatten!.collect!(&:to_i) => [123, 456] 1.9.3-p194 :016 > numberOfAccounts => [123, 456]
$jsonArray = array(); foreach ( $results as $result ) { $jsonArray[] = array( 'personal_data' => array( 'id' => $result->id, 'name' => $result->name, 'street' => $result->street, ... )); } return $jsonArray;
SELECT hg.name, (SELECT COUNT(*) FROM HOSTS h WHERE h.hostgroup_id = hg.id) FROM HOSTGROUPS hg
SELECT e.* FROM `event` e # 'e' from 'event' LEFT JOIN `event` d # 'd' from 'derived'; `LEFT JOIN` gets ALL entries from `e` ON e.id = d.derivedfrom_id # match an event `e` with all those `d` derived from it WHERE d.id IS NULL # keep only events `e` without derived events `d` ;
SELECT events.title, events.id, events.location, events.date, Sum(active_quote_items.cost) FROM active_quote_items LEFT JOIN events ON active_quote_items.event_id = events.id GROUP BY events.title, events.id, events.location, events.date
SELECT Filetype, COUNT(*) AS TypeCount FROM tbl_Uploads GROUP BY Filetype
select id,cat,max(realtime)-min(realtime) as interval from table group by 1,2;
select sum(length(REGEXP_SUBSTR(word, '^[A-Z]*'))) as capitalized_sum from mytable;
Select * from (MY SELECT STATEMENT order by A desc, B) where ROWNUM = 1;
select USER,collect_set(ITEM) from ( select USER, ITEM,row_number () over (partition by USER order by SCORE desc) RN from A ) t1 where RN <= 5 group by USER;
select * from order where order_number in (select order_number from order_details group by order_number having count(*) = 1)
with userCTE as ( select u.userId , c.columnId from tblUsers as u cross join tblColumns as c ) select u.* , Coalesce(cd.ColumnDatacontent, 'N/A') AS columnDataContent from userCTE as u left join tblColumnData as cd on u.columnId = cd.columnId and u.userID = cd.userId
MERGE PermanentT AS [TARGET] USING #TempT AS [SOURCE] ON [TARGET].PrimId = [SOURCE].PrimId AND [TARGET].MyDates = [SOURCE].MyDates WHEN MATCHED AND [TARGET].PRICE <> [SOURCE].PRICE THEN UPDATE SET [TARGET].PRICE = [SOURCE].PRICE WHEN NOT MATCHED THEN INSERT (PrimID, myDate, myPrice) VALUES (SOURCE.PrimID, SOURCE.myDate, SOURCE.myPrice);
cstmt = conn.getNewCallableStatement("{call MY_PLSQL_PACKAGE.MY_PROC(?,?,?)}"); cstmt.setString(1, stringOutput1); cstmt.setString(2, stringOutput2); cstmt.registerOutParameter(3, OracleTypes.CURSOR); cstmt.execute;
select t1.name as name1, t2.name as name2, count(*) from table t1 inner join table t2 on t1.Lived_in = t2.Lived_in and t1.name > t2.name group by t1.name,t2.name
SELECT a.request_id, a.request_date, a.customer_id, a.request_type, a.target_customer, a.customer_id, a.agent_number, a.merchant_number, a.bill_reference, d.loan_id, a.amount FROM requests a left join loans d on a.loan_id=d.loan_id where d.loan_status=12
Update table Set mydata = '$ ' + Right(mydata, Len(mydata)-1) Where mydata Not Like '$ %'
SELECT T1.Org, T1.Dest, T1.Amount, T2.Org, T2.Dest, T2.Amount, T3.Org, T3.Dest, T3.Amount FROM dbo.RateTable T1 JOIN dbo.RateTable T2 ON T1.Org = T2.Org JOIN dbo.RateTable T3 ON T1.Dest = T3.Dest AND T2.Dest = T3.Org ----------------------------------------^ WHERE T1.Amount > (T2.Amount + T3.Amount);
select account from tbl where item in ('apples','pears') group by account having count(distinct item) = 2
select year, quarter, 'P1' as value, p1 from table1 union all select year, quarter, 'P2' as value, p2 from table1;
WITH sequenced AS ( SELECT ROW_NUMBER() OVER (ORDER BY running_id) - 1 AS sequence_id, * FROM RUNNING_COLA_IS_AFRICA ) SELECT sequence_id / 50 AS group_id, MIN(running_id) AS running_id_first, MAX(running_id) AS running_id_last, COUNT(*) AS size_of_group FROM sequenced GROUP BY sequence_id / 50
SELECT X.value('.','int') as 'TextResult' FROM Answers as 'a' CROSS APPLY a.answer.nodes('/DocumentElement/Screening/TextResult') as answers(X)
SELECT * FROM ( SELECT week,name,effort FROM [Group$] ) as s PIVOT ( SUM(effort) FOR [name] IN ('quentin','joe','tracy') )AS pvt
SELECT a.columns FROM table a WHERE a.ID IN (SELECT TOP 1 b.id FROM table b WHERE b.Name = a.Name ORDER BY b.Date DESC)
d1, i1, f1 d1, i2, f2 d2, i2, f3, d3, i3, f3
select CONTACTNAME, SUBSTRING (EMAIL,CHARINDEX('@',EMAIL,0)+1,LEN(EMAIL)) as Email from CONTACTS result
SELECT CONVERT(VARCHAR(50), getdate(), 121)
WHERE ColA LIKE '%2[%]%'
# On Jan 5, 2011, Provider A makes $500 total off of its products SELECT prov.*, SUM(sales.price) FROM provider AS prov INNER JOIN sales_transaction AS sales on sales.provider_id = prov.id WHERE provider.name = 'Provider A' AND sales.created_at BETWEEN '2012-01-05 00:00:00' AND '2012-01-05 23:59:59' GROUP BY prov.id
select round(DBMS_RANDOM.VALUE (0, 1)) from dual
select * from ( select * from dbo.[sometable] ) as X
select item_id , item_name, update_date, from items order by update_date desc , item_id desc;
select users.user, users.id, count (species.name) from users left join species on users.id = species.user group by users.user, users.id order by count (species.name) desc
[code].order("SUM((prices.price * #{params[:prod_id].to_i}) + profiles.shippingCost)").all
select * from some_table where record_valid_flg = 1 and CASE WHEN user_param = '1' THEN age > 20 ELSE name like 'Mr%' END;
select employee_id, cast(collect(sale_type(product_id, sale_amount)) as sales_type) from employee_sales group by employee_id
SELECT Table2.Years,Table1.TeamName,IFNULL(AVG(TeamWinCount), 0) AS TeamWinCount FROM Table2 CROSS JOIN Table1 LEFT JOIN Table4 ON Table1.TeamId=Table4.TeamId AND Table2.YearsId=Table4.YearsId GROUP BY Table2.Years,Table1.TeamName
SELECT i.name AS itemname, GROUP_CONCAT(s.id ORDER BY s.id) AS salesids, GROUP_CONCAT(s.date ORDER BY s.date) AS salesdates, GROUP_CONCAT(s.containerid ORDER BY s.containerid) AS containerids, GROUP_CONCAT(c.name ORDER BY c.name) AS containertypes FROM ITEMS i JOIN SALE s ON s.id = i.salesid JOIN CONTAINERS c ON c.id = s.containerid GROUP BY i.name
IF NOT EXISTS (SELECT ...) BEGIN -- do all the things END
select count(*)+1 from table t where score > SCORE_PARAMETER;
SELECT WSN, MAX(BASE) as MaxBase, MIN(TOP) as MinTop INTO memory FirstPass FROM PERFS GROUP BY WSN ; SELECT (MaxBase - MinTop) as Calc FROM memory FirstPass
drop index primarykey on bar
select * from Example unpivot ( numbers for type in (x,y,z) ) as p pivot ( Max(numbers) for site in ([A],[B],[C]) ) as q
CREATE VIEW dbo.DefaultBarcode WITH SCHEMABINDING AS SELECT StockID, Barcode FROM dbo.Barcode WHERE IsDefault = 1 GO CREATE UNIQUE CLUSTERED INDEX UC_DefaultBarcode ON dbo.DefaultBarcode (StockID) GO
SELECT b.CODE as code, COUNT(a.id) AS a_count FROM b LEFT JOIN (j JOIN a ON j.a_id = a.id) ON j.b_id = b.id GROUP BY b.CODE ASC
;WITH CTE AS ( SELECT B.objectIdA ,A.objectIdB ,ROW_NUMBER() OVER (PARTITION BY B.objectIdA ORDER BY A.objectIdB DESC) rn FROM TableA A INNER JOIN TableB B ON A.objectIdA = B.objectIdA ) SELECT C.objectIdA ,C.objectIdB FROM CTE WHERE rn = 1
;with PowersOf2 as ( select 1 as Number union all select A.Number * 2 from PowersOf2 as A where A.Number < 64 ) select P.PERSON_NAME, sum(distinct P.PERSON_DAY & PowersOf2.Number) from PERSON_DAYS as P left outer join PowersOf2 on PowersOf2.Number <= P.PERSON_DAY where P.PERSON_ID = @myId group by P.PERSON_NAME
PREPARE test AS SELECT * FROM users WHERE first_name = $1; EXECUTE test ('paul'); DEALLOCATE test;
select a.name, a.phone, b.mobile, b.relation, case when a.phone<>'' and b.mobile<>'' then CONCAT(a.phone, ' ', b.mobile) when a.phone<>'' and b.mobile='' then a.phone when a.phone='' and b.mobile<>'' then b.mobile else '' end as phone from abc a join bcdb where a.id=b.id and b.relation='a123'
with cte as (select 1 i union all select i+1 i from cte where i < 5) select dateadd(d, i-1, '2010-01-01') from cte
<% set conn = CreateObject("ADODB.Connection") on error resume next conn.open "remote connection string" if err.number <> 0 then response.write "unable to connect, trying other" conn.open "alternate connection string" end if on error goto 0 %>
SELECT a1.FlightId, COUNT(a2.FlightId) FROM A a1 LEFT JOIN A a2 ON a1.id = a2.id AND a2.Roles = 'Steward' GROUP BY a1.FlightId;
select * from subjects where id not in (select subject.id from categories )
/*+ parallel(4) */
SELECT t1.id as id, t1.text as english, t2.text as translated FROM translation t1 LEFT JOIN translation t2 on t1.id = t2.id and t2.locale = :locale WHERE t1.locale = 'en_US' ORDER BY translated
( SELECT ... WHERE ... AND pattern.direction='inbound' ... LIMIT 1) UNION ALL ( SELECT ... WHERE ... AND pattern.direction='outbound' ... LIMIT 1 );
SELECT * FROM waypoint WHERE ID NOT IN( (SELECT MIN(ID) FROM waypoint WHERE booking_id="1"), (SELECT MAX(ID) FROM waypoint WHERE booking_id="1") ) AND booking_id="1";
select ((close-open)/open) as daychange, date from prices order by daychange desc limit 1 ;
SELECT Department, COUNT(DISTINCT ID) AS total, COUNT(DISTINCT CASE WHEN course LIKE 'AS%' THEN id END) Total_AS FROM schedule GROUP BY Department ORDER BY Department ASC
select title from sakila.film f join sakila.film_actor fa on fa.film_id = f.film_id where fa.actor_id = @id
CREATE PROCEDURE Schema.Proc (@C1 int) AS BEGIN INSERT INTO SmallTable(C1, C2, C3) --- Columns of smaller table SELECT C1, C2, C3 ---Columns of Master table FROM MasterTable WHERE C1 = @C1 --- Where value of C1 of Master table matches the value of @C1 END
NSString *databaseName = @"mainDB.sqlite"; NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDir = [documentPaths objectAtIndex:0]; databasePath = [documentsDir stringByAppendingPathComponent:databaseName];
select sum(impact) from (select top 18 id, obsDate, impact from diseaseHits where diseaseID = 2 AND pCode = 3352 AND obsDate <= '2014/11/5 11:30:00 PM' ) t;
select id from tbl group by id having count(distinct loc) > 1;
SELECT t1.acr FROM table1 t1 LEFT JOIN table2 t2 on t2.ocd = t1.ocd AND t2.switch = 'Y' GROUP BY t1.acr HAVING COUNT(t2.ocd) = COUNT(t1.ocd)
SELECT A FROM ( SELECT A, B FROM TableA UNION SELECT A, B FROM TableB ) AS tbl WHERE B > 'some value'
SELECT id FROM [QTRA410].[Admin].[qt_request] WHERE id IN (SELECT Max(r1.id) FROM [QTRAX4619410].[QTRAXAdmin].[qt_request] r1 join [QTRA410].[Admin].[qt_request] r2 on r1.id = r2.id AND r2.requestcode = 'FOREMAN')
SELECT city, GROUP_CONCAT(name) FROM contacts GROUP BY city
SELECT `s`.`song_name`, GROUP_CONCAT(`a`.`artist_name`) `artists` FROM `assoc` JOIN `songs` s ON `s`.`song_id`=`assoc`.`song_id` JOIN `artists` a ON `a`.`artist_id`=`assoc`.`artist_id` GROUP BY `s`.`song_id`
DELETE FROM myTable AS t1 WHERE EXISTS ( SELECT 1 FROM myTable AS t2 WHERE t1.ID=t2.ID AND t1.DateCreated<t2.DateCreated)
SELECT * FROM game WHERE id = 1 LIMIT 1;
select T2.Name from Table2 as T2 where not exists (select * from Table1 as T1 where T1.Name = T2.Name)
CASE WHEN COALESCE(@Date1, '1/1/1980') > COALESCE(@Date2, '1/1/1980') THEN @Date1... ELSE @Date2... END
select min(Id) as Id,max(job) as Job,max(FNAME) as FNAME,max(LName) as LNAME from yourtable
SELECT ID, [Date Entered], Item, Status FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY Item ORDER BY [Date Entered] DESC)'RowRank' FROM Table1 WHERE Status = 'Ready' )sub WHERE RowRank = 1
SELECT StatusReportID, StatusReportTime, CarNumber, VehicleID, DriverNumber, DriverID, VehicleStatus, LocationX, LocationY, Speed, Direction, InvalidGPS FROM dbo_VehicleStatusReport WHERE StatusReportID > ((SELECT max(StatusReportID) FROM dbo_VehicleStatusReport) - 3000)
SELECT t.id, t.start, t.end, t.start - t.end AS difference FROM TABLE t ORDER BY difference DESC
select SUBSTRING(TextData,1,25), count(*) as howMany, sum(Duration) as totalTime from [Tmp].[dbo].[tmp2] group by SUBSTRING(TextData,1,25) order by 3 --3rd column
select u.user_id, f1.status, f2.status from user u left outer join friend f1 on f1.user_id = u.user_id and f1.user_friend_id = 1 left outer join friend f2 on f2.user_friend_id = u.user_id and f2.user_id = 1 where u.name like '%'
SELECT * FROM `articles` WHERE `body` REGEXP '[[:<:]][acgj]'
SELECT c.id 'client_id', g.Id 'group_id', ISNULL(cg.client_id) FROM (client c CROSS JOIN group g) LEFT JOIN client_group cg ON c.id = cg.client_id AND g.id = cg.group_id
Select op_id ,count(op_id) as itemsOpened ,count(closed_by) as itemsClosed FROM dbo.Dealer_Track_Work WHERE Date_Received between <cfqueryparam value="10/13/2015" /> AND <cfqueryparam value="10/26/2015" /> AND op_id IN (<cfqueryparam value="192,229,123" list="true">) GROUP BY op_id ORDER BY op_id ASC
ALTER TABLE your_table MODIFY some_column INT NOT NULL AUTO_INCREMENT;
SELECT x.* , x.a - SUM(y.b) FROM my_table x JOIN my_table y ON y.date_created <= x.date_created GROUP BY x.id;
context.Table.Where(k => k.TURKCE_ADI.ToLower().Contains("lpg")).ToList();
return db.query(DBHelper.TABLETRANSACTIONS, null, null, null, null, null, C_TAG_SCAN_TIME + " DESC");
SELECT name, email FROM members WHERE id IN (SELECT id FROM profilefields WHERE field1 = 'X' and field2 = 'Y')
;with cte as ( select M_ID, STEP, DateTo, AddDays from #t1 where STEP = 1 union all select t.M_ID, t.STEP, dateadd(dd, c.AddDays, c.DateTo), t.AddDays from #t1 t inner join cte c on t.M_ID = c.M_ID and t.STEP = c.STEP + 1 ) select * from cte
DECLARE @Result nvarchar(max) DECLARE @Xml xml = (select * from master..spt_values FOR XML PATH) SELECT @Result = CAST(@Xml.query('string(.)') as nvarchar(max)) PRINT @Result
Select DATEDIFF(dd, '2014-09-22 09:14:01.850','2014-09-24 17:14:53.243') + 1
update contacts set title =@title, firstName=@firstName, middleName=@middleName, lastName=@lastName where contactID=@ContactID
select event_date, sum(case when cnt between 0 and 2 then 1 else 0 end) as "0-2", sum(case when cnt = 3 then 1 else 0 end) as "3", sum(case when cnt between 4 and 99 then 1 else 0 end) as "4-99" from (select cast(event_time as date) as event_date, name, count(1) as cnt from log group by cast(event_time as date), name) baseCnt group by event_date order by event_date
select s.name, m.mark, c.definition from students s inner join marks m on s.id = m.id inner join classes c on m.code = c.code
select colname,1 as OrderCol from table where <cond1> union select colname,2 as OrderCol from table where <cond2> order by OrderCol
SELECT COUNT(DISTINCT(STR(a) + ',' + STR(b))) FROM @YourTable
SELECT string, MIN(low), MAX(high) FROM table GROUP BY string
'.*MYSTART2#(.+?)\~.*'
SQL> recover database until cancel using backup controlfile; ORA-00279: change 6846169 generated at 01/20/2016 16:00:29 needed for thread 1 ORA-00289: suggestion : +DATA ORA-00280: change 6846169 for thread 1 is in sequence #521 Specify log: {<RET>=suggested | filename | AUTO | CANCEL} cancel Media recovery cancelled. SQL> alter database open resetlogs; Database altered.
select user_name, new_status, status_change_date as StartTime, lead(status_change_date) over (partition by user_name order by status_change_date) as EndTime from app_users
SELECT * FROM History WHERE symbol = $symbol AND date = (SELECT MAX(date) FROM History)
SELECT md.Doc_no, md.Doc_date, md.Doc_type, mp1.Product_Details Item_details1, md.Item_qty1, md.Item_price1, mp2.Product_Details Item_details2, md.Item_qty2, md.Item_price2 FROM master_document md INNER JOIN master_product_table mp1 ON md.Item_code1 = mp1.ID INNER JOIN master_product_table mp2 ON md.Item_code2 = mp2.ID ;
select to_char(your_date_column, 'mon-dd') from your_table
select cupcake from cupcake_rating where delicious_rating in ('Super Delicious', 'Mouth Heaven') group by cupcake having count(distinct delicious_rating) = 2
select table1.*, fyyear, fymonth from table1 inner join table2 on convert(date,convert(varchar(4),table1.year)+'-'+convert(varchar(4),table1.month)+'-'+convert(varchar(4),table1.day),120) between table2.stdate and table2.eddate
select customer_id, regexp_substr(exp_comment,'.*'||chr(10)||'(.*Export)', 1, 1, 'n', 1) as export from export_comments
SELECT t1.number FROM t t1 JOIN (SELECT LEVEL FROM dual CONNECT BY LEVEL<=(SELECT MAX(number) FROM t)) t2 ON t2.level<= t1.number;
SELECT REGEXP_SUBSTR(text, '[:digit:]{5}', 1, 1) AS first_refid, REGEXP_SUBSTR(text, '[:digit:]{5}', 1, 2) AS second_refid FROM TABLE
SELECT tableA.username as userA tableB.username as userB FROM tableA CROSS JOIN table B WHERE tableA.username='abc' AND tableB.username='abcd' AND tableB.password='abcd';
sqlplus -S user/password << EOF | grep Primx select * from emp; EOF
UPDATE Table1 SET recordTime = FORMAT(MID(recordTime, 4, 2) + '/' + LEFT(recordTime, 2) + MID(recordTime, 6), 'yyyy-mm-dd hh:nn:ss') WHERE recordTime LIKE '##/##/####*'
SELECT M.ID, M.Value, D.ID DETAILID, D.Value DetailValue, D.Date FROM TABLE_MASTER M LEFT JOIN ( SELECT * FROM TABLE_DETAIL1 UNION ALL SELECT * FROM TABLE_DETAIL2) D ON M.ID = D.MASTER_ID
create table C as( select a.id, a.date_id, SUM(CASE WHEN b.hits >= '9' THEN 1 ELSE 0 END)/COUNT(b.hits) AS percent from A a join B b on a.id = b.id group by 1,2) with no data primary index(id);
select 'exdb' [@DataBaseName], (select t.table_name [@TableName], (select c.COLUMN_NAME [@ColumnName] from INFORMATION_SCHEMA.COLUMNS c where c.TABLE_NAME = t.TABLE_NAME for xml path('Column'), type) from INFORMATION_SCHEMA.TABLES t for xml path('Table'), type) for xml path('DataBase')
display(N) :- w(Order,_,Word,Class), ( N > Order -> write(Word), write(' '), write(Class), nl ; true ), fail .
SELECT t1.Name AS [Name] FROM Table1 AS t1 UNION SELECT t2.FName as [Name] FROM Table2 AS t2
Dim myadapter As New MySqlDataAdapter("SELECT * FROM core WHERE F1 = '" & strdocument &"'", dbConn)
SELECT * FROM (SELECT USER_ID,COUNT(comp_id) as numberr FROM COMPETITION GROUP BY USER_ID ORDER BY COUNT(comp_id) DESC) T1 WHERE rownum=1;
WHERE [value] like N'%■%'?
SELECT status, id AS ticket, summary, priority, keywords, datetime(changetime/1000000, 'unixepoch') AS last_updated, milestone AS __group__, reporter, owner FROM ticket t WHERE status NOT IN ('closed', 'resolved') AND (CASE WHEN '$MILESTONE' != '' THEN (milestone='$MILESTONE') ELSE (milestone in ('project1', 'project2', 'project3')) END) ORDER by t.milestone ASC, p.value
INSERT INTO myTable (ID) values (5);
x <- c('11111-111-11', '11111-1111-1', '1111-1111-11') y <- strsplit(x, '-') myfun <- function(y) { first <- sprintf('%05d', as.integer(y[1])) second <- sprintf('%04d', as.integer(y[2])) third <- sprintf('%02d', as.integer(y[3])) paste(first, second, third, sep='-') } sapply(y, myfun) # [1] "11111-0111-11" "11111-1111-01" "01111-1111-11"
SELECT UserId, MAX(TIMESTAMP) FROM ACCTRANS GROUP BY UserId
Select * from Table1 Except Select * from Table2
INSERT INTO Table_C (SELECT null, Table_A.item, Table_B.color, null FROM Table_A CROSS JOIN Table_B);
alter table tablename modify ( column_name varchar2(13) );
SELECT Column1, Column2 FROM Table WHERE CONVERT(datetime, DateColumn, 3) BETWEEN @StartDate AND @EndDate
UPDATE table SET a = replace..... OUTPUT DELETED.* WHERE stuff
select MAX(TO_NUMBER(REPLACE(SYSTEM_ID,'SYS',''))) from TABLE;
SELECT @Action = CASE WHEN EXISTS(SELECT 1 FROM INSERTED) AND EXISTS(SELECT 1 FROM DELETED) THEN 'U' WHEN EXISTS(SELECT 1 FROM INSERTED) THEN 'I' ELSE 'D' END;
create table measurements ( id, seq integer, -- between 1 and 256 ts timestamp, -- Timestamp of the measurement value decimal(...) )
select t2.ref, xx.Dates, xx.Status from Table2 t2 join ( select filename, dates, status from yt a where a.dates = ( select max(dates) from yt b where a.filename = b.filename )) xx on t2.filename = xx.filename;
SELECT NBAGameLog.Opp, AVG(NBAGameLog.Points) FROM Players INNER JOIN NBAGameLog ON Players.Player_ID = NBAGameLog.Player_ID WHERE (NBAGameLog.Date_Played Between Date()-15 And Date() AND Players.Position = "C" GROUP BY NBAGameLog.Opp;
select a.*, b.sumb from ta a left join (select b.uid, sum(b.amount) as sumb from tb b group by b.uid ) b on a.uid=b.uid where a.year = 'value';
select cola, regexp_replace(cola, '([^*|]*)\|([^*|]*)(\*|$)','\2|\1\3') as swapped_col from ( select '3456|Abc*7890|Def*9430|Ghi*3534|Jkl' cola from dual )
DECLARE @email VARCHAR(100) SET @email = 'firstname.lastname@email.com/IMCLientName' SELECT SUBSTRING(@email,0, CHARINDEX('@',@email))
SQL> ALTER SESSION SET nls_date_format = 'dd/mm/yyyy hh24:mi:ss'; Session altered. SQL> SELECT TO_DATE(SYSDATE) FROM DUAL; TO_DATE(SYSDATE) ------------------- 28/05/2014 16:03:25 SQL> SELECT TRUNC(SYSDATE) FROM DUAL; TRUNC(SYSDATE) ------------------- 28/05/2014 00:00:00
SELECT TABLENAME, LASTALTERTIMESTAMP FROM DBC.TABLES WHERE DATABASENAME = 'My DB Name' -- OPTIONAL ORDER BY LASTALTERTIMESTAMP DESC
SELECT * FROM financials WHERE date >= NOW() - INTERVAL 30 DAY
select AS.USER_ID from ACTION_SUMMARY AS where AS.DATE between '2015-01-01' and '2015-07-07' and EXISTS (select 1 from ACTION_DETAIL AD where AD.AS_id = AS.AS_ID and AD.ACTYP_ID in (45, 25, 11) );
│ │ Users │ Active users │ DB+edits │ DB only │ ├──────────────┼───────┼──────────────┼──────────┼─────────┤ │ MusicBrainz │ 1.2M │ 1K/week │ 30 GiB │ 20 GiB │ │ en.wikipedia │ 21.5M │ 133K/month │ 3 TiB │ 44 GiB │ │ OSM │ 1.7M │ 21K/month │ 726 GiB │ 480 GiB │
select X.From, [To] = COALESCE(Y.To, X.To) from x left outer join y on x.To = Y.From and x.Exec_ID = y.Exec_ID
SELECT distinct on (parent_id) parent_id , version_id FROM items ORDER BY parent_id, version_id DESC
SELECT * FROM table WHERE name LIKE '%foo%' OR descr LIKE '%foo%'
CREATE USER [Username] FOR LOGIN [Domain\Username] EXEC sp_addrolemember N'DatabaseRole', N'Username'
SELECT SUM(i.price)/(SELECT COUNT(*) FROM customers) FROM items i LEFT JOIN orders o ON i.itemID = o.itemID AND o.date BETWEEN '2013-03-01' AND '2013-03-31' WHERE o.itemID IS NOT NULL
SELECT M1.* FROM Messages M1 LEFT JOIN Messages M2 ON M1.ReceiverID = M2.ReceiverID AND M1.Timestamp < M2.Timestamp WHERE M2.ID IS NULL
UPDATE tablename SET creationDate=DATETIME(creationDate, '+330 minutes');
SELECT * FROM directory WHERE userType = 'employee' OR userID NOT IN ( SELECT userID FROM directory WHERE userType = 'employee' )
SELECT TOP 1 t.value FROM table AS t ORDER BY LEN(t.value) DESC
SELECT p.PersonID, -- NOT NULL -- dl.PersonID, -- Can be null. Don't use this one. p.FirstName, p.LastName, a.City, a.Street, dl.ValidUntilDate FROM Person p INNER JOIN Addresse a ON a.AddressID = p.HomeAddressID LEFT JOIN DrivingLicence dl ON dl.PersonId = p.PersonID
True False Unknown
select division_id, count(*), avg(scores.score), sum(scores.score) from user join (select id as user_id, score from user UNION ALL select user_id, score from test_score UNION ALL select user_id, score from task_score UNION ALL select user_id, score from offline_score) as scores on user.id = scores.user_id group by division_id
declare @SQL nvarchar(max) = '' select @SQL = @SQL + 'EXEC ' + quotename(s.name) + '.' + quotename(b.name) + ';' from sys.procedures b join sys.schemas s on s.schema_id = b.schema_id where s.name = 'IC' select @SQL --exec sp_executesql @SQL
SELECT TOP 500 CONVERT(INT, CONVERT(VARBINARY(16), NEWID())) FROM dbo.MyTable
SELECT CLASS, COUNT (*) FROM MYTABLE GROUP BY CLASS
SELECT * FROM (select id, somedate, somevalue, sum(somevalue) over(order by somedate) as runningtotal from TestTable )sub WHERE somedate > '2009-02-20'
select disease.name, count(diagnosed.diseaseid) as timesdiagnosed from disease left join diagnosed on disease.diseaseid = diagnosed.diseaseid group by disease.name having count(diagnosed.diseaseid) <= 2 order by disease.name
alter table t1 shrink space;
def up execute "ALTER TABLE orders ADD UNIQUE ordering_date_ndx (ordering_date)" end
DELETE t1 FROM emailvalue t1 LEFT JOIN ( SELECT email, value FROM emailvalue GROUP BY email ) t2 on t2.email = t1.email AND t2.value = t1.value WHERE t2.value is null;
SELECT mt.*, FROM MyTable mt INNER JOIN ( SELECT ID, MIN(Record_Date) MinDate FROM MyTable GROUP BY ID ) t ON mt.ID = t.ID AND mt.Record_Date = t.MinDate
INSERT Table2 (Produce, Cust1_Totals, Cust2_Totals, Cust3_Totals) SELECT Fruit , SUM(case when Customer_ID = 1 then quantity end) , SUM(case when Customer_ID = 2 then quantity end) , SUM(case when Customer_ID = 3 then quantity end) FROM Table1 WHERE Customer_ID IN (1,2,3) GROUP BY Fruit
CREATE TRIGGER tg_bi_mytable BEFORE INSERT ON mytable FOR EACH ROW SET NEW.address1 = IF(EXISTS ( SELECT * FROM mytable WHERE address1 IN(NEW.address1, NEW.address2) OR address2 IN(NEW.address1, NEW.address2) ), NULL, NEW.address1);
SELECT Customers.CustomerNum, Reasons.ID FROM Customers, Reasons WHERE SUBSTR(Customers.Reasons, Reasons.ID, 1) = 'X'
SELECT `course`.`id`, `course`.`name` FROM `course` WHERE `name` LIKE 'TEB lorem ipsum' or `name` LIKE '%TEB%' or `name` LIKE '%lorem%' or `name` LIKE '%ipsum%' ORDER BY CASE WHEN `name`='TEB lorem ipsum' THEN 1 ELSE 2 END ASC
WHERE YEAR(datecreated) = YEAR(GETDATE()) AND MONTH(datecreated) = MONTH(GETDATE()) AND DAY(datecreated) = DAY(GETDATE())
delete from table2 where not exists (select 1 from table1 where table1.id = table2.id and table2.date between table1."begin" and table1."end" );
SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'
SELECT display_order AS CurrentDisplayOrder, ROW_NUMBER() OVER (ORDER BY display_order) AS NewDisplayOrder FROM YourTable ORDER BY display_order
Select ..... from .... where (Status = @Status or @Status is null) and (Created=@Created or @Created is null) and (Release = @Release or @Release is null) and (Date = @Date or @Date is null)
select top 5 type, count(*) Total from yourtable group by type order by total desc
select FirstName,LastName from People where FirstName <= LastName union select LastName,FirstName from People where LastName < FirstName
with recursive rel_tree as ( select rel_id, rel_name, rel_parent, 1 as level, array[rel_id] as path_info from relations where rel_parent is null union all select c.rel_id, rpad(' ', p.level * 2) || c.rel_name, c.rel_parent, p.level + 1, p.path_info||c.rel_id from relations c join rel_tree p on c.rel_parent = p.rel_id ) select rel_id, rel_name from rel_tree order by path_info;
SELECT t1.checkno,t1.id, IF(@lastCheckNo IS NULL OR @lastCheckNo = t1.checkno - 1,'','*') as outoforder, @lastCheckNo := t1.checkno FROM (SELECT * FROM `table` ORDER BY checkno) t1,(SELECT @lastCheckNo := NULL)variable
SELECT job_id, cust_id, count(distinct a.skill_id) FROM aaa.jp_job_skill_ref a INNER JOIN aaa.jp_cust_skill_ref b ON a.skill_id = b.skill_id GROUP BY `job_id`, `cust_id`;
DECLARE @x xml DECLARE @strXML varchar(MAX) SET @x=N'<Employee><Name>Luftwaffe</Name></Employee>' set @strXML = '<xml version="1.0" encoding="ISO-8859-1"/>' + CONVERT(varchar(MAX),@x) SELECT @strXML
CREATE UNIQUE INDEX foo_idx1 ON foo (bar)
SELECT * FROM Employees E JOIN States S ON E.idEmployee = S.idEmployee LEFT JOIN Data1 D1 ON S.data1 = D1.data1 AND S.idStateType = 1 AND D1.attribute1 = value LEFT JOIN Data2 D2 ON S.data2 = D2.data2 AND S.idStateType = 2 and D2.attribute2 = value and D2.attribute3 = value LEFT JOIN Data3 D3 ON S.data3 = D3.data3 AND S.idStateType = 3 and (D1.attribute1 = value or D3.attribute3 = value)
select * from picks where pick = '$winner' and abs(score-$winScore) = (select min(abs(score-$winScore)) from picks where pick = '$winner');
CREATE OR REPLACE TRIGGER trg_table_name_set_id BEFORE INSERT ON table_name FOR EACH ROW BEGIN SELECT table_seq.nextval INTO :new.id FROM DUAL; --id would be the id column in your table --or, if you are on 11g, simply --:new.id := table_seq.nextval; END trg_table_name_set_id;
CAST(DATEADD(MINUTE, 60 * FLOOR(StartTime/100) + StartTime % 100, CONVERT(char(12), ROW_DATE, 112)) AS DATETIME) AS DATE_TOME
select distinct on (r1.name) r1.name, r2.name, f(r1.m, r2.m) from r1 cross join r2 order by r1.name, f(r1.m, r2.m)
DECLARE @d1 datetime, @d2 datetime SELECT @d1 = '2008-06-09 10:18:00.000', @d2 = '2008-06-10 11:20:00.000' SELECT CAST(DATEDIFF(hour, @d1, @d2) AS varchar(30)) + ' hours, ' + CAST(DATEDIFF(minute, @d1, @d2) % 60 AS varchar(30)) + ' minutes, ' + CAST(DATEDIFF(second, @d1, @d2) % 3600 % 60 AS varchar(30)) + ' seconds'
SELECT customers.name AS customer_name, item.name AS item_name FROM customers INNER JOIN items ON items.customer_id=customers.id;
WHERE 0 in (col1, col2) OR '' in (col3, col4)
;WITH rn (ID, rowNumber) AS ( SELECT st.ID, ROW_NUMBER() OVER (ORDER BY st.ID) FROM SomeTable st WHERE EXISTS ( SELECT 1 FROM MyTable mt WHERE mt.Some_ID = st.ID ) ) UPDATE mt SET MyField = rowNumber FROM MyTable mt JOIN rn ON rn.ID = mt.Some_ID
select name_1, dpid_clid, city from dts_master_dividend where upper(name_1) like upper('%') and dpid_clid like upper('IN30290243450560%') group by name_1, dpid_clid ,city
SELECT 1 FROM your_table a INNER JOIN your_table b ON a.tag = b.tag WHERE a.article = 1 AND b.article = 2
SELECT Total FROM (SELECT (Some Really Taxing Calculation) AS Total, * FROM Purchases) AS Purchases WHERE Total < 55 AND itemName = "Bananas" OR Total > 90 AND itemName = "Apples" OR Total = 30 AND itemName = "Peaches" ORDER BY Total
.... WHERE isActive;
WITH x AS ( SELECT eventDate, MAC, IP, eventCode, rn = ROW_NUMBER() OVER ( PARTITION BY DATEDIFF(DAY, 0, eventDate), MAC, IP, eventCode ORDER BY eventDate ) FROM EventsLog ) SELECT eventDate, MAC, IP, eventCode FROM x WHERE rn = 1 ORDER BY EventDate;
SELECT itemName, GROUP_CONCAT(CASE Date_format(`Date`,'%Y-%d-%m') WHEN '2012-01-12' THEN `isAvailable` ELSE NULL END) AS `2012-01-12` ,GROUP_CONCAT(CASE Date_format(`Date`,'%Y-%d-%m') WHEN '2012-02-12' THEN `isAvailable` ELSE NULL END) AS `2012-02-12` ,GROUP_CONCAT(CASE Date_format(`Date`,'%Y-%d-%m') WHEN '2012-03-12' THEN `isAvailable` ELSE NULL END) AS `2012-03-12` FROM Table1 GROUP BY `itemName`;
CREATE VIEW ordered_view AS SELECT name, cost FROM mytable ORDER BY cost DESC; SELECT name, cost FROM ordered_view;
SELECT case when CONVERT(DECIMAL(11,1),SUM(Column/1000*-1)) >= 0 then concat('+', CONVERT(DECIMAL(11,1),SUM(Column/1000*-1))) else CONVERT(DECIMAL(11,1),SUM(Column/1000*-1)) end AS NAME FROM Table
select t.Customer, t.ID, t.Cost, t.Date from (select t.*, dense_rank() over (partition by Customer order by "Date" desc) as seqnum from t ) t where seqnum <= 4;
SELECT ContinentID, CountryID, StateCode = STUFF((SELECT ', ' + StateCode FROM Location b WHERE b.ContinentID = a.ContinentID and b.CountryID = a.CountryID FOR XML PATH('')), 1, 2, '') FROM Location a GROUP BY ContinentID, CountryID
DECLARE @TheDate datetime, @Today datetime SET @TheDate = GetDate() SET @Today = DateAdd(dd, DateDiff(dd, 0, @TheDate), 0) SELECT DateAdd(s, DateDiff(s, @Today, @TheDate), @Today)
select Column1, Column2, 1 + ((row_number() over(order by Column3) - 1) / 5) from YourTable
set fmtonly on go insert into execution_log_table ([timestamp] ,user_id ,report_id) values (CURRENT_TIMESTAMP ,1234 ,5678) select * from (select column1 ,column2 from another_table) tbl
select t1.Name, sum(t1.NbrOfAuthorizations) as NbrOfAuthorizations, avg(datediff(dd, t1.AuthDate, t1.AuthExpirationDate)) as AuthLenInDays from #tmp1 as t1 -- looks like you don't need join also, or there're multiple rows -- in #tmp2 for row in #tmp1 -- left outer join #tmp2 as t2 on t2.AuthID = t1.AuthID where t1.mode = 'Preservation' group by t1.Name
DECLARE p_Statement NVARCHAR(MAX) SELECT p_Statement = 'SELECT id FROM hotels WHERE 1 = 1 ' for each p_catID in SelectedCatIds (loop) : SELECT p_Statement = p_Statement + 'AND id IN (SELECT hotel_id FROM hotel_category_infos WHERE cat_id = p_catID ' (end loop) PREPARE stmt FROM p_Statement EXECUTE stmt
WHERE t1.FullName LIKE '%sometext%' OR t1.Comment LIKE '%sometext%' OR t2.Name LIKE '%sometext%' OR t3.Description LIKE '%sometext%'
SELECT bl.`blog_id`, count(DISTINCT CONCANT(bc.`blog_id`,bc.`author`,bc.`timestamp`) AS 'comment_count',...
select name,v1,v2, (max(rate) + min(rate)) / 2 As `Average` From messages m INNER JOIN rates r ON r.id = m.rate_id Group by name,v1,v2
CREATE TABLE ts2 AS SELECT DISTINCT * FROM ts1;
UPDATE links SET link = '$link', rid = $rid, order = $order WHERE lid = $lid and (SELECT COUNT(*) FROM resources WHERE rid = $rid AND (sid = $sid OR sid IS NULL) AND types IS NULL) = 1;
INNER JOIN Inventory ON tbl_IMPORT.[Bill Date] = Inventory.[Bill Date] INNER JOIN Device ON Inventory.[ID]=Device.[ID]
select count(*) as counts from myTable where datediff(yyyy,dob,admitdate) between 5 and 10
SELECT id, header, text, ... FROM CONTENT WHERE online_at < current_timestamp MINUS SELECT id, header, text, ... FROM CONTENT WHERE offline_at < current_timestamp
SELECT c.cust_id, c.forename, c.surname, p.prod_name, s.Date_of_sale FROM customers c INNER JOIN sales s ON c.cust_id = s.cust_id INNER JOIN products p ON s.product_id = p.product_id ORDER BY s.Date_of_sale DESC
IF @debug = 1 BEGIN print 'Something' --or insert into a log table if you need the rows of a temp table --or the results of a calculation END
SELECT t.id, t.transaction_date FROM transactions t INNER JOIN users_transactions ut ON t.id = ut.transaction_id WHERE ut.user_id = 71720 ORDER BY t.transaction_date DESC LIMIT 25 OFFSET 0;
SELECT Color,SUM(amount) as count FROM tablename GROUP BY Color ORDER BY count DESC;
UPDATE users SET number_of_days = if (last_login = curdate(), number_of_days, number_of_days + 1), last_login='date', number_of_login = number_of_login + 1 WHERE user_id='user_id'
CREATE TABLE #temp ( a INT NULL, b INT NULL ) INSERT #temp SELECT 1, NULL UNION SELECT 2, 2 DECLARE @b INt SELECT @b = 2 SELECT * FROM #temp WHERE b = isnull(@b,b)
SELECT ChildId,MainValues FROM CHILD INNER JOIN MASTER WHERE ','||[Values]||',' like '%,'||MainValues||',%'
select t.*, ((case when jan is not null then 1 else 0 end) + (case when feb is not null then 1 else 0 end) + (case when mar is not null then 1 else 0 end) + (case when apr is not null then 1 else 0 end) + (case when may is not null then 1 else 0 end) ) as MonthsWithData from t;
( select a as FIRST_COL from table 1 ) union ( select d as FIRST_COL from table2 )
var query = (from employee in db.Employee from business in db.Business where employee.Administrator == 1 || (business.BusinessId == 1 && (employee.EmployeeId == business.Initiator || employee.EmployeeId == business.Owner)) select employee.EmployeeId).Distinct();
isnull(c.NAME_CONT +' ', '')+isnull(c.SURNAME_CONT,'')
SELECT u.name, count(t.username) TicketsSubmitted FROM Users u INNER JOIN tickets t ON u.id = t.username GROUP BY u.name
SELECT * FROM sys.configurations WHERE name = 'clr enabled'
ALTER ROLE <rolename> SET statement_timeout = '60000'
SELECT categories.id, max(categories.slug), count(categories_questions.id) AS numberOfQuestions FROM categories LEFT JOIN categories_questions ON categories.id = categories_questions.category_id group by categories.id
SQL> select add_months(date '2008-01-31',1) from dual; ADD_MONTHS( ----------- 29-FEB-2008 SQL> select add_months(date '2008-02-29',1) from dual; ADD_MONTHS( ----------- 31-MAR-2008
SELECT st.name, sc.grades, CASE WHEN @grade = COALESCE(sc.grades, 0) THEN @rownum ELSE @rownum := @rownum + 1 END AS rank, @grade := COALESCE(sc.grades, 0) FROM STUDENTS st LEFT JOIN SCORES sc ON sc.student_id = st.id JOIN (SELECT @rownum := 0, @grade := NULL) r ORDER BY sc.grades DESC
SELECT * FROM FREQUENT WHERE BAR = 'TAVERN' AND DRINKER NOT IN (SELECT DRINKER FROM FREQUENT WHERE BAR <> 'TAVERN')
SELECT id, ProductName, NZ(OnHand, 0) + NZ(SUM([OrderJoin.Quantity]), 0) AS QtyAfter ...
SELECT a.id, a.name, c.name as category, group_concat(subcat.name) as subcategories FROM accounts AS a INNER JOIN account_has_subcategory AS ahs ON a.id = ahs.account_id INNER JOIN subcategory AS subcat ON subcat.id = ahs.subcat_id INNER JOIN category AS c ON a.category = c.id GROUP BY a.id, a.name, c.name ORDER BY a.id;
select first_name, last_name, min(pin) as pin from documents group by first_name, last_name having count(distinct pin) = 1;
SELECT * from table where field1 = 1 AND field2 = 0 AND ( (field3 = 1 AND (field4 = 4 OR field4 = 5 OR field4 = 6)) OR (field3 = 0) )
capacity = (X * Y) / Z
select distinct trunc(date_created), user_name from login_history order by trunc(date_created);
select a.*, (case when a.id is not null then coalesce(ans, -1) end) as ans from b left join a on b.answerid = a.id;
{ "perms": { "$elemMatch": { "user": "alex", "visible": 0 } } }
SELECT m.field1, v.vegName, f.fruitName FROM test_main m INNER JOIN dummy d ON d.id < 3 LEFT JOIN test_veg v ON v.mainID = m.mainID and d.id = 1 LEFT JOIN test_fruit f ON f.mainID = m.mainID and d.id = 2 WHERE m.mainid=1
select a.* from tableA a Left outer join TableB b on a.id=b.id where b.id is NULL
SELECT * FROM( SELECT a.*, rownum rn FROM( SELECT * FROM table_name ORDER BY some_key ) a WHERE rownum <= MAX_ROW) WHERE rn >= MIN_ROW
1. tbl_users(uid, uname, password, Name, ...) 2. tbl_categories(cid, cname, parent_category_id ...) -- self join 3. tbl_user_categories (uid, cid) -- Mapping table
outgoing_text := DBMS_XMLGEN.CONVERT(incoming_text)
;WITH cte AS ( SELECT *, RowNum = ROW_NUMBER() OVER (PARTITION BY phone, name ORDER BY id) FROM tbl ) DELETE FROM cte WHERE RowNum > 1
CAST(a.numeric_Field AS CHAR(5))` = b.stringfield
SELECT t.inv, MAX(CASE WHEN t.description = 'CHARGES' THEN t.amount ELSE NULL END) AS charges, MAX(CASE WHEN t.description = 'FREIGHT' THEN t.amount ELSE NULL END) AS freight, MAX(CASE WHEN t.description = 'INSURANCE' THEN t.amount ELSE NULL END) AS insurance FROM YOUR_TABLE t GROUP BY t.inv ORDER BY t.inv
SELECT * FROM table_name WHERE name = 'F100'
select name, sum(case when rating > 1 then 1 else 0 end) as cnt1, sum(case when rating > 5 then 1 else 0 end) as cnt2 /* ... repeat as many times as needed */ from myview group by name
select t.*, sum(case when datefrom = dateadd(day, 1, prev_dateto then 0 else 1 end) over (order by itemId, datefrom) from (select t.*, lag(dateto) over (partition by itemid order by datefrom) as prev_dateto from table t ) t;
select * from ( select lag(date_)over ( order by date_) as date_before_ko, date_ as date_after_ko, floor((date_ - lag(date_) over ( order by date_))*24*60) as minutes_passed from HISTORY_LOG ) where minutes_passed > 4
Select * from (SELECT owner_id,message,time FROM messages WHERE thread_id = ? ORDER BY time DESC LIMIT ?) test Order by time ASC
select a.*, b.* from tablea a outer apply (select top 1 b.* from tableb b where b.id = a.id and b.date <= a.date order by b.date desc ) b;
SELECT object_name, last_ddl_time FROM dba_objects ORDER BY last_ddl_time DESC;
CREATE PROCEDURE myTest @Result INT OUTPUT AS BEGIN SET NOCOUNT ON; BEGIN TRY SELECT FirstName,LastName FROM Employees SET @Result = 1; END TRY BEGIN CATCH SET @Result = 0; END CATCH END;
$myColumnArray = /* load mysql values here */; // order numbers smallest to largest $uniqueElements = sort(array_unique($myColumnArray)); // calculate increment $incriment = count($uniqueElements); // go thru elements in orig array and replace with weighted value foreach($myColumnArray as &$val){ // get position of element (i.e. "4th largest") $position = array_search ($val, $uniqueElements); // set it equal to weighted value $val = $position * $increment; }
SELECT c.* FROM Customer c INNER JOIN ( SELECT c.promo1, MIN(c.AutoID) AutoID FROM Customer c GROUP BY c.promo1) FirstCusomterWithPromo ON c.AutoID = FirstCusomterWithPromo.AutoID
SELECT top 40 @searchLatitude, @searchLongitude, l.Id as Id, l.Postcode as Postcode, l.latitude as Latitude, l.longitude as Longitude,
UPDATE c SET c.Message = p.Message FROM Categories c INNER JOIN Categories p ON c.ParentID = p.CategoryID WHERE c.ParentID IS NOT NULL AND c.DeptID = @DeptID
SELECT COUNT(*) FROM (select x,y from xx group by y) sub;
select * from ( select col, row_number() over(order by col) rn from yourtable ) src order by random()
SELECT * FROM ( SELECT t1.Num, t1.Name, COUNT(DISTINCT t2.Num) AS seq FROM yourTable t1 LEFT JOIN yourTable t2 ON t1.Num <= t2.Num GROUP BY t1.Num, t1.Name) dt WHERE (seq <= 5);
select field1 , f2 , f3 , 'FLOW'||trim(to_char(rnk)) from (select field1 , f2 , f3 , sum(case when f3 = 1 then 1 else 0 end) over (order by field1, f3 range between unbounded preceding and current row) rnk from your_table )
select count(distinct block) as total_block from tablename
CREATE PROCEDURE `test1`(IN tab_name VARCHAR(40) ) BEGIN SET @t1 =CONCAT('SELECT * FROM ',tab_name ); PREPARE stmt3 FROM @t1; EXECUTE stmt3; DEALLOCATE PREPARE stmt3; END $$
if (update(columnA) or update(columnB))...
SELECT to_char(X) FROM TABLEX WHERE NAME LIKE 'Blablabla';
WHERE INSTR('00235-3844-42-523-3DF44',str_to_find)!=0
create view v_LOAD_UNISTATS_ACCREDITATION as select lua.*, 2013 as year from LOAD_UNISTATS_2013_ACCREDITATION lua union all select lua.*, 2012 as year from LOAD_UNISTATS_2012_ACCREDITATION lua . . .;
SELECT price FROM `table` WHERE STR_TO_DATE(`date`, '%d.%m.%y') BETWEEN STR_TO_DATE(...) AND STR_TO_DATE(...)
CREATE INDEX IDX_CoveredIndex ON Table1 (id1, id2, id3)
INSERT INTO Table1 (Amount, ContactName, State, City) values ( (Select nvl(max(Amount),0) from Table2 where id=12)+ (Select nvl(max(Amount),0) from Table3 where id=13), 'Sam','Newyork','Newyork' );
select tab.*, count(*) over () as totalcnt from mytable tab where tab.name = 'XYZ' and tab.type = 'TP'
SELECT CASE WHEN EXISTS(SELECT * FROM Application WHERE ID=@id AND IsSubmitted=1) THEN 0 ELSE 1 --or some other value END
select distinct d2.name from term_data d1 join term_node n1 on d1.tid = n1.tid join term_node n2 on n1.nid = n2.nid join term_data d2 on n2.tid = d2.tid where d1.name = 'A'
select s.emp_name as Name ,s.Number as m ,st.salestotal as Amount from ( select distinct emp_name, number from salestotals, numbers where number between 1 and 12) s left join salestotals st on s.emp_name = st.emp_name and s.number = month(st.yearmonth)
SELECT CASE WHEN DATENAME(WEEKDAY,OrderDate) = 'Wednesday' THEN DATEADD(DAY,7,OrderDate) ELSE DATEADD(DAY,(18-(@@DATEFIRST+DATEPART(WEEKDAY,OrderDate)))%7,OrderDate) END FROM Orders
INSERT INTO MyTable (character, number) SELECT character, '2' FROM MyTable WHERE number = 1
SELECT b.* ,(SELECT a.text FROM addresses a WHERE a.buildingid = b.id AND ROWNUM=1) as atext FROM building b;
UPDATE table2 SET table2.annualyear = inserted.intannualyear FROM table2 JOIN inserted ON table2.id = inserted.id
INSERT INTO table_name(column_proc_name)select name from sys.objects where type='p'
SELECT id, CASE WHEN value = 'xyz' THEN 'Pending' ELSE 'Not Pending' END AS status, time, FIRST_VALUE(user) OVER (PARTITION BY id ORDER BY time) AS first_user FROM table1 INNER JOIN ... WHERE subject IN (...) AND field = 'Status'
SELECT * FROM mytable WHERE LEN(MyField) > 400
select max(maxId) from ( select max(id) as maxId from delT1 union all select max(id) as maxId from t1 ) maxes;
WITH ids AS ( SELECT ID, ID AS orig FROM Data d1 WHERE CXL IS NULL UNION ALL SELECT d2.ID, orig FROM ids i INNER JOIN Data d2 ON d2.CXL = i.ID ) SELECT orig AS [Original Id], MAX(ID) AS [Latest Good Id] FROM ids GROUP BY orig
create table users (id serial primary key, tags text[]); insert into users (tags) values ('{"fun", "day"}'), ('{"fun", "sun"}'), ('{"test"}'), ('{"fin"}'); select * from users where exists (select * from unnest(tags) as arr where arr like 'f%')
Select * from Page where Page.page_title = 'AccessibleComputing'
class = > table instance => row attribute => column
SELECT * FROM yourTable INNER JOIN (SELECT col1, MAX(col2) as max_col2 FROM yourTable GROUP BY col1) AS lookup ON yourtable.col1 = lookup.col1 AND yourtable.col2 = lookup.col2
UPDATE YOUR_TABLE t SET T.COLUMN = REPLACE(T.COLUMN, 'FD>;', 'FD>;1')
SELECT manager_id AS "Manager ID", MIN(salary) AS "Lowest Paid Salary" FROM employees WHERE manager_id IS NOT NULL AND salary > 6000 GROUP BY manager_id ORDER BY min(salary) DESC;
SET ROWCOUNT 1 SELECT %s FROM %s
SELECT case when Status in ('A','B') then 'A&B' else Status end AS Status, COUNT(Status) AS StatusCount FROM EMPLOYEE GROUP BY case when Status in ('A','B') then 'A&B' else Status end
UPDATE video SET schedulingflag = true WHERE schedulingflag IS FALSE AND errorflag IS FALSE;
SELECT * FROM temp WHERE realName LIKE '% S_i%'
select key, min(value1) as "a value1", min(value2) as "a value2", max(value2) as "another value2", count(distinct value2) "number of value2" FROM tbl group by key having count(distinct value2) > 1
declare @docid bigint, @account varchar(30) While @@fetch_status=0 BEGIN SET @docid = NULL SELECT @Docid = Docid FROM printdata WHERE Account = @account IF @docid IS NULL -- @Docid *WILL* be NULL now if nothing is found! BEGIN SELECT @Docid = Docid FROM printdata WHERE balance = @balance END
Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs) //create your button then assign the id myButton.ID = "123" // assign a generic event handler for all the buttons in the table. AddHandler myButton.Click, AddressOf myButtons_Clicked End Sub Protected Sub myButtons_Clicked(ByVal sender As Object, ByVal e As EventArgs) Button thebtn = CType(sender, Button) string btnID = thebtn.ID // pass of the ID to whatever method is doing your processing End Sub
"DELETE x FROM $table x LEFT JOIN ( SELECT vendors , email , MIN(lead_id) min_lead_id FROM $table GROUP BY vendors , email ) y ON y.vendors = x.vendors AND y.email = x.email AND y.min_lead_id = x.lead_id WHERE x.vendors = $vendor AND y.min_lead_id IS NULL;";
SELECT A.ID, A.ProductName, B.ID, B.Size FROM A INNER JOIN B ON B.ProductID = A.ID UNION ALL SELECT A.ID, A.ProductName, NULL, NULL FROM A
SELECT Block.name, Container.name, adminrole.name from Block LEFT JOIN container_block ON container_block.containerid = Block.id LEFT JOIN Container ON Container.id = container_block.containerid LEFT JOIN AdminACL ON AdminACL.objectid = Container.id RIGHT JOIN adminrole_admin ON adminrole_admin.adminid #there could be multiple roles LEFT JOIN adminrole ON adminrole.id = adminrole_admin.adminroleID WHERE AdminACL.ObjectType = "Container" AND adminrole.name not like 'hidden_%'; # shouldn't you have a `hidden` column on the table, instead of prefixing the name?
ORDER BY to_char(TIMEOFISSUE, 'hh24miss')
select t.Column1, (select column2 from t t2 where t2.column1 = 'Customer' and t2.id <= t.id order by t2.id desc limit 1 ) as customer, (select column2 from t t2 where t2.column1 = 'Account' and t2.id <= t.id order by t2.id desc limit 1 ) as transaction, from t where t.column1= 'Transaction'
insert into a(email) select email from ((select email from c) union (select email from d) union (select email from e) ) cde where not exists (select 1 from b where b.email = cde.email);
WHERE xmlcolumn.value('(/path/to/tag)[1]', 'int') = @QueryValue
UPDATE `main_table` SET `count` = '$count' WHERE userid='$someid'
UPDATE public_document_store a INNER JOIN public_document_store_talkback b ON b.document_id = a.document_id SET a.skin_id = 6 WHERE b.is_released = 1 AND b.is_rejected = 0 AND a.section_id = 10
result := REGEXP_REPLACE(subject, '_0+', '_', 1, 0, 'c');
select name, min(time), max(time), count(*) from (select t.*, (row_number() over (partition by name order by time) - row_number() over (partition by name, event order by time) ) as grp from t ) t where event = 1 group by name, event, grp having count(*) >= 3;
----To create a snapshot create database SrcDbSnapshot on ( name = LogicalFileNameFromSrcDB, filename = 'E:\SrcDB.ss') AS SNAPSHOT OF SrcDB go ----To roll back --Kills all connections and performs the rollback ALTER DATABASE [SrcDB] SET SINGLE_USER WITH ROLLBACK IMMEDIATE RESTORE DATABASE [SrcDB] FROM DATABASE_SNAPSHOT = 'SrcDbSnapshot' go ----To remove the snapshot drop database SrcDbSnapshot go
SELECT GROUP_CONCAT(DISTINCT col_1) AS col_1, col_2 FROM (SElECT col_1, GROUP_CONCAT(DISTINCT col2) AS col_2 FROM my_table GROUP BY col_1) t GROUP BY col2
SELECT division, division_name, object_account, account_description, SUM(CASE WHEN vendor_type = 'PV' THEN value ELSE 0 END) as PreferedSpend, SUM(value) AS TotalSpend FROM jde_dw.blanket_rpt WHERE division = 02 AND month = 07 AND year = 2013 GROUP BY division, division_name, object_account, account_description ORDER BY division
;WITH cte AS ( SELECT CASE WHEN DATEPART(Day,@StartDate) = 1 THEN @StartDate ELSE DATEADD(Month,DATEDIFF(Month,0,@StartDate)+1,0) END AS myDate UNION ALL SELECT DATEADD(Month,1,myDate) FROM cte WHERE DATEADD(Month,1,myDate) <= @EndDate ) SELECT myDate FROM cte OPTION (MAXRECURSION 0)
SELECT * FROM table1 T JOIN Table2 S ON T.status_change_date <> max(S.enter_date) AND T.user_id = S.user_id WHERE S.status= 'closed'
SELECT username FROM table_name WHERE MONTH(birthday)=MONTH('$birthday') AND DAY(birthday)=DAY('$birthday')
HAVING EXTRACT(DAY FROM MAX(plans.updated_at) - MIN(plans.created_at)) > 0
INSERT INTO new_table (id, label) <put select query here>
select column1, column2, case when column1 is NULL and column2 is NULL then 'true' when column1=column2 then 'true' else 'false' end from table;
Select * From participants Where nokp in ( Select nokp From participants Group by nokp Having count(*) > 1 )
SELECT DISTINCT Order_ID FROM Orders T1 WHERE NOT EXISTS ( SELECT Product_ID FROM Orders WHERE Order_ID = 2 EXCEPT SELECT Product_ID FROM Orders WHERE Order_ID = T1.Order_ID);
select r.employee, d.description from table1 as d inner join (select min(rank) as rank, employee from table1 group by employee) r on d.rank = r.rank and d.employee = r.employee
SELECT product_description.* FROM `product_description` left outer join product on product_description.product_id = product.product_id where product.product_id is null
SELECT us.UsersShiftsId, us.UserId, us.ShiftStart, us.ShiftEnd, MIN(fs.ScannedTime) ActualStart, MAX(fs.ScannedTime) ActualEnd FROM UsersShifts us LEFT JOIN FingerprintScan fs ON us.UserId = fs.UserId AND fs.ScannedTime BETWEEN us.ShiftStart AND us.ShiftEnd GROUP BY us.UsersShiftsId, us.UserId, us.ShiftStart, us.ShiftEnd
Select * from ShipsTable where ShipType = "Barge" into Barges Run Menu Command 311
SELECT username ,LISTAGG(colour , ',') WITHIN GROUP (ORDER BY colour ) AS colour ,age FROM t GROUP BY username,age ;
/* the columns in this table are the same as the columns in your csv: */ create table if not exists my_csv ( some_field text, ... ); /* COPY appends, so truncate the table if loading fresh data again: */ truncate table my_csv; /* you need to be a postgres superuser to use COPY use psql \copy if you can't be superuser put the csv file in /srv/vendor-name/ */ copy my_csv from '/srv/vendor-name/my.csv' with ( format csv );
sql [ctx] C1 = { SELECT * FROM MyTable ORDER BY dup_column }; sql { FETCH C1 INTO row }; while ( !C1.endFetch() ) { if ( row.dup_column = prevrow.dup_column ) { sql [ctx] { DELETE FROM MyTable WHERE CURRENT OF C1 }; } prevrow.dup_column = row.dup_column; sql { FETCH C1 INTO ... }; } C1.close();
insert into perm (a,b,c,d,e,f) select t.* from temp t left outer join ( select p.* from perm p inner join ( select a, b, max(c) as max_c from perm group by a,b) mx on p.a = mx.a and p.b = mx.b and p.c = max_c ) p on t.a = p.a and t.b = p.b and t.c > p.c and t.d = p.d and t.e = p.e and t.f = p.f where p.a is null
SET @Sql = 'SELECT * FROM [' + @RemoteServer + '].dbname.schema.tblCustomers' EXEC @Sql
SELECT * FROM tbl WHERE col IN(SELECT col1 FROM tbl1) OR NOT EXISTS(SELECT 1 FROM tbl1)
select * from [lnkDB].[DB2].[dbo].[SystemInfo]
select company, sum(netSales) as netSales, sum(case when month(CURDATE()) - 1 = month(`date`) then netSales else 0 end) as lastMonthSales from your_table_name group by company;
INSERT INTO anothertable (list, of , column, names, to, give, values, for) SELECT list, of, column, names, of, compatible, column, types FROM bigimportedtable WHERE possibly you want a predicate or maybe not;
select Id, field1, (sum(field1) over() / field1) as field2 from YourTable
like '%JUL%'
insert into sales(code, sold) (SELECT '001',CASE WHEN 'FILLHERE' ='SI' THEN 1 ELSE 0 END );
INESRT INTO InsertTable (ReplacementID, [Name]) SELECT R.ReplacementID, O.[Name] FROM OriginalTable O INNER JOIN Employee E ON E.EmployeeID = O.EmployeeID INNER JOIN ReplacementEmployee R ON E.SerialNo = R.SerialNo
SELECT COALESCE(PriceDiscount, Price) AS Price FROM mytable
GROUP BY meetingID HAVING COUNT(caseID) < 4 AND COUNT(caseID) > 2
Select * from [mgnl:news] as t where name(t) = '3265'
SELECT * FROM t WHERE field2 = '2019@162440' UNION ALL SELECT * FROM t WHERE FOUND_ROWS() = 0 AND field2 LIKE '%%2019@%%'
alter table orders enable row movement;
select ForgeRock.id1 , ForgeRock.id2 , group_concat(ForgeRock.productName) from TClock left join ForgeRock on TClock.id1 = ForgeRock.id1 and TClock.id2 = ForgeRock.id2 where colour = 'red' group by ForgeRock.id1 , ForgeRock.id2
;WITH cte As ( SELECT ROW_NUMBER() OVER (PARTITION BY name, compound, rowid ORDER BY rid) AS RN FROM qvalues ) DELETE FROM cte WHERE RN > 1
SELECT yr, subject, winner FROM nobel WHERE winner LIKE "%Grünberg%"
create class User extends V create property User.username string create property User.password string create class UserGroup extends V create property UserGroup.id string create class user_group extends E create vertex User set username = 'foo', password = 'bar' create vertex UserGroup set id = 'group1' create edge user_group from (select from User where username = 'foo') to (select from UserGroup where id = 'group1') select expand(in('user_group')[username='foo'][password='bar']) from UserGroup where id = 'group1'
UPDATE data set `value` = REPLACE(`value`,'\\n', CHAR(10)) WHERE `key`='shipping_address';
ParseQuery<ParseObject> query = ParseQuery.getQuery("Data_db"); query.whereEqualTo("username", edittext_user.getText().toString()); query.getFirstInBackground(...);
SELECT t1.docnum, t1.doctype, t1.code, t2.invnum FROM ( select *, row_number() over (partition by docnum ORDER BY docnum, poline) as ordinal from table1 ) t1 LEFT JOIN ( select *, row_number() over (parition by docnum ORDER BY docnum, invseq) as ordinal ) t2 ON t2.docnum = t1.docnum and t2.ordinal = t1.ordinal
SELECT DISTINCT LOWER(SUBSTR(firstName,1,1)) firstChars FROM your_table WHERE LOWER(SUBSTR(firstName,1,1)) IN ('a','b','c','d','e','f','g','h','i','j', 'k','l','m','n','o','p','q','r','s','t', 'u','v','w','x','y','z') ORDER BY firstChars
declare @SomeDate datetime = GETDATE() update Testingset set SomeDate = @SomeDate where SomeDate is null or SomeDate <> @SomeDate
DECLARE @SummaryOfChanges TABLE(Change VARCHAR(20)); MERGE tblTarget AS Target USING (SELECT Col1,Col2 FROM tblSource) AS Source ON (Target.Col1 = Source.Col1) WHEN MATCHED THEN UPDATE SET target.Col2 = source.Col2 -- Need to get affected rows here WHEN NOT MATCHED BY TARGET THEN INSERT (Col1,Col2) VALUES (Col1,Col2); -- Need to get affected rows here OUTPUT $action INTO @SummaryOfChanges; SELECT Change, COUNT(*) AS CountPerChange FROM @SummaryOfChanges GROUP BY Change;
SELECT D.id FROM (SELECT id , DISTANCE_BETWEEN (Latitude,Longitude,43.2560997009,-2.9078400135) AS distance FROM Locations) AS D ORDER BY distance LIMIT 1
SELECT MIN(user_id) user_id, MIN(friend_id) friend_id FROM Table1 GROUP BY LEAST(user_id, friend_id), GREATEST(user_id, friend_id) HAVING COUNT(*) = 1
select text from sys.dm_exec_requests cross apply sys.dm_exec_sql_text(plan_handle) where session_id = <SPID FROM PROFILER>
if (:OLD.LOGGED_IN = 1) then if (:NEW.LOGGED_IN = 0) then UPDATE SESSION_LOGGING AS current_session SET DAUER = (sysdate-ZEITSTEMPEL) WHERE DAUER IS NULL AND SECURE_IDENTIFIER = :NEW.SECURE_IDENTIFIER; end if; end if;
SELECT id, date, state_on_date, ( SELECT TOP 1 year_quantity FROM table2 WHERE id = t.id AND date >= t.date ORDER BY date ) AS year_quantity FROM table1 t
SELECT person_id, [1] Num_1,[2] Num_2,[3] Num_3,[4] Num_4,[5] Num_5 FROM Table1 PIVOT(MAX(number) FOR row_count IN ([1],[2],[3],[4],[5]))pvt
select environments.envcode, logs.type from environments left join session on environments.envcode = session.envcode left join logs on session.sessionid = logs.sessionid where not exists ( select * from sessions later_session join logs later_log on later_log.sessionid = later_session.sessionid where later_session.envcode = session.envcode and later_log.created > logs.created );
SELECT * FROM foo WHERE update_date > DATE_ADD(publish_date, INTERVAL 1 WEEK)
SELECT * FROM posts LEFT JOIN customfields ON post_id=posts.id AND custom_key='featured' ORDER BY custom_value=1 DESC, id DESC;
ALTER TABLE yourTable RENAME CONSTRAINT SYS006321 TO yourNewName;
SELECT * FROM Notification inner join User on ( User.Date >= Notification.Date and (Notification.Gender is null or Notification.Gender = User.Gender) and (Notification.HairColor is null or Notification.HairColor = User.HairColor) and (Notification.EyeColor is null Notification.EyeColor = User.EyeColor) and (Notification.Company is null or Notification.Company = User.Company) )
CREATE TABLE "Author/Title" ( author_name VARCHAR(50), isbn VARCHAR(13) REFERENCES "Item Details", PRIMARY KEY (author_name, isbn) )
SELECT * FROM Table1 WHERE Name='ABC' OR Party<>'IND';
SELECT * INTO OUTFILE 'filename' FIELDS TERMINATED BY '|' LINES TERMINATED BY '\n' FROM yourtable;
SELECT ... WHERE ... UNION SELECT ... WHERE ... UNION SELECT ... WHERE ...
select HotelName from your_table group by HotelName having count(HotelID) >= 5
SELECT * FROM t3 INNER JOIN t2 ON (t3.fkeyT2 = t2.key) INNER JOIN t1 ON (t2.fkeyT1 = t1.key) WHERE t1.name = 'Foo'
ORDER BY CASE when Symbol like '%FUT' then 1 when Symbol like '%CE' then 2 when Symbol like '%PE' then 3 else 4 end, Symbol asc
SELECT MAX(id) FROM status WHERE id < 5
DataContext db = new DataContext(); var nameCount = db.Names.Count(); var nameCount = db.Names.Select(n => n.Id).Max();
SELECT modify_date ,type_desc ,name FROM sys.objects WHERE is_ms_shipped=0 --AND modify_date>='yyyy/mm/dd' <--optionally put in your date here ORDER BY 1 DESC
SELECT user.uid FROM user WHERE EXISTS( SELECT TOP 1 1 FROM Friends WHERE Friends.fuid = @friend1 AND Friends.fapproved = 1 AND Friends.fuid2 = User.uid ) AND EXISTS( SELECT TOP 1 1 FROM Friends WHERE Friends.fuid = @friend2 AND Friends.fapproved = 1 AND Friends.fuid2 = User.uid )
DELETE tableA FROM tableB WHERE tableA.ID = tableB.ID
SELECT item1.id as id1, item2.id as id2 FROM item item1, item item2 WHERE item1.value = item2.value AND item1.id < item2.id
declare @Result int EXEC @Result = sp_getapplock @Resource = 'holdit1', @LockMode = 'Exclusive', @LockTimeout = 10000 --Time to wait for the lock IF @Result < 0 BEGIN ROLLBACK TRAN RAISERROR('Procedure Already Running for holdit1 - Concurrent execution is not supported.',16,9) RETURN(-1) END
SELECT DISTINCT [Month], Mean = AVG(Score) OVER (PARTITION BY [Month]), StdDev = STDEV(Score) OVER (PARTITION BY [Month]), P90 = PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY Score) OVER (PARTITION BY [Month]) FROM my_table
select top 1 s.* from schedules s where username = 'username' and CAST('2008-12-20 10:00' AS DATETIME) >= startdate order by startdate;
CommandText = "Insert into FileMaster(Subject,FileID) Values('" & obj.Subject & "','" & obj.FileID & "')
WITH CTE (NodePath, ID) AS ( SELECT '/' + CAST(NodeName AS NVARCHAR(MAX)) AS NodePath, ID FROM TABLE WHERE NodeName = 'Root' UNION ALL SELECT CTE.NodePath + '/' + CAST(NodeName AS NVARCHAR(MAX)) AS NodePath, TABLE.ID FROM CTE INNER JOIN TABLE ON TABLE.ParentId = CTE.ID ) SELECT NodeName, ID FROM CTE
SELECT Products.* FROM Products RIGHT OUTER JOIN Join_Table ON Products.ID = Join_Table.Product_ID AND Join_Table.Property_ID = 2 WHERE Products.ID IS NULL
SELECT post_title, post_content, meta_value FROM wp_posts LEFT JOIN wp_postmeta ON ID = post_id and meta_key = '_wp_attached_file'
INSERT INTO TableE (E_ID , E_NAME) SELECT b.B_ID ,d.D_ID FROM TableA a INNER JOIN TableB b ON b.FROM_A = a.A_ID INNER JOIN TableC c ON c.C_ID = a.A_TYPE INNER JOIN TableD d ON d.D_NAME = c.C_NAME
select a, b, c, left(case when t.b > t.c then t.b else isnull(t.c, t.b) end + @f, 10) as d from #myTable t order by someCriteria
Worksheets("Sheet3").Cells(2, 1).CopyFromRecordset rs
floor(time_to_sec(time1) - time_to_sec(time2) / 60) as MinutesDiff
case when job_id like '%VP%' then 1.3 else 1.2 end * salary
SELECT SUM(Units) FROM TableIH AS F WHERE F.Fund = S.Fund AND F.Number = S.Number AND F.Date >= (SELECT MIN(Date) FROM TableIH AS D WHERE D.Fund= F.Fund AND D.Number = F.Number AND D.Entry = 'Tax'
SELECT measuremententry * 1000 AS measuremententry FROM log
create unique index idx_supplier_shop_name on supplier(shop, name)
select substring(empno, 6, charindex('E', empno, 6) - 6) from (select 'Empl:9998 Earn Code:7704 Seq:1' as empno) t;
SELECT DISTINCT CategoryName FROM YourTable
SELECT * FROM `MY_TABLE` WHERE field_1 = 'something' AND created BETWEEN '2014-06-01 00:00:00' AND '2014-06-30 23:59:59' AND email IN ('emaillist1@email.com', 'emaillist2@email.com', 'emaillist3@email.com');
select user_id, case when age < 18 then 'under18' when age <=65 then 'normal' when age > 65 then 'over65' else null end as category from Users
DECLARE @vkey int = 1 ;WITH cte_test AS ( SELECT keyA,(SELECT ','+fieldb FROM tableB t1 WHERE t1.keyA = t.keyA FOR XML path('')) AS rslt from tableB t GROUP BY t.keyA) SELECT t2.* FROM cte_test t1 INNER JOIN cte_test t2 ON t1.[rslt] = t2.[rslt] AND t2.[keyA] <> t1.[keyA] WHERE t1.[keyA] = @vkey
select * from your_table order by year, month, `date` desc limit 1
SELECT ID, Value,As_of from yourTable a inner join (SELECT ID, MAX(As_of) as As_of from yourTable group by ID) b on a.ID=b.ID and a.As_of = b.As_of
select @address = address , @serialNumber = serialNumber from dummyTable where id = 10
select u._id,u.id,u.name,u.email,u.country, case when s.subscribe is not null then 1 else 0 end as subscribe from user u left join subscribe s on (u._id = s.user and s.subscribe ='$sub') where u._id='$user'
DECLARE @TempTable TABLE ( TableID int PRIMARY KEY IDENTITY, TokenId int ) Insert Into @TempTable Select tt.TokenId from XLBDataPoint tt where tt.TokenId= 1 DECLARE @RowCount INT SET @RowCount = (SELECT COUNT(*) FROM @TempTable ) (SELECT Top 1 t.TokenId + @RowCount FROM TokenData t Where t.TokenId+ @RowCount NOT in (select t2.TokenId FROM TokenData t2)
SELECT ItemID ,Price FROM ACTIVE UNION SELECT ItemID ,Price FROM ARCHIVE AA WHERE AA.ArchiveDate = (SELECT MAX(ArchiveDate) FROM ARCHIVE AA1 WHERE AA1.ItemID = AA.ItemID) AND NOT EXISTS (SELECT 1 FROM ACTIVE A WHERE A.ItemID = AA.ItemID)
with sqf as (SELECT * FROM PRODUCT A, PRODUCT_RELATION B WHERE A.ROW_ID = B.PROD_ID AND A.NAME = 'Zinc' ) select * from sqf where sqf.row_id not in (select x.row_id from sqf x where x.START_DATE < SYSDATE)
return "User Id=USER;Password=pass;Data Source=(DESCRIPTION=" + "(ADDRESS=(PROTOCOL=TCP)(HOST=14.12.7.20)(PORT=1139))" + "(CONNECT_DATA=(SID=QCTRP1)));Connection Timeout=60;";
SELECT COUNT(barcode) FROM table1 WHERE timestamp >= DATEADD(HOUR,18,CONVERT(VARCHAR(10), GETDATE(),110)) AND timestamp <= DATEADD(HOUR,6,CONVERT(VARCHAR(10), GETDATE()+1,110))
USERS(ID_USER, NAME, NICK, REGISTER_DATE) ITEMS(ID_ITEM, DESCRIPTION, PRICE) PURCHASES(ID_PURCHASE, ID_USER, ID_ITEM, PRICE, PURCHASE_DATE)
Update Table Set Reference = map.NewReference From ReferenceMap map Where reference = map.OldReference
SELECT * FROM Notification n LEFT OUTER JOIN Acknowledgment a ON a.parent_id = n.id WHERE (a.parent_id IS NULL OR a.status = @somevalue)
public string[] GetNames() { string[] names = Cache["names"] as string[]; if(names == null) //not in cache { names = DB.GetNames(); Cache["names"] = names; } return names; }
SELECT OBJECT_NAME(m.object_id), m.* FROM SYS.SQL_MODULES m WHERE m.definition like N'%INSERT INTO my_table_name%'
SELECT item, amount, price, bought, NULL sold, slot FROM Buying WHERE slot = 0 UNION SELECT item, amount, price, NULL bought, sold, slot FROM Selling WHERE slot = 0
my $rs1 = $rs->search({ foo => 'bar' }); my $rs2 = $rs->search({ baz => 'biff' }); for ($rs1->union($rs2)->all) { ... }
SELECT C.names FROM C INNER JOIN B ON C.B_ID = B.B_ID INNER JOIN A ON B.A_ID = A.A_ID WHERE A.A_ID = 3
insert into table_name (order, firstname, lastname, email, contacttypeid) values (1284480, 'joe'...);
select fc.* from fruits_cities fc where fc.cityId = (select max(CityId) from fruits_cities fc2 where fc2.fruit_id = fc.fruit_id );
select cust_id, date, row_number() over (partition by cust_id order by date) as assigned_value from table t;
... beginning of your query ... START WITH A.TREE_Name = 'MDA_GRN_KK' connect by nocycle prior A.TREE_NODE = A.PARENT_NODE_NAME
select inv_number from yourtable order by substring(inv_number, 5, 2), substring(inv_number, 1, 3)
SELECT param_value FROM user_stored_settings WHERE param_name = 'PLSQL_COMPILER_FLAGS' AND object_name = 'MY_PACKAGE';
adb shell
select * from Book as b where not exists ( select * from BookPage as bp where b.Id = bp.BookId and bp.Text is null )
var user_address= from _user in users select new userDetails{ userid=_user.userid, Address=(from _address in address where _user.userid=_address.userid select _address.:address ).ToList() };
SELECT * FROM user WHERE FIND_IN_SET('10', keywords) > 0 OR FIND_IN_SET('20', keywords) > 0
SELECT * FROM MYLINKEDSERVER.MYDATABASE.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Address'
WHERE (ProductLine = 'TVs' AND @ProductType = 1) OR (ProductLine IN ('Handsets', 'Mobiles') AND @ProductType = 2) OR (ProductLine = 'Books' AND @ProductType NOT IN (1, 2))
$query = $this->db->query('SELECT val FROM table')->result_array(); $array = array(); foreach ( $query as $key => $val ) { $temp = array_values($val); $array[] = $temp[0]; }
SELECT * FROM ( SELECT [TableName] = so.name, [RowCount] = MAX(si.rows) FROM sysobjects so, sysindexes si WHERE so.xtype = 'U' AND si.id = OBJECT_ID(so.name) GROUP BY so.name ) sub WHERE sub.[RowCount] = 0
select team, day, count(*) as numgames from ((select id, homeid as team, date(start_date) as day from t ) union all (select id, awayid as team, date(start_date) from t ) ) t group by team, day having numgames > 1;
DECLARE @Funding TABLE (FundingDetailID INT,FundingID INT, DetailDescription VARCHAR(50)) INSERT INTO @Funding VALUES (1,107,'Desc 1') INSERT INTO @Funding VALUES (1,107,'Desc 2') INSERT INTO @Funding VALUES (1,107,'Desc 3') SELECT CHAR (CAST (96+ROW_NUMBER() OVER (Order BY FundingDetailID) AS VARCHAR)) + ') ' + DetailDescription FROM @Funding ----------------------------------------------------- a) Desc 1 b) Desc 2 c) Desc 3
SELECT [Referer], Count([Referer]) as RefCount FROM [tblSequence] WHERE [Referer] IS NOT NULL AND [Referer] NOT LIKE @url AND siteID = 15 GROUP BY [Referer]
SELECT ch.name, date(msg.date_created), SUM(CASE WHEN msg.status = 'SENT' THEN 1 ELSE 0 END) as SENT, ... -- same for other statuses FROM message msg, channel ch WHERE msg.status !='TRANSFORMED' AND msg.channel_id = ch.id AND msg.date_created BETWEEN to_date('2015-01-10', 'YYYY-MM-DD') AND to_date('2015-01-11', 'YYYY-MM-DD') GROUP BY ch.name, date(msg.date_created);
> setVerboseShell(true) > db.testing.update({}, {$set: { deleteme: true }}, { multi:true }) Updated 100 existing record(s) in 1ms WriteResult({ "nMatched" : 100, "nUpserted" : 0, "nModified" : 100 }) > db.testing.remove({ deleteme:true }) Removed 100 record(s) in 1ms WriteResult({ "nRemoved" : 100 })
Total blocks of R = B(R) Total tuples in R = N(R) Total blocks of S = B(S) R X S is done.
SELECT comment_post_ID, count(like_ID) from (select distinct comment_post_ID,like_ID from comments_like cl , comments c where cl.comment_ID= c.comment_ID ) as iq group by comment_post_ID
UPDATE table_name SET new_value = (original_value * amount) WHERE new_value IS NULL
SELECT activeteams.divisionid, teams.teamname, res.wins FROM activeteams INNER JOIN teams ON activeteams.teamid = teams.teamid LEFT JOIN ( SELECT COALESCE(SUM(CASE WHEN result = 'w' THEN 1 ELSE 0 END ), 0) AS wins, teamid FROM results GROUP BY teamid ) res ON teams.teamid = res.teamid WHERE activeteams.divisionid = 1
Message.executeQuery('select count(m) from Message m where SIZE(m.body) < 25')
With maxCategories AS (select book_id, max(category_id) as category_id from BookCategory group by book_id) select Books.book_id, Books.Title, Categories.category_id, Categories.name from Books inner join maxCategories on (Books.book_id = maxCategories.book_id) inner join Categories on (Categories.category_id = maxCategories.category_id) where Books.title like '%treasure island%'
create table t as select * from raw_data; or insert into t (x,y,z) select x,y,z from raw_data;
select cast(cast([Percent] as decimal(9,2)) AS FLOAT) as [Percent]
Select Country, SUM([Number of Manager]) AS 'Number of Parts Staff/Manager', Count([Name]) AS 'Number of Test' From Test GROUP BY Country
WHERE client = $id AND ((isinvoiced = 0) OR (isinvoiced = 1 and isrecurring = 1))
SELECT * FROM (select user_id, prod_and_ts.product_id as product_id, regex_replace(prod_and_ts.timestamps, "#\\d*", "") as timestamps FROM table2 LATERAL VIEW explode(purchased_item) exploded_table as prod_and_ts) prod_and_ts;
SELECT WeekDate = Monday, DayDateMonday = MAX(CASE Day WHEN 'Monday' THEN DayDate END), TimeEntryMonday = MAX(CASE Day WHEN 'Monday' THEN TimeEntry END), TimeOutMonday = MAX(CASE Day WHEN 'Monday' THEN TimeOut END), RestMonday = MAX(CASE Day WHEN 'Monday' THEN Rest END), DayDateTuesday = MAX(CASE Day WHEN 'Tuesday' THEN DayDate END), TimeEntryTuesday = ... -- and so on FROM timetable GROUP BY Monday ;
select CASE when next_action_date between GETDATE() and GETDATE()+7 then 'Incoming' when next_action_date < GETDATE() THEN 'Overdue' else 'fine' end as Condition from( select GETDATE()+6 next_action_date )x
LOCK TABLE `categories` WRITE; SELECT @myLeft := `lft` FROM `categories` WHERE `id` = '. $where .'; UPDATE `categories` SET `rght` = `rght` + 2 WHERE `rght` > @myLeft; UPDATE `categories` SET `lft` = `lft` + 2 WHERE `lft` > @myLeft OR `lft` = @myLeft; INSERT INTO `categories`(`name`, `lft`, `rght`) VALUES("'. $name .'", @myLeft, @myLeft + 1); UNLOCK TABLES;
update WebCatalog.Published.DemoTracking set Purchased = 1 where Purchased = 0 and RCompanyLink in (select Link as RCompanyLink from WebCatalog.Published.RCompany where RC.Expiration >= GETDATE() and RC.DemoLicense = 0)
SELECT * from wp_posts where ID IN ( (SELECT post_id from wp_postmeta where meta_key='list_price' and meta_value BETWEEN 1 and 1229000 ) ) and id in (SELECT post_id from wp_postmeta where meta_key='weight' and meta_value BETWEEN 20 and 200 )
SELECT DATENAME(month, getdate()) + ' ' + DATENAME(year, getdate())
INSERT INTO BOOKING (CUSTOMER_CODE, BOOKING_DATE) SELECT CUSTOMER_CODE, $booking_date FROM CUSTOMER WHERE CUSTOMER.email=$email
Declare @vQuery nvarchar(max), @vWhereClasue varchar(500) SET @vQuery = 'Select top 7 col1,col2 ....col16 from ... where ' + @vWhereClasue exec sp_executesql @vQuery
UPDATE TimeRequestedTable INNER JOIN BlockTimesTable ON BlockTimesTable.EmpID = TimeRequestedTable.EmpID SET AppointTime = "inputed by user" WHERE AppointTime BETWEEN startTime and EndTime
SELECT (SELECT SUM(units) FROM stock_in WHERE itemid = 7) - (SELECT SUM(units) FROM stock_out WHERE itemid = 7) AS difference;
CREATE OR REPLACE FUNCTION updateTsvector () RETURNS void AS $$ UPDATE acrticles_pl_vector SET locale = 'pl', vector = to_tsvector('polish', ot.title || ot.content FROM otherTable ot WHERE id = ot.id; $$ LANGUAGE sql;
CREATE TABLE sizes ( name ENUM('small', 'medium', 'large') );
SELECT CodeField, COUNT(CodeField) FROM table GROUP BY CodeField HAVING COUNT(CodeField) < 12
/Whatever/*//*[empty(.//text() | .//attribute())]
;WITH Top10Distinct AS ( SELECT DISTINCT TOP 10 YourColumn FROM dbo.YourTable ORDER BY YourColumn DESC ) SELECT * FROM dbo.YourTable tbl INNER JOIN Top10Distinct cte ON tbl.YourColumn = cte.YourColumn
ALTER TABLE sales CHECK CONSTRAINT ALL;
SELECT m1.ModeName, m2.ModeName, m3.ModeName, m4.ModeName, m5.ModeName FROM Modes m LEFT JOIN Ref m1 on m1.ModeID = m.Mode1 LEFT JOIN Ref m2 on m2.ModeID = m.Mode2 LEFT JOIN Ref m3 on m3.ModeID = m.Mode3 LEFT JOIN Ref m4 on m4.ModeID = m.Mode4 LEFT JOIN Ref m5 on m5.ModeID = m.Mode5
SELECT SLEEP(600);
ALTER TABLE foo ADD COLUMN tempbar text; UPDATE foo SET tempbar = cast(cast(bar as varchar) as text); ALTER TABLE foo DROP COLUMN bar; ALTER TABLE foo ADD COLUMN bar text; UPDATE foo SET bar = tempbar; ALTER TABLE foo DROP COLUMN tempbar;
update Mytable set Sal=1.05*sal where departmentId=xxx
SELECT a.datatime , sum(case when a.tagname = 'grp1_tagA' then a.interesting else NULL end) as tagA , sum(case when a.tagname = 'grp1_tagB' then a.interesting else NULL end) as tagB , sum(case when a.tagname = 'grp1_tagC' then a.interesting else NULL end) as tagC FROM everything AS a WHERE a.datatime >= '2013-12-04' GROUP BY a.datatime ;
select s.s_id, p.p_id, count(d.Did_Something) as Count_D_Did_Something, -- nulls won't be counted sum(CASE WHEN d.Did_Something = 1 THEN 1 ELSE 0 END) as Count_D_Did_Something_is_one from Soknad as s left join Prognose as p on p.P_S_ID = s.s_id left join Did as d on d.D_S_ID = s.s_id
select id , sum(octSecAndthrd1 + octSecAndthrd2 + octSecAndthrd3 + octSecAndthrd4) col1 , sum(octSecAndthrd5 + octSecAndthrd6 + octSecAndthrd7 + octSecAndthrd8) col2 from ...
IF EXISTS(SELECT * FROM YourTable)
SELECT * FROM team_by_membre WHERE id_team IN ( SELECT id_team FROM team_by_membre WHERE id_membre = ? AND level = 1 );
WITH Base AS ( SELECT ROW_NUMBER() OVER (ORDER BY [Count] DESC) RowNum, [Dept], [Count] FROM SR ) SELECT SR.Dept, SR.Count, SUM(SR2.[Count]) Total FROM Base SR INNER JOIN Base SR2 ON SR2.RowNum <= SR.RowNum GROUP BY SR.Dept, SR.Count ORDER BY SR.[Count] DESC
;with cte as(select *, row_number() over(partition by studentid, songid order by solutiondate, solutiontime) rn from tablename) select studentid, songid, max(case when rn = 1 then solutiontime end) as timea, max(case when rn = 2 then solutiontime end) as timeb, max(case when rn = 3 then solutiontime end) as timec from cte group by studentid, songid
CREATE TABLE PATIENT_ACCOUNT ( ID NUMBER , PATIENT_ID NUMBER , ACCOUNT_ID NUMBER ); INSERT INTO PATIENT_ACCOUNT VALUES(1, 11, 22); UPDATE PATIENT_ACCOUNT SET PATIENT_ID = 1 AND ACCOUNT_ID = 2 WHERE ID = 3; -- ORA-00933: SQL command not properly ended UPDATE PATIENT_ACCOUNT SET PATIENT_ID = 33 , ACCOUNT_ID = 44 WHERE ID = 1; -- 1 rows updated.
SELECT DATE_FORMAT(Date, '%Y-%m-%d') AS Timestamp, AVG(value) FROM abc GROUP BY DATE(Date)
Update c Set pid = Case When course_name = ? Then ? Else pid End
Select [...], request.Id From [Action] inner join [other tables on ...] inner join Person on Action.PersonId = Person.Id left JOIN request as r on r.PersonId = Person.Id left JOIN Subject as s on s.SubjectId = r.SubjectId left JOIN TypeRequest tr on tr.IDSujet = s.SubjectId **and typeRequest = 'MOVE'** Where ([already existing conditions])
alter table t1 drop FOREIGN KEY FKA126572FF5D5DSE; ALTER TABLE t1 DROP INDEX FKA126572FF5D5DSE;
with cte as ( SELECT Product.ID, Product.No FROM Product WITH(NOLOCK) WHERE Product.Type = 1 ) SELECT ID FROM cte WHERE No = '123456789' UNION SELECT Description.ID FROM Description WITH(NOLOCK) WHERE Description.Opis LIKE '%hello%' AND Description.ID IN (SELECT ID from cte)
DELETE o FROM orders o WHERE date_received <= date_sub(current_date, interval 2 day) and status = 0;
select regexp_replace('..agsb', '^(\.+)([^. ])', '\1 \2') as output from dual;
select Nom from tab where ( libelle != '' and ( Nom like Nom1 or Nom like Nom2 ) ) or ( libelle = '' and Nom like Nom3 )
select user_name, id, min(status), sum (calls) from yourtable where status in ('BadAD', 'Lead', 'DNC') group by user_name, id
Adapt the code Private Sub Command_Click() Dim top_num As Long Dim SQL As String top_num = Top_number.Value sSQL = _ "SELECT week, SUM(price1/price2 * turnover)/SUM(turnover) AS [PriceIndex]" & _ "FROM Table1 AS F INNER JOIN TopTable AS T ON F.code=T.code" & _ "WHERE F.code IN ( " & _ "***SELECT TOP " & top_num & " code" & _ "FROM TopTable)" & _ "GROUP BY week;" ' Add This : Me!subform1.Form.RecordSource = sSQL End Sub
- (BOOL)modelChanged { NSError *error; NSURL * sourceURL = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@"db.sqlite"]; NSDictionary *sourceMetadata = [NSPersistentStoreCoordinator metadataForPersistentStoreOfType:NSSQLiteStoreType URL:sourceURL error:&error]; BOOL isCompatible = [[self managedObjectModel] isConfiguration:nil compatibleWithStoreMetadata:sourceMetadata]; return isCompatible; }
SELECT m.Id, m.column1, CASE WHEN s.Id IS NULL THEN 'Not Exists' WHEN s.column2 IS NULL THEN 'Null Value' ELSE s.column2 END AS column2 FROM mainTable AS m LEFT JOIN secondTable As s ON s.Id = m.Id ;
select sum(price*quantity) as yoursum from yourtable
Insert into Server2.Database2.dbo.MapTable1 select * from table1
SELECT t1.* FROM YourTable t1 JOIN (SELECT MIN(Col1) AS FirstId FROM YourTable GROUP BY Col2) x ON t1.Col1 = x.FirstId
SELECT FirstName, LastName, r.Email, min(ListingID) as ListingID, ListingFirmID FROM sancap_Residential_Property e JOIN sancap_Agent r ON e.ListingAgentID = r.AgentID JOIN sancap_Office d ON e.ListingFirmID = d.firmID WHERE ListingFirmID != 'BrokerC' GROUP BY FirstName, LastName, r.Email, ListingFirmID
on a.userid = n.userid
select mprev.hips - m.hips as hips, mprev.wrist - m.wrist as wrist, mprev.abs - m.abs as abs, mprev.weight - m.weight as weight from measurements m join measurements mprev on me.week = mprev.week + 1;
CREATE TRIGGER upd_check BEFORE UPDATE ON account FOR EACH ROW BEGIN IF NEW.amount is NULL THEN SET NEW.item = 0; END IF; END;
SELECT a.question_id, a.level, COUNT(a.question_id) AS rank, SUM(SELECT(rank)) AS total FROM logs AS a, question AS b WHERE a.question_id = b.q_id AND a.level = '2' GROUP BY a.question_id ORDER BY rank DESC
CREATE TRIGGER myPostsTrigger AFTER INSERT ON posts FOR EACH ROW BEGIN UPDATE categories SET count = count + 1 WHERE id = NEW.category_id END
C:\>sqlplus sys@\"localhost:1521/orcl12\" as sysdba SQL*Plus: Release 12.1.0.2.0 Production on Fri Sep 18 13:10:19 2015 Copyright (c) 1982, 2014, Oracle. All rights reserved. Enter password: Connected to: Oracle Database 12c Enterprise Edition Release 12.1.0.2.0 - 64bit Production With the Partitioning, OLAP, Advanced Analytics and Real Application Testing options SQL>
public DbSet<art> arts { get; set; }
DECLARE @sql NVARCHAR(max)='SELECT ' DECLARE @TableName NVARCHAR(max) = 'Table_Name' -- <-- Set the target table name here SELECT @sql=@sql+N'ISNULL(CAST(' + name +' as NVARCHAR(max)), '''')+'',''+' FROM sys.columns WHERE object_id=OBJECT_ID(@TableName) SELECT @sql=SUBSTRING(@sql,1,LEN(@sql)-5)+N' FROM ' + @TableName --SELECT @sql -- uncomment to see the query string EXEC sp_executesql @sql
CREATE VIEW balance_amount AS SELECT la.creditid, la.credit_type, amount - COALESCE(SUM(pay),0) balance FROM loan_amount la LEFT JOIN pay_the_loan pl ON la.creditid = pl.creditid AND la.credit_type = pl.credit_type AND pl.status = 'OK' GROUP BY la.creditid, la.credit_type, la.amount;
update patient set security_level = '2' where security_level = '1';
SELECT c.cust_id, nvl2( q.tel_no, null, c.tel_no ) tel_no, nvl2( q.email, null, c.email ) email FROM contact_data c LEFT JOIN ( SELECT cust_id, min(case channel when 'tel_no' then 1 end) tel_no, min(case channel when 'email' then 1 end) email FROM opt GROUP BY cust_id ) q ON c.cust_id = q.cust_id ORDER BY c.cust_id
INSERT INTO @MyTableVar(id, EmployeeId) SELECT id, EmployeeId FROM ( MERGE dbo.target TGT USING dbo.source SRC ON TGT.employee = SRC.employee WHEN NOT MATCHED THEN INSERT (employee) VALUES (src.employee) OUTPUT inserted.id, SRC.EmployeeId) AS out(id, EmployeeId);;
select tab.name, col.name, typ.name, col.max_length, * from sys.columns col join sys.tables tab on col.object_id = tab.object_id join sys.types typ on col.system_type_id = typ.system_type_id where tab.name = 'Test'
SELECT * FROM ( (SELECT name, 'man' as source FROM man) UNION ALL (SELECT name, 'woman' FROM woman ) ) AS my_table ORDER BY name
WITH temp AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY name) AS 'RowNumber' FROM sometable ) SELECT * FROM temp WHERE RowNumber BETWEEN 40 AND 60
SELECT STATE, SUM(Point) AS MEDAL, SUM(CASE WHEN Point = 7 THEN 1 ELSE 0 END) AS GoldCount, SUM(CASE WHEN Point = 5 THEN 1 ELSE 0 END) AS SilverCount, SUM(CASE WHEN Point = 4 THEN 1 ELSE 0 END) AS BronzeCount FROM [Sheet2$] GROUP BY STATE ORDER BY SUM(Point) DESC
REPLACE INTO `cf_cal_events`(`model_id`) SELECT `id` FROM `cal_events_`
CREATE SEQUENCE myid_seq; ALTER TABLE mytable ADD COLUMN myid bigint NOT NULL DEFAULT nextval('myid_seq');
select min(pk), a, b, c from @dummy group by a, b, c
and a.day = trim(to_char(A.PRESENTATIONDATESTART+delta, 'Day'))
SELECT (CASE WHEN password = 'WrittenPassword' THEN 1 ELSE 0 END) AS is_equal FROM users WHERE username = 'someuser'
select substr(table.column,1,1) from table order by table.column
JOIN conf_log t ON x.date_changed = t.date_changed And x.Order_Number = t.Order_number
select * from TABLE1 MS JOIN TABLE2 TM ON MS.CID = TM.CID JOIN (SELECT TA.*, ROW_NUMBER() OVER (PARTITION BY EID ORDER BY STATUS DESC) as seqnum FROM TABLE3 TA ) TA ON TM.EID = TA.EID AND seqnum = 1;
Select sales_ref_no, STUFF(( SELECT ' | ' + B.Description FROM YOUR_TABLE B WHERE (B.sales_ref_no = A.sales_ref_no) FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,'') AS Description From YOUR_TABLE A Group By sales_ref_no
(@shift = 'Nights' AND DATEPART(hh,[PostingDate]) NOT BETWEEN 6 and 17) or (@shift = 'Days' AND DATEPART(hh,[PostingDate]) BETWEEN 6 and 17)
select case when date '2010-12-05' between range1_from and range1_to then range1_rate when date '2010-12-05' between range2_from and range2_to then range2_rate when date '2010-12-05' between range3_from and range3_to then range3_rate end as rate from events where date '2010-12-05' between range1_from and range1_to or date '2010-12-05' between range2_from and range2_to or date '2010-12-05' between range3_from and range3_to;
1 1 1 2 1 3 2 1 2 2 2 3 3 1 3 2 3 3
SELECT * FROM Customer c WHERE NOT EXISTS( SELECT 1 FROM GroupCustomer WHERE CustomerID = c.CustomerID AND GroupID = @selectedGroupParameter )
insert ignore into table2 (description) select t.description from table1 t join ( select distinct description from table1 ) t1 on (t.description=t1.description);
SELECT dbo.Clients.Town AS Town, count(*) AS wkTotal, sum(CASE WHEN datepart(dayofyear, status_date) = DATEPART(dayofyear, getdate()) THEN 1 ELSE 0 END) AS dayTotal FROM dbo.Clients WHERE dbo.Clients.Status LIKE 'Status 1%' AND datepart(week, GETDATE()) = datepart(week, dbo.Clients.Status_date) AND YEAR(GETDATE())= YEAR(dbo.Clients.Status_date) GROUP BY dbo.Clients.Town ORDER BY dbo.Clients.Town
tmpCol.query(Tablename, columns, "WHERE Clause LIMIT xx OFFSET yy", selectionArgs[], having, orderBy);
select distinct Inbound.* from Inbound inner join Rules on Inbound.campaign_id = Rules.campaign_id where -- or adding these conditions to the INNER JOIN would be the same Inbound.Entry_status = Rules.Entry_status and Inbound.Error_code = Rules.Error_code;
select round(123.456, 2, 1)
SELECT dc.content, dc.state FROM destination_content dc INNER JOIN properties p ON ( dc.state = p.state AND dc.content = p.content ) WHERE p.active = 1
WHERE dbo.[Order].WebsiteID IN (1, 2, 8, 12) AND dbo.[Order].OrderStatusID = 1 AND OrderDate >= DateAdd(Hour, DateDiff(Hour, 0, GetDate())-12, 0) AND OrderDate < DateAdd(Hour, DateDiff(Hour, 0, GetDate())-11, 0)
DECLARE @XML XML = ' <reservation> <reservationNo>9833591189</reservationNo> <securityCode>ad4badfd56</securityCode></reservation>' SELECT reservationNo = Events.value('(reservationNo)[1]', 'varchar(100)'), securityCode = Events.value('(securityCode)[1]', 'varchar(100)') FROM @XML.nodes('/reservation') AS XTbl(Events)
WITH RECURSIVE tree (id, par, name) AS ( SELECT id, par, name FROM the_table WHERE name = 'Nicole' UNION ALL SELECT id, par, name FROM the_table tt JOIN tree tr ON tr.id = tt.par ) SELECT * FROM tree
SELECT item, count(*) as num_rows, sum(quantity > 20) as count_over_20, sum(quantity <= 20) count_20_or_lower FROM Sales GROUP BY item;
>>ssh user@your_website.com >>Enter password: your_password >>mysqldump -u [uname] -p[pass] [dbname] > [backupfile.sql]
SELECT `user` FROM tablename WHERE `option` in ('A', 'D') GROUP BY `user` HAVING COUNT(DISTINCT `option`) = 2;
