import numpy as np import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_subplot(111) ax.quiver((0,0), (0,0), (1,0), (1,3), units = 'xy', scale = 1) plt.axis('equal') plt.xticks(range(-5,6)) plt.yticks(range(-5,6)) plt.grid() plt.show()
from twisted.python import log from twisted.internet import interfaces from zope.interface import implements class FTPFile(object): """ A consumer for FTP input that writes data to a file. @ivar filename: a filename to be opened for writing. """ implements(interfaces.IProtocol) def __init__(self, filename): self.fObj = None self.filename = filename def makeConnection(self,transport) self.fObj = open(self.filename,'wb') log.info('Opened %s for writing' % self.filename) def connectionLost(self,reason): self.fObj.close() log.info('Closed %s' % self.filename) def dataReceived(self, bytes): self.fObj.write(bytes)
from collections import Counter def isValidWord(word, hand, wordList): # Check for membership first and early out if fails # Otherwise, see if the count of any letter in word exceeds that of the hand return word in wordList and all(hand.get(let, -1) >= cnt for let, cnt in Counter(word).items())
new_data = data.filter(lambda x: x[1][0] == "ABC")
from collections import OrderedDict anyname = OrderedDict()
from numba import jit @jit(nopython=True) def interpolate_numba(arr, no_data=-32768): """return array interpolated along time-axis to fill missing values""" result = np.zeros_like(arr, dtype=np.int16) for x in range(arr.shape[2]): # slice along x axis for y in range(arr.shape[1]): # slice along y axis for z in range(arr.shape[0]): value = arr[z,y,x] if z == 0: # don't interpolate first value new_value = value elif z == len(arr[:,0,0])-1: # don't interpolate last value new_value = value elif value == no_data: # interpolate left = arr[z-1,y,x] right = arr[z+1,y,x] # look for valid neighbours if left != no_data and right != no_data: # left and right are valid new_value = (left + right) / 2 elif left == no_data and z == 1: # boundary condition left new_value = value elif right == no_data and z == len(arr[:,0,0])-2: # boundary condition right new_value = value elif left == no_data and right != no_data: # take second neighbour to the left more_left = arr[z-2,y,x] if more_left == no_data: new_value = value else: new_value = (more_left + right) / 2 elif left != no_data and right == no_data: # take second neighbour to the right more_right = arr[z+2,y,x] if more_right == no_data: new_value = value else: new_value = (more_right + left) / 2 elif left == no_data and right == no_data: # take second neighbour on both sides more_left = arr[z-2,y,x] more_right = arr[z+2,y,x] if more_left != no_data and more_right != no_data: new_value = (more_left + more_right) / 2 else: new_value = value else: new_value = value else: new_value = value result[z,y,x] = int(new_value) return result
from lxml import etree contacts = etree.parse(open("1234.xml")) for c in contacts.xpath('//contact'): if c.xpath('/name')[0].text == 'Johnny Appleseed': c.xpath('/phone')[0].text = NEW_PHONE_NUMBER print >> open("1234.xml", "w"), etree.tostring(contacts)
import Tkinter as tk root = tk.Tk() def clicked(event): var.set('Clicked the button') def released(event): var.set('Released the button') var = tk.StringVar() var.set('Nothing to see here') label = tk.Label(root, textvar=var) label.pack() but = tk.Button(root, text='Button') but.bind("<Button-1>", clicked) but.bind("<ButtonRelease-1>", released) but.pack() root.mainloop()
"((\s|^)#[A-Z']+\b)"
import argparse import sys import copy import os def split_list(lst,condition): current=[] out=[current] for arg in lst: current.append(arg) if(condition(arg)): current=[] out.append(current) return out parser=argparse.ArgumentParser() parser.add_argument('-m',action='store') parser.add_argument('-r',default='0',action='store') #pieces=split_list(sys.argv[1:],os.path.isfile) pieces=split_list(sys.argv[1:],lambda x: x in ('foo','bar','baz','quux')) options={} #use collections.OrderedDict if order matters -- or some more suitable data structure. default=argparse.Namespace() for args in pieces: if(not args): continue ns=copy.deepcopy(default) default=parser.parse_args(args[:-1],namespace=ns) options[args[-1]]=default print (options)
from commands.shVersionCmd import shVersionCmd from commands.shVRFCmd import shVRFCmd # An explicit list of allowed commands to prevent malicious activity. commands = ['shVersionCmd', 'shVRFCmd'] def CommandFactory(commandnode): cmd = commandnode.attrib['name'] if cmd in commands: fn = globals()[cmd] fn(commandnode)
[report] exclude_lines = if __name__ == .__main__.:
df.groupby('product').apply(lambda x: np.std(x) / np.mean(x))
number &= ~0xf
t1, t2 = datetime.time(...), datetime.time(...) t1_ms = (t1.hour*60*60 + t1.minute*60 + t1.second)*1000 + t1.microsecond t2_ms = (t2.hour*60*60 + t2.minute*60 + t2.second)*1000 + t2.microsecond delta_ms = max([t1_ms, t2_ms]) - min([t1_ms, t2_ms])
from google.appengine.api import images ... @register.simple_tag def media_file_url(file_obj): try: return images.get_serving_url(file_obj.file.blobstore_info) except: return None
>>> bla = re.compile(u'^[A-Za-z]{5}\d{6}$') >>> bla.match('abcde123456').group() 'abcde123456'
class DeudaForm(forms.ModelForm): class Meta: model = Deuda exclude = ('propietario',) def __init__(self, propietario): forms.ModelForm.__init__(self) self.fields['adeudado'].queryset = User.objects.exclude(pk=d.propietario.pk)
import scipy as sp import scipy.integrate xp = sp.linspace(0, 1000, 1000) yp = sp.randn(1000) datafunc = lambda x: sp.interp(x, xp, yp) sp.integrate.quad(datafunc, 3, 1000)
# run your simulation like usual runSimulation() #create a ordered grid of axes, not one in top of the others axcolor = 'lightgoldenrodyellow' fig = p.figure() axdata = p.subplot2grid((7,4),(0,0),colspan=4,rowspan=4) axpos = p.subplot2grid((7,4),(-2,0),colspan=4, axisbg=axcolor) axvel = p.subplot2grid((7,4),(-1,0),colspan=4, axisbg=axcolor) # create your plots in the global space. # you are going to reference these lines, so you need to make them visible # to the update functione, instead of creating them inside a function # (and thus losing them at the end of the function) x = range(width) lpos, = axdata.plot(x,yPosition,'r') lvel, = axdata.plot(x,yVelocity,'g') ltarget, = axdata.plot(x,yTarget,'k') lforce, = axdata.plot(x,yForce,'b') # same as usual spos = Slider(axpos, 'Position Gain', 1.0, 20.0, valinit=1.5) svel = Slider(axvel, 'Velocity Gain', 5.0, 500.0, valinit=60.0) def update(val): # you don't need to declare the variables global, as if you don't # assign a value to them python will recognize them as global # without problem runSimulation(round(spos.val,2),round(svel.val,2)) lpos.set_ydata(yPosition) lvel.set_ydata(yVelocity) ltarget.set_ydata(yTarget) lforce.set_ydata(yForce) # you need to update only the canvas of the figure fig.canvas.draw() spos.on_changed(update) svel.on_changed(update) p.show()
x=np.arange(0.1,1.1,0.1) array([ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ]) # Bin size bins = np.arange(0.05, 1.15, 0.1) np.histogram(x,bins=bins,normed=1)[0] [ 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.] np.histogram(x,bins=bins,normed=0)[0]/float(len(x)) [ 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1] # Change the bin size bins = np.arange(0.05, 1.15, 0.2) np.histogram(x,bins=bins,normed=1)[0] [ 1., 1., 1., 1., 1.] np.histogram(x,bins=bins,normed=0)[0]/float(len(x)) [ 0.2, 0.2, 0.2, 0.2, 0.2]
>>> dct = {'pasta': [1,2,3]} >>> x = 'pas' + 'ta' >>> dct[x] [1, 2, 3]
{% load i18n %} <div class="inline-group"> <div class="tabular inline-related {% if forloop.last %}last-related{% endif %}"> {{ inline_admin_formset.formset.management_form }} <fieldset class="module"> <h2>{{ inline_admin_formset.opts.verbose_name_plural|capfirst }}</h2> {{ inline_admin_formset.formset.non_form_errors }} <table> <thead><tr> {% for field in inline_admin_formset.fields %} {% if not field.is_hidden %} <th {% if forloop.first %}colspan="2"{% endif %}>{{ field.label|capfirst }}</th> {% endif %} {% endfor %} {% if inline_admin_formset.formset.can_delete %}<th>{% trans "Delete?" %}</th>{% endif %} </tr></thead> <tbody> {% for inline_admin_form in inline_admin_formset %} {% if not inline_admin_form.original %} {% if inline_admin_form.form.non_field_errors %} <tr><td colspan="{{ inline_admin_form.field_count }}">{{ inline_admin_form.form.non_field_errors }}</td></tr> {% endif %} <tr class="{% cycle row1,row2 %} {% if inline_admin_form.original or inline_admin_form.show_url %}has_original{% endif %}"> <td class="original"> {% if inline_admin_form.original or inline_admin_form.show_url %}<p> {% if inline_admin_form.original %} {{ inline_admin_form.original }}{% endif %} {% if inline_admin_form.show_url %}<a href="../../../r/{{ inline_admin_form.original_content_type_id }}/{{ inline_admin_form.original.id }}/">{% trans "View on site" %}</a>{% endif %} </p>{% endif %} {% if inline_admin_form.has_auto_field %}{{ inline_admin_form.pk_field.field }}{% endif %} {{ inline_admin_form.fk_field.field }} {% spaceless %} {% for fieldset in inline_admin_form %} {% for line in fieldset %} {% for field in line %} {% if field.is_hidden %} {{ field.field }} {% endif %} {% endfor %} {% endfor %} {% endfor %} {% endspaceless %} </td> {% for fieldset in inline_admin_form %} {% for line in fieldset %} {% for field in line %} <td class="{{ field.field.name }}"> {{ field.field.errors.as_ul }} {{ field.field }} </td> {% endfor %} {% endfor %} {% endfor %} {% if inline_admin_formset.formset.can_delete %} <td class="delete">{% if inline_admin_form.original %}{{ inline_admin_form.deletion_field.field }}{% endif %}</td> {% endif %} </tr> {% endif %} {% endfor %} </tbody> </table> </fieldset> </div> {# <ul class="tools"> #} {# <li><a class="add" href="">Add another {{ inline_admin_formset.opts.verbose_name|title }}</a></li> #} {# </ul> #} </div>
if "screen" in y or "display" in y or "crack" in y or "smash" in y
auth = tweepy.AppAuthHandler(token, secret) api = tweepy.API(auth)
vel = [4, 3] lst = [[4, 5] # changed this identifier. Don't shadow Python built-ins [6, 4] [7, 5] [3, 4]] lst = [[vel[0]+sublst[0], vel[1]+sublst[1]] for sublst in lst]
strings = ["and","the","woah"] #Get a null set to be filled in new = ["" for x in range(max([len(m) for m in strings]))] #Cycle through new list for index,item in enumerate(new): for w in strings: try: item += w[index] new[index] = item except IndexError,err: pass print new
In [136]: df = pd.DataFrame({'a':['asdas','asdasdsadas','123124'],'b':['554653645','546456453634','uyiyasdhnfjnas']}) df Out[136]: a b 0 asdas 554653645 1 asdasdsadas 546456453634 2 123124 uyiyasdhnfjnas In [138]: df.apply(lambda x: x.str[:4]) Out[138]: a b 0 asda 5546 1 asda 5464 2 1231 uyiy
# my_spider.py class MySpider(CrawlSpider): name = 'my_spider' ... def parse(self, response): x = HtmlXPathSelector(response) headings = x.select('//h2/text()').extract() for h in headings: item = MyDjangoItem() item['name'] = h yield item url = 'http://example.com/next' # I have custom rules for constructing (not extracting) next url yield Request(url, callback=self.parse)
words = [ "happy", "sad", "good", "bad"] for word in words: if ("happy" in word.lower()): print "yes"
from collections import defaultdict hash = defaultdict(dict) hash[1][2] = 1
#!/bin/bash export PYTHONSTARTUP="$1" # Set the startup script python will run when it start. shift # Remove the first argument, don't want to pass that. python manage.py shell "$@" # Run manage.py with the startup script.
class CTabWidget(QTabWidget): def __init__(self, parent=None): super(CTabWidget, self).__init__(parent) self.tabBar = CTabBar(self) self.setTabBar(self.tabBar) self.setTabPosition(QTabWidget.West) self.tab1 = QWidget(self) self.tab2 = QWidget(self) self.addTab(self.tab1, "Foo") self.addTab(self.tab2, "Bar") class CTabBar(QTabBar): def __init__(self, parent=None): super(CTabBar, self).__init__(parent) self.setMovable(True) def mouseDoubleClickEvent(self, event): print "Change name"
uif = "images/userGray.png" bif = "images/bg.jpg" cif = "images/chair3.png" i = 0 playerX = 1 playerY = 1 pX = 1 pY = 1 bX = 0 bY = 0 moveX = 0 moveY = 0 windowX = 640 windowY = 480 lowerY = 1024 lowerX = 1024 bullets = [] x = 0 y = 0 rotate = False objects = [] objects.append([256,260,410,511]) import pygame, sys from pygame.locals import * pygame.init() screen = pygame.display.set_mode((640,480),0,32) background = pygame.image.load(bif).convert() user = pygame.image.load(uif).convert_alpha() chair = pygame.image.load(cif).convert_alpha() chair1 = pygame.image.load(cif).convert_alpha() pygame.time.set_timer(USEREVENT + 1, 100) def shoot(inLoc, clLoc, weapon): bulletId = len(bullets) bullets[bulletId] = [inLoc, clLoc, 200, 3] moveSpeed = .1 while True: for event in pygame.event.get(): if event.type == QUIT: pygame.quit() sys.exit() if event.type == USEREVENT + 1: rotate = True; if event.type == KEYDOWN: if event.key == K_LEFT or event.key == K_a: moveX = -1*moveSpeed elif event.key == K_RIGHT or event.key == K_d: moveX = moveSpeed if event.key == K_DOWN or event.key == K_s: moveY = moveSpeed elif event.key == K_UP or event.key == K_w: moveY = -1*moveSpeed if event.type == KEYUP: if event.key == K_LEFT or event.key == K_a or event.key == K_RIGHT or event.key == K_d: moveX = 0 if event.key == K_DOWN or event.key == K_s or event.key == K_UP or event.key == K_w: moveY = 0 dontMoveX = 0 dontMoveY = 0 for obj in objects: if playerX + moveX > obj[0]-user.get_width() and playerX + moveX < obj[1] and playerY + moveY > obj[2]-user.get_height() and playerY + moveY < obj[3]: if playerY + moveY == obj[2]-user.get_height()-1 or playerY + moveY == obj[3]+1: dontMoveX = 0 else: dontMoveX = 1 if playerX + moveX > obj[0]-user.get_width() and playerX + moveX < obj[1] and playerY + moveY > obj[2]-user.get_height() and playerY + moveY < obj[3]: if playerX + moveX == obj[0]-user.get_width()-1 or playerX + moveX == obj[1]+1: dontMoveY = 0 else: dontMoveY = 1 if dontMoveX == 0: playerX += moveX if (playerX >= 0 and playerX <= windowX/2) or (playerX >= lowerX-(windowX/2) and playerX <= lowerX-user.get_width()): pX+=moveX if playerX > windowX/2 and playerX < lowerX-(windowX/2): bX+=-1*moveX if dontMoveY == 0: playerY += moveY if (playerY >= 0 and playerY <= windowY/2) or (playerY >= lowerY-(windowY/2) and playerY <= lowerY-user.get_width()): pY+=moveY if playerY > windowY/2 and playerY < lowerY-(windowY/2): bY+=-1*moveY screen.blit(background,(bX,bY)) screen.blit(user,(pX,pY)) pygame.mouse.set_visible(False); if rotate == True: if i < 360: i = i + 18 else: i = 0 orig_chair_rect = chair.get_rect() chair1 = pygame.transform.rotate(chair, i); rot_chair_rect = orig_chair_rect.copy() rot_chair_rect.center = chair1.get_rect().center chair1 = chair1.subsurface(rot_chair_rect).copy() rotate = False x,y = pygame.mouse.get_pos() x -= chair.get_width()/2 y -= chair.get_height()/2 screen.blit(chair1,(x,y)) pygame.display.update()
import ProtoText print person_obj['name'] # print out the person_obj.name person_obj['name'] = 'David' # set the attribute 'name' to 'David' # again set the attribute 'name' to 'David' but in batch mode person_obj.update({'name': 'David'}) print ('name' in person_obj) # print whether the 'name' attribute is set in person_obj # the 'in' operator is better than the google implementation HasField function # in the sense that it won't raise Exception even if the field is not defined
In [14]: var1, var2, var3 = (int(i) for i in a) In [15]: var1, var2, var3 Out[15]: (32132, 654654, 89765464)
seen = dict() for row in data: n = seen.setdefault(row[0], 0) if n < 2: print row seen[row[0]] += 1
>>> my_list = [1,2,3,4,5] >>> my_set = {*my_list} >>> my_set {1, 2, 3, 4, 5}
import numpy from scipy.signal import fftconvolve def ssim(im1, im2, window, k=(0.01, 0.03), l=255): """See https://ece.uwaterloo.ca/~z70wang/research/ssim/""" # Check if the window is smaller than the images. for a, b in zip(window.shape, im1.shape): if a > b: return None, None # Values in k must be positive according to the base implementation. for ki in k: if ki < 0: return None, None c1 = (k[0] * l) ** 2 c2 = (k[1] * l) ** 2 window = window/numpy.sum(window) mu1 = fftconvolve(im1, window, mode='valid') mu2 = fftconvolve(im2, window, mode='valid') mu1_sq = mu1 * mu1 mu2_sq = mu2 * mu2 mu1_mu2 = mu1 * mu2 sigma1_sq = fftconvolve(im1 * im1, window, mode='valid') - mu1_sq sigma2_sq = fftconvolve(im2 * im2, window, mode='valid') - mu2_sq sigma12 = fftconvolve(im1 * im2, window, mode='valid') - mu1_mu2 if c1 > 0 and c2 > 0: num = (2 * mu1_mu2 + c1) * (2 * sigma12 + c2) den = (mu1_sq + mu2_sq + c1) * (sigma1_sq + sigma2_sq + c2) ssim_map = num / den else: num1 = 2 * mu1_mu2 + c1 num2 = 2 * sigma12 + c2 den1 = mu1_sq + mu2_sq + c1 den2 = sigma1_sq + sigma2_sq + c2 ssim_map = numpy.ones(numpy.shape(mu1)) index = (den1 * den2) > 0 ssim_map[index] = (num1[index] * num2[index]) / (den1[index] * den2[index]) index = (den1 != 0) & (den2 == 0) ssim_map[index] = num1[index] / den1[index] mssim = ssim_map.mean() return mssim, ssim_map def nrmse(im1, im2): a, b = im1.shape rmse = numpy.sqrt(numpy.sum((im2 - im1) ** 2) / float(a * b)) max_val = max(numpy.max(im1), numpy.max(im2)) min_val = min(numpy.min(im1), numpy.min(im2)) return 1 - (rmse / (max_val - min_val)) if __name__ == "__main__": import sys from scipy.signal import gaussian from PIL import Image img1 = Image.open(sys.argv[1]) img2 = Image.open(sys.argv[2]) if img1.size != img2.size: print "Error: images size differ" raise SystemExit # Create a 2d gaussian for the window parameter win = numpy.array([gaussian(11, 1.5)]) win2d = win * (win.T) num_metrics = 2 sim_index = [2 for _ in xrange(num_metrics)] for band1, band2 in zip(img1.split(), img2.split()): b1 = numpy.asarray(band1, dtype=numpy.double) b2 = numpy.asarray(band2, dtype=numpy.double) # SSIM res, smap = ssim(b1, b2, win2d) m = [res, nrmse(b1, b2)] for i in xrange(num_metrics): sim_index[i] = min(m[i], sim_index[i]) print "Result:", sim_index
outp = fun()
>>> time = datetime.datetime.strptime("04:35:45", "%H:%M:%S").time() >>> time datetime.time(4, 35, 45) >>> day = datetime.datetime.now().date() >>> day datetime.date(2016, 1, 6) >>> datetime.datetime.combine(day, time) datetime.datetime(2016, 1, 6, 4, 35, 45) >>>
>>> from igraph import Graph >>> Graph.adhesion == Graph.edge_connectivity == Graph.edge_disjoint_paths True >>> Graph.cohesion == Graph.vertex_connectivity == Graph.vertex_disjoint_paths True
Guess_Battleship_Board_Row = int(input("Guess the X coordinate:")) - 1 Guess_Battleship_Board_Column = int(input("Guess the Y coordinate:")) - 1
play = 'y' while play == 'y' Do your game logic here play = input('Would you like to play in-between [y|n]? ')
>>> l=re.split(r'[\\ ]+',path_options) >>> l=[' '.join(l[:-1]),l[-1]] >>> l ['just a dir/my script.sh', '--option']
import numpy as np x = np.array([[10, 1], [2, 12], [3, 5]]) multi_cols = x[:,0] * x[:,1] print x[multi_cols.argmin()]
>>> import numpy as np >>> x = np.array([1,2,3,4,5]) >>> b = np.array([True,False,False,True,False]) # this is your boolean data array >>> markers_on = x[~b] >>> markers_on array([2, 3, 5])
header_row = 0 # build list of lists that represents row values in worksheet, # including column names from header row rows = [worksheet.row_values(row) for row in range(worksheet.nrows)] # extract list of column names to use for insert statement, values to be inserted remain columns = rows.pop(header_row) cnxn = pyodbc.connect(r"DRIVER={SQL Server};SERVER=XXXXXXXXXX\DEV_CON1;DATABASE=GGG;UID=AAA_dbo;PWD=XXXXXXXXX;") cursor = cnxn.cursor() # list of column names used to build SQL statement, including parameter placeholders (?) populate_db = "insert into tblSnap_TEST ({}) values ({})".format(', '.join(columns), ', '.join('?' * len(columns))) # insert is executed once for each sequence of parameter values cursor.executemany(populate_db, rows) cnxn.commit() cnxn.close()
x = numpy.arange(10) y = numpy.zeros(x.shape) y[1:] = x[1:] - x[:-1] print y
>>> r = subprocess.getoutput("google-chrome-stable https://www.google.com/") >>> r Created new window in existing browser session.' >>>
import matplotlib.pyplot as plt import numpy as np def xticklabels_example(): fig = plt.figure() x = np.arange(20) y1 = np.cos(x) y2 = (x**2) y3 = (x**3) yn = (y1,y2,y3) COLORS = ('b','g','k') for i,y in enumerate(yn): ax = fig.add_subplot(len(yn),1,i+1) ax.plot(x, y, ls='solid', color=COLORS[i]) if i != len(yn) - 1: # all but last ax.set_xticklabels( () ) else: for tick in ax.xaxis.get_major_ticks(): tick.label.set_fontsize(14) # specify integer or one of preset strings, e.g. #tick.label.set_fontsize('x-small') tick.label.set_rotation('vertical') fig.suptitle('Matplotlib xticklabels Example') plt.show() if __name__ == '__main__': xticklabels_example()
In [2]: row = array([0,0,1,2,2,2]) In [3]: col = array([0,2,2,0,1,2]) In [4]: data = array([1,2,3,4,5,6]) In [5]: a = csr_matrix((data, (row, col)), shape=(3,3)) In [6]: a.A Out[6]: array([[1, 0, 2], [0, 0, 3], [4, 5, 6]]) In [7]: a.sum(axis=0) # sum the columns Out[7]: matrix([[ 5, 5, 11]]) In [8]: a.sum(axis=1) # sum the rows Out[8]: matrix([[ 3], [ 3], [15]])
class MyTestClass(unittest.TestCase): def setUp(self): self.my_obj = MyClass() self.my_obj_mock = flexmock(self.my_obj) def my_test_case(self): self.my_obj_mock.should_receive('other_method').and_return(1).and_return(2).and_return(3) self.my_obj.method_to_test()
import csv from collections import defaultdict, Counter from datetime import datetime from urlparse import urlsplit indiv = Counter() domains = defaultdict(lambda: defaultdict(int)) with open("history.csv", "rb") as f: for timestr, url in csv.reader(f): dt = datetime.strptime(timestr, "%Y-%m-%d %H:%M:%S") if 6 <= dt.hour < 11: # between 6am and 11am today_domains = domains[dt.date()] domain = urlsplit(url).hostname if len(today_domains) < 5 and domain not in today_domains: today_domains[domain] += 1 indiv += Counter([domain]) for domain in indiv: print '%s,%d' % (domain, indiv[domain])
class UserForm(ModelForm): first_name = forms.CharField(label='Vorname') # ... class Meta: model = User fields = ["first_name", "last_name", "username", "email", "password"]
In [33]: filename = "sciPHOTOf105w0.fits" In [34]: filename.rpartition('.')[0] Out[34]: 'sciPHOTOf105w0' In [35]: filename.rsplit('.', 1)[0] Out[35]: 'sciPHOTOf105w0'
select = Select(driver.find_element_by_id("dropDown")) options = select.options for index in range(0, len(options) - 1): select.select_by_index(index) # do stuff
dat1.unstack().reset_index(["foo", "bar"], name="obs") foo bar obs 0 a c 0.716688 1 a c 0.945587 2 a c 0.388928 3 a c 0.597745 0 a d 0.201622 1 a d 0.267941 2 a d 0.575878 3 a d 0.632626 0 b c 0.143869 1 b c 0.499576 2 b c 0.860764 3 b c 0.369183 0 b d 0.857490 1 b d 0.048870 2 b d 0.804838 3 b d 0.230868
import itertools import numpy as np my_array = np.array([[0,1,2],[3,4,5],[6,7,8]]) n = len(my_array) for r in itertools.combinations(xrange(n), 2): rows = np.array(r) on = np.zeros(n, dtype=bool) on[rows] = True print my_array[on] print my_array[~on]
self.cursor.execute("INSERT INTO items (title, url) VALUES (%s, %s)", (item['title'][0], item['link']))
from subprocess import Popen, PIPE p = Popen(["/path/to/FORTRAN/program"], stdin=PIPE, bufsize=1, close_fds=True) p.communicate("INPUT_FILE1\r\nINPUT_FILE2") rc = p.returncode
>>> from django.template import Template, Context >>> t = Template(''' ... {% for first in firstList %} ... {% for second in firstList %} ... {% if first == second %} ... {{ first }} ... {% endif %} ... {% endfor %} ... {% endfor %} ... ''') >>> t.render(Context({'firstList': ['foo', 'bar'], 'secondList': ['foo', 'bar']})) u'\n \n \n \n foo\n \n \n \n \n \n \n \n \n \n bar\n \n \n \n' >>> print(t.render(Context({'firstList': ['foo', 'bar'], 'secondList': ['foo', 'bar']}))) foo bar
def strip_string(string, to_strip): if to_strip: while string.startswith(to_strip): string = string[len(to_strip):] while string.endswith(to_strip): string = string[:-len(to_strip)] return string
>>> import networkx as nx >>> net = nx.Graph() >>> net.add_edge("user_42", "user_9", trust=9) >>> net.adj {'user_42': {'user_9': {'trust': 9}}, 'user_9': {'user_42': {'trust': 9}}}
import re strings = """String1_Todelete_restofstring.txt String2_Alsotoremove_restofstring.txt String3_2013_restofstring.txt String4_2011_restofstring.txt String5_restofstring_tosuppress.txt""".split() keywords = set(("Todelete", "2013","2011", "Alsotoremove","tosuppress")) for s in strings: print re.sub("_[^_.]+", lambda m: "" if m.group(0)[1:] in keywords else m.group(0), s)
>>>urllib.urlencode({"param":"val", "items":[json.dumps(item) for item in items] }, True)
def fib(n, r): if n < 2: r[0] = n else: r1 = [None] r2 = [None] # Start fib() threads that use r1 and r2 for results. ... # Sum the results of the threads. r[0] = r1[0] + r2[0] def FibonacciThreads(n): r = [None] fib(n, r) return r[0]
from libcpp.vector cimport vector ctypedef vector[int] int_vec ctypedef vector[int_vec] int_vec_vec def test(): cdef int_vec v v = int_vec(5) cdef int_vec_ve vv vv = int_vec_vec(5, v)
>>> re.search("brown fox\W+(?:\w+\W+){1,4}lazy dog", s) <_sre.SRE_Match at 0x3045850> >>> re.search("brown fox\W+(?:\w+\W+){1,3}lazy dog", s) <_sre.SRE_Match at 0x3045920> >>> re.search("brown fox\W+(?:\w+\W+){1,2}lazy dog", s) (None)
class POINT(Structure): _fields_ = [("x", c_int), ("y", c_int)]
>>> def test(): ... return (1, 2) ... >>> thing = test() >>> thing (1, 2) >>> type(thing) <type 'tuple'> >>> type(thing).__name__ 'tuple'
def func(): im1 = Image.open("C:\\Users\\Poos\\Desktop\\G\\green_pixel.bmp") A = list(im1.getdata()) x = 0 y = 0 im2 = ImageGrab.grab() B = list(im2.getdata()) for x in range(0,1024, 50): for y in range(0,600, 20): if(B != A): im3 = im2.crop((x,y,x+1,y+1)) B = list(im3.getdata()) print(x, y) else: print("hooray!") return return
txt = open("C:\\user\\documents\\python\\ex15_sample.txt")
>>> s = "I am Enrolled in a course, 'MPhil' since 2014. I LOVE this 'SO MuCH'" >>> re.sub(r"\b(?<!')(\w+)(?!')\b", lambda match: match.group(1).lower(), s) "i am enrolled in a course, 'MPhil' since 2014. i love this 'SO MuCH'"
from datetime import timedelta createdate_mongo += timedelta(days=1)
def func1(a, b): pass def func2(a, b): pass def functionA(val1, val2, func): func(val1, val2) # now call functionA passing in a function functionA("foo", "bar", func1)
for x in OrderedList: if x in ResultList1: print x, '1' continue if x in ResultList2: print x, '2' continue if x in ResultList3: print x, '3' continue
infoObject = pygame.display.Info() pygame.display.set_mode((infoObject.current_w, infoObject.current_h))
#!/usr/bin/env python from itertools import combinations import igraph import optparse parser = optparse.OptionParser(usage="%prog [options] infile") parser.add_option("-k", metavar="K", default=3, type=int, help="use a clique size of K") options, args = parser.parse_args() if not args: parser.error("Required input file as first argument") k = options.k g = igraph.load(args[0], format="ncol", directed=False) cls = map(set, g.maximal_cliques(min=k)) edgelist = [] for i, j in combinations(range(len(cls)), 2): if len(cls[i].intersection(cls[j])) >= k-1: edgelist.append((i, j)) cg = igraph.Graph(edgelist, directed=False) clusters = cg.clusters() for cluster in clusters: members = set() for i in cluster: members.update(cls[i]) print "\t".join(g.vs[members]["name"])
import urllib import urllib2 uri = 'http://legistar.council.nyc.gov/Legislation.aspx' #the http headers are useful to simulate a particular browser (some sites deny #access to non-browsers (bots, etc.) #also needed to pass the content type. headers = { 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.13) Gecko/2009073022 Firefox/3.0.13', 'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml; q=0.9,*/*; q=0.8', 'Content-Type': 'application/x-www-form-urlencoded' } # we group the form fields and their values in a list (any # iterable, actually) of name-value tuples. This helps # with clarity and also makes it easy to later encoding of them. formFields = ( # the viewstate is actualy 800+ characters in length! I truncated it # for this sample code. It can be lifted from the first page # obtained from the site. It may be ok to hardcode this value, or # it may have to be refreshed each time / each day, by essentially # running an extra page request and parse, for this specific value. (r'__VSTATE', r'7TzretNIlrZiKb7EOB3AQE ... ...2qd6g5xD8CGXm5EftXtNPt+H8B'), # following are more of these ASP form fields (r'__VIEWSTATE', r''), (r'__EVENTVALIDATION', r'/wEWDwL+raDpAgKnpt8nAs3q+pQOAs3q/pQOAs3qgpUOAs3qhpUOAoPE36ANAve684YCAoOs79EIAoOs89EIAoOs99EIAoOs39EIAoOs49EIAoOs09EIAoSs99EI6IQ74SEV9n4XbtWm1rEbB6Ic3/M='), (r'ctl00_RadScriptManager1_HiddenField', ''), (r'ctl00_tabTop_ClientState', ''), (r'ctl00_ContentPlaceHolder1_menuMain_ClientState', ''), (r'ctl00_ContentPlaceHolder1_gridMain_ClientState', ''), #but then we come to fields of interest: the search #criteria the collections to search from etc. # Check boxes (r'ctl00$ContentPlaceHolder1$chkOptions$0', 'on'), # file number (r'ctl00$ContentPlaceHolder1$chkOptions$1', 'on'), # Legislative text (r'ctl00$ContentPlaceHolder1$chkOptions$2', 'on'), # attachement # etc. (not all listed) (r'ctl00$ContentPlaceHolder1$txtSearch', 'york'), # Search text (r'ctl00$ContentPlaceHolder1$lstYears', 'All Years'), # Years to include (r'ctl00$ContentPlaceHolder1$lstTypeBasic', 'All Types'), #types to include (r'ctl00$ContentPlaceHolder1$btnSearch', 'Search Legislation') # Search button itself ) # these have to be encoded encodedFields = urllib.urlencode(formFields) req = urllib2.Request(uri, encodedFields, headers) f= urllib2.urlopen(req) #that's the actual call to the http site. # *** here would normally be the in-memory parsing of f # contents, but instead I store this to file # this is useful during design, allowing to have a # sample of what is to be parsed in a text editor, for analysis. try: fout = open('tmp.htm', 'w') except: print('Could not open output file\n') fout.writelines(f.readlines()) fout.close()
import sys def Time_Function(i,rows,counter,start,var): if i==start or i% round(rows/10) ==0 and counter <=100: sys.stdout.write(str(counter)) counter=counter+10 var=0 if i% round((rows/10)/3) ==0 and counter <=100 and var<3: sys.stdout.write('.') var=var+1 return [counter,var] def Project(array,rows,cols): counter=var=0 for i in range(0,rows): for j in range(0,cols): array=3 #just an arbitrary number [counter,var]=Time_Function(i,rows,counter,0,var) array1=1 array2=2 Project(array1,2018,486) print "\n" Project(array2,2023,486)
from sqlalchemy import Column, Boolean, Integer def c_id(): return Column(Integer, primary_key=True) def c_bool(): return Column(Boolean, nullable=False, default=False) def c_string(len): return Column(String(len), nullable=False, default='') class Thing(Base): id = c_id() thing = c_bool() tag = c_string(255)
>>> import time >>> time.mktime(time.strptime('02-12-2012', '%d-%m-%Y')) 1354424400.0
for line in ActiveFileR: newline = line for ReChr1 in CapAlphabet: for ReChr2 in CapAlphabet: newline = newline.replace(ReChr1 + ReChr2, ReChr1 + " " + ReChr2) ActiveFileW.write(newline)
>>> np.column_stack((A[1:,:3],A[1:,4:])) array([[ 6, 7, 8, 10], [11, 12, 13, 15], [16, 17, 18, 20], [21, 22, 23, 25]])
first_set, second_set = {("A", 23), ("B", 15)}, {("X", 23), ("B", 42)} # Group items based on the first elements, as dictionaries d1, d2 = {}, {} for item in first_set: d1.setdefault(item[0], []).append(item) for item in second_set: d2.setdefault(item[0], []).append(item) # Merge the dictionaries to form a list of grouped items s = [d1.get(key, []) + d2.get(key, []) for key in d1.viewkeys() | d2] # Filter out all the groups if the length is lesser than 1 print [item for item in s if len(item) > 1] # [[('B', 15), ('B', 42)]]
if len(x)==len(y): return min(x,y)
import numpy as np import scipy.misc a = np.random.uniform(0, 2**16 - 1, (500, 500)).astype('int32') img = scipy.misc.toimage(a, high=np.max(a), low=np.min(a), mode='I') img.save('my16bit.png') # check that you got the same values b = scipy.misc.imread('my16bit.png') b.dtype # dtype('int32') np.array_equal(a, b) # True
import numpy import glob for f in glob.glob("*.csv"): print f r = numpy.recfromcsv(f) print numpy.interp(5, r.depth, r.temp)
>>> import numpy >>> import numpy.random >>> x = numpy.random.rand(100, 3, 4) >>> mask = numpy.random.rand(*x.shape) >>> result = numpy.where(mask < 0.5, 0, x)
with open("test.txt") as file: for line in file: line = line.rstrip() if line: print line
def route(route, method): def decorator(f): print 'decorator defined' print 'defining route' @wraps(f) def wrapper(*args, **kwargs): print 'Hello' # do stuff here such as authenticate, authorise, check request json/arguments etc. # these will get passed along with the route and method arguments above. return f(*args, **kwargs) app.add_url_rule(route, methods=method, view_func=wrapper) print 'route defined' return wrapper return decorator
self.qleTextBoxCam1Focus.editingFinished.connect(self.qleCam1Focus)
import numpy as np A = np.array([[3,1,-1], [1,3,-1], [-1,-1,5]]) w,v = np.linalg.eig(A) print w idx = w.argsort()[::-1] #large to small # idx = w.argsort() #small to large w = w[idx] v = v[:,idx] print w # now they are ordered and you can iterate through your results to write them to your file
all_interfaces_up() { /your/code/path/codename.py # return true if all interfaces listed in /etc/network/interfaces as 'auto' # are up. if no interfaces are found there, then "all [given] were up"
#!/usr/bin/python import cgi; import codecs; form = cgi.FieldStorage() my_a = form.getvalue("a","") wFile = codecs.open("test.txt", "w", "utf8") wFile.write(my_a); wFile.close() print("Content-Type: text/plain") print("Location: ../plain.html") print()
def backtracking(domains): if any(len(dom) == 0 for var, dom in domains.iteritems()): return None if all(len(dom) == 1 for var, dom in domains.iteritems()): return domains # minimum remaining values heuristic: process variables with few possible # values first (fail-first strategy) order = sorted(domains.iteritems(), key=lambda (var, dom): len(dom)) for var, dom in order: if len(dom) == 1: continue for value in list(dom): doms = {v: d - {value} for v, d in domains.iteritems() if v != var} doms[var] = {value} solution = backtracking(doms) if solution is not None: return solution print(backtracking({v: set(d) for v, d in options.iteritems()}))
import xml.etree.ElementTree as ET def openEmptyXML(): doc = ET.parse("Automatimport.xml") for atc in doc.findall(".//ATC"): versionname = atc.find("OriginalTestVersionName") tcName = versionname.text if tcName == 'REQPROD 232 Read IO': verdict1 = atc.find("Verdict") verdict2 = atc.find("Procedure/Verdict") verdict3 = atc.find("Procedure/Result/Verdict") print tcName print verdict1.text print verdict2.text print verdict3.text openEmptyXML()
>>> test_out = [['I am monkey free.'], ['I explained my life free.']] >>> A = "monkey free" >>> replacement = "xxxxxx" >>> [[string.replace(A, replacement) for string in sublist] for sublist in test_out] [['I am xxxxxx.'], ['I explained my life free.']]
>>> import numpy as np >>> a = np.random.random(10) # set up a random array to play with >>> a array([ 0.20291643, 0.89973074, 0.14291639, 0.53535553, 0.21801353, 0.05582776, 0.64301145, 0.56081956, 0.85771335, 0.6032354 ]) >>> >>> b = np.array([0,5,6,9]) # indices we *don't want* >>> mask = np.ones(a.shape,dtype=bool) >>> mask[b] = False # Converted to a mask array of indices we *do want* >>> mask array([False, True, True, True, True, False, False, True, True, False], dtype=bool) >>> >>> np.arange(a.shape[0])[mask] #This gets you the indices that aren't in your original array([1, 2, 3, 4, 7, 8]) >>> a[mask] #This gets you the elements not in your original. array([ 0.89973074, 0.14291639, 0.53535553, 0.21801353, 0.56081956, 0.85771335])
models.ForeignKey('DiscussionPost', null=True)
import sys def _call_for_all_streams(func_name): def wrapper(self, *args, **kwargs): result = [] for stream in self._streams: func = getattr(stream, func_name) result.append(func(*args, **kwargs)) return result return wrapper class OStreamWrapper(object): def __init__(self, *streams): self._streams = streams for method in filter(lambda x: not x.startswith('_'), dir(file)): setattr(OStreamWrapper, method, _call_for_all_streams(method)) if __name__ == '__main__': file1 = open("file1.txt", "w") file2 = open("file2.txt", "w") ostream = OStreamWrapper(file1, file2, sys.stdout) ostream.write("ECHO!") ostream.close()
import wx import wx.stc as stc import os import platform import time systemType = platform.system() if systemType == "Windows": import win32wnet class MainWindow(wx.Frame): def __init__(self, parent, id, title): run_params = {} self.run_params = run_params # OS dependent info self.run_params["systemType"] = systemType if systemType == "Windows": self.run_params["fontSize"] = 8 self.run_params["fontSize2"] = 7 else: self.run_params["fontSize"] = 10 self.run_params["fontSize2"] = 9 wx.Frame.__init__(self, parent, id, title, size=(900, 710), style=wx.DEFAULT_FRAME_STYLE & ~ (wx.RESIZE_BORDER | wx.RESIZE_BOX | wx.MAXIMIZE_BOX)) ########################################################## # Passed self here and removed the unnecessary second self ########################################################## self.submissions = SubmissionPane(self, run_params) self.CreateStatusBar() menuBar = wx.MenuBar() self.Centre() self.Show() class SubmissionPane(wx.Panel): ################################################ # changed the init here ################################################ def __init__(self, parent, run_params): wx.Panel.__init__(self, parent) self.parent = parent self.selected_folders = None self.params = run_params ################################################ # changed the ref below ################################################ self.frame = self main_sizer = wx.BoxSizer(wx.VERTICAL) self.top_row_sizer = wx.BoxSizer(wx.HORIZONTAL); radio_static_box = wx.StaticBox(self, label='Some Text') radio_static_box_sizer = wx.StaticBoxSizer(radio_static_box, wx.HORIZONTAL) job_static_box = wx.StaticBox(self, label='Some Text') job_static_box_sizer = wx.StaticBoxSizer(job_static_box, wx.HORIZONTAL) ''' radio_labels = ['Some Text', 'Some Text2'] self.radio_box = wx.RadioBox( self, -1, "", choices=radio_labels, ) ''' self.radio1 = wx.RadioButton(self, label='Some Text', style=wx.RB_GROUP) self.radio2 = wx.RadioButton(self, label='Some Text') self.radio1.SetValue(True) radio_static_box_sizer.Add(self.radio1, flag=wx.BOTTOM, border=0) radio_static_box_sizer.Add(self.radio2, flag=wx.LEFT, border=10) self.top_row_sizer.Add(radio_static_box_sizer, flag=wx.LEFT, border=10) self.check_box = wx.CheckBox(self, label="Some Text") self.check_box.SetValue(False) if self.params["systemType"] == "Windows": self.txtTitle = wx.TextCtrl(self, style=wx.SUNKEN_BORDER, value="Some Text...", size=(200, -1), pos=(306, 14)) else: self.txtTitle = wx.TextCtrl(self, style=wx.SUNKEN_BORDER, value="Some Text...", size=(200, -1), pos=(350, 19)) job_static_box_sizer.Add(self.check_box, flag=wx.LEFT, border=0) self.top_row_sizer.Add(job_static_box_sizer, flag=wx.LEFT, border=10); self.txtTitle.Show(False) main_sizer.Add(self.top_row_sizer); main_sizer.Add((-1, 10)) job_static_box2 = wx.StaticBox(self, label='Some Text') third_row_sizer = wx.StaticBoxSizer(job_static_box2, wx.HORIZONTAL); self.tc_files = wx.TextCtrl(self, size=(375, 25)) self.buttonGo = wx.Button(self, label='Go') self.buttonGo.Bind(wx.EVT_BUTTON, self.OnSubmit) third_row_sizer.Add(self.tc_files, flag=wx.RIGHT, border=8) if self.params["systemType"] == "Windows": third_row_sizer.Add(self.buttonGo, flag=wx.LEFT | wx.TOP, border=0) else: third_row_sizer.Add(self.buttonGo, flag=wx.LEFT | wx.TOP, border=2) main_sizer.Add(third_row_sizer, flag=wx.LEFT, border=10) self.log_text22 = wx.ListCtrl(self,size=(875,275), style=wx.LC_REPORT | wx.BORDER_SUNKEN | wx.LC_SINGLE_SEL | wx.LC_VRULES | wx.LC_HRULES) font = wx.Font(self.params["fontSize2"], wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL) self.log_text22.SetFont(font) self.log_text22.InsertColumn(1, '1', width=40, format=wx.LIST_FORMAT_CENTRE) self.log_text22.InsertColumn(2, '2', width=50, format=wx.LIST_FORMAT_CENTRE) self.log_text22.InsertColumn(3, '3', width=156) self.log_text22.InsertColumn(4, '4', width=332) self.log_text22.InsertColumn(5, '5', width=100, format=wx.LIST_FORMAT_CENTRE) self.log_text22.InsertColumn(6, '6', width=82, format=wx.LIST_FORMAT_CENTRE) self.log_text22.InsertColumn(7, '7', width=60, format=wx.LIST_FORMAT_CENTRE) self.log_text22.InsertColumn(8, '8', width=50, format=wx.LIST_FORMAT_CENTRE) main_sizer.Add((-1, 10)) list_sizer = wx.BoxSizer(wx.VERTICAL) list_sizer.Add(self.log_text22, flag=wx.LEFT, border=10) main_sizer.Add(list_sizer) self.running_log1 = wx.stc.StyledTextCtrl(self, -1, size=(875,175)) self.running_log1.StyleSetFont(wx.stc.STC_STYLE_DEFAULT, font) self.running_log1.SetMarginWidth(1, 0) self.running_log1.StyleSetBackground(wx.stc.STC_STYLE_DEFAULT, (0,0,0)) self.running_log1.StyleSetForeground(wx.stc.STC_STYLE_DEFAULT, (0,255,0)) self.running_log1.StyleClearAll() main_sizer.Add((-1, 5)) list_sizer = wx.BoxSizer(wx.VERTICAL) list_sizer.Add(self.running_log1, flag=wx.LEFT, border=10) main_sizer.Add(list_sizer) list_sizer.Add((-1, 10)) self.buttonClose = wx.Button(self, -1, "Quit") list_sizer.Add(self.buttonClose, flag=wx.ALIGN_CENTER | wx.TOP | wx.LEFT, border=10) self.SetBackgroundColour("Light Grey") self.SetSizer(main_sizer) self.Layout() def OnSubmit(self, event): msg = "Running" jobSubmitmsg = wx.BusyInfo(msg, self) time.sleep(3) jobSubmitmsg = None app = wx.App(redirect=False) MainWindow(None, -1, 'Application') app.MainLoop()
from bs4 import BeautifulSoup data = '''<html><body><table><tr><td>1562375XXXX</td><td>2 minutes ago</td><td class="span10" style="word-wrap: break-word;">1234567: hi honney, trust trying how to use globfone. glad u told me about this site. it will be<br /> useful to me in the future. /check globfone.com<br /></td></tr></table></body></table>''' def grab_smss(soup): # soup = the web page, parsed after applying """ # html_doc = html_doc.replace("\n", "") Extracts SMSs from page, in form [From, Ago, Msg] """ sms_list = [] in_smss = False [s.extract() for s in soup('br')] for row in soup.body.table.find_all('tr'): sms_row = [' '.join(unicode(subchild.string) for subchild in child) for child in row.children] sms_list.append(sms_row) if "From Number" in sms_row: in_smss = True return sms_list print grab_smss(BeautifulSoup(data))
import numpy as np import matplotlib import matplotlib.pyplot as plt from multiprocessing import Process import time # optional for testing only import matplotlib.animation as animation # A. First we define some useful tools: def wait_fig(): # Block the execution of the code until the figure is closed. # This works even with multiprocessing. if matplotlib.pyplot.isinteractive(): matplotlib.pyplot.ioff() # this is necessary in mutliprocessing matplotlib.pyplot.show(block=True) matplotlib.pyplot.ion() # restitute the interractive state else: matplotlib.pyplot.show(block=True) return def wait_anim(anim_flag, refresh_rate = 0.1): #This will be used in synergy with the animation class in the example #below, whenever the user want the figure to close automatically just #after the animation has ended. #Note: this function uses the controversial event_loop of Matplotlib, but #I see no other way to obtain the desired result. while anim_flag[0]: #next code extracted from plt.pause(...) backend = plt.rcParams['backend'] if backend in plt._interactive_bk: figManager = plt._pylab_helpers.Gcf.get_active() if figManager is not None: figManager.canvas.start_event_loop(refresh_rate) def draw_fig(fig = None): #Draw the artists of a figure immediately. #Note: if you are using this function inside a loop, it should be less time #consuming to set the interactive mode "on" using matplotlib.pyplot.ion() #before the loop, event if restituting the previous state after the loop. if matplotlib.pyplot.isinteractive(): if fig is None: matplotlib.pyplot.draw() else: fig.canvas.draw() else: matplotlib.pyplot.ion() if fig is None: matplotlib.pyplot.draw() else: fig.canvas.draw() matplotlib.pyplot.ioff() # restitute the interactive state matplotlib.pyplot.show(block=False) return def pause_anim(t): #This is taken from plt.pause(...), but without unnecessary #stuff. Note that the time module should be previously imported. #Again, this use the controversial event_loop of Matplotlib. backend = matplotlib.pyplot.rcParams['backend'] if backend in matplotlib.pyplot._interactive_bk: figManager = matplotlib.pyplot._pylab_helpers.Gcf.get_active() if figManager is not None: figManager.canvas.start_event_loop(t) return else: time.sleep(t) #-------------------------- # B. Now come the particular functions that will do the job. def f(x, y): return np.sin(x) + np.cos(y) def plot_graph(): fig = plt.figure() x = np.linspace(0, 2 * np.pi, 120) y = np.linspace(0, 2 * np.pi, 100).reshape(-1, 1) im = fig.gca().imshow(f(x, y)) draw_fig(fig) n_frames = 50 #============================================== #First method - direct animation: This use the start_event_loop, so is #somewhat controversial according to the Matplotlib doc. #Uncomment and put the "Second method" below into comments to test. '''for i in range(n_frames): # n_frames iterations x += np.pi / 15. y += np.pi / 20. im.set_array(f(x, y)) draw_fig(fig) pause_anim(0.015) # plt.pause(0.015) can also be used, but is slower wait_fig() # simply suppress this command if you want the figure to close # automatically just after the animation has ended ''' #================================================ #Second method: this uses the Matplotlib prefered animation class. #Put the "first method" above in comments to test it. def updatefig(i, fig, im, x, y, anim_flag, n_frames): x = x + i * np.pi / 15. y = y + i * np.pi / 20. im.set_array(f(x, y)) if i == n_frames-1: anim_flag[0] = False anim_flag = [True] animation.FuncAnimation(fig, updatefig, repeat = False, frames = n_frames, interval=50, fargs = (fig, im, x, y, anim_flag, n_frames), blit=False) #Unfortunately, blit=True seems to causes problems wait_fig() #wait_anim(anim_flag) #replace the previous command by this one if you want the #figure to close automatically just after the animation #has ended #================================================ return #-------------------------- # C. Using multiprocessing to obtain the desired effects. I believe this # method also works with the "threading" module, but I haven't test that. def main() # it is important that ALL the code be typed inside # this function, otherwise the program will do weird # things with the Ipython or even the Python console. # Outside of this condition, type nothing but import # clauses and function/class definitions. if __name__ != '__main__': return p = Process(target=plot_graph) p.start() print('hello', flush = True) #just to have something printed here p.join() # suppress this command if you want the animation be executed in # parallel with the subsequent code for i in range(3): # This allows to see if execution takes place after the #process above, as should be the case because of p.join(). print('world', flush = True) time.sleep(1) main()
bound_handler = handler.__get__(self, MyWidget)
self.users.update({"user_id": event['userid']}, {'$addToSet': {'campaigns': UserCampaigns[i]}})
def group(items): iterator = iter(items) group = [next(iterator)] result =[group] for item in iterator: (a, b), (c, d) = item, group[-1] if a in (c, d) or b in (c, d): group.append(item) else: group = [item] result.append(group) return result print(group([(1,2),(2,3),(3,4),(7,8),(8,9),(2,1),(2,3),(1,4)]))
import csv import matplotlib.pyplot as plt ### Making test CSV file ### data = [['2011/12/15,5'],['2011/12/11,4'],['2011/12/19,2'],['2011/12/16,3'],['2011/12/20,8'],['2011/12/14,4'],['2011/12/10,10'],['2011/12/9,7']] with open('test.csv', 'wb') as f: writer = csv.writer(f) for i in data: writer.writerow(i) ### Extract data from CSV ### with open('test.csv', 'rb') as n: reader = csv.reader(n) dates = [] freq = [] for row in reader: values = row[0].split(',') dates.append(values[0]) freq.append(values[1]) ### Do plot ### false_x = [x for x in range(len(dates))] plt.plot(false_x,freq, 'o-') plt.xticks(range(len(dates)), (dates), rotation=45) # plt.axis([xmin, xmax, ymin, ymax]) - sets axes limits on graph plt.axis([-1, 8, 0, 11]) plt.show()
import unittest import mock class TestCaseName(unittest.TestCase): @mock.patch('path_to_module.AdWordsClient', autospec=True) @mock.patch('path_to_module.GoogleRefreshTokenClient', autospec=True) @mock.patch('path_to_module.tz', autospec=True) def test_get_account_timezone(self, tz_mock, adwords_client_mock, grefresh_token_client_mock): adwards_client_instance = mock.Mock() adwords_client_mock.return_value = test_get_account_timezone instance = AdWords(...) instance.get_account_timezone() adwards_client_instance.GetService.assert_called_with(...)
img = plt.imread('latest_0013679_caz.tiff') plt.imshow(img[:, :, 0], cmap=plt.cm.coolwarm)
C = {} dist_km=[] returned_values=[] for row in product(zip(latA, longA), zip(latB, longB)): e=(list(chain(*row))) distance= distance_function(e[0],e[1],e[2],e[3]) dist_kilo=(distance*6373) dist_km.append(dist_kilo) if dist_kilo<1.01: C ={ "clat":row[0][0], "clong": row[0][1], "tlat":row[1][0], "tlong": row[1][1], "distance_km": dist_kilo } returned_values.append(C)
def validate_parkings(self, value): user_parkings = set(self.context['request'].user.parkings.all()) post_parkings = set(value) if not post_parkings.issubset(user_parkings): raise serializers.ValidationError("parking doesn't belong to you") return value
res = {"cmd": "echo \"Hello World\" ", "end": "2014-08-01 19:32:38.714584", "stdout": "Hello World", "changed": True, "start": "2014-08-01 19:32:38.707510", "delta": "0:00:00.007074", "stderr": "", "rc": 0, "invocation": {"module_name": "shell", "module_args": "echo \"Hello World\""}} def json_log(res, host): if isinstance(res,dict) and 'verbose_override' not in res: res.update({"host": host}) combined_json = JSONEncoder().encode(res) print(combined_json) In [73]: json_log(res,"centos") {"cmd": "echo \"Hello World\" ", "end": "2014-08-01 19:32:38.714584", "stdout": "Hello World", "changed": true, "rc": 0, "start": "2014-08-01 19:32:38.707510", "host": "centos", "stderr": "", "delta": "0:00:00.007074", "invocation": {"module_name": "shell", "module_args": "echo \"Hello World\""}}
s = "C:\level1\level2\level3\level4\level5\level6\level7" l = s.split('\\') print l[4], l[5]
In [1]: !ls \ ...: *.txt aws-forum.txt encyclic.txt In [2]:
In [13]: "+".join(random.sample(sentences,3)) Out[13]: 'a+b+c'
def __init__(self, corpus=None, num_topics=100, id2word=None, distributed=False, chunksize=2000, passes=1, update_every=1, alpha='symmetric', eta=None, decay=0.5, offset=1.0, eval_every=10, iterations=50, gamma_threshold=0.001)
def _dont_doctest_inherited_docstrings(docstring): docstring_disabled = "" for line in docstring.splitlines(): docstring_disabled += line + "#doctest: +DISABLE" return docstring_disabled class _frommethod: """ Adapted from numpy.ma._frommethod """ def __init__(self, func_name): self.__name__ = func_name docstring = getattr(MaskedArray, func_name).__doc__ self.__doc__ = _dont_doctest_inherited_docstrings(docstring) self.obj = None
>>> HOSTS = ['backup-ros', 'backupa-files', 'print-server1','print-server2'] >>> backups = [x for x in HOSTS if x.startswith('backup-')] >>> backups ['backup-ros']
>>> elem.tag 'line' >>> elem.get('number') '2' >>> elem.text 'Line 3'`
class Page: #attributes class Questions: #attributes pages = models.ManyToManyField(through = 'PageQuestions', ...) class PageQuestions: page = models.ForeignKey(Page) question = models.ForeignKey(Question) ordinal_number = models.IntegerField() class Meta: unique_together = (('page', 'question')) #optional
import pkg_resources my_data = pkg_resources.resource_string(__name__, "config.yml")
import os, subprocess, tempfile f, fname = tempfile.mkstemp() f.write('default') f.close() cmd = os.environ.get('EDITOR', 'vi') + ' ' + fname subprocess.call(cmd, shell=True) with open(fname, 'r') as f: #read file os.unlink(fname)
def main_func() ... def callback(): current_time = time.time() if current_time - callback.start_time > 1.0: print 'working' callback.start_time = time.time() callback.start_time = time.time() work_function(args, callback)
In [2]: df = pd.DataFrame({'Recipient_State':['AL', 'AR', 'AZ','CA','CO'], 'Total_Amount_of_Payment_USDollars':np.random.randn(5)}) df Out[2]: Recipient_State Total_Amount_of_Payment_USDollars 0 AL 0.401242 1 AR 1.333060 2 AZ -0.515762 3 CA 0.740358 4 CO -0.900249 In [3]: gp = df.groupby('Recipient_State')['Total_Amount_of_Payment_USDollars'].sum() gp Out[3]: Recipient_State AL 0.401242 AR 1.333060 AZ -0.515762 CA 0.740358 CO -0.900249 Name: Total_Amount_of_Payment_USDollars, dtype: float64 In [4]: gp.index Out[4]: Index(['AL', 'AR', 'AZ', 'CA', 'CO'], dtype='object') In [5]: gp.reset_index() Out[5]: Recipient_State Total_Amount_of_Payment_USDollars 0 AL 0.401242 1 AR 1.333060 2 AZ -0.515762 3 CA 0.740358 4 CO -0.900249
[a*b for a,b in zip(lista,listb)]
import elementtree.ElementTree as ET def getCVE(nessus_file): try: tree = ET.parse(nessus_file) doc = tree.getroot() walk = doc.getiterator('cve') for cve in walk: print cve.text except: pass getCVE('file.nessus')
urllib2.urlopen(url[, data][, timeout])
>>> import datetime >>> d1 = datetime.datetime.strptime("00:08:30.291", "%H:%M:%S.%f") >>> d1 datetime.datetime(1900, 1, 1, 0, 8, 30, 291000) >>> d2 datetime.datetime(1900, 1, 1, 0, 2, 30, 291000) >>> dt1 = datetime.timedelta(minutes=d1.minute, seconds=d1.second, microseconds=d1.microsecond) >>> dt2 = datetime.timedelta(minutes=d2.minute, seconds=d2.second, microseconds=d2.microsecond) >>> fin = dt1 + dt2 >>> fin datetime.timedelta(0, 660, 582000) >>> str(fin) '0:11:00.582000'
import win32gui import re class WindowMgr: """Encapsulates some calls to the winapi for window management""" def __init__ (self): """Constructor""" self._handle = None def find_window(self, class_name, window_name = None): """find a window by its class_name""" self._handle = win32gui.FindWindow(class_name, window_name) def _window_enum_callback(self, hwnd, wildcard): '''Pass to win32gui.EnumWindows() to check all the opened windows''' if re.match(wildcard, str(win32gui.GetWindowText(hwnd))) != None: self._handle = hwnd def find_window_wildcard(self, wildcard): self._handle = None win32gui.EnumWindows(self._window_enum_callback, wildcard) def set_foreground(self): """put the window in the foreground""" win32gui.SetForegroundWindow(self._handle) w = WindowMgr() w.find_window_wildcard(".*Hello.*") w.set_foreground()
>>> L = [0, 0, 1, 1, 2, 2, 0] >>> list(itertools.dropwhile(lambda x: x == 0, L)) [1, 1, 2, 2, 0]
create or replace function func1(listof_id integer[]) returns setof func_type as $body$ x = [] for item in listof_id: query = "select {0} as x, {0} * 2 as y, {0} * 3 as z, {0} * 4 as zz".format(item) result_set = plpy.execute(query) x.extend([[l['x'], l['y'], l['z'], l['zz']] for l in result_set]) return x $body$ language plpythonu ; select * from func1(array[1,2]); x | y | z | zz ---+---+---+---- 1 | 2 | 3 | 4 2 | 4 | 6 | 8
with open("input.txt") as f: lastmarkedline = None for line in f: if line.startswith('>'): lastmarkedline = line elif lastmarkedline is not None: field1 = lastmarkedline.split()[1] field2 = line.split()[1] print "{0}\t{1}".format(field1, field2)
>>> 's1' > 's2' False >>> 's1' < 's2' True
def list_to_string(lst): return "\0".join(l) + "\0" def string_to_list(s): return s.split("\0")[:-1]
res = [ e + # filter list itself [ sum( # sum all l[4] # get fourth item if contains all for l in data # take each element of data if all(i in l for i in e) # check if contains all filter list ) ] # concat sum to list itself for e in ls # take each element of filter list ]
for i, each in enumerate(test_text): print each, test_text[i-5]
def param_type(**type_spec): def deco(f): def view(request, **kwargs): for k, type_ in type_spec.items(): kwargs[k] = type_(kwargs[k]) return f(request, **kwargs) return view return deco @param_type(number=int) def double(request, number=42): return HttpResponse(2*number)
import matplotlib.pyplot as plt import numpy as np from numpy.random import normal from scipy.optimize import curve_fit x_data = np.linspace(0, 2*np.pi, 30) y_data = np.sin(x_data) + normal(0, 0.2, 30) def func(x, a, b, c, d): return a * np.sin(b*x + c) + d parameter, covariance_matrix = curve_fit(func, x_data, y_data) x = np.linspace(min(x_data), max(x_data), 1000) plt.plot(x_data, y_data, 'rx', label='data') plt.plot(x, func(x, *parameter), 'b-', label='fit') # the star is to unpack the parameter array plt.show()
>>> s = StringIO.StringIO('1, "text1,text2", "text3, text4", a, b, c') >>> list(csv.reader(s, skipinitialspace=True)) [['1', 'text1,text2', 'text3, text4', 'a', 'b', 'c']]
html_code = urllib2.urlopen("xxx") html_code_list = html_code.readlines() data = "" for line in html_code_list: line = line.strip() if line.startswith("<h2"): data = data+line hp = MyHTMLParser() hp.feed(data) hp.close()
def filter_unique(df, n): data_by_date = df.groupby('date')['ID'].apply(lambda x: x.tolist()) filtered_data = {} previous = [] for i, (date, data) in enumerate(data_by_date.items()): if i >= n: if len(previous)==1: filtered_data[date] = list(set(previous[i-n]).intersection(data)) else: filtered_data[date] = list(set.intersection(*[set(x) for x in previous[i-n:]]).intersection(data)) else: filtered_data[date] = data previous.append(data) result = pd.DataFrame.from_dict(filtered_data, orient='index').stack() result.index = result.index.droplevel(1) filter_unique(df, 2) 1/31/15 2 1/31/15 3 1/31/15 4 11/30/14 1 11/30/14 2 11/30/14 3 12/31/14 2 12/31/14 3 2/28/15 1 2/28/15 3 3/31/15 1 3/31/15 4 4/30/15 4 4/30/15 5
>>> a = 'xyz-abc' >>> a.find('-') # return the index of the first instance of '-' 3 >>> a[a.find('-'):] # return the string of everything past that index '-abc'
text="""<script type="text/javascript" language="JavaScript"> ArtistName = "FUN."; SongName = "We Are Young"; </script> """ import re print dict(re.findall(r'((?:Artist|Song)Name)\s=\s"([^"]*)"', text)) # {'ArtistName': 'FUN.', 'SongName': 'We Are Young'}
>>> s = """12/31/1991 ... December 10, 1980 ... September 25, 1970 ... 2005-11-14 ... December 1990 ... October 12, 2005 ... 1993-06-26""" >>> from dateutil import parser >>> for i in s.splitlines(): ... d = parser.parse(i) ... print(d.strftime("%Y-%m-%d")) ... 1991-12-31 1980-12-10 1970-09-25 2005-11-14 1990-12-10 2005-10-12 1993-06-26
q = forms.CharField(label='search', widget=forms.TextInput(attrs={'placeholder': 'Search'}))
# in student.py class Student: Id="" def __init__(self, Id): self.Id = Id # in main.py, assume main.py and student.py are in the same folder. def main(): from student import Student print("is workign") temp = Student("50") ## I want to create the object of class Student and send an attribute if __name__ == '__main__': main()
>>> 1 == 1.0 True >>> hash(1) == hash(1.0) True
In [11]: pd.Panel(dict(enumerate([pd.DataFrame(x) for x in data]))) Out[11]: <class 'pandas.core.panel.Panel'> Dimensions: 2 (items) x 2 (major_axis) x 2 (minor_axis) Items axis: 0 to 1 Major_axis axis: buy to sell Minor_axis axis: eurcny to eurusd In [12]: pd.Panel(dict(enumerate([pd.DataFrame(x) for x in data])), items=['buy', 'sell'], major_axis=[0, 1], minor_axis=['eurusd', 'eurcny']) Out[12]: <class 'pandas.core.panel.Panel'> Dimensions: 2 (items) x 2 (major_axis) x 2 (minor_axis) Items axis: buy to sell Major_axis axis: 0 to 1 Minor_axis axis: eurusd to eurcny
bash-3.2$ python Python 2.7.5 (default, Mar 9 2014, 22:15:05) [GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin Type "help", "copyright", "credits" or "license" for more information. >>> mylist = [x*x for x in range(3)] >>> for i in mylist: ... print i ... 0 1 4 >>> exit() bash-3.2$
lst = [5, 10, 10, 20, 50, 50, 20] # Convert (and build reverse mapping) mapping = {} reverse_mapping = {} conv = [] for i in lst: v = mapping.setdefault(i, len(mapping)) reverse_mapping[v] = i conv.append(v) # Convert back back = [reverse_mapping[v] for v in conv]
import os import wx import wx.lib.agw.hypertreelist as HTL class MyFrame(wx.Frame): def __init__(self, parent): wx.Frame.__init__(self, parent, -1, pos = (0,0), size=(700, 900), title= "HyperTreeList Demo") # ------------------------------------------ # Algo for creating Files' List Starts here # ------------------------------------------ allFiles = [] for root, dirs, files in os.walk("D:\\DIRECTORY", topdown = True): for name in files: location = os.path.join(root, name) allFiles.append(location) treeList= HTL.HyperTreeList(self, agwStyle= wx.TR_DEFAULT_STYLE| 0x4000 ) treeList.AddColumn("List View") treeList.SetColumnWidth(0, 600) TLRoot = treeList.AddRoot ("D:", ct_type= 1) allDirs = [] allDirsItem = [] allDirs.append ("D:") allDirsItem.append(TLRoot) # -------------------------------------- # Algo for filling Tree List Starts here # -------------------------------------- for eachName in allFiles: nameSplit = eachName.split(os.sep) matchingDirFound = 0 lenNS= len(nameSplit) i=lenNS -1 for eachNameSplit in reversed(nameSplit): for eachDoneDir in reversed(allDirs): if eachNameSplit == eachDoneDir: matchingDirFound = 1 break if matchingDirFound == 1: break i= i-1 if matchingDirFound ==1: for k in range(i, lenNS-1): allDirsItem.append([]) allDirsItem[k+1] = treeList.AppendItem (allDirsItem[k], nameSplit[k+1], ct_type= 1) if len(allDirs)> k+1: allDirs[k+1] = nameSplit[k+1] else: allDirs.append (nameSplit[k+1])
from .. import myFile2
PROXY = "127.0.0.1:4321" webdriver.DesiredCapabilities.CHROME['proxy'] = { "httpProxy":PROXY, "ftpProxy":PROXY, "sslProxy":PROXY, "socksProxy":None #You probably don't want this "proxyType":"MANUAL", } driver = webdriver.Chrome()
def donuts(count): if count < 10: return 'Number of donuts: ' + str(count) else: return 'Number of donuts: many' print donuts(8)
import pdb; pdb.set_trace()
def my_preexec_fn(): os.setuid(10033) process = subprocess.Popen(cmdstr,stdout=subprocess.PIPE, stderr=subprocess.STDOUT, preexec_fn=my_preexec_fn)
print df Time Input A 0 0 3.3337 1 500 3.3096 2 1001 3.3044 3 1501 3.3630 4 2004 3.2822 5 2504 3.3335 d = pd.to_datetime('Tue Mar 08 11:20:40 EST 2016') print d 2016-03-08 11:20:40 print df['Time'].apply(lambda x: pd.offsets.Milli(x) + d ) 0 2016-03-08 11:20:40.000 1 2016-03-08 11:20:40.500 2 2016-03-08 11:20:41.001 3 2016-03-08 11:20:41.501 4 2016-03-08 11:20:42.004 5 2016-03-08 11:20:42.504 Name: Time, dtype: datetime64[ns]
return ('', 204)
>>> a = "9300.1 9600.6 9300.2 9300.1 9600.5 9600.7" >>> b = a.split() >>> adict = {} >>> for item in b: index = item.find('.') ast = item[:index] bst = item[index + 1:] if ast in adict: adict[ast] = adict[ast] + int(bst) else: adict[ast] = int(bst) >>> adict {'9600': 18, '9300': 4} >>> c = '' >>> for item in adict.keys(): c += '.'.join([item, str(adict[item])]) if item != adict.keys()[-1]: c += " " >>> c '9600.18 9300.4'
>>> from itertools import combinations >>> lis = [1,2,3,4] for i in xrange(1, len(lis)+1): #xrange will return the values 1,2,3,4 in this loop print list(combinations(lis, i)) ... [(1,), (2,), (3,), (4,)] [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)] [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)] [(1,2,3,4)]
import os subpath ="filedir/filename.txt" print os.path.join(os.getenv("LOCALAPPDATA"), subpath)
>>> def foo(): ... pass ... >>> def bar(): ... pass ... >>> import inspect >>> [member.__name__ for member in globals().values() \ ... if inspect.isfunction(member)] ['bar', 'foo']
directions = [] directions.append('forward') #execute command here directions.append('right') #execute command here then turn car 180 degrees #at this point directions = ['forward', 'right'] now you need to just pop the commands to execute issueCommand(directions.pop()) #sends 'right' issueCommand(directions.pop()) #sends 'forward'
tags = models.ManyToManyField('tags.Tag', ...)
>>> np.column_stack((a, b)) array([[ 1, 6], [ 2, 7], [ 3, 8], [ 4, 9], [ 5, 10]])
from scipy.sparse import csr_matrix rows = [0, 0, 0] columns = [100, 47, 150] data = [-1, +1, -1] m = csr_matrix( (data,(rows, columns)), shape=(1, 300) ) indices = m.indices # right permutation m.indices = (indices + 1) % m.shape[1] # left permutation m.indices = (indices - 1) % m.shape[1]
if language == "hun": LOGIN_LABEL_USERNAME_STR = u'Felhasználó' LOGIN_LABEL_PASSWORD_STR = u'Jelszó'
import matplotlib.pyplot as plt from matplotlib.patches import Circle from IPython.display import display %matplotlib notebook fig = plt.figure(figsize=(6, 6)) ax1 = plt.subplot(111, aspect='equal') ax1.set_xlim(-5,5) ax1.set_ylim(-5,5) circ = Circle((0,0), radius=1) ax1.add_patch(circ) def change_radius(r=1): circ.set_radius(r) display(fig) from ipywidgets import interact interact(change_radius, r=(1.0, 5))
% if mydict.get('somekey'): ${mydict['somekey'][0]['hellothere']}</td></tr> % endif
import math int(math.round((((year2 - year1) * 12) + (month2 - month1)) * 30.4375 + (day2 - day1)))
words = set(message.split(" ")) result = [int(word in words) for word in terms]
var engine = Python.CreateEngine(); var scope = engine.CreateScope(); scope.SetVariable("foo", 42); engine.Execute("print foo; bar=foo+11", scope); Console.WriteLine(scope.GetVariable("bar"));
training_data_without_sports, test_data_without_sports, feature_cols_all = ( divide_data('../data/feature_without_sports.csv', training_ratio))
call(['function1', file1, file2, 'data.labels=%s' % input])
def parent_to_child(parent): newchild= child() newchild.property= parent.property #... list_of_children= map(parent_to_child, list_of_parents)
>>> from mako.template import Template >>> print Template("${a/b}").render(a=1, b=2) 0 >>> print Template("${a/b}", future_imports=['division']).render(a=1, b=2) 0.5 >>> print Template("${'{0:.2f}'.format(a/b)}", future_imports=["division"]).render(a=1, b=2) 0.50
def Fin_adj(row, field): if field == 'Cr': if row[field] <= .7: return Range_eval(row[field],0.,.69,.0,.25) elif row[field] <= .9: return Range_eval(row[field],.7,.89,.25,.5) elif row[field] <= 1.1: return Range_eval(row[field],.9,1.10,.9,.95) elif row[field] <= 1.5: return Range_eval(row[field],1.1,1.49,.95,1) elif row[field] <= 3.: return 1 else: return Range_eval(row[field],3.,df[field].max(),.95,1) def Range_eval (val_in, Oldmin, Oldmax, Newmin, Newmax): return (((val_in - Oldmin) * (Newmax - Newmin)) / (Oldmax - Oldmin)) + Newmin
with open('myfile.txt') as f: try: header = next(f) except StopIteration as e: print "File is empty" for line in f: # do stuff with line
import sys reload(sys) sys.setdefaultencoding('utf8')
def largestPowerOfTwoThatIsAFactorOf(num): if num % 2 != 0: return 1 factor = 0 while num % 2 == 0: num /= 2 factor += 1 return 2 ** factor ## or return factor; as per your requirement
from itertools import product for y, x in product(range(3), repeat=2): do_something() for y1, x1 in product(range(3), repeat=2): do_something_else()
points = [] for line in file: x,y = eval(line) points.append((x,y)) result = np.array(points)
def getObjectFromLink(url): global r obj=praw.objects.Submission.get_info(r, url) if len(url.split('/'))==6: return obj else: return obj.comments[0]
(set-option :auto-config false) (declare-const x Int) (declare-const y Int) (assert (or (= x 1) (= y 1))) (check-sat) (get-model)
max_range = max(s.index) + 1 s = s.reindex(index=range(1, max_range), fill_value=0)
# Setup test data based on incomplete sample bytes = "\x16\x00\x00\x00\xdc\x5a\x9f\xd2\x31\x04\xca\x01\xba\x81\x89\x1a\x81\xe2\xcd\x01\xba\x81\x89\x1a\x81\xe2\xcd\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x24\x00\x52\x00\x65\x00\x63\x00\x79\x00\x63\x00\x6c\x00\x65\x00\x2e\x00\x42\x00\x69\x00\x6e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" bytes = bytes + "\x00"*(592-len(bytes)) import struct import codecs # typedef struct _WIN32_FIND_DATA { # DWORD dwFileAttributes; # FILETIME ftCreationTime; # FILETIME ftLastAccessTime; # FILETIME ftLastWriteTime; # DWORD nFileSizeHigh; # DWORD nFileSizeLow; # DWORD dwReserved0; # DWORD dwReserved1; # TCHAR cFileName[MAX_PATH]; # TCHAR cAlternateFileName[14]; fmt = "<L3Q4L520s28s" attrs, creation, access, write, sizeHigh, sizeLow, reserved0, reserved1, name, alternateName = struct.unpack(fmt, bytes) name = codecs.utf_16_le_decode(name)[0].strip('\x00') alternateName = codecs.utf_16_le_decode(alternateName)[0].strip('\x00') print name
import sys outfile = 'file path' with open(outfile, 'r') as f: lines = f.readlines() for line in lines: sys.stdout.write(line)
cardValue = { 'J': 11, 'Q': '12', 'K': 13, 'A': 14} def getCardValue(c) return cardValue[c] if c in cardValue else c while i <= len(aDeck): print("Player A: {}\nPlayer B: {}".format(aDeck[i],bDeck[i])) cardA = getCardValue(aDeck[i]) cardB = getCardValue(bDeck[i]) if cardA > cardB: print("Player A wins!\n") elif cardA < cardB: print("Player B wins!\n") else: print("It's a tie!\n") i += 1
h5file_path="/absolute/path/to/file" def readchunk(v): empty = h5.File(h5file_path) return empty['/mydata'][v,:] foo = sc.parallelize(range(0,100)).map(lambda v: readchunk(v)) foo.count()
[i for i in xrange(no_jobs) for x in xrange(T)]
#!/usr/bin/env perl use strict; use warnings; use autodie; use Fcntl qw(:seek); use List::Util qw( sum ); my ($input_file) = @ARGV; die "Need input file\n" unless defined $input_file; my $HEADER_SIZE = 4_096; my @typedef = ( { fields => [ qw( TS_INCR_LO TS_INCR_HI SEQID OP LUN NBLKS LBA_LO LBA_HI ) ], tmpl => 'LLLSSLLL', start => 0, size => 28, }, { fields => [ qw( TS_INCR_LO TS_INCR_HI SEQID OP LUN LATENCY_TICKS HOST_ID HOST_LUN ) ], tmpl => 'LLLSSLSS', start => 28, size => 24, }, ); open my $input, '<:raw', $input_file; seek $input, $HEADER_SIZE, SEEK_SET; my $BLOCK_SIZE = sum map $_->{size}, @typedef; read $input, my($buffer), $BLOCK_SIZE; my @structs; for my $t ( @typedef ) { my %struct; @struct{ @{ $t->{fields}} } = unpack( $t->{tmpl}, substr($buffer, $t->{start}, $t->{size}) ); push @structs, \%struct; } use Data::Dumper; print Dumper \@structs;
# Note, your path probably differs subprocess.call(r"C:\Program Files\Microsoft Office\Office12\EXCEL.exe") # The script will wait until Excel is closed and then continue
import numpy as np def f(*args, **kwargs): length = kwargs.get("length", 1) ret = [] for arg in args: if isinstance(arg, (float, int)): ret.append(np.repeat(arg, length)) else: ret.append(arg) return tuple(ret) print f(1, 2, length=4)
class MyDialog(gtk.Dialog, gtk.Buildable): __gtype_name__ = "MyDialog" def do_parser_finished(self, builder): self.treeview = builder.get_object("treeview1") # Do any other associated post-initialization
def combine(all_ensembles): """Combine the sub-estimators of a group of ensembles >>> from sklearn.datasets import load_iris >>> from sklearn.ensemble import ExtraTreesClassifier >>> iris = load_iris() >>> X, y = iris.data, iris.target >>> all_ensembles = [ExtraTreesClassifier(n_estimators=4).fit(X, y) ... for i in range(3)] >>> big = combine(all_ensembles) >>> len(big.estimators_) 12 >>> big.n_estimators 12 >>> big.score(X, y) 1.0 """ final_ensemble = copy(all_ensembles[0]) final_ensemble.estimators_ = [] for ensemble in all_ensembles: final_ensemble.estimators_ += ensemble.estimators_ # Required in old versions of sklearn final_ensemble.n_estimators = len(final_ensemble.estimators_) return final_ensemble
def justify(s, pos): if len(s)<=70: if pos == l: print 30*' ' + s elif pos == c: print ((70 - len(s))/2)*' ' + s elif pos == r: #you missed it here... print (40 - len(s))*' ' + s else: print('You entered invalid argument-(use either r, c or l)') else: print("The entered string is more than 70 character long. Couldn't be justified.")
text(0, 1,'matplotlib', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes)
import numpy as np import pandas as pd x = np.random.randn(5) y = np.sin(x) df = pd.DataFrame({'x':x, 'y':y}) df.plot('x', 'y', kind='scatter')
>>> l = np.array([-3, -2, -1, 0, 1, 2, 3, 4, 3, 2, 1, 0, -1, -2, -3, 4, -3, -2, -1, 0, 1, 2]) >>> epsilon = 1 >>> inds = np.argwhere(np.abs(l) < epsilon) # indices of “almost zero” items >>> left = inds[0] # index of the first “almost zero” value >>> right = inds[-1] # -//- last >>> l[:left + 1] = 0 # zero out everything to the left and including the first “almost zero” >>> l[right:] = 0 # -//- last >>> l > array([ 0, 0, 0, 0, 1, 2, 3, 4, 3, 2, 1, 0, -1, -2, -3, 4, -3, -2, -1, 0, 0, 0])
>>> (1/1/1/1/x + 2/(1+1/x)).normal() (2*x**2 + x + 1)/(x*(x + 1))
dic = {'p1':[0,0,0,0,7], 'p2': [0,0,0,0,5], 'p3': [0,0,0,0,8]} sorted_keys = sorted(dic, key=lambda k: dic[k][4]) print sorted_keys # ['p2', 'p1', 'p3']
protected string Solve(string Line1, string Line2) { string[] Inputs = Line1.Split(); uint A = uint.Parse(Inputs[0]); byte N = byte.Parse(Inputs[1]); Inputs = Line2.Split(); List<uint> Motes = new List<uint>(N); foreach (string Size in Inputs) { Motes.Add(uint.Parse(Size)); } Motes.Sort(); List<Action> Actions = new List<Action>(); while (Motes.Count > 0) { if (A > Motes[0]) { A += Motes[0]; Motes.RemoveAt(0); } else if(A > 1) { uint I; for (I = 0; A <= Motes[0]; I++) { A = (A << 1) - 1; } Actions.Add(new Action(I, Motes.Count)); } else { Actions.Add(new Action(101, Motes.Count)); break; } } uint TotalInserts = 0; int TotalRemoved = 0; for (int I = Actions.Count - 1; I >= 0; I--) { int StepRemaining = Actions[I].Remaining - TotalRemoved; uint StepInsert = Actions[I].Inserts; if (StepInsert >= StepRemaining) { TotalRemoved += StepRemaining; TotalInserts = 0; } else { TotalInserts += StepInsert; if (TotalInserts >= Actions[I].Remaining) { TotalRemoved = Actions[I].Remaining; TotalInserts = 0; } } } return (TotalInserts + TotalRemoved).ToString(); } struct Action { public uint Inserts; public int Remaining; public Action(uint inserts, int remaining) { Inserts = inserts; Remaining = remaining; } }
import itertools def covnersion_Anim(xPos,trueVal,*args): mTuple = args plt_bulk_lst = [] plt_head_lst = [] color_list = ['Green','Blue','Orchid','Cyan','Goldenrod','Salmon','Orange','Violet','Magenta'] f = plt.figure(figsize =(17,8)) ax = plt.gca() ax.set_xlim([min(xPos),max(xPos)]) ax.set_ylim([0,1]) ms = 5 for j,c in zip(range(len(mTuple)),itertools.cycle(color_list)): plt_bulk_lst.append(ax.plot([],[],color=c,ms=ms,marker='x',linestyle='none')[0]) plt_head_lst.append(ax.plot([xPos[0]],[mTuple[j][0]],color='Dark'+c,ms=ms,marker='o',linestyle='none')[0]) real_plt, = plot([],[],color='red') for j in range(1,len(xPos)): print j for hd_plt,blk_plt,m in zip(plt_head_lst,plt_bulk_lst,mTuple): hd_plt.set_xdata([xPos[j]]) hd_plt.set_ydata([m[j]]) blk_plt.set_ydata(m[:j]) blk_plt.set_xdata(xPos[:j]) real_plt.set_xdata(xPos[:j]) real_plt.set_ydata(trueVal[:j]) plt.pause(1) return f covnersion_Anim(range(12),rand(12),rand(12),rand(12),rand(12))
""" >>> from datetime import date >>> from workalendar.europe import France >>> cal = France() >>> cal.holidays(2013) [(datetime.date(2013, 1, 1), 'New year'), (datetime.date(2013, 4, 1), 'Easter Monday'), (datetime.date(2013, 5, 1), 'Labour Day'), (datetime.date(2013, 5, 8), 'Victory in Europe Day'), (datetime.date(2013, 5, 9), 'Ascension Thursday'), (datetime.date(2013, 5, 20), 'Whit Monday'), (datetime.date(2013, 5, 30), 'Corpus Christi'), (datetime.date(2013, 7, 14), 'Bastille Day'), (datetime.date(2013, 8, 15), 'Assumption of Mary to Heaven'), (datetime.date(2013, 11, 1), 'All Saints Day'), (datetime.date(2013, 11, 11), 'Armistice Day'), (datetime.date(2013, 12, 25), 'Christmas Day')] >>> cal.is_working_day(date(2013, 12, 25)) # it's Christmas False >>> cal.is_working_day(date(2013, 12, 29)) # it's Sunday False >>> cal.is_working_day(date(2013, 12, 26)) True
fig, ax = plt.subplots(1, 1, figsize=(9, 5)) ax.hist([data.ix[low:high, 'values'] for low, high in [(0, 70), (70, 85), (85, 90)]], bins=15, stacked=True, rwidth=1.0, label=['first70', 'next15', 'last5']) ax.legend()
tagger = ClassifierBasedPOSTagger(train=training_sentences, cutoff_prob=0.95)
import numpy as np from scipy.stats import truncnorm, norm a_s = np.random.uniform(0, 1, size=100) b_s = a_s + 0.2 cdf_start = norm.cdf(a_s) cdf_stop = norm.cdf(b_s) cdf_samples = np.random.uniform(0, 1, size=(100, 100)) cdf_samples *= (cdf_stop - cdf_start)[:, None] cdf_samples += cdf_start[:, None] truncnorm_samples = norm.ppf(cdf_samples)
html_theme_options = { 'page_width': 'auto', }
foo.__dict__
persons = [] for person in driver.find_elements_by_class_name('person'): title = person.find_element_by_xpath('.//div[@class="title"]/a').text company = person.find_element_by_xpath('.//div[@class="company"]/a').text persons.append({'title': title, 'company': company})
>>> import ast >>> x = u'[ "A","B","C" , " D"]' >>> x = ast.literal_eval(x) >>> x ['A', 'B', 'C', ' D'] >>> x = [n.strip() for n in x] >>> x ['A', 'B', 'C', 'D']
from traits.api import HasTraits, Button from traitsui.api import View, Item import numpy ##you may need to uncoment these 2 lines to prevent ##ImportErrors due to missing backends #from traits.etsconfig.api import ETSConfig #ETSConfig.toolkit = 'qt4' # or 'wx' from pyface.api import FileDialog, OK class ArrayToBeSaved(HasTraits): save_as = Button('save as') traits_view = View(Item('save_as')) def __init__(self): self.my_array = numpy.ones(3) def _save_as_changed(self): dlg = FileDialog(action='save as') if dlg.open() == OK: numpy.save(dlg.path, self.my_array) self.my_array = numpy.zeros(3) atbs = ArrayToBeSaved() atbs.configure_traits()
class RecordForm(forms.Form): name = forms.CharField(max_length=255) domain = forms.TypedChoiceField(choices=[]) type = forms.TypedChoiceField(choices=...) content = forms.CharField() ttl = forms.CharField() comment = forms.CharField() def __init__(self, *args, **kwargs): super(RecordForm, self).__init__(*args, **kwargs) self.fields['type'].choices = [(c.id, c.name) for c in Domain.objects.all()]
>>> import requests >>> from bs4 import BeautifulSoup >>> import re >>> url = "http://www.webconfs.com/domain-age.php" >>> domain = 'youtube.com' >>> r = requests.post(url, {'domains': domain, 'submit': 'submit'}) >>> soup = BeautifulSoup(r.content) >>> for item in soup.find_all('a', href=re.compile('website-history')): ... print item.text ... 9 years 0 months old
#urls.py urlpatterns = patterns('', url(r'^downloads/(?P<parent_id>\d+)/$', ParentView.as_view(), name='parents_list'), url(r'^downloads/(?P<parent_id>\d+)/(?P<child_id>\d+)/$', ChildView.as_view(), name='childs_list'), )
from sqlalchemy import * from sqlalchemy.orm import * from sqlalchemy.ext.declarative import declarative_base Base = declarative_base() class Foo(Base): __tablename__ = 'foo' id = Column(Integer, primary_key=True) status = Column(String) barId = Column(Integer, ForeignKey("bar.id")) bar = relationship("Bar", lazy="joined") class Bar(Base): __tablename__ = 'bar' id = Column(Integer, primary_key=True) e = create_engine("sqlite://", echo=True) Base.metadata.create_all(e) s = Session(e) s.add(Foo(id=1, bar=Bar())) s.commit() f1 = s.query(Foo).get(1) f1.status = 'done' s.commit() assert 'bar' not in f1.__dict__ s.refresh(f1) assert 'bar' in f1.__dict__ s.close() assert f1.bar.id == 1
from functools import partial import maya.cmds as cmds def one (*args): print '1' def two (*args): print '2' def radioSwitch (a, state, *args): if state: cmds.radioButtonGrp(a, e=True, enable=False) else: cmds.radioButtonGrp(a, e=True, enable=True) winID = 'xx' if cmds.window(winID, exists=True): cmds.deleteUI(winID) window = cmds.window(winID, sizeable = False, title="Resolution Switcher", widthHeight=(300, 100) ) cmds.columnLayout( ) cmds.text (label = '') cmds.text (label = '') cb_disable = cmds.checkBoxGrp( cat = (1,'left', 20), ncb = 1, l1=' DISABLE', offCommand = "" , onCommand = "" ) a = cmds.radioButtonGrp( cat = [(1,'left', 90),(2, 'left', 100)], enable=True, numberOfRadioButtons=2, on1 = one , on2 = two ) cmds.checkBoxGrp(cb_disable, e=1, offCommand = partial(radioSwitch, a, False)) cmds.checkBoxGrp(cb_disable, e=1, onCommand = partial(radioSwitch, a, True)) cmds.text (label = '') cmds.showWindow( window )
In [37]: df = pd.DataFrame(['Slow', 'Normal', 'Fast', 'Slow'], columns=['Speed']) In [38]: df Out[38]: Speed 0 Slow 1 Normal 2 Fast 3 Slow In [39]: pd.get_dummies(df['Speed']) Out[39]: Fast Normal Slow 0 0 0 1 1 0 1 0 2 1 0 0 3 0 0 1
if UserProfileLanuage.objects.filter(user=user, language=A).exists(): # do something
keywords = [] ... keywords.append(row[0].strip())
from bisect import bisect d = {"A": 0, "B": 0, "C": 0, "D": 0, "E": 0, "F": 0} def grade(score, breakpoints=[70, 80, 90, 100], grades='FBCDA'): i = bisect(breakpoints, score) return grades[i] for n in [66, 67, 77, 88, 80, 90, 91,100]: d[grade(n)] += n print(d) {'A': 100, 'C': 168, 'B': 77, 'E': 0, 'D': 181, 'F': 145}
import dir1 if __name__ == '__main__': __package__ = 'dir1.dir2' from .. import in_dir1
>>> import socket >>> import struct >>> addr_long = int("0200A8C0",16) >>> hex(addr_long) '0x200a8c0' >>> struct.pack("<L", addr_long) '\xc0\xa8\x00\x02' >>> socket.inet_ntoa(struct.pack("<L", addr_long)) '192.168.0.2' >>>
import sys for arg in sys.argv: print arg
from django.db import models from django.db import transaction class MyModel(models.Model): # model definition @transaction.commit_on_success() def save(self, *args, **kwargs): try: super(MyModel, self).save(*args, **kwargs) do_other_things() obj2 = MySecondModel(mymodel = self, foo = "bar") obj2.save() except: print 'exception' raise else: print 'job done' class MySecondModel(models.Model): myModelId = models.ForeignKey(MyModel) # other fields defining this model
import encodings import os import pkgutil modnames=set([modname for importer, modname, ispkg in pkgutil.walk_packages( path=[os.path.dirname(encodings.__file__)], prefix='')]) aliases=set(encodings.aliases.aliases.values()) print(modnames-aliases) # set(['charmap', 'unicode_escape', 'cp1006', 'unicode_internal', 'punycode', 'string_escape', 'aliases', 'palmos', 'mac_centeuro', 'mac_farsi', 'mac_romanian', 'cp856', 'raw_unicode_escape', 'mac_croatian', 'utf_8_sig', 'mac_arabic', 'undefined', 'cp737', 'idna', 'koi8_u', 'cp875', 'cp874', 'iso8859_1']) print(aliases-modnames) # set(['tactis']) codec_names=modnames.union(aliases) print(codec_names) # set(['bz2_codec', 'cp1140', 'euc_jp', 'cp932', 'punycode', 'euc_jisx0213', 'aliases', 'hex_codec', 'cp500', 'uu_codec', 'big5hkscs', 'mac_romanian', 'mbcs', 'euc_jis_2004', 'iso2022_jp_3', 'iso2022_jp_2', 'iso2022_jp_1', 'gbk', 'iso2022_jp_2004', 'unicode_internal', 'utf_16_be', 'quopri_codec', 'cp424', 'iso2022_jp', 'mac_iceland', 'raw_unicode_escape', 'hp_roman8', 'iso2022_kr', 'cp875', 'iso8859_6', 'cp1254', 'utf_32_be', 'gb2312', 'cp850', 'shift_jis', 'cp852', 'cp855', 'iso8859_3', 'cp857', 'cp856', 'cp775', 'unicode_escape', 'cp1026', 'mac_latin2', 'utf_32', 'mac_cyrillic', 'base64_codec', 'ptcp154', 'palmos', 'mac_centeuro', 'euc_kr', 'hz', 'utf_8', 'utf_32_le', 'mac_greek', 'utf_7', 'mac_turkish', 'utf_8_sig', 'mac_arabic', 'tactis', 'cp949', 'zlib_codec', 'big5', 'iso8859_9', 'iso8859_8', 'iso8859_5', 'iso8859_4', 'iso8859_7', 'cp874', 'iso8859_1', 'utf_16_le', 'iso8859_2', 'charmap', 'gb18030', 'cp1006', 'shift_jis_2004', 'mac_roman', 'ascii', 'string_escape', 'iso8859_15', 'iso8859_14', 'tis_620', 'iso8859_16', 'iso8859_11', 'iso8859_10', 'iso8859_13', 'cp950', 'utf_16', 'cp869', 'mac_farsi', 'rot_13', 'cp860', 'cp861', 'cp862', 'cp863', 'cp864', 'cp865', 'cp866', 'shift_jisx0213', 'johab', 'mac_croatian', 'cp1255', 'latin_1', 'cp1257', 'cp1256', 'cp1251', 'cp1250', 'cp1253', 'cp1252', 'cp437', 'cp1258', 'undefined', 'cp737', 'koi8_r', 'cp037', 'koi8_u', 'iso2022_jp_ext', 'idna'])
In [248]: d = {112: 'en', 113: 'es', 114: 'es', 111: 'en'} df['D'] = df['U'].map(d) df Out[248]: U L D 0 111 en en 1 112 en en 2 112 es en 3 113 es es 4 113 ja es 5 113 zh es 6 114 es es
class App(Frame): def __init__(self, master): self.matrix = Grid(self, 10, 10) self.label = Label(self, text="Hello") self.matrix.grid(row=0, column=0, sticky="nsew") self.label.grid(row=0, column=1, sticky="nsew") self.grid_rowconfigure(0, weight=1) self.grid_columnconfigure(0, weight=1)
# coding: utf-8 from nose.plugins.attrib import attr @attr("foo", "bar", "baz") def test1(): print "I'm test1" @attr("foo") def test_2(): print "I'm test2"
self.testbed.init_blobstore_stub() self.testbed.init_files_stub() from google.appengine.api import files file_name = files.blobstore.create(mime_type='application/octet-stream') with files.open(file_name, 'a') as f: f.write('blobdata') files.finalize(file_name) blob_key = files.blobstore.get_blob_key(file_name)
#!/usr/bin/python email = "" # Initialize the email count = 0 # and counter import fileinput for line in fileinput.input("word.txt"): # Interator: process a line at a time myArr = line.split(",") if (email != myArr[0]): # New email; print and reset count, email for n in range(0,count): print email + "," + str(n+1) + "," + str(count) email = myArr[0] count = 1 else: # Same email, increment count count = count + 1 # Print the final email for n in range(0,count): print email + "," + str(n+1) + "," + str(count)
import datetime queryset = MyModel.objects.filter(\ time_created__lt=(datetime.now()-datetime.timedelta(minutes=3)))
>>> neis = g.neighbors("a", mode="out") >>> g.vs[neis]["name"]
net use \\computername\path\to\dir /user:username password
In [4]: df = pd.read_csv('triangle.csv', header=None) In [5]: df Out[5]: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 0 75 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 1 95 64 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 2 17 47 82 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 3 18 35 87 10 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 4 20 4 82 47 65 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 5 19 1 23 75 3 34 NaN NaN NaN NaN NaN NaN NaN NaN NaN 6 88 2 77 73 7 63 67 NaN NaN NaN NaN NaN NaN NaN NaN 7 99 65 4 28 6 16 70 92 NaN NaN NaN NaN NaN NaN NaN 8 41 41 26 56 83 40 80 70 33 NaN NaN NaN NaN NaN NaN 9 41 48 72 33 47 32 37 16 94 29 NaN NaN NaN NaN NaN 10 53 71 44 65 25 43 91 52 97 51 14 NaN NaN NaN NaN 11 70 11 33 28 77 73 17 78 39 68 17 57 NaN NaN NaN 12 91 71 52 38 17 14 91 43 58 50 27 29 48 NaN NaN 13 63 66 4 68 89 53 67 30 73 16 69 87 40 31 NaN 14 4 62 98 27 23 9 70 98 73 93 38 53 60 4 23 In [24]: for row in df.iterrows(): ....: for item in row[1]: ....: if np.isnan(item) == False: ....: l.append((n, item)) ....: n += 1 In [26]: import networkx as nx In [27]: G = nx.Graph() In [28]: G.add_nodes_from(l) In [29]: G.nodes() Out[29]: [(113, 73.0), (74, 39.0), (64, 51.0), (111, 70.0), (72, 17.0), (69, 28.0), (102, 87.0), (46, 48.0), (118, 4.0), (105, 4.0), (92, 66.0), (55, 53.0), (19, 3.0), (17, 23.0), (90, 48.0), (18, 75.0), (27, 67.0), (37, 41.0), (8, 87.0), (59, 25.0), (43, 70.0), etc......
request.db = ...connect...
re.sub(r'\d+"', "", strin)
import seaborn as sns iris = sns.load_dataset("iris") x_vars = ['sepal_length', 'sepal_width', 'petal_length'] y_vars = ['petal_width'] pp = sns.pairplot(data=iris, x_vars=x_vars, y_vars=y_vars) _ = plt.setp(pp.axes[0,1].get_yticklabels(), visible=True) #changing the 2nd plot
In [6]: a = [['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h'], ['i', 'j', 'k', 'l'], ['m', 'n'], ['o']] In [7]: a.sort(key=len) In [8]: print a [['o'], ['d', 'e'], ['m', 'n'], ['a', 'b', 'c'], ['f', 'g', 'h'], ['i', 'j', 'k', 'l']]
class ViewPerso (QtGui.QTableView): def __init__(self, parent = None): super(ViewPerso, self).__init__(parent) self.parent = parent def currentChanged (self, current, previous): index = current.sibling(current.row(), 4) try: if not index.data() or len(self.parent.vidsSelected()) > 1: return except AttributeError: pass self.clicked.emit(current) self.scrollTo(current) def keyboardSearch (self, search): pass def keyPressEvent (self, e): super(ViewPerso, self).keyPressEvent(e) e.ignore()
>>> p = "^[a-z]{2}:(\w+)$" >>> re.match(p, "eu:road").group(1) 'road' >>> re.match(p, "road:eu") None
$.ajaxSetup({ beforeSend: function(xhr, settings) { function getCookie(name) { var cookieValue = null; if (document.cookie && document.cookie != '') { var cookies = document.cookie.split(';'); for (var i = 0; i < cookies.length; i++) { var cookie = jQuery.trim(cookies[i]); // Does this cookie string begin with the name we want? if (cookie.substring(0, name.length + 1) == (name + '=')) { cookieValue = decodeURIComponent(cookie.substring(name.length + 1)); break; } } } return cookieValue; } if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) { // Only send the token to relative URLs i.e. locally. xhr.setRequestHeader("X-CSRFToken", getCookie('csrftoken')); } } });
>>> text = "Racławicka Rógé" >>> text.encode('1252', 'ignore').decode('1252') 'Racawicka Rógé'
q = session.query(Person) q = q.filter(Person.building == g.current_building) q = q.filter(~Person.groups.any())
In [153]: def num_spells(x): t = list(x.unique()) return [t.index(el)+1 for el in x] d1.apply(num_spells, axis=1) Out[153]: 1962 1963 1964 1965 c1 1 1 1 2 c2 1 1 2 2 c3 1 1 1 1 In [144]: from itertools import chain, repeat def spell_len(x): t = list(x.value_counts()) return list(chain.from_iterable(repeat(i,i) for i in t)) d1.apply(spell_len, axis=1) Out[144]: 1962 1963 1964 1965 c1 3 3 3 1 c2 2 2 2 2 c3 4 4 4 4
(defn extract-data "extract 4 integer from a string line according to a package name" [pkg line] (map read-string (rest (first (re-seq (re-pattern (str pkg ".*>(\\d+)/(\\d+).*>(\\d+)/(\\d+)")) line))))) (defn scan-lines-by-pkg "scan all string lines and extract all data as integer sequences according to package names" [pkgs lines] (filter seq (for [pkg pkgs line lines] (extract-data pkg line)))) (defn sum-data "add all data in valid lines together" [pkgs lines] (apply map + (scan-lines-by-pkg pkgs lines))) (defn get-percent [covered all] (str (format "%.2f" (float (/ (* covered 100) all))) "%")) (defn get-cov [pkgs lines] {:line-cov (apply get-percent (take 2 (sum-data pkgs lines))) :branch-cov (apply get-percent (drop 2 (sum-data pkgs lines)))}) (get-cov ["d" "f"] ["abc" "d>11/23d>34/89d" "e>25/65e>13/25e" "f>36/92f>19/76"])
import sys import select import tty import termios class NonBlockingConsole(object): def __enter__(self): self.old_settings = termios.tcgetattr(sys.stdin) tty.setcbreak(sys.stdin.fileno()) return self def __exit__(self, type, value, traceback): termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.old_settings) def get_data(self): if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []): return sys.stdin.read(1) return False if __name__ == '__main__': # Use like this with NonBlockingConsole() as nbc: i = 0 while 1: print i i += 1 if nbc.get_data() == '\x1b': # x1b is ESC break
query="select 1<2 as val;" result=plpy.execute(query) if result[0]["val"]: print 'of corse: 1 < 2' else: print 'this will never be printed'
from django.db.models import Count Tag.objects.annotate(action_count=Count('action'))
dt = pandas.read_csv('file.csv', index_col=1, skiprows=1).T.to_dict()
>>> m = max(a) >>> [i for i, j in enumerate(a) if j == m] [9, 12]
import json, subprocess def remove_unused_snaps(region): line = 'aws ec2 describe-images --region {} --owners self'.format(region) p = subprocess.Popen(line.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE) out, err = p.communicate() obj = json.loads(out.decode("utf-8")) snaps_used = set(i['BlockDeviceMappings'][0]['Ebs']['SnapshotId'] for i in obj['Images']) line = 'aws ec2 describe-snapshots --region {} --owner-ids self'.format(region) p = subprocess.Popen(line.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE) out, err = p.communicate() obj = json.loads(out.decode("utf-8")) snaps_old = set(i['SnapshotId'] for i in obj['Snapshots']) line = 'aws ec2 delete-snapshot --region {} --snapshot-id'.format(region) for snap in list(snaps_old - snaps_used): p = subprocess.Popen(line.split() + [snap], stdout=subprocess.PIPE, stderr=subprocess.PIPE) out, err = p.communicate() print(snap, out, err)
logger(level="debug")(repeat(5)(foo))(var)
>>> [(k, '=', v) for k, v in d.items()] [('a', '=', 1), ('c', '=', 3), ('b', '=', 2)]
class MyDict(dict): def __repr__(self): s = "{" for key in self: s += "{0}:{1}, ".format(key, self[key]) if len(s) > 1: s = s[0: -2] s += "}" return s MyDict({'a': 1, 'b': 2}) {a:1, b:2}
import csv with open('summ.csv') as csvfile: reader = csv.DictReader(csvfile) kept2 = [row for row in reader]
awk '{for(i=1;i<=NF;i+=2)$(i+1)=$(i+1)OFS sprintf("%.3f",1-$(i+1)-$i)}1' OFS='\t' file 0.800 0.200 0.000 0.000 0.200 0.800 0.800 0.200 0.000 0.000 0.900 0.100 0.000 0.900 0.100 0.000 0.900 0.100 0.900 0.010 0.090 0.900 0.010 0.090 0.770 0.010 0.220
QByteArray QChar QColor QDate QDateTime QKeySequence QLatin1Char QLatin1String QLine QLineF QMatrix QPoint QPointF QPolygon QRect QRectF QSize QSizeF QString QTime
import os import smtplib from email.MIMEMultipart import MIMEMultipart from email.MIMEText import MIMEText from email.MIMEImage import MIMEImage from email.MIMEBase import MIMEBase from email import Encoders #Set up crap for the attachments files = "/tmp/test/dbfiles" filenames = [os.path.join(files, f) for f in os.listdir(files)] #print filenames #Set up users for email gmail_user = "joe@email.com" gmail_pwd = "somepasswd" recipients = ['recipient1','recipient2'] #Create Module def mail(to, subject, text, attach): msg = MIMEMultipart() msg['From'] = gmail_user msg['To'] = ", ".join(recipients) msg['Subject'] = subject msg.attach(MIMEText(text)) #get all the attachments for file in filenames: part = MIMEBase('application', 'octet-stream') part.set_payload(open(file, 'rb').read()) Encoders.encode_base64(part) part.add_header('Content-Disposition', 'attachment; filename="%s"' % file) msg.attach(part) mailServer = smtplib.SMTP("smtp.gmail.com", 587) mailServer.ehlo() mailServer.starttls() mailServer.ehlo() mailServer.login(gmail_user, gmail_pwd) mailServer.sendmail(gmail_user, to, msg.as_string()) # Should be mailServer.quit(), but that crashes... mailServer.close() #send it mail(recipients, "Todays report", "Test email", filenames)
import asyncio @asyncio.coroutine def echo_server(): yield from asyncio.start_server(handle_connection, 'localhost', 8000) @asyncio.coroutine def handle_connection(reader, writer): while True: data = yield from reader.read(8192) if not data: break writer.write(data) loop = asyncio.get_event_loop() loop.run_until_complete(echo_server()) try: loop.run_forever() finally: loop.close()
for f in glob.glob(...)[n:]: with open(f) as inputfile:
>>> def numeric_compare(x, y): return x - y >>> sorted([5, 2, 4, 1, 3], cmp=numeric_compare) [1, 2, 3, 4, 5]
dict3 = {k: [dict2[i] for i in v] for k, v in dict1.items()}
>>> from itertools import izip_longest >>> data=[[('a1','b1'),('c1','d1')],[('a2','b2'),('c2','d2'),('e2','f2')],[('a3','b3'),('c3','d3'),('e3','f3')]] >>> for columns in izip_longest(*data,fillvalue=''): print '\t'.join(map(' '.join,columns)) a1 b1 a2 b2 a3 b3 c1 d1 c2 d2 c3 d3 e2 f2 e3 f3
import boto import threading import tempfile import os DEFAULT_CHUNK_SIZE = 2**20 * 64 # 64 MB per request class BigFile(object): def __init__(self, file_obj, file_size, chunksize=DEFAULT_CHUNK_SIZE, start=True): self._file_obj = file_obj self._file_size = file_size self._lock = threading.RLock() self._load_condition = threading.Condition(self._lock) self._load_run = True self._loc = 0 self._chunk_size = chunksize chunk_count = self._file_size // self._chunk_size chunk_count += 1 if self._file_size % self._chunk_size else 0 self._chunks = [None for _ in xrange(chunk_count)] self._load_thread = threading.Thread(target=self._load) if start: self._load_thread.start() def _chunk_loc(self): ' Returns (chunk_num, chunk_offset) for a given location in the larger file ' return self._loc // self._chunk_size, self._loc % self._chunk_size def _load_chunk(self, chunk_num): tf = tempfile.TemporaryFile() start_idx = chunk_num * self._chunk_size self._file_obj.seek(start_idx) tf.write(self._file_obj.read(self._chunk_size)) with self._lock: self._chunks[chunk_num] = (tf, tf.tell()) # (tempfile, size) self._load_condition.notify() def _load(self): while self._load_run: # check current chunk, load if needed with self._lock: chunk_num, _ = self._chunk_loc() chunk_and_size = self._chunks[chunk_num] if chunk_and_size is None: self._load_chunk(chunk_num) # find next empty chunk for i in xrange(len(self._chunks)): cur_chunk = chunk_num + i cur_chunk %= len(self._chunks) # loop around if self._chunks[cur_chunk] is None: self._load_chunk(cur_chunk) break else: # all done, stop thread break def seek(self, loc, rel=os.SEEK_SET): with self._lock: if rel == os.SEEK_CUR: self._loc += loc elif rel == os.SEEK_SET: self._loc = loc elif rel == os.SEEK_END: self._loc = self._file_size + loc def read(self, bytes_to_read): ret = [] with self._lock: chunk_num, chunk_offset = self._chunk_loc() while (bytes_to_read > 0 or bytes_to_read == -1) and chunk_num < len(self._chunks): while not self._chunks[chunk_num]: self._load_condition.wait() chunk, size = self._chunks[chunk_num] cur_chunk_bytes = min(self._chunk_size-chunk_offset, bytes_to_read, size) chunk.seek(chunk_offset, os.SEEK_SET) data = chunk.read(cur_chunk_bytes) ret.append(data) bytes_to_read -= len(data) chunk_num += 1 return ''.join(ret) def start(self): self._load_thread.start() def join(self): self._load_thread.join() def stop(self): self._load_run = False class S3RangeReader: def __init__(self, key_obj): self._key_obj = key_obj self.size = self._key_obj.size self._pos = 0 def __len__(self): return self.size def seek(self, pos, rel=os.SEEK_SET): if rel == os.SEEK_CUR: self._pos += pos elif rel == os.SEEK_SET: self._pos = pos elif rel == os.SEEK_END: self._pos = self.size + pos def read(self, bytes=-1): if bytes == 0 or self._pos >= self.size: return '' else: if bytes == -1: bytes = self.size headers = {'Range': 'bytes=%s-%s' % (self._pos, self._pos + bytes - 1)} # S3 ranges are closed ranges: [start,end] return self._key_obj.get_contents_as_string(headers=headers) if __name__ == '__main__': key = boto.s3_connect().get_bucket('mybucket').get_key('my_key') reader = S3RangeReader(key) bf = BigFile(reader, len(reader)) # download starts by default bf.seek(1000000) bf.read(100) # blocks bf.seek(0) bf.read(100) # should not block
lst1, lst2, lst3 = map(list, zip(*tuple_of_lists))
rows_xpath = XPath("//*[@id='content-primary']/table/tbody/tr[td[1]/span/span//text()='%s']" % (date))
import csv cr = csv.reader(open("temp.csv","rb")) arr = range(100) #adjust to needed x = 0 for row in cr: arr[x] = row x += 1 print arr[:22] #adjust to needed
import matplotlib.pyplot as plt import numpy as np import matplotlib.ticker as ticker img = np.random.randn(300,300) myplot = plt.imshow(img) def fmt(x, pos): a, b = '{:.2e}'.format(x).split('e') b = int(b) return r'${} \times 10^{{{}}}$'.format(a, b) plt.colorbar(myplot, format=ticker.FuncFormatter(fmt)) plt.show()
t = np.arange(0.0, 2.0, 0.01) s = np.sin(2*np.pi*t) plt.plot(t, s, c=seaborn.color_palette()[2]) plt.plot(t, 2*s, c=seaborn.color_palette()[2])
In [11]: ds.map(json.loads).apply(lambda x: pd.Series([x["a"] if "a" in x else None, x["b"] if "b" in x else None])) Out[11]: 0 1 TNFRSF18 0.0 0.0 SDF4 NaN 0.0 TNFRSF4 0.0 NaN B3GALT6 0.0 0.0 C1orf159 3.0 NaN BC033949 NaN 2.0 ISG15 5.0 3.0 WASH7P 0.0 NaN NOC2L 0.0 NaN LOC643837 0.0 4.0
if e_move_count <= 500: self.enemy.move(e_xMove, e_yMove) e_move_count += 1 if e_move_count >= 500: e_xMove = random.randint(-1,1) e_yMove = random.randint(-1,1) self.enemy.move(e_xMove, e_yMove) e_move_count = 0
data = data.reshape(81, 201, 3) x = data[...,0] y = data[...,1] z = data[...,2] CS = plt.contourf(x,y,z,200,cmap=plt.cm.jet,rasterized=True) plt.colorbar() plt.show()
result = format(int(strvalue, 16) + 37, 'x')
>>> def fn(*args): ... print args ... >>> fn([1, 2, 3]) ([1, 2, 3],) >>> fn(*[1, 2, 3]) (1, 2, 3) >>>
>>> numpy.minimum.accumulate([5,4,6,10,3]) array([5, 4, 4, 4, 3])
while True: try: speed_limit = int(input("What is your speed zone? ")) break except ValueError: print("That is not a number! ") continue while True: print("What speed is the car going?") try: pass_car_speed = int(input( "Enter speed, or 0 to quit: ")) except ValueError: print("Invalid number! ") continue if not pass_car_speed: # 0 is False, non-zero True break # quit loop (and program) if pass_car_speed <= speed_limit: print("This car is under the limit. No ticket needed!") else: fine = (pass_car_speed - speed_limit) * 10 name = input("What is the car model name? ") print("____________________________________________") print(" | P O L I C E T I C K E T | ") print(" | Speed: ",pass_car_speed," ") print(" | Fine Cost: ",fine," ") print(" | Car Name: ",name," ") print("____________________________________________") print("Goodbye!")
import os, re def purge(dir, pattern): for f in os.listdir(dir): if re.search(pattern, f): os.remove(os.path.join(dir, f))
import gtk icon_theme = gtk.icon_theme_get_default() icon_info = icon_theme.lookup_icon("my-icon-name", 48, 0) print icon_info.get_filename()
import gmpy2 def matching_bits(x, y): '''Returns the number of bits that match between x and y. The sign of x and y are ignored. x and y must be of type mpfr.''' # Force both values to be positive, and x >= y. x = abs(x) y = abs(y) if x < y: x, y = y, x if not isinstance(x, type(gmpy2.mpfr(0))) or not isinstance(y, type(gmpy2.mpfr(0))): raise TypeError("Arguments must be of type 'mpfr'.") x_bits, x_exp, x_prec = x.digits(2) y_bits, y_exp, y_prec = y.digits(2) # (x_exp - y_exp) is the number of zeros that must be prepended # to x to align the mantissas. If that is greater than the precision # y, then no bits in common. if (x_exp - y_exp) > x_prec: return 0 x_bits = "0" * (x_exp - y_exp) + x_bits count = 0 while count < min(x_prec, y_prec) and x_bits[count] == y_bits[count]: count += 1 return count
class DynamicModelSerializer(serializers.ModelSerializer): """ A ModelSerializer that takes an additional `fields` argument that controls which fields should be displayed, and takes in a "nested" argument to return nested serializers """ def __init__(self, *args, **kwargs): fields = kwargs.pop("fields", None) exclude = kwargs.pop("exclude", None) nest = kwargs.pop("nest", None) if nest is not None: if nest == True: self.Meta.depth = 1 super(DynamicModelSerializer, self).__init__(*args, **kwargs) if fields is not None: # Drop any fields that are not specified in the `fields` argument. allowed = set(fields) existing = set(self.fields.keys()) for field_name in existing - allowed: self.fields.pop(field_name) if exclude is not None: for field_name in exclude: self.fields.pop(field_name)
def flip(picture): width = getWidth(picture) height = getHeight(picture) for y in range(0, height/2): for x in range(0, width): **p1 = getPixel(picture, width - 1 - x, y)** p2 = getPixel(picture, x, height - 1 - y,) color = getColor(p1) setColor(p1, getColor(p2)) setColor(p2, color)
# api.py class CustomCommentResource(ModelResource): children = fields.ToManyField('self', lambda bundle: bundle.obj.customcomment_set.all(), null=True, blank=True, full=True) class Meta: queryset = CustomComment.objects.filter(parent_comment=None, active=True) resource_name = 'comment'
#!/usr/bin/python # -*- coding: utf-8 -*- from ctypes import windll, Structure, c_long, byref #windows only class RECT(Structure): _fields_ = [ ('left', c_long), ('top', c_long), ('right', c_long), ('bottom', c_long), ] def width(self): return self.right - self.left def height(self): return self.bottom - self.top def onTop(window): SetWindowPos = windll.user32.SetWindowPos GetWindowRect = windll.user32.GetWindowRect rc = RECT() GetWindowRect(window, byref(rc)) SetWindowPos(window, -1, rc.left, rc.top, 0, 0, 0x0001)
class ImageFactory(factory.django.DjangoModelFactory): class Meta: model = Image image = factory.LazyAttribute( lambda _: ContentFile( factory.django.ImageField()._make_data( {'width': 1024, 'height': 768} ), 'example.jpg' ) )
class MyAuthenticationForm(AuthenticationForm): username = forms.CharField(label=_("Username"), max_length=64)
>> s = "banana 4 apple 2 orange 4" >> lst = s.split() >> dict(zip(lst[::2], lst[1::2]))
import ctypes def deref(addr, typ): return ctypes.cast(addr, ctypes.POINTER(typ)) deref(id(4), ctypes.c_int)[6] = 5 2 + 2 #>>> 5 2 + 2 == 5 #>>> True
(r'/browse/article/([a-zA-Z0-9_-]+)(?:/([0-9]*))?', ArticleHandler),
class Employee: pass def foo(self): pass Employee.foo = foo
dict( (o.name,o) for o in obj_list )[name]
files_url = "%s/files/content" % (settings.BOX_API_HOST) headers = {"Authorization": "BoxAuth api_key=%s&auth_token=%s" % (settings.BOX_API_KEY, self.doctor.box_auth_token) } file_root, file_suffix = os.path.splitext(str(self.document)) filename = "%s%s" % (slugify(self.description), file_suffix) files = { 'filename1': open(settings.MEDIA_ROOT + str(self.document), 'rb'), } data = { 'filename1': filename, 'folder_id': str(self.patient.get_box_folder()), } r = requests.post(files_url, headers=headers, files=files, data=data) file_response = simplejson.loads(r.text) try: if int(file_response['entries'][0]['id']) > 0: box_file_id = int(file_response['entries'][0]['id']) #Update the name of file file_update_url = "%s/files/%s" % (settings.BOX_API_HOST, box_file_id) data_update = {"name": filename} file_update = requests.put(file_update_url, data=simplejson.dumps(data_update), headers=headers) LocalDocument.objects.filter(id=self.id).update(box_file_id=box_file_id) except: pass
[~]$ python Python 2.7.5+ (default, Sep 17 2013, 17:31:54) [GCC 4.8.1] on linux2 Type "help", "copyright", "credits" or "license" for more information. >>> >>> import requests >>> >>> r = requests.get('http://www.google.com') >>> >>> r.status_code 200 >>> r.content '<!doctype html><html itemscope="" itemtype="http://schema.org/WebPage" lang="en"><head><meta content="Search the world\'s information, including webpages, images, videos and more. Google has many special features to help you find exactly what you\'re looking for." name="description"><meta content="noodp" name="robots"><meta content="/logos/doodles/2015/eiji-tsuburayas-114th-birthday-4809204506296320.2-hp.jpg" itemprop="image"><meta content="Make a movie with Eiji Tsuburaya! #GoogleDoodle" property="og:description"><meta content="http://www.google.com/logos/doodles/2015/eiji-tsuburayas-114th-birthday-4809204506296320.2-hp.jpg" property="og:image"><meta content="356" property="og:image:width"><meta content="200" property="og:image:height"><title>Google</title><script>(function(){window.google={kEI:\'QuybVeO7Osy4sAXDxIKQCg\',kEXPI:\'18168,3700062,3700306,4020727,4029815,4032235,4032500,4032678,4033307,4033344,4034631,4034882,4036363,4036366,4036470,4036848,4036948,4037333,4037457,4037855,4037921,4037960,4038777,4039047,4039280,4039379,4039386,4039403,4039706,4039878,4040028,4040117,4040135,4040240,8300096,8300200,8300202,8500394,8501295,8501406,8501489,10200083,10201088,10201270,10201302,10201304\',authuser:0,kscs:\'c9c918f0_10\'};google.kHL=\'en\';})();(function(){google.lc=[];google.li=0;google.getEI=function(a){for(var b;a&&(!a.getAttribute||!(b=a.getAttribute("eid")));)a=a.parentNode;return b||google.kEI};google.getLEI=function(a){for(var b=null;a&&(!a.getAttribute||!(b=a.getAttribute("leid")));)a=a.parentNode;return b};google.https=function(){return"https:"==window.location.protocol};google.ml=function(){return null};google.time=function(){return(new Date).getTime()};google.log=function(a,b,d,e,g){a=google.logUrl(a,b,d,e,g);if(""!=a){b=new Image;var c=google.lc,f=google.li;c[f]=b;b.onerror=b.onload=b.onabort=function(){delete c[f]};window.google&&window.google.vel&&window.google.vel.lu&&window.google.vel.lu(a);b.src=a;google.li=f+1}};google.logUrl=function(a,b,d,e,g){var c="",f=google.ls||"";if(!d&&-1==b.search("&ei=")){var h=google.getEI(e),c="&ei="+h;-1==b.search("&lei=")&&((e=google.getLEI(e))?c+="&lei="+e:h!=google.kEI&&(c+="&lei="+google.kEI))}a=d||"/"+(g||"gen_204")+"?atyp=i&ct="+a+"&cad="+b+c+f+"&zx="+google.time();/^http:/i.test(a)&&google.https()&&(google.ml(Error("a"),!1,{src:a,glmm:1}),a="");return a};google.y={};google.x=function(a,b){google.y[a.id]=[a,b];return!1};google.load=function(a,b,d){google.x({id:a+k++},function(){google.load(a,b,d)})};var k=0;})();google.kCSI={};var _gjwl=location;function _gjuc(){var a=_gjwl.href.indexOf("#");if(0<=a&&(a=_gjwl.href.substring(a),0<a.indexOf("&q=")||0<=a.indexOf("#q="))&&(a=a.substring(1),-1==a.indexOf("#"))){for(var d=0;d<a.length;){var b=d;"&"==a.charAt(b)&&++b;var c=a.indexOf("&",b);-1==c&&(c=a.length);b=a.substring(b,c);if(0==b.indexOf("fp="))a=a.substring(0,d)+a.substring(c,a.length),c=d;else if("cad=h"==b)return 0;d=c}_gjwl.href="/search?"+a+"&cad=h";return 1}return 0}\nfunction _gjh(){!_gjuc()&&window.google&&google.x&&google.x({id:"GJH"},function(){google.nav&&google.nav.gjh&&google.nav.gjh()})};window._gjh&&_gjh();</script><style>#gbar,#guser{font-size:13px;padding-top:1px !important;}#gbar{height:22px}#guser{padding-bottom:7px !important;text-align:right}.gbh,.gbd{border-top:1px solid #c9d7f1;font-size:1px}.gbh{height:0;position:absolute;top:24px;width:100%}@media all{.gb1{height:22px;margin-right:.5em;vertical-align:top}#gbar{float:left}}a.gb1,a.gb4{text-decoration:underline !important}a.gb1,a.gb4{color:#00c !important}.gbi .gb4{color:#dd8e27 !important}.gbf .gb4{color:#900 !important}\n</style><style>body,td,a,p,.h{font-family:arial,sans-serif}body{margin:0;overflow-y:scroll}#gog{padding:3px 8px 0}td{line-height:.8em}.gac_m td{line-height:17px}form{margin-bottom:20px}.h{color:#36c}.q{color:#00c}.ts td{padding:0}.ts{border-collapse:collapse}em{font-weight:bold;font-style:normal}.lst{height:25px;width:496px}.gsfi,.lst{font:18px arial,sans-serif}.gsfs{font:17px arial,sans-serif}.ds{display:inline-box;display:inline-block;margin:3px 0 4px;margin-left:4px}input{font-family:inherit}a.gb1,a.gb2,a.gb3,a.gb4{color:#11c !important}body{background:#fff;color:black}a{color:#11c;text-decoration:none}a:hover,a:active{text-decoration:underline}.fl a{color:#36c}a:visited{color:#551a8b}a.gb1,a.gb4{text-decoration:underline}a.gb3:hover{text-decoration:none}#ghead a.gb2:hover{color:#fff !important}.sblc{padding-top:5px}.sblc a{display:block;margin:2px 0;margin-left:13px;font-size:11px}.lsbb{background:#eee;border:solid 1px;border-color:#ccc #999 #999 #ccc;height:30px}.lsbb{display:block}.ftl,#fll a{display:inline-block;margin:0 12px}.lsb{background:url(/images/srpr/nav_logo80.png) 0 -258px repeat-x;border:none;color:#000;cursor:pointer;height:30px;margin:0;outline:0;font:15px arial,sans-serif;vertical-align:top}.lsb:active{background:#ccc}.lst:focus{outline:none}</style><script></script><link rel="stylesheet" type="text/css" media="all" href="/searchahead-js/css/searchaheadbox.css"/>\r\n<!--[if IE 6]>\r\n<link rel="stylesheet" type="text/css" media="all" href="/searchahead-js/css/searchaheadbox_ie6.css"/>\r\n<![endif]-->\r\n<!--[if IE 7]>\r\n<link rel="stylesheet" type="text/css" media="all" href="/searchahead-js/css/searchaheadbox_ie7.css"/>\r\n<![endif]-->\r\n\r\n<script type="text/javascript" src="/searchahead-js/searchaheadAll.min.js"></script></head><body bgcolor="#fff"><script>(function(){var src=\'/images/nav_logo199.png\';var iesg=false;document.body.onload = function(){window.n && window.n();if (document.images){new Image().src=src;}\nif (!iesg){document.f&&document.f.q.focus();document.gbqf&&document.gbqf.q.focus();}\n}\n})();</script><div id="mngb"> <div id=gbar><nobr><b class=gb1>Search</b> <a class=gb1 href="http://www.google.com/imghp?hl=en&tab=wi">Images</a> <a class=gb1 href="http://maps.google.com/maps?hl=en&tab=wl">Maps</a> <a class=gb1 href="https://play.google.com/?hl=en&tab=w8">Play</a> <a class=gb1 href="http://www.youtube.com/?tab=w1">YouTube</a> <a class=gb1 href="http://news.google.com/nwshp?hl=en&tab=wn">News</a> <a class=gb1 href="https://mail.google.com/mail/?tab=wm">Gmail</a> <a class=gb1 href="https://drive.google.com/?tab=wo">Drive</a> <a class=gb1 style="text-decoration:none" href="http://www.google.com/intl/en/options/"><u>More</u> &raquo;</a></nobr></div><div id=guser width=100%><nobr><span id=gbn class=gbi></span><span id=gbf class=gbf></span><span id=gbe></span><a href="http://www.google.com/history/optout?hl=en" class=gb4>Web History</a> | <a href="/preferences?hl=en" class=gb4>Settings</a> | <a target=_top id=gb_70 href="https://accounts.google.com/ServiceLogin?hl=en&continue=http://www.google.com/" class=gb4>Sign in</a></nobr></div><div class=gbh style=left:0></div><div class=gbh style=right:0></div> </div><center><span id="prt" style="display:block"> <div><style>.pmoabs{background-color:#fff;border:1px solid #E5E5E5;color:#666;font-size:13px;padding-bottom:20px;position:absolute;right:2px;top:3px;z-index:986}#pmolnk{border-radius:2px;-moz-border-radius:2px;-webkit-border-radius:2px}.kd-button-submit{border:1px solid #3079ed;background-color:#4d90fe;background-image:-webkit-gradient(linear,left top,left bottom,from(#4d90fe),to(#4787ed));background-image:-webkit-linear-gradient(top,#4d90fe,#4787ed);background-image:-moz-linear-gradient(top,#4d90fe,#4787ed);background-image:-ms-linear-gradient(top,#4d90fe,#4787ed);background-image:-o-linear-gradient(top,#4d90fe,#4787ed);background-image:linear-gradient(top,#4d90fe,#4787ed);filter:progid:DXImageTransform.Microsoft.gradient(startColorStr=\'#4d90fe\',EndColorStr=\'#4787ed\')}.kd-button-submit:hover{border:1px solid #2f5bb7;background-color:#357ae8;background-image:-webkit-gradient(linear,left top,left bottom,from(#4d90fe),to(#357ae8));background-image:-webkit-linear-gradient(top,#4d90fe,#357ae8);background-image:-moz-linear-gradient(top,#4d90fe,#357ae8);background-image:-ms-linear-gradient(top,#4d90fe,#357ae8);background-image:-o-linear-gradient(top,#4d90fe,#357ae8);background-image:linear-gradient(top,#4d90fe,#357ae8);filter:progid:DXImageTransform.Microsoft.gradient(startColorStr=\'#4d90fe\',EndColorStr=\'#357ae8\')}.kd-button-submit:active{-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.3);-moz-box-shadow:inset 0 1px 2px rgba(0,0,0,0.3);box-shadow:inset 0 1px 2px rgba(0,0,0,0.3)}#pmolnk a{color:#fff;display:inline-block;font-weight:bold;padding:5px 20px;text-decoration:none;white-space:nowrap}.xbtn{color:#999;cursor:pointer;font-size:23px;line-height:5px;padding-top:5px}.padi{padding:0 8px 0 10px}.padt{padding:5px 20px 0 0;color:#444}.pads{text-align:left;max-width:200px}</style> <div class="pmoabs" id="pmocntr2" style="behavior:url(#default#userdata);display:none"> <table border="0"> <tr> <td colspan="2"> <div class="xbtn" onclick="google.promos&&google.promos.toast&& google.promos.toast.cpc()" style="float:right">&times;</div> </td> </tr> <tr> <td class="padi" rowspan="2"> <img src="/images/icons/product/chrome-48.png"> </td> <td class="pads">A faster way to browse the web</td> </tr> <tr> <td class="padt"> <div class="kd-button-submit" id="pmolnk"> <a href="/chrome/index.html?hl=en&amp;brand=CHNG&amp;utm_source=en-hpp&amp;utm_medium=hpp&amp;utm_campaign=en" onclick="google.promos&&google.promos.toast&& google.promos.toast.cl()">Install Google Chrome</a> </div> </td> </tr> </table> </div> <script type="text/javascript">(function(){var a={s:{}};a.s.va=50;a.s.ra=10;a.s.aa="body";a.s.Ra=!0;a.s.Ua=function(b,c){var d=a.s.Ha();a.s.Ja(d,b,c);a.s.Va(d);a.s.Ra&&a.s.Sa(d)};a.s.Va=function(b){(b=a.s.ca(b))&&0<b.forms.length&&b.forms[0].submit()};a.s.Ha=function(){var b=document.createElement("iframe");b.height=0;b.width=0;b.style.overflow="hidden";b.style.top=b.style.left="-100px";b.style.position="absolute";document.body.appendChild(b);return b};a.s.ca=function(b){return b.contentDocument||b.contentWindow.document};a.s.Ja=function(b,c,d){b=a.s.ca(b);b.open();d=["<",a.s.aa,\'><form method=POST action="\',d,\'">\'];for(var e in c)c.hasOwnProperty(e)&&d.push(\'<textarea name="\',e,\'">\',c[e],"</textarea>");d.push("</form></",a.s.aa,">");b.write(d.join(""));b.close()};a.s.ea=function(b,c){c>a.s.ra?google&&google.ml&&google.ml(Error("ogcdr"),!1,{cause:"timeout"}):b.contentWindow?a.s.Ta(b):window.setTimeout(function(){a.s.ea(b,c+1)},a.s.va)};a.s.Ta=function(b){document.body.removeChild(b)};a.s.Sa=function(b){a.s.Fa(b,"load",function(){a.s.ea(b,0)})};a.s.Fa=function(b,c,d){b.addEventListener?b.addEventListener(c,d,!1):b.attachEvent&&b.attachEvent("on"+c,d)};var m={Ya:0,G:1,H:2,M:5};a.o={};a.o.O={na:"i",L:"d",pa:"l"};a.o.C={P:"0",I:"1"};a.o.R={N:1,L:2,K:3};a.o.A={ha:"a",la:"g",F:"c",Ba:"u",Aa:"t",P:"p",ta:"pid",ja:"eid",Ca:"at"};a.o.oa=window.location.protocol+"//www.google.com/_/og/promos/";a.o.ka="g";a.o.Da="z";a.o.V=function(b,c,d,e){var f=null;switch(c){case m.G:f=window.gbar.up.gpd(b,d,!0);break;case m.M:f=window.gbar.up.gcc(e)}return null==f?0:parseInt(f,10)};a.o.Na=function(b,c,d){return c==m.G?null!=window.gbar.up.gpd(b,d,!0):!1};a.o.S=function(b,c,d,e,f,h,k,l){var g={};g[a.o.A.P]=b;g[a.o.A.la]=c;g[a.o.A.ha]=d;g[a.o.A.Ca]=e;g[a.o.A.ja]=f;g[a.o.A.ta]=1;k&&(g[a.o.A.F]=k);l&&(g[a.o.A.Ba]=l);if(h)g[a.o.A.Aa]=h;else return google.ml(Error("knu"),!1,{cause:"Token is not found"}),null;return g};a.o.Y=function(b,c,d){if(b){var e=c?a.o.ka:a.o.Da;c&&d&&(e+="?authuser="+d);a.s.Ua(b,a.o.oa+e)}};a.o.Ia=function(b,c,d,e,f,h,k){b=a.o.S(c,b,a.o.O.L,a.o.R.L,d,f,null,e);a.o.Y(b,h,k)};a.o.La=function(b,c,d,e,f,h,k){b=a.o.S(c,b,a.o.O.na,a.o.R.N,d,f,e,null);a.o.Y(b,h,k)};a.o.Qa=function(b,c,d,e,f,h,k,l,g,n){switch(c){case m.M:window.gbar.up.dpc(e,f);break;case m.G:window.gbar.up.spd(b,d,1,!0);break;case m.H:g=g||!1,l=l||"",h=h||0,k=k||a.o.C.I,n=n||0,a.o.Ia(e,h,k,f,l,g,n)}};a.o.Oa=function(b,c,d,e,f){return c==m.G?0<d&&a.o.V(b,c,e,f)>=d:!1};a.o.Ka=function(b,c,d,e,f,h,k,l,g,n){switch(c){case m.M:window.gbar.up.iic(e,f);break;case m.G:c=a.o.V(b,c,d,e)+1;window.gbar.up.spd(b,d,c.toString(),!0);break;case m.H:g=g||!1,l=l||"",h=h||0,k=k||a.o.C.P,n=n||0,a.o.La(e,h,k,1,l,g,n)}};a.o.Pa=function(b,c,d,e,f,h){b=a.o.S(c,b,a.o.O.pa,a.o.R.K,d,e,null,null);a.o.Y(b,f,h)};var p={Wa:"a",Za:"l",Xa:"c",ia:"d",K:"h",N:"i",jb:"n",I:"x",gb:"ma",hb:"mc",ib:"mi",$a:"pa",ab:"pc",cb:"pi",fb:"pn",eb:"px",bb:"pd",kb:"gpa",mb:"gpi",nb:"gpn",ob:"gpx",lb:"gpd"};a.i={};a.i.w={qa:"hplogo",za:"pmocntr2"};a.i.C={ya:"0",I:"1",ga:"2"};a.i.v=document.getElementById(a.i.w.za);a.i.ma=16;a.i.wa=2;a.i.xa=20;google.promos=google.promos||{};google.promos.toast=google.promos.toast||{};a.i.J=function(b){a.i.v&&(a.i.v.style.display=b?"":"none",a.i.v.parentNode&&(a.i.v.parentNode.style.position=b?"relative":""))};a.i.fa=function(b){try{if(a.i.v&&b&&b.es&&b.es.m){var c=window.gbar.rtl(document.body)?"left":"right";a.i.v.style[c]=b.es.m-a.i.ma+a.i.wa+"px";a.i.v.style.top=a.i.xa+"px"}}catch(d){google.ml(d,!1,{cause:a.i.B+"_PT"})}};google.promos.toast.cl=function(){try{a.i.T==m.H&&a.o.Pa(a.i.W,a.i.D,a.i.C.ga,a.i.$,a.i.X,a.i.Z),window.gbar.up.sl(a.i.D,a.i.B,p.K,a.i.U(),1)}catch(b){google.ml(b,!1,{cause:a.i.B+"_CL"})}};google.promos.toast.cpc=function(){try{a.i.v&&(a.i.J(!1),a.o.Qa(a.i.v,a.i.T,a.i.w.ba,a.i.W,a.i.Ga,a.i.D,a.i.C.I,a.i.$,a.i.X,a.i.Z),window.gbar.up.sl(a.i.D,a.i.B,p.ia,a.i.U(),1))}catch(b){google.ml(b,!1,{cause:a.i.B+"_CPC"})}};a.i.da=function(){try{if(a.i.v){var b=276,c=document.getElementById(a.i.w.qa);c&&(b=Math.max(b,c.offsetWidth));var d=parseInt(a.i.v.style.right,10)||0;a.i.v.style.visibility=2*(a.i.v.offsetWidth+d)+b>document.body.clientWidth?"hidden":""}}catch(e){google.ml(e,!1,{cause:a.i.B+"_HOSW"})}};a.i.Ea=function(){var b=["gpd","spd","aeh","sl"];if(!window.gbar||!window.gbar.up)return!1;for(var c=0,d;d=b[c];c++)if(!(d in window.gbar.up))return!1;return!0};a.i.Ma=function(){return a.i.v.currentStyle&&"absolute"!=a.i.v.currentStyle.position};google.promos.toast.init=function(b,c,d,e,f,h,k,l,g,n,q,r){try{if(!a.i.Ea())google.ml(Error("apa"),!1,{cause:a.i.B+"_INIT"});else if(a.i.v)if(e==m.H&&!l==!g)google.ml(Error("tku"),!1,{cause:"zwieback: "+g+", gaia: "+l}),a.i.J(!1);else if(a.i.w.F="toast_count_"+c+(q?"_"+q:""),a.i.w.ba="toast_dp_"+c+(r?"_"+r:""),a.i.B=d,a.i.D=b,a.i.T=e,a.i.W=c,a.i.Ga=f,a.i.$=l?l:g,a.i.X=!!l,a.i.Z=k,a.o.Na(a.i.v,e,a.i.w.ba,c)||a.o.Oa(a.i.v,e,h,a.i.w.F,c)||a.i.Ma())a.i.J(!1);else{a.o.Ka(a.i.v,e,a.i.w.F,c,f,a.i.D,a.i.C.ya,a.i.$,a.i.X,a.i.Z);if(!n){try{window.gbar.up.aeh(window,"resize",a.i.da)}catch(u){}window.lol=a.i.da;window.gbar.elr&&a.i.fa(window.gbar.elr());window.gbar.elc&&window.gbar.elc(a.i.fa);a.i.J(!0)}window.gbar.up.sl(a.i.D,a.i.B,p.N,a.i.U())}}catch(t){google.ml(t,!1,{cause:a.i.B+"_INIT"})}};a.i.U=function(){var b=a.o.V(a.i.v,a.i.T,a.i.w.F,a.i.W);return"ic="+b};})();</script> <script type="text/javascript">(function(){var sourceWebappPromoID=144002;var sourceWebappGroupID=5;var payloadType=5;var cookieMaxAgeSec=2592000;var dismissalType=5;var impressionCap=25;var gaiaXsrfToken=\'\';var zwbkXsrfToken=\'\';var kansasDismissalEnabled=false;var sessionIndex=0;var invisible=false;window.gbar&&gbar.up&&gbar.up.r&&gbar.up.r(payloadType,function(show){if (show){google.promos.toast.init(sourceWebappPromoID,sourceWebappGroupID,payloadType,dismissalType,cookieMaxAgeSec,impressionCap,sessionIndex,gaiaXsrfToken,zwbkXsrfToken,invisible,\'0612\');}\n});})();</script> </div> </span><br clear="all" id="lgpd"><div id="lga"><a href="/search?site=&amp;ie=UTF-8&amp;q=Eiji+Tsuburaya&amp;oi=ddle&amp;ct=eiji-tsuburayas-114th-birthday-4809204506296320&amp;hl=en&amp;sa=X&amp;ei=QuybVeO7Osy4sAXDxIKQCg&amp;ved=0CAMQNg"><img alt="Eiji Tsuburaya&#8217;s 114th Birthday" border="0" height="200" src="/logos/doodles/2015/eiji-tsuburayas-114th-birthday-4809204506296320.2-hp.jpg" title="Eiji Tsuburaya&#8217;s 114th Birthday" width="356" id="hplogo" onload="window.lol&&lol()"><br></a><br></div><form action="/search" name="f"><table cellpadding="0" cellspacing="0"><tr valign="top"><td width="25%">&nbsp;</td><td align="center" nowrap=""><input name="ie" value="ISO-8859-1" type="hidden"><input value="en" name="hl" type="hidden"><input name="source" type="hidden" value="hp"><input name="biw" type="hidden"><input name="bih" type="hidden"><div class="ds" style="height:32px;margin:4px 0"><input style="color:#000;margin:0;padding:5px 8px 0 6px;vertical-align:top" autocomplete="off" class="lst" value="" title="Google Search" maxlength="2048" name="q" size="57"></div><br style="line-height:0"><span class="ds"><span class="lsbb"><input class="lsb" value="Google Search" name="btnG" type="submit"></span></span><span class="ds"><span class="lsbb"><input class="lsb" value="I\'m Feeling Lucky" name="btnI" onclick="if(this.form.q.value)this.checked=1; else top.location=\'/doodles/\'" type="submit"></span></span></td><td class="fl sblc" align="left" nowrap="" width="25%"><a href="/advanced_search?hl=en&amp;authuser=0">Advanced search</a><a href="/language_tools?hl=en&amp;authuser=0">Language tools</a></td></tr></table><input id="gbv" name="gbv" type="hidden" value="1"></form><div id="gac_scont"></div><div style="font-size:83%;min-height:3.5em"><br></div><span id="footer"><div style="font-size:10pt"><div style="margin:19px auto;text-align:center" id="fll"><a href="/intl/en/ads/">Advertising&nbsp;Programs</a><a href="/services/">Business Solutions</a><a href="https://plus.google.com/116899029375914044550" rel="publisher">+Google</a><a href="/intl/en/about.html">About Google</a></div></div><p style="color:#767676;font-size:8pt">&copy; 2015 - <a href="/intl/en/policies/privacy/">Privacy</a> - <a href="/intl/en/policies/terms/">Terms</a></p></span></center><script>(function(){window.google.cdo={height:0,width:0};(function(){var a=window.innerWidth,b=window.innerHeight;if(!a||!b)var c=window.document,d="CSS1Compat"==c.compatMode?c.documentElement:c.body,a=d.clientWidth,b=d.clientHeight;a&&b&&(a!=google.cdo.width||b!=google.cdo.height)&&google.log("","","/client_204?&atyp=i&biw="+a+"&bih="+b+"&ei="+google.kEI);})();})();</script><div id="xjsd"></div><div id="xjsi" data-jiis="bp"><script>(function(){function c(b){window.setTimeout(function(){var a=document.createElement("script");a.src=b;document.getElementById("xjsd").appendChild(a)},0)}google.dljp=function(b,a){google.xjsu=b;c(a)};google.dlj=c;})();(function(){window.google.xjsrm=[];})();if(google.y)google.y.first=[];if(!google.xjs){window._=window._||{};window._._DumpException=function(e){throw e};if(google.timers&&google.timers.load.t){google.timers.load.t.xjsls=new Date().getTime();}google.dljp(\'/xjs/_/js/k\\x3dxjs.hp.en_US.n4Isykx1pOI.O/m\\x3dsb_he,d/rt\\x3dj/d\\x3d1/t\\x3dzcms/rs\\x3dACT90oGruBlRL4zSGyBzh4XK8InqnND9gA\',\'/xjs/_/js/k\\x3dxjs.hp.en_US.n4Isykx1pOI.O/m\\x3dsb_he,d/rt\\x3dj/d\\x3d1/t\\x3dzcms/rs\\x3dACT90oGruBlRL4zSGyBzh4XK8InqnND9gA\');google.xjs=1;}google.pmc={"sb_he":{"agen":true,"cgen":true,"client":"heirloom-hp","dh":true,"ds":"","fl":true,"host":"google.com","jam":0,"jsonp":true,"msgs":{"cibl":"Clear Search","dym":"Did you mean:","lcky":"I\\u0026#39;m Feeling Lucky","lml":"Learn more","oskt":"Input tools","psrc":"This search was removed from your \\u003Ca href=\\"/history\\"\\u003EWeb History\\u003C/a\\u003E","psrl":"Remove","sbit":"Search by image","srch":"Google Search"},"ovr":{},"pq":"","refoq":true,"refpd":true,"rfs":[],"scd":10,"sce":5,"stok":"zjtqyOq-JYCOTkhf-6zvDRQ7OsI"},"d":{}};google.y.first.push(function(){if(google.med){google.med(\'init\');google.initHistory();google.med(\'history\');}});if(google.j&&google.j.en&&google.j.xi){window.setTimeout(google.j.xi,0);}\n</script></div></body></html>' >>>
>>> from vtk.util import numpy_support as npvtk >>> vtkarray = npvtk.numpy_to_vtk(numpy_array) >>> numpy_array = npvtk.vtk_to_numpy(vtkarray)
def getCourseID(s): cur.execute('SELECT id FROM students WHERE name = ? ', (s, )) results = list(cur) if results: return results[0][0] return None # nothing was found...
from collections import deque def item_with_context(predicate, seq, before=0, after=0): q = deque(maxlen=before) it = iter(seq) for s in it: if predicate(s): return list(q) + [s] + [x for _,x in zip(range(after), it)] q.append(s)
import threading def hello(): t = threading.Timer(10.0, hello) t.start() print "hello, world" t = threading.Timer(10.0, hello) t.start()
s = "Some ABC text followed by XYZ followed by multiple ABC, more ABC, more ABC" pattern = re.compile(r'(?<=XYZ)(.*?)ABC') while pattern.search(s): s = pattern.sub(r'\1REPLACED', s) print s
import collections file_data = collections.defaultdict(list) with open("you_file") as f for line in file: tag, data = line.split('\t', 1) file_data[tag].append(data) for file_name, data in file_data.items(): with open(file_name, 'w') as f: f.write("\n".join(data))
import sys from tkinter import * from PIL import Image, ImageTk def clear(): txtDisplay.delete(0,END); return; #Parent Window. root = Tk(); root.title('Calculator ++ [1.7.2]'); root.geometry('350x450'); #Main entry. num1 = StringVar(); txtDisplay = Entry(root, textvariable = num1, relief=RIDGE, bd = 10, width=33, insertwidth = 1, font = 40); txtDisplay.place(x=15, y=10); txtDisplay.focus(); def update_entry(v): current_value = num1.get() num1.set(current_value + v) #Buttons: zeroButton = Button(root, text='0', width=20, height=3, bg='LightBlue', fg='red', command = lambda: update_entry('0')).place(x=17,y=382); oneButton = Button(root, text='1', width=8, height=3, bg='LightBlue', fg='red', command = lambda: update_entry('1')).place(x=17, y=302); twoButton = Button(root, text='2', width=8, height=3, bg='LightBlue', fg='red').place(x=100, y=302); threeButton = Button(root, text='3', width=8, height=3, bg='LightBlue', fg='red').place(x=182, y=302); fourButton = Button(root, text='4', width=8, height=3, bg='LightBlue', fg='red').place(x=17, y=222); fiveButton = Button(root, text='5', width=8, height=3, bg='LightBlue', fg='red').place(x=100, y=222); sixButton = Button(root, text='6', width=8, height=3, bg='LightBlue', fg='red').place(x=182, y=222); sevenButton = Button(root, text='7', width=8, height=3, bg='LightBlue', fg='red').place(x=17, y=142); eightButton = Button(root, text='8', width=8, height=3, bg='LightBlue', fg='red').place(x=100, y=142); ninthButton = Button(root, text='9', width=8, height=3, bg='LightBlue', fg='red').place(x=182, y=142); decimalButton = Button(root, text='.', width=8, height=3, bg='powder blue').place(x=182, y=382); equalButton = Button(root, text='=', width=8, height=8, bg='Lightgreen').place(x=264, y=307); plusButton = Button(root, text='+', width=8, height=3, bg='gray', command = lambda: update_entry('+')).place(x=264, y=222); minusButton = Button(root, text='-', width=8, height=3, bg='gray').place(x=264, y=142); multiplyButton = Button(root, text='x', width=8, height=3, bg='gray').place(x=264, y=66); divideButton = Button(root, text='÷', width=8, height=3, bg='gray').place(x=182, y=66); clearButton = Button(root, text='Clear (CE)', width=20, height=3, command = clear, bg='Orange').place(x=17, y=66); #Locks the parent windows size. root.maxsize(350,450); root.minsize(350,450); #Parent window's background color: root.configure(background = 'black'); root.mainloop();
tlist = ['Hello world', 'Hello world print', 'Text', 'World hello print'] print [i for i in tlist if "print" in i]
class PersistentList(list): def __init__(self, *args, **kwargs): for attr in ('append', 'extend', 'insert', 'pop', 'remove', 'reverse', 'sort'): setattr(self, attr, self._autosave(getattr(self, attr)) list.__init__(self, *args, **kwargs) def _autosave(self, func): @wraps(func) def _func(*args, **kwargs): ret = func(*args, **kwargs) self._save() return ret return _func
from pyspark.sql.functions import row_number from pyspark.sql import Window w = Window.partitionBy("some_column").orderBy("some_other_column") df.withColumn("rn", row_number().over(w))
@total_ordering class B_ordering(object): __slots__ = () # see Raymond's comment def __lt__(self, other): return self.y < other.y class B(B_ordering, namedtuple('B', 'x y')): pass
from collections import defaultdict a = defaultdict(lambda:None) print a[100]
import pandas as pd # read your csv data, separate must not be ',', for example, set tab `\t` # ======================================================================= # I just read from clipboard df = pd.read_clipboard(header=None, sep='\t') df 0 0 a,b,x,z,y 1 b,e,w,t,u,o,s,z,i 2 z,o,w 3 o,p,w,z,a # step 1 # ========================= df1 = df.groupby(level=0).apply(lambda group: pd.Series(group.values.ravel().tolist()[0].split(','))) df1 0 0 a 1 b 2 x 3 z 4 y 1 0 b 1 e 2 w 3 t 4 u .. 7 z 8 i 2 0 z 1 o 2 w 3 0 o 1 p 2 w 3 z 4 a dtype: object # step 2 # ========================= pd.get_dummies(df1).groupby(level=0).agg(max) a b e ... x y z 0 1 1 0 ... 1 1 1 1 0 1 1 ... 0 0 1 2 0 0 0 ... 0 0 1 3 1 0 0 ... 0 0 1 [4 rows x 13 columns] # step 3, to_csv() # =========================
var mydata = {{indexdata}};
ipython nbconvert --to rst your.ipynb
from Tkinter import * class MyDialog: def __init__(self, parent): top = self.top = Toplevel(parent) Label(top, text="Value").pack() self.e = Entry(top) self.e.pack(padx=5) b = Button(top, text="OK", command=self.ok) b.pack(pady=5) def ok(self): print "value is", self.e.get() self.top.destroy() root = Tk() Button(root, text="Hello!").pack() root.update() d = MyDialog(root) root.wait_window(d.top) root.mainloop()
#!/usr/bin/env python import curses import curses.textpad as textpad try: mainwindow = curses.initscr() # Some curses-friendly terminal settings curses.cbreak(); mainwindow.keypad(1); curses.noecho() textpad.Textbox(mainwindow).edit() finally: # Reverse curses-friendly terminal settings curses.nocbreak(); mainwindow.keypad(0); curses.echo() curses.endwin()
>>> import icu # pip install PyICU >>> sorted(['a','b','c','ä']) ['a', 'b', 'c', 'ä'] >>> collator = icu.Collator.createInstance(icu.Locale('de_DE.UTF-8')) >>> sorted(['a','b','c','ä'], key=collator.getSortKey) ['a', 'ä', 'b', 'c']
for i in xrange(10): args = ['python', 'testrun.py', 'HWStatus'] p = subprocess.Popen(args) while p.poll() != 0: time.sleep(amount_of_time)
>>> haystack = np.array([[1, -1, 1, -1], ... [1, 1, -1, 1], ... [1, -1, 1, -1]]) >>> needle = np.array([1, -1, 1, -1]) >>> haystack.dot(needle) array([ 4, -2, 4]) >>> np.sum(haystack.dot(needle) == len(needle)) 2
reversed_df = df.iloc[::-1]
from bugland import bug
button = Gtk.Button(label='Some text')
read_pipes = [pipe_fd0, pipe_fd1, ... ] while True: read_fds, write_fds, exc_fds = select.select(read_pipes, [], [] ) for read_fd in read_fds: # read from read_fd pipe descriptor
Py_LOCAL_INLINE(PyObject *) STRINGLIB(split_whitespace)(PyObject* str_obj, const STRINGLIB_CHAR* str, Py_ssize_t str_len, Py_ssize_t maxcount) { ... #ifndef STRINGLIB_MUTABLE if (j == 0 && i == str_len && STRINGLIB_CHECK_EXACT(str_obj)) { /* No whitespace in str_obj, so just use it as list[0] */ Py_INCREF(str_obj); PyList_SET_ITEM(list, 0, (PyObject *)str_obj); count++; break; }
def enterPiece(aBoard, aColour, aPoint): c = aBoard if 0 < aPoint <= aBoard.size: for j in range(aPoint): c.removePieceFromPoint(aColour, 0) c.addPieceToPoint(aColour, aPoint) return True else: return False
In [67]: df=pd.read_clipboard(header=None, na_values=['0']) print df 0 0 22/05/2014 1 22/05/2014 2 NaN 3 22/05/2014 In [68]: pd.to_datetime(df[0]) Out[68]: 0 2014-05-22 1 2014-05-22 2 NaT 3 2014-05-22 Name: 0, dtype: datetime64[ns]
with open(scriptPath, 'r') as inp: for line in inp: if line == 'GO\n': c.execute(sqlQuery) sqlQuery = '' elif 'PRINT' in line: disp = line.split("'")[1] print(disp, '\r') else: sqlQuery = sqlQuery + line inp.close()
starts=numpy.intersect1d(numpy.where(a<44)[0]+1,numpy.where(a>44)[0]) print(numpy.split(a,starts))
buffer = "path/filename.zip" # zip filename to write (or file-like object) name = "folder/data.txt" # name of file inside zip bytes = "blah blah blah" # contents of file inside zip zip = zipfile.ZipFile(buffer, "w", zipfile.ZIP_DEFLATED) info = zipfile.ZipInfo(name) info.external_attr = 0777 << 16L # give full access to included file zip.writestr(info, bytes) zip.close()
In [1]: text = ''' ...: <span> Lekhwiya&nbsp;v&nbsp;<strong class="winner-strong">Zobahan</strong></span> ...: <span> <strong class="winner-strong">Sepahan</strong>&nbsp;v&nbsp;Al&nbsp;Nasr&nbsp;(UAE)</span> ...: ''' In [2]: import scrapy In [3]: selector = scrapy.Selector(text=text, type="html") In [4]: for span in selector.xpath('//span'): ...: print(span.xpath('string(.)').extract_first()) ...: Lekhwiya v Zobahan Sepahan v Al Nasr (UAE) In [5]: for span in selector.xpath('//span'): print(span.xpath('normalize-space(.)').extract_first()) ...: Lekhwiya v Zobahan Sepahan v Al Nasr (UAE)
from xgoogle.search import GoogleSearch, SearchError try: page = 1 gs = GoogleSearch("foo bar") gs.results_per_page = 100 results = [] while page < 10: gs.page = page results += gs.get_results() page += 1 except SearchError, e: print "Search failed: %s" % e for res in results: print res.url
def change_window(browser): """ Simple window switcher without the need of playing with ids. @param browser: Current browser instance """ curr = browser.current_window_handle all_handles = browser.window_handles for handle in list(set([curr]) - set(all_handles)): return browser.switch_to_window(handle)
class DeviceAdmin(AjaxSelectAdmin): ... code that you have above ... class DeviceAdminWithHistory(DeviceAdmin, SimpleHistoryAdmin): pass admin.site.register(Device, DeviceAdminWithHistory)
sorted(yourArray, key=lambda x: x[3]) #sort yourArray by the 4th value in every list
>>> for elem in soup.findAll(): path = '.'.join(reversed([p.name for p in elem.parentGenerator() if p])) print "{:10}|{:60}|{:10}".format(elem.name,elem.attrs, path) html |[] |[document] head |[] |[document].html title |[] |[document].html.head body |[] |[document].html div |[(u'id', u'abc')] |[document].html.body ol |[(u'id', u'def')] |[document].html.body.div li |[(u'class', u'testItem')] |[document].html.body.div.ol a |[(u'href', u'http://testpage.html')] |[document].html.body.div.ol.li li |[(u'class', u'testItem')] |[document].html.body.div.ol table |[(u'id', u'testTable')] |[document].html.body.div.ol.li tr |[] |[document].html.body.div.ol.li.table td |[] |[document].html.body.div.ol.li.table.tr div |[(u'id', u'testDiv')] |[document].html.body.div.ol.li.table.tr.td >>>
sqlite> .tab job snmptarget t1 t2 t3 sqlite> select name from sqlite_master where type = 'table'; job t1 t2 snmptarget t3 sqlite> .schema job CREATE TABLE job ( id INTEGER PRIMARY KEY, data VARCHAR ); sqlite> select sql from sqlite_master where type = 'table' and name = 'job'; CREATE TABLE job ( id INTEGER PRIMARY KEY, data VARCHAR )
... clsname = str(classes[0]) ... if clsname is not None: # final hack - module name shows up in str(cls), but we've already # computed module name, so remove it clsname = clsname.split(".")[1:] clsname = ".".join(clsname) funcname = "%s.%s" % (clsname, funcname)
from cx_Freeze import Executable from cx_Freeze import setup as cx_setup from distutils.core import setup from Cython.Build import cythonize setup(options={'build_ext': {'compiler': 'mingw32'}}, ext_modules=cythonize("fx.pyx")) cx_setup(name='myproject', version='0.0', description='', options={"build_exe": {"packages":["pygame","fx"]}}, executables=[Executable('main.py',targetName="myproject.exe",base = "Win32GUI")], requires=['pygcurse','pyperclip','rsa','dill','numpy'] )
import logging import socket # The next line allows 'socket' in the logging package's namespace to pick up # the stdlib socket module logging.socket = socket ... # when the config file is processed, it should work as expected logging.config.fileConfig(...) # remove the mapping from the logging package, as not needed any more # (optional) del logging.socket
PENDING = 0 DONE = 1 STATUS_CHOICES = ( (PENDING, 'Pending'), (DONE, 'Done'), )
with open('file_output.html', 'w') as f: for tag in soup.select("#ModelTable"): f.write(tag.prettify())
In [2]: os.environ['probe1'] = 'hello' In [3]: os.system('echo $probe1') hello
import csv from xlsxwriter.workbook import Workbook workbook = Workbook("test.xlsx") worksheet = workbook.add_worksheet("Raw_Data") with open("C:\Console2\\csv.test",'r') as f: reader = csv.reader(f) for r, row in enumerate(reader): for c, col in enumerate(row): worksheet.write(r, c, col) workbook.close()
from selenium import webdriver from selenium.webdriver.common.keys import Keys from Tkinter import * import Tkinter as tk from tkFileDialog import askopenfilename import time from selenium.webdriver.firefox.firefox_binary import FirefoxBinary #out out = open("n_grams_outfile.txt", "w") out.write("search string" + "\t" + "pub year" + "\t" + "frequency" + "\n") #create a function that will return the filepath for a file provided by the user user_defined_filepath = {} def selectfile(): user_defined_filepath['filename'] = askopenfilename(filetypes=[("Text","*.txt")]) # user_defined_filepath['filename'] may now be accessed in the global scope. #create function we'll call when start button is pressed def query_n_grams(event = "<Button>"): #create binary switch we'll use to only start new browser in first pass. Set default to true first_pass = 1 #identify the input file inputfile = user_defined_filepath['filename'] readinputfile = open(inputfile).read() stringinputfile = str(readinputfile) #assume input file = tsv. Left hand column = string of len <= 6; right hand column = pub year of text split_by_row = stringinputfile.split("\n") for row in split_by_row: #because the program will yelp if it reaches the end of the input file and then tries to split an empty line on "\t", wrap call in try/except try: search_terms = row.split("\t")[0] actual_pub_year = row.split("\t")[1] except IndexError: pass pub_year_minus_five = int(actual_pub_year) - 5 pub_year_plus_five = int(actual_pub_year) + 5 #you now have terms and pub yaer. Fire up webdriver and ride, cowboy if first_pass == 1: binary = FirefoxBinary('C:\Text\Professional\Digital Humanities\Programming Languages\Python\Query Literature Online\LION 3.0\Firefox Versions\Firefox23\FirefoxPortable.exe') driver = webdriver.Firefox(firefox_binary=binary) first_pass = 0 #otherwise, use extant driver driver.implicitly_wait(10) driver.get("https://books.google.com/ngrams") driver.refresh() driver.implicitly_wait(10) #send keys driver.implicitly_wait(10) keyword = driver.find_element_by_class_name("query") driver.implicitly_wait(10) keyword.clear() driver.implicitly_wait(10) keyword.send_keys(str(search_terms)) driver.implicitly_wait(10) #find start year driver.implicitly_wait(10) start_year = driver.find_element_by_name("year_start") driver.implicitly_wait(10) start_year.clear() driver.implicitly_wait(10) start_year.send_keys(str(pub_year_minus_five)) driver.implicitly_wait(10) #find end year driver.implicitly_wait(10) end_year = driver.find_element_by_name("year_end") driver.implicitly_wait(10) end_year.clear() driver.implicitly_wait(10) end_year.send_keys(pub_year_plus_five) driver.implicitly_wait(10) #click enter driver.implicitly_wait(10) submit_button = driver.find_element_by_class_name("kd_submit") driver.implicitly_wait(10) submit_button.click() driver.implicitly_wait(10) #grab html driver.implicitly_wait(10) html = driver.page_source driver.implicitly_wait(10) #if you run a search that yields no hits, can't split the html, so use try/except try: #we want the list object that comes right after timeseries and before the comma desired_percent_figures = html.split('"timeseries": [')[1].split("]")[0] #now desired_percent_figures contains comma-separated list of percents (which we still need to convert out of mathematical notation). Convert out of mathematical notation (with e) percents_as_list = desired_percent_figures.split(",") #convert to ints percent_list_as_ints = [float(i) for i in percents_as_list] #take your list and find mean mean_percent = sum(percent_list_as_ints) / float(len(percent_list_as_ints)) out.write(str(search_terms) + "\t" + str(actual_pub_year) + "\t" + str(mean_percent) + "\n") #you'll get IndexError if you run a query like "Hello Garrett" for which there are no entries in the database at all. (Other queries, like 'animal oeconomy' for year 1700, yields result 0, but because search string is in database elsewhere, won't throw IndexError) except IndexError: mean_percent = "0.0" #because we got an index error, we know that the search yielded no results. so let's type 0.0 as percent out.write(str(search_terms) + "\t" + str(actual_pub_year) + "\t" + str(mean_percent) + "\n") #create TK frame root = tk.Tk() canvas = tk.Canvas(root, width=157, height=100) canvas.pack() #create label for tk ngram_label = tk.Button(root, text = "Google N-Gram API", command = "", anchor = 'w', width = 14, activebackground = "#33B5E5") ngram_label_canvas = canvas.create_window(20, 20, anchor='nw', width = 119, window=ngram_label) #create a button that allows users to find a file for analysis file_label = tk.Button(root, text = "Input file", command = selectfile, anchor = 'w', width = 7, activebackground = "#33B5E5") file_label_canvas = canvas.create_window(20, 60, anchor='nw', window=file_label) #create a start button that allows users to submit selected parameters and run the "startviewing" processes start_label = tk.Button(root, text = "Go!", command = query_n_grams, anchor = 'w', width = 3, activebackground = "#33B5E5") start_label_canvas = canvas.create_window(107, 60, anchor='nw', window=start_label) root.mainloop()
class FourVector: def __init__(self, ct = 0, x = 0, y = 0, z = 0, r = None): self.a = (ct, x, y, z) if r is not None: self.a = (ct, r[0], r[1], r[2]) P0 = FourVector() print P0.a P1 = FourVector(ct = 9, x = 1, y = 2, z = 4) print P1.a P2 = FourVector(ct = 99.9, r = [1, 2, 4]) print P2.a
>>> eval(compile('def _raise(*a): raise a[0], a[1], a[2]', '<py3fix>', 'exec')) >>> _raise(Exception, "error message", None) Traceback (most recent call last): File "<stdin>", line 1, in <module> File "<py3fix>", line 1, in _raise Exception: error message >>> eval(compile('def _raise(*a): raise a[0], a[1], a[2]', '<my_source_file>', 'exec')) >>> _raise(Exception, "error message", None)Traceback (most recent call last): File "<stdin>", line 1, in <module> File "<my_source_file>", line 1, in _raise Exception: error message
class User(db.Model): def readonly(self): return ReadOnlyUser(self.name, self.id);
def replace(a,b): while True: c = input("Enter a letter you would like to replace") d = "" charfound = False for char in a: if char == c: charfound = True d += b else: d+= char if charfound: print(d) break else: print('Letter must be in phrase!')
C=np.einsum('ij,ik->jik',A,B)
class Example(...): def __init__(...): ... self.l1.description = "This is label 1" self.l2.description = "This is label 2" self.b1.description = "This is the OK button" for widget in (self.l1, self.l2, self.b1): widget.bind("<Enter>", self.on_enter) widget.bind("<Leave>", self.on_leave) ... def on_enter(self, event): description = getattr(event.widget, "description", "") self.l2.configure(text=description)
Event.objects.filter(groups__person=person)
import re import ast from collections import OrderedDict def read(f): for s in f: m = re.match(r'^OrderedDict\((.+)\)$', s) if m: yield OrderedDict(ast.literal_eval(m.group(1))) ... for d in read(snap_fh): print type(d)
np.dot(clf.coef_, x) - clf.intercept_ = 0
import re data=['test_140815080910_data.p', 'other_test_140815081010_data.p', 'other_test_140815081111_other_data.p'] data.sort(key=lambda L: (re.findall('\d{10}', L), L)) # ['test_140815080910_data.p', 'other_test_140815081010_data.p', 'other_test_140815081111_other_data.p']
>>> import math >>> print (math.floor(5.6)) 5.0
class Lessons(models.Model): name = models.CharField() class Exercises(models.Model): lesson = models.ForeignKey(Lessons) name = models.CharField() text = models.CharField()
'''This is a test {{ <-- escape these ---> }} and the value is {0}'''.format(42)
import csv from collections import Counter with open('words.csv') as f: next(f) # skip header occurrence = Counter(tuple(row[1:3]) for row in csv.reader(f)) with open('occurrence.csv', 'w') as f: writer = csv.writer(f) writer.writerow(['Destination', 'Source', 'Counts']) for (dest, src), cnt in occurrence.items(): writer.writerow([dest, src, cnt])
SELECT u.id FROM subscriptions sub JOIN users u ON u.id = sub.subscriber_id LEFT JOIN subscriptions unsub ON unsub.subscribee_id = sub.subscriber_id AND unsub.subscriber_id= sub.subscribee_id WHERE sub.subscribee_id = :user_id AND unsub.subscribee_id IS NULL
def _get_logger(pdir,ldir,lname,level,fmt): try: logs_dir = os.path.join(pdir, ldir) if not os.path.exists(logs_dir): os.makedirs(logs_dir) except Exception as e: print e exit(1) logging.basicConfig( filename=os.path.join(logs_dir, lname), level=level, format=fmt ) return logging.getLogger('cli.log') exec_file = os.path.abspath(argv[0]) exec_dir = os.path.dirname(exec_file) #build a dict with default configuration values for the logger default_logger = dict(pdir=exec_dir,ldir='logs',lname='cli.log',level='ERROR', fmt='%(asctime)s %(levelname)s: %(message)s') try: log_filename = args.logfile if args.logfile else config.get('Logging', 'filename') level = config.get('Logging', 'log_level') format = config.get('Logging', 'format') except (NoOptionError, NoSectionError) as e: #unpack the configuration dict and call _get_logger logger = _get_logger(**default_logger) logger.error(repr(e)) exit(1) else: # we have successfully read configuration from file, so update # configuration dict to reflect new settings default_logger.update(fmt=format,level=level,lname=log_filename) if os.path.isabs(log_filename): # log_filename is an absolute one. split it to get filename and dirname # and update configuration dict bdir, log_filename = os.path.split(log_filename) default_logger.update(pdir='',ldir=bdir,lname=log_filename) logger = _get_logger(**default_logger)
def walk_list(list_of_g): to_idx = 0 for g_current in list_of_g: if not subtle_condition(g_current): list_of_g[to_idx] = g_current to_idx += 1 del list_of_g[to_idx:]
from django.utils.encoding import smart_str response = HttpResponse(mimetype='application/force-download') # mimetype is replaced by content_type for django 1.7 response['Content-Disposition'] = 'attachment; filename=%s' % smart_str(file_name) response['X-Sendfile'] = smart_str(path_to_file) # It's usually a good idea to set the 'Content-Length' header too. # You can also set any other required headers: Cache-Control, etc. return response
import scrapy from scrapy.http import FormRequest class MySpider(scrapy.Spider): # ... def start_requests(self): yield FormRequest(some_post_url, formdata=dict(param1='value1', param2='value2'))
list.sort(key=lambda item:item['date'], reverse=True)
function checkdata(code) { var dig = 0; var test = 1; for(var i=0; i<code.length-1;i++) { dig=dig+(char2number(code.charAt(i))*test); test*=2; } dig = mod(dig,9); alert(dig); if(dig==code.charAt(code.length-1)) return true; else return false;}
import csv with open(filename, 'w') as f: writer = csv.writer(f, delimiter=',') writer.writerows(my_list) #considering my_list is a list of lists.
import numpy as np import matplotlib.pyplot as plt lowerBound = 0.25 upperBound = 0.75 myMatrix = np.random.rand(100,100) myMatrix =np.ma.masked_where((lowerBound < myMatrix) & (myMatrix < upperBound), myMatrix) fig,axs=plt.subplots(2,1) #Plot without mask axs[0].imshow(myMatrix.data) #Default is to apply mask axs[1].imshow(myMatrix) plt.show()
id_array = [x.id for x in _get_object_array() if x.id % 2 == 0]
>>> from itertools import chain >>> l = [0, 2, (1, 2), 5, 2, (3, 5)] >>> list(chain(*(i if isinstance(i, tuple) else (i,) for i in l))) [0, 2, 1, 2, 5, 2, 3, 5]
def cutter(seq): n = len(seq) if n <= 20: # here the recursion stops, do your stuff with the sequence return a = cutter(seq[:n/2]) b = cutter(seq[n/2:]) # combine the answer from both subsequences return
for elem in cmp_data['company']: print elem
funcs = ( (20, f), (40, g), (float('inf'), h), ) def superFunction(x): for limit, f in funcs: if x <= limit: return f(x)
import sys def test(filename): f = open(filename) lines = f.readlines() lines = [item.rstrip("\n") for item in lines] newList = list() for item in lines: item = item.split(",") item = tuple(int(items) for items in item) newList.append(item) f.close() print newList if __name__ == "__main__": test(sys.argv[1]) O/P: techie@gateway2:myExperiments$ python test.py /export/home/techie/myExperiments/test.txt [(68, 125), (113, 69), (65, 86), (108, 149), (152, 53), (78, 90), (54, 160), (20, 137), (107, 90), (48, 12)]
>>> data = [[1, 3, "String1"], [3, 2, "String2"]] >>> class AnyString(str): ... def __eq__(self, other): ... return isinstance(other, str) ... >>> check = [1, 3, AnyString()] >>> check in data True
>>> df_tags = df.apply(lambda x: pd.Series(x['Tags']),axis=1).stack().reset_index(level=1, drop=False) >>> df_tags.columns = ['Key', 'Value'] >>> df_tags Key Value 0 Type 12 0 background orange 0 circle blue >>> df.drop('Tags', axis=1).join(df_tags) ID Name Key Value 0 4345 Bill Type 12 0 4345 Bill background orange 0 4345 Bill circle blue
In [1]: import sys,csv In [2]: csv.writer(sys.stdout).writerow(['one", f"', 'two', 'three']) "one"", f""",two,three In [3]: csv.reader(['"one"", f""",two,three']).next() Out[3]: ['one", f"', 'two', 'three']
$('.load_comments').on('click', function () { openerp.jsonRpc("/slides/expand_comment", + $(this).attr('slide-id'), 'call', { 'values': comments, }).then(function (data) { $(data.target).closest('.list_comment').html($('<div class="media"</div>')); // slides: data });
querysting = "select Year, {} from table where Year={}".format(c,y) df = pd.read_sql(querystring,db)
class InstitutionView(ModelView): ... # _handle_view called every request def _handle_view(self, name, **kwargs): if not flask_login.current_user.is_authenticated(): return self.inaccessible_callback(name, **kwargs) # re-scaffold views every request self._refresh_cache() return super(InstitutionView, self)._handle_view(name, **kwargs) # _refresh_cache called once when view is added to admin interface def _refresh_cache(self): # do not _refresh_cache outside of a request context if not flask_login.current_user: # init members with empty tuples to avoid instantiation error self._list_columns = () return super(InstitutionView, self)._refresh_cache()
class Unit: """Very simple class to track a unit name, and an associated count.""" def __init__(self, name, amount): self.name = name self.amount = amount # Pre-existing lists of types and amounts. list1 = ["Infantry", "Tanks", "Jets"] list2 = [ 10, 20, 30] # Create a list of Unit objects, and initialize using # pairs from the above lists. units = [] for a, b in zip(list1, list2): units.append(Unit(a, b))
df.unstack(level=-1)
difference = lambda x: ['x['Allotment'][0], x.ix[1]['NDII_Mean'] - x.ix[0]['NDII_Mean']] df_diffs = DataFrame([difference(x[1].reset_index(drop = True)) for x in df.groupby(['Allotment'])]) df_diffs.columns = ['Allotment', 'NDII_Mean'] print df_diffs Allotment NDII_Mean 0 A_Annex 0.55756 1 Arnstson -0.02747
for j in range(123) : for x,y in zip(list1,list2) : doSomething() .... for x,y in zip(list1,list2) : doSomethingElse()
import os import abc class Path(object): __metaclass__ = abc.ABCMeta def __new__(cls, path): imp = cls._get_subclass_for(path) instance = super(Path, cls).__new__(imp) return instance def __init__(self, path): self.path = path @classmethod def _get_subclass_for(cls, path): #import pdb; pdb.set_trace() for subclass in cls.__subclasses__(): if subclass.match(path): return subclass raise LookupError("No matching subclass for path '%s'" % path) @staticmethod @abc.abstractmethod def match(path): return False @Path.register class FilePath(Path): @staticmethod def match(path): return os.path.isfile(path) @Path.register class DirectoryPath(Path): @staticmethod def match(path): return os.path.isdir(path)
response = requests.post(url, data=data, headers=headers)
import random while True: first_num = random.randint(1,500) second_num = random.randint(1,500) print (first_num) print (second_num) answer = int(input('Entrer la somme des deux nombres: ')) if answer == first_num + second_num: print("It's correct!") break else: print("It's wrong!") tryAgain = raw_input('Try again? [(y)/n] ') if tryAgain.lower() == 'n': break
line2 = new_file.next() # now pointing at line 3 if line2[0] == "P": for _ in xrange(4): new_file.next() # skip lines 3, 4, 5, 6 else: new_file.next() # skip line 3 only
for filename in glob.iglob("*.hgx"): with open(filename) as f: # process file f here
In [38]: x='a' In [39]: lis=[] In [40]: id(lis) Out[40]: 154680492 In [41]: lis=lis+[x] In [42]: lis Out[42]: ['a'] In [43]: id(lis) Out[43]: 154749100
#initializing a variable with some mock poll data option1 = "general store" option2 = "supermarket" option3 = "mall" option4 = "small store" sample_data = [option1,option2,option1,option1,option3,option3,option4,option4,option4,option2] #a dict that will store the poll results results = {} for response in sample_data: results[response] = results.setdefault(response, 0) + 1
def maybeExpungeTag(self, tag): """ Delete /tag/ from the tags table if it is no longer referenced by any bookmarks. Return: True if the tag was deleted. False if the tag is still referenced and was not deleted. """ if not len(tag.bookmarks): self.session.delete(tag) return True else: return False # and for the actual delete... mark = # ...get the bookmark being deleted tags = mark.tags_rel self.session.delete(mark) for tag in tags: self.maybeExpungeTag(tag) self.session.commit()
from google.appengine.ext import deferred def do_something_expensive(a, b, c=None): logging.info("Doing something expensive!") # Do your work here # Somewhere else deferred.defer(do_something_expensive, "Hello, world!", 42, c=True)
import os.path, time from datetime import datetime from time import mktime fulldate = time.ctime(os.path.getctime("file.xlsx")) struct = time.strptime(fulldate) filetime = datetime.fromtimestamp(mktime(struct)) filedate = filetime.replace(hour=0, minute=0, second=0, microsecond=0) if filetime < datetime.now(): print "The file is quite old" else: print "The file is not so old"
numbers_sizes = (i*10**exp for exp in range(2, 9) for i in range(1, 10)) for n in numbers_sizes: test(n)
import dateutil.parser as p (p.parse("02:20:03")+datetime.timedelta(minutes=2)).time()
STRAIGHT_FLUSH = 9 ... TWO_PAIR = 2 ONE_PAIR = 1 HIGH_CARD = 0 hand_score('A7532') # I omit suits here # => (HIGH_CARD, 14,7,5,3,2) hand_score('KK333') # => (FULL_HOUSE, 3, 13) hand_score('33444') # => (FULL_HOUSE, 4, 3) hand_score('AKQJ0') # => (STRAIGHT, 14) # Tuples can be easily compared: (HIGH_CARD, 14,7,5,3,2) < (STRAIGHT, 14) # => True
import httplib2 from apiclient.discovery import build from oauth2client.client import SignedJwtAssertionCredentials # Email of the Service Account. SERVICE_ACCOUNT_EMAIL = '<some-id>@developer.gserviceaccount.com' # Path to the Service Account's Private Key file. SERVICE_ACCOUNT_PKCS12_FILE_PATH = '/path/to/<public_key_fingerprint>-privatekey.p12' def createAnalyticsService(): f = file(SERVICE_ACCOUNT_PKCS12_FILE_PATH, 'rb') key = f.read() f.close() credentials = SignedJwtAssertionCredentials(SERVICE_ACCOUNT_EMAIL, key, scope='https://www.googleapis.com/auth/analytics.readonly') http = httplib2.Http() http = credentials.authorize(http) return build('analytics', 'v3', http=http)
import numpy as np a=np.array([1,]) b=np.array([1,]) c=np.array([1,2,3]) def foo(a,b,c): args=locals() return args.items()[np.array([i[1].size for i in args.items()]).argmax()][1] biggest = foo(a,b,c) print biggest # [1,2,3]
Lst =[] if entData != "stop": Lst.append(entData)
def filter(self, *q_objs, **query): """An alias of :meth:`~mongoengine.queryset.QuerySet.__call__` """ return self.__call__(*q_objs, **query)
import java.math.BigInteger; import java.util.regex.Matcher; import java.util.regex.Pattern; public class SignatureFromPython { private static final Pattern PAT = Pattern.compile("\\[(\\d+)\\]"); private static byte[] i2osp(final BigInteger i, final int bitSize) { if (i == null || i.signum() == -1) { throw new IllegalArgumentException( "input parameter should not be null or negative"); } if (bitSize < Byte.SIZE) { throw new IllegalArgumentException( "bitSize parameter should not be negative and a multiple of 8"); } final int byteSize = (bitSize - 1) / Byte.SIZE + 1; final byte[] signedBigEndian = i.toByteArray(); final int signedBigEndianLength = signedBigEndian.length; if (signedBigEndianLength == byteSize) { return signedBigEndian; } final byte[] leftPadded = new byte[byteSize]; if (signedBigEndianLength == byteSize + 1) { System.arraycopy(signedBigEndian, 1, leftPadded, 0, byteSize); } else if (signedBigEndianLength < byteSize) { System.arraycopy(signedBigEndian, 0, leftPadded, byteSize - signedBigEndianLength, signedBigEndianLength); } else { throw new IllegalArgumentException( "Integer i is too large to fit into " + bitSize + " bits"); } return leftPadded; } public static String toHex(final byte[] data) { final StringBuilder hex = new StringBuilder(data.length * 2); for (int i = 0; i < data.length; i++) { hex.append(String.format("%02X", data[i])); } return hex.toString(); } public static void main(String[] args) { String sigString = "[68830459489863257411523011520104203035626147084548742757940226446079486348431212041096334237130703774949375015187747280487790006116898192460644067270457728626039524097117092304115366780581423597886886987279231850120937691165013216970647150989646220735762034864029622135210042186666476516651349805320771941650]"; Matcher sigMatcher = PAT.matcher(sigString); if (!sigMatcher.matches()) { throw new IllegalArgumentException("Whatever"); } BigInteger sigBI = new BigInteger(sigMatcher.group(1)); // requires bouncy castle libraries System.out.println(toHex(i2osp(sigBI, 1024))); } }
import wx class TextObjectValidator(wx.PyValidator): """ This validator is used to ensure that the user has entered something into the text object editor dialog's text field. """ def __init__(self): """ Standard constructor. """ wx.PyValidator.__init__(self) def Clone(self): """ Standard cloner. Note that every validator must implement the Clone() method. """ return TextObjectValidator() def Validate(self, win): """ Validate the contents of the given text control. """ textCtrl = self.GetWindow() text = textCtrl.GetValue() if len(text) == 0: wx.MessageBox("A text object must contain some text!", "Error") textCtrl.SetBackgroundColour("pink") textCtrl.SetFocus() textCtrl.Refresh() return False else: textCtrl.SetBackgroundColour( wx.SystemSettings_GetColour(wx.SYS_COLOUR_WINDOW)) textCtrl.Refresh() return True def TransferToWindow(self): """ Transfer data from validator to window. The default implementation returns False, indicating that an error occurred. We simply return True, as we don't do any data transfer. """ return True # Prevent wxDialog from complaining. def TransferFromWindow(self): """ Transfer data from window to validator. The default implementation returns False, indicating that an error occurred. We simply return True, as we don't do any data transfer. """ return True # Prevent wxDialog from complaining. #---------------------------------------------------------------------- class TestValidateDialog(wx.Dialog): def __init__(self, parent): wx.Dialog.__init__(self, parent, -1, "Validated Dialog") self.SetAutoLayout(True) VSPACE = 10 fgs = wx.FlexGridSizer(0, 2) fgs.Add((1,1)); fgs.Add(wx.StaticText(self, -1, "These controls must have text entered into them. Each\n" "one has a validator that is checked when the Okay\n" "button is clicked.")) fgs.Add((1,VSPACE)); fgs.Add((1,VSPACE)) label = wx.StaticText(self, -1, "First: ") fgs.Add(label, 0, wx.ALIGN_RIGHT|wx.CENTER) fgs.Add(wx.TextCtrl(self, -1, "", validator = TextObjectValidator())) fgs.Add((1,VSPACE)); fgs.Add((1,VSPACE)) label = wx.StaticText(self, -1, "Second: ") fgs.Add(label, 0, wx.ALIGN_RIGHT|wx.CENTER) fgs.Add(wx.TextCtrl(self, -1, "", validator = TextObjectValidator())) buttons = wx.StdDialogButtonSizer() #wx.BoxSizer(wx.HORIZONTAL) b = wx.Button(self, wx.ID_OK, "OK") b.SetDefault() buttons.AddButton(b) buttons.AddButton(wx.Button(self, wx.ID_CANCEL, "Cancel")) buttons.Realize() border = wx.BoxSizer(wx.VERTICAL) border.Add(fgs, 1, wx.GROW|wx.ALL, 25) border.Add(buttons) self.SetSizer(border) border.Fit(self) self.Layout() app = wx.App(redirect=False) f = wx.Frame(parent=None) f.Show() dlg = TestValidateDialog(f) dlg.ShowModal() dlg.Destroy() app.MainLoop()
>>> import numpy as np >>> import pandas as pd >>> index = np.arange(0, 10) >>> df = pd.DataFrame(index=index, columns=['foo', 'bar']) >>> df Out[268]: foo bar 0 NaN NaN 1 NaN NaN 2 NaN NaN 3 NaN NaN 4 NaN NaN 5 NaN NaN 6 NaN NaN 7 NaN NaN 8 NaN NaN 9 NaN NaN
from sqlalchemy import * from sqlalchemy.orm import * from sqlalchemy.ext.declarative import declarative_base from examples.dogpile_caching.caching_query import query_callable, FromCache, RelationshipCache from hashlib import md5 from dogpile.cache.region import make_region Base = declarative_base() class Person(Base): __tablename__ = 'person' id = Column(Integer, primary_key=True) name = Column(String(100), nullable=False) type = Column(String(50)) __mapper_args__ = { 'polymorphic_identity': 'object', 'polymorphic_on': type } class Man(Person): __tablename__ = 'man' id = Column(Integer, ForeignKey('person.id'), primary_key=True) age = Column(String(100), nullable=False) __mapper_args__ = {'polymorphic_identity': 'man'} class SomethingElse(Person): __tablename__ = 'somethingelse' id = Column(Integer, ForeignKey('person.id'), primary_key=True) age = Column(String(100), nullable=False) __mapper_args__ = {'polymorphic_identity': 'somethingelse'} class Config(Base): __tablename__ = "config" id = Column(Integer, primary_key=True) person = Column(Integer, ForeignKey('person.id')) address = Column(String) person_ref = relationship(Person) e = create_engine("sqlite://", echo=True) Base.metadata.create_all(e) def md5_key_mangler(key): """Receive cache keys as long concatenated strings; distill them into an md5 hash. """ return md5(key.encode('ascii')).hexdigest() regions = {} regions['default'] = make_region( key_mangler=md5_key_mangler ).configure( 'dogpile.cache.memory_pickle', ) Session = scoped_session( sessionmaker( bind=e, query_cls=query_callable(regions) ) ) sess = Session() sess.add(Config(person_ref=SomethingElse(age='45', name='se1'))) sess.add(Config(person_ref=Man(age='30', name='man1'))) sess.commit() all_types = with_polymorphic(Person, "*", aliased=True) conf = sess.query(Config).options(joinedload(Config.person_ref.of_type(all_types)), FromCache("default")).first() sess.commit() sess.close() print "_____NO MORE SQL!___________" conf = sess.query(Config).options(joinedload(Config.person_ref.of_type(all_types)), FromCache("default")).first() print conf.person_ref.age
echo $PS1
def OSinfo(runthis): osstdout = subprocess.Popen(runthis, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True) theInfo = osstdout.communicate()[0].strip() return (theInfo, osstout.returncode)
>>> 'hello world'.encode('hex') '68656c6c6f20776f726c64' >>> '68656c6c6f20776f726c64'.decode('hex') 'hello world'
def subthread1(stop): while not stop: time.sleep(1) print(' 1...') def main_thread(q): stop = [] # list rather than boolean because we need it "by reference" t1 = Thread(target=subthread1, args=(stop,)) t1.daemon = True t1.start() while True: msg = q.get() if msg == 0: print("EXITING THREAD") stop.append(True) break
def process_request(self, request): full_path = request.get_full_path() if full_path.startswith('/users/login'): return
<Location /admin> Order Deny, Allow Deny from all Allow from 127.0.0.1 </Location>
import os, fcntl fcntl.fcntl(thePipe, fcntl.F_SETFL, os.O_NONBLOCK)
from scipy.sparse import hstack hstack((X, X2))
subprocess.Popen('ulimit -v 1024; ls', shell=True)
>>> tcs = root.findall('Testcase') >>> tcs [<Element 'Testcase' at 0x23e14e0>, <Element 'Testcase' at 0x23e1828>] >>> len(tcs) 2 >>> r = ET.Element('Root') >>> r.append(tcs[0]) >>> ET.tostring(r, 'utf-8') '<Root><Testcase>\n <Info1>[]</Info1>\n <Info2>[]</Info2>\n </Testcase>\n </Root>'
A = HDFStore('A.h5') B = HDFStore('B.h5') nrows_a = A.get_storer('df').nrows nrows_b = B.get_storer('df').nrows a_chunk_size = 1000000 b_chunk_size = 1000000 def merge_a_b(a,b): # function that returns an operation on passed # frames a and b # could be a merge, join, concat, or other operation that # results in a single frame for a in xrange(int(nrows_a / a_chunk_size) + 1): a_start_i = a * a_chunk_size a_stop_i = min((a + 1) * a_chunk_size, nrows_a) a = A.select('df', start = a_start_i, stop = a_stop_i) for b in xrange(int(nrows_b / b_chunk_size) + 1): b_start_i = b * b_chunk_size b_stop_i = min((b + 1) * b_chunk_size, nrows_b) b = B.select('df', start = b_start_i, stop = b_stop_i) # this is your result store m = merge_a_b(a, b) if len(m): store.append('df_result', m)
>>> import re >>> s = ' hello world! ' >>> match = re.search(r"^\s*(\S.*?)\s*$", s) >>> match.group(1), match.start(1), match.end(1) ('hello world!', 2, 14)
with Model() as sw_model: sigma = HalfCauchy('sigma', beta=10, testval=1.) switchpoint = DiscreteUniform('switchpoint', lower=0, upper=90, testval=45) # Priors for pre- and post-switch intercepts and slopes intercept_u1 = Uniform('Intercept_u1', lower=-10, upper=10, testval = 0) intercept_u2 = Uniform('Intercept_u2', lower=-10, upper=10, testval = 0) x_coeff_u1 = Normal('x_u1', 0, sd=20) x_coeff_u2 = Normal('x_u2', 0, sd=20) intercept = switch(switchpoint < x, intercept_u1, intercept_u2) x_coeff = switch(switchpoint < x, x_coeff_u1, x_coeff_u2) likelihood = Normal('y', mu=intercept + x_coeff * x, sd=sigma, observed=y) start = find_MAP() step1 = NUTS([intercept_u1, intercept_u2, x_coeff_u1, x_coeff_u2]) step2 = Metropolis([switchpoint]) trace = sample(20000, step=[step1, step2], start=start, njobs=4,progressbar=True)
import xmpp ipaddress='<server-ip>' user='<new-user>' #without @<server-ip> passwd='<password>' c = xmpp.Client(ipaddress) c.connect((ipaddress,5222), secure=0) c.auth(user,passwd,sasl=1) c.sendInitPresence() c.isConnected() c.send(xmpp.protocol.Message('<jid of receiver user with @<domain> >',"hello world"))
pixels, = np.where(bitflags & FLAG) for i, pixel in zip(pixels, array[pixels]): do_something(i, pixel)
list1 = ["a", "b", "c", "xc"] list2 = ["d", "e", "to", "xc"] list3 = ["f", "g", "h", "i", "j", "xc"] print list(set(list1) & set(list2) & set(list3)) # it will print ['xc']
#!/usr/bin/env python3 import subprocess def run_command(command, **kwargs): with subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, bufsize=1, **kwargs) as p: yield from p.stdout # close p.stdout, call p.wait() automatically for line in run_command(r'java -jar c:\jar\minecraft.jar', cwd=r'D:\working directory', universal_newlines=True): print(line, end='')
def natural_numbers(): n = 0 while True: n += 1 yield n def find_nth_character(n): numbers = "" gen = natural_numbers() while len(numbers) < n: numbers += str(gen.next()) print numbers return numbers[n-1] def main(): print find_nth_character(15) if __name__ == '__main__': main()
>>> import platform >>> platform.linux_distribution() ('Ubuntu', '11.04', 'natty') >>> " ".join(platform.linux_distribution()) 'Ubuntu 11.04 natty' >>>
>>> tgt 'https:\\/\\/pbs.twimg.com\\/profile_banners\\/2604140473\\/1404508267' >>> tgt.replace('\\', '') 'https://pbs.twimg.com/profile_banners/2604140473/1404508267'
service MyService { //returns immediately oneway void onewayMethod(<params>); //blocks until completion void normalMethod(<params>); }
import fileinput pattern = 'UUID={}&Major={}&Minor={}&Power={}&RSSI={}' for line in fileinput.input(): query = pattern.format(*line.strip().split(' ')) # now do something with query
def check_for_messages(): <your code here> root.after(10000, check_for_messages)
start_urls = ['http://www.e3050.com/Items.aspx?cat=SON'] pro_urls = [] # all product Urls def parse(self, response): # select 50 products on each page yield FormRequest.from_response(response, formdata={'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$pagesddl': '50', 'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$sortddl': 'Price(ASC)'}, meta={'curr': 1, 'total': 0, 'flag': True}, dont_click=True, callback=self.page_rs_50) def page_rs_50(self, response): # paginate the pages hxs = HtmlXPathSelector(response) curr = int(response.request.meta['curr']) total = int(response.request.meta['total']) flag = response.request.meta['flag'] self.pro_urls.extend(hxs.select( "//td[@class='name']//a[contains(@id,'ctl00_ctl00_ContentPlaceHolder1_ItemListPlaceHolder_itemslv_ctrl')]/@href" ).extract()) if flag: total = hxs.select( "//span[@id='ctl00_ctl00_ContentPlaceHolder1_ItemListPlaceHolder_lbl_pagesizeBtm']/text()").re('\d+')[0] if curr < total: curr += 1 yield FormRequest.from_response(response, formdata={'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$pagesddl': '50', 'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$sortddl': 'Price(ASC)', 'ctl00$ctl00$ScriptManager1': 'ctl00$ctl00$ScriptManager1|ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$pager1$ctl00$ctl01' , '__EVENTTARGET': 'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$pager1$ctl00$ctl01', 'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$hfVSFileName': hxs.select( ".//input[@id='ctl00_ctl00_ContentPlaceHolder1_ItemListPlaceHolder_hfVSFileName']/@value").extract()[ 0]}, meta={'curr': curr, 'total': total, 'flag': False}, dont_click=True, callback=self.page_rs_50 ) else: for pro in self.pro_urls: yield Request("http://www.e3050.com/%s" % pro, callback=self.parse_product) def parse_product(self, response): pass #TODO Implementation Required For Parsing
bank['bob'][1] = 10 # 'bob' is the key
cv::Mat vesselImage = cv::imread(filename); //the original image cv::threshold(vesselImage, vesselImage, 125, 255, THRESH_BINARY); cv::Mat blurredImage; //output of the algorithm cv::pyrUp(vesselImage, blurredImage); for (int i = 0; i < 15; i++) cv::medianBlur(blurredImage, blurredImage, 7); cv::pyrDown(blurredImage, blurredImage); cv::threshold(blurredImage, blurredImage, 200, 255, THRESH_BINARY);
class MyThread(Thread): def __init__(self): Thread.__init__(self) self.ToKill = False def run(self): while True: self.FooHandler() if self.ToKill: return None def FooHandler(self): """ your function here """ print 3 class Panel(wx.Panel): def __init__(self, parent): wx.Panel.__init__(self, parent, id=-1, style=wx.RAISED_BORDER) Bsizer = wx.BoxSizer(wx.VERTICAL) button=wx.ToggleButton(self, label="Click To Enable") Bsizer.Add(button,1,wx.ALL | wx.EXPAND) self.SetSizer(Bsizer) self.Bind(wx.EVT_TOGGLEBUTTON,self.buttonEvt,id=button.GetId()) def buttonEvt(self, evt): clickedToggleButton = evt.GetEventObject() if clickedToggleButton.GetValue(): self.thread = MyThread() self.thread.start() clickedToggleButton.SetLabel("Click To Disable") else: self.thread.ToKill = True clickedToggleButton.SetLabel("Click To Enable")
import json import requests from OpenSSL import crypto P12_CERT_FILE = 'C:/Users/mryan/Documents/Code/SampleApps/bundle.p12' p12_cert = crypto.load_pkcs12(open(P12_CERT_FILE).read(), 'passphrase') pem_cert = crypto.dump_certificate(crypto.FILETYPE_PEM, p12_cert.get_certificate()) # remove PEM header, footer, and new lines to produce raw cert data raw_data = ''.join(pem_cert.split('\n')[1:-2]) cert_data = json.dumps({'RawData': raw_data}) result = requests.post(apiRoot + "/Accounts/" + accId + "/certs", data=cert_data)
pixelspace = reader.GetPixelSpacing() spacing = image.GetSpacing() vtk_data = image.GetPointData().GetScalars() numpy_data = numpy_support.vtk_to_numpy(vtk_data) numpy_data = numpy_data.reshape(dims[0], dims[1], dims[2]) numpy_data = numpy_data.transpose(2,1,0) dims = numpy_data.shape dataImporter = vtkImageImport() dataImporter.SetDataScalarTypeToFloat() dataImporter.SetNumberOfScalarComponents(1) dataImporter.SetDataExtent(0, dims[2]-1, 0, dims[1]-1, 0, dims[0]-1) dataImporter.SetWholeExtent(0, dims[2]-1, 0, dims[1]-1, 0, dims[0]-1) dataImporter.SetDataSpacing(spacing[0],spacing[1],spacing[2]) dataImporter.CopyImportVoidPointer(numpy_data, numpy_data.nbytes)
dict(zip(col_names, p))
def get_member(a,the_list): if a in the_list: return a else: for elem in the_list: if isinstance(elem,list): if a in elem: return elem return None def merge_member(a,b,the_list): get_member_a = get_member(a,the_list) get_member_b = get_member(b,the_list) if get_member_a and get_member_b: the_list.remove(get_member_a) the_list.remove(get_member_b) if isinstance(get_member_b,list): get_member_b.extend(get_member_a) the_list.append(get_member_b) elif isinstance(get_member_a,list): get_member_a.extend(get_member_b) the_list.append(get_member_a) else: the_list.append([get_member_b,get_member_a]) return the_list
>>> import requests >>> response = requests.get("http://www.google.com") >>> print response.content '<!doctype html><html itemscope="" itemtype="http://schema.org/WebPage"><head>....' >>> print response.content == response.text True
def print_binary(prefix,n): if n==0: print (prefix) else: print_binary((prefix+'0'),n-1) print_binary((prefix+'1'),n-1)
from OpenSSL import SSL from twisted.internet import reactor, ssl from twisted.web import client class MyPolicy(client.BrowserLikePolicyForHTTPS): def creatorForNetloc(self, hostname, port): return ssl.optionsForClientTLS( hostname.decode("ascii"), extraCertificateOptions={'method': SSL.SSLv3_METHOD}, trustRoot=self._trustRoot ) myAgent = client.Agent(reactor, contextFactory=MyPolicy())
#include <boost/python.hpp> #include <boost/python/suite/indexing/vector_indexing_suite.hpp> #include <Python.h> #include <vector> #include <boost/variant.hpp> typedef boost::variant<int> number; typedef std::vector<number> vector; vector function() { return vector{1}; } struct number_to_object : boost::static_visitor<PyObject*> { static result_type convert(number const& v) { return apply_visitor(number_to_object(), v); } template<typename T> result_type operator () (T const& v) const { return boost::python::incref(boost::python::object(v).ptr()); } }; void init_module() {} BOOST_PYTHON_MODULE(pyexc_test) { using namespace boost::python; class_<vector>("vector").def(vector_indexing_suite<vector, true>()); to_python_converter<number, number_to_object>(); implicitly_convertible<int, number>(); def("function", function); def("init_module", init_module); }
array[n-i:-i or None]
# data source l0 = [{"num": 60, "name": "A"}, {"num": 50, "name": "B"}, {"num": 49, "name": "C"}] # initialization, length of data source, void data destination, # start from beginning of data source ll0, l1, nl = len(l0), [], 0 # the loop is downwards, because we want to match the numbers # in data source from high to low for n in range(l0[0]['num'], 0, -1): # first test avoids IndexError, second test is your condition if nl < ll0 and l0[nl]['num'] == n: l1.append([n, l0[nl]]) # if we had a match, we switch our attention to the next item # in data source, hence increment the index in data source nl += 1 else: l1.append([n, {}]) # we built the data destination list from top to bottom, # you want from bottom to top, hence l1.reverse()
import time from random import randint def print_data(): print "Hello World!" time.sleep(randint(30, 45)) def print_data_for(total_time): start_time = time.time() while time.time() < start_time + total_time: print_data() print_data_for(60*60) # 1 hour
class OtherTable(DeclarativeBase, DatetimeBase): __tablename__ = 'other_table' blah = Column(Integer, primary_key=True) other_column = Column(Text) __table_args__ = (PrimaryKeyConstraint("blah", "inserted"),)
import itertools def has_monochromatic_rectangles(grid): # use range instead of xrange here (xrange is not in Python 3) points = list(itertools.product(range(len(grid)), range(len(grid[0])))) # check if for any rectangle, all 4 colors are equal # (this is more brute-force than necessary, but you placed simplicity # above efficiency. Also, for 17x17, it doesn't matter at all ;) return any(grid[x1][y1] == grid[x1][y2] == grid[x2][y1] == grid[x2][y2] for (x1,y1), (x2,y2) in itertools.product(points, points) if x1 != x2 and y1 != y2) def has_max_colors(grid, most): # collect all grid values and uniquify them by creating a set return len(set(sum(grid, []))) <= most if __name__ == '__main__': # read from STDIN (could easily be adapted to read from file, URL, ...) import sys grid = [map(int, line.split(',')) for line in sys.stdin] assert has_max_colors(grid, 4) assert not has_monochromatic_rectangles(grid)
2706 function calls (2004 primitive calls) in 4.504 CPU seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 2 0.006 0.003 0.953 0.477 pobject.py:75(save_objects) 43/3 0.533 0.012 0.749 0.250 pobject.py:99(evaluate) ...
#!/usr/bin/perl open(FI,"file.txt"); read(FI,$_,10000000); close(FI); @arr = split('--###--'); $cnt=0; for $c (@arr) { open(FO,">$cnt.txt"); print FO $c; close(FO); $cnt++; }
# func1 is not in func2's globals >>> func2.__globals__['func1'] Traceback (most recent call last): File "<pyshell#6>", line 1, in <module> func2.__globals__['func1'] KeyError: u'func1' # func1 is in the globals of the internally-stored wrapped version of func2 >>> func2.__closure__[0].cell_contents.__globals__['func1'] <function func1 at 0x0000000002B2B358>
thelist = [int(s) for s in thestring.split()]
>>> data = defaultdict(set) >>> data['a'].add(1) >>> data['b'].add(2) >>> data['b'].add(3) >>> min(data.items(), key=lambda x: min(x[1])) ('a': {1}) >>> min(data.items(), key=lambda x: max(len(x[1]))) ('b': {2, 3})
last_time = 0 # starting time of data, 0 is here as example total_time = 0 # 0 seconds for time, switch, state in state_switches: if a_on and b_on and c_on: total_time += time - last_time if switch == "A": a_on = state if switch == "B": b_on = state if switch == "C": c_on = state last_time = time
def main(): maxNumber = 5000 diff = 1000 p = {} quickCache = {} for i in range(maxNumber): p[i] = i * (3 * i - 1 ) / 2 def quickCheck(n): if n in quickCache: return quickCache[n] partial_c = (sqrt(1 + 24 * (n)))/-6 c = 1/6 + partial_c if int(c.real) == c.real: quickCache[n] = True return True c = c - 2*partial_c if int(c.real) == c.real: quickCache[n] = True return True quickCache[n] = False return False for i in range(1, maxNumber): mi = p[i] for g in range(i+1, maxNumber): ma = p[g] if ma - mi < diff and quickCheck(ma - mi) and quickCheck(ma + mi): print('New couple ', ma, mi) diff = ma - mi
new_d = {} for k, v in d.items(): u, n, r = k.split('_') new_d[(n, r)] = v + new_d.get((n, r), 0)
class StoryForm(ModelForm): fecha_cierre = forms.TypedChoiceField( choices=DAYS_CHOICES, widget=forms.Select) class Meta: models = Story exclude = ('deadline',) def save(self): story = super(StoryForm, self).save(commit=False) story.deadline = datetime.datetime.now() + \ datetime.timedelta(days=self.cleaned_data['fecha_cierre'])) story.save() return story
from celery import task from django.core.cache import cache def page_two_calculation(arg1, arg2): return arg1 + arg2 @task def page_two_task(arg1, arg2): result = page_two_calculation(arg1, arg2) cache_key = "page-two-%s-%s" (arg1, arg2) cache.set(cache_key, result) def page_one(request, arg1, arg2): # Start the page two task page_two_task.delay(arg1, arg2) # Return the page one response return HttpResponse('page one') def page_two(request, arg1, arg2) cache_key = "page-two-%s-%s" (arg1, arg2) result = cache.get(cache_key) if result is None: # the result will only be None if the page 2 calculation # doesn't exist in the cache, in which case we'll have to # return the value synchronously. result = page_two_calculation(arg1, arg2) return result
if item in my_canvas.find_all(): my_canvas.delete(item) else: print("Item not on canvas")
var csrftoken == getCookie('csrftoken') || $(":input[name='csrfmiddlewaretoken']").val();
import matplotlib.pyplot as plt plt.hlines(7, 0, 2, linestyles='dashed') plt.hlines(11, 0, 2, linestyles='dashed') plt.hlines(10, 0, 2, linestyles='dashed') plt.hlines(8, 0, 2, linestyles='dashed') plt.annotate( '', xy=(1, 10), xycoords='data', xytext=(1, 8), textcoords='data', arrowprops={'arrowstyle': '<->'}) plt.annotate( 'D = 1', xy=(1, 9), xycoords='data', xytext=(5, 0), textcoords='offset points') # alternatively, # plt.text(1.01, 9, 'D = 1') plt.show()
def parse(self, response): hxs = HtmlXPathSelector(response) links = hxs.select('//a[@class="prodLink ListItemLink"]/@href') for link in links: href = link.extract() yield Request('http://www.walmart.com/' + href, self.parse_data) # # here # | # v next_link = hxs.select('//li[@class="btn-nextResults"]/a/@href').extract() if next_link: # and as hxs.select() will return a list, you should select the first element yield Request('http://www.walmart.com/search/search-ng.do' + next_link[0], self.parse) else: print "last Page"
file_content = set([line.rstrip() for line in file_handler]) only_in_platform = set(platform_specific_req).difference(file_content)
def is_prime(num): # returns false if num is not an integer if not isinstance(num, int): return None # returns false is divisible by any number # between 1 and num return False for i in range(2, num): if num % i == 0: return False # if none of the numbers divide num return True return True.
import sys from PyQt4.QtCore import * from PyQt4.QtGui import * class FeedbackWindow(QWidget): def __init__(self): QWidget.__init__(self) self.main_layout = QVBoxLayout(self) #self.main_widget = QWidget(self) # main_widget is not used. #self.main_widget.setLayout(self.main_layout) self.setLayout(self.main_layout) self.title_label = QLabel("Tell us what you think:") self.feedback_text_editor = QTextEdit() self.send_button = QPushButton("Send") self.main_layout.addWidget(self.title_label) self.main_layout.addWidget(self.feedback_text_editor) self.main_layout.addWidget(self.send_button) self.setWindowTitle("Feedback") self.setGeometry(200,120,300,300) if __name__ == "__main__": app = QApplication(sys.argv) w = FeedbackWindow() w.show() app.exec_()
#! /usr/bin/env python3 def main(): print(find_mismatch('Hello, world!', 'Hello, world')) print(find_mismatch('Hello, world!', 'Hello, world!')) print(find_mismatch('Hello, world!', 'Hallu, world!')) print(find_mismatch('Hello, world!', 'Hello, world.')) def find_mismatch(string_a, string_b): if len(string_a) != len(string_b): return 2 folded_a, folded_b = string_a.casefold(), string_b.casefold() if folded_a == folded_b: return 0 found_difference = False for character_a, character_b in zip(folded_a, folded_b): if character_a != character_b: if found_difference: return 2 found_difference = True return 1 def find_mismatch(a, b): """Find mismatches in strings a and b. Returns 0 when strings are the same. Returns 1 when strings differ in one character. Returns 2 any other time (different lengths or more mismatches).""" if len(a) != len(b): return 2 a, b = a.casefold(), b.casefold() if a == b: return 0 error = False for a, b in zip(a, b): if a != b: if error: return 2 error = True return 1 if __name__ == '__main__': main()
def directed_graph_from_edges(edges): graph = {} for a,b in edges: graph.setdefault(a,set()) graph[a].add(b) return graph
import htql; address = '88-21 64th st , Rego Park , New York 11374' states=['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'District Of Columbia', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'PALAU', 'Pennsylvania', 'PUERTO RICO', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming']; a=htql.RegEx(); a.setNameSet('states', states); state_zip1=a.reSearchStr(address, "&[s:states][,\s]+\d{5}", case=False)[0]; # state_zip1 = 'New York 11374' state_zip2=a.reSearchList(address.split(), r"&[ws:states]<,>?<\d{5}>", case=False)[0]; # state_zip2 = ['New', 'York', '11374']
>>> class Foo(object): ... def __del__(self): ... print "Bye bye!" ... >>> spam = Foo() >>> bar = spam >>> del spam >>> del bar Bye bye!
startValue = -1.0 intervalLength = 2.0 numberOfSteps = 14 increasePerStep = intervalLength / numberOfSteps print startValue x = startValue for i in range (numberOfSteps): x += increasePerStep print x -1.0 -0.857142857143 -0.714285714286 -0.571428571429 -0.428571428571 -0.285714285714 -0.142857142857 -2.22044604925e-16 0.142857142857 0.285714285714 0.428571428571 0.571428571429 0.714285714286 0.857142857143 1.0
if form.is_valid(): c = form.cleaned_data["category"] category = Category.objects.filter(name=c).first() if not category: category = Category.objects.create(name=c) product = form.save(commit=False) product.category = category product.save()
x[1].T x[2] - Y
>>> import typing >>> point = typing.NamedTuple("Point",[('x',int),('y',int)])
from collections import defaultdict words_seen = defaultdict(list) for word,filedate in get_words(): words_seen[word].append(filedate)
>>> from pygit2 import clone_repository >>> repo_url = 'git://github.com/libgit2/pygit2.git' >>> repo_path = '/path/to/create/repository' >>> repo = clone_repository(repo_url, repo_path) # Clones a non-bare repository >>> repo = clone_repository(repo_url, repo_path, bare=True) # Clones a bare repository
#include <iostream> #include <list> #include <utility> #include <vector> using namespace std; void likeCPlusPlus() { int i = 666, j = 666, width = 666, height = 666, image[666][666]; for( int dy = 1; dy >= -1; --dy ) { int const dx = -1; int const x = i + dx; int const y = j + dy; if( 0 <= x && x < width && 0 <= y && y < height && image[x][y] == 0 ) {} } } void likePythonInCPlusPlus() { int i = 666, j = 666, width = 666, image[666][666]; std::vector<std::pair<int,int> > direction; direction.push_back(std::make_pair(-1,1)); direction.push_back(std::make_pair(-1,0)); direction.push_back(std::make_pair(-1,-1)); for ( std::vector<std::pair<int,int> >::iterator itr = direction.begin(); itr != direction.end(); ++itr) { int m = (*itr).first; int n = (*itr).second; if ( (0 <= i + m && i + m < width ) && (0 <= j + n && j + n < width ) && image[i + m][j + n ] == 0) {} } } int main() {}
In [107]: pd.DataFrame(np.diag(s),index=s.index,columns=s.index) Out[107]: a b c d e a 0.630529 0.000000 0.000000 0.000000 0.000000 b 0.000000 0.360884 0.000000 0.000000 0.000000 c 0.000000 0.000000 0.345719 0.000000 0.000000 d 0.000000 0.000000 0.000000 0.796625 0.000000 e 0.000000 0.000000 0.000000 0.000000 -0.176848
$ echo $LANG en_US.utf-8 $ python3 Python 3.3.2 (default, Aug 22 2013, 12:33:42) [GCC 4.2.1 Compatible Apple Clang 4.0 ((tags/Apple/clang-421.0.60))] on darwin Type "help", "copyright", "credits" or "license" for more information. >>> from unidecode import unidecode >>> print(unidecode(u"Cœur")) Coeur >>> print(unidecode(u"сообще́ния")) soobshcheniia
joined_tables = [mapper.class_ for mapper in query._join_entities]
#include <Python.h> static PyObject * do_something(PyObject *self, PyObject *args, PyObject *kwargs) { char *filename; int mode = 2; static char *keywords[] = {"filename", "mode", NULL}; if (!PyArg_ParseTupleAndKeywords(args, kwargs, "s|i", keywords, &filename, &mode)) return NULL; char *result = do_somethingelse(filename); return Py_BuildValue("s", result); } static PyMethodDef module_functions[] = { { "do_something", (PyCFunction)do_something, METH_VARARGS | METH_KEYWORDS, "do something" }, { NULL } }; PyMODINIT_FUNC initmyext(void) { Py_InitModule("myext", module_functions); }
; When server connection is released back to pool: ; session - after client disconnects ; transaction - after transaction finishes ; statement - after statement finishes pool_mode = session
import math def multiplier(x, y): dist = x - y return 1 + dist/math.sqrt(1+dist**2)
def rank(toSort): #importing from the string library from string import lowercase as alph #temporary list _ranks=[] #populate with empty dictonaries for i in range(len(toSort)): _ranks.append({}) #the actual sorting algorithm for i in range(len(toSort)-1): #iterate all k/v pairs in the supplied dictionary for k,v in toSort.iteritems(): #iterate all k/v pairs in v element for a,b in v.iteritems(): #if the alpha index of an element is equal to #the max alpha index of elements in its containing dictionary... if alph.index(b)==max(map(alph.index,v.values())): _ranks[i][k]=a #if it isn't.. else: try: _ranks[i+1][k]=a except IndexError: _ranks[-1][k]=a return _ranks
import matplotlib.pyplot as plt import numpy as np X1=np.random.rand(10,10) X2=np.random.rand(10,10) K,sigma=10,1.5 vmin = np.minimum(X1,X2).min() vmax = np.maximum(X1,X2).max() fig, axes = plt.subplots(1,2) axes[0].set_title("$K = " + str(K) + " , \sigma = " + str(sigma) + "$") heatmap1 = axes[0].imshow(X1, interpolation='none', cmap=plt.get_cmap("seismic"), vmin=vmin,vmax=vmax) axes[1].set_title(r"$K = " + str(K) + ", \sigma = " + str(sigma) + "$") heatmap2 = axes[1].imshow(X2, interpolation='none', cmap=plt.get_cmap("seismic"), vmin=vmin,vmax=vmax) plt.subplots_adjust(left=None, bottom=None, right=0.8, top=None, wspace=0.4, hspace=.4) fig.savefig('test.png') cpos = [axes[0].get_position().bounds[1], axes[0].get_position().bounds[3]] cax = fig.add_axes([0.9,cpos[0],0.01,cpos[1]]) fig.colorbar(heatmap1,cax=cax) fig.savefig('test.png')
zip_file = zipfile.ZipFile('toto.zip') target_path = 'C:\test\object' for i, filename in enumerate(zip_file.namelist()): target = os.path.join(target_path, "%05d_%s" % (i, filename)) file_obj = open(target, 'wb') try: shutil.copyfileobj(zip_file.open(filename, 'r'), file_obj) finally: file_obj.close()
import subprocess, time, signal p = subprocess.Popen(['python', '-u', 'myscript.py'], stdout=subprocess.PIPE) time.sleep(5) p.send_signal(signal.SIGTERM) output = p.communicate()[0] print('Process has exited with code %d' % p.wait()) print('Output is %s' % str(output))
with open('file_a','r') as fa: # open file a --> read the files into lists list_a = fa.read().splitlines() with open('file_b','r') as fb: # open file b --> read the files into lists list_b = fb.read().splitlines() # get element in list_b if list_a contain the element(only first 24 characters) match_list = [n for n in list_b if n[:24] in list_a] with open('file_c','w+') as fc: # write the matching list to the new file fc.write('\n'.join(match_list))
figure; set(gca, 'ColorOrder', hsv(5)); set(gca, 'LineStyleOrder', '-|--|:'); hold on; t = 0:pi/20:2*pi; for i = 1:15 plot(t, sin(t-i/5)); end
import threading lock = threading.Lock() def write_to_file(f, text, file_size): lock.acquire() # thread blocks at this line until it can obtain lock # in this section, only one thread can be present at a time. print >> f, text, file_size lock.release() def filesize(asset): f = open("results.txt", 'a+') c = wmi.WMI(asset) wql = 'SELECT FileSize,Name FROM CIM_DataFile where (Drive="D:" OR Drive="E:") and Caption like "%file%"' for item in c.query(wql): write_to_file(f, item.Name.split("\\")[2].strip().upper(), str(item.FileSize))
predictions /= n_predictions self.oob_prediction_ = predictions if self.n_outputs_ == 1: self.oob_prediction_ = \ self.oob_prediction_.reshape((n_samples, )) self.oob_score_ = 0.0 for k in range(self.n_outputs_): self.oob_score_ += r2_score(y[:, k], predictions[:, k]) self.oob_score_ /= self.n_outputs_
from matplotlib import pyplot as pp class FigEventLoopDemo(object): def __init__(self): self.fig,self.ax = pp.subplots(1,1,num='Event loop demo') self.clickme = self.ax.text(0.5,0.5,'click me',ha='center',va='center',color='r',fontsize=20,picker=10) canvas = self.fig.canvas # add a callback that triggers when the text is clicked self.cid = canvas.mpl_connect('pick_event',self.on_pick) print "entering a blocking loop" # start a blocking event loop self.fig.canvas.start_event_loop(timeout=-1) def on_pick(self,event): if event.artist is self.clickme: # exit the blocking event loop self.fig.canvas.stop_event_loop() print "now we're unblocked"
class FooResource(ModelResource): class Meta: # The usual stuff def dispatch(self, request_type, request, **kwargs): # Do whatever
>>> import numpy as np >>> np.loadtxt('/tmp/sample.txt', dtype=str, delimiter='##', comments=None) array(['826', '25733', 'Emanuele Buratti', ' ', 'Mammalian cell expression'], dtype='|S25')
alltext = myfile.read() tokenized_sentences = nltk.word_tokenize(alltext)
class Button(QPushButton): def __init__(self, parent=None): super(Button, self).__init__(parent) # other initializations... def enterEvent(self, QEvent): # here the code for mouse hover pass def leaveEvent(self, QEvent): # here the code for mouse leave pass
In [8]: result = "10['1', '0']0" In [9]: re.sub(r'\[[^\]]*\]', '', result) Out[9]: '100'
>>> import numpy as np >>> a = np.array([[1, 2, 3], [4, 5, 6]]) >>> b = np.array([[7, 8, 9], [10, 11, 12]]) >>> np.hstack( (a, b) ) array([[ 1, 2, 3, 7, 8, 9], [ 4, 5, 6, 10, 11, 12]])
s = requests.Session() s.auth = ('user', 'pass') s.headers.update({'x-test': 'true'}) # both 'x-test' and 'x-test2' are sent s.get('http://httpbin.org/headers', headers={'x-test2': 'true'})
>>> import numpy as np >>> wds = np.random.rand(550800, 8) >>> z = np.random.rand(212065) >>> ixs = np.random.randint(212065, size=(550800, 8)) >>> np.einsum('ij,ij->i', wds, z[ixs]) array([ 1.65069924, 3.26203701, 3.16035664, ..., 1.76963986, 2.09727537, 1.94905991]) >>> np.vdot(wds[0], z[ixs[0]]) 1.6506992361953157 >>> np.vdot(wds[1], z[ixs[1]]) 3.2620370116548827
from jinja2 import Template my_template = Template(""" <html> <body> <table border="0"> <tr> {% for url in urls %} <td><a href="{{ url }}">{{ url }}</td> {% endfor %} </tr> </table> """) urls = ["http://.....jpg","http://.....jpg","http://.....jpg","http://.....jpg"] rendered_html = my_template.render(urls=urls)
import random index = random.randint(0, len(yourstring)-1) yourstring = yourstring[:index] + yourstring[index+1:] print yourstring[index]
import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D X_MAX = 50 Y_MAX = 50 Z_MAX = 50 fig = plt.figure(1) ax = fig.add_subplot(111, projection='3d') ax.set_title("My Title") ax.set_xlim3d([0, X_MAX]) ax.set_ylim3d([0, Y_MAX]) ax.set_zlim3d([0, Z_MAX]) ax.set_autoscale_on(False) plt.ion() plt.show() a = 0 sct = None while a < 50: a += 1 if sct is not None: sct.remove() sct = ax.scatter( a, a/2+1, 3, s=1 ) fig.canvas.draw() plt.pause(0.001)
$.ajax({ type: "GET", url : "/repl", data: {url : "print \"hello\""}, contentType: 'application/json;charset=UTF-8', success: function(result){ alert(result.output); } });
class mylist (list): def __getitem__(self, n): if n < 0: raise IndexError("...") return list.__getitem__(self, n) keyboard = mylist() # instead of []
from django.db.models import Sum total = ( Task.objects .filter(your-filter-here) .aggregate( total=Sum('progress', field="progress*estimated_days") )['total'] )
class PartitionerInvariantsFixture(object): def setUp(self): self.testDataSet = range(100) # create test-data-set super(PartitionInvariantsFixture, self).setUp() def test_partitioner(self): TestCase.assertEqual(self.testDataSet, chain.from_iterable(self.partitioner(self.testDataSet)) class MyClassTests(TestCase, PartitionerInvariantsFixture): partitioner = Partitioner
import numpy as np from pandas import Timestamp months = range(1, 13) df['ep0'] = df.opdate.where(df.opdate > Timestamp('20140101'), Timestamp('20140101')) for month in months: colname = 'ep%d' % month prev_colname = 'ep%d' % (month - 1) df[colname] = df[prev_colname] + np.timedelta64(40, 'D')
from decimal import Decimal def number2string(a): b = format(Decimal(str(a)).normalize(), 'f') print a,"->",b
def generate_values(f): buf = "" # a buffer of data read from the file pos = 0 # the position of our buffer within the file while True: # loop until we return at the end of the file new_data = f.read(4096) # read up to 4k bytes at a time if not new_data: # quit if we got nothing if buf: yield pos, buf.split(",") # handle any data after last newline return buf += new_data line_start = 0 # index into buf try: while True: # loop until an exception is raised at end of buf line_end = buf.index("\n", line_start) # find end of line line = buf[line_start:line_end] # excludes the newline if line: # skips blank lines yield pos+line_start, line.split(",") # yield pos,data tuple line_start = line_end+1 except ValueError: # raised by `index()` pass pos += line_end + 1 buf = buf[line_end + 1:] # keep left over data from end of the buffer
import random random.shuffle(array)
def PrintProductsBelowNumber(number): number1 = 1 while number1 <= number: number2 = 1 while number2 <= number: print(number1, "*", number2, "=", number1 * number2) number2 += 1 number1 += 1 PrintProductsBelowNumber(2)
self.e = tk.Entry(...) ... self.e.insert("insert", "new text")
from apiclient import discovery # Auth goes here if necessary. Create authorized http object... client = discovery.build('storage', 'v1beta2') # add http=whatever param if auth request = client.objects().list( bucket="mybucket", prefix="abc/myfolder") while request is not None: response = request.execute() print json.dumps(response, indent=2) request = request.list_next(request, response)
In [36]: np.bincount(a, weights=b) Out[36]: array([ 13., 103., 6.])
import sys from PyQt4.Qt import * class MyPopup(QWidget): def __init__(self, mainWindow): QWidget.__init__(self) # use the mainWindow passed as parameter mainWindow.label1.setText('hello') class MainWindow(QMainWindow): def __init__(self, *args): QMainWindow.__init__(self, *args) self.cw = QWidget(self) self.setCentralWidget(self.cw) self.btn1 = QPushButton("Click me", self.cw) self.btn1.setGeometry(QRect(50, 50, 100, 30)) self.label1 = QLabel("No Commands running", self.cw) self.connect(self.btn1, SIGNAL("clicked()"), self.doit) self.w = None def doit(self): self.w = MyPopup(self) #when creating the popup pass in the main window self.w.setGeometry(QRect(100, 100, 400, 200)) self.w.show() if __name__ == "__main__": app = QApplication(sys.argv) myapp = MainWindow() myapp.show() sys.exit(app.exec_())
>>> tup = [lst[x+1] for x in range(0, len(lst), 2)] >>> names = [lst[x] for x in range(0, len(lst), 2)] >>> b = [] >>> [b.append(x) for x in tup if x not in b] >>> b [(['1000.0'], None), (['1001.0'], None)] >>> list(set(names)) ['ACER', 'HP']
plt.figure() CS = plt.contour(X, Y, Z) plt.clabel(CS, inline=1, fontsize=10) plt.title('Simplest default with labels')
import hmac import hashlib import base64 dig = hmac.new(b'1234567890', msg=your_bytes_string, digestmod=hashlib.sha256).digest() base64.b64encode(dig).decode() # py3k-mode 'Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg='
In [32]: text Out[32]: u' A <EM ID="5103" CATEG="ORGANIZACAO" TIPO="INSTITUICAO">Legi\xe3o da Boa Vontade</EM> comemora amanh\xe3 o <EM ID="5104" CATEG="VALOR" TIPO="CLASSIFICACAO">10\xba.</EM> anivers\xe1rio da sua implanta\xe7\xe3o em <EM ID="5105" CATEG="LOCAL" TIPO="HUMANO">Portugal</EM> com cerim\xf3nias de car\xe1cter religioso e de conv\xedvio -- disse ontem fonte da organiza\xe7\xe3o. ' In [33]: re.sub(r'<EM[^C]*(CATEG="[^"]+")[^>]*>', r'<\1>', text).replace(r'</EM>', '') Out[33]: u' A <CATEG="ORGANIZACAO">Legi\xe3o da Boa Vontade comemora amanh\xe3 o <CATEG="VALOR">10\xba. anivers\xe1rio da sua implanta\xe7\xe3o em <CATEG="LOCAL">Portugal com cerim\xf3nias de car\xe1cter religioso e de conv\xedvio -- disse ontem fonte da organiza\xe7\xe3o. '
from pathlib import Path for subdir in sorted(Path('/some/path').iterdir()): print(subdir)
for pos, link in enumerate(soup.find_all('a', href=re.compile("bangladesh"))): tip = link.get('href') print(tip) if (pos + 1) == 2: webbrowser.open(tip)
d = {} l = llist.dllist() # insert 'foo' and obtain the link lnk = l.append('foo') # insert the link to the dictionary d['foo'] = lnk
variable = "" value = "" r = "" for key in form.keys(): variable = str(key) value = str(form.getvalue(variable)) r += "<p>"+ variable +", "+ value +"</p>\n" fields = "<p>"+ str(r) +"</p>"
class OnlyOne: class __OnlyOne: def __init__(self, arg): self.val = arg def __str__(self): return repr(self) + self.val instance = None def __init__(self, arg): if not OnlyOne.instance: OnlyOne.instance = OnlyOne.__OnlyOne(arg) else: OnlyOne.instance.val = arg def __getattr__(self, name): return getattr(self.instance, name)
In [103]: def lst(): i = 1 while i <= 10: yield i i += 1 In [104]: g = lst() In [105]: while True: try: v1, v2 = next(g), next(g) print(v1,v2) except StopIteration: break .....: (1, 2) (3, 4) (5, 6) (7, 8) (9, 10)
RotatingFileHandler(filename, maxBytes=10*1024*1024, backupCount=5)
class Test01(unittest.TestCase): def test_login(self): self.page = "https://myWebPageAddress" self.username = "userName" self.password = "Password" self.browser_label = ['firefox', 'chrome', 'ie'] for index in range(len(self.browser_label)): self.browser_name = self.browser_label[index] if self.browser_name == 'firefox': logger.debug("Opening [" + self.browser_name + "] ...") self.driver = webdriver.Firefox() if self.browser_name == 'chrome': logger.debug("Opening [" + self.browser_name + "] ...") self.driver = webdriver.Chrome() if self.browser_name == 'ie': logger.debug("Opening [" + self.browser_name + "] ...") self.driver = webdriver.Ie() try: logger.info("Test_01::Case_01::Login OK") Test01.case_01(self) except BaseException as e: logger.fatal(e.value) logger.info("End") self.driver.close() def case_01(self): .... ....
In [58]: df.pivot_table(index='c2', columns='c1', values='v').reset_index() Out[58]: c1 c2 g1 g2 0 x 72 53 1 y 44 97 2 z 13 32
#Dev by Mkee import Tkinter as tk import sys class Shuffle(object): def __init__(self,master=None): self.master=master self.text=tk.Text(master) def hide(self): self.text.pack_forget() def show(self): self.text.pack(side=tk.LEFT, padx=5, pady=5) class Buttons(object): def __init__(self,master=None): self.master=master self.red = tk.Button(self.master, text="Red", bg="red", fg="white") self.green = tk.Button(self.master, text="Green", bg="green", fg="black") self.blue = tk.Button(self.master, text="Blue", bg="blue", fg="white") def hide(self): self.red.pack_forget() self.green.pack_forget() self.blue.pack_forget() def show(self): self.red.pack(side=tk.LEFT,expand=tk.YES,fill=tk.BOTH) self.green.pack(side=tk.LEFT,expand=tk.YES,fill=tk.BOTH) self.blue.pack(side=tk.LEFT,expand=tk.YES,fill=tk.BOTH) class MainApp(object): def __init__(self,master=None): self.master=master app=self.app=tk.Tk() app.title("Mkee's Tools") app.geometry('300x200') self.shuffle=Shuffle(master) self.buttons=Buttons(master) self.current=None menubar=tk.Menu(app) program_menu=tk.Menu(menubar) program_menu.add_command(label='Shuffle', command=lambda: self.show(self.shuffle)) program_menu.add_command(label='Buttons', command=lambda: self.show(self.buttons)) program_menu.add_command(label='Quit',command=sys.exit) menubar.add_cascade(label='Programs', menu=program_menu) app.config(menu=menubar) def show(self,obj): if self.current != obj: try: self.current.hide() except AttributeError: pass self.current=obj obj.show() def main(): m=MainApp() m.app.mainloop() if __name__=='__main__': main()
import re text = """UINT32 CacheSize() const { return _cacheSize; } UINT32 LineSize() const { return _lineSize; } UINT32 Associativity(UINT64 obj, INT8 obj2) const { return _associativity; } VOID SplitAddress(const ADDRINT addr, CACHE_TAG & tag, UINT32 & setIndex) const VOID SplitAddress(const ADDRINT addr, CACHE_TAG & tag, UINT32 & setIndex, UINT32 & lineIndex) const { const UINT32 lineMask = _lineSize - 1 INT8; """ for line in text.split("\n"): print re.sub(r'(U?INT\d+?)',r'PIN_\1', line)
tmp_vis = [] frame_tracker = [] while True: for i in xrange(8): rets, frame = cap[i].read() try: tmp_vis.append(cv2.resize(frame, (self.w, self.h))) except: continue print "\nbreak" frame_tracker.append(tmp_vis) print hashlib.sha1(frame_tracker[0][0].view(np.uint8)).hexdigest() if len(frame_tracker) > 1: print hashlib.sha1(frame_tracker[1][0].view(np.uint8)).hexdigest() if len(frame_tracker) > 2: print hashlib.sha1(frame_tracker[2][0].view(np.uint8)).hexdigest()
# Server code import xmlrpclib from SimpleXMLRPCServer import SimpleXMLRPCServer def is_even(n): return n%2 == 0 server = SimpleXMLRPCServer(("localhost", 8000)) print "Listening on port 8000..." server.register_function(is_even, "is_even") server.serve_forever() # Client code import xmlrpclib proxy = xmlrpclib.ServerProxy("http://localhost:8000/") print "3 is even: %s" % str(proxy.is_even(3)) print "100 is even: %s" % str(proxy.is_even(100))
postgres=# select * from employees ; empid | supervisorid -------+-------------- 1 | 2 | 3 | 1 4 | 2 5 | 3 6 | 4 (6 rows) WITH RECURSIVE emp(empid,supervisorid) AS ( SELECT empid, supervisorid FROM employees where empid=1 UNION ALL SELECT e.empid, e.supervisorid FROM emp s, employees e WHERE e.supervisorid = s.empid ) SELECT * FROM emp ; empid | supervisorid -------+-------------- 1 | 3 | 1 5 | 3 (3 rows)
with open('ipaddr.txt', "r") as f: lines=f.readlines() table = [line.split("\t") for line in lines] print table[22][39:] print table[18][39:] print table[26][39:] f.close()
def recursivemethod(obj_to_act_on, persistent_obj=None): if persistent_obj == None: persistent_obj = set() # Act on your object return recursivemethod(newobj, persistent_obj)
from scipy.interpolate import griddata Angles = [-180, -90, 0 , 90, 180, -135, -45,45, 135, 180,-90, 0, 90, 180 ] Radii = [0,0.33,0.33,0.33,0.33,0.5,0.5, 0.5,0.5,0.5,0.6,0.6,0.6,0.6] Angles = np.array(Angles)/180.*np.pi x = np.array(Radii)*np.sin(Angles) y = np.array(Radii)*np.cos(Angles) Values = [30.42,24.75, 32.23, 34.26, 26.31, 20.58, 23.38, 34.15,27.21, 22.609, 16.013, 22.75, 27.062, 18.27] Xi = np.linspace(-1,1,100) Yi = np.linspace(-1,1,100) #make the axes f = plt.figure() left, bottom, width, height= [0,0, 1, 0.7] ax = plt.axes([left, bottom, width, height]) pax = plt.axes([left, bottom, width, height], projection='polar', axisbg='none') cax = plt.axes([0.8, 0, 0.05, 1]) ax.set_aspect(1) ax.axis('Off') # grid the data. Vi = griddata((x, y), Values, (Xi[None,:], Yi[:,None]), method='cubic') cf = ax.contour(Xi,Yi,Vi, 15, cmap=plt.cm.jet) #make a custom colorbar, because the default is ugly gradient = np.linspace(1, 0, 256) gradient = np.vstack((gradient, gradient)) cax.xaxis.set_major_locator(plt.NullLocator()) cax.yaxis.tick_right() cax.imshow(gradient.T, aspect='auto', cmap=plt.cm.jet) cax.set_yticks(np.linspace(0,256,len(cf1.get_array()))) cax.set_yticklabels(map(str, cf.get_array())[::-1])
import sys from PyQt4.QtCore import * from PyQt4.QtGui import * from PyQt4.QtWebKit import * app = QApplication(sys.argv) web = QWebView() web.load(QUrl("http://www.google.com")) #web.show() printer = QPrinter() printer.setPageSize(QPrinter.A4) printer.setOutputFormat(QPrinter.PdfFormat) printer.setOutputFileName("file.pdf") def convertIt(): web.print_(printer) print "Pdf generated" QApplication.exit() QObject.connect(web, SIGNAL("loadFinished(bool)"), convertIt) sys.exit(app.exec_())
>>> lsta = ['a','b','c'] >>> lstb = ['1','2','3','4'] >>> lstc = ['x','y'] >>> from itertools import product >>> ["".join(t) for t in product(lsta, lstb, lstc)] ['a1x', 'a1y', 'a2x', 'a2y', 'a3x', 'a3y', 'a4x', 'a4y', 'b1x', 'b1y', 'b2x', 'b2y', 'b3x', 'b3y', 'b4x', 'b4y', 'c1x', 'c1y', 'c2x', 'c2y', 'c3x', 'c3y', 'c4x', 'c4y']
path = os.path.join(os.path.dirname(__file__), '..', 'templates', 'myPage.html')
from django.db.models import Q @login_required def friends_search(request): search_result = None if request.method == 'POST': if request.POST.get('fld_name'): try: fld_name = request.POST.get('fld_name') q = Q(nickname__icontains=fld_name) | Q(family__icontains=fld_name) search_result = UserProfile.objects.filter(q) if not search_result: search_result = 'По вашему запросу ничего не найдено.' except Exception as exc: search_result = 'В данный момент доступ к базе данных невозможен. Попробуйте повторить ваш запрос позже.' t = loader.get_template('friends_search.html') c = RequestContext(request, { 'search_result': search_result, }, [custom_proc]) return HttpResponse(t.render(c))
import random correct = 0 incorrect = 0 usedwords = [] print 'Welcome to text twist, you have 14 guesses to get 7 words made up of 4, 5 or 6 letters. Good Luck!' for i in range(14): print "Your letters are 'E' 'P' 'L' 'B' 'E' 'B', what is your guess?" answer = raw_input() if answer in usedwords: print "Sorry, you've already used this word" else: #Newly added usedwords.append(answer) #We have to add the input words to the list if they are new if answer == 'belle' or answer == 'bleep' or answer == 'pebble' or answer == 'beep' or answer == 'bell' or answer == 'peel' or answer == 'peep': if answer in usedwords: print 'Nice that was one of the words!' usedwords.append(answer) correct = correct + 1 if answer != 'belle' and answer != 'bleep' and answer != 'pebble' and answer != 'beep' and answer != 'bell' and answer != 'peel' and answer != 'peep': print 'Sorry, that was not one of the words.' incorrect = incorrect + 1 print 'Your final score was', correct, 'correct and', incorrect, 'wrong.'
listb_iter = iter(ListB) item_b = next(listb_iter) #we're assuming that ListB as at least one item. for item_a in ListA: if ...: #condition to move on to the next item in ListB try: item_b = next(listb_iter) except StopIteration: #went through all of ListB #other logic
df = (pd.DataFrame({'name': ['A.J. Price'] * 3, 'opponent': ['76ers', 'blazers', 'bobcats'], 'nearest_neighbors': [['Zach LaVine', 'Jeremy Lin', 'Nate Robinson', 'Isaia']] * 3}) .set_index(['name', 'opponent'])) >>> df nearest_neighbors name opponent A.J. Price 76ers [Zach LaVine, Jeremy Lin, Nate Robinson, Isaia] blazers [Zach LaVine, Jeremy Lin, Nate Robinson, Isaia] bobcats [Zach LaVine, Jeremy Lin, Nate Robinson, Isaia] df.reset_index(inplace=True) rows = [] _ = df.apply(lambda row: [rows.append([row['name'], row['opponent'], nn]) for nn in row.nearest_neighbors], axis=1) df_new = pd.DataFrame(rows, columns=df.columns).set_index(['name', 'opponent']) >>> df_new nearest_neighbors name opponent A.J. Price 76ers Zach LaVine 76ers Jeremy Lin 76ers Nate Robinson 76ers Isaia blazers Zach LaVine blazers Jeremy Lin blazers Nate Robinson blazers Isaia bobcats Zach LaVine bobcats Jeremy Lin bobcats Nate Robinson bobcats Isaia
class CounterExample(object): instances_created = 0 def __init__(self): CounterExample.instances_created += 1 def __del__(self): """ If you want to track the current number of instances you can add a hook in __del__. Otherwise use __init__ and just count up. """ CounterExample.instances_created -= 1
last_three = [] for j in range(1, its + 2): ... k2 = cost(candidate1, candidate2) if k2 in last_three: continue elif k2 < k1: ... last_three[(j%3)-1] = k2
from kivy.app import App from kivy.uix.boxlayout import BoxLayout from kivy.properties import StringProperty, NumericProperty, ListProperty from kivy.graphics.context import Clock from kivy.uix.widget import Widget class Controls(BoxLayout): def __init__(self, **kwargs): self.temp_solar=NumericProperty() self.temp_pool=NumericProperty() self.delta_value=NumericProperty() self.max_value=NumericProperty() self.hysteresis=NumericProperty() #super(Controls, self).__init__(**kwargs) #Clock.schedule_interval(self.set_value, 1) def PID_an_aus(self, instance, value): if value is True: pass else: pass def set_value(self, *args): print("Temperature",self.temp_solar, self.temp_pool ) print("Delta",self.delta_value) print("Max", self.max_value) print(self.hysteresis) class Tempar(): def __init__(self): self.temperature=[111,222] self.temp_sensor = [] self.temp_solar=NumericProperty(0.0) self.temp_pool=NumericProperty(0.0) #self.temp_sensor.start() #Clock.schedule_interval(self.read_temperature, 0) def read_temperature(self, temperature): self.temp_solar=self.temperature[0] self.temp_pool=self.temperature[1] self.tmp=[self.temp_solar,self.temp_pool] return self.tmp class PoolApp(App): #create object for each class and exchange values t=Tempar() c=Controls() c.temp_solar=t.read_temperature(t.temperature)[0] c.temp_pool=t.read_temperature(t.temperature)[1] print(c.temp_solar) print(c.temp_pool) #and here are your printouts c.set_value() if __name__ == '__main__': PoolApp().run()
import multiprocessing multiprocessing.cpu_count()
def toXPathStringLiteral(s): if "'" not in s: return "'%s'" % s if '"' not in s: return '"%s"' % s return "concat('%s')" % s.replace("'", "',\"'\",'") "//span[@class='error'][contains(.,%s)]" % toXPathStringLiteral(message)
>>> import numpy as np >>> from scipy import ndimage >>> a = np.array([[0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,1,0,0,0,0], [0,0,0,0,0,0,0,0]], dtype=int) >>> ndimage.binary_dilation(a, structure=ndimage.generate_binary_structure(2, 2)).astype(a.dtype) array([[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0]])
import time endTime = time.time() + 12*60*60 # 12 hours from now while time.time() < endTime: captureImage() time.sleep(30)
F=open("Simple.png","rb") ftp.storbinary('STOR image.png',F,1024)
from sqlalchemy.orm.session import object_session # ... def set_other_object_value(self, value): if self.other_object is None: value = OtherObject(...) self.other_object.value = value object_session(self).add(value)
>>> a1 = [1, 2, 3, 4, 5] >>> a2 = [10, 20, 30, 40, 50] >>> b1 = [5, 7, 3, 1] >>> b2 = [50, 20, 30, 20] >>> a12 = set(zip(a1, a2)) >>> [i for i, e in enumerate(zip(b1, b2)) if e in a12] [0, 2]
@app.route('/users/', methods=['POST']) def get_users(): ids = request.form.getlist('user_ids', type=int) users = [] for id in ids: try: user = whatever_user_method(id) users.append(user) except: continue returns users
import datetime projects = [{'code': 'demo', 'created_at': datetime.datetime(2008, 6, 11, 7, 35, 19), 'created_by': None, 'id': 4, 'image': 'https://website.com/files/0000/0000/blah.jpg', 'name': 'Demo Project', 'description': 'This is for demonstration purposes', 'due': '2009-05-30', 'start': '2009-05-06', 'status': 'Active', 'stype': 'Demo', 'tag_list': [], 'type': 'Project', 'updated_at': datetime.datetime(2009, 5, 27, 1, 41, 55), 'updated_by': {'id': 24, 'name': 'Test', 'type': 'HumanUser'}, 'users': [{'id': 19, 'name': 'User 1', 'type': 'HumanUser'}, {'id': 18, 'name': 'User 2', 'type': 'HumanUser'}, {'id': 17, 'name': 'User 3', 'type': 'HumanUser'}, {'id': 16, 'name': 'User 4', 'type': 'HumanUser'}, {'id': 15, 'name': 'User 5', 'type': 'HumanUser'}, {'id': 14, 'name': 'User 6', 'type': 'HumanUser'}, {'id': 13, 'name': 'User 7', 'type': 'HumanUser'}, {'id': 12, 'name': 'User 8', 'type': 'HumanUser'}, {'id': 20, 'name': 'Client 1', 'type': 'HumanUser'}]}, ] from lxml import etree def E(tag, parent=None, content=None, children=None, **kw): e = etree.Element(tag) if not content is None: e.text = str(content) for k,v in kw.items(): e.set(k, str(v)) if not parent is None: parent.append(e) if not children is None: for c in children: e.append(c) return e def processProject(data): attrs = ('name','type','id') p = E('Project') for item in attrs: p.set(item,str(data[item])) for k,v in [ x for x in data.items() if x[0] not in attrs ]: if v is None: E(k,parent=p) elif isinstance(v,basestring): E(k,content=v,parent=p) elif isinstance(v,(float,long,int)): E(k,content=str(v),parent=p) elif isinstance(v,datetime.datetime): E(k,content=v.strftime('%Y-%m-%d %H%M'),parent=p) elif k == 'users': users = E(k,parent=p) for u in v: E('user',parent=users,**dict([ (x,str(y)) for (x,y) in u.items()])) elif k in ('updated_by','created_by'): E(k,parent=p,**dict([ (x,str(y)) for (x,y) in v.items()])) elif k == 'tag_list': taglist = E(k,parent=p) for t in v: E('tag',parent=taglist,content=t) return p >>> projxml = processProject(projects[0]) >>> etree.dump(projxml) <Project name="Demo Project" type="Project" id="4"> <status>Active</status> <code>demo</code> <created_at>2008-06-11 0735</created_at> <due>2009-05-30</due> <created_by/> <updated_at>2009-05-27 0141</updated_at> <start>2009-05-06</start> <image>https://website.com/files/0000/0000/blah.jpg</image> <updated_by type="HumanUser" id="24" name="Test"/> <users> <user type="HumanUser" id="19" name="User 1"/> <user type="HumanUser" id="18" name="User 2"/> <user type="HumanUser" id="17" name="User 3"/> <user type="HumanUser" id="16" name="User 4"/> <user type="HumanUser" id="15" name="User 5"/> <user type="HumanUser" id="14" name="User 6"/> <user type="HumanUser" id="13" name="User 7"/> <user type="HumanUser" id="12" name="User 8"/> <user type="HumanUser" id="20" name="Client 1"/> </users> <tag_list/> <stype>Demo</stype> <description>This is for demonstration purposes</description> </Project>
# __package__ is not guaranteed to be defined or could be set to None # to represent that it's proper value is unknown package = globals.get('__package__') if package is None: package = globals['__name__'] if '__path__' not in globals: package = package.rpartition('.')[0] module = _gcd_import(name, package, level)
import csv with open('speechurls.csv', 'r') as f: for row in csv.reader(f): if 'remarks-president' in row[0]: with open('remarks-president_urls.csv','a') as f1: f1.write("{}\n".format(row[0])) elif 'remarks-first-lady' in row[0]: with open('remarks-first-lady_urls.csv', 'a') as f2: f2.write("{}\n".format(row[0])) else: pass
<div id="right_pod"> {% for i in c %} <div class="user_pod"> {{ i.0.from_user }} </div> {% endfor %}
query.filter(...).having(...)
private_key = private_key.replace('-----BEGIN RSA PRIVATE KEY-----', '') private_key = private_key.replace('-----END RSA PRIVATE KEY-----', '')
RewriteEngine On RewriteRule ^/test/$ /test.py
def f(): a = 1 b = 2 list_ = ['a', 'b'] locals_ = locals() dict_ = dict((x, locals_[x]) for x in list_)
data = f.read() c = struct.unpack_from('<8H', data, 16)
import watcher w = watcher.Watcher(dir, callback) w.flags = watcher.FILE_NOTIFY_CHANGE_FILE_NAME w.start()
# setup x and y ranges and precision xx = np.arange(-0.5,5.5,0.01) max_tolerance = 100. min_tolerance = -100. yy = 1/(xx-2) yy[yy > max_tolerance] = np.inf yy[yy < min_tolerance] = -np.inf ax.plot(xx, yy, zorder=100, linewidth=3, color='red')
myList = [1,9,16,24] num = int(input("Enter a number: ")) condition = True for index, x in enumerate(myList): if condition and num < x: myList.insert(index, num) condition = False if condition: myList.append(num) print(myList)
def callback(): abc = askopenfilename() execfile("abc.py")
A: 1.00 | 1.42 | 2.17 | 2.13 B: 1.00 | 1.40 | 2.20 | 2.10 A-B: 0.00 | 0.02 | -0.03 | 0.03 0^2 + 0.02^2 + -0.03^2 + 0.03^2 = 0.0022
from django.db import transaction with transaction.atomic(): for i, row in df.iterrows(): mv = MeasureValue.objects.get(org=row.org, month=month) if (row.percentile is None) or np.isnan(row.percentile): # if it's already None, why set it to None? row.percentile = None mv.percentile = row.percentile mv.save()
import signal import sys def signal_handler(signal, frame): print 'You pressed Ctrl+C - or killed me with -2' #.... Put your logic here ..... sys.exit(0) signal.signal(signal.SIGINT, signal_handler)
class notePanel(nukescripts.PythonPanel): def __init__(self): nukescripts.PythonPanel.__init__(self, 'Note Panel', 'com.ohufx.notePanel') self.sgpage = nuke.PyScript_Knob('sgpage', 'Open SG page', '') def knobChanged(self, knob): if knob is self.sgpage: self.launchSGPage() def launchSGPage(self): pr = self.proj.value() sh = self.shot.value() url = shotgun.getURL(pr,sh) webbrowser.get('/usr/bin/google-chrome %s').open(url)
import tkinter as tk import tkinter.font as tkFont import tkinter.ttk as ttk from tkinter import * def parse_csv(content, delimiter = ';'): ##We use here ";" to parse CSV because of the European way of dealing with excel-csv csv_data = [] for line in content.split('\n'): csv_data.append( [x.strip() for x in line.split( delimiter )] ) # strips spaces also return csv_data canvas=parse_csv(open('canvas.csv','rU',encoding="ISO-8859-1").read()) #fediaf_requirements is a list containing where fediaf has a fediaf_requirements=[] for i in range(0,len(canvas)): if canvas[i][1]=="FEDIAF": fediaf_requirements.append(canvas[i][0]) car_header = ['Used Nutrients in the Profession', 'Nutrients used in this PetFood (Source : Official Website)', 'FEDIAF Requirement'] #Create the Data to be put into the table def FromCSV_to_Tree(liste_croq): global car_list car_list=[] value=str(liste_croq.get(liste_croq.curselection())) for i in range(0,len(Remplissage)): if Remplissage[i][0]=="Name": for j in range(1,len(Remplissage[i])): if Remplissage[i][j]==value: for k in range(0,len(Remplissage)-1): if Remplissage[k][0] in fediaf_requirements : a="Required" else : a="" if Remplissage[k][j]!="ND": car_list.append([Remplissage[k][0],"OK",a]) else: car_list.append([Remplissage[k][0],"",a]) def CurSelet_croq(evt,container): global car_list FromCSV_to_Tree(liste_croq) car_header = ['Used Nutrients in the Profession', 'Nutrients used in this PetFood (Source : Official Website)', 'FEDIAF Requirement'] print(car_list) #create a treeview with dual scrollbars #Container and container.pack detached to update the tree with the new datas. container.pack(fill='both', expand=True) tree = ttk.Treeview(columns=car_header, show="headings") vsb = ttk.Scrollbar(orient="vertical", command=tree.yview) hsb = ttk.Scrollbar(orient="horizontal", command=tree.xview) tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set) tree.grid(column=0, row=0, sticky='nsew', in_=container) vsb.grid(column=1, row=0, sticky='ns', in_=container) hsb.grid(column=0, row=1, sticky='ew', in_=container) container.grid_columnconfigure(0, weight=1) container.grid_rowconfigure(0, weight=1) def sortby(tree, col, descending): """sort tree contents when a column header is clicked on""" # grab values to sort data = [(tree.set(child, col), child) \ for child in tree.get_children('')] # if the data to be sorted is numeric change to float #data = change_numeric(data) # now sort the data in place data.sort(reverse=descending) for ix, item in enumerate(data): tree.move(item[1], '', ix) # switch the heading so it will sort in the opposite direction tree.heading(col, command=lambda col=col: sortby(tree, col, \ int(not descending))) ##Put data into the tree for col in car_header: tree.heading(col, text=col.title(), command=lambda c=col: sortby(tree, c, 0)) # adjust the column's width to the header string tree.column(col, width=tkFont.Font().measure(col.title())) for item in car_list: tree.insert('', 'end', values=item) # adjust column's width if necessary to fit each value for ix, val in enumerate(item): col_w = tkFont.Font().measure(val) if tree.column(car_header[ix],width=None)<col_w: tree.column(car_header[ix], width=col_w) Remplissage=parse_csv(open('Remplissage.csv','rU',encoding="ISO-8859-1").read()) root = tk.Tk() root.wm_title("Visualizer") container = ttk.Frame() liste_croq = Listbox(root,width=70, height=10) for i in range(0,len(Remplissage)): if Remplissage[i][0]=="Name": for j in range(1,len(Remplissage[i])): liste_croq.insert(i,Remplissage[i][j]) liste_croq.bind('<<ListboxSelect>>', lambda evt, container=container : CurSelet_croq(evt,container)) liste_croq.pack() root.mainloop()
books = searchQuerySet().filter(content=haystack.inputs.AutoQuery(query))
from itertools import zip_longest files = [open(filename) for filename in file_list] for lines in zip_longest(*files, fillvalue=''): print(" ".join(lines))
h1 = Image.open("image1").histogram() h2 = Image.open("image2").histogram() rms = math.sqrt(reduce(operator.add, map(lambda a,b: (a-b)**2, h1, h2))/len(h1))
class Config(object): setting1 = "default_value" setting2 = "default_value" @staticmethod def load_config(json_file): """ load settings from config file """ with open(json_file) as f: config = json.load(f) for k, v in config.iteritems(): setattr(Config, k, v)
from .Line import Line
container Has a __contains__ method generator A function which returns an iterator. iterable An object with an __iter__() or __getitem__() method. Examples of iterables include all sequence types (such as list, str, and tuple) and some non-sequence types like dict and file. When an iterable object is passed as an argument to the builtin function iter(), it returns an iterator for the object. This iterator is good for one pass over the set of values. iterator An iterable which has a next() method. Iterators are required to have an __iter__() method that returns the iterator object itself. An iterator is good for one pass over the set of values. sequence An iterable which supports efficient element access using integer indices via the __getitem__() special method and defines a len() method that returns the length of the sequence. Note that dict also supports __getitem__() and __len__(), but is considered a mapping rather than a sequence because the lookups use arbitrary immutable keys rather than integers. sequences are orderable iterables. deque is a sequence, but collections.Sequence does not recognize deque as a sequence. >>> isinstance(collections.deque(), collections.Sequence) False
result = ' ' * 8 width = house.get_width() - 4 # subtract 4 to allow for 'CAT ' for i in range(house.get_cat_count()): # or xrange result += 'CAT %-*c' % (width, ord('A') + i)
def main(): run_wsgi_app(app2)
#include<iostream> #include<string> #include<sstream> using namespace std; string compress(string data) { int letter_counter = 1, i=0; ostringstream new_data; for (i; i<data.length()-1; i++) { if (data[i] == data[i+1]) { letter_counter += 1; } else { new_data<<letter_counter; new_data<<data[i]; letter_counter = 1; } } new_data<<letter_counter; new_data<<data[i]; return new_data.str(); } int main() { string data = string("wwwwwbbbcdee"); string data2 = string("wwwwwwwwwwwwww"); cout << compress(data) <<endl; cout << compress(data2) <<endl; }
import signal, sys # install a SIGALRM handler def handler(signum, frame): print "got signal, exiting" sys.exit(1) signal.signal(signal.SIGALRM, handler) # emit SIGALRM after 5 secs signal.setitimer(signal.ITIMER_REAL, 5) # do stuff i = 1 while True: if i % 100000 == 0: print i i += 1
#no of tweets you want to request max_tweets = 500 #make initial request for most recent tweets (200 is the maximum allowed count) new_tweets = api.GetUserTimeline(screen_name = screen_name,count=max_tweets) #save most recent tweets alltweets.extend(new_tweets) #save the id of the oldest tweet less one oldest = alltweets[-1].id - 1 #loop for remaining tweets while(len(alltweets)<max_tweets): alltweets.extend(api.GetUserTimeline(screen_name = screen_name,count=(max_tweets-len(alltweets)),max_id=oldest)) oldest = alltweets[-1].id - 1
def CreateLink(): excel.Worksheets(1).Cells(1,1).Value = '=HYPERLINK(A21,"Cell A21")'
import datetime from dateutil.rrule import * now = datetime.datetime.today().date() days = rrule(MONTHLY, dtstart=now, bymonthday=25) print (days[0]) # datetime.datetime(2016, 2, 25, 0, 0) print (days[1]) # datetime.datetime(2016, 3, 25, 0, 0)
import numpy as np a = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) # get length of flat array a_length, = a.shape # reshape array #(column by row must respect number of elements) b = a.reshape(( 2, a_length/2 )) # assign array except last column to a variable result = b[:,:-1] print result
import urllib2 from bs4 import BeautifulSoup import csv url = ('http://nflcombineresults.com/nflcombinedata.php?year=2000&pos=&college=') page = urllib2.urlopen(url).read() soup = BeautifulSoup(page) table = soup.find('table') f = csv.writer(open("2000scrape.csv", "w")) f.writerow(["Name", "Position", "Height", "Weight", "40-yd", "Bench", "Vertical", "Broad", "Shuttle", "3-Cone"]) # variable to check length of rows x = (len(table.findAll('tr')) - 1) # set to run through x for row in table.findAll('tr')[1:x]: col = row.findAll('td') name = col[1].getText() position = col[3].getText() height = col[4].getText() weight = col[5].getText() forty = col[7].getText() bench = col[8].getText() vertical = col[9].getText() broad = col[10].getText() shuttle = col[11].getText() threecone = col[12].getText() player = (name, position, height, weight, forty, bench, vertical, broad, shuttle, threecone, ) f.writerow(player)
import os f = open('/tmp/test.txt', 'w') os.unlink(f.name) # You can still use f here, it's just only visible for people having a handle. # close it when you're finished.
class Messages(ListResource): name = "Messages" key = "messages" instance = Message def create(self, from_=None, **kwargs): """ Create and send a Message. :param str to: The destination phone number. :param str `from_`: The phone number sending this message (must be a verified Twilio number) :param str body: The message you want to send, limited to 1600 characters. :param list media_url: A list of URLs of images to include in the message. :param status_callback: A URL that Twilio will POST to when your message is processed. :param str application_sid: The 34 character sid of the application Twilio should use to handle this phone call. """ kwargs["from"] = from_ return self.create_instance(kwargs)
while True: if select.select([sys.stdin], [], [], 10)[0]: ...
Back in Section 8.7 we mentioned ELink can be used to search for citations of a given paper. Unfortunately this only covers journals indexed for PubMed Central (doing it for all the journals in PubMed would mean a lot more work for the NIH). Let’s try this for the Biopython PDB parser paper, PubMed ID 14630660: >>> from Bio import Entrez >>> Entrez.email = "A.N.Other@example.com" >>> pmid = "14630660" >>> results = Entrez.read(Entrez.elink(dbfrom="pubmed", db="pmc", ... LinkName="pubmed_pmc_refs", from_uid=pmid)) >>> pmc_ids = [link["Id"] for link in results[0]["LinkSetDb"][0]["Link"]] >>> pmc_ids ['2744707', '2705363', '2682512', ..., '1190160'] Great - eleven articles. But why hasn’t the Biopython application note been found (PubMed ID 19304878)? Well, as you might have guessed from the variable names, there are not actually PubMed IDs, but PubMed Central IDs. Our application note is the third citing paper in that list, PMCID 2682512. So, what if (like me) you’d rather get back a list of PubMed IDs? Well we can call ELink again to translate them. This becomes a two step process, so by now you should expect to use the history feature to accomplish it (Section 8.15). But first, taking the more straightforward approach of making a second (separate) call to ELink: >>> results2 = Entrez.read(Entrez.elink(dbfrom="pmc", db="pubmed", LinkName="pmc_pubmed", ... from_uid=",".join(pmc_ids))) >>> pubmed_ids = [link["Id"] for link in results2[0]["LinkSetDb"][0]["Link"]] >>> pubmed_ids ['19698094', '19450287', '19304878', ..., '15985178'] This time you can immediately spot the Biopython application note as the third hit (PubMed ID 19304878). Now, let’s do that all again but with the history …TODO. And finally, don’t forget to include your own email address in the Entrez calls.
import matplotlib.pyplot as plt import matplotlib.text as mpl_text class AnyObject(object): def __init__(self, text, color): self.my_text = text self.my_color = color class AnyObjectHandler(object): def legend_artist(self, legend, orig_handle, fontsize, handlebox): print orig_handle x0, y0 = handlebox.xdescent, handlebox.ydescent width, height = handlebox.width, handlebox.height patch = mpl_text.Text(x=0, y=0, text=orig_handle.my_text, color=orig_handle.my_color, verticalalignment=u'baseline', horizontalalignment=u'left', multialignment=None, fontproperties=None, rotation=45, linespacing=None, rotation_mode=None) handlebox.add_artist(patch) return patch obj_0 = AnyObject("A", "purple") obj_1 = AnyObject("B", "green") plt.legend([obj_0, obj_1], ['Model Name A', 'Model Name B'], handler_map={obj_0:AnyObjectHandler(), obj_1:AnyObjectHandler()}) plt.show()
import numpy as np a = np.random.rand(10,1) b = np.random.rand(10,1) c = b > 0.5 d = a * b # Note that * in NumPy is always elementwise (use .dot for matrix multiplication) e = a + b f = a.mean() # Can also use np.mean(a) g = b.sum() # Can also use np.sum(b)
{% get_max_votes poll.choice_set.all as leader %} {% for choice in poll.choice_set.all %} {% ifequal choice leader %} {% endif %} {% endfor %}
class Program { static void Main() { var secret = "secret"; var data = "data"; var hmac = new HMACSHA1(Encoding.UTF8.GetBytes(secret)); var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(data)); Console.WriteLine(BitConverter.ToString(hash)); } }
>>> class C: def function(self): text = inspect.stack()[1][4][0].strip().split('.') return '{0} calls {1}'.format(*text) >>> myVar = C() >>> myVar.function() 'myVar calls function()'
re.search("([0-9]{2}\-[0-9]{2}\-[0-9]{4})", fileName)
values_sum = 0 for key in sorted(dict1,reverse=True): values_sum +=dict1[key] del dict1[key] if values_sum >= 6: break
import pandas as pd import numpy as np # This will add the 'a' columns. >> pd.DataFrame({'a': range(4), 'b': range(2, 6)}).\ combine(pd.DataFrame({'a': range(1, 5)}), func=lambda a, b: a + b) a b 0 1 NaN 1 3 NaN 2 5 NaN 3 7 NaN
n = 600851475143 i = 2 while i * i < n: while n % i == 0: n = n / i i = i + 1 print n
question = Paragraph('What color is the sky?', style) answer1 = Paragraph('Red', style) answer2 = Paragraph('Green', style) answer3 = Paragraph('Blue', style) Story.append(KeepTogether([question, answer1, answer2, answer3]))
class ZipExhausted(Exception): pass def izip_longest(*args, **kwds): # izip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D- fillvalue = kwds.get('fillvalue') counter = [len(args) - 1] def sentinel(): if not counter[0]: raise ZipExhausted counter[0] -= 1 yield fillvalue fillers = repeat(fillvalue) iterators = [chain(it, sentinel(), fillers) for it in args] try: while iterators: yield tuple(map(next, iterators)) except ZipExhausted: pass
from itertools import islice def window(seq, n=2): """ Returns a sliding window (of width n) over data from the iterable s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ... """ it = iter(seq) result = list(islice(it, n)) if len(result) == n: yield result for elem in it: result = result[1:] + [elem] yield result def contains_sequence(all_values, seq): return any(seq == current_seq for current_seq in window(all_values, len(seq))) test_iterable = [1,2,3] search_sequence = [1,2] result = contains_sequence(test_iterable, search_sequence)
#!/usr/bin/env python # example eventbox.py import pygtk pygtk.require('2.0') import gtk class EventBoxExample: def __init__(self): window = gtk.Window(gtk.WINDOW_TOPLEVEL) window.set_title("Event Box") window.connect("destroy", lambda w: gtk.main_quit()) window.set_border_width(10) # Create an EventBox and add it to our toplevel window frame = gtk.EventBox() # gtk.Frame() window.add(frame) frame.show() frame.set_border_width(2) frame.modify_bg(gtk.STATE_NORMAL, frame.get_colormap().alloc_color("blue")) event_box = gtk.EventBox() frame.add(event_box) event_box.set_border_width(10) event_box.show() # Create a long label label = gtk.Label("Click here to quit, quit, quit, quit, quit") event_box.add(label) label.show() # Clip it short. label.set_size_request(110, 20) # And bind an action to it event_box.set_events(gtk.gdk.BUTTON_PRESS_MASK) event_box.connect("button_press_event", lambda w,e: gtk.main_quit()) # More things you need an X window for ... event_box.realize() event_box.window.set_cursor(gtk.gdk.Cursor(gtk.gdk.HAND1)) # Set background color to green event_box.modify_bg(gtk.STATE_NORMAL, event_box.get_colormap().alloc_color("green")) window.show() def main(): gtk.main() return 0 if __name__ == "__main__": EventBoxExample() main()
>>> from numpy import * >>> >>> data = loadtxt("myfile.txt") # myfile.txt contains 4 columns of numbers >>> t,z = data[:,0], data[:,3] # data is 2D numpy array >>> >>> t,x,y,z = loadtxt("myfile.txt", unpack=True) # to unpack all columns >>> t,z = loadtxt("myfile.txt", usecols = (0,3), unpack=True) # to select just a few columns >>> data = loadtxt("myfile.txt", skiprows = 7) # to skip 7 rows from top of file >>> data = loadtxt("myfile.txt", comments = '!') # use '!' as comment char instead of '#' >>> data = loadtxt("myfile.txt", delimiter=';') # use ';' as column separator instead of whitespace >>> data = loadtxt("myfile.txt", dtype = int) # file contains integers instead of floats
mapper(User, users_table, include_properties=['user_id', 'user_name']) mapper(Address, addresses_table, exclude_properties=['street', 'city', 'state', 'zip'])
>>> import pandas as pd >>> df = pd.DataFrame({'foo': [1, 2, 3], 'bar': [1.0, 2.0, 3.0], 'baz': ['qux', 'quux', 'quuux']}) >>> df.dtypes bar float64 baz object foo int64 dtype: object
regex_result += "\\2"
for elem in data: for val in elem.itervalues(): for item in val['data']:
>>> x = {0: 5, 1: 7, 2: 0} >>> max(k for k, v in x.iteritems() if v != 0) 1
from gi.repository import Gtk, Gdk, GdkPixbuf class MyWindow(Gtk.Window): def __init__(self): Gtk.Window.__init__(self) self.set_default_size(200, 200) self.liststore = Gtk.ListStore(str, str) self.treeview = Gtk.TreeView(model=self.liststore) self.liststore.append(["icon.png", "This is a symbol1"]) px_renderer = Gtk.CellRendererPixbuf() px_column = Gtk.TreeViewColumn('') px_column.pack_start(px_renderer, False) str_renderer = Gtk.CellRendererText() px_column.pack_start(str_renderer, False) # set data connector function/method px_column.set_cell_data_func(px_renderer, self.get_tree_cell_pixbuf) px_column.set_cell_data_func(str_renderer, self.get_tree_cell_text) self.treeview.append_column(px_column) self.add(self.treeview) def get_tree_cell_text(self, col, cell, model, iter, user_data): cell.set_property('text', model.get_value(iter, 1)) def get_tree_cell_pixbuf(self, col, cell, model, iter, user_data): cell.set_property('pixbuf', GdkPixbuf.Pixbuf.new_from_file(model.get_value(iter, 0))) if __name__ == '__main__': win = MyWindow() win.connect("delete-event", Gtk.main_quit) win.show_all() Gtk.main()
>>> date = QtCore.QDate.fromString('20130916', 'yyyyMd') # PySide >>> date.toString('MMMM d, yyyy') u'September 16, 2013' # PyQt4 >>> date.toString('MMMM d, yyyy') PyQt4.QtCore.QString(u'September 16, 2013') >>> unicode(date.toString('MMMM d, yyyy')) u'September 16, 2013'
try: import MySQLdb.converters except ImportError: _connarg('conv') def connect(host='abc.dev.local', user='abc', passwd='def', db='myabc', port=3306): try: orig_conv = MySQLdb.converters.conversions conv_iter = iter(orig_conv) convert = dict(zip(conv_iter, [str,] * len(orig_conv.keys()))) print "Connecting host=%s user=%s db=%s port=%d" % (host, user, db, port) conn = MySQLdb.connect(host, user, passwd, db, port, conv=convert) except MySQLdb.Error, e: print "Error connecting %d: %s" % (e.args[0], e.args[1]) return conn
In [1]: import networkx as nx In [2]: G = nx.path_graph(4) In [3]: I = nx.incidence_matrix(G,oriented=True) In [4]: I.todense() Out[4]: matrix([[-1., 0., 0.], [ 1., -1., 0.], [ 0., 1., -1.], [ 0., 0., 1.]]) In [5]: L = nx.laplacian_matrix(G) In [6]: L.todense() Out[6]: matrix([[ 1, -1, 0, 0], [-1, 2, -1, 0], [ 0, -1, 2, -1], [ 0, 0, -1, 1]]) In [7]: (I*I.T).todense() Out[7]: matrix([[ 1., -1., 0., 0.], [-1., 2., -1., 0.], [ 0., -1., 2., -1.], [ 0., 0., -1., 1.]])
soup = BeautifulSoup(htmlcontent, 'html5')
from itertools import groupby words = ['ct', 'cat', 'cbbt', 'caaabbct', 'cbbccaat', 'cbcbbaat', 'caaccbabbt'] for w in words: match = False if w.startswith('c') and w.endswith('t'): temp = w[1:-1] s = set(temp) match = s <= set('abc') and len(s) == len(list(groupby(temp))) print w, "matches" if match else "doesn't match"
>>> s = re.search(r".*\/(app.*)", "/home/python/app/index.html") >>> s.groups()[0] 'app/index.html'
with open('test.csv') as in_file, open('new.csv', 'w') as out_file: for line in csv.reader(in_file, delimiter='$'): out_file.write(','.join(sorted(line)[2:])+'\n')
for location in locations: try: try_to_connect(location) break except IOError: continue else: # this else is optional # executes some code if none of the locations is valid # for example raise an Error as suggested @eumiro
while True: files = os.path.listdir('./sub_directory/') if files != []: do_something()
x = {'cusip': np.array(['10553M10', '67085120', '67085140'], dtype='|S8'), 'vstop': np.array([dt.datetime(2012, 2, 28, 0, 0), dt.datetime(2014, 12, 22, 0, 0), dt.datetime(2020, 12, 31, 0, 0)], dtype=object), 'vstart': np.array([dt.datetime(2001, 11, 16, 0, 0),dt.datetime(2012, 2, 28, 0, 0), dt.datetime(2014, 12, 22, 0, 0)], dtype=object), 'id': np.array(['EQ0000000000041095', 'EQ0000000000041095', 'EQ0000000000041095'], dtype='|S18')} In [27]: df = pd.DataFrame(x) df Out[27]: cusip id vstart vstop 10553M10 EQ0000000000041095 2001-11-16 2012-02-28 67085120 EQ0000000000041095 2012-02-28 2014-12-22 67085140 EQ0000000000041095 2014-12-22 2020-12-31 In [25]: type(df.vstart[0]) Out[25]: pandas.tslib.Timestamp In [26]: type(df.vstop[0]) Out[26]: pandas.tslib.Timestamp
dist = sqrt((x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2)
In [10]: df = pd.DataFrame({'A' : [0, 1], 'B' : [1, 6]}) In [11]: import StringIO In [12]: s = StringIO.StringIO() In [13]: df.to_csv(s) In [14]: s.getvalue() Out[14]: ',A,B\n0,0,1\n1,1,6\n'
shortlen = 150 shortset = set() for i in xrange(len(seq)-shortlen+1): shortset.add(seq[i:i+shortlen]) for line in short: count1 += 1 if line in shortset: count2 += 1
class ProjectGroupMembershipInlineForm(forms.ModelForm): def __init__(self, *args, **kwargs): super(ProjectGroupMembershipInlineForm, self).__init__(*args, **kwargs) self.fields['group'].queryset = Group.objects.filter(some_filtering_here=self.instance)
row = ["0","0","0","0","0","0","0","0","0","01","01","01","01","01","01"] random.shuffle(row) print (map(int, list("".join(row)[1:])))
>>> map(lambda x: x.foo(), [B(1), C(1)]) >>> [2, 0]
# Python2 >>> x = bytearray((32,33)) >>> x bytearray(b' !') >>> bytes(x) ' !' # Python3 >>> x = bytearray((32,33)) >>> x bytearray(b' !') >>> bytes(x) b' !'
with open(fileName, 'rb') as inf, open("out_"+fileName, 'wb') as outf: reader = csv.reader(inf) # find header row for row in reader: if '' not in row: fieldnames = row break else: # oops, *only* rows with empty cells found raise ValueError('Unable to determine header row') # rewind, switch to DictReader, skip past header inf.seek(0) reader = csv.DictReader(inf, fieldnames) for row in reader: if row.keys() == row.values() break # copy all rows across with extra two columns writer = csv.DictWriter(outf, ['url_source','downloaded_at'] + fieldnames) writer.writeheader() writer.writerows(dict(r, url_source=csvUrl, downloaded_at=today) for r in reader)
spawn helloworld.simple_app spawn helloworld.simple_app middleware.Upperware
connect(checkbox, SIGNAL(stateChanged(int)), button, SLOT(buttonStateChanged(int)));
>>> import threading >>> import time >>> def func(): ... global l ... i = 0 ... while i < 15: ... l.append(i) ... i += 1 ... time.sleep(1) >>> def foo(t): ... t.start() ... i = 20 ... while i > 0: ... print(l) ... i -= 1 ... time.sleep(0.5) >>> l = [] >>> t = threading.Thread(target=func) >>> foo(t) [0] [0] [0] [0, 1] [0, 1] [0, 1, 2] [0, 1, 2, 3] [0, 1, 2, 3] [0, 1, 2, 3, 4] [0, 1, 2, 3, 4] [0, 1, 2, 3, 4, 5] [0, 1, 2, 3, 4, 5] [0, 1, 2, 3, 4, 5, 6] [0, 1, 2, 3, 4, 5, 6] [0, 1, 2, 3, 4, 5, 6, 7] [0, 1, 2, 3, 4, 5, 6, 7] [0, 1, 2, 3, 4, 5, 6, 7, 8] [0, 1, 2, 3, 4, 5, 6, 7, 8] [0, 1, 2, 3, 4, 5, 6, 7, 8] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
d[(d['x']>2) & (d['y']>7)]
test = ['Item 1', [['Item 1.1', []], ['Item 1.2', []]]] def convert(oldlist, newlist): for i in range(len(oldlist)): if type(oldlist[i]) == list and type(oldlist[i][0]) != list: newlist.append(oldlist[i][0]) elif type(oldlist[i]) != list: newlist.append(oldlist[i]) else: newlist.append([]) convert(oldlist[i], newlist[-1]) return newlist print(convert(test, []))
from bs4 import BeautifulSoup test_html = """<div> <div> <p>Paragraph 1 Lorem ipsum dolor... long text... </p> <p>Paragraph 2 Lorem ipsum dolor... long text... </p> <p>Paragraph 3 Lorem ipsum dolor... long text... </p> </div> </div>""" test_html = test_html[0:50] soup = BeautifulSoup(test_html, 'html.parser') print(soup.prettify())
COINS = (("Dollars", 1.), ("Quarters", .25), ("Dimes", .10), ("Nickels", .05), ("Pennies", .01)) def changeCalc(cost, pmt): change = pmt - cost print("Total Change: %.2f" % change) if (pmt - cost) < 0: print("The customer needs to pay %.2f more." % abs(change)) else: runningTotal = 0 for (name, value) in COINS: number = int((change - runningTotal) / value) if number > 0: print("Number of %s: %d" % (name, number)) runningTotal += number * value print runningTotal, change, (runningTotal - change)
while True: eventlet.sleep(dispatcher.getTimerResolution()) try: dispatcher.handleTimerTick(time.time()) except Exception: print 'Error while handling dispatcher tick!' raise
def patterns(prefix, *args): warnings.warn( 'django.conf.urls.patterns() is deprecated and will be removed in ' 'Django 1.10. Update your urlpatterns to be a list of ' 'django.conf.urls.url() instances instead.', RemovedInDjango110Warning, stacklevel=2 )
import inspect import new def f(): x, y = 1, 2 def get(): print 'get' def post(): print 'post' for c in f.func_code.co_consts: if inspect.iscode(c): f = new.function(c, globals()) print f # Here you have your function :].
from IPython.display import display, HTML # Assuming that dataframes df1 and df2 are already defined: print "Dataframe 1:" display(df1) print "Dataframe 2:" HTML(df2.to_html())
from Tkinter import * from random import random root = Tk() frame = Frame(root, height=200, width=200) for i in range(10): Button(frame, text=str(i)).place(x=random() * 150, y=random() * 180) frame.pack() root.mainloop()
arr2 = arr1.reshape((100,20))
from django.db import connection print connection.queries u'SELECT DISTINCT "market_basket"."id", "market_basket"."weight" FROM "market_basket" INNER JOIN "market_fruit" ON ("market_basket"."id" = "market_fruit"."inbasket_id") INNER JOIN "market_fruitname" ON ("market_fruit"."ofkind_id" = "market_fruitname"."id") WHERE ("market_fruitname"."name" IN (\'apple\') AND "market_fruitname"."name" IN (\'banana\')) LIMIT 21'
token = Session.query(AuthToken).options(eagerload('user')).filter(...).one() user = token.user
regex = re.compile(r'(?:3\d){6}') for root,dirname, files in os.walk(directory): for file in files: if file.endswith(".log") or file.endswith(".txt"): f=open(os.path.join(root,file)) for i, line in enumerate(f.readlines()): searchedstr = regex.findall(line) for word in searchedstr: print "String found: " + word print "Line: "+str(i) print "File: " + os.path.join(root,file) break f.close()
# Monkey-patch functools.wraps import functools def no_op_wraps(func): """Replaces functools.wraps in order to undo wrapping. Can be used to preserve the decorated function's signature in the documentation generated by Sphinx. """ def wrapper(decorator): return func return wrapper functools.wraps = no_op_wraps
import sys, random, pygame from pygame.locals import * pygame.init() w = 640 h = 480 screen = pygame.display.set_mode((w,h)) morphingShape = pygame.Surface((20,20)) morphingShape.fill((255, 137, 0)) #random colour for testing morphingRect = morphingShape.get_rect() # clock object that will be used to make the animation # have the same speed on all machines regardless # of the actual machine speed. clock = pygame.time.Clock() def ShapeSizeChange(shape, screen): x = random.randint(-21, 20) w = shape.get_width() h = shape.get_height() if w + x > 0 and h + x > 0: shape = pygame.transform.smoothscale(shape, (w + x, h + x)) else: shape = pygame.transform.smoothscale(shape, (w - x, h - x)) shape.fill((255, 137, 0)) rect = shape.get_rect() screen.blit(shape, rect) return shape while True: # limit the demo to 50 frames per second clock.tick( 50 ); # clear screen with black color # THIS IS WHAT WAS REALLY MISSING... screen.fill( (0,0,0) ) for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() sys.exit() morphingShape = ShapeSizeChange(morphingShape, screen) pygame.display.update()
from lxml import html t = html.fromstring(text) tds = t.xpath("table/tbody/tr[2]/td") for td in tds: if tds.text.startswith("0."): td.getparent().remove(td) text = html.tostring(t)
from distutils.version import StrictVersion # Or LooseVersion, if you prefer if StrictVersion('10.2.3') > StrictVersion('10.2'): print "10.2.3 is newer"
import sys from Queue import Queue from PyQt4.QtCore import * from PyQt4.QtGui import * # The new Stream Object which replaces the default stream associated with sys.stdout # This object just puts data in a queue! class WriteStream(object): def __init__(self,queue): self.queue = queue def write(self, text): self.queue.put(text) # A QObject (to be run in a QThread) which sits waiting for data to come through a Queue.Queue(). # It blocks until data is available, and one it has got something from the queue, it sends # it to the "MainThread" by emitting a Qt Signal class MyReceiver(QObject): mysignal = pyqtSignal(str) def __init__(self,queue,*args,**kwargs): QObject.__init__(self,*args,**kwargs) self.queue = queue @pyqtSlot() def run(self): while True: text = self.queue.get() self.mysignal.emit(text) # An example QObject (to be run in a QThread) which outputs information with print class LongRunningThing(QObject): @pyqtSlot() def run(self): for i in range(1000): print i # An Example application QWidget containing the textedit to redirect stdout to class MyApp(QWidget): def __init__(self,*args,**kwargs): QWidget.__init__(self,*args,**kwargs) self.layout = QVBoxLayout(self) self.textedit = QTextEdit() self.button = QPushButton('start long running thread') self.button.clicked.connect(self.start_thread) self.layout.addWidget(self.textedit) self.layout.addWidget(self.button) @pyqtSlot(str) def append_text(self,text): self.textedit.moveCursor(QTextCursor.End) self.textedit.insertPlainText( text ) @pyqtSlot() def start_thread(self): self.thread = QThread() self.long_running_thing = LongRunningThing() self.long_running_thing.moveToThread(self.thread) self.thread.started.connect(self.long_running_thing.run) self.thread.start() # Create Queue and redirect sys.stdout to this queue queue = Queue() sys.stdout = WriteStream(queue) # Create QApplication and QWidget qapp = QApplication(sys.argv) app = MyApp() app.show() # Create thread that will listen on the other end of the queue, and send the text to the textedit in our application thread = QThread() my_receiver = MyReceiver(queue) my_receiver.mysignal.connect(app.append_text) my_receiver.moveToThread(thread) thread.started.connect(my_receiver.run) thread.start() qapp.exec_()
class MySpider(CrawlSpider): ... start_urls_crawlspider = (url1, url2,) start_urls_basespider = (url3,) def start_requests(self): for url in self.start_urls_crawlspider : yield Request(url, callback=self.parse) # "parse" is the default anyway for url in self.start_urls_basespider: yield Request(url, callback=self.parse_base) def parse_base(self, response): ...
import wx class MyFrame(wx.Frame): def __init__(self): wx.Frame.__init__(self, None, -1, 'test frame',size=(790, 524)) self.Bind(wx.EVT_LEFT_DOWN, self.OnClick) self.Bind(wx.EVT_PAINT, self.OnPaint) self.clip = wx.Clipboard() self.x = wx.BitmapDataObject() self.bmp = None def OnClick(self, evt): self.clip.Open() self.clip.GetData(self.x) self.clip.Close() self.bmp = self.x.GetBitmap() self.Refresh() def OnPaint(self, evt): if self.bmp: dc = wx.PaintDC(self) dc.DrawBitmap(self.bmp, 20, 20, True) if __name__ == '__main__': app = wx.App() frame = MyFrame() frame.Show() app.MainLoop()
import logging, os, time PING_HOST='10.10.10.10' # some host on the other side of the VPN while True: retcode = os.system('ping -c 1 %s' % PING_HOST) if retcode: # perform action for lost connection logging.warn('Lost visibility with %s' % PING_HOST) time.sleep(10) # sleep 10 seconds
def PrintEntryDetails(entry): print 'Video title: %s' % entry.media.title.text print 'Video published on: %s ' % entry.published.text print 'Video description: %s' % entry.media.description.text print 'Video category: %s' % entry.media.category[0].text print 'Video tags: %s' % entry.media.keywords.text print 'Video watch page: %s' % entry.media.player.url print 'Video flash player URL: %s' % entry.GetSwfUrl() print 'Video duration: %s' % entry.media.duration.seconds
def tree_max(node): maxleft = float('-inf') if not node.left else tree_max(node.left) maxright = float('-inf') if not node.right else tree_max(node.right) return max(node.value, maxleft, maxright)
In [26]: df1.groupby(['A','B']).size().reset_index().rename(columns={0:'count'}) Out[26]: A B count 0 no no 1 1 no yes 2 2 yes no 4 3 yes yes 3
import urllib from BeautifulSoup import BeautifulSoup as BS soup = BS(urllib.urlopen("http://item.taobao.com/item.htm?id=13015989524")) a = [] for textarea in soup.findAll("textarea"): textsoup = BS(textarea.text) # parse the contents as html a.extend(textsoup.findAll("a", attrs={"href":"http://item.taobao.com/item.htm?id=13015989524"})) for tag in a: print tag # outputs # <a href="http://item.taobao.com/item.htm?id=13015989524" target="_blank"><img ... # <a href="http://item.taobao.com/item.htm?id=13015989524" title="901 ...
\d+(?=\D*$)
>>> ord(u"ć") 263 >>> u"café"[2] u'f' >>> u"café"[3] u'\xe9' >>> for c in u"café": ... print repr(c), ord(c) ... u'c' 99 u'a' 97 u'f' 102 u'\xe9' 233
@app.route('/', methods=['GET', 'POST']) def index(): form = NameForm() # Auto-populates from request data. name = None age = None if form.validate_on_submit(): name = form.name.data age = form.age.data # Lets now create a form, but ignore the request data, so it's empty: form = NameForm(formdata=None) return render_template('index.html', form = form, name = name, age = age)
>>> from xml.etree.ElementTree import ElementTree >>> tree = ElementTree() >>> tree.parse("your_xml_file.xml")
def Timer(*args, **kwargs): """Factory function to create a Timer object. Timers call a function after a specified number of seconds: t = Timer(30.0, f, args=[], kwargs={}) t.start() t.cancel() # stop the timer's action if it's still waiting """ return _Timer(*args, **kwargs) class _Timer(Thread): """Call a function after a specified number of seconds: t = Timer(30.0, f, args=[], kwargs={}) t.start() t.cancel() # stop the timer's action if it's still waiting """ def __init__(self, interval, function, args=[], kwargs={}): Thread.__init__(self) self.interval = interval self.function = function self.args = args self.kwargs = kwargs self.finished = Event()
r.readline() 'This is the first line of the file.\n' r.readline() 'Second line of the file\n' r.readline() ''
def execute(func=None, *args, **kwargs): if func: func(*args, **kwargs)
(6, lambda number: ( ungettext('%(value).1f million', '%(value).1f million', number), ungettext('%(value)s million', '%(value)s million', number), )),
<iframe width="560" height="315" src="http://www.youtube.com/embed/DU0Q0U08gAc" frameborder="0" allowfullscreen></iframe>
<html> <body> <form action="/submit.php"> <input type="text" name="Name"></input> <input type=submit"></input> </body> </html>
engine = create_engine(database_url) def on_connect(conn, record): conn.execute('pragma foreign_keys=ON') from sqlalchemy import event event.listen(engine, 'connect', on_connect)
self.widgets[-1].show()
* OK [CAPABILITY IMAP4rev1 UIDPLUS CHILDREN NAMESPACE THREAD=ORDEREDSUBJECT THREAD=REFERENCES SORT QUOTA IDLE AUTH=PLAIN ACL ACL2=UNION ID] Courier-IMAP ready. Copyright 1998-2011 Double Precision, Inc. See COPYING for distribution information.
import Tkinter as tk import tkFileDialog class SampleApp(tk.Tk): def __init__(self, *args, **kwargs): tk.Tk.__init__(self, *args, **kwargs) self.button = tk.Button(text="Pick a file!", command=self.pick_file) self.button.pack() self.entry_frame = tk.Frame(self) self.entry_frame.pack(side="top", fill="both", expand=True) self.entry_frame.grid_columnconfigure(0, weight=1) def pick_file(self): file = tkFileDialog.askopenfile(title="pick a file!") if file is not None: entry = tk.Entry(self) entry.insert(0, file.name) entry.grid(in_=self.entry_frame, sticky="ew") self.button.configure(text="Pick another file!") app = SampleApp() app.mainloop()
maximum = max(mydict, key=mydict.get) # Just use 'min' instead of 'max' for minimum. print(maximum, mydict[maximum]) # D 87
import os filename, extn = os.path.splitext(kid.image_url) thumb_filename = filename + ".thumb" + extn
from django.core import serializers data = serializers.serialize("xml", SomeModel.objects.all())
@auth_blueprint.route('/login', methods=['GET', 'POST']) def login(): form = LoginForm() if form.validate_on_submit(): user = User.query.filter_by(username=form.username.data).first() if user is not None and user.verify_password(form.password.data): login_user(user, True) next = request.args.get('next') #if not next_is_valid('next'): # return abort(400) return redirect(next or url_for('simple.index')) flash('Invalid username or password') return render_template('/auth/login.html', form=form)
>>> import urlparse >>> url = '/url?q=http://www.amazon.com/Quantitative-Trading-Build-Algorithmic-Business/dp/0470284889&sa=U&ei=P2ycT6OoNuasiAL2ncV5&ved=0CBIQFjAA&usg=AFQjCNEo_ujANAKnjheWDRlBKnJ1BGe' >>> data = urlparse.parse_qs( ... urlparse.urlparse(url).query ... ) >>> data {'ei': ['P2ycT6OoNuasiAL2ncV5'], 'q': ['http://www.amazon.com/Quantitative-Trading-Build-Algorithmic-Business/dp/0470284889'], 'sa': ['U'], 'usg': ['AFQjCNEo_ujANAKnjheWDRlBKnJ1BGe'], 'ved': ['0CBIQFjAA']} >>> data['q'][0] 'http://www.amazon.com/Quantitative-Trading-Build-Algorithmic-Business/dp/0470284889'
from tkinter import * import ctypes, os def callback(): active.set(False) #root.destroy() # Uncoment this to close the window def sleep(): if not active.get(): return root.after(1000, sleep) timeLeft.set(timeLeft.get()-1) timeOutLabel['text'] = "Time Left: " + str(timeLeft.get()) #Update the label if timeLeft.get() == 0: #sleep if timeLeft = 0 os.system("Powercfg -H OFF") os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0") callback() root = Tk() root.geometry("400x268") root.title("Alert") root.configure(background='light blue') timeLeft = IntVar() timeLeft.set(10) # Time in seconds until shutdown active = BooleanVar() active.set(True) # Something to show us that countdown is still going. label = Label(root, text="ALERT this device will go to sleep soon!", fg="red") label.config(font=("Courier", 12)) label.configure(background='light blue') label.pack() timeOutLabel = Label(root, text = 'Time left: ' + str(timeLeft.get()), background='light blue') # Label to show how much time we have left. timeOutLabel.pack() quitButton = Button(root, text="do not sleep!", command=callback) quitButton.pack() quitButton.place(x=150, y=150) root.after(0, sleep) root.mainloop()
# You update your copy here, so the original will be used unchanged, which is not the # case if you don't have the copy valuesCopy.update({state: convergedValue}) # If you have the copy, you'll be using the old value stored in self.value here, # not the updated one qValue += probability * (reward + (self.discount * self.values[successor]))
In [1]: orig = [1,2,3,4,5] In [2]: sampled_vec = [3,1,3] In [3]: indices = [orig.index(i) for i in sampled_vec] In [4]: indices Out[4]: [2, 0, 2]
def values_incremented(some_data): return [{'value': current_sum, 'date': element['date']} for element, current_sum in zip(some_data, reduce(lambda x, y: [y['value']] if not x else x + [x[-1] + y['value']], some_data, []))]
def get_thread(msg): messages = [] # empty message set while msg.response_to: messages.append(msg) msg = msg.response_to messages.append(msg) # will append the original message return messages
import numpy as np from matplotlib import pyplot as plt from mpl_toolkits.axes_grid1 import ImageGrid figuresizex = 9.0 figuresizey = 6.1 # generate images image1 = np.identity(5) image2 = np.arange(16).reshape((4,4)) fig = plt.figure(figsize=(figuresizex,figuresizey)) # create your grid objects top_row = ImageGrid(fig, 311, nrows_ncols = (1,3), axes_pad = .25, cbar_location = "right", cbar_mode="single") middle_row = ImageGrid(fig, 312, nrows_ncols = (1,3), axes_pad = .25, cbar_location = "right", cbar_mode="single") bottom_row = ImageGrid(fig, 313, nrows_ncols = (1,3), axes_pad = .25, cbar_location = "right", cbar_mode="single") # plot the images for i in range(3): vmin, vmax = image1.min(),image1.max() ax = top_row[i] im1 = ax.imshow(image1, vmin=vmin, vmax=vmax) for i in range(3): vmin, vmax = image2.min(),image2.max() ax =middle_row[i] im2 = ax.imshow(image2, vmin=vmin, vmax=vmax) # Update showing how to use identical scale across all 3 images # make some slightly different images and get their bounds image2s = [image2,image2 + 5,image2 - 5] # inelegant way to get the absolute upper and lower bounds from the three images i_max, i_min = 0,0 for im in image2s: if im.max() > i_max: i_max= im.max() if im.min() < i_min: i_min = im.min() # plot these as you would the others, but use identical vmin and vmax for all three plots for i,im in enumerate(image2s): ax = bottom_row[i] im2_scaled = ax.imshow(im, vmin = i_min, vmax = i_max) # add your colorbars cbar1 = top_row.cbar_axes[0].colorbar(im1) middle_row.cbar_axes[0].colorbar(im2) bottom_row.cbar_axes[0].colorbar(im2_scaled) # example of titling colorbar1 cbar1.set_label_text("label")) # readjust figure margins after adding colorbars, # left and right are unequal because of how # colorbar labels don't appear to factor in to the adjustment plt.subplots_adjust(left=0.075, right=0.9) plt.show()
def calculateCorrelation(data_1, data_2, dist): """ Fill the correlation matrix between data_1 and data_2 :param data_1: dictionary {key : [coordinates]} :param data_2: dictionary {key : [coordinates]} :param dist: minimum distance between coordinates to be considered, in kilometers. :return: numpy array containing the correlation between each complaint category. """ pool = Pool(processes=20) results = [] data_1 = collections.OrderedDict(sorted(data_1.items())) data_2 = collections.OrderedDict(sorted(data_2.items())) data_1_size = len(data_1) data_2_size = len(data_2) corr = numpy.zeros((data_1_size, data_2_size)) for index_1, key_1 in enumerate(data_1): for index_2, key_2 in enumerate(data_2): # Forming pairs type_1 = data_1[key_1] # List of data in data_1 of type *i* type_2 = data_2[key_2] # List of data in data_2 of type *j* result = pool.apply_async(correlation, args=[type_1, type_2, dist]) results.append((result, index_1, index_2)) for result, index_1, index_2 in results: corr[index_1, index_2] = result.get() pool.close() pool.join()
from distutils.core import setup setup( name='TowelStuff', version='0.1dev', packages=['towelstuff',], license='Creative Commons Attribution-Noncommercial-Share Alike license', long_description=open('README.txt').read(), )
select s.name, t.value from Student s left join Thing t on t.student = s.rollno where t.when == 'whenever'
secret_word = "python" correct_word = "yo" count = 0 while count < len(secret_word): print(secret_word[count] if secret_word[count] in correct_word else '_', end=" ") count += 1
from urlparse import urljoin from bs4 import BeautifulSoup import requests BASE_URL = "http://genius.com" artist_url = "http://genius.com/artists/Andre-3000/" response = requests.get(artist_url, headers={'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36'}) soup = BeautifulSoup(response.text, "lxml") for song_link in soup.select('ul.song_list > li > a'): link = urljoin(BASE_URL, song_link['href']) response = requests.get(link) soup = BeautifulSoup(response.text) lyrics = soup.find('div', class_='lyrics').text.strip() # tokenize `lyrics` with nltk
import pdb; pdb.set_trace()
>>> import csv >>> with open("hwa.csv", "rb") as fp: ... reader = csv.DictReader(fp) ... data = next(reader) ... >>> data {'Age': '25', 'Weight': '78', 'Height': '6.0'} >>> data["Age"] '25' >>> float(data["Age"]) 25.0
import rpy2.robjects.numpy2ri as rpyn vector=rpyn.ri2numpy(vector_R)
from collections import defaultdict res = defaultdict(list) for dic in data: for key, value in dic.items(): old_value = res[key] if isinstance(value, list): old_value.extend(value) else: old_value.append(value) # alternatively: old_value += [value] if not isinstance(value, list) else value
import os import sys import time # acquire: open file for write, create if possible, exclusive access guaranteed fname = 'my_lock_file.pid' try: fd = os.open(fname, os.O_CREAT|os.O_WRONLY|os.O_EXCL) except OSError: # failed to open, another process is running with open(fname) as f: print "other process running:", f.readline() sys.exit() try: os.write(fd, '%d\n' % os.getpid()) os.fsync(fd) # do something time.sleep(5) finally: os.close(fd) # release: delete file os.remove(fname)
def abc(hello, hi): myli = [] for i in xrange(len(hello)): for j in xrange(len(hi)): myli.append([hello[i], hi[j], {"Mydata": str(j)}]) return myli hello = ["hello ", "cruel "] hi = ["hi", "world"] print abc(hello, hi)
@mock.patch('os.path.exists') def test_vm_exists(self, mock_exists): mock_exists.return_value = True fake_path = 'fake/path' response = self._VixConnection.vm_exists(fake_path) mock_exists.assert_called_with(fake_path) self.assertEqual(response, True)
def incrementKeys(infilepath, outfilepath, keys, incrementBy): with open(infilepath) as infile, open(outfilepath, 'w') as outfile: for line in infile: if any(line.startswith(key) for key in keys): k, tail = line.split(',') k, val = k.split(":") val = int(val)+incrementBy line = "%s:%d,%s\n" %(k, val, tail) outfile.write(line)
import requests import json myurl= 'https://api.twitter.com/1.1/mutes/users/create.json' to_post = {"label":"value"} to_post = json.dumps(to_post) #Convert to json if that is the correct content-type r = requests.post(myurl,data = to_post , auth = ('username', 'password'))
"def (\w+)\s*\((.*?)\):"
f.seek(-1, os.SEEK_CUR) f.write(";")
parser.add_argument('-t', '--type', choices=('type1', 'type2', 'type3'), help='type1/type2/type3')
from django.core.cache import cache CHOICES_CACHE_KEY = 'choice_cache_key' def get_cached_choices(): choices = cache.get(CHOICES_CACHE_KEY) if choices is None: choices = ... # Query the DB here cache.set(CHOICES_CACHE_KEY, choices, None) # None caches forever return choices def construct_forms(choices): forms = ... # build forms with choices return forms @receiver((post_save, post_delete), sender=TheModel, dispatch_uid='change') def clear_choices_cache(sender, **kwargs): cache.delete(CHOICES_CACHE_KEY) def some_view(request): # Do something with the forms forms = construct_forms(get_cached_choices())
>>> import itertools >>> l = [[['a','b','c'], '2'], [['d','e','f'], '3']] >>> [list(itertools.chain.from_iterable(i)) for i in l] [['a', 'b', 'c', '2'], ['d', 'e', 'f', '3']]
table_name = "TABLE 1" table = soup.find(text=lambda x: x and table_name in x).find_parent('table')
process = subprocess.Popen(['cshift', str(file), str(x_c), str(y_c), str(area)], stdout=subprocess.PIPE) output = process.stdout.read()
import redis r = redis.Redis(host='localhost', port=6379, db=0) p = r.pipeline() for key in keys: p.hgetall(key) for h in p.execute(): print h
q = (session.query(Parent) .filter(Parent.children.any(Child.value.ilike('%{}%'.format(value1)))) .filter(Parent.children.any(Child.value.ilike('%{}%'.format(value2)))) .filter(~Parent.children.any( db.or_(Child.value.ilike('%{}%'.format(value3)), Child.value.ilike('%{}%'.format(value4)), ) )) )
import numpy as np from scipy.special import binom as binom from mpl_toolkits.mplot3d import Axes3D from matplotlib import pyplot plt = pyplot from matplotlib import cm import matplotlib '''Define A_(pm) (Gauss-laguerre polinomials) ''' def Ln(p,m,xj): Ln=0. for i in range(p+1):#el p+1 es por la indexacion Ln=Ln+((-1)**i)*binom(p+m,p-i)*(xj**i)/np.math.factorial(i) return Ln def A(p, m, r, phi):#defino G-L A0=np.zeros((len(phi),len(r))) for j, rn in enumerate(r): A0[:,j]=np.exp(-rn**2)*Ln(p,0,2*rn**2) A1=np.zeros_like(A0) for j, rn in enumerate(r): for k, phin in enumerate(phi): A1[k,j]=2*((2*rn**2)**(m/2))*np.sqrt(np.math.factorial(p)/np.math.factorial(p+m))*np.exp(-rn**2)*Ln(p,m,2*(rn**2))*np.sin(m*phin) A2=np.zeros_like(A0) for j, rn in enumerate(r): for k, phin in enumerate(phi): A2[k,j]=2*(2*rn**2)**(m/2)*np.sqrt(np.math.factorial(p)/np.math.factorial(p+m))*np.exp(-rn**2)*Ln(p,m,2*rn**2)*np.cos(m*phin) return A0, A1, A2 pi=np.pi r=np.linspace(0,6,50) phi=np.linspace(0,2*pi,40) A0, A1, A2=A(5,1,r,phi)# fig = pyplot.figure(figsize=(11,9), dpi=100) ax = pyplot.subplot(111, projection='3d') R, P = np.meshgrid(r, phi) X, Y = R*np.cos(P), R*np.sin(P) ax.plot_surface(X, Y, A0) plt.show()
Px, Py, m = symbols("Px Py m")
decision = "no" while decision.lower() == "no": example = input("Blah blah blah: ") if 10 < example <= 20: decision = raw_input("Are you sure this is your answer?: ")
def f(x, y): return x + y v = numpy.array([1,2,3]) # vectorize the function vf = numpy.vectorize(f) # "transposing" the vector by producing a view with another shape vt = v.reshape((v.shape[0], 1) # calculate over all combinations using broadcast vf(v, vt) Output: array([[ 2., 3., 4.], [ 3., 4., 5.], [ 4., 5., 6.]])
x = pd.np.tile(xi, 3) y = pd.np.r_[df['A'], df['B'], df['C']] slope, intercept, r_value, p_value, std_err = stats.linregress(x, y) line4 = intercept + slope * xi plt.plot(line4,'k-')
In [15]: import numpy as np In [16]: x = np.array([(9,), (1,), (1, 12), (9,), (8,)]) In [17]: np.hstack(x) Out[17]: array([ 9, 1, 1, 12, 9, 8])
myregex=re.compile('{} is (not)? very good at python'.format(mystring)) myregex=re.compile('{s} is (not)? very good at python'.format(s=mystring)) myregex=re.compile('%s is (not)? very good at python'% (mystring)) myregex=re.compile('%(mystring)s is (not)? very good at python' % locals()) myregex=re.compile(mystring+' is (not)? very good at python') myregex=re.compile(' '.join([mystring,'is (not)? very good at python']))
import subprocess os.environ['OMP_NUM_THREADS'] = '{:d}'.format(thread) proc = subprocess.Popen(["numpy_test"], stdout=subprocess.PIPE, stderr=subprocess.PIPE) stdout, stderr = proc.communicate()
>>> df['q_date'].apply( lambda x: pd.datetools.parse(x).strftime('%Y%m%dT%H:%M%SZ')) 0 20120210T00:0000Z 1 20120210T00:0000Z 2 20120210T00:0000Z 3 20120210T00:0000Z 4 20120210T00:0000Z Name: q_date, dtype: object
def delete_used_id(): # open and save all ids id_file_r = open('C:/Users/my.name/Documents/IDs.txt', 'r') lines = id_file_r.readlines() first_line_unf = lines[0][3:] first_line = first_line_unf.strip() id_file_r.close() # reopen in write mode id_file_w = open('C:/Users/my.name/Documents/IDs.txt','w') for line in lines[1:]: id_file_w.write(line) id_file_w.close() print("Deleting used ID: " + first_line)
p = subprocess.Popen(call, stdout=subprocess.PIPE, shell=True, universal_newlines=True) for line in iter(p.stdout.readline, ''): print(line, end='')
self.spb.valueChanged[int].connect(self.onValueChanged) self.spb.valueChanged[str].connect(self.onValueChanged) ... def onValueChanged(self, x): print("QSpinBox: value changed! ", x, type(x))
csv = open('login.csv', 'r').read().split('\n')[6].split(';') username = input("Put your username here: ") if username == "admin" or username in csv: print "Username Found" else: print "Username Not Found"
file = open("user.txt", "r") for login in file: login = login.split('#') if user == login[2] and password == login[3]: print 'Correct username/password' break else: print 'Invalid username/password'
season = '' for line in data.splitlines(): if line.startswith('=== Season'): season = line elif season: do something
with open(EMCMD_INCORRECT_PARAMS, 'r') as fd_usage: usageLines = fd_usage.read().replace('\n', fd_usage.newline)
re.findall(r"\d+(?=\s)", "1323 323 434 ")
from cpython cimport pycapsule cdef const char* CAPNAME = "ExtClassName" cdef void del_capsule(object o): cdef ExtClass* cobject = <ExtClass*>pycapsule.PyCapsule_GetPointer(o, CAPNAME) del cobject def mk_cpp_object(): return pycapsule.PyCapsule_New(cp, CAPNAME, del_capsule)
>>> import regex >>> s = 'cuacducucibcl' >>> regex.sub(r'((?:a|(?<!^)\G)[^abc\n]*)c', r'\1x', s) 'cuaxduxuxibcl'
from flask import Flask, session, abort, request, render_template @app.route('/results', methods=['POST']) def results(): if request.form['channelname'] in ALLOWED_CHANNELS: session['channel'] = request.form['channelname'] if 'channel' in session: return render_template('results.html', channel=session['channel']) else: abort(400)
def Loans(x): x = int(input("What is your FICO score? ")) if x >= 760: print ("Rate = 3.080") elif x >= 700: print ("Rate = 3.302") elif x >= 680: print ("Rate = 3.479") elif x >= 660: print ("Rate = 3.693") elif x >= 640: print ("Rate = 4.123") elif x >= 620: print ("Rate = 4.66") else: print ('Approval = No') Loans(10)
>>> from System.Diagnostics import Process >>> p = Process() >>> p.StartInfo.UseShellExecute = False >>> p.StartInfo.RedirectStandardOutput = True >>> p.StartInfo.FileName = 'uname' >>> p.StartInfo.Arguments = '-m -r' >>> p.Start() True >>> p.WaitForExit() >>> p.StandardOutput.ReadToEnd() '9.6.0 i386\n' >>> p.ExitCode 0 >>>
begin program. import spss, spssaux import os schoollist = ['brow'] for x in schoollist: school = 'brow' school2 = school + '06.sav' #opens the file filename = os.path.join("Y:\...\Data", school2) #In this instance, Y:\...\Data\brow06.sav spssaux.OpenDataFile(filename) #creates the variable cur=spss.Cursor(accessType='w') cur.SetVarNameAndType(['name'],[8]) cur.CommitDictionary() for i in range(cur.GetCaseCount()): cur.fetchone() cur.SetValueChar('name', school) cur.CommitCase() cur.close() spss.Submit("""save outfile="%s".""" % filename) end program.
import csv import os import sys def open_csv(filename, mode='r'): """ Open a csv file in proper mode depending on Python verion. """ return (open(filename, mode=mode+'b') if sys.version_info[0] == 2 else open(filename, mode=mode, newline='')) def process_file(filename, start_date=None, new_dir=None): # Read the entire contents of the file into memory skipping rows before # any start_date given (assuming row[0] is a date column). with open_csv(filename, 'r') as f: reader = csv.reader(f) header = next(reader) # Save first row. contents = [row for row in reader if start_date and row[0] >= start_date or not start_date] # Create different output file path if new_dir was specified. basename = os.path.basename(filename) # Remove dir name from filename. output_filename = os.path.join(new_dir, basename) if new_dir else filename if new_dir and not os.path.isdir(new_dir): # Create directory if necessary. os.makedirs(new_dir) # Open the output file and create a CSV writer for it. with open_csv(output_filename, 'w') as f: writer = csv.writer(f) # Add name of new column to header. header = ['Pipe'] + header # Prepend new column name. writer.writerow(header) # Data for new column is the base filename without extension. new_column = [os.path.splitext( os.path.split(basename)[1] )[0]] # Process each row of the body by prepending data for new column to it. writer.writerows((new_column+row for row in contents))
# this is the new behavior (after code updates) n [340]: dfs = DataFrame(dict(A = 'foo', B = 'bar'),index=range(5)) In [341]: dfs Out[341]: A B 0 foo bar 1 foo bar 2 foo bar 3 foo bar 4 foo bar # A and B have a size of 30 In [342]: store.append('dfs', dfs, min_itemsize = 30) In [343]: store.get_storer('dfs').table Out[343]: /dfs/table (Table(5,)) '' description := { "index": Int64Col(shape=(), dflt=0, pos=0), "values_block_0": StringCol(itemsize=30, shape=(2,), dflt='', pos=1)} byteorder := 'little' chunkshape := (963,) autoIndex := True colindexes := { "index": Index(6, medium, shuffle, zlib(1)).is_CSI=False} # A is created as a data_column with a size of 30 # B is size is calculated In [344]: store.append('dfs2', dfs, min_itemsize = { 'A' : 30 }) In [345]: store.get_storer('dfs2').table Out[345]: /dfs2/table (Table(5,)) '' description := { "index": Int64Col(shape=(), dflt=0, pos=0), "values_block_0": StringCol(itemsize=3, shape=(1,), dflt='', pos=1), "A": StringCol(itemsize=30, shape=(), dflt='', pos=2)} byteorder := 'little' chunkshape := (1598,) autoIndex := True colindexes := { "A": Index(6, medium, shuffle, zlib(1)).is_CSI=False, "index": Index(6, medium, shuffle, zlib(1)).is_CSI=False}
# Stuff import subprocess __version__ = '1.2.3' __build__ = subprocess.check_output('git describe --tags --always HEAD' .split()).decode().strip() with open('mypkg/_version.py', 'w') as f: f.write('''\ # I will destroy any changes you make to this file. # Sincerely, # setup.py ;) __version__ = '{}' __build__ = '{}' '''.format(__version__, __build__)) # other stuff settings.update( version=__version__, # more stuff )
a = np.array([ 1., -1., np.nan, 0., np.nan], dtype=np.float32) sa = np.sort(a)[::-1] np.roll(sa,-np.count_nonzero(np.isnan(a))) array([ 1., 0., -1., nan, nan], dtype=float32)
import certifi import ssl import requests from requests.adapters import HTTPAdapter from requests.packages.urllib3.poolmanager import PoolManager class Ssl3HttpAdapter(HTTPAdapter): def init_poolmanager(self, connections, maxsize, block=False): # specify the version of SSL you want to use below self.poolmanager = PoolManager(num_pools=connections, maxsize=maxsize, block=block, ssl_version=ssl.PROTOCOL_SSLv3) s = requests.Session() # May or may not need this. I needed it since I didn't need to route through a proxy to get to local services. s.trust_env = False s.verify = certifi.where() s.auth = (user, password) # Basic-Auth username/password s.mount(base_url_of_your_service, Ssl3HttpAdapter()) req = s.get(your_service_url) print(req.text)
import numpy import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import axes3d def peaks(x,y): return x * numpy.sin(y) fig = plt.figure() ax = fig.gca(projection='3d') X = Y= numpy.arange(-3, 3, 0.1).tolist() X, Y = numpy.meshgrid(X, Y) Z = [] for i in range(len(X)): Z.append(peaks(X[i],Y[i])) ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3) cset = ax.contour(X, Y, Z, zdir='z', offset=-8) cset = ax.contour(X, Y, Z, zdir='x', offset=-8) cset = ax.contour(X, Y, Z, zdir='y', offset=8) ax.set_xlabel('X') ax.set_xlim(-8, 8) ax.set_ylabel('Y') ax.set_ylim(-8, 8) ax.set_zlabel('Z') ax.set_zlim(-8, 8) plt.show()
inserted_code = input("insert postcode") import re if re.match('^[1-9][0-9]{4}$', inserted_code): print("Estonian postcode") else: print("Not an estonian code")
cursor = conn.cursor (MySQLdb.cursors.DictCursor)
cookie = http.cookies.BaseCookie(cookie_string)
import gc def run(): return 1 s = run() print len(gc.get_referrers(s)) # prints a rather big number, 41 in my case obj = object() print len(gc.get_referrers(obj)) # prints 1 lst = [obj] print len(gc.get_referrers(obj)) # prints 2 lst = [] print len(gc.get_referrers(obj)) # prints 1 again
if pdForm.is_valid(): cleanform = pdForm.save(commit = False). cleanform.resource = rd cleanform.save()
# Import 3rd Party libraries from selenium import webdriver from selenium.webdriver.common.desired_capabilities import DesiredCapabilities class requester_firefox(object): def __init__(self): self.selenium_browser = webdriver.Firefox() self.selenium_browser.set_page_load_timeout(30) def __del__(self): self.selenium_browser.quit() self.selenium_browser = None def __call__(self, url): try: self.selenium_browser.get(url) the_page = self.selenium_browser.page_source except Exception: the_page = "" return the_page test = requester_firefox() print test("http://www.seek.com.au/jobs/in-australia/#dateRange=999&workType=0&industry=&occupation=&graduateSearch=false&salaryFrom=0&salaryTo=999999&salaryType=annual&advertiserID=&advertiserGroup=&keywords=police+check&page=1&isAreaUnspecified=false&location=&area=&nation=3000&sortMode=Advertiser&searchFrom=quick&searchType=").encode("ascii", "ignore")
first_i, first_j = sequence_indices[0] board[first_i][first_j]
>>> from ast import literal_eval >>> >>> literal_eval( "['Ethnicity', 'Sex', 'Cause of Death', 'Count', 'Percent']") ['Ethnicity', 'Sex', 'Cause of Death', 'Count', 'Percent']
# -*- coding: utf-8 -*- import re import xlrd book = xlrd.open_workbook("liste1.xlsx") # get the first worksheet first_sheet = book.sheet_by_index(0) # read a cell cell = first_sheet.cell(1,5) text= re.sub(r"[\r\n\t\x07\x0b]", "", cell.value) match = re.split(r' (?=\d{2}-\d{2}-\d{4})', text) print match[0] print match[1] print match[2]
seen = set() res = [] for line in textlines: if line not in seen: res.append(line) if not line.strip(): seen.add(line) textlines = res
import matplotlib.pyplot as plt def close_event(): plt.close() #timer calls this function after 3 seconds and closes the window fig = plt.figure() timer = fig.canvas.new_timer(interval = 3000) #creating a timer object and setting an interval of 3000 milliseconds timer.add_callback(close_event) plt.plot([1,2,3,4]) plt.ylabel('some numbers') timer.start() plt.show() print "Am doing something else"
import requests txtPdf(filename): url = "http://do.convertapi.com/text2Pdf" archivo = open("temp.pdf", "wb") response = requests.post(url, files={'filename': open(filename,'rb')} ) archivo.write(response.content) archivo.close() txtPdf('test.txt')
awk -v text='.nmv-fas' ' /<title>/ {title=$0; gsub(/<\/?title>/, "", title); replace=1} replace {gsub(text, title)} {print} ' file > file.tmp && mv file.tmp file
class Home(object): pass class Club(object): pass PLACES = { 'home': Home(), 'club': Club() } class Manager(object): def display_plot_and_get_option(self): return raw_input('Where do you want to go?') def get_next_place(self, place_name): return PLACES[place_name] m = Manager() while 1: place_name = m.display_plot_and_get_option() m.get_next_place(place_name)
def takes(*args): def _takes(fcn): fcn.params = args return fcn return _takes @takes("time", "temp", "time") def do_stuff(start_time, average_temp, stop_time): pass
features = Feature.gql("ORDER BY date_created") if (self.request.get("add_a_new_feature") == "true"): if (Feature.gql("WHERE feature_name=:1 ORDER BY last_modified DESC LIMIT 1", NEW_FEATURE_NAME).count() == 0): new_feature = Feature(feature_name=NEW_FEATURE_NAME) new_feature.put() features.append(new_feature) ... if (features.count() > 0): features_list = features.fetch() for feature in features_list: ... # the list now contain the new_feature at the end
subprocess.call(['/dir6/dir5/dir4/openssl', 'enc', '-d', '-aes-256-cbc', '-a', '-in', '/home/dir2/dir3/XXX.enc' ,'-pass' , 'pass:password'])
out = set() for inner in alist: out.update(inner) out = map(int, out) # in your example you have a list of ints >>> print out [1, 2, 3, 5, 15, 657]
>>> my_list = [[1,2,3,1, 3], [1,3,2]] >>> [(i,j) for i,x in enumerate(my_list) for j,y in enumerate(x) if y == 3] [(0, 2), (0, 4), (1, 1)]
>>> import numpy as np >>> a = np.array([0,0,0,3,2,-1,0,0,7,9,13,0,0,0,0,0,0,0]) >>> np.trim_zeros(a) array([ 3, 2, -1, 0, 0, 7, 9, 13])
#!/usr/bin/env python # encoding: utf-8 """ logClient2.py Created by Allister on 2010-11-30. """ import wx import sqlite3 WINDOW_SIZE = (900,400) class logClient(wx.Frame): def __init__(self, parent, id, title): wx.Frame.__init__(self, parent, id, title, size=WINDOW_SIZE) self.toolbar = self.CreateToolBar() self.startLiveUpdate(None) self.Show(True) def startLiveUpdate(self, event): self.createToolbarItem("Refresh", "refresh.jpg", self.stopLiveUpdate) def stopLiveUpdate(self, event): self.createToolbarItem("Stop", "refresh2.jpg", self.startLiveUpdate) def createToolbarItem(self, label, imageName, method): self.toolbar.RemoveTool(1) self.toolbar.AddLabelTool(1, label, wx.Bitmap(imageName)) self.toolbar.Realize() self.Bind(wx.EVT_TOOL, method, id=1) if __name__ == '__main__': app = wx.App(False) logClient(None, -1, "Log Event Viewer") app.MainLoop()
import wx ######################################################################## class GenericPanel(wx.Panel): """""" #---------------------------------------------------------------------- def __init__(self, parent, showChild=False): """Constructor""" wx.Panel.__init__(self, parent) if showChild: btn = wx.Button(self, label="Show Child") btn.Bind(wx.EVT_BUTTON, self.onShowChild) #---------------------------------------------------------------------- def onShowChild(self, event): """""" frame = ChildFrame(self.GetParent()) frame.Show() ######################################################################## class ChildFrame(wx.Frame): """""" #---------------------------------------------------------------------- def __init__(self, parent): """Constructor""" wx.Frame.__init__(self, parent, title="Child frame", style=wx.FRAME_FLOAT_ON_PARENT|wx.DEFAULT_FRAME_STYLE) panel = GenericPanel(self) self.Show() ######################################################################## class MainFrame(wx.Frame): """""" #---------------------------------------------------------------------- def __init__(self): """Constructor""" wx.Frame.__init__(self, None, title="Main Frame", size=(800,600)) panel = GenericPanel(self, showChild=True) self.Show() #---------------------------------------------------------------------- if __name__ == "__main__": app = wx.App(False) frame = MainFrame() app.MainLoop()
# algorithm def average_point(rect, p1, p2, count=0): returnArray = [] code_a = vcode(rect, p1) code_b = vcode(rect, p2) if math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y)) < EPS: returnArray.append(count) returnArray.append(p1) returnArray.append(p2) return returnArray if not (code_a | code_b): returnArray.append(count) returnArray.append(p1) returnArray.append(p2) return returnArray if code_a & code_b: returnArray.append(count) returnArray.append(p1) returnArray.append(p2) return returnArray mid = Point((p2.x+p1.x)/2.0, (p2.y+p1.y)/2.0) count += 1 returnArray = average_point(rect, p1, mid, count) mid.x = mid.x+1 mid.y = mid.y+1 returnArray = average_point(rect, mid, p2, count) return returnArray
class FilePage(models.Model): file = models.ForeignKey(File, on_delete=models.CASCADE, related_name='file_pages') file_page_number = models.IntegerField() patient = models.ManyToManyField(Patient, null=True, blank=True) document_type = models.ManyToManyField(DocumentType, null=True, blank=True)
for team in teams: for event in team.client.rtm_read(): # process the event for that team
with open('file.csv') as fh: header = [h.strip() for h in fh.next().split(',')] reader = csv.DictReader(fh, fieldnames=header)
import os for root, dirs, files in os.walk(r'path to open'): for file in files: if file.endswith('.log'): with open(os.path.join(root, file)) as stream: for lin in stream: # lin containg the content of each line in the file
print eval('self.post.id') # Prints the value of self.post.id
>>> import urllib >>> from bs4 import BeautifulSoup >>> >>> url = "http://aqicn.org/city/shenyang/usconsulate/json" >>> soup = BeautifulSoup(urllib.urlopen(url), "html.parser") >>> soup.find("div", class_="aqivalue").get_text() u'171'
def __RecursiveBinding(self, parent): try: parent.Bind(wx.EVT_CHAR, self.CharInputCallback) parent.SetWindowStyleFlag(wx.WANTS_CHARS) parent.Refresh() children = parent.GetChildren() if(children): for child in children: self.__RecursiveBinding(child)
class MyTCPHandler(SocketServer.BaseRequestHandler): def handle(self): self.DriveSend = self.request.recv(1024).strip() self.SteeringSend = self.request.recv(1024).strip() MotorControl(self) return (self.DriveSend,self.SteeringSend) def MotorControl(motor_var): print(motor_var.DriveSend) print(motor_var.SteeringSend) print('test')
rows = [] r = np.zeros((n,), dtype=np.int) rows.append(r) for i in range(n): r = np.zeros((n,), dtype=np.int) r[i] = 1 rows.append(r) rows = np.array(rows) arr = np.zeros((m,n), dtype=np.int) idx = [0]*m base = np.array([(n+1)**j for j in range(m)]) for i in xrange(0, (n+1)**m): idx = (i / base) % (n+1) print rows[idx]
>>>lis = ["foo", "foo", "bar"] >>>lis=list(set(lis)) >>>print(lis) ['foo','bar']
for every letter in the string: check that it is one of "0", "1", "2", ..., "9" if it is not, this is not a number, so return false if we are here, everything was satisfied, so return true
tree_top = os.path.abspath( os.path.expanduser( os.path.expandvars( sys.argv[1] ) ) )
>>> import csv >>> >>> with open('test.csv') as f: ... a = [{k: int(v) for k, v in row.items()} ... for row in csv.DictReader(f, skipinitialspace=True)] ... >>> a [{'col2': 2, 'col3': 3, 'col1': 1}, {'col2': 5, 'col3': 6, 'col1': 4}]
import os def same_fs(file1, file2): dev1 = os.stat(file1).st_dev dev2 = os.stat(file2).st_dev return dev1 == dev2
Contest.objects.get(pk=id).image_set.annotate(score=Sum('vote__value')).order_by( 'score' )
https://graph.facebook.com/me/friends will get a list of your friends then https://graph.facebook.com/{{ID}}/friends will get the friends of your friend with id {{ID}}
for l in x: print ', '.join(map(str, l))
from operator import itemgetter filenames = ['1.txt', '2.txt', '3.txt'] with open('output.txt', 'w') as outfile: total_lines = [] for fname in filenames: with open(fname) as infile: total_lines += map(lambda s: s.strip(' '), infile.readlines()) for line in sorted(total_lines): outfile.write(line)
import numpy as np N = 100 mean1, mean2, std1, std2 = 1, 5, 2, 3 x0 = np.random.normal(loc=[mean1, mean2], scale=[std1, std2], size=(N, 2)) mean3, mean4, std3, std4 = 2, -2, 1, 0.1 x1 = np.random.normal(loc=[mean3, mean4], scale=[std3, std4], size=(N, 2))
>> a.im_self <__main__.test object at 0x782d0> >> a.im_self.b = 2 >> obj.b 2
if re.search(r'(?<!\.)\.\.(?!\.)', s): print 'Contain two dots'
LOG.info('attr=%s, content=%s', dir(context), context.__dict__)
authorList = ['Shakes.','Scott'] already_seen = {} # dict to keep track of what has been seen with open('/Users/Adam/Desktop/Poetrylist.txt','w') as output_file: with open('/Users/Adam/Desktop/2e.txt','r') as open_file: the_whole_file = open_file.read() for x in authorList: start_position = 0 while True: start_position = the_whole_file.find('<A>'+x+'</A>', start_position) if start_position < 0: break end_position = the_whole_file.find('</W>', start_position) author_data = the_whole_file[start_position:end_position+4] if author_data not in already_seen: output_file.write(author_data + "\n") already_seen[author_data] = True start_position = end_position + 4
from matplotlib.font_manager import FontProperties fontP = FontProperties() fontP.set_size('small') legend([plot1], "title", prop = fontP)
a[3:5,4:7] += 1
import wx class Myframe(wx.Frame): def __init__(self): wx.Frame.__init__(self, None) pan = wx.Panel(self) self.cbx = wx.ComboBox(pan, -1, pos=(10,30), choices=["SEARCH", "SELECT", "PASS", "LOG", "DATABASE"], style=wx.CB_DROPDOWN ) self.cbx_2 = wx.ComboBox(pan, -1, pos=(10,60), choices=["LOOK", "GO", "FILL"], style=wx.CB_DROPDOWN ) self.cbx.Bind(wx.EVT_MOUSEWHEEL, self.do_nothing) self.cbx.Bind(wx.EVT_COMBOBOX, self.on_selection) self.cbx_2.Bind(wx.EVT_MOUSEWHEEL, self.do_nothing) self.cbx_2.Bind(wx.EVT_COMBOBOX, self.on_selection_2) def on_selection(self, evt): """I do not want this to be executed inadvertently when moving mousewheel""" print self.cbx.GetStringSelection() def on_selection_2(self, evt): """this is another combobox. dont mind if mouse move it or not""" print self.cbx.GetStringSelection() def do_nothing(self, evt): print 'on events pit' if __name__ == "__main__": App = wx.PySimpleApp() Myframe().Show() App.MainLoop()
def process_form_data(form_list): form_data = [form.cleaned_data for form in form_list] print form_data[0] print form_data[1] return form_data class ReviewWizard(SessionWizardView): template_name = "review_form.html" def done(self, form_list, **kwargs): form_data = process_form_data(form_list) return render("done.html", {"form_data": form_data}) def get_form_kwargs(self, step): kwargs = super(ReviewWizard, self).get_form_kwargs(step) kwargs['request'] = self.request return kwargs
try: while True: #Get the block hit events blockHits = mc.events.pollBlockHits() # if a block has been hit if blockHits: # for each block that has been hit for blockHit in blockHits: #Create and run the exploding block class in its own thread # pass the position of the block, fuse time in seconds and blast radius # threads are used so multiple exploding blocks can be created explodingBlock = ExplodingBlock(blockHit.pos, 3, 3) explodingBlock.daemon explodingBlock.start() time.sleep(0.1) except KeyboardInterrupt: print("stopped")
dstk['dropflag'] = np.where(dstk.col <= criteria, 1, 0)
#get auth cookie for sso def getAuthCookie( self ): buffer = BytesIO() c = pycurl.Curl() c.setopt(c.SSL_VERIFYPEER, False) c.setopt(c.FOLLOWLOCATION, True) c.setopt(c.TIMEOUT, 60) c.setopt(c.USERPWD, self.user+":"+cred.getpasswd( self.encPasswd ) ) # curling sso.sample.com, which I assume promts a login dialog box and curl will set that with the varible provide above c.setopt(c.URL, 'https://sso.sample.com') # save the cookie to cookieDir c.setopt(c.COOKIEJAR, self.cookieDir) c.setopt(c.COOKIEFILE, self.cookieDir ) c.setopt(c.WRITEFUNCTION, buffer.write) # perform all the previous curl commands c.perform() c.unsetopt(c.USERPWD) # curl new site sample.com c.setopt(c.URL, 'https://sample.com') c.perform() # save output as html var html = str(buffer.getvalue()) ---------------------------------------------------------- # The following three if statments # if "some string is found" in varible-html: then do the lines indented lines that follow if "RelayState" in html: # setup a regex to look for "input type="hidden" name="RelayState" value="[and captures everything here this will become the RELAY var]" rex = re.compile( "input type=\"hidden\" name=\"RelayState\" value=\"(.*)\"" ) # this executes the regex expression on the html var RELAY = rex.search( html ).groups()[0] if "SAMLResponse" in html: rex = re.compile( "input type=\"hidden\" name=\"SAMLResponse\" value=\"(.*)\"" ) # same thing is happening here capturing the value as SAML SAML = rex.search( html ).groups()[0] # contructing a new var with strings and the newly contructed vars datastuff = {'SAMLResponse':SAML,'RelayState':RELAY,'redirect':'Redirect','show_button':'true'} if "form method=\"POST\" action=" in html: rex = re.compile( "form method=\"POST\" action=\"(.*)\" " ) # again action="[postURL]" postUrl = rex.search( html ).groups()[0] ---------------------------------------------------------- #post our saml obtained, get to our final dest c.setopt(c.URL, postUrl ) # setup curl with url found above c.setopt(c.POST, True) # use post method c.setopt(c.POSTFIELDS, urlencode( datastuff )) # post fields found above with newly contructed vars c.perform() c.close()
>>> import glob >>> glob.glob("testdir/*") ['testdir/a.txt', 'testdir/b.txt', 'testdir/d.ext', 'testdir/c.ExT2'] >>> [f for f in glob.glob("testdir/*") if f.lower().endswith((".ext", ".ext2"))] ['testdir/d.ext', 'testdir/c.ExT2']
with open(colA_file, "rb") as file_h: noun_a = set(line.strip() for line in file_h) with open(colB_file, "rb") as file_h: noun_b = set(line.strip() for line in file_h) with open(output_file, "wb") as outfile: with open(input_file, "rb") as opened_input: for line in opened_input: split_line = line.split() if split_line[0] in noun_a and split_line[1] in noun_b: outfile.write(line)
string $cons[] = `ls -type "constraint"`; for ( $con in $cons ){ string $targetAttrString = ( $con+ ".target" ); string $connections[] = `listConnections $targetAttrString`; string $connectionsFlattened[] = stringArrayRemoveDuplicates($connections); for ( $f in $connectionsFlattened ) if ( $f != $con ) print ( $f+ " is a target\n" ); }
@pytest.fixture def my_object(priority): return MyObj(priority) def test_foo(my_object): obj_1 = my_object(1) assert something # 1 obj_2 = my_object(2) assert something # 2
import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D carr = np.array([[0,0,0,1],[0,0,1,1],[0,1,0,1]]) # RGBA color array ax = plt.axes(projection='3d') h = ax.scatter([1,2,3],[1,2,3],[1,2,3], c=carr, edgecolors=carr) plt.show()
import multiprocessing, copy from foo import really_expensive_to_compute_object ## Create a really complicated object that is *hard* to initialise. T = really_expensive_to_compute_object(10) def f(t, x): return t.cheap_calculation(x) P = multiprocessing.Pool(processes=64) results = P.map(f, (copy.deepcopy(T) for _ in range(1000000)), range(1000000)) print results
d = { "Laptop": { "sony": 1, "apple": 2, "asus": 5, }, "Camera": { "sony": 2, "sumsung": 1, "nikon" : 4, }, } with open("my.json","w") as f: json.dump(d,f)
for ext in extension_list: mydict[ext] += 1
import pandas as pd from collections import OrderedDict entity_dict = OrderedDict() entity_dict['bam'] = 1.0 entity_dict['ham'] = 1.0 entity_dict['jam'] = 0.82390874094431876 entity_dict['kam'] = 1.0 entity_dict['lam'] = 1.0 entity_dict['mam'] = 0.82390874094431876 entity_dict['pam'] = 1.0 entity_dict['ram'] = 1.0 entity_dict['sam'] = 0.82390874094431876 entity_dict['tam'] = 1.0 entity_df = pd.DataFrame.from_dict(entity_dict, orient='index').T print(entity_df)
import matplotlib as mlp import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax = fig.add_subplot(111) x = y = np.arange(0, 1, 0.1) plt.plot(x, y, label='my function') plt.title('title') ax.set_xlabel('xAxis') ax.set_ylabel('yAxis') #print fig.get_size_inches() fig.set_size_inches(8, 6, forward=True) fig.tight_layout() plt.savefig('exact_size_test.png', dpi=100)
import requests from multiprocessing import Pool def process_html(url): url_response = requests.get(url) text = url_response.text print(text[:500]) print('-' * 30) urls = [ 'http://www.apple.com', 'http://www.yahoo.com', 'http://www.google.com', 'http://www.apple.com', 'http://www.yahoo.com', 'http://www.google.com', 'http://www.apple.com', 'http://www.yahoo.com', 'http://www.google.com', ] with Pool(None) as p: #None => uses cpu.count() p.map(process_html, urls) #This blocks until all return values from process_html() have been collected.
a = {'aaa': 1, 'bbb': 2, 'ccc': 3} b = ['aaa', 'bbb', 'ddd', 'eee'] c = dict([(x, a.get(x, 0)) for x in a]) print "%(aaa)s %(bbb)s %(ccc)s" % c
while any(flips_left.itervalues()):
import re line_inp = "12.abd23yahoo 04/44 231" r = re.compile('^(.*[a-zA-Z])') m = re.match(r, line_inp) line_out = m.group(0) # 12.abd23yahoo
def balanceable_rec(L, R, weights): print("L =", L, " R =", R, " weights =", weights) if (L == 0 or L==R or L in weights): return True if (len(weights) == 0): return False w = weights.pop(0) if balanceable_rec(L + w, R, weights[:]): return True if balanceable_rec(L, R, weights[:]): return True if balanceable_rec(L, R + w, weights[:]): return True return False
import numpy as np import pylab as pl def threshold_plot(x, y, th, fmt_lo, fmt_hi): idx = np.where(np.diff(y > th))[0] x_insert = x[idx] + (th - y[idx]) / (y[idx+1] - y[idx]) * (x[idx+1] - x[idx]) y_insert = np.full_like(x_insert, th) xn, yn = np.insert(x, idx+1, x_insert), np.insert(y, idx+1, y_insert) mask = yn < th pl.plot(np.ma.masked_where(mask, xn), np.ma.masked_where(mask, yn), fmt_hi, lw=2) mask = yn > th pl.plot(np.ma.masked_where(mask, xn), np.ma.masked_where(mask, yn), fmt_lo) pl.axhline(th, color="black", linestyle="--") x = np.linspace(0, 3 * np.pi, 50) y = np.random.rand(len(x)) threshold_plot(x, y, 0.7, "b", "r")
class Something: def __init__(self): self.parent = None def setParent(self, parent=None): self.parent = self if not parent else parent inst = Something() print inst # prints <__main__.Something instance at 0xblah> print inst.parent # prints None inst.setParent() print inst.parent # prints <__main__.Something instance at 0xblah> inst.setParent(inst) print inst.parent # prints <__main__.Something instance at 0xblah>
queryresults = serializers.serialize("python", queryset, fields=('jobmst_id', 'jobmst_prntid', 'jobmst_name', 'jobdtl_cmd')) # here--^
import matplotlib.pyplot as plt from matplotlib.path import Path import matplotlib.patches as patches import numpy as np import math import time verts = np.array([[0.,0.],[0.,1.],[1.,1.],[1.,0.],[0.,0.]]) codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY, ] path = Path(verts, codes) fig = plt.figure() ax = fig.add_subplot(111) ax.set_xlim(-2,2) ax.set_ylim(-2,2) plt.show(block=False) i=0.0 while i<100: #for i in range(100): ax.clear() x=math.sin(i) y=math.cos(i) print x, y verts2=np.copy(verts) for j in range(len(verts)): verts2[j]=verts[j]+np.array([x,y]) path = Path(verts2, codes) patch = patches.PathPatch(path, facecolor='orange', lw=2) ax.add_patch(patch) plt.draw() i+=0.1
boost::python::scope().attr("Pi") = Pi;
#!/usr/bin/python from reportlab.graphics.charts.lineplots import LinePlot from reportlab.graphics.shapes import Drawing from reportlab.lib import colors from random import randint from datetime import date, timedelta # Generate some testdata data = [ [(x,randint(90,100)) for x in range(0,2001,100)], [(x,randint(30,80)) for x in range(0,2001,100)], [(x,randint(5,20)) for x in range(0,2001,100)], ] # Create the drawing and the lineplot drawing = Drawing(400, 200) lp = LinePlot() lp.x = 50 lp.y = 50 lp.height = 125 lp.width = 300 lp._inFill = 1 lp.data = data for i in range(len(data)): lp.lines[i].strokeColor = colors.toColor('hsl(%s,80%%,40%%)'%(i*60)) # Specify where the labels should be lp.xValueAxis.valueSteps = [5, 500, 1402, 1988] # Create a formatter that takes the value and format it however you like. def formatter(val): #return val #return 'x=%s'%val return (date(2010,1,1) + timedelta(val)).strftime('%Y-%m-%d') # Use the formatter lp.xValueAxis.labelTextFormat = formatter drawing.add(lp) from reportlab.graphics import renderPDF renderPDF.drawToFile(drawing, 'example.pdf', 'lineplot with dates')
from billiard import current_process from celery import task @task def print_info(): # This will print an int in [0..concurrency[ print current_process().index
l1, = plt.plot(x_series, y_series_1, 'r-') l2, = plt.plot(x_series, y_series_2, 'c--') # Some time later... l1.set_color('b') l2.set_color('g')
data = json.loads('[1, 2, 3, 4]')
str_list = str1.split() num = len(str_list) all_lines = [str_list[i:i+14] for i in range(0, num, 14)] all_lines = [" ".join(line)+"\n" for line in all_lines] fp = open("outfile.txt", 'w') fp.writelines(all_lines) fp.close()
>>> a = [1,4,6,2,3] >>> [b[0] for b in sorted(enumerate(a),key=lambda i:i[1])] [0, 3, 4, 1, 2]
import enum class Color(enum.IntEnum): green = 1 blue = 2 red = 3 yellow = 4 color_code = 4 # cast to enum color = Color(color_code) # cast back to int color_code = int(color)
SeasonIdentifier = ['Summer' if x in Summer else 'Winter' if x in Winter else 'Other' for x in GivenMonths]
import matplotlib.pyplot as plt import matplotlib.patheffects as pe plt.figure() ax = plt.gca() txt = ax.text(0.5, 0.5, "test", size=20, color='white', path_effects=[pe.withStroke(linewidth=4, foreground="red")]) plt.show()
root = Tk() def move_window(event): root.geometry('+{0}+{1}'.format(event.x_root, event.y_root)) root.overrideredirect(True) # turns off title bar, geometry root.geometry('400x100+200+200') # set new geometry # make a frame for the title bar title_bar = Frame(root, bg='white', relief='raised', bd=2) # put a close button on the title bar close_button = Button(title_bar, text='X', command=root.destroy) # a canvas for the main area of the window window = Canvas(root, bg='black') # pack the widgets title_bar.pack(expand=1, fill=X) close_button.pack(side=RIGHT) window.pack(expand=1, fill=BOTH) # bind title bar motion to the move window function title_bar.bind('<B1-Motion>', move_window) root.mainloop()
VALUES = {-4: 0.1, -3: 0.2, -2: 0.3, -1: 0.4, 0: 0.5, 1: 0.6, 2: 0.7, 3: 0.8, 4: 0.9} def sum_part(start_point, diff): sum = 0.0 for i in range(start_point - diff, start_point + diff + 1): try: sum += VALUES[i] except KeyError: pass #print('%d: %.2f' % (i, sum)) return sum def test_sum(start_point, diff): sum = sum_part(start_point, diff) print('sum(%d, %d): %.2f' % (start_point, diff, sum)) test_sum(1, 3)
>>> class foo(object): def __init__(self, val): self.val = val def __str__(self): return "str: %s" % self.val def __unicode__(self): return "unicode: %s" % self.val >>> f = foo("bar") >>> u'%s' % f u'unicode: bar' >>> unicode(f) u'unicode: bar' >>> '%s' % f 'str: bar'
f = open("template.file", "r") t = open("File1").read() for line in f: if line.rstrip() in t: print "found " + line else: print line + " Not found"
$Env:PY_PYTHON = 2
def download(request): #Get object(file) using swiftclient url = str(request.values['url']) token = str(request.values['token']) container = str(request.values['container']) name = str(request.values['name']) header, data = Client.get_object(url, token, container, object_name) #Send object data to browser result = data response = Response(result) response.headers['Content-Type'] = content['header']['content-type'] response.headers['Content-Disposition'] = 'attachment; filename="'+filename+'"' return response
tempfile = request.POST['file'] file_path = 'uploaded_files/' + tempfile.filename # for the original filename permanent_file = open( file_path, 'wb') shutil.copyfileobj(tempfile.file, permanent_file)
rows = ...# your source data def date_to_sortable_string(date): # use datetime package to convert string to sortable date. pass # Assume x[0] === patient_id and x[1] === encounter date # Sort by patient_id and date rows_sorted = sorted(rows, key=lambda x: "%0.5d-%s" % (x[0], date_to_sortable_string(x[1]))) for row in rows_sorted: print row
getattr(getattr(a, "b"), "c")
writer = csv.writer(f, lineterminator="\n")
# mylogger.py from twisted.python import log def logger(): return log.PythonLoggingObserver().emit
os.chdir(os.path.dirname(__file__))
from threading import Thread t1 = Thread(target = firstFunction) t2 = Thread(target = secondFunction) t1.start() t2.start()
from urllib import urlencode import requests params = {'search': '7420 Westlake Ter #1210 20817'} search_url = 'http://www.trulia.com/submit_search/?' url = search_url + urlencode(params) r = requests.get(url) # now you get your desired response.
from Tkinter import * import time class App(): def __init__(self): self.window = Tk() self.root = Frame(self.window, height=200,width=200) self.root.pack() self.root.pack_propagate(0) self.window.title('Timer') self.label = Label(text="") self.label.pack() self.sec = 11 self.timerupdate() self.root.mainloop() def timerupdate(self): if self.sec!=0: self.sec-=1 self.label.configure(text=self.sec) self.root.after(1000, self.timerupdate) if self.sec == 0: self.sec = 11 app=App() app.mainloop()
>>> L = [] >>> L[0] = 'a' Traceback (most recent call last): File "<stdin>", line 1, in <module> IndexError: list assignment index out of range
from itertools import repeat, cycle for i in repeat('abcd'): print(i) # abcd, abcd, abcd, abcd, ... for i in cycle('abcd'): print(i) # a, b, c, d, a, b, c, d, ...
import sys getattr(sys.modules[__name__], 'A')
class ExampleModel(ndb.Model): DEFAULT_CREATED = datetime(2000, 1, 1) property1 = ndb.StringProperty() property2 = ndb.StringProperty() created = ndb.DateTimeProperty(auto_now_add=True) def created2(self): if self.created == DEFAULT_CREATED: return None else: return self.created def created2(self, value): if value is None: self.created = DEFAULT_CREATED else: self.value = value
try: from unittest.mock import patch except ImportError: # Python < 3.4 from mock import patch with patch('module.class1') as class1_mock: mocked_instance = class1_mock.return_value mocked_instance.method_to_be_called.return_value = 'Test return value' method() mocked_instance.method_to_be_called.assert_called_with('Foo', 'bar')
Example: var1 = '12591' var2 = 'CNB' var3 = 'YPR' var4 = '2A' var5 = 'GN' var6 = '1' var7 = '8' var8 = '3A' key = ( var1 + "_" + var2 + "_" + var3 + "_" + var4 + "_" + var5 + "_" + var6 + "-" + var7 + "~" + var1 + "_" + var2 + "_" + var3 + "_" + var8 + "_" + var5 + "_" + var6 + "-" + var7 + "~") print key
min(max(x,lo),hi)
from sqlalchemy import * from sqlalchemy.orm import * from sqlalchemy.ext.declarative import declarative_base import random Base= declarative_base() class Customer(Base): __tablename__ = 'customer' id = Column(Integer, primary_key=True) name = Column(Unicode) orders = relationship("Order", backref="customer") class Order(Base): __tablename__ = "order" id = Column(Integer, primary_key=True) customer_id= Column(Integer, ForeignKey('customer.id')) amount = Column(Integer) e = create_engine("sqlite://", echo=True) Base.metadata.create_all(e) session = Session(e) session.add_all([ Customer(name="c%d" % i, orders=[ Order(amount=random.randint(10, 100)) for j in xrange(random.randint(0, 5)) ]) for i in xrange(100) ]) amount_sum = func.sum(Order.amount).label('totalamount') amount = session.query(Order.customer_id, amount_sum).\ group_by(Order.customer_id).\ order_by(amount_sum.desc()).\ limit(10).\ subquery() for a, b in session.query(Customer, amount.c.totalamount).\ join(amount, amount.c.customer_id==Customer.id): print a.name, b
>>> a = [(u'we', 'PRP'), (u'saw', 'VBD'), (u'you', 'PRP'), (u'bruh', 'VBP'), (u'.', '.')] >>> import operator >>> a.sort(key = operator.itemgetter(1)) >>> a [(u'.', '.'), (u'we', 'PRP'), (u'you', 'PRP'), (u'saw', 'VBD'), (u'bruh', 'VBP')]
# Starts encoding in a subprocess proc = subprocess.Popen(['ffmpeg', '-i' 'myinput', 'myoutput']) duration = 3 sleeptime = 0 while proc.poll() is None and sleeptime < 3: # Wait for the specific duration or for the process to finish sleep(1) sleeptime += 1 # If process is not terminated if proc.poll() is None: # Cancels process, waits for it to complete proc.communicate("q")
def __init__(self, **kwargs): self.__dict__.update( kwargs )
import socket address = ('', 7777) server_socket = socket.socket(AF_INET, SOCK_STREAM) server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1) try: server_socket.bind(address) except Exception, e: print colored("Address already in use", 'red') server_socket.listen(2) print colored("Socket ready", 'blue') while True: client_socket, addr = server_socket.accept() hostIP = addr[0] port = addr[1] try: host = gethostbyaddr(hostIP)[0] except: host = hostIP print colored("Got connection from: " + host, 'blue') while True: try: recv_data = client_socket.recv(2048) if not recv_data: break print("Got: " + recv_data) except socket.error, e: print "nothing" recv_data = "" # this is because I test what it is later, but that's irrevlevant.
virtualenv --python=/path/to/python/2.6 virtualenvname
s = 'This is the Sample text I need to get all this but only with single spaces' ' '.join(s.split()) #'This is the Sample text I need to get all this but only with single spaces'
>>> import struct >>> from collections import namedtuple >>> record = 'raymond \x32\x12\x08\x01\x08' >>> Student = namedtuple('Student', 'name serialnum school gradelevel') >>> Student._asdict(Student._make(struct.unpack('<10sHHb', record))) {'school': 264, 'gradelevel': 8, 'name': 'raymond ', 'serialnum': 4658} >>>
>>> def f(x): ... result = [] ... for part in x.split(','): ... if '-' in part: ... a, b = part.split('-') ... a, b = int(a), int(b) ... result.extend(range(a, b + 1)) ... else: ... a = int(part) ... result.append(a) ... return result ... >>> f('1,2,5-7,10') [1, 2, 5, 6, 7, 10]
output = {} in_list = False current_name = None for line in open('actors.list'): if in_list: if line.startswith('-'): break if '\t' not in line: continue name, title = line.split('\t', 1) name = name.strip() title = title.strip() if name: if ',' in name: name = name.split(',', 1) name[0] = name[0].rstrip() name[1] = name[1].lstrip() name.reverse() name = ' '.join(name) current_name = name if title: output.setdefault( current_name, []).append(title) else: if line.startswith('-'): in_list = True
from PyQt4.QtCore import * from PyQt4.QtGui import * class AppForm(QMainWindow): def __init__(self, parent=None): QMainWindow.__init__(self, parent) self.create_main_frame() def create_main_frame(self): page = QWidget() self.button = QPushButton('joy', page) self.edit1 = QLineEdit() self.edit2 = QLineEdit() vbox1 = QVBoxLayout() vbox1.addWidget(self.edit1) vbox1.addWidget(self.edit2) vbox1.addWidget(self.button) page.setLayout(vbox1) self.setCentralWidget(page) self.connect(self.button, SIGNAL("clicked()"), self.clicked) def clicked(self): QMessageBox.about(self, "My message box", "Text1 = %s, Text2 = %s" % ( self.edit1.text(), self.edit2.text())) if __name__ == "__main__": import sys app = QApplication(sys.argv) form = AppForm() form.show() app.exec_()
You are trying to add a non-nullable field 'name' to module without a default; we can't do that (the database needs something to populate existing rows). Please select a fix: 1) Provide a one-off default now (will be set on all existing rows) 2) Quit, and let me add a default in models.py Select an option:
q1 = pyes.TermQuery("title", "rainbow") q2 = pyes.TermQuery("artist", "kermit") query = BooleanQuery(must=[q1, q2]) search = pyes.Search(query) results = conn.search(search, index_name, doc_type)
>>> chainpos.append((chainid,x, y, z)) >>> chainpos [('A', 1.719, -25.217, 8.694), ('A', 2.934, -21.997, 7.084)] >>> import itertools >>> for id, coor in itertools.groupby(chainpos,lambda x:x[0]): ... print(id, [c[1:] for c in coor])
perl -pe 'print "$ARGV,"' a b c
>>> s = "Hello, I am 12! I like plankton but I don't like Baseball." >>> index = 34 #points to the 't' in 'but' >>> index_of_2nd_I = s.rfind('I', 0, index) >>> >>> index_of_2nd_I 16
class MyDealModelView(ModelView): form_excluded_columns = ('merchant_id',) def on_model_change(form, model, is_created): model.merchant_id = login.current_user.merchant_id;
doodahs = ( (0, "FOO"), (257, "BAR"), (258, "FISH"), (279, "MOOSE"), (280, "Darth Vader"), (65535, "Death to all newbies") )
badwords = ["love", "peace", "hello"] message = "hi I love you" for badword in badwords: if (badword in message.lower()): print "oh thats bad /ban"
Z_level, XD1, XD2, ... = list_sample
import os TEST_FILENAME = os.path.join(os.path.dirname(__file__), 'test.txt')
GPIO.setmode(GPIO.BCM) GPIO.Setup (17, GPIO.IN, pull_up_down = GPIO.PUD_DOWN) GPIO.Setup (18, GPIO.IN, pull_up_down = GPIO.PUD_DOWN) GPIO.Setup (21, GPIO.IN, Pull_up_down = GPIO.PUD_DOWN) GPIO.Setup (22, GPIO.IN, pull_up_down = GPIO.PUD_DOWN) GPIO.setup (23, GPIO.IN, pull_up_down = GPIO.PUD_DOWN) GPIO.Setup (24, GPIO.IN, pull_up_down = GPIO.PUD_DOWN) while True: try: if GPIO.input(17) == 1: # all `if` should be lowercase and the `try` writeTexts(+1,-370,55) # don't need `()` in if statements. writeTexts(today + difference1,-100,-200) if GPIO.input(18) == 1: WriteTexts(-1,-370,55) if GPIO.input(21) == 1: writeTexts(0,-370,55) if GPIO.Input(22) == 1: writeTexts(+1,280,55) if GPIO.input(23) == 1: writeTexts(-1,280,55) writeTexts(today + difference1,550,-200) if GPIO.input(24) == 1: writeTexts(0,280,55) sleep(.01) except KeyboardInterrupt: # missing `:` exit() GPIO.Cleanup ()
import math, random name1 = "" name2 = "" strength1 = 0 strength2 = 0 skill1 = 0 skill2 = 0 def Character1(): global strength1, skill1, name1 name1 = raw_input("Please enter a name for the first character : ") strength1 = math.floor(random.randint(1,12)/random.randint(1,4))+10 skill1 = math.floor(random.randint(1,12)/random.randint(1,4))+10 def Character2(): global strength2, skill2, name2 name2 = raw_input("Please enter a name for the second character : ") strength2 = math.floor(random.randint(1,12)/random.randint(1,4))+10 skill2 = math.floor(random.randint(1,12)/random.randint(1,4))+10 def printStats(): print "The first character is called " + name1 + " and has a skill level of " + str(skill1) + " and a strength level of " + str(strength1) print "The first character is called " + name2 + " and has a skill level of " + str(skill2) + " and a strength level of " + str(strength2) Character1() Character2() printStats()
import os path = '/path/to/repo' # or use input from command line savedPath = os.getcwd() # do init stuff os.chdir(path) # do repo stuff repo_path = '.' repo_url = 'git@github.com:username/myfolder.git' repo = Gittle(repo_path, origin_uri=repo_url) print repo.modified_files # finish repo stuff os.chdir(savedPath) # do other stuff
#!/usr/bin/python from scrapy.cmdline import execute execute()
try: import readline except ImportError: import pyreadline as readline
from django.core.management import call_command call_command('loaddata', 'data.json', stdout=out, verbosity=0)
>>> lst = [] >>> >>> for i in xrange(4): ... lst.append({}) ... lst[i]['a'] = False ... >>> any(d['a'] for d in lst) False >>> lst[1]['a'] = True >>> any(d['a'] for d in lst) True
def deleteList(listo1, listo2): for insidelist in listo1: if listo2[0] == insidelist[0]: listo1.remove(insidelist) print(listo1) def main(): deleteList([[1000, 1],[2000, 2],[3000, 3]], [1000, 77])
import matplotlib.pyplot as plt from matplotlib.patches import Circle class InteractiveCircle(object): def __init__(self): self.fig, self.ax = plt.subplots() self.ax.axis('equal') self.circ = Circle((0.5, 0.5), 0.1) self.ax.add_artist(self.circ) self.ax.set_title('Click to move the circle') self.fig.canvas.mpl_connect('button_press_event', self.on_click) def on_click(self, event): if event.inaxes is None: return self.circ.center = event.xdata, event.ydata self.fig.canvas.draw() def show(self): plt.show() InteractiveCircle().show()
from IPython import embed embed()
# 'x' is [[1, 1, 1] # [1, 1, 1]] tf.reduce_sum(x) ==> 6 tf.reduce_sum(x, 0) ==> [2, 2, 2] tf.reduce_sum(x, 1) ==> [3, 3] tf.reduce_sum(x, 1, keep_dims=True) ==> [[3], [3]] tf.reduce_sum(x, [0, 1]) ==> 6
$ python2.7 >>> def f(): ... temp = 'a' * 10 ... >>> f.__code__.co_consts (None, 'a', 10, 'aaaaaaaaaa') >>> import dis >>> dis.dis(f) 2 0 LOAD_CONST 3 ('aaaaaaaaaa') 3 STORE_FAST 0 (temp) 6 LOAD_CONST 0 (None) 9 RETURN_VALUE
# Any reference properties not loaded yet customer = Customer.get_by_id(1) print customer.name print customer.address # Assuming customer.order is a ReferenceProperty, now is when it # would be loaded from the datastore. print customer.order.created_at
In [2]: df = pd.DataFrame({'a': [1,2,3,4,5,6,7], 'b': [1,1,1,0,0,0,0]}) ​ grouped = df.groupby('b') grouped.apply(lambda x: x.sample(frac=0.3)) Out[2]: a b b 0 6 7 0 1 2 3 1
class Article(models.Model): .... class Meta: ordering = ['surname', 'name']
def replace(thelist,a,b): assert type(thelist)==list, `thelist` + ' is not a list' assert type(a)==int, `a` + ' is not an integer' assert type(b)==int, `b` + ' is not an integer' if len(thelist)==0: return [] return ([b] if thelist[0]==a else [thelist[0]])+replace(thelist[1:],a,b)
import ast class LatexVisitor(ast.NodeVisitor): def prec(self, n): return getattr(self, 'prec_'+n.__class__.__name__, getattr(self, 'generic_prec'))(n) def visit_Call(self, n): func = self.visit(n.func) args = ', '.join(map(self.visit, n.args)) if func == 'sqrt': return '\sqrt{%s}' % args else: return r'\operatorname{%s}\left(%s\right)' % (func, args) def prec_Call(self, n): return 1000 def visit_Name(self, n): return n.id def prec_Name(self, n): return 1000 def visit_UnaryOp(self, n): if self.prec(n.op) > self.prec(n.operand): return r'%s \left(%s\right)' % (self.visit(n.op), self.visit(n.operand)) else: return r'%s %s' % (self.visit(n.op), self.visit(n.operand)) def prec_UnaryOp(self, n): return self.prec(n.op) def visit_BinOp(self, n): if self.prec(n.op) > self.prec(n.left): left = r'\left(%s\right)' % self.visit(n.left) else: left = self.visit(n.left) if self.prec(n.op) > self.prec(n.right): right = r'\left(%s\right)' % self.visit(n.right) else: right = self.visit(n.right) if isinstance(n.op, ast.Div): return r'\frac{%s}{%s}' % (self.visit(n.left), self.visit(n.right)) elif isinstance(n.op, ast.FloorDiv): return r'\left\lfloor\frac{%s}{%s}\right\rfloor' % (self.visit(n.left), self.visit(n.right)) elif isinstance(n.op, ast.Pow): return r'%s^{%s}' % (left, self.visit(n.right)) else: return r'%s %s %s' % (left, self.visit(n.op), right) def prec_BinOp(self, n): return self.prec(n.op) def visit_Sub(self, n): return '-' def prec_Sub(self, n): return 300 def visit_Add(self, n): return '+' def prec_Add(self, n): return 300 def visit_Mult(self, n): return '\\;' def prec_Mult(self, n): return 400 def visit_Mod(self, n): return '\\bmod' def prec_Mod(self, n): return 500 def prec_Pow(self, n): return 700 def prec_Div(self, n): return 400 def prec_FloorDiv(self, n): return 400 def visit_LShift(self, n): return '\\operatorname{shiftLeft}' def visit_RShift(self, n): return '\\operatorname{shiftRight}' def visit_BitOr(self, n): return '\\operatorname{or}' def visit_BitXor(self, n): return '\\operatorname{xor}' def visit_BitAnd(self, n): return '\\operatorname{and}' def visit_Invert(self, n): return '\\operatorname{invert}' def prec_Invert(self, n): return 800 def visit_Not(self, n): return '\\neg' def prec_Not(self, n): return 800 def visit_UAdd(self, n): return '+' def prec_UAdd(self, n): return 800 def visit_USub(self, n): return '-' def prec_USub(self, n): return 800 def visit_Num(self, n): return str(n.n) def prec_Num(self, n): return 1000 def generic_visit(self, n): if isinstance(n, ast.AST): return r'' % (n.__class__.__name__, ', '.join(map(self.visit, [getattr(n, f) for f in n._fields]))) else: return str(n) def generic_prec(self, n): return 0 def py2tex(expr): pt = ast.parse(expr) return LatexVisitor().visit(pt.body[0].value)
def test_view(request): return HttpResponseRedirect('/test/%s/%s/%s/' % request.POST['first'], request.POST['second'], request.POST['third])
import string class X(object): def __getattr__(self, name): if name in string.lowercase and len(name) == 1: def call_into_module(arg): return module.do(arg, name) return call_into_module return super(X, self).__getattr__(name)
In [199]: df2.reset_index().to_dict(orient='list') Out[199]: {'date': ['2014-10-1', '2014-10-2', '2014-10-3', '2014-10-4', '2014-10-5'], 'foo': [8, 1, 8, 8, 1], 'temp': [10, 10, 8, 3, 10], 'time': [1, 2, 3, 4, 5]}
def n_factors(x, lower, upper): int_counter = 0 # integer counter div_count = 0 # divisor counter for i in range(lower, upper+1): for j in range(1, i + 1): if (i%j)==0: div_count += 1 if div_count == x: print i int_counter += 1 div_count = 0 return int_counter
dict((k, v) for (k, v) in somedict.iteritems() if not k.startswith('someprefix'))
In [273]: df.groupby(level='first', group_keys=False).apply(lambda d: d.drop_duplicates()) Out[273]: 0 1 first second bar one 1 1 baz one 1 1 foo one 1 1 qux one 1 1
msg.attach(attachment)
import ctypes MB_OK = 0x0 MB_OKCXL = 0x01 MB_YESNOCXL = 0x03 MB_YESNO = 0x04 MB_HELP = 0x4000 ICON_EXLAIM=0x30 ICON_INFO = 0x40 ICON_STOP = 0x10 result = ctypes.windll.user32.MessageBoxA(0, "Your text?", "Your title", MB_HELP| MB_YESNO | ICON_STOP)
>>> from heapq import nsmallest >>> s = [1,2,3,4,5,6,7] >>> nsmallest(3, s, key=lambda x: abs(x-6.5)) [6, 7, 5]
df1 = df1.merge(df2[['weeknum', 'datetime']], on=['weeknum'])
def fib(n): return n if n in (0, 1) else globals()['fib'](n-1) + globals()['fib'](n-2)
with open('file.txt', 'r') as f: print(len(f.readlines()))
from collections import Counter import random tups = [ (1,2), (3,4), (5,6), (1,2), (3,4) ] lst = Counter(tups).most_common() highest_count = max([i[1] for i in lst]) values = [i[0] for i in lst if i[1] == highest_count] random.shuffle(values) print values[0]
import re blockOfText = 'two thousand may be represented as 2000 2000.00 2,000 and 2k' ' '.join([ ''.join(x[0]) for x in re.findall(r'(\$?\d+([,\.]\d+)?k?)', blockOfText) ])
>>> class A(object): ... pass ... >>> a = A() >>> f = 'field' >>> setattr(a, f, 42) >>> a.field 42
import random import time def strTimeProp(start, end, format, prop): """Get a time at a proportion of a range of two formatted times. start and end should be strings specifying times formated in the given format (strftime-style), giving an interval [start, end]. prop specifies how a proportion of the interval to be taken after start. The returned time will be in the specified format. """ stime = time.mktime(time.strptime(start, format)) etime = time.mktime(time.strptime(end, format)) ptime = stime + prop * (etime - stime) return time.strftime(format, time.localtime(ptime)) def randomDate(start, end, prop): return strTimeProp(start, end, '%m/%d/%Y %I:%M %p', prop) print randomDate("1/1/2008 1:30 PM", "1/1/2009 4:50 AM", random.random())
def edit_notification(request): foo = request.GET.get('foo') ...
new_training_data = new_training_data.astype(np.float64) new_training_data[new_training_data == 0] = -1
def load_tests(loader, tests, pattern): return suite()
>>> pd.crosstab(df.index, df['Crime type']) Crime type Anti-social behaviour Burglary Other theft Shoplifting ... E01006687 0 1 0 0 E01007229 3 1 2 1 E01007230 6 0 0 0
url = NSURL.fileURLWithPath(path) finder = SBApplication.applicationWithBundleIdentifier("com.apple.Finder") item = finder.items.objectAtLocation(url) item.delete
import numpy import pandas # your data # =================================== numpy.random.seed(0) df1 = abs((pandas.DataFrame(numpy.random.randn(20, 8))*100).astype(int)) df1.columns = list('abcdefgh') df1.index = pandas.date_range('1/1/2014', periods=20) # processing # =================================== df1['custom_min'] = pandas.concat([df1[df1.columns[:5]], df1[df1.columns[-3:]].shift(1)], axis=1).min(axis=1) print(df1) a b c d e f g h custom_min 2014-01-01 176 40 97 224 186 97 95 15 40 2014-01-02 10 41 14 145 76 12 44 33 10 2014-01-03 149 20 31 85 255 65 86 74 12 2014-01-04 226 145 4 18 153 146 15 37 4 2014-01-05 88 198 34 15 123 120 38 30 15 2014-01-06 104 142 170 195 50 43 125 77 30 2014-01-07 161 21 89 38 51 118 2 42 21 2014-01-08 6 30 63 36 67 35 81 172 2 2014-01-09 17 40 163 46 90 5 72 12 17 2014-01-10 113 123 40 68 87 57 31 5 5 2014-01-11 116 90 46 153 148 189 117 17 5 2014-01-12 107 105 40 122 20 97 35 70 17 2014-01-13 1 178 12 40 188 134 127 96 1 2014-01-14 117 194 41 74 192 148 186 90 41 2014-01-15 86 191 26 80 94 15 61 92 26 2014-01-16 37 109 29 132 69 14 43 184 15 2014-01-17 67 40 76 53 67 3 63 67 14 2014-01-18 57 20 39 109 149 43 16 63 3 2014-01-19 238 94 91 111 131 46 6 171 16 2014-01-20 74 82 9 66 112 107 114 43 6
from itertools import chain A_1 = [1, 2, 3, 4] A_2 = [3, 4, 5, 6] A_3 = [3, 4, 7, 8] # Collect the input lists for use with chain below all_lists = [A_1, A_2, A_3] for A in (A_1, A_2, A_3): # Combine all the lists into one super_list = list(chain(*all_lists)) # Remove the items from the list under consideration for x in A: super_list.remove(x) # Get the unique items remaining in the combined list super_set = set(super_list) # Compute the unique items in this list and print them uniques = set(A) - super_set print(sorted(uniques))
$mystring = system('python myscript.py myargs', $retval);
individual_bytes = struct.unpack("BB", struct.pack("<H", 1024))
>>> import decimal >>> decimal.Decimal('1') / (decimal.Decimal('5') / decimal.Decimal('1000000')) Decimal('2E+5')
io.use_plugin('pil', 'imread') a = io.imread('C:\Users\Dimitrios\Desktop\polimesa\\arizona.jpg') B = np.zeros((len(a)/2 +1, len(a[0])/2 +1)) for i in xrange(0, len(a), 2): for j in xrange(0, len(a[0]), 2): x.append(a[i][j]) if i+1 < len(a): x.append(a[i+1][j]) if j+1 < len(a[0]): x.append(a[i][j+1]) if i+1 < len(a) and j+1 < len(a[0]): x.append(a[i+1][j+1]) B[i/2][j/2] = np.std(x) x[:] = []
$ python -V Python 2.7.1 $ python so18736473.py names[0]: ('f_a', ([1, 1],)) done, elapsed wall clock time (win32) in seconds: 5.418259 $ pypy -V Python 2.7.2 (341e1e3821fff77db3bb5cdb7a4851626298c44e, Jun 09 2012, 14:24:11) [PyPy 1.9.0] $ pypy so18736473.py names[0]: ('f_a', ([1, 1],)) done, elapsed wall clock time (win32) in seconds: 0.648846
$ awk 'p!=$1{p=$1; print}' file + 5 1364182 TTGC - 5 1364204 GATG + 1 9372980 TTCA - 1 9373028 GGAA + 2 14029383 ACCA - 2 14029437 ACCA + 4 13475195 AGCA - 4 13475251 TCTC + 1 9372980 TTCA - 1 9373028 GGAA + 2 14029383 ACCA
import sys import getopt def main(argv): try: opts, args = getopt.getopt(argv,"hi:",["ifile="]) except getopt.GetoptError: print 'test.py -i <inputfile>' sys.exit(2) for opt, arg in opts: if opt in ("-i", "--ifile"): inputfile = arg print 'Input file is "', inputfile if __name__ == "__main__": main(sys.argv[1:])
import os def get_file_types(directory): file_ext = set() for root, directories, files in os.walk(directory): for filename in files: filepath = os.path.join(root, filename) fileName, fileExtension = os.path.splitext(filepath) return sorted(file_ext) # Self-explanatory. file_types = get_file_types("d:\\Development\\") for ty in file_types: print ty
[(k,i) for k,m in enumerate(ref, 1) for i,j in enumerate(m, 1) if 'yellow' in j]
1. nginx + gnunicorn 2. apache2 + mod-wsgi 3. something else 4. anything else ... n-1. fcgi n. cgi
>>> 1 + 1 2 >>> x = _ >>> x 2
for block in iter(lambda: file_obj.read(4), ""): use(block)
import datetime from System import DateTime datetime.datetime(DateTime.Now)
import io from PIL import Image if response.status_code is requests.codes.ok: io = io.BytesIO(response.content) im = Image.open(io).convert('RGB').save('test.jpg)
import string valid_chars = "-_.() %s%s" % (string.ascii_letters, string.digits) [...] data = c.recv(BUFFER_SIZE) data=''.join(c for c in data if c in valid_chars) print 'requested website: '+data if len(data)>0: try: urllib2.urlopen('localhost:2020/?id='+data ).read() print x c.send(x) except: pass c.close() # Close the connection
import os from gi.repository import Gtk, Gio # This allows Ctrl+C to exit the program import signal signal.signal(signal.SIGINT, signal.SIG_DFL) def callback(m, f, o, event): # Without this check, multiple 'ok's will be printed for each file change if event == Gio.FileMonitorEvent.CHANGES_DONE_HINT: print ('ok') gio_file = Gio.File.new_for_path(os.environ['HOME']+'/temp') monitor = gio_file.monitor_file(Gio.FileMonitorFlags.NONE, None) monitor.connect("changed", callback) Gtk.main()
Free quota Usage is free for all users, up to 100 queries per day.
def get_stats(group): return {'mean': group.mean(), 'std': group.std(), 'hit_r': group.apply(lambda x: x >= 0).sum() / float(group.count())}
chr = "*" size = 5 row = 1 while row <= size: col = size - row + 1 while col <= size: print ' ', col = col + 1 col = 0 while col <= size-row: print chr, col = col + 1 row = row + 1 print '' print ''
for i in d: # The keys in D contain quotes and a newline which need # to be removed. In v3, newline = 1 char and in v2, # newline = 2 char. if sys.version_info[0] < 3: if i[1:-3] != d[i].get('id'): print('%s %s' % (i[1:-3], d[i].get('id'))) else: if i[1:-2] != d[i].get('id'): print('%s %s' % (i[1:-2], d[i].get('id')))
class Student(models.Model): name = models.CharField(max_length=128, unique=True) friends = models.ManyToManyField('self', blank = True)
class WSHandler(tornado.websocket.WebSocketHandler): clients = [] def open(self): self.clients.append(self) print 'new connection' self.write_message("Hello World") def on_message(self, message): print 'message received %s' % message def on_close(self): self.clients.remove(self) print 'closed connection'
>>> s = 'testing[\x06I"text in between 1\x06;filler text[\x06I"text in between 2\x06;more filler[\x06I"text in between \n with some line breaks \n included in the text\x06;ending' >>> import re >>> p = re.compile('\[\x06I"(.+?)\x06;', re.DOTALL) >>> print(p.findall(s)) ['text in between 1', 'text in between 2', 'text in between \n with some line breaks \n included in the text']
def create_closure_and_function(*args): func = None def create_function_closure(): return func closure = create_function_closure.__closure__ func = types.FunctionType(*args[:-1] + [closure]) return func
ax.set_xticks(x_range)
result = tables.Column(verbose_name='The Result', empty_values=())
plt.plot(input_amp, marker='d', color='blue', drawstyle='steps-pre')
class QuestionForm(Form): questions = ChoiceField() def __init__(self, *args, **kwargs): super(QuestionForm, self).__init__(*args, **kwargs) self.fields['questions'].choices = set_up_choices() # function that creates list clean_questions(self): # do your validation of the question selection # here you could check whether the option selected matches # a correct value, if not throw a form validation exception return self.cleaned['questions']
>>> string = "^h^c^04^^^13/ \^d^b / \^u^u^u^u^u^u^u^l^l\^o^b^r/" >>> import re >>> re.findall(r'\^.+?(?=\^|$)', string) ['^h', '^c', '^04', '^^', '^13/ \\', '^d', '^b / \\', '^u', '^u', '^u', '^u', '^u', '^u', '^u', '^l', '^l\\', '^o', '^b', '^r/']
with open(file, 'r') as temp: for num, line in enumerate(temp, 1): for string in lookup: # Regex searchObj = re.finditer(string, line, re.M | re.I) if searchObj: for match in searchObj: # Find the start index of the keyword start = match.span()[0] # Find the end index of the keyword end = match.span()[1] # Truncate line to get only 'n' characters before and after the keyword tmp = line[start-n:end+n] + '\n' print tmp
try: from maya import cmds except ImportError: print 'Not Maya'
string = '123456789' splitted = [] prev = 0 while True: n = random.randint(1,3) splitted.append(string[prev:prev+n]) prev = prev + n if prev >= len(string)-1: break print splitted
import matplotlib.pyplot as plt import numpy as np signal = 1.2*np.sin(np.linspace(0, 30, 2000)) pos_signal = signal.copy() neg_signal = signal.copy() pos_signal[pos_signal <= 0] = np.nan neg_signal[neg_signal > 0] = np.nan #plotting plt.style.use('fivethirtyeight') plt.plot(pos_signal, color='r') plt.plot(neg_signal, color='b') plt.savefig('pos_neg.png', dpi=200) plt.show()
n1=input('Enter first number ') n2=input('Enter second number ') print sum(range(min(n1,n2)+1,max(n1,n2)))
# I stole this decorator from another stackoverflow recipe :) def returnthisclassfrom(specials): specialnames = ['__%s__' % s for s in specials.split()] def wrapit(cls, method): return lambda *a: cls(method(*a)) def dowrap(cls): for n in specialnames: method = getattr(cls, n) setattr(cls, n, wrapit(cls, method)) return cls return dowrap def int_getslice(self, i, j): # NON-pythonic, will return everything inclusive i.e. x[5:3] returns 3 bits, not 2. # Because that's what users normally expect. # If you're a purist, modify below. if i > 1000000 or j > 1000000: raise ValueError, 'BitSize limited to 1 million bits' lo = min(i,j) hi = max(i,j) mask = (1<<((hi-lo)+1))-1 return (self>>lo) & mask def int_getitem(self, i): # Safety limit if i > 1000000: raise ValueError, 'BitSize limited to 1 million bits' return (self>>i)&1 def int_iter(self): # since getitem makes it iterable, override raise AttributeError, 'int object is not iterable' @returnthisclassfrom('abs add and div floordiv lshift mod mul neg or pow radd rand rdiv rdivmod rfloordiv rlshift rmod rmul ror rpow rrshift rshift rsub rxor rtruediv sub truediv xor trunc') class BitSliceInt(long): __getslice__ = int_getslice __getitem__ = int_getitem __iter__ = int_iter
library(reshape) library(ggplot2) dat <- data.frame(weather=c("Rain","Hail","Sunny"), Germany = c(0,1,0), Italy = c(1,0,0)) melt.data<-melt(dat, id.vars="weather", variable_name="country") qplot(data=melt.data, x=country, y=weather, fill=factor(value), geom="tile")+scale_fill_manual(values=c("0"="white", "1"="red"))
driver.switch_to.frame(driver.find_element_by_tag_name("iframe")) driver.find_element_by_id("user_email").send_keys("username") driver.find_element_by_id("user_password").send_keys("password") // do whatever else driver.switch_to.default_content()
m = [] for i,(k, v) in enumerate(n): n[i] = (str(k)+'B', str(v) + 'B') m.append(n[i])
import xlrd try: work_book = xlrd.open_workbook('file_name.xls', on_demand=True) finally: work_book.release_resources()
def create(self, cr, uid, vals, context=None): obj_master = super(parent_table,self).create(cr,uid, vals, context=context) obj_child = self.pool.get('child.table') obj_child.create(cr, uid,{'field_name':obj_child.field_value......})
#!/usr/bin/env/python par = self.gui.get_widget('your_parent_window') msg = gtk.MessageDialog(type=gtk.MESSAGE_INFO, buttons = gtk.BUTTONS_OK, parent=par) if msg.run(): msg.destroy() return None
format e: /fs:NTFS /p:2
img = cv2.imread("D:\\img.jpg") gray = cv2.cvtColor(img, cv.CV_BGR2GRAY) img2 = np.zeros_like(img) img2[:,:,0] = gray img2[:,:,1] = gray img2[:,:,2] = gray cv2.circle(img2, (10,10), 5, (255,255,0)) cv2.imshow("colour again", img2) cv2.waitKey()
story = "this is a very long story" id = stories_col.find_one_and_update({ 'story': story, }, { '$setOnInsert': { 'story': story } }, upsert=True, return_document=ReturnDocument.AFTER)
# Number of uniformly ditributed random numbers n = 2000 def func_vec(x1s, x2s): return x1s * x1s + 4 * x2s * x2s np.random.seed() x1s = np.random.uniform(-1, 1, n) x2s = np.random.uniform(-1, 1, n) ys = func_vec(x1s, x2s) fig = plt.figure(22) # Scatter ax1 = fig.add_subplot(1, 2, 1) ax1.scatter(x1s, x2s, color = 'g', s = 2, edgecolor = 'none') ax1.set_ylim([-1,1]) ax1.set_xlim([-1,1]) # Contour xi = np.linspace(-1,1,20) yi = np.linspace(-1,1,20) zi = griddata((x2s, x1s), ys, (xi[None,:], yi[:,None]), method = 'cubic') ax1.contour(xi, yi, zi, 6, linewidths = 1, colors = ('#0000ff', '#0099ff', '#009999', '#999900', '#ff9900', '#ff0000')) # 3D visualization ax2 = fig.add_subplot(1, 2, 2, projection = '3d') X, Y = np.meshgrid(xi, yi) ax2.plot_wireframe(X, Y, zi, rstride = 1, cstride = 1) ax2.view_init(28, -144) plt.show()
context = etree.iterparse(xmlfile, tag="yourSubTree") action, elem = context.next() etree.iterwalk(elem, ...)...
import socket import threading class Client(threading.Thread): def __init__(self): self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.socket.connect(('127.0.0.1', 1234)) print('Client connected to server') t = threading.Thread(target = self.read) t.daemon = True # helpful if you want it to die automatically t.start() t2 = threading.thread(target = self.write) t2.daemon = True t2.start() def read(self): while True: data = self.socket.recv(1024) if data: print('Received:', data) def write(self): while True: message = input() self.socket.send(bytes(message, 'utf-8')) client = Client()
f=open("somesettings.ini", "r") for l in f.readlines(): If "Minimum Free Space" in l: index=l.find('=') res=l[index+1:] break f.close()
while True: N = input("Please input factorial you would like to calculate: ") try: # try to ... N = int(N) # convert it to an integer. except ValueError: # If that didn't succeed... print("Invalid input: not an integer.") continue # retry by restarting the while loop. if N > 0: # valid input break # then leave the while loop. # If we are here, we are about to re-enter the while loop. print("Invalid input: not positive.")
fig=plt.figure() ax=fig.add_subplot(111) ax.plot(x_data,y_data) ax.set_xlim(xmin=0.0, xmax=1000) plt.savefig(filename)
python filename.py -hashtags \#one \#two \#three
import matplotlib.pyplot as plt def plot_something(x, y, **kwargs): title = kwargs.pop( 'title' ) xlabel = kwargs.pop( 'xlabel' ) ylabel = kwargs.pop( 'ylabel' ) plt.figure() plt.plot(x, y, **kwargs) fig = plt.gcf() for axis in fig.axes: axis.set_title( title ) axis.xaxis.set_label( xlabel ) axis.yaxis.set_label( ylabel ) return axis plot_conf = {'title': 'Blabla', 'xlabel':'Time (s)', 'ylabel': 'Speed (m/s)'} x = [1.,2.,3.] y = [1.,4.,9.] axis = plot_something(x=x,y=y, **plot_conf)
data = ssn.query(models.MedicationLog.dose_date, func.sum(func.array_length( models.MedicationLog.dose_taken_times, ARRAY_DEPTH )).label('dose_taken_times')).order_by(models.MedicationLog.dose_date).\ group_by(models.MedicationLog.dose_date).all()
open('\\\\?\\C:\\whatever\\test.','w')
spark.cores.max=<value>
df = pd.DataFrame({'A': [30, 30, 26, 26, 26, 26], 'B': [60538815980, 7410811099, 2238403510, 2006613744, 2006618783, 2006613743]}) gb = df.groupby('A') df2 = pd.DataFrame([df.ix[gb.groups[n], 'B'].values for n in gb.groups], index=gb.groups.keys()) df2.columns = ["C_" + str(i + 1) for i in df2.columns] df2.index.name = "A" >>> df2 C_1 C_2 C_3 C_4 A 26 2238403510 2006613744 2006618783 2006613743 30 60538815980 7410811099 NaN NaN
>>> s = set()
import curses stdscr = curses.initscr() def print_char(x, y, char): stdscr.addch(y, x, char)
import matplotlib.pyplot as plt fig=plt.figure() ax1=fig.add_subplot(111) ax2=ax1.twiny() ax1.set_xlabel('xlabel 1') ax2.set_xlabel('xlabel 2') ax2.xaxis.set_label_coords(0.5,0.95) ax1.set_title('my title') plt.show()
def prepare_parser(): from pyparsing import Word, alphas, Optional, ... # do stuff, and get the final thing to return return ... parser = prepare_parser()
def writetxt(phrase): f = open("file.txt", "a") phrase = f.read() palabras = phrase.split() for word in palabras: print (word) f.write(word) f.close()
function_list = {0:{"func":power_off}, 1:{"func":image_capture, "args":(100,1000,100,100)}, 2:{"func":video_record, "args":(100,100)}, 3:{"func":image_settings}, 4:{"func":video_settings}, 5:{"func":device_settings} } f = function_list[current_selection] if "args" in f: f["func"](*f["args"]) else: f["func"]()
import os data_path = '/data' # option 1 using nested list comprehensions** data_files = (os.path.join(root,f) for (root, dirs, files) in os.walk(data_path) for f in files) # can use [] instead of () # option 2 using nested for loops data_files = [] for root, dirs, files in os.walk(data_path): for f in files: data_files.append(os.path.join(root, f)) for data_file in data_files: # ... process data_file ...
>>> chrmap = {'A': '\x3a', 'B': '\x3b', 'C': '\x3c', 'D': '\x3d', 'E': '\x3e', 'F': '\x3f'} >>> ''.join(chrmap.get(c, c) for c in '03FE5') '03?>5'
Model.objects.filter(id=id).update(field=F('field') +1))
import itertools A = [list(group) for val, group in itertools.groupby(zp, lambda x: x[1] > 1) if val] # [[(1.36, 2), (1.37, 3), (1.37, 4), (1.39, 5), (1.38, 6), (1.4, 7), (1.41, 8), (1.42, 9), (1.43, 10)], # [(1.49, 2), (1.5, 3), (1.51, 4)], # [(1.55, 2), (1.56, 3), (1.57, 4)], # [(1.63, 2), (1.64, 3), (1.65, 4)], # [(1.69, 2), (1.7, 3), (1.71, 4)]]
import numpy as np import matplotlib.pyplot as plt # Generate some data x = np.linspace(0, 10, 1000) y = np.sin(np.exp(0.3*x)) fig, ax = plt.subplots() ax.plot(x, y) ax.set_ylim(-2,2) ax.annotate('First maxima', xy=(np.pi/2., 2), xytext=(np.pi/2., 2.3), arrowprops = dict(facecolor='black', shrink=0.05)) plt.show()
import cerealizer #import cPickle as cerealizer def save(data, filename): f = open(filename,"wb") cerealizer.dump(data, f, protocol=2) f.close() def load(filename): f = open(filename,"rb") p = cerealizer.load(f) f.close() return(p) if __name__ == "__main__": import PIL.Image import cStringIO as StringIO stringIO = StringIO.StringIO() im = PIL.Image.open("picture.jpg") im.save(stringIO, "JPEG") stringIO.seek(0) save(stringIO.read(), "testCerealizerIm.txt") binaryImageData = load("testCerealizerIm.txt") stringIO2 = StringIO.StringIO() stringIO2.write(binaryImageData) stringIO2.seek(0) im = PIL.Image.open(stringIO2) im.show()
import autopy from time import sleep def color_checker(): color_grabber = hex(autopy.bitmap.Bitmap.open("screen1.png").get_color(292,115)) return color_grabber def mouse_move_click(): autopy.mouse.smooth_move(433,320) autopy.mouse.click() def screen_grab(): autopy.bitmap.capture_screen().save("screen1.png") def the_ifs(color): if color == "0xffcb05": mouse_move_click() while 1==1: sleep(1) screen_grab() color = color_checker() the_ifs(color) print color
import xml.etree.ElementTree as ET def find_child(node, with_name): """Recursively find node with given name""" for element in list(node): if element.tag == with_name: return element elif list(element): sub_result = find_child(element, with_name) if sub_result is not None: return sub_result return None def replace_node(from_tree, to_tree, node_name): """ Replace node with given node_name in to_tree with the same-named node from the from_tree """ # Find nodes of given name ('car' in the example) in each tree from_node = find_child(from_tree.getroot(), node_name) to_node = find_child(to_tree.getroot(), node_name) # Find where to substitute the from_node into the to_tree to_parent, to_index = get_node_parent_info(to_tree, to_node) # Replace to_node with from_node to_parent.remove(to_node) to_parent.insert(to_index, from_node) def get_node_parent_info(tree, node): """ Return tuple of (parent, index) where: parent = node's parent within tree index = index of node under parent """ parent_map = {c:p for p in tree.iter() for c in p} parent = parent_map[node] return parent, list(parent).index(node) from_tree = ET.ElementTree(file='sample1.xml') to_tree = ET.ElementTree(file='sample2.xml') replace_node(from_tree, to_tree, 'car') # ET.dump(to_tree) to_tree.write('output.xml')
class A(): def __init__(self): self.var1 = 12 self.var2 = C() def start(self): self.var1=11 B(self) # pass this instance into the initialisation of B class B(): def __init__(self, a): self.a = a # save reference to the A() instance def doSomething(self): varXX = self.a.var2
role = models.ForeignKey(UserRole, on_delete=models.CASCADE, default=None, blank=True, db_column='roleid')
converts_time = time.strftime("%I").lstrip('0') + str(":") + str(stop_time.split(":")[0]) + time.strftime("%p")
subjects = [allmyfilenames] for subj in subjects: with open('C:/%s.txt' %subj, 'r') as datafile: data = json.load(datafile) if data[0]['parameter']['mean'] > 0.5: print subj
d = self.monster_deaths.pop(...) print("{}! The {} {} {}".format(self.monster.battlecry(), self.monster.color, type(self.monster).name, d))
@app.route('/index') def index(): form = AddExpenses() allnames = getSalesman() form.salesperson.choices = [names for names in allnames] ...
import inspect def first(): return second() def second(): return inspect.getouterframes( inspect.currentframe() )[1] first()[3] # 'first'
>>> a.join(pd.DataFrame({6: [1,2]})) 4 0 1 2 3 6 0 1 1 2 3 4 1 1 2 2 3 5 4 2 >>> a 4 0 1 2 3 0 1 1 2 3 4 1 2 2 3 5 4
using System.Diagnostics; Process p = new Process(); ProcessStartInfo pp = new ProcessStartInfo(); pp.Verb = "runas";//Invoke as Admin //Do other initialzation. p.StartInfo = pp; p.Start();
[names[0]] + [n for n in names[1:] if n != names[0]]
import numpy as np import pylab as plt X = np.linspace(0,5,100) Y1 = X + 2*np.random.random(X.shape) Y2 = X**2 + np.random.random(X.shape) plt.scatter(X,Y1,color='k') plt.scatter(X,Y2,color='g') plt.show()
def replace_score(file_name, line_num, text): f = open(file_name, 'r') contents = f.readlines() f.close() contents[line_num] = text+"\n" f = open(file_name, "w") contents = "".join(contents) f.write(contents) f.close() replace_score("file_path", 10, "replacing_text")
>>> from cStringIO import StringIO >>> f = StringIO('foo') >>> f.read() 'foo'
class FocusEmittingButton(QPushButton): #... def focusInEvent(self, event): # emit your signal
colNums = [0, 2, 6] to_write = [ col for i, col in enumerate(zip(*my_reader)) if i in colNums ]
# These are not needed in your view method username = form.clean_username() email = form.clean_email() password = form.clean_password2()
class Configuration(object): def __init__(self, config_parser): self.optionA = config_parser.get("root", "AProperty") self.optionB = config_parser.get("root", "BProperty") self.optionX = config_parser.get("root", "XProperty") @property def optionY(self): return self.optionX == 'something' and self.optionA > 10 class FooClass(object): def __init__(self, config): self._config = config def _foo_bar_method(self): some_property = self._config.optionY .... config = Configuration(config_parser) foo = FooClass(config)
df.groupby(['GridCode','DLang']).count().unstack().fillna(0) User_ID DLang ca en es ja zh GridCode 3 0 0 1 1 1 4 0 0 1 0 0 6 0 1 0 0 0 9 3 1 0 0 0
t_query = session.query(func.strftime('%Y-%m-%d', getattr(MyBaseClass, "period")), func.sum(getattr(MyBaseClass, "foo")), func.sum(getattr(MyBaseClass, "other_name") * getattr(MyBaseClass, "value_one")) )
month_abbreviations = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12} year = int(line[7:11]) month = month_abbreviations[line[3:6]] day = int(line[0:2]) hour = int(line[12:14]) minute = int(line[15:17]) second = int(line[18:20]) new_entry['time'] = datetime.datetime(year, month, day, hour, minute, second)
kill_list = [] try: while True: kill_list.append(1) except MemoryError: pass
import urllib2, sys def chunk_report(bytes_so_far, chunk_size, total_size): percent = float(bytes_so_far) / total_size percent = round(percent*100, 2) sys.stdout.write("Downloaded %d of %d bytes (%0.2f%%)\r" % (bytes_so_far, total_size, percent)) if bytes_so_far >= total_size: sys.stdout.write('\n') def chunk_read(response, chunk_size=8192, report_hook=None): total_size = response.info().getheader('Content-Length').strip() total_size = int(total_size) bytes_so_far = 0 while 1: chunk = response.read(chunk_size) bytes_so_far += len(chunk) if not chunk: break if report_hook: report_hook(bytes_so_far, chunk_size, total_size) return bytes_so_far if __name__ == '__main__': response = urllib2.urlopen('http://www.ebay.com'); chunk_read(response, report_hook=chunk_report)
#First you need to see what is the response for your login call login_response = s.login(username, password) print str(login_response) #if you wish to access some value in this response value = login_response.get("the_value", {the default value}) if value: #incase you want to make sure you logged in correctly json_response = s.add_friend(friend) print str(json_response)
-mapper '/usr/lib/python_2.7.3/bin/python mapper.py myargs'
MIDDLEWARE_CLASSES = ( '...', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.auth.middleware.RemoteUserMiddleware', '...', ) AUTHENTICATION_BACKENDS = ( 'django.contrib.auth.backends.RemoteUserBackend', )
x=["fizz","bear","fizz"] def fizz_count(x): count= 0 for e in x: if e=='fizz': count = count + 1 return count print fizz_count(x)
upper_frame.grid(row=0, column=0, sticky='ew') .. mylabel.grid(row=0, column=0, sticky='ew')
mail = email.message_from_string(email_body) for part in mail.walk(): c_type = part.get_content_type() c_disp = part.get('Content-Disposition') if c_type == 'text/plain' and c_disp == None: body = body + '\n' + part.get_payload() else: continue
import socket from multiprocessing import Process, Queue, Value from ctypes import c_bool HOST = '198.51.100.0' PORT = 8080 # This function will be run in a child process def update_proc(data_queue, update_queue, quit_flag): while not quit_flag.value: data = data_queue.get() # do something with the data... update_queue.put(data) print "Closing child update process" # This function will be run in a child process def activate_proc(update_queue, quit_flag): while not quit_flag.value: data = update_queue.get() # do something with the data... print "Closing child activate process" # main process begins execution here, if module is run from the terminal if __name__ == "__main__": # Connect to remote host over TCP client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((HOST,PORT)) # Set up a Queue to pass data to the update process, and another one # for the two children to communicate data_queue = Queue() update_queue = Queue() # The quit_flag Value is a *very* primitive way to signal the child # processes to quit. I'm sure there are better ways to do this, but I'm # tired and can't think of any right now. quit_flag = Value(c_bool, False) # Create two child processes, pass a reference to the Queue to each update = Process(target=update_proc, args=(data_queue, update_queue, quit_flag)) activate = Process(target=activate_proc, args=(update_queue, quit_flag)) update.start() activate.start() # Read data from the TCP socket, push it onto the data_queue while True: client.sendall("loc\n") data = client.recv(8192) if not data: print "network connection closed by client" break data_queue.put(data) # Join with child processes before closing print "All done, closing child processes" update.join() activate.join()
List2 = {' '.join(x) for x in List2} isct = set(List1) & List2
import re # must use raw strings for paths, otherwise we need to # escape \ characters input1 = r"C:\Users\sony\Desktop\PBUSH1.BDF" input2 = r"C:\Users\sony\Desktop\PBUSH2.BDF" with open(input1) as f1, open(input2) as f2: dat1 = f1.read() dat2 = f2.read() # use finditer instead of findall so that we will get # a match object for each match. # For each matching line we also have one subgroup, containing the # "PBUSH NNN " part, whereas the whole regex matches until # the next end of line matches = re.finditer('^(PBUSH\s+[0-9]+\s+).*$', dat1, flags=re.MULTILINE) for match in matches: # for each match we construct a regex that looks like # "^PBUSH 123 .*$", then replace all matches thereof # with the contents of the whole line dat2 = re.sub('^{}.*$'.format(match.group(1)), match.group(0), dat2, flags=re.MULTILINE) with open(input2, 'w') as outf: outf.write(dat2)
>>> u"\N{NO-BREAK SPACE}" u'\xa0'
from functools import wraps def require_auth(roles=(Roles.USER,), *args, **kwargs): def call(f, *args, **kwargs): return f(*args, **kwargs) def deco(f): @wraps(f) def wrapped_f(request, *a, **kw): # do your authentication here return call(f, request, *a, **kw) return wrapped_f return deco
from flask import Flask, jsonify, request app = Flask(__name__) @app.route("/") def hello(): all_args = request.args.lists() return jsonify(all_args)
from django.shortcuts import render from multiprocessing import Process import time def do_job(seconds): """ This is the function that will run your three-hour job. """ time.sleep(seconds) # just sleep to imitate a long job print 'done!' # will go to stdout, so you will see this # most easily in test on local server def test(request): """ This is your view. """ # In place of this comment, check the database. # If job already running, return appropriate template. p = Process(target=do_job, args=(15,)) # sleep for 15 seconds p.start() # but do not join message = 'Process started.' return render(request, 'test.html', {'message': message})
import webbrowser url = "https://www.google.com.tr/search?q={}".format("Raspberry Pi") b = webbrowser.get('lynx') b.open(url)
sum = np.zeros(len(data[0])) for vector in data[1:]: vector = map(float, vector) sum = np.add(vector, sum)
from django.forms import forms class MyBoundField(object): pass forms.BoundField = MyBoundField
def unique(*args): result = set() # A set guarantees the uniqueness of elements result = result.union(*args) # Include elements from all args result = list(result) # Convert the set object to a list return result
In [29]: dic = {'bob':[0,5,1], 'annie':[2,4,0], 'charles':[0,7,0]} In [30]: for k in sorted(dic.keys()): print k, max(dic[k]) ....: annie 4 bob 5 charles 7
>>> from datetime import datetime, timedelta >>> from pytz import timezone >>> import pytz >>> utc = pytz.utc >>> utc.zone 'UTC' >>> eastern = timezone('US/Eastern') >>> eastern.zone 'US/Eastern' >>> amsterdam = timezone('Europe/Amsterdam') >>> fmt = '%Y-%m-%d %H:%M:%S %Z%z' >>> loc_dt = eastern.localize(datetime(2002, 10, 27, 6, 0, 0)) >>> print loc_dt.strftime(fmt) 2002-10-27 06:00:00 EST-0500 >>> ams_dt = loc_dt.astimezone(amsterdam) >>> ams_dt.strftime(fmt) '2002-10-27 12:00:00 CET+0100'
class Group(models.Model): name = models.CharField(max_length=64) class User(models.Model): name = models.CharField(max_length=64) group = models.ForeignKey(Group) g = Group.objects.get(id=1) print g.user_set.all() # prints list of all users in the group
import csv with open('linklist.csv', 'rb') as input_file, \ open('Link Statements9.txt', 'w') as output_file: for row in csv.reader(input_file, delimiter=',', quoting=csv.QUOTE_NONE): link_name, from_unit, to_unit, rate = row output_file.write("Establish link %s at %s Kbps to Unit %s.\n" % (link_name, rate, to_unit)) output_file.write("Establish link %s at %s Kbps from Unit %s.\n" % (link_name, rate, from_unit))
for i, (entry, exit, met) in enumerate(t.stats): t.stats[i] = (entry, exit, 1)
simon@mymachine:~$ python Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) [GCC 4.4.3] on linux2 Type "help", "copyright", "credits" or "license" for more information. >>> import ufw >>> ufw.__file__ '/usr/lib/python2.6/dist-packages/ufw/__init__.pyc' >>>
context = {'books': Books.objets.all()}
import matplotlib, scipy fig = matplotlib.figure() ax = fig.add_axes([0.1,0.1,0.8,0.8]) axicon = fig.add_axes([0.4,0.4,0.1,0.1]) ax.plot(range(5), [4,2,3,5,1]) axicon.imshow(scipy.randn(100,100)) axicon.set_xticks([]) axicon.set_yticks([]) fig.show()
import sys import threading import unittest from unittest.mock import patch class T(threading.Thread): def __init__(self, *args, **kwargs): super(T, self).__init__(*args, **kwargs) self._interrupt = threading.Event() self.started = threading.Event() #Used to be sure that we test run() behavior self.started.clear() self.terminated = False def interrupt(self): self._interrupt.set() def run(self, *args, **kwargs): self._interrupt.clear() self.started.set() while not self._interrupt.is_set(): self._interrupt.wait(timeout=1) self.terminated = True sys.exit() class TestInterrupt(unittest.TestCase): @patch("sys.exit", side_effect=Exception("Ignore it... just close thread")) def test_interrupt(self, mock_sys_exit): t = T() t.start() if not t.started.is_set(): t.started.wait(timeout=0.2) self.assertTrue(t.started.is_set(), "t not started!") #Ok t is in run() main cycle: we can test interrupt t.interrupt() t.join(0.1) self.assertTrue(t.terminated) self.assertFalse(t.isAlive())
>>> d= {('ALEXANDER', 'MALE'): {'2010': ('2619', None), '2011': ('2494', None), '2009': ('2905', None)}} >>> for mainKey in d: print(mainKey) for key,val in d[mainKey].items(): print(key,val[0]) ('ALEXANDER', 'MALE') 2011 2494 2009 2905 2010 2619
import pexpect child = pexpect.spawn('ssh myname@host.example.com') child.expect('Password:') child.sendline(mypassword) child.interact()
>>> re.findall(r'\d+|[-+/*()]', infix) ['(', '22', '+', '33', ')', '*', '44', '/', '300']
#!/usr/bin/env bash COUNTER=$1 SERVER=$2 COMMAND="sudo reboot" SLEEP_DURATION=60 echo "Working on $SERVER $COUNTER times" while (( $COUNTER > 0 )); do ping -c 1 -t 5 $SERVER; _ping_r=$? if (( $_ping_r < 1 )); then echo "Rebooting $SERVER" ssh $SERVER $COMMAND; let COUNTER=COUNTER-1 else echo "Couldn't ping $SERVER. Taking a quick nap and trying again." sleep 5 fi sleep $SLEEP_DURATION; done echo "Done working on $SERVER"
while True: inp = raw_input("Enter a value between 1 and 10 million: ") if not inp.isdigit(): print "Must be an integer value!" continue # each of these continue statements acts like a "failed, try again" inp = int(inp) if inp < 1: print "Must be higher than 1" continue # same for this one if inp > 10000000: print "Must be less than 10.000.000" continue # and this one # execute the rest of the code
account_ids = [item.pk for item in group.accounts] accounts_not_in_group = UserAccount.objects(_id__nin=account_ids)
import timeit as tt lst_size = 10**5 # Set the percentages of input tried by user. percentages = {'ints': .10, 'floats': .10, 'strings': .80} assert 1 - sum(percentages.values()) < 0.00000001 ints_floats_strings = {k: int(v*lst_size) for k, v in percentages.items()} setup = """ import ast def f(x): try: float(x) except: pass def g(x): try: ast.literal_eval(x) except: pass l = [str(i) for i in range({ints})] l += [str(float(i)) for i in range({floats})] l += [']9' for _ in range({strings}//2)] + ['a' for _ in range({strings}//2)] """.format(**ints_floats_strings) stmt1 = """ for i in l: f(i) """ stmt2 = """ for i in l: g(i) """ reps = 10**1 t1 = tt.timeit(stmt1, setup, number=reps) t2 = tt.timeit(stmt2, setup, number=reps) print(t1) print(t2) print(t2/t1)
import time print hex(int(time.mktime(time.strptime('1999-12-31 15:00:00', '%Y-%m-%d %H:%M:%S'))) - time.timezone)
'{0:06b}'.format(63)
import matlplotlib is plt plt.plot([1000, 1001, 1002], [1, 2, 3]) plt.gca().get_xaxis().get_major_formatter().set_useOffset(False) plt.draw()
>>> lst = [6, 5, 4, 3, 2, 1] >>> variable = 3 >>> if variable == 3: del lst[1] >>> lst [6, 4, 3, 2, 1]
def foo3(a): return a * (a >= 5) foo3(4) => 0 foo3(6) => 6 foo3(np.array(3)) => 0 foo3(np.array(6)) => 6 foo3(np.array([1, 5])) => array([0, 5])
def toCSVLine(data): return ','.join(str(d) for d in data) lines = labelsAndPredictions.map(toCSVLine) lines.saveAsTextFile('hdfs://my-node:9000/tmp/labels-and-predictions.csv')
def get_initial(self): if request.GET.get('codereview-get'): initial = {'stream_name': 'TROI'} else: initial = {} return initial
>>> blah="ajsdlk akajl <ajksd@ajksldf.com>" >>> blah.split('<')[1].split('>')[0] 'ajksd@ajksldf.com'
>>> import time >>> time.clock() 0.11 >>> time.clock() 0.11 >>> time.clock() 0.11 >>> for x in xrange(100000000): pass ... >>> time.clock() 7.7800000000000002 >>> time.clock() 7.7800000000000002 >>> time.clock() 7.7800000000000002
lists = random.sample(x, 2) # now we swap two random elements between lists[0], lists[1]
class SQLiteAlchemy(SQLAlchemy): def apply_driver_hacks(self, app, info, options): options.update({ 'isolation_level': 'AUTOCOMMIT', 'encoding': 'latin1', 'echo': True }) super(SQLiteAlchemy, self).apply_driver_hacks(app, info, options) db = SQLiteAlchemy(app)
with open("hk_L1.ref") as f: data = numpy.array(f.read().split(), dtype=float).reshape(7000, 8)
import pygame pygame.init() screen = pygame.display.set_mode((800, 600), 0, 32) surface1 = pygame.Surface((100,100)) surface1.set_colorkey((0,0,0)) surface1.set_alpha(128) pygame.draw.circle(surface1, (0,255,0), (50,50), 50) surface2 = pygame.Surface((100,100)) surface2.set_colorkey((0,0,0)) surface2.set_alpha(128) pygame.draw.circle(surface2, (255,0,0), (50,50), 50) screen.blit(surface1, (100,100)) screen.blit(surface2, (120,120)) pygame.display.update() RUNNING = True while RUNNING: for event in pygame.event.get(): if event.type == pygame.QUIT: RUNNING = False pygame.quit()
In [8]: from bs4 import BeautifulSoup In [9]: tree = BeautifulSoup('<html><body><div>Foo</div><div>Bar</div><para>Some text.</para></body></html>', 'xml') In [10]: newpara = '<para>Some <emph type="bold">new</emph> text.</para>' In [11]: newpara = BeautifulSoup(newpara, 'xml') # here I use newpara.para as a shortcut to get the <para> element # as a new BeautifulSoup will include wrapping tags In [12]: tree.find('para', text='Some text.').replaceWith(newpara.para) Out[12]: <para>Some text.</para> In [13]: print tree <?xml version="1.0" encoding="utf-8"?> <html><body><div>Foo</div><div>Bar</div><para>Some <emph type="bold">new</emph> text.</para></body></html>
u'12.23.21.23'.encode('utf8')
>>> df.pivot_table(index=['A','B','C'], columns='F', values=['D','E']).stack(0) F 2013-01-01 2013-02-01 A B C one A bar D NaN -0.326106 E NaN -0.882319 foo D 0.147015 NaN E -0.121944 NaN B bar D 0.133723 NaN E 0.182735 NaN foo D NaN 0.158913 E NaN 0.365275 C bar D NaN 0.495230 E NaN 1.098515 foo D -0.624333 NaN E 0.214979 NaN three A bar D NaN 0.101431 E NaN -0.352368 B foo D NaN 0.405091 E NaN 0.389888 C bar D NaN 0.804457 E NaN -0.572397 two A foo D 0.127069 NaN E 0.105038 NaN B bar D -1.052195 NaN E 0.728630 NaN C foo D -0.643464 NaN E -0.440381 NaN
{% for device in form.devices.field.choices.queryset %} <input type="radio" name="devices" value="{{ device.pk }}" class="radio-device" {% ifequal form.devices.value device.pk %}checked{% endifequal %} /> {% endfor %}
import Tkinter as tk from guiLoop import guiLoop # https://gist.github.com/niccokunzmann/8673951#file-guiloop-py direction = 0 pos = 0 # the position should increase and decrease depending on left and right # I assume pos can be ... -3 -2 -1 0 1 2 3 ... @guiLoop def move_dir(): global pos while True: # edit 1: now looping always print 'moving', direction pos = pos + direction yield 0.5 # move once every 0.5 seconds def kp(event): global direction # edit 2 if event.keysym == 'Right': direction = 1 # right is positive elif event.keysym == 'Left': direction = -1 elif event.keysym == 'Space': direction = 0 # 0 is do not move elif event.keysym == 'Escape': root.destroy() def kr(event): global direction direction = 0 root = tk.Tk() print( "Press arrow key (Escape key to exit):" ) root.bind_all('<KeyPress>', kp) root.bind_all('<KeyRelease>', kr) move_dir(root) root.mainloop()
import numpy as np import matplotlib.pyplot as plt if __name__=='__main__': rows = 144 columns = 175 camera_image = np.loadtxt(r'path/to/filename') if(not camera_image.size == rows * columns): raise Exception('Size mismatch!') my_image = np.reshape(camera_image, (rows, columns)) / 255.0 figure = plt.figure() axes = figure.add_subplot(1, 1, 1) axes.imshow(my_image) plt.show()
def ff7_checksum(data): # data used to be 'qw' all_bits = 0xFFFF # a 16-bit value with all bits set. result = all_bits # result used to be 'r' pbit = 0x8000 # the highest-order bit in a 16-bit value. for byte in data: # byte used to be 't' result ^= byte << 8 for i in range(8): result = (result << 1) ^ (0x1021 if result & pbit else 0) result &= all_bits return result ^ all_bits # the original &-mask is not necessary
>>> regex = re.compile(ur""" ... ((?:\w+\s+)+?)((?:min|max|mon)\.?)? ... ([0-9., ]+)(%|[^\W\d_]+/[^\W\d_]+) ... """, re.X | re.I | re.U) >>> pprint(regex.findall(s)) [(u'vitamin a ', u'min.', u' 14,053 ', u'iu/kg'), (u'vitamin c ', u'', u'13,000', u'iu/kg'), (u'vitamin d ', u'max.', u' 10,000', u'\u03bc/kg'), (u'copper ', u'', u'1', u'mg/kg'), (u'vitamin e ', u'mon', u' 10.00', u'iu/kg')]
df['sex'] = df.sex.str.lower()
od = OrderedDict({i:i for i in range(4)}) # od = OrderedDict([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]) # Replace the key and value for key == 0: d = OrderedDict(('replace','key') if key == 0 else (key, value) for key, value in od.items()) # d = OrderedDict([('replace', 'key'), (1, 1), (2, 2), (3, 3), (4, 4)]) # Single value replaces are done easily: d[1] = 20 # and so on..
>>> import time >>> time.time() 1336296696.824 >>> _ 1336296696.824
for event in pygame.event.get(): if event.type == pygame.QUIT: sys.exit() elif event.type == KEYDOWN and event.key == K_ESCAPE: sys.exit() elif event.type == MOUSEBUTTONDOWN: click_position = event.pos if rock.point_collide(click_position): print('Clicked within the rock') clicks += 1 # Any other events that have to happen # when the rock is clicked
(filea,fileb).zipped.map((x,y)=> ((x.c_val+y.c_val)))
s = urllib2.urlopen("http://www.bing.com/search?" + urllib.urlencode({ 'q' : u'我爸是李刚' .encode('utf8') } )
import numpy as np from matplotlib import pyplot as plt from mpl_toolkits.mplot3d import Axes3D fig = plt.figure() ax = fig.add_subplot(111, projection='3d') x = np.linspace(-50,50,100) y = np.arange(25) X,Y = np.meshgrid(x,y) Z = np.zeros((len(y),len(x))) for i in range(len(y)): damp = (i/float(len(y)))**2 Z[i] = 5*damp*(1 - np.sqrt(np.abs(x/50))) Z[i] += np.random.uniform(0,.1,len(Z[i])) ax.plot_surface(X, Y, Z, rstride=1, cstride=1000, color='w', shade=False, lw=.5) ax.set_zlim(0, 5) ax.set_xlim(-51, 51) ax.set_zlabel("Intensity") ax.view_init(20,-120) plt.show()
def floatstrcmp(left, right): try: return cmp(float(left), float(right)) except ValueError: return cmp(left, right)
def func(self, args): defaultargs = (1, 2, 3) args = tuple(map(lambda x, y: y if y is not None else x, defaultargs, args))
In [170]: t="""Date_Time,Open,High,Low,Close,Volume 2015-05-21 15:30,2128.00,2132.00,2127.25,2128.50,160643 2015-05-21 14:30,2129.25,2130.25,2126.25,2128.25,68195 2015-05-21 13:30,2128.50,2129.50,2125.75,2129.00,59661 2015-05-21 12:30,2129.75,2130.75,2128.00,2128.25,40547 2015-05-21 11:30,2130.00,2130.50,2127.75,2129.50,73274""" ​ ESData=pd.read_csv(io.StringIO(t), index_col="Date_Time", parse_dates=[0]) df_initial_balance = ESData.between_time(start_time="12:30",end_time="14:30") df_initial_balance Out[170]: Open High Low Close Volume Date_Time 2015-05-21 14:30:00 2129.25 2130.25 2126.25 2128.25 68195 2015-05-21 13:30:00 2128.50 2129.50 2125.75 2129.00 59661 2015-05-21 12:30:00 2129.75 2130.75 2128.00 2128.25 40547
data = json.load(data_file) for obj in data: pprint(obj['objectId'])
cursor = arcpy.SearchCursor(my_table) for _ in cursor: count += 1 print count
class SomeContainer(object): def __iter__(self): for elem in self._datastructure: if elem.visible: yield elem.value
datetime_column = [datetime.datetime.strptime('{} {}'.format(d, t), '%Y-%m-%d %H:%M:%S') for d, t in zip(date, time)]
class Test(): def __init__(self): self.base = numpy.zeros(6) self.slice = slice(-3, self.base.size) self.view = self.base[self.slice] def __len__(self): return len(self.view) def update(self): self.view[0] += 1 def add(self): self.slice = slice(-len(self.view) - 1, self.base.size) self.view = self.base[self.slice] self.view[0] = 1 def __getstate__(self): return {'base': self.base, 'slice': self.slice} def __setstate__(self, state): self.base = state['base'] self.slice = state['slice'] self.view = self.base[self.slice] def __repr__(self): return str(self.view)
>>> def CleanVSSET_apply(x): # in my case CleanVSSET just returns the same values d = CleanVSSET(*x.values) r = d[0] r['Cleaned'] = d[1] return pd.Series(r) >>> >>> df_cleaned = df.apply(CleanVSSET_apply, axis=1) BP Cleaned Pain Pulse RR Temp 0 111/111 True 9 75 13 97.1 1 None True None None 18 98 2 164/87 True 6 79 15 None 3 120/72 True 5 77 18 97 >>> pd.merge(df, df_cleaned, left_index=True, right_index=True, suffixes=['', 'cleaned']) BP Pain Pulse RR Temp BP_cleaned Cleaned Pain_cleaned \ 0 111/111 9 75 13 97.1 111/111 True 9 1 None None None 18 98 None True None 2 164/87 6 79 15 None 164/87 True 6 3 120/72 5 77 18 97 120/72 True 5 Pulse_cleaned RR_cleaned Temp_cleaned 0 75 13 97.1 1 None 18 98 2 79 15 None 3 77 18 97
import argparse import os import glob version = "0.1.1" parser = argparse.ArgumentParser( description = 'cldir: clear a directory from .meta and other unwanted files') # arguments list parser.add_argument('-v', '--version', action='version', version = version) parser.add_argument('-d', '--directory', default=os.path.expanduser('~/downloads'), help='directory to be cleaned') parser.add_argument('-e', default='meta', help='extension') args = parser.parse_args() print(args) path = os.path.join(args.directory) files = glob.glob(path + '*.{}'.format(args.e)) if len(files) == 0: print('No .meta files found in ~/downloads') else: for f in files: os.remove(f) print('%d file(s) deleted' %len(files))
grouped_products = ['PLYC', 'PLYN'] gb = (df[df.PRODUCT.isin(grouped_products)] .groupby(['PERIOD', 'REGION2', 'REGION']) .sum() .reset_index()) gb['PRODUCT'] = 'PLY' result = pd.concat([gb, df.loc[~df.PRODUCT.isin(grouped_products), :]], ignore_index=True) result.set_index(['PERIOD', 'REGION2', 'REGION', 'PRODUCT'], inplace=True) >>> result.loc[:, ['Production', 'NSLOG', 'CHIPS', 'SSAW']] Production NSLOG CHIPS SSAW PERIOD REGION2 REGION PRODUCT 2010 FRANC cw_eu NaN 330 10.00 35.00 NaN 2011 FINLA n_eu NaN 1000 1.00 4.00 NaN FRANC cw_eu NaN 300 10.00 2.00 NaN 2010 AUSTR cw_eu CWC 248 57.04 78.78 NaN CWF 1017 NaN NaN 58.11 DissP 282 93.60 NaN 1056.00
> x = df.ix[[0]] > y = df.ix[[1]] > type(x) pandas.core.frame.DataFrame > type(y) pandas.core.frame.DataFrame
b = bytearray(your_byte_data) big_endian = (b[0] == 0x52) offset = 768 + big_endian current_orientation = b[offset] # get current orientation b[offset] = new_offset # set it to something new open('out_file', 'wb').write(b)
$string = 'my string' $encoded_string = md5($string);
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Float, UnicodeText, VARCHAR, NVARCHAR, TEXT, DATE, distinct, ForeignKey, Table import sqlalchemy from sqlalchemy.orm import sessionmaker, relationship from sqlalchemy.ext.declarative import declarative_base engine = create_engine("sqlite:///./P_case.db", echo=False) Session = sessionmaker( bind=engine ) session = Session() Base = declarative_base() metadata = Base.metadata ######################### class Bus(Base): __tablename__ = "bus_info" id = Column( Integer, primary_key = True ) ## Bus number = Column( Integer) metadata.create_all( engine ) ######################
def _partial_move_for(self, cr, uid, move): partial_move = { 'product_id' : move.product_id.id, # Add product description 'product_description' : move.name, 'quantity' : move.product_qty if move.state in ('assigned','draft','confirmed') else 0, 'product_uom' : move.product_uom.id, 'prodlot_id' : move.prodlot_id.id, 'move_id' : move.id, 'location_id' : move.location_id.id, 'location_dest_id' : move.location_dest_id.id, } return partial_move # Add the product description to the wizard. # The values get filled in from stock_partial_picking._partial_move_for class stock_partial_picking_line(osv.TransientModel): _inherit = "stock.partial.picking.line" _columns = { 'product_description': fields.char('Description'), }
objective = (price[channel_id] * is_channel_assigned[channel_id])
import random def die_roller(throws): """generates throws rolls of a die""" for _ in xrange(throws): yield random.randint(1, 6) roller = die_roller(10) print type(roller) # => <type 'generator'> print list(roller) # => [6, 6, 3, 1, 6, 3, 1, 5, 4, 4] print sum(roller) # roller was exhausted, generates null list thus 0 sum big_roller = die_roller(10**5) print sum(big_roller) # => 3500238
layout->setStretchFactor(label, 15) layout->setStretchFactor(line, 100)
@csrf_exempt def save(request): if request.method == 'POST': rawdata1 = request.body rawdata2 = json.loads(rawdata1) length = len(rawdata2) for i in range(0,length,1): x = meterdata(time_elapsed=rawdata2[i]['time_elapsed'], volts=rawdata2[i]['volts'], amps=rawdata2[i]['amps'], kW=rawdata2[i]['kW'], kWh=rawdata2[i]['kWh'], session=rawdata2[i]['session']) x.save() return HttpResponse("Success!")
from config.TestClass import TestClass TestClass.add_key( "mykey", "newvalue" )
awk '{print NR"."$1}' file 1.AAIT 2.AAL 3.AAME 4.AAOI 5.AAON
def getCbFun(queue): # closure def cbFun(snmpEngine,stateReference, contextEngineId, contextName, varBinds, cbCtx): ... queue.add(varBinds) ... return cbFun ... # Shared queue object queue = Queue() # Register SNMP Application at the SNMP engine ntfrcv.NotificationReceiver(snmpEngine, getCbFun(queue)) ...
import csv with open('desired-filename-here.csv', 'w', newline='') as csvfile: csvwriter = csv.writer(csvfile, delimiter=' ', quotechar='|', quoting=csv.QUOTE_MINIMAL) row_info = [productName.get_text(), productDesc.get_text(), productPrice.get_text()] csvwriter.writerow(row_info)
foreach (Process process in Process.GetProcesses().Where(p => p.ProcessName == "calc")) { process.Kill(); }
row = soup.find("tr", class_="soup-target") for text_node in row.find_all(text=True, recursive=False): text_node.extract()
sql = "INSERT INTO {} ({}) VALUES ({})".format(table, ','.join(columns), ','.join('[%s]' * len(columns))) # Generates: INSERT INTO my_table (column1,column2) VALUES (?,?) cursor.execute(sql, values)
elapsed_time = end - start if elapsed_time > 20: # code else: # other code
from txsni.snimap import SNIMap from txsni.tlsendpoint import TLSEndpoint from twisted.web.server import Site from twisted.web.static import Data from twisted.internet import reactor from twisted.internet.ssl import Certificate, KeyPair, PrivateCertificate from twisted.internet.endpoints import serverFromString def main(reactor): root = Data("", "text/plain") site = Site(root) def load(key_path, cert_path): with open(key_path) as key_file: key = KeyPair.loadPEM(key_file.read()) with open(cert_path) as cert_file: cert = cert.read() return PrivateCertificate.fromCertificateAndKeyPair(cert, key) snimap = SNIMap({ "DEFAULT": load('/etc/apache2/ssl/wc.key', '/etc/apache2/ssl/wc.crt').options(), "another.host.name": load(another_key, another_cert).options(), ... }) endpoint = TLSEndpoint(serverFromString(reactor, "tcp:80")) endpoint.listen(site) reactor.run()
import random for pixel in pic.get_pixels(): # Replace with appropiate way of getting the pixels if random.random() < 0.25: pixel.red = random.randint(256) pixel.green = random.randint(256) pixel.blue = random.randint(256)
import pygame pygame.init() screen = pygame.display.set_mode((490, 160)) font = pygame.font.SysFont('Arial', 150) pattern = pygame.image.load('t.bmp').convert() text = font.render('FooBar', True, (255, 255, 255), (0, 0, 0)) pattern.blit(text, (0, 0), special_flags = pygame.BLEND_MULT) screen.blit(pattern, (0, 0)) pygame.display.flip(); while True: if pygame.event.get(pygame.QUIT): break
list(glob.iglob('*'))
"{0}\"".format(str(round(x, 1) if x % 1 else int(x)))
In [205]: from pandas.io.json import json_normalize In [206]: data = [{'state': 'Florida', .....: 'shortname': 'FL', .....: 'info': { .....: 'governor': 'Rick Scott' .....: }, .....: 'counties': [{'name': 'Dade', 'population': 12345}, .....: {'name': 'Broward', 'population': 40000}, .....: {'name': 'Palm Beach', 'population': 60000}]}, .....: {'state': 'Ohio', .....: 'shortname': 'OH', .....: 'info': { .....: 'governor': 'John Kasich' .....: }, .....: 'counties': [{'name': 'Summit', 'population': 1234}, .....: {'name': 'Cuyahoga', 'population': 1337}]}] .....: In [207]: json_normalize(data, 'counties', ['state', 'shortname', ['info', 'governor']]) Out[207]: name population info.governor state shortname 0 Dade 12345 Rick Scott Florida FL 1 Broward 40000 Rick Scott Florida FL 2 Palm Beach 60000 Rick Scott Florida FL 3 Summit 1234 John Kasich Ohio OH 4 Cuyahoga 1337 John Kasich Ohio OH
>>> import glob >>> types = ('*.pdf', '*.cpp') # the tuple of file types >>> files_grabbed = [] >>> for files in types: ... files_grabbed.extend(glob.glob(files)) ... >>> files_grabbed # the list of pdf and cpp files
for line in fin1: for word in line.split():
import wx class TextFrame(wx.Frame): def __init__(self): wx.Frame.__init__(self, None, -1, 'Text Editor', size=(300, 250)) self.panel = wx.Panel(self, -1) self.multiText = wx.TextCtrl(self.panel, -1,"",size=(200, 100), style=wx.TE_MULTILINE|wx.EXPAND) sizer = wx.BoxSizer() sizer.Add(self.multiText, proportion=1, flag=wx.CENTER|wx.EXPAND) self.panel.SetSizer(sizer) self.CreateStatusBar() self.multiText.Bind(wx.EVT_KEY_UP, self.updateLineCol) self.multiText.Bind(wx.EVT_LEFT_DOWN, self.updateLineCol) def updateLineCol(self, event): #lineNum = len(self.multiText.GetRange( 0, self.multiText.GetInsertionPoint() ).split("\n")) l,c = self.multiText.PositionToXY(self.multiText.GetInsertionPoint()) stat = "col=%s, row=%s" % (l,c) self.StatusBar.SetStatusText(stat, number=0) event.Skip() app = wx.App(False) frame = TextFrame() frame.Show() app.MainLoop()
>>>re.findall(r'([\d:]*)([A-Z]+)\s*([A-Z]+)(?=</a>)','tabindex="1" >Game: Wild at Blackhawks 8:00PM ET</a>') >>>[('8:00', 'PM', 'ET')]
result_map = {} for item in response: if item['country'] is None: continue if item['country'] not in result_map: result_map[item['country']] = item['percent'] else: result_map[item['country']] += item['percent'] results = [ {'country': country, 'percent': percent} for country, percent in result_map.items() ]
for row in csv_doc: for cell in row: csv_array.append(cell)
import re expr = re.sub(r'\b' + ip + r'\b', "("+ip+".~"+ip+")", expr)
self.sensor = tk.BooleanVar() self.sensor.trace("w", self.on_sensor_change) ... def on_sensor_change(self, *args): print "the sensor changed:", self.sensor.get()
widget = QWidget() layout = QVBoxLayout() btn = QPushButton("To be removed") layout.addWidget(btn) widget.setLayout(layout) # later btn.setParent(None)
print df C1 C2 C3 C4 C5 0 1 1 1 1 4 1 1 2 1 2 5 2 1 1 3 1 4 print ~(df == 2) C1 C2 C3 C4 C5 0 True True True True True 1 True False True False True 2 True True True True True df = df.loc[:, ~(df == 2).any(axis=0)] print df C1 C3 C5 0 1 1 4 1 1 1 5 2 1 3 4 df = df.loc[~(df == 5).any(axis=1)] print df C1 C3 C5 0 1 1 4 2 1 3 4
for key,group in itertools.groupby(dirtup2,operator.itemgetter(2)): newlist=sorted(group,key=operator.itemgetter(1),reverse=True) tuple_with_max=newlist[0] print tuple_with_max
import urllib self.redirect("sites.htm?%s" % urllib.urlencode(dict(a="this and that", b="back and forth)))
No command 'pycclean' found, did you mean: Command 'py3clean' from package 'python3-minimal' (main) Command 'pyclean' from package 'python-minimal' (main) pycclean: command not found
[m for m in abc if 'on' in m]
obj_width = xmax - xmin obj_height = ymax - ymin if (obj_width / obj_height > ratio) { height_adjustment = ((obj_width / ratio) - (ymax - ymin)) / 2; ymin -= height_adjustment; ymax += height_adjustment; if (ymin < 0) { ymax -= ymin; ymin = 0; } if (ymax >= image_height) ymax = image_height - 1; } else if (obj_width / obj_height < ratio) { width_adjustment = ((obj_height * ratio) - (xmax - xmin)) / 2; xmin -= width_adjustment; xmax += width_adjustment; if (xmin < 0) { xmax -= xmin; xmin = 0; } if (xmax >= image_width) xmax = image_width - 1; }
import numpy as np import scipy as sp import scipy.stats def mean_confidence_interval(data, confidence=0.95): a = 1.0*np.array(data) n = len(a) m, se = np.mean(a), scipy.stats.sem(a) h = se * sp.stats.t._ppf((1+confidence)/2., n-1) return m, m-h, m+h
n = 8 n1 = 4 for x in itertools.combinations( xrange(n), n1 ) : print [ 1 if i in x else 0 for i in xrange(n) ] [1, 1, 1, 1, 0, 0, 0, 0] [1, 1, 1, 0, 1, 0, 0, 0] [1, 1, 1, 0, 0, 1, 0, 0] [1, 1, 1, 0, 0, 0, 1, 0] ... [0, 0, 0, 1, 1, 1, 0, 1] [0, 0, 0, 1, 1, 0, 1, 1] [0, 0, 0, 1, 0, 1, 1, 1] [0, 0, 0, 0, 1, 1, 1, 1]
import sendgrid sg = sendgrid.SendGridClient('sendgrid_apikey') message = sendgrid.Mail() message.add_to('John Doe <john@email.com>') message.set_subject('Example') message.set_html('Body') message.set_text('Body') message.set_from('Doe John <doe@email.com>') # This next section is all to do with Template Engine # You pass substitutions to your template like this message.add_substitution('-thing_to_sub-', 'Hello! I am in a template!') # Turn on the template option message.add_filter('templates', 'enable', '1') # Tell SendGrid which template to use message.add_filter('templates', 'template_id', 'TEMPLATE-ALPHA-NUMERIC-ID') # Get back a response and status status, msg = sg.send(message)
from BeautifulSoup import BeautifulSoup from django import template from django.template.defaultfilters import stringfilter import pygments import pygments.formatters import pygments.lexers register = template.Library() wanted = {'br': '<br />', 'BR': '<BR />', 'nbsp': '&nbsp;', 'NBSP': '&NBSP;', '/&gt;': ''} def uglyfilter(html): content = BeautifulSoup(html) for node in content.findAll('span'): data = ''.join(node.findAll(text=True)) if wanted.has_key(data): node.replaceWith(wanted.get(data)) return unicode(content) @register.filter @stringfilter def pygmentized(html): soup = BeautifulSoup(html) codeblocks = soup.findAll('pre') for block in codeblocks: if block.has_key('class'): try: code = ''.join([unicode(item) for item in block.contents]) lexer = pygments.lexers.get_lexer_by_name(block['class'], stripall=True) formatter = pygments.formatters.HtmlFormatter() code_hl = pygments.highlight(code, lexer, formatter) clean = uglyfilter(code_hl) block.contents = [BeautifulSoup(clean)] block.name = 'pre' except: raise return unicode(soup)
<for loop:> os.system('yes Y | <external command>')
with open ("data.txt", "r") as myfile: data=myfile.read().replace('\n', '')
#python 3 #from tkinter import * #from tkinter import ttk #python 2 from Tkinter import * import ttk import time import subprocess import paramiko import threading # keep track of widgets for event handlers widget_track = {} # event handler creates connect thread def connect_evt(): t = threading.Thread(target=connect) t.daemon = True t.start() widget_track['connect'].config(text="Connected", state="disabled", command=None) def connect(): time.sleep(5) # todo: temporary for test return ssh = paramiko.SSHClient() ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) ssh.connect('192.168.1.2', username='pi', password='raspberry') stdin, stdout, stderr = ssh.exec_command('cd') stdin, stdout, stderr = ssh.exec_command('roscore &') time.sleep(20) stdin, stdout, stderr = ssh.exec_command('\n') stdin, stdout, stderr = ssh.exec_command('cd scripts') stdin, stdout, stderr = ssh.exec_command('python /home/pi/scripts/listener2.py') return # event handler creates run thread def run_evt(): t = threading.Thread(target=run) t.daemon = True t.start() widget_track['run'].config(text="Running", state="disabled", command=None) def run(): time.sleep(5) # todo: temporary for test return stdin, stdout, stderr = ssh.exec_command('python ES96_Vivaldi/talker2.py') root = Tk() mainframe = ttk.Frame(root, padding="3 3 12 12") mainframe.grid(column=0, row=0, sticky=(N, W, E, S)) mainframe.columnconfigure(0, weight=1) mainframe.rowconfigure(0, weight=1) # connect button starts connect background thread btn = ttk.Button(mainframe, text="Connect", command=connect_evt) btn.grid(column=1, row=3, sticky=S) widget_track['connect'] = btn # run button start run background thread btn = ttk.Button(mainframe, text="Run", command=run_evt) btn.grid(column=3, row=3, sticky=S) widget_track['run'] = btn ttk.Label(mainframe, text="Click 'Connect' to establish link.").grid(column=1, row=1, sticky=W) ttk.Label(mainframe, text="Click 'Run' to control using the arrow keys").grid(column=1, row=2, sticky=W) for child in mainframe.winfo_children(): child.grid_configure(padx=5, pady=5) root.mainloop()
import sys; print sys.version import wx; print wx.version() class TestFrame(wx.Frame): def __init__(self): wx.Frame.__init__(self, None, -1, "hello frame") self.inspected = True self.txt = wx.TextCtrl(self, style=wx.TE_PROCESS_ENTER) self.txt.SetLabel("this box must contain the word 'hello' ") self.txt.Bind(wx.EVT_TEXT_ENTER, self.onEnter) self.txt.Bind(wx.EVT_KILL_FOCUS, self.onLostFocus) self.txt.Bind(wx.EVT_TEXT, self.onText) def onEnter(self, e): self.inspectText() def onLostFocus(self, e): self.inspectText() def onText(self, e): self.inspected = False def inspectText(self): if not self.inspected: self.inspected = not self.inspected if 'hello' not in self.txt.GetValue(): self.failedInspection() else: print "no need to inspect or warn user again" def failedInspection(self): dlg = wx.MessageDialog(self, "The word hello is required before hitting enter or changing focus", "Where's the hello?!", wx.OK | wx.CANCEL) result = dlg.ShowModal() dlg.Destroy() if result == wx.ID_OK: pass if result == wx.ID_CANCEL: self.txt.SetLabel("don't forget the 'hello' !") mySandbox = wx.App() myFrame = TestFrame() myFrame.Show() mySandbox.MainLoop() exit()
firefox[.exe] -CreateProfile <profile_name>
len_counts = [ (1, 24), # 24 1-length words (2, 39), # 39 2-length words ... ]
import os from win32com.client import GetObject os.startfile(r'C:\path\to\ReutersExcel.exe') xlApp = GetObject(None, 'Excel.Application')
from string import punctuation, whitespace import urllib2 import datetime import re from bs4 import BeautifulSoup as Soup today = datetime.date.today() html = urllib2.urlopen("http://www.99acres.com/property-in-velachery-chennai-south-ffid").read() soup = Soup(html) print "INSERT INTO Property (URL,Rooms, Place, Phonenumber1,Phonenumber2,Phonenumber3,Typeofperson, Name)" print "VALUES (" re_digit = re.compile('(\d+)') properties = soup.findAll('a', title=re.compile('Bedroom')) for eachproperty in soup.findAll('div', {'class':'sT'}): a = eachproperty.find('a', title=re.compile('Bedroom')) pdate = eachproperty.find('i', {'class':'pdate'}) pdates = re.sub('(\s{2,})', ' ', pdate.text) div = eachproperty.find('div', {'class': 'sT_disc grey'}) try: project = div.find('span').find('b').text.strip() except: project = 'No project' area = re.findall(re_digit, div.find('i', {'class': 'blk'}).text.strip()) print today,","+"http:/"+ (a['href'] if a else '')+",", (a.string if a else '')+ "," +",".join(re.findall("'([a-zA-Z0-9,\s]*)'", (a['onclick'] if a else '')))+","+ ", ".join([project] + area),","+pdates
train['Year'] = train.Dates.dt.year train['Month'] = train.Dates.dt.month
In [6]: df = pd.DataFrame({'a':randn(10), 'b':randn(10)}) df Out[6]: a b 0 -0.498370 0.350204 1 -0.484727 -0.977876 2 -0.319675 -0.781217 3 0.618511 0.416958 4 -0.834304 1.606860 5 0.768302 -0.394504 6 -0.033161 -1.539782 7 -0.062261 1.411695 8 -0.227656 -0.527440 9 0.843263 0.927568 In [7]: index = [0, 7, 8, 9] df[~df.index.isin(index)] Out[7]: a b 1 -0.484727 -0.977876 2 -0.319675 -0.781217 3 0.618511 0.416958 4 -0.834304 1.606860 5 0.768302 -0.394504 6 -0.033161 -1.539782
class mainWindow(QtGui.QWidget): def __init__(self): super(mainWindow, self).__init__() self.layout = QtGui.QVBoxLayout() self.label1 = QtGui.QLabel() self.label1.setText("Name") self.lineEdit1 = QtGui.QLineEdit() self.lineEdit1.setToolTip("This is a ToolTip") self.label2 = QtGui.QLabel() self.label2.setText("Age") self.lineEdit2 = QtGui.QLineEdit() self.lineEdit2.setToolTip("This is another ToolTip")
(i for i,v in enumerate(l) if MyString in i).next()
for n in range(15): if n == 100: print(n) break
for pkg in given_pkg: for module_or_class in pkg: for attribute in module_or_class:
class MyForm(forms.Form): def __init__(self, request, *args, **kwargs) self.request = request super(MyForm, self).__init__(*args, **kwargs) def clean(self): if not self.request.session.get('file_downloaded', False): raise ValidationError('File not downloaded!') def my_view(request): form = MyForm(request, data=request.POST)
subprocess.Popen(whatever, stdin=sys.stdout, stdout=sys.stdin)
for arry, name in zip(pglist, deptNames5): NewPdf = PdfFileWriter() for page in arry: pagenumber = pdfDoc.getPage(page) NewPdf.addPage(pagenumber) with open(name + b'.pdf', 'wb') as f: NewPdf.write(f)
-r req-1.txt -r req-2.txt
>>> from collections import Counter >>> myword = [{'a': 2}, {'b':3}, {'c':4}, {'a':1}] >>> c = Counter() >>> for d in myword: ... c.update(d) ... >>> [{key: value} for key, value in c.items()] [{'a': 3}, {'c': 4}, {'b': 3}] >>> [{key: value} for key, value in sorted(c.items())] [{'a': 3}, {'b': 3}, {'c': 4}]
>>> import difflib >>> s = difflib.SequenceMatcher(None, "GHSKWITNIFSI", "GHSKWAGDITNIFSI") >>> s.get_matching_blocks()[:-1] [(0, 0, 5), (5, 8, 7)] >>> s = difflib.SequenceMatcher(None, "GHSKWITNIFSI", "GHSKWITNIFSI") >>> s.get_matching_blocks()[:-1] [(0, 0, 12)]
from selenium import webdriver driver = webdriver.Firefox() while True: driver.get("http://www.nbe.gov.in/asr/neet_pdf/") if 'NEET-PG' in driver.title: break
sel.capture_entire_page_screenshot("entirePageScreenshot.png", "")
def __iter__(self): for k in self.keys(): yield k
def swap(a, i, j): a[i], a[j] = a[j], a[i] def permute(a, i, n): if i == n: print(a) return for j in range(i, n+1): swap(a, i, j) permute(a, i+1, n) swap(a, i, j) # backtrack def main(): a = list('ABC') permute(a, 0, 2) if __name__ == '__main__': main()
with open('myfile', 'r') as f: data = [line.split() for line in f]
def table_all(): for line in range(1,13): for table in range(1,13): print(line * table, end=" ") print("\n")
# Python_2 def copy_with_callback(sourceFile, destinationFile, callbackFunction): chunk = 4*1024 sourceSize = os.path.getsize(sourceFile) destSize = 0 with open(sourceFile, 'rb') as fSrc: with open(destinationFile, 'wb') as fDest: data = fSrc.read(chunk) if len(data) == 0: break fDest.write(data) destSize += len(data) callbackFunction(sourceSize, destSize) def example_callback_function(srcSize, dstSize): ''' Just an example with print. Your viewer code will vary ''' print 'Do something with these values:', srcSize, dstSize print 'Percent?', 100.0 * dstSize / srcSize def main(): src = '/tmp/A/path/to/a/file.txt' dest = '/tmp/Another/path/to/a/file.txt' copy_with_callback(src, dest, example_callback_function)
import Tkinter, random class BubbleFrame: def __init__(self, root): root.title("Math Bubbles") Tkinter.Button(root, text="Add Bubbles", width=8, command=self.bubble).pack() Tkinter.Button(root, text="Quit", width=8, command=quit).pack() self.canvas = Tkinter.Canvas(root, width=800, height=650, bg = '#afeeee') self.canvas.pack() self.bubbles = {} # this will hold bubbles ids, positions and velocities def bubble(self): # add bubbles for numbers from 1 to 20 for number in range(1, 20+1): xval = random.randint(5,765) yval = random.randint(5,615) s1 = self.canvas.create_oval(xval,yval,xval+30,yval+30, fill="#00ffff",outline="#00bfff",width=5) s2 = self.canvas.create_text(xval+15,yval+15, text=number) self.bubbles[(s1, s2)] = (xval, yval, 0, 0) # add bubbles to dictionary def loop(self, root): for (s1, s2), (x, y, dx, dy) in self.bubbles.items(): # update velocities and positions dx += random.randint(-1, 1) dy += random.randint(-1, 1) # dx and dy should not be too large dx, dy = max(-5, min(dx, 5)), max(-5, min(dy, 5)) # bounce off walls if not 0 < x < 770: dx = -dx if not 0 < y < 620: dy = -dy # apply new velocities self.canvas.move(s1, dx, dy) self.canvas.move(s2, dx, dy) self.bubbles[(s1, s2)] = (x + dx, y + dy, dx, dy) # have mainloop repeat this after 100 ms root.after(100, self.loop, root) if __name__ == "__main__": root = Tkinter.Tk() frame = BubbleFrame(root) frame.loop(root) root.mainloop()
print frame # player_id season_id game_id points mean_to_date #0 200 21999 29900007 10 0 #1 200 21999 29900023 20 0 #2 200 21200 29900042 10 0 #3 200 21200 29900059 20 0 #4 200 21200 29900081 30 0 #5 300 21999 29900089 10 0 #6 300 22111 29900108 10 0 #7 300 22111 29900118 20 0 #8 300 22111 29900143 30 0 frame['mean_to_date'] = frame.groupby(['player_id','season_id']).apply( lambda x: pd.expanding_mean(x['points'], 1).shift(1) .fillna(0)) .reset_index(drop=True) print frame # player_id season_id game_id points mean_to_date #0 200 21999 29900007 10 0 #1 200 21999 29900023 20 10 #2 200 21200 29900042 10 0 #3 200 21200 29900059 20 10 #4 200 21200 29900081 30 15 #5 300 21999 29900089 10 0 #6 300 22111 29900108 10 0 #7 300 22111 29900118 20 10 #8 300 22111 29900143 30 15
def __init__(self,parent,title,...): wx.Frame.__init__(self, parent, title=title, style=wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER) self.Bind(wx.EVT_CLOSE,self.OnClose) def OnClose(self,evt): print "CLOSE!!!" self.Destroy()
def multiply_digits(lst): res = [] for x in lst: if res and res[-1] * x < 10: res[-1] *= x else: res.append(x) return res
class Impl(Base): @ClassProperty @classmethod def foo(cls): return 5 In [11]: Impl.foo Out[11]: 5
$ cat test.py import os print os.fstat(0) == os.fstat(1) $ python test.py True $ python test.py > f $ cat f False $
>>> import sys >>> class Person(object): pass >>> list1 = [Person() for _ in range(5)] >>> sys.getrefcount(list1[0]) 2 # list1 and getrefcount >>> list2 = list1[:] >>> sys.getrefcount(list2[0]) 3 # list1, list2 and getrefcount >>> del list1 # or just reassign e.g. list1 = None >>> sys.getrefcount(list2[0]) 2 # list2 and getrefcount
def to_seconds(s): hr, min, sec = [float(x) for x in s.split(':')] return hr*3600 + min*60 + sec
from threading import Thread from Queue import Queue def produce(queue, n_items): for d in range(n_items): queue.put(d) print "put {0} in queue".format(d) def consume(queue, n_items): d = 0 while d != n_items -1: # You need some sort of stop condition d = queue.get() print "got {0} from queue".format(d) def start_producer_and_consumer(wait): q = Queue() consumer_thread = Thread(target = consume, args = (q, 10)) producer_thread = Thread(target = produce, args = (q, 10)) producer_thread.start() consumer_thread.start() if wait: producer_thread.join() consumer_thread.join() if __name__ == '__main__': start_producer_and_consumer(True)
def f(...): ... f = staticmethod(f) @staticmethod def f(...): ...
prompt = "> " decision = "What do you do?" not_assigned = "Say wa?" class Game: def __init__(self): self.bodySearched = False self.engine_room() def engine_room(self): print "You are in a dark room with the sound of moaning engines." print "You see a corridor to your left and one to your right and an elevator straight ahead of you." print decision self.choice = raw_input(prompt) if self.choice == "go left": self.viewing_room() elif self.choice == "go right": self.right_corridor_dead_end() elif self.choice == "use elevator": print "you get in the elevator and go up." self.main_hallway() else: print not_assigned self.engine_room() def right_corridor_dead_end(self): print "You walk down the corridor only to be blocked by a collapsed ceiling." print decision self.choice = raw_input(prompt) if choice == "go back": self.engine_room() else: print not_assigned def viewing_room(self): print "You walk down the corridor and enter and a large room with a window covering the size of the wall." print "Straight ahead is another door" print decision self.choice = raw_input(prompt) if not self.bodySearched: if self.choice == "open door": print "The door is locked" self.viewing_room() elif self.choice == "go back": self.engine_room() else: print not_assigned if self.bodySearched: if self.choice == "open door": print "The door opens you walk through" self.storage_room() else: print not_assigned self.viewing_room() def main_hallway(self): print "You enter a large brightly lit room with 3 rooms connected to it and another elevator straight ahead." print "The rooms are named, the two on the left are the armoury and lab rooms and to the right are the cabins." print decision self.choice = raw_input(prompt) if choice == "go to lab room": self.lab_room() elif choice == "go back": self.engine_room() def lab_room(self): print "You enter the lab room which is cluttered with unexplainable machines." print "To the back of the room you see the dead body of a man with no obvious cause" print "He might have something useful on him" print decision self.choice = raw_input(prompt) if self.choice == "search body": self.bodySearched = True print "You find a keycard that says 'storage' on it." self.lab_room() elif self.choice == "go back": self.main_hallway() newGame = Game()
def quickSrt(lst): if len(lst) < 2: return lst pivot = lst[0] l = quickSrt([x for x in lst[1:] if x < pivot]) r = quickSrt([x for x in lst[1:] if x >= pivot]) return l + [pivot] + r k = [1,2,3,5,3,1,6,3] d = {} for i in k: if i in d: d[i] += 1 else: d[i] = 1 values = [value for key, value in d.items()] val = quickSrt(values) for x,y in d.items(): if y == val[-1]: print(x)
opener = urllib.FancyURLopener({}) f = opener.open("http://london.mycompany/mydir/") f.read()
class MyModelAdmin(admin.ModelAdmin): list_display = ('get_sub_title',) def get_sub_title(self, obj): if obj.sub_title: return obj.sub_title else: return 'Not Available' get_sub_title.short_description = 'Subtitle'
>>> from collections import defaultdict >>> d = defaultdict(list) >>> l = [('admincases', 'test_case_6'), ('admincases', 'test_case_8'),('admincases1', 'test_case_8'),('admincases1', 'test_case_9'),('admincases1', 'test_case_10')] >>> for k,v in l: ... d[k].append(v) ... >>> d['admincases'] ['test_case_6', 'test_case_8']
In [1]: from collections import namedtuple In [2]: Foo = namedtuple('Foo', ['item1', 'item2'], verbose=False) In [3]: class ExtendedFoo(Foo): ...: def __hash__(self): ...: return hash(self.item1) * hash(self.item2) ...: In [4]: foo = ExtendedFoo(1, 2) In [5]: hash(foo) Out[5]: 2
value_to_find = 0.15 Min = df['A'] <= value_to_find Max = df['A'] >= value_to_find idx_Min = df.ix[Min, 'A'].idxmax() idx_Max = df.ix[Max, 'A'].idxmin() df.ix[idx_Min:idx_Max, ['A','B']] A B A 0.1 0.1 11 0.2 0.2 12
hourlist,minutelist,secondlist=[],[],[] f = open("newtext.txt", 'r') for line in f: line = line.strip() columns = line.split() time = columns[0] hourlist.append(int(time[0:2])) minutelist.append(int(time[2:4])) secondlist.append(int(time[4:6])) f.close() hour = int(time[0:2]) minute = int(time[2:4]) second = int(time[4:6]) print hourlist, minutelist,secondlist
for key in bucket.list(): akey = bucket.get_key(key.name) print akey.get_metadata("company")
mv server server.bk && mkdir server && awk -F, ' NR==FNR { map["server.bk/"$2".csv"]=$1; next } FNR==1 { close(out); out="server/"map[FILENAME]".csv"; print "date,"map[FILENAME] > out } { print > out } ' servers.csv server.bk/*.csv
from arcpy import mapping ## Load the map from disk mxdFilePath = "C:\\GIS_Maps_Folder\\MyMap.mxd" mapDoc = mapping.MapDocument(mxdFilePath) ## Load map elements dataFrame = mapping.ListDataFrames(mapDoc)[0] #assumes you want the first dataframe; you can also search by name mxdLayers = mapping.ListLayers(dataFrame) ## Adjust layers for layer in mxdLayers: if (layer.name == 'zip'): zip_lyr = layer elif(layer.name == 'sample_units'): labels_lyr = layer ## Print zip code map zip_lyr.visible = True zip_lyr.showLabels = True labels_lyr.visible = False labels_lyr.showLabels = False zip_path = "C:\\Output_Folder\\Zips.pdf" mapping.ExportToPDF(mapDoc, zip_path, layers_attributes="NONE", resolution=150) ## Print labels map zip_lyr.visible = False zip_lyr.showLabels = False labels_lyr.visible = True labels_lyr.showLabels = True labels_path = "C:\\Output_Folder\\Labels.pdf" mapping.ExportToPDF(mapDoc, labels_path, layers_attributes="NONE", resolution=150) ## Combine files (if desired) pdfDoc = mapping.PDFDocumentCreate("C:\\Output_Folder\\Output.pdf"") pdfDoc.appendPages(zip_path) pdfDoc.appendPages(labels_path) pdfDoc.saveAndClose()
import numpy import matplotlib.pyplot as plt #Random data data = numpy.random.random((10, 10)) #Set all data points equal to zero to NaN #data[data == 0.] = float("NaN") #Set single data value to nan data[2][2] = float("NaN") fig = plt.figure() ax = fig.add_subplot(1, 1, 1) ax.imshow(data, interpolation = "nearest") plt.show()
cv2.getPerspectiveTransform(src, dst)
>>> from itertools import product, combinations >>> lists = [['A', 'B'], ['1', '2'], ['x', 'y']] >>> for i in xrange(2, len(lists)+1): for c in combinations(lists, i): print list(product(*c)) ... [('A', '1'), ('A', '2'), ('B', '1'), ('B', '2')] [('A', 'x'), ('A', 'y'), ('B', 'x'), ('B', 'y')] [('1', 'x'), ('1', 'y'), ('2', 'x'), ('2', 'y')] [('A', '1', 'x'), ('A', '1', 'y'), ('A', '2', 'x'), ('A', '2', 'y'), ('B', '1', 'x'), ('B', '1', 'y'), ('B', '2', 'x'), ('B', '2', 'y')]
def __init__(self, init_dict, init_val=0): super().__init__() self.init_val = init_val self.update(init_dict) # Here init_dict is a dictionary or a dictionary like object
3>> print(mystery)
from PyQt4 import Qt, QtCore, QtGui import threading import socket import Queue import time # Object of this class has to be shared between # the two threads (Python and Qt one). # Qt thread calls 'connect', # Python thread calls 'emit'. # The slot corresponding to the emitted signal # will be called in Qt's thread. class SafeConnector: def __init__(self): self._rsock, self._wsock = socket.socketpair() self._queue = Queue.Queue() self._qt_object = QtCore.QObject() self._notifier = QtCore.QSocketNotifier(self._rsock.fileno(), QtCore.QSocketNotifier.Read) self._notifier.activated.connect(self._recv) def connect(self, signal, receiver): QtCore.QObject.connect(self._qt_object, signal, receiver) # should be called by Python thread def emit(self, signal, args): self._queue.put((signal, args)) self._wsock.send('!') # happens in Qt's main thread def _recv(self): self._rsock.recv(1) signal, args = self._queue.get() self._qt_object.emit(signal, args) class PythonThread(threading.Thread): def __init__(self, connector, *args, **kwargs): threading.Thread.__init__(self, *args, **kwargs) self.connector = connector self.daemon = True def emit_signal(self): self.connector.emit(QtCore.SIGNAL("test"), str(time.time())) def run(self): while True: time.sleep(1) self.emit_signal() if __name__ == '__main__': app = QtGui.QApplication([]) mainwin = QtGui.QMainWindow() label = QtGui.QLabel(mainwin) mainwin.setCentralWidget(label) connector = SafeConnector() python_thread = PythonThread(connector) connector.connect(QtCore.SIGNAL("test"), label.setText) python_thread.start() mainwin.show() app.exec_()
class SoapCall(object): def __init__(self): self.client = None self.response = None def setup_client(self): credentials = {'username': 'stuff', 'password': 'stuff'} url = 'stuff' t = HttpAuthenticated(**credentials) if self.client is None: self.client = suds.client.Client(url, transport=t) def use_client(self): if self.client is None: self.client = self.setup_client() self.response = self.client.service.whatever print self.response
git clone https://github.com/tangentlabs/django-oscar.git make sandbox python sites/sandbox/manage.py runserver
import os import sys from PySide import QtGui, QtCore class Example(QtGui.QWidget): def __init__(self): super(Example, self).__init__() self.initUI() def initUI(self): self.img_fold = r"C:\Users\abhishek.garg\Desktop\New folder" self.widget_layout = QtGui.QVBoxLayout(self) self.scrollarea = QtGui.QScrollArea() self.scrollarea.setWidgetResizable(True) self.widget_layout.addWidget(self.scrollarea) self.widget = QtGui.QWidget() self.layout = QtGui.QVBoxLayout(self.widget) self.scrollarea.setWidget(self.widget) self.layout.setAlignment(QtCore.Qt.AlignHCenter) for img in os.listdir(self.img_fold): img_path = os.path.join(self.img_fold, img) pixmap = QtGui.QPixmap(img_path) lbl = QtGui.QLabel(self) lbl.setPixmap(pixmap) self.layout.addWidget(lbl) self.setGeometry(300, 300, 280, 170) self.setWindowTitle('Image viewer') self.show() def main(): app = QtGui.QApplication(sys.argv) ex = Example() sys.exit(app.exec_()) if __name__ == '__main__': main()
>>> df['in'].groupby((df['in'] != df['in'].shift()).cumsum()).cumsum() 0 0 1 1 2 0 3 0 4 1 5 2 6 0 7 1 8 2 9 3 dtype: int64
>>> df.groupby(['ser_no', 'CTRY_NM']).date.agg( {'start_dt': min, 'end_dt': max, 'number_of_dt': 'count'}) number_of_dt start_dt end_dt ser_no CTRY_NM 1 a 2 2016-01-01 2016-01-02 b 1 2016-03-01 2016-03-01 2 a 1 2016-06-05 2016-06-05 b 1 2016-07-01 2016-07-01 e 2 2016-01-01 2016-01-02 3 b 2 2016-01-01 2016-01-02 d 1 2016-08-02 2016-08-02
>>> class MetaInit(type): def __call__(cls, *args, **kwargs): if args or kwargs: return super().__call__(*args, **kwargs) return cls.__new__(cls) >>> class String(metaclass=MetaInit): def __init__(self, string): self.__string = tuple(string.split()) self.__simple = tuple(self.__simple()) def __simple(self): letter = lambda s: ''.join(filter(lambda s: 'a' <= s <= 'z', s)) return filter(bool, map(letter, map(str.lower, self.__string))) def __eq__(self, other): assert isinstance(other, String) return self.__simple == other.__simple def __getitem__(self, key): assert isinstance(key, slice) string = String() string.__string = self.__string[key] string.__simple = self.__simple[key] return string def __iter__(self): return iter(self.__string) >>> String('Hello, world!')[1:] <__main__.String object at 0x02E78830> >>> _._String__string, _._String__simple (('world!',), ('world',)) >>>
child_pid = os.fork() if child_pid == 0: print "This is the child." sys.exit(0) print "This is the parent."
from datetime import timedelta FPS = 24.0 frame_count = 12345 td = timedelta(seconds=(frame_count / FPS)) >>> print td 0:08:34.375000
tree=et.fromstring(xml) for bad in tree.xpath("//fruit[@state=\'rotten\']"): bad.getparent().remove(bad) # here I grab the parent of the element to call the remove directly on it print et.tostring(tree, pretty_print=True, xml_declaration=True)
>>> [list(x) for x in output.split('\n')] [['S', '.', '#', '#', '.', '.', '.', '.', '.', '.'], ['#', '.', '#', '#', '.', '.', '#', '#', '#', '.'], ['#', '.', '#', '#', '#', '.', '#', '#', '#', '.'], ['#', '.', '.', '.', '.', '.', '#', '#', '#', '.'], ['#', '#', '#', '.', '#', '#', '#', '#', '#', 'S']]
from util import *
sum(1 for _ in iter(lambda: randint(0, 9), 5))
def anno_example(sigma, mu): Sample = np.random.normal(mu, sigma, 10000) figHS = plt.figure(figsize=(9,6)) axHS = figHS.add_subplot(1, 1, 1) n, histbins, patches = axHS.hist(Sample,100, histtype='step', normed=1) axHS.plot(histbins, plt.mlab.normpdf(histbins, mu, sigma)) axHS.annotate("$\mu=%.3f$ \n $\sigma=%.3f$ \n $N=%i$"% (Sample.mean(), Sample.std(), len(Sample)), xytext=(0.8, 0.85), bbox=dict(boxstyle="sawtooth", fc="w"), xy=(0.8, 0.85), xycoords=axHS.transAxes) axHS.annotate(" $\mu=%.3f$ \n $\sigma=%.3f$ \n $N=%s$"%(mu,sigma,"--"), xytext=(0.6, 0.85), bbox=dict(boxstyle="round", fc="w"), xy=(0.6, 0.85), xycoords=axHS.transAxes) anno_example(0.12, 0.5) anno_example(0.1, 0.3) anno_example(0.05, 0.2)
text = "$email = 'hello '.$user1_35.' we would like to annoy you '.$Tod-ay.' for 20 minutes.';" res = re.findall("'\.(\$[\w-]*)\.'", text) print res #['$user1_35', '$Tod-ay']
from itertools import tee, islice, izip A = [1.10,1.11,1.12,1.21,1.22,1.48] groups = izip(*[islice(el, n, None) for n, el in enumerate(tee(A, 3))]) print list(groups) # [(1.1, 1.11, 1.12), (1.11, 1.12, 1.21), (1.12, 1.21, 1.22), (1.21, 1.22, 1.48)]
cluster_to_tag = defaultdict(list) #May want to assert that length of tags and T is same for tag,cluster in zip(tags, T): cluster_to_tag[cluster].append(tag) #cluster_to_tag now maps cluster ti list of tags
re.findall(r"vcxproj.*?\{(.*?)\}", text)
<YourRule@BoxLayout>: text: 'something' # define a property to hold the button text, # could also be done in python Image: size_hint_x: None width: self.height # make it square source: 'whatever' Label: text_size: self.size # the text wrapping bounds text: root.text halign: 'left' Image: size_hint_x: None width: dp(10) source: 'right_arrow.png' # assuming you have a picture of the button arrow # you could also draw one manually with kivy canvas instructions
import datetime def getStatus(log_list, dt, tm): #filter the list log_list = [a_log_entry for a_log_entry in log_list if a_log_entry[0] == dt and a_log_entry[1] <= tm] #sort it log_list.sort(cmp=lambda x,y: cmp(x[1], y[1])) if log_list is []: return 'No status available for this day and time.' #pull out the status status_to_return = log_list[-1][2].split('_')[-1].strip() return status_to_return if __name__ == '__main__': in_file = open('a.log', 'rU') a_list = [] for line in in_file: if line.strip() is not '': #handle whitespace a_list.append(line.split(' ')) #convert string dates and times to datetime objects a_list = [ [datetime.datetime.strptime(el[0], '%d/%m/%Y'), datetime.datetime.strptime(el[1], '%H:%M:%S'), el[2]] for el in a_list] a_date = datetime.datetime(2010, 7, 15) a_time = datetime.datetime(1900, 1, 1, 16, 1, 0) print getStatus(a_list, a_date, a_time)
data = list(Data.objects.all().values('deviceId','payload'))
POINT pt; pt.x = 30; // This is your click coordinates pt.y = 30; HWND hWnd = WindowFromPoint(pt); LPARAM lParam = MAKELPARAM(pt.x, pt.y); PostMessage(hWnd, WM_RBUTTONDOWN, MK_RBUTTON, lParam); PostMessage(hWnd, WM_RBUTTONUP, MK_RBUTTON, lParam);
def my_func(foo): foo.append(3) # now the source list also has the number 3 foo = [3] # we've re-bound 'foo' to something else, severing the relationship foo.append(4) # the source list is unaffected return foo original = [1, 2] new = my_func(original) print original # [1, 2, 3] print new # [3, 4]
>grep -Inr SECRET_KEY * conf/global_settings.py:255:SECRET_KEY = '' conf/project_template/settings.py:61:SECRET_KEY = '' contrib/auth/tokens.py:54: hash = sha_constructor(settings.SECRET_KEY + unicode(user.id) + contrib/comments/forms.py:86: info = (content_type, object_pk, timestamp, settings.SECRET_KEY) contrib/formtools/utils.py:15: order, pickles the result with the SECRET_KEY setting, then takes an md5 contrib/formtools/utils.py:32: data.append(settings.SECRET_KEY) contrib/messages/storage/cookie.py:112: SECRET_KEY, modified to make it unique for the present purpose. contrib/messages/storage/cookie.py:114: key = 'django.contrib.messages' + settings.SECRET_KEY contrib/sessions/backends/base.py:89: pickled_md5 = md5_constructor(pickled + settings.SECRET_KEY).hexdigest() contrib/sessions/backends/base.py:95: if md5_constructor(pickled + settings.SECRET_KEY).hexdigest() != tamper_check: contrib/sessions/backends/base.py:134: # Use settings.SECRET_KEY as added salt. contrib/sessions/backends/base.py:143: settings.SECRET_KEY)).hexdigest() contrib/sessions/models.py:16: pickled_md5 = md5_constructor(pickled + settings.SECRET_KEY).hexdigest() contrib/sessions/models.py:59: if md5_constructor(pickled + settings.SECRET_KEY).hexdigest() != tamper_check: core/management/commands/startproject.py:32: # Create a random SECRET_KEY hash, and put it in the main settings. core/management/commands/startproject.py:37: settings_contents = re.sub(r"(?<=SECRET_KEY = ')'", secret_key + "'", settings_contents) middleware/csrf.py:38: % (randrange(0, _MAX_CSRF_KEY), settings.SECRET_KEY)).hexdigest() middleware/csrf.py:41: return md5_constructor(settings.SECRET_KEY + session_id).hexdigest()
>>> import sys, os >>> _stderr = sys.stderr >>> _stdout = sys.stdout >>> null = open(os.devnull,'wb') >>> sys.stdout = sys.stderr = null >>> print "Bleh" >>> sys.stderr = _stderr >>> sys.stdout = _stdout >>> print "Bleh" Bleh
table = Table('anExistingTable', Base.metadata, autoload=True, autoload_with=Session.bind) Extension = type('Extension', (BaseClass,), { '__table__' : table, '__mapper_args__' : { 'inherits': BaseClass, 'polymorphic_identity': 'extension' } })
class A(object): pass
import copy class A: def __init__(self): self.x = 1 def changeX(self,num): self.x = num class B: def __init__(self,classA): self.x = classA class C: def __init__(self,classA): self.x = classA def ChangeA(self,num): self.x.changeX(num) c_a = A() c_b = B(c_a) c_c = copy.deepcopy(C(c_a)) c_c.ChangeA(2) c_a.x #1 c_b.x.x #1 c_c.x.x #2
import subprocess with open("inputfile", "rb") as f: subprocess.call(f.read())
import datetime import calendar def validate_date(year, month, date): """Returns True if valid date else False""" try: datetime.datetime(year, month, date) return True except ValueError: return False
r""" \d{2}(?P<separator>[-:\s]?) \d{2}(?P=separator) \d{3}(?P=separator) \d{3}(?:(?P=separator)\d{4})?"""
print user_alias for user in user_alias: for row in Dict_list: if user in row.values(): print row UserIDs = [] # This is the change. for user in user_alias: for row in Dict_list: if row.has_key('_akq6p') and row.has_key('_cn6ca'): if user == row['_akq6p'] or user == row['_chk2m']: UserID = row['_cn6ca'] print UserID UserIDs.append(UserID) print UserIDs
In [1]: df = pd.DataFrame(columns = ['COL1', 'COL2']) In [2]: df.ix['test1'] = [20, 30] In [3]: df Out[3]: COL1 COL2 test1 20 30 [1 rows x 2 columns]
>>> d = {1:'a',2:'b'} >>> d[3] = d.pop(1) >>> d {2: 'b', 3: 'a'}
y, x = a.shape
print min(timeit.Timer(""" l =list() for i in range(5): l.append((A(),A(),A())) l[-1][0].s='foo' l[-1][1].s='foo2' for _ in sorted(l): pass print A.eq_calls print A.cmp_calls""", setup=setup).repeat(1, 1))
import lxml.html as html import mechanize br = mechanize.Browser() page = br.open("http://www.urbandictionary.com/") br.select_form(nr=0) br["term"] = "skid" br.submit() fragment = html.fromstring(br.response().read()) print fragment.find_class('definition')[0].text_content()
import _winreg key = _winreg.OpenKey( _winreg.HKEY_LOCAL_MACHINE, r"HARDWARE\DESCRIPTION\System\CentralProcessor\0") value, type = _winreg.QueryValueEx(key, "~MHz") print 'CPU speed is:', value
import datetime datetime.datetime.strptime('2011-12-11T22:37:18Z', '%Y-%m-%dT%H:%M:%SZ')`
In [8]: df2 = df2.rename(columns={'B':'A'}) In [9]: df1.combine_first(df2) Out[9]: A 12/1/14 3 12/2/14 20 12/2/14 20 12/3/14 2 12/4/14 30 12/6/14 5
class MyList(list): def last_index(self): return len(self)-1 >>> l=MyList([1, 2, 33, 51]) >>> l.last_index() 3
class MyList(list): #your stuff here def __getslice__(self, i, j): return MyList(list.__getslice__(self, i, j))
In [1]: import sympy as sp In [2]: x, y, z = sp.symbols('x, y, z') In [3]: rho, sigma, beta = sp.symbols('rho, sigma, beta') In [4]: f1 = sigma * (y - x) In [5]: f2 = x * (rho - z) - y In [6]: f3 = x * y - beta * z In [7]: sp.solvers.solve((f1, f2, f3), (x, y, z)) Out[7]: [(0, 0, 0), (-sqrt(beta*rho - beta), -sqrt(beta*(rho - 1)), rho - 1), (sqrt(beta*rho - beta), sqrt(beta*(rho - 1)), rho - 1)]
@pytest.yield_fixture def event(): ... yield <event_properties> @pytest.yield_fixture def listener(event): ... yield <listener_properties>
class foo(pygame.Surface): def __init__(self): pygame.Surface.__init__(self, (20, 20)) more_data = "You should be able to extend this class freely"
set1 = set((x.id,x.name,...) for x in list1) difference = [ x for x in list2 if (x.id,x.name,...) not in set1 ]
In [37]: a = np.array([calculate(a,b,c) for a,b,c in products]) np.savetxt(r'c:\data\lut.txt', a) In [39]: b = np.loadtxt(r'c:\data\lut.txt') np.all(a==b) Out[39]: True
py> import urlparse,socket py> p = urlparse.urlparse("http://stackoverflow.com/questions/1480183") py> p ('http', 'stackoverflow.com', '/questions/1480183', '', '', '') py> host=p[1] py> ai=socket.gethostbyname(host) py> socket.gethostbyname(host) '69.59.196.211'
pkts_rxd = [] def process_and_send(pkt): pkts_rxd.append(pkt) sendp(pkt, 'eth1') sniff(prn=process_and_send, iface='eth0', count=100)
from scipy.integrate import quad from math import sqrt from math import pi def x_max(y,r): return sqrt(r**2-y**2) def x_min(y,r): return max(-sqrt(r**2 - y**2), -sqrt(R**2 - y**2) + b) def y_max(r): if (R<b and b-R<r) or (R>b and b-R>r): return sqrt( R**2 - (R**2-r**2+b**2)**2/(4.*b**2) ) elif r+R<b: return 0. else: #r+b<R return r def z_max(): if R>b: return R else: return sqrt(2.*b*R - b**2) def delta_x(y, r): return x_max(y,r) - x_min(y,r) def int_xy(z): r = sqrt(R**2 - z**2) return quad(delta_x, 0., y_max(r), args=(r)) def int_xyz(): return quad(lambda z: int_xy(z)[0], 0., z_max()) R=1. Rprim=1. b=0.5 print 4*int_xyz()[0]
In [126]: class myint(int): def __add__(self,a): print "{0} plus {1}".format(self,a) .....: In [127]: a=myint(5) In [128]: b=myint(6) In [129]: a+b 5 plus 6
from time import sleep from threading import Thread def func(): your actual code code here if __name__ == '__main__': Thread(target = func).start() while True: sleep(1800) Thread(target = func).start()
for card in computer_hand[:]:
In [2]: '%.20f' % (3.3 + 1.1) Out[2]: '4.40000000000000035527'
import wx from wx.lib import sized_controls class MultiMessageFrame(sized_controls.SizedFrame): def __init__(self, *args, **kwargs): super(MultiMessageFrame, self).__init__(*args, **kwargs) pane = self.GetContentsPane() text_ctrl = wx.TextCtrl( pane, style=wx.TE_READONLY | wx.TE_CENTRE | wx.TE_MULTILINE) text_ctrl.SetSizerProps(proportion=1, expand=True) text_ctrl.SetBackgroundColour('White') self.text_ctrl = text_ctrl pane_btns = sized_controls.SizedPanel(pane) pane_btns.SetSizerType('horizontal') pane_btns.SetSizerProps(align='center') button_ok = wx.Button(pane_btns, wx.ID_OK) button_ok.Bind(wx.EVT_BUTTON, self.on_button_ok) def append_msg(self, title_text, msg_text): self.SetTitle(title_text) self.text_ctrl.AppendText(msg_text) def on_button_ok(self, event): self.Close() class MainFrame(sized_controls.SizedFrame): def __init__(self, *args, **kwargs): super(MainFrame, self).__init__(*args, **kwargs) self.SetInitialSize((800, 600)) self.CreateStatusBar() menubar = wx.MenuBar() self.SetMenuBar(menubar) menu_file = wx.Menu() menu_file.Append( wx.ID_NEW, 'Show msg', 'Add a new message to message frame') menubar.Append(menu_file, '&File') self.Bind(wx.EVT_MENU, self.on_new, id=wx.ID_NEW) self.count = 1 self.multi_message_frame = None def on_new(self, event): title_text = 'MultiMessageFrame already exists' if not self.multi_message_frame: title_text = 'Newly created MultiMessageFrame' self.multi_message_frame = MultiMessageFrame( self, style=wx.DEFAULT_FRAME_STYLE | wx.FRAME_FLOAT_ON_PARENT) self.multi_message_frame.Bind( wx.EVT_CLOSE, self.on_multi_message_frame_close) self.multi_message_frame.Center() self.multi_message_frame.Show() self.multi_message_frame.append_msg( title_text, 'message no.{}\n'.format(self.count)) self.count += 1 def on_multi_message_frame_close(self, event): self.multi_message_frame = None event.Skip() if __name__ == '__main__': app = wx.App(False) main_frame = MainFrame(None) main_frame.Show() app.MainLoop()
timer = core.CountdownTimer(TrialDuration) stepSize = 1 for eachPic in catPictures: prevPos = 0 # keeps track of the slider position rts=[] # used to keep track of what the latest reaction time was. Reset in the beginning of every trial. timer.reset() event.clearEvents() # get rid of other, unprocessed events while timer.getTime() > 0: for key, rt in event.getKeys(timeStamped=timer): # time keys to this clock rts += [rt] # add this reaction time to the list if key in ['escape']: core.quit() # quit if they press escape if key in ['b']: # add keypress to list for each keypress. then move cursor proportionally to length of this list prevPos+=stepSize if key in ['t']: prevPos-=stepSize # Log here instead of print print rts[-1]
def bubble_sort_2nd_value(tuples_list): NEWLIST = [] itemMoved=0 for i in tuples_list: NEWLIST.append(i) for i in range(len(NEWLIST)): for j in range(i+1, len(NEWLIST)): if(NEWLIST[j][1]<NEWLIST[i][1]): itemMoved=1 NEWLIST[j],NEWLIST[i] = NEWLIST[i],NEWLIST[j] if(itemMoved==0): print("None") else: print(NEWLIST) tuples_list = [("h1",1),("h2",2),("h3", 3), ("hi" , 4)] bubble_sort_2nd_value(tuples_list)
In [8]: l Out[8]: [['a', 'b', 'c'], ['b', '', ''], ['a', '', ''], ['a', 'c', 'd'], ['b', 'c', ''], ['b', 'c', '']] In [9]: [ filter(None, a) for a in l] Out[9]: [['a', 'b', 'c'], ['b'], ['a'], ['a', 'c', 'd'], ['b', 'c'], ['b', 'c']]
>>> q = Queue() >>> q.put(1) >>> q.queue deque([1])
In [47]: strs="4.500000+1 1.894719-3 4.600000+1 8.196721-3 4.700000+1 2.869539-3" In [48]: [float(x.replace("+","e+").replace("-","e-")) for x in strs.split()] Out[48]: [45.0, 0.001894719, 46.0, 0.008196721, 47.0, 0.002869539]
PermissionValidatorMap.objects.exclude( validator_set__in=ValidatorMetaData.objects.exclude(id__in=validator_list))
subprocess.Popen(['python3', '-m', 'path.to.python.file', '--option1=OPTION_VALUE'])
text(x, y, s, fontdict=None, **kwargs)
execl(file, *args) execle(file, *args, env) execlp(file, *args) execlpe(file, *args, env) execv(path, args) execve(path, args, env) execvp(file, args) execvpe(file, args, env)
import Tkinter as TK font = ('Times New Roman', 14, 'bold') font2 = ('Times New Roman',12, 'bold') class example3(TK.Toplevel): def __init__(self, parent): TK.Toplevel.__init__(self) self.geometry('380x100') self.parent=parent self.initalize() def initalize(self): self.grid() def restart(): self.parent.do_restart = True self.parent.destroy() Yes = TK.Button(self, text = 'Yes', font = font2, command = restart) Yes.grid(column = 0, row = 0, sticky = 'we', padx = (10, 10)) class example2(TK.Toplevel): def __init__(self, parent): TK.Toplevel.__init__(self) self.geometry('770x150') self.parent = parent self.initalize() def initalize(self): self.grid() #Creates Label Frame MstepOne = TK.LabelFrame(self, font = font2) MstepOne.grid(row=0, columnspan=7, sticky='w', padx=5, pady=5, ipadx=5, ipady=5) def gatherinfo2(): #self.destroy() #Not sure why your do this example3(self.parent) # You need to pass self.parent here #Creates Label MLabel1 = TK.Label(MstepOne, text = "First Name", font = font) MLabel1.grid(column = 2, row = 0, sticky = 'w', padx = (10, 10)) MLabel2 = TK.Label(MstepOne, text = "Last Name", font = font) MLabel2.grid(column = 4, row = 0, sticky = 'w', padx = (10, 10)) #Creates Button MSubmit = TK.Button(self, text = 'Submit', font = font2, command = gatherinfo2) MSubmit.grid(column = 3, row = 3, sticky = 'we', padx = (10, 10)) class example(TK.Tk): def __init__(self, parent): TK.Tk.__init__(self, parent) self.parent = parent self.do_restart=True self.initialize() def initialize(self): self.grid() def gatherinfo(): example2(self) def terminate(event=None): self.do_restart = False self.destroy() self.bind("<Escape>", terminate) # Press ESC to escape the program MSubmit = TK.Button(self, text = 'Submit', font = font2, command = gatherinfo) MSubmit.grid(column = 3, row = 3, sticky = 'we', padx = (10, 10)) def main(): do_loop = True # Loop so we can restart the program if not terminating it while do_loop: app = example(None) app.geometry('400x400') app.mainloop() do_loop = app.do_restart # Gets if we should restart or terminate if do_loop: print("Restarting") else: print("Terminating") if __name__ == '__main__': main()
a = models.Object1.get_or_create(f__pk=foreign_object_id)
output = StringIO.StringIO(r.content)
>>> import re >>> >>> l = ["2007 ford falcon xr8 ripcurl bf mkii utility 5.4l v8 cyl 6 sp manual bionic ", "2004 nissan x-trail ti 4x4 t30 4d wagon 2.5l 4 cyl 5 sp manual twilight ", "2002 subaru liberty rx my03 4d sedan 2.5l 4 cyl 5 sp manual silver"] >>> for item in l: ... print(re.sub(r"(\b[0-9.]+l\b|\d+d (?:wagon|sedan)).*$", "", item)) ... 2007 ford falcon xr8 ripcurl bf mkii utility 2004 nissan x-trail ti 4x4 t30 2002 subaru liberty rx my03
soup.find(text=u'Prévu')
def prime_list(X, Y): Z = [] while X <= Y: if is_prime(X): Z.append(X) X = X + 1 return Z
[WordsUsed.index(word) for word in Phrase]
df.pivot(index='date', columns='variable', values='value')
import re t1 = 'Hilary Clinton' t2 = 'Clinton, Hilary' re.search(r'(?:\s?Hilary()|\s?Clinton(),?){2}', t1) re.search(r'(?:\s?Hilary()|\s?Clinton(),?){2}', t2)
payload = request.json print payload #if using py3 print(payload)
initialize all menu variables draw menu pix and selections while a selection has not been made: look for key inputs (arrow keys/enter/esc) if down arrow pressed: move selection box to next option and note that the selection is on the next object down if up arrow pressed: move selection box to previous option and note that the selection is on the previous object up if escape pressed: quit the game if enter pressed: process which option in the menu was highlighted (quit of quit was selected, etc) and tell the while loop to stop update the display set up the game variables and such main while loop run the game and get an A+
>>> liste=[(0,1,45), (0,2,90), (0,3,60), (1,2,50), (1,3,20), (2,3,25)] >>> number_list=(0,2) >>> d = {str(x):[item for item in liste if x in item] for x in number_list} >>> d {'0': [(0, 1, 45), (0, 2, 90), (0, 3, 60)], '2': [(0, 2, 90), (1, 2, 50), (2, 3, 25)]}
poller = zmq.Poller() poller.register(sys.stdin, zmq.POLLIN) poller.register(mysocket, zmq.POLLIN) evts = dict(poller.poll(1000)) stdin_ready = evts.get(sys.stdin.fileno(), False) socket_ready = evts.get(mysocket, False)
class LRUCache2(LRUCache): def __init__(self, maxsize, missing=None, getsizeof=None, evict=None): LRUCache.__init__(self, maxsize, missing, getsizeof) self.__evict = evict def popitem(self): key, val = LRUCache.popitem(self) evict = self.__evict if evict: evict(key, val) return key, val
pagination_urls = ["http://google.com"] def oss(url): data = url return data for url in pagination_urls: data = oss(url) spider = data print spider
# To load only columns 1 (time), 19 (velocity x), and 21 (velocity z). numpy.loadtxt('data.csv', delimiter=',', usecols=(1,19,21))
>>> import re def count(s): return sum(1 for m in re.finditer(r'co.e', s)) ... >>> count('aaacodebbb') 1 >>> count('codexxcode') 2 >>> count('cozexxcope') 2
In [294]: pd.get_dummies(df, prefix=['A', 'D'], columns=['A', 'D']) Out[294]: B C A_x A_y D_j D_l 0 z 1 1.0 0.0 1.0 0.0 1 u 2 0.0 1.0 0.0 1.0 2 z 3 1.0 0.0 1.0 0.0
<span data-ng-repeat="field in fields"> {{ field.name.field_name }}<!-- this should print "date" at first --> : {{ field.name[field.name.field_name] }} <!-- this should print "00000" at first --> </span>
import random x = random.randint(0,10) y = 7 while x != y: print(x) #Print old (non-7) random number x = random.randint(0,10) #pick a new number. I hope it's 7 so we can end this madness print("You found {0}. Congrats. Go have a beer.".format(y))
import itertools mydict = {'a': 10, 'b': 20, 'c':30} result = [mydict[x] + mydict[y] for x, y in itertools.combinations(d, 2)]
docfile = instance.decoder(segments) response = HttpResponse() response.write(docfile) response['Content-Disposition'] = 'attachment; filename={0}'.format(file_name) return response
{'cursor': {'currentPageIndex': 0, 'estimatedResultCount': '168000000', 'moreResultsUrl': 'http://www.google.com/search?oe=utf8&ie=utf8&source=uds&start=0&hl=en&q=cars', 'pages': [{'label': 1, 'start': '0'}, {'label': 2, 'start': '4'}, {'label': 3, 'start': '8'}, {'label': 4, 'start': '12'}, {'label': 5, 'start': '16'}, {'label': 6, 'start': '20'}, {'label': 7, 'start': '24'}, {'label': 8, 'start': '28'}]}, 'results': [ <<list of 4 dicts>> ]}
var callbacks = { 'output': $.proxy(output_area.handle_output, output_area) };
wget --mirror -w 2 -p --html-extension --convert-links -P folder_to_save_to http://mysite.com
import numpy as np full = [line for line in open("foo4",'r').readlines() if not line.startswith("#")] datablocks = np.split(np.array(full), len(full)/4081) for block in datablocks: #lines is a dataset, sorted by first column lines = sorted(block, key= lambda line : int(line.split()[0])) print lines
import numpy as np import matplotlib.pyplot as plt fig,ax = plt.subplots(1) # Generate some random data hist1,bins1 = np.histogram(np.random.normal(2,1,1000),bins=np.arange(-2,8,0.5)) hist2,bins2 = np.histogram(np.random.normal(4,1,1000),bins=np.arange(0,10,0.5)) # 'step' draws the lines, 'bar' fills them ax.step(bins1[:-1],hist1,'k',linestyle='-',linewidth=2,where='post') ax.bar(bins1[:-1],hist1,width=0.5,linewidth=0,facecolor='k',alpha=0.3) ax.step(bins2[:-1],hist2,'k',linestyle='--',linewidth=2,where='post') ax.bar(bins2[:-1],hist2,width=0.5,linewidth=0,facecolor='k',alpha=0.1) plt.show()
log = [line.split(',') for line in open('log.csv')]
FilePath = 'temp' # replace the temp with your file path/name modifiedTime = os.path.getmtime(FilePath) timeStamp = datetime.datetime.fromtimestamp(modifiedTime).strftime("%b-%d-%y-%H:%M:%S") os.rename(FilePath,FilePath+"_"+timeStamp)
tk=Tk() tk.withdraw() def fileupload(): while True: uploadedfilenames = askopenfilenames(multiple=True) if uploadedfilenames == '': tkMessageBox.showinfo(message="File Upload has been cancelled program will stop") return uploadedfiles = tk.splitlist(uploadedfilenames) if len(uploadedfiles)!=2: tkMessageBox.showinfo(message="2 files have not been selected!") else: return uploadedfiles print fileupload()
N = 10000 # initialize an array of flags is_prime = [1 for num in xrange(N)] is_prime[0] = 0 # this is because indexing starts at zero is_prime[1] = 0 # one is not a prime, but don't mark all of its multiples! def set_prime(num): "num is a prime; set all of its multiples in is_prime to zero" for x in xrange(num*2, N, num): is_prime[x] = 0 # iterate over all integers up to N and update the is_prime array accordingly for num in xrange(N): if is_prime[num] == 1: set_prime(num) primes = [num for num in xrange(N) if is_prime[num]]
with open('100temp.txt') as in_file, open('new_100temp.txt', 'w') as out_file: for line1, line2, line3, line4 in grouper(in_file, 4): # modify 4 lines out_file.writelines([line1, line2, line3, line4])
#!/usr/bin/python #Access the registry to find out what plugins are available #list elements within a plugin #list all elements within a Klass from gi.repository import Gst Gst.init() reg = Gst.Registry.get() print "List Available Plugins\n" for x in reg.get_plugin_list(): print x.get_name() print "End Available Plugins\n" print "List Plugins in AudioVisual\n" for x in reg.get_feature_list_by_plugin("audiovisualizers"): print x.get_name(), "\t", x.get_longname() print "END\n" print "All Available visualisations\n" vis_list = [filt for filt in reg.get_feature_list(Gst.ElementFactory) \ if (filt.get_klass().find("Visualization") >= 0)] for x in vis_list: short = x.get_name() name = x.get_longname() print (short + "\t\t" + name) print "END\n" print "All Available Audio filters\n" audio_filter_list = [filt for filt in reg.get_feature_list(Gst.ElementFactory) \ if (filt.get_klass().find("Filter/Effect/Audio") >= 0)] for x in audio_filter_list: short = x.get_name() name = x.get_longname() print (short + "\t\t" + name) print "END\n"
Example: Using the httplib module to post data # File: httplib-example-2.py import httplib USER_AGENT = "httplib-example-2.py" def post(host, path, data, type=None): http = httplib.HTTP(host) # write header http.putrequest("PUT", path) http.putheader("User-Agent", USER_AGENT) http.putheader("Host", host) if type: http.putheader("Content-Type", type) http.putheader("Content-Length", str(len(data))) http.endheaders() # write body http.send(data) # get response errcode, errmsg, headers = http.getreply() if errcode != 200: raise Error(errcode, errmsg, headers) file = http.getfile() return file.read() if __name__ == "__main__": post("www.spam.egg", "/bacon.htm", "a piece of data", "text/plain")
import csv reader = csv.reader(open('IN.csv', 'r')) writer = csv.writer(open('OUT.csv', 'w') for row in reader: # do stuff to the row here # row is just a list of items writer.writerow(row)
import matplotlib import numpy as np import matplotlib.cm as cm import matplotlib.pyplot as plt from scipy.interpolate import interp2d # http://en.wikipedia.org/wiki/File:Bilininterp.png xi = np.array([0.0, 1.0]) yi = np.array([0.0, 1.0]) zi = np.array([[0.0, 1.0], [1.0, 0.5]]) # Another example xi = np.array([0.0, 0.25, 1.0]) yi = np.array([0.0, 0.75, 1.0]) zi = np.array([[0.0, 0.5, 1.0], [0.5, 0.7, 0.5], [1.0, 1.0, 1.0]]) # I want 20 "levels" to be shown contour_breaks = 20 ticks = np.linspace(zi.min(), zi.max(), contour_breaks, endpoint=True) # Attempt 4 (interp2d does to correct bilinear interpolation) fig = plt.figure() axes = fig.add_subplot(111, aspect='equal') f = interp2d(xi, yi, zi, kind='linear') xi2 = np.linspace(0., 1., 100) yi2 = np.linspace(0., 1., 100) zi2 = f(xi2, yi2) axes.contour(xi2, yi2, zi2, ticks[1:-1], colors='k') fill = axes.contourf(xi2, yi2, zi2, ticks, cmap=cm.jet) fig.colorbar(fill, ticks=ticks) # Show the plots plt.show()
import mechanize import lxml.etree as etree url = 'something' br = mechanize.Browser() resp = br.open(url) parser = etree.parser() tree = etree.parse(resp,parser) forms = list(br.forms()) id_info = {} for form in forms: elements = form.controls for element in elements: id_info[element.attrs['id']]='' inputs = tree.findall('.//input') for i in inputs: index = list(i.getparent()).index(i) id_info[i.attrib['id']] = list(i.getparent)[index+1] for j in id_info: print j,id_info(j)
from pandas import DataFrame df1 = DataFrame([[1]], columns=['a']) df2 = DataFrame([[3],[4]], columns=['b']) In [4]: df1 Out[4]: a 0 1 In [5]: df2 Out[5]: b 0 3 1 4 In [6]: df1.join(df2) Out[6]: a b 0 1 3 In [7]: df1.join(df2, how='outer') Out[7]: a b 0 1 3 1 NaN 4
class childclass(parentclass): def somefunction(self): with patch('somemodule.parentclass', childclass): super(childclass, self).somefunction()
filename = "NNa{0}b{1}.pk1".format(a,b) pickle.dump(nn, open(filename,'wb'))
In [78]: lst=[u'FACE 64: 48 49 50 51 52 54 64 74 84 94 104 \n'] In [79]: [int(i) for i in lst[0].split(':')[1].split()] Out[79]: [48, 49, 50, 51, 52, 54, 64, 74, 84, 94, 104]
import Tkinter as tk class Example(tk.Frame): def __init__(self, parent): tk.Frame.__init__(self, parent, borderwidth=1, relief="sunken") b = tk.Button(self, text="search", command=self.add_one) self.lb = tk.Listbox(self, borderwidth=0) self.lb.pack(fill="both", expand=True) vsb = tk.Scrollbar(self, orient="vertical", command=self.lb.yview) hsb = tk.Scrollbar(self, orient="horizontal", command=self.lb.xview) self.lb.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set) b.grid(row=0, column=0, columnspan=2) vsb.grid(row=1, column=1, sticky="ns") self.lb.grid(row=1, column=0, sticky="nsew") hsb.grid(row=2, column=0, sticky="ew") self.grid_rowconfigure(1, weight=1) self.grid_columnconfigure(0, weight=1) def add_one(self): self.lb.insert("end", "hello world!") if __name__ == "__main__": root = tk.Tk() Example(root).pack(fill="both", expand=True) root.mainloop()
""" This module implements Obj-C-style categories for classes for Python Copyright 2009 Ulrik Sverdrup <ulrik.sverdrup@gmail.com> License: Public domain """ def Category(toclass, clobber=False): """Return a class decorator that implements the decorated class' methods as a Category on the class @toclass if @clobber is not allowed, AttributeError will be raised when the decorated class already contains the same attribute. """ def decorator(cls): skip = set(("__dict__", "__module__", "__weakref__", "__doc__")) for attr in cls.__dict__: if attr in toclass.__dict__: if attr in skip: continue if not clobber: raise AttributeError("Category cannot override %s" % attr) setattr(toclass, attr, cls.__dict__[attr]) return cls return decorator
def my_sqrt(x): root1 = math.sqrt(x) root2 = -root1 return root1,root2
>>> import re >>> s = '<2006-12-20 00:10:24 Cattle is a tree>' >>> re.sub(r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} ', '', s) '<Cattle is a tree>'
def print_rect(l, w, c): for a in range(w): print(a*" ", l*c)
import pythoncom, pyHook def OnKeyboardEvent(event): print 'MessageName:',event.MessageName print 'Message:',event.Message print 'Time:',event.Time print 'Window:',event.Window print 'WindowName:',event.WindowName print 'Ascii:', event.Ascii, chr(event.Ascii) print 'Key:', event.Key print 'KeyID:', event.KeyID print 'ScanCode:', event.ScanCode print 'Extended:', event.Extended print 'Injected:', event.Injected print 'Alt', event.Alt print 'Transition', event.Transition print '---' # return True to pass the event to other handlers return True # create a hook manager hm = pyHook.HookManager() # watch for all mouse events hm.KeyDown = OnKeyboardEvent # set the hook hm.HookKeyboard() # wait forever pythoncom.PumpMessages()
FIELD_NAME_CHOICES = ( (1, Foo._meta.get_field('telephone_number')), (2, Foo._meta.get_field('name')), . . )
def supplier_default_product(region, supplier=None): if supplier is None: supplier = region.default_supplier.id default_product_instance = Product.objects.get(name=default_product, supplier=supplier)
class child(pandas.Panel4D): def __init__ (self, d=None): if isinstance(d, pandas.Panel4D): d = d._data super(child, self).__init__(d) else: super(child, self).__init__(d)
>>> re.match("^[a-zA-Z0-9_.-]+$", "hello") <_sre.SRE_Match object at 0xb7600250> >>> re.match("^[a-zA-Z0-9_.-]+$", " ") >>> print re.match("^[a-zA-Z0-9_.-]+$", " ") None
mylist = [('Item A','CA','10'),('Item B','CT','12'),('Item C','CA','14')] filtered_list = [item for item in mylist if item[1]=='CA']
x, y = np.random.rand(2, 1000) xbin = np.logspace(-1, 0, 101) ybin = np.logspace(-1, 0, 201) # raw bin counts counts, xe, ye = np.histogram2d(x, y, [xbin, ybin]) # size of each bin in x and y dimensions dx = np.diff(xbin) dy = np.diff(ybin) # compute the area of each bin using broadcasting area = dx[:, None] * dy # normalized counts manual_norm = counts / area / x.shape[0] # using normed=True counts_norm, xe, ye = np.histogram2d(x, y, [xbin, ybin], normed=True) print(np.allclose(manual_norm, counts_norm)) # True
import time import threading class App: def function1(self): pb = ttk.Progressbar(self.detail_frame1, orient='horizontal', mode='indeterminate') pb.pack() pb.start(1) #get the paper code of the paper to be checked input1 = self.input1.get() # system call based on the value of input1 t = threading.Thread(target=call, args="") t.start() self.function2() def function2(self): self.detail_frame1.pack_forget() self.detail_frame2.pack() def call(): time.sleep(2)
import gzip import io with io.TextIOWrapper(io.BufferedReader(gzip.open(filename))) as file: for line in file: print line,
def magicmethod(clazz, method): if method not in clazz.__dict__: # Not defined in clazz : inherited return 'inherited' elif hasattr(super(clazz), method): # Present in parent : overloaded return 'overloaded' else: # Not present in parent : newly defined return 'newly defined'
import sys from PIL import Image, ImageDraw class Region(): def __init__(self, x, y): self._pixels = [(x, y)] self._min_x = x self._max_x = x self._min_y = y self._max_y = y def add(self, x, y): self._pixels.append((x, y)) self._min_x = min(self._min_x, x) self._max_x = max(self._max_x, x) self._min_y = min(self._min_y, y) self._max_y = max(self._max_y, y) def box(self): return [(self._min_x, self._min_y), (self._max_x, self._max_y)] def find_regions(im): width, height = im.size regions = {} pixel_region = [[0 for y in range(height)] for x in range(width)] equivalences = {} n_regions = 0 #first pass. find regions. for x in xrange(width): for y in xrange(height): #look for a black pixel if im.getpixel((x, y)) == (0, 0, 0, 255): #BLACK # get the region number from north or west # or create new region region_n = pixel_region[x-1][y] if x > 0 else 0 region_w = pixel_region[x][y-1] if y > 0 else 0 max_region = max(region_n, region_w) if max_region > 0: #a neighbour already has a region #new region is the smallest > 0 new_region = min(filter(lambda i: i > 0, (region_n, region_w))) #update equivalences if max_region > new_region: if max_region in equivalences: equivalences[max_region].add(new_region) else: equivalences[max_region] = set((new_region, )) else: n_regions += 1 new_region = n_regions pixel_region[x][y] = new_region #Scan image again, assigning all equivalent regions the same region value. for x in xrange(width): for y in xrange(height): r = pixel_region[x][y] if r > 0: while r in equivalences: r = min(equivalences[r]) if not r in regions: regions[r] = Region(x, y) else: regions[r].add(x, y) return list(regions.itervalues()) def main(): im = Image.open(r"c:\users\personal\py\ocr\test.png") regions = find_regions(im) draw = ImageDraw.Draw(im) for r in regions: draw.rectangle(r.box(), outline=(255, 0, 0)) del draw #im.show() output = file("output.png", "wb") im.save(output) output.close() if __name__ == "__main__": main()
>>> [i for i in dir(__builtins__) if hasattr(getattr(__builtins__, i), "__add__")] ['False', 'True', '__debug__', '__doc__', '__name__', 'bool', 'bytearray', 'bytes', 'complex', 'float', 'int', 'list', 'str', 'tuple']
In [194]: cache = {} In [195]: df.groupby(lambda d: cache.setdefault(d.isocalendar()[:2], d)).agg(agg) Out[195]: close high low open volume 2012-02-13 0.3546 0.3592 0.3271 0.3476 648333934 2012-02-20 0.3575 0.3682 0.3524 0.3590 264673454
for column in array.T: some_function(column)
SELECT * FROM Timetable t WHERE in_dates = 0 OR ( in_dates = 1 AND EXISTS ( SELECT 1 FROM Dates d WHERE d.subject = t.subject AND d.date = t.date ) )
def format_Dollar_sign(list): lines=['book, 400.2\n', 'pen, 5\n', 'food, 200.5\n', 'gas, 20\n', 'food, 100\n', 'pen, 10\n', 'insurance, 171.35\n', 'gas, 35\n', 'book, 100\n', 'pen, 12\n', 'food, 320\n', 'gas,23.55\n', 'insurance, 110.25'] my_dictionary = {} for line in lines: item, price= line.strip().split(',') my_dictionary[item.strip()] = my_dictionary.get(item.strip(),0) + float(price) dic={} for k,v in my_dictionary.items(): dic[k]='${0:.2f}'.format(round(v,2)) L=([(k,v) for k, v in dic.iteritems()]) L.sort() return L print(format_Dollar_sign(list))
>>> import re >>> re.sub(r"(\w+) (\w+)", r"john \2", "Isaac Newton, physicist") 'john Newton, physicist'
import Tkinter as tk master = tk.Tk() variable = tk.StringVar(master) options = {"one": 1, "two": 2} tk.OptionMenu(master, variable, *options.keys()).pack() ... wanted = options[variable.get()]
allcolors = range(0xFFFFFF+1):
class node(object): def __init__(self, value, children = None): self.value = value self.children = children or [] self.parent = None for child in self.children: child.parent = self
from Queue import Queue import time import socket #wraps system ping command def ping(i, q): """Pings address""" while True: subnet = q.get() # each IP addresse in subnet for ip in (subnet=str(x) for x in range(1,254)): #print "Thread %s: Pinging %s" % (i, ip) result = subprocess.call("ping -n 1 %s" % ip, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT) #Avoid flooding the network with ping requests time.sleep(3) if result == 0: try: hostname=socket.gethostbyaddr(ip) print "%s (%s): alive" % (ip,hostname[0] except: print "%s: alive"%ip break q.task_done() num_threads = 100 queue = Queue() #Put all possible subnets on wireless network into a queue for i in range(1,255): queue.put('128.119.%s.'%i) #Spawn thread pool for i in range(num_threads): worker = Thread(target=ping, args=(i, queue)) worker.setDaemon(True) worker.start() #Wait until worker threads are done to exit queue.join()
class Event(models.Model): publicID = models.CharField(max_length=128) @property def time_data(self): origins= self.origin.all() return ' '.join([ str(x.time.value) for x in origins]) class EventsTable(tables.Table): time = tables.Column(accessor='time_data') class Meta: model = Event fields = ('time')
previous = lst[-1] # j = len(lst) - 1 for current in lst: # i = 0; i < len(lst); i++ print current, previous # lst[i], lst[j] # do stuff previous = current # j = i before incrementing
p = np.polyfit(np.log(xm), mcherryp, 1) ax1.semilogx(xm, p[0] * np.log(xm) + p[1], 'r-')
>>> urls = ['http://www.doopa.pl/1','http://www.doopa.pl/2', ... 'http://www.dupa2.pl/4/php.pl', 'http://www.dupa3.pl/4/php?gfdgfd=44', ... 'www.dupa4.pl/4/php.pl'] >>> from urlparse import urlparse >>> dict((urlparse(u).netloc, u) for u in urls).values() ['www.dupa4.pl/4/php.pl', 'http://www.dupa2.pl/4/php.pl', 'http://www.doopa.pl/2', 'http://www.dupa3.pl/4/php?gfdgfd=44']
class pdf(object): def __init__(self,path): self.S_Linc = [] self.Short_Legal = [] self.Title_Number = [] self.Legal_Description = [] operations, mostly appends onto the above variables ....
#!/usr/bin/env python
class Meta: unique_together = (('bar', 'name'),)
import re import urllib infile = open('test2.txt') outfile = open('test3.txt', 'w') pattern = r'"resource": "(?P<path>.+/(?P<filename>.+)\.jpg)"' replacement = '"resource": "../img/\g<filename>.jpg"' prog = re.compile(pattern) for line in infile: match = prog.match(line) if match: print (match.group('path')) text = prog.sub(replacement, line) outfile.write(text) infile.close() outfile.close
def your_view_function(request): # Function body your_view_function = login_required(your_view_function)
BLOCK_SIZE_BYTES = 512 # usually? always? *shrug* def get_disk_size(blockdev): blocks = int(open('/sys/block/{blockdev}/size'.format(**locals())).read()) return blocks * BLOCK_SIZE_BYTES
def add(request): # Do something return redirect('/register/')
class le: def __init__(self, n): self.sn = (n, 0.6), # ^ make self.sn a tuple of tuples in all cases class lf: def __init__(self, n, m, o): self.sn = (n, 0.7), (m, 0.8), (o, 0.9) l1 = le("Ka") l2 = le("La") l3 = lf("Ma","Na","Oa") theList = [l1, l2, l3] result = dict([tup for thing in theList for tup in thing.sn]) # result == {'Na': 0.8, 'Ka': 0.6, 'Ma': 0.7, 'Oa': 0.9, 'La': 0.6}
In [18]: df.columns.set_levels([df.columns.levels[0], ['a', 'b', 'c', 'd']]) print df strategy firm a b c d a b c d 0 2 1 NaN NaN NaN NaN NaN NaN NaN 3 1 1 NaN NaN 1 2 NaN NaN 4 3 1 NaN NaN 2 3 NaN NaN 5 NaN NaN 2 NaN 1 6 3 NaN 6 1 13 1 NaN 1 13 6 NaN 7 NaN 17 18 NaN 1 8 11 NaN 8 NaN 5 16 1 NaN 7 23 2 9 NaN 1 12 5 NaN NaN 6 5 10 NaN 1 NaN 2 NaN NaN NaN 1
var js_array = [{% for f in filelist %}"{{ f }}",{% endfor %}];
In [45]: names = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'] In [46]: df = pd.read_csv(StringIO(data), header=None, names=names) In [47]: mask = df.applymap(lambda x: x in ['X', 'XX', None, np.nan]) In [48]: df[-mask.any(axis=1)] Out[48]: <class 'pandas.core.frame.DataFrame'> Int64Index: 5 entries, 0 to 9 Data columns: a 5 non-null values b 5 non-null values c 5 non-null values d 5 non-null values e 5 non-null values f 5 non-null values g 5 non-null values h 5 non-null values i 5 non-null values j 4 non-null values k 5 non-null values l 5 non-null values dtypes: float64(6), int64(1), object(5)
def delete_keys_from_dict(dict_del, lst_keys): for k in lst_keys: try: del dict_del[k] except KeyError: pass for v in dict_del.values(): if isinstance(v, dict): delete_keys_from_dict(v, lst_keys) return dict_del
import re inp = 'data[0][value]=123&data[0][Type]=Range&data[1][value]=345&data[1][Type]=Fixed' matches = re.findall(r'\[([0-9]+)\]\[([a-zA-Z]+)\]=([a-zA-Z0-9]+)', inp) out = {} for match in matches: index, key, value = match if out.get(index) is None: out[index] = {} out[index][key] = value data = out.values()
from Tkinter import * import mp3play import tkFileDialog import Tkinter import tkFont import Tkinter as tk class musicplay: def __init__(self): self.music = None self.play_list = [] self.trackLocations = [] self.root = tk.Tk() self.root.title("EmoPlayer") self.root.configure(background='black') self.root.geometry('300x100+750+300') self.filename = Tkinter.StringVar() self.name = Tkinter.StringVar() self.play_list = Tkinter.StringVar() menubar = Menu(self.root) filemenu = Menu(menubar, tearoff=0, bg="black", fg="Orange") menubar.add_cascade(label='File', menu = filemenu) filemenu.add_command(label='Open', command = self.open_file) filemenu.add_separator() filemenu.add_command(label='Exit', command = self.Exit) self.root.config(menu=menubar) open_file = Button(self.root, width = 6, height = 1, text = 'Mood',fg='Orange', bg='black') open_file.grid(row=0, column=3) play_button = Button(self.root, width = 5, height = 1, text='Play', fg='Orange', command = self.play, bg="black") play_button.grid(row=0, column=0, sticky = W) stop_button = Button(self.root, width = 5, height = 1, text='Stop', fg='Orange', command = self.stop, bg="black") stop_button.grid(row=0, column=1, sticky = W) pause_button = Button(self.root, width = 5, height = 1, text='Pause', fg='Orange', command = self.pause, bg="black") pause_button.grid(row=0, column=2) self.volume_slider = Scale(self.root, label='Volume', orient = 'horizontal', fg = 'Orange', command = self.vol, bg="black") self.volume_slider.grid(row=0, column=4) file_name_label = Label(self.root, font=('Comic Sans', 8), fg = 'Orange', wraplength = 300, textvariable=self.name, bg="black") file_name_label.grid(row=3, column=0, columnspan=8) play_list_window = Toplevel(self.root, height = 150, width = 100) play_list_window.title("Playlist") self.play_list_display = Listbox(play_list_window, selectmode=EXTENDED, width = 50, bg="Dark Slate grey", fg="Orange") self.play_list_display.bind("<Double-Button-1>", self.tune_changed) self.play_list_display.pack() play_list_window.mainloop() self.root.mainloop() def open_file(self): """ Opens a dialog box to open .mp3 filemusic, then sends filename to file_name_label. """ self.filename.set(tkFileDialog.askopenfilename( defaultextension = ".mp3", filetypes=[("All Types", ".*"), ("MP3", ".mp3")])) self.playlist = self.filename.get() playlist_pieces = self.playlist.split("/") self.play_list.set (playlist_pieces[-1]) playl = self.play_list.get() self.play_list_display.insert(END, playl) print self.filename.get() self.music = mp3play.load(self.filename.get()) pieces = self.filename.get().split("/") self.trackLocations += [self.filename.get()] self.name.set(pieces[-1]) def play(self): """Plays the .mp3 file""" self.music.play() def stop(self): """Stops the .mp3 file""" self.music.stop() def pause(self): """Pauses or unpauses the .mp3 file""" if self.music.ispaused(): self.music.unpause() else: self.music.pause() def vol(self, event): """Allows volume to be changed with the slider""" v = Scale.get(self.volume_slider) try: self.music.volume(v) except: pass def tune_changed(self, event): idx = event.widget.curselection()[0] self.music = mp3play.load(self.trackLocations[int(idx)]) print ("Now playing %s" % event.widget.get(idx)) def Exit(self): exit() if __name__ == "__main__": musicplay()
import numpy as np row, col = 10, 5 matrix = np.random.randint(2, size=(row,col))
[ { "fields": { "first_name": "John", "last_name": "Doe", "middle_name": "G", "birthday": "1900-07-21", "password": "goforit123", "email": "John.Doe@gmail.com" }, "model": "account_data.user", "pk": 1 // This is the pk you have to use }, { "fields": { "user": 1, // Use the pk, in this case you're referencing to John Doe "type": "dog", "color": "blue" }, "model": "account_data.pets", "pk": 1 } ]
def analizarRT(): timeline = [] fileRT = openFile('rt.txt') for status in api.user_timeline('cnn', count='6'): timeline.append(status) for i in range(6): for b in range(6): if timeline[i].id == fileRT[b].id: pass else: newlist.append(timeline[i].id) print newlist
# When plotting initially, save the handle plot_handle, = self.map.plot(x,y,'ro') ... # When changing the data, change the xdata and ydata and redraw plot_handle.set_ydata(new_y) plot_handle.set_xdata(new_x) self.figure.canvas.draw()
$("#feedback").dialog({model:true, height: 250, width: 350, autoOpen:false, title:"Candidate Feedback", Buttons:{ 'Submit': function() { $("#myform").submit(); $(this).dialog('close'); /* submit = true; submitForm();*/ return true; } },
def multimap(value, f, count): for _ in range(count): value = f[value] yield value print(list(multimap('a', {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'a'}, 4)))
<select name="activity"> {% for activity in activities %} <option value="{{ activity }}">{{ activity }}</option> {% endfor %} </select>
>>> import re >>> re.sub(r"x(?=[^']*'([^']|'[^']*')*$)", "P", "axbx'cxdxe'fxgh'ixj'k") "axbx'cPdPe'fxgh'iPj'k"
import json f = sc.textFile('/path/to/file') d = lines.map(lambda line: json.loads(line))
#!/usr/bin/env python import sys from datetime import datetime known_systems = {'MIDRANGE_PROD', 'MIDRANGE_TEST'} try: date_string, system_string = sys.argv[1:] except ValueError: sys.exit('Usage: queue_cleaner <date> <system>') if system_string not in known_systems: sys.exit('wrong system, expected: %s, got: %r' % ( ' or '.join(known_systems), system_string)) try: input_date = datetime.strptime(date_string, '%Y%m%d').date() except ValueError: sys.exit('expected date in YYYYMMDD format, got: %r' % date_string)
>>> from dateutil.parser import parse >>> dt = parse('19981024103115+0100') >>> dt datetime.datetime(1998, 10, 24, 10, 31, 15, tzinfo=tzoffset(None, 3600)) >>> dt.utctimetuple() time.struct_time(tm_year=1998, tm_mon=10, tm_mday=24, tm_hour=9, tm_min=31, tm_sec=15, tm_wday=5, tm_yday=297, tm_isdst=0)
a = ephem.separation((panel_az, panel_alt), (sun_az, sun_alt)) print a
import re xml = re.sub(r'.*<root>', '<root>', xml, flags=re.DOTALL) # Remove leading junk xml = re.sub(r'\\par[^<]*<', '<', xml) # Middle junk xml = re.sub(r'</root>.*', '</root>', xml, flags=re.DOTALL) # Trailing junk
class MyModel(models.Model): # other fields my_file = models.FileField(upload_to='uploaddir') def save(self, *args, **kwargs): new_name = 'file_name-random-chars.ext' self.my_file.name = new_name super(MyModel, self).save(*args, **kwargs)
ax.set_position((left, bottom, width, height))
import Queue import threading, time class MyThread(threading.Thread): def __init__(self, theQueue=None): threading.Thread.__init__(self) self.theQueue=theQueue def run(self): while True: thing=self.theQueue.get() self.process(thing) self.theQueue.task_done() def process(self, thing): time.sleep(1) print 'processing %s'%thing queue=Queue.Queue() THINGS = ['Thing%02d'%i for i in range(101)] AVAILABLE_CPUS=3 for OneOf in range(AVAILABLE_CPUS): thread=MyThread(theQueue=queue) thread.start() # thread started. But since there are no tasks in Queue yet it is just waiting. for thing in THINGS: queue.put(thing) # as soon as task in added here one of available Threads picks it up
<body> <table> {%for row in a%} <tr style="margin:10px"> {%for item in row%} {%if forloop.counter == 3 %} <td style="margin:10px" class="marked">{{item}}</td> {%else%} <td style="margin:10px">{{item}}</td> {%endfor%} </tr> {%endfor%} </table> </body>
import matplotlib import matplotlib.mlab as mlab import matplotlib.cm as cm import matplotlib.pyplot as plt import numpy as np #%matplotlib inline delta = 0.00025 A=0 x = np.arange(0, 0.10, delta) y = np.arange(0, 0.1, delta) X, Y = np.meshgrid(x, y) Z = A*(X**2+Y**2)+2*X*Y manual_locations = [(0.1,0.1), (0.2,0.2), (0.3,0.3), (0.015, 0.015), (0.00255, 0.0025), (0.00005,0.00005)] line_widths = (1, 1, 1, 1, 1, 1) plt.figure() CS = plt.contour(X, Y, Z, 6, # add 6 contour lines linewidths=line_widths, #levels=np.linspace(0, .003, 20)) levels=np.logspace(-5, -2, 20)) plt.clabel(CS, inline=1, # add labels fontsize=10, fmt="%.5f") plt.title('Indifference Map') # title plt.show()
df1 = df.resample(rule='5Min',how='last',closed='left').reset_index().fillna(method='ffill') df2 = df.resample(rule='5Min',how='first',closed='left').reset_index().fillna(method='ffill') dt = df1.datetime - df2.datetime px_fld = df1.price + ...
>>> import pysodium Traceback (most recent call last): File "<stdin>", line 1, in <module> File "/Library/Python/2.7/site-packages/pysodium/__init__.py", line 34, in <module> sodium.crypto_pwhash_scryptsalsa208sha256_strprefix.restype = ctypes.c_char_p File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ctypes/__init__.py", line 366, in __getattr__ func = self.__getitem__(name) File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ctypes/__init__.py", line 371, in __getitem__ func = self._FuncPtr((name_or_ordinal, self)) AttributeError: dlsym(RTLD_DEFAULT, crypto_pwhash_scryptsalsa208sha256_strprefix): symbol not found >>> import ctypes >>> import ctypes.util >>> >>> sodium = ctypes.cdll.LoadLibrary(ctypes.util.find_library('sodium') or ctypes.util.find_library('libsodium')) >>> sodium <CDLL 'None', handle fffffffffffffffe at 103e967d0> >>> ctypes.util.find_library('libsodium') >>> ctypes.util.find_library('sodium')
fig, axes = plt.subplots(2, 2, figsize=(8,6), sharex=True) for ax, plot in zip(axes.flat, plots): ax.plot(df.index, df[plot]) ma = pd.rolling_mean(df[plot], window) ax.plot(df.index, ma) mstd = pd.rolling_std(df[plot], window) ax.fill_between(df.index, ma - 2*mstd, ma + 2*mstd, color='b', alpha=0.1) ax.set_title(plot) ax.yaxis.set_major_formatter(FuncFormatter(lambda x, p: '{:.0f}'.format(x))) ax.xaxis.set_major_formatter(DateFormatter('%d-%H:%M')) # or '%d.%m.%y' fig.autofmt_xdate() # This will rotate the xticklabels by 30 degrees so that all dates are readable. fig.tight_layout() # no need to call this inside the loop.
#!/usr/bin/python import subprocess def asExec(ascript): osa = subprocess.Popen(['osascript', '-'], stdin=subprocess.PIPE, stdout=subprocess.PIPE) return osa.communicate(ascript)[0] def asConv(astr): astr = astr.replace('"', '" & quote & "') return '"{}"'.format(astr) def aScript(aspath): ascript = ''' set posixPath to POSIX path of {0} '''.format(asConv(aspath)) return ascript aliasPath = "Main HD:Users:sasha:Documents:SomeText.txt" print(asExec(aScript(aliasPath)))
from cStringIO import StringIO from PIL import Image, ImageOps, ImageDraw size = (591, 608) mask = Image.new('L', size, 0) draw = ImageDraw.Draw(mask) draw.rectangle((0, 0) + size, fill=255) # From base64 to PIL image_string = StringIO(my_image.decode('base64')) im = Image.open(image_string) output = ImageOps.fit(im, mask.size, centering=(0.5, 0.5)) output.putalpha(mask) # From PIL to base64 output2 = StringIO() output.save(output2, format='PNG') im_data = output2.getvalue() im_data = im_data.encode('base64') # data_url = 'data:image/png;base64,' + im_data.encode('base64')
from django.core import validators class StepTwoForm(forms.Form): number = forms.CharField() def __init__(self, *args, **kwargs): config = kwargs.pop('config', {}) super(StepTwoForm, self).__init__(*args, **kwargs) if 'MAX_LENGTH' in config: validator = validators.MaxLengthValidator(config['MAX_LENGTH']) self.fields['number'].validators.append(validator)
DECLARE @ TABLE (ID INT, start_date DATE, end_date DATE); INSERT @ VALUES (1,'2012-03-15','2012-04-02') , (1,'2012-04-05','2012-05-12') , (1, '2012-04-12', '2012-05-21') , (2, '2012-03-05', '2012-06-13') , (3, '2012-03-09', '2012-03-19') , (3, '2012-04-03', '2012-05-02') , (3, '2012-05-01', '2012-08-01') , (3, '2012-05-16', '2012-08-02') , (3, '2012-06-08', '2012-09-09'); WITH T AS ( SELECT id, start_date, end_date, RN FROM ( SELECT id, start_date, end_date, ROW_NUMBER() OVER (PARTITION BY id ORDER BY start_date) RN FROM @) S WHERE RN = 1 UNION ALL SELECT S.id , CASE WHEN DATEDIFF(dd, T.start_date, S.start_date) <= 31 THEN T.start_date ELSE S.start_date END , CASE WHEN DATEDIFF(dd, T.start_date, S.start_date) <= 31 THEN T.end_date ELSE S.end_date END , S.RN FROM ( SELECT id, start_date, end_date, ROW_NUMBER() OVER (PARTITION BY id ORDER BY start_date) RN FROM @) S JOIN T ON T.id = S.id WHERE S.RN = T.RN+1 ) SELECT id, start_date, end_date FROM T GROUP BY id, start_date, end_date;
countries = ['foo', 'bar', 'baz'] takes = [re.compile(r'of\s+(the)?\s*%s$' % (c), re.I) for c in countries] subs = [re.compile(r'%s$' % (c), re.I) for c in countries] def remove_country(s): for regex in takes: if regex.search(s): return s for regex in subs: s = regex.sub('', s) return s print remove_country('the bank of foo') print remove_country('the bank of the baz') print remove_country('the nation bar') ''' Output: the bank of foo the bank of the baz the nation '''
>>> import re >>> r = re.compile(r'(?<=L).*(?=L)') >>> def rep(m): return m.group().replace('.', '#') ... >>> zipped = (r.sub(rep, ''.join(x)) for x in zip(*chars)) >>> for x in zip(*zipped): print ''.join(x) ... .....U...... L...L.###### .S..#.#..... ....L.......
query = User.select(User, fn.Count(Tweet.id).alias('num_tweets')) for user in query: print user.username, user.num_tweets users = list(query)
import string replace_punctuation = string.maketrans(string.punctuation, ' '*len(string.punctuation)) text = text.translate(replace_punctuation)
from django.db import models from django.contrib.contenttypes.models import ContentType class BaseModel(models.Model): type = models.ForeignKey(ContentType,editable=False) # other base fields here def save(self,force_insert=False,force_update=False): if self.type_id is None: self.type = ContentType.objects.get_for_model(self.__class__) super(BaseModel,self).save(force_insert,force_update) def get_instance(self): return self.type.get_object_for_this_type(id=self.id)
>>> a='alRfflkafdfaeGlkAYEuRFSbbvvcbF' >>> import re >>> r=re.compile("[A-Z]{3}[a-z][A-Z]{3}") >>> r.findall(a) ['AYEuRFS']
x=np.array([3,4,5]) y=np.array([2,50,-1]) z=np.array([30,0,3]) mya = [x,y,z] maximum = np.amax(mya, axis=0) # maximum will store a list as [maximumofx, maximumofy, maximumofz] -> [30,50,5]
def main(): number = int(sys.argv[1]) # this line will fail if you pass an argument that's not an integer print(number) if __name__ == "__main__": main()
bin(ord('P')) # 0b1010000
[[False], [True], [True], [True]]
from java import io def saveObject(x, fname="object.bin"): outs = io.ObjectOutputStream(io.FileOutputStream(fname)) outs.writeObject(x) outs.close() def loadObject(fname="object.bin"): ins = io.ObjectInputStream(io.FileInputStream(fname)) x=ins.readObject() ins.close() return x
while not curr_node.nextSibling().isNull(): print curr_node, len(children) children.append(curr_node.nextSibling()) curr_node = curr_node.nextSibling()
%typemap(out) std::vector<std::vector<int>>& { for(int i = 0; i < $1->size(); ++i) { int subLength = $1->data()[i].size(); npy_intp dims[] = { subLength }; PyObject* temp = PyArray_SimpleNewFromData(1, dims, NPY_INT, $1->data()[i].data()); $result = SWIG_Python_AppendOutput($result, temp); } }
from selenium.webdriver.support.select import Select option_value = "Malicious E-mail" select_element = browser.find_element_by_xpath("//select[option[@value = '%s']]" % option_value) select = Select(select_element) select.select_by_value(option_value)
self.columnButton = \ gtk.TreeViewColumn ('Enabled', self.buttonRenderer, active = 0) # 0 is the tree store column index
import Tkinter color="red" default_color="white" def main(n=10): window = Tkinter.Tk() last_clicked = [None] for x in range(n): for y in range(n): b = Tkinter.Button(window, bg=default_color, activebackground=default_color) b.grid(column=x, row=y) # creating the callback with "b" as the default parameter bellow "freezes" its value pointing # to the button created in each run of the loop. b["command"] = lambda b=b: click(b, last_clicked) return window def click(button, last_clicked): if last_clicked[0]: last_clicked[0]["bg"] = default_color last_clicked[0]["activebackground"] = default_color button["bg"] = color button["activebackground"] = color last_clicked[0] = button w = main() Tkinter.mainloop()
import mechanize store_url = 'http://store.nike.com' cart_url = 'http://store.nike.com/us/services/jcartService?callback=nike_Cart_hanleJCartResponse&action=addItem&lang_locale=en_US&country=US&catalogId=1&productId=463712&price=00.0&siteId=null&line1=Nike+Air+Max+1+Ultra+Moire&line2=Men%27s+Shoe&passcode=null&sizeType=null&skuAndSize=10661133%3A10&qty=1&rt=json&view=3&skuId=10661133&displaySize=14&_=142655682313' br = mechanize.Browser() response = br.open(store_url) response = br.open(cart_url) data = response.read() print data
h = "#a7bd7a" t = 167,189,122 "#%02x%02x%02x" % t # color tuple to hex string [int(h[i:i+2], 16) for i in range(1, len(h), 2)] # hex string to color tuple
import xml.etree.ElementTree as ET def to_parseable(tree): t = ET.tostring(tree) t = t.lower() return ET.fromstring(t)
string = "baggage" count = [0] * 256 # This should be big enough to hold counters for every 8 bit character for x in string: num_value = ord(x) count[num_value] += 1 for i in range(256): # loop through all the possible 8 numbers if count[i]: print chr(i)*count[i] # you can join them all back into a string like this newstr = ''.join(chr(i)*c for i,c in enumerate(count))
def parseAndEvaluate(exp): if gdb.VERSION.startswith("6.8.50.2009"): return gdb.parse_and_eval(exp) # Work around non-existing gdb.parse_and_eval as in released 7.0 gdb.execute("set logging redirect on") gdb.execute("set logging on") gdb.execute("print %s" % exp) gdb.execute("set logging off") return gdb.history(0)
class GenAsyncHandler2(tornado.web.RequestHandler): @tornado.web.asynchronous @tornado.gen.engine def get(self): http_client = AsyncHTTPClient() http_client.fetch("http://google.com", callback=(yield tornado.gen.Callback("google"))) http_client.fetch("http://python.org", callback=(yield tornado.gen.Callback("python"))) http_client.fetch("http://tornadoweb.org", callback=(yield tornado.gen.Callback("tornado"))) keys = set(["google", "tornado", "python"]) while keys: key, response = yield tornado.gen.WaitAny(keys) keys.remove(key) # do something with response self.write(str(key)+" ") self.flush() self.finish()
import Tkinter as tk class Testing(tk.LabelFrame): def __init__(self, parent, main): self.buttonWidth = 10 self.parent=parent self.main = main # save the instantiating class tk.LabelFrame.__init__(self, self.parent, text="Test Operations", padx=10, pady=10 ) self.taskButton = tk.Button( self, text="Do A Task", width=self.buttonWidth, command=self.doATask, ) self.taskButton.pack() def doATask(self): #want to execute function in Results.getResult() but don't know how self.main.results.getResult() #<--what you can do class Results(tk.LabelFrame): def __init__(self, parent, main): self.parent = parent self.main = main # save the instantiating class tk.LabelFrame.__init__(self, self.parent, text="Visual Results") self.resultLbl = tk.Label(self, text="Result") self.resultLbl.pack() def getResult(self): self.resultLbl.config(bg='yellow') class Application(tk.Frame): def __init__(self, parent): self.parent = parent tk.Frame.__init__(self, self.parent) self.testing = Testing(self.parent, self) self.results = Results(self.parent, self) self.testing.pack(fill=tk.X) self.results.pack(fill=tk.X) if __name__ == "__main__": root = tk.Tk() root.title("Modular GUI App") Application(root).pack() root.mainloop()
>>> from operator import mul >>> reduce(mul, [1, 2, 3], 1) 6
test = [[] for e in range(len(foobar)/2)]
import threading class MyApp(ttk.Frame): def __init__(self, master): ttk.Frame.__init__(self, master) fname = 'test.txt' self.build_ui() self.process_file(fname) def process_file(self, fname): self.show_progress(True) # Start thread to process file. self.thread = threading.Thread(target=self.process_file_worker, args=(fname,)) self.thread.daemon = True # Allow the program to terminate without waiting for the thread to finish. self.thread.start() # Start checking the thread. self.process_file_check() def process_file_check(self): if self.thread.is_alive(): # Thread is still running, check thread again in 10 milliseconds. self.after(10, self.process_file_check) else: # Thread finished, handle processed results. # Do something with `self.fdata`. self.show_progress(False) def process_file_worker(self, fname): # This is run inside the thread. fdata = self.read_file(fname) fdata = self.spellcheck(fdata) self.fdata = fdata def show_progress(self, start): if start: self.prog_win = tk.Toplevel() self.prog_win.title('Working...') self.prog_win.resizable(0, 0) self.progress_bar = ttk.Progressbar(self.prog_win, orient=tk.HORIZONTAL, mode='indeterminate', takefocus=True) self.progress_bar.grid() self.progress_bar.start() else: self.progress_bar.stop() self.prog_win.destroy() root = tk.Tk() root.update() gui = MyApp(root) gui.mainloop()
def qsort(inlist): if inlist == []: return [] else: pivot = inlist[0] lesser = qsort([x for x in inlist[1:] if x < pivot]) greater = qsort([x for x in inlist[1:] if x >= pivot]) return lesser + [pivot] + greater
img = Image() # any editing of 'img' img.save( 'mytiff.tif' )
ln -s $(brew --cellar python) ~/.pyenv/versions
from subprocess import Popen, PIPE args = ['/usr/bin/apachectl','configtest'] result = Popen(args,stdout=PIPE,stderr=PIPE).communicate() # result[0] will be the standard output, result[1] will be the stderr output
from lxml import etree xmlschema_doc = etree.parse('schema.xsd') xml_doc = etree.parse('my.xml') xmlschema = etree.XMLSchema(xmlschema_doc) if xmlschema.validate(xml_doc): print 'Valid xml' else: print 'Invalid xml'
In [1]: my_set = set(["a","b","c","d","z"]) In [2]: my_list=[{"a":0.5},{"c":0.6},{"b":0.9},{"z":0.5},{"m":0.0}] In [3]: [d for d in my_list if all(k in my_set for k in d)] Out[3]: [{'a': 0.5}, {'c': 0.6}, {'b': 0.9}, {'z': 0.5}]
def c_to_nex(self, event):#Hitting 'Return' on 'c' calls this, setting focus back to 'dirdisplay' treeview, giving focus to child immediately below what was originally clicked. #Do whatever with data in c print('Focus acknowledged') print(self.nextID)#Feedback to show me the nextID actually exists when I hit 'Return' self.dirdisplay.focus_set() self.dirdisplay.selection_set((self.nextID, self.nextID)) self.dirdisplay.focus(self.nextID)
child = pexpect.spawn('ftp ftp.openbsd.org') child.expect('(?i)name .*: ') child.sendline('anonymous') child.expect('(?i)password') child.sendline('pexpect@sourceforge.net') child.expect('ftp> ')
dialogStatus = dlg.ShowModal() if dialogStatus == wx.ID_OK: ...
import requests def tide_on(url): r = requests.get(url, stream=True, **kwargs) for line in r.iter_lines(): # wish to stop after consuming just one line print(line) break r.close()
([1, 2], [3, 4]) -> [1] + ([3, 4], [2]) ([3, 4], [2]) -> [3] + ([2], [4]) ([2], [4]) -> [2] + ([4], []) ([4], []) -> return [4] # lst2 is empty, return lst1 return [2] + [4] return [3] + [2, 4] return [1] + [3, 2, 4]
from os.path import basename, dirname import openpyxl def crearlista (*arg, **kw): inventario = openpyxl.Workbook(encoding = "Utf-8") sheet = inventario.active i = 1 for dirpath, subdirs, files in os.walk("//media//rayeus/Datos/Mis Documentos/Nueva carpeta/", topdown=False): file_dir = basename(dirpath) or dirname(basename(dirpath)) for name in files: sheet.cell(row=i, column=1).value = dirpath sheet.cell(row=i, column=2).value = file_dir sheet.cell(row=i, column=3).value = name i += 1
var loaded = true; for (var i = 0 ; loaded ; i++) { var div = 'contentDiv' + i; $(body).append('<div id=' + div + '></div>'); $('#contentDiv' + i).load('otherpage.html #' + div, function(response, status, xhr) { if (status == 'error') { loaded=false; }}); // assumes you have the #contentDiv[i] already in otherpage.html }
import csv from itertools import izip with open('source.csv') as f: reader = csv.reader(f) # filter data data = (row for row in reader if row[1].strip() in ('5', '8')) # make a new variable data = (row + [int(row[2]) * 3] for row in data) # transpose data data = izip(*data) # write data to a new csv file with open('destination.csv', 'w') as fw: csv.writer(fw).writerows(data)
p = subprocess.Popen(['path/to/long/runnning/process', 'arg1', 'arg2']) ... p.terminate() # kill the process.
import random import psutil # $ pip install psutil p = psutil.Process(random.choice(psutil.pids())) print(p.name()) print(p.cpu_times()) print(p.memory_info())
open("logfile.txt", "a")
keys = list(d.keys()) keys.sort(reverse=True) increased_k = keys[0] + 1 # use +1 to increment the largest key for k in keys: if k < new_key: break d[increased_k] = d[k] increased_k = k d[new_key] = new_value # insert the new item
d={'Alyssa':22, 'Char':25, 'Dan':25, 'Jeff':20, 'Kasey':20, 'Kim':20, 'Mogran':25, 'Ryan':25, 'Stef':22} import collections print collections.Counter(d.values()).most_common()[-1][0] 22
from itertools import islice, izip, cycle list_1 = ['a','b','c'] list_2 = [1,2] list(islice(izip(cycle(list_1), cycle(list_2)), len(list_1)*len(list_2)))
tn.expect([r"\w+ login: "])
import csv cursor = arcpy.InsertCursor(pointFC) with open('yourcsvfile.csv', 'rb') as csvfile: reader = csv.reader(csvfile) for row in reader: point = arcpy.CreateObject("Point") point.X, point.Y = float(row[5]), float(row[27]) # take the 6th and 28th columns from the row cursor.insertRow(point)
from collections import defaultdict input_list = [ "test00_take1_00001.dpx", "test00_take1_00002.dpx", "another_take_ver1-0001_3.dpx", "another_take_ver1-0002_3.dpx"] results_dict = defaultdict(lambda: defaultdict(list)) matches = (re.match(r"(.*?[\W_])\d+([\W_].*)", item) for item in input_list) for match in matches: results_dict[match.group(1)][match.group(2)].append(match.group(0)) results_list = [d2 for d1 in results_dict.values() for d2 in d1.values()] >>> results_list [['another_take_ver1-0001_3.dpx', 'another_take_ver1-0002_3.dpx'], ['test00_take 1_00001.dpx', 'test00_take1_00002.dpx']]
>>> print "foo\\nbar\\n\\tbaz" foo\nbar\n\tbaz >>> print "foo\\nbar\\n\\tbaz".decode('string_escape') foo bar baz
error = 0 while error < 2: try: motgift = spider_xml(motgift_url, extract_xml_item, motgift_xpath, motgift_pipeline, motgift_table, motgift_model break except: error += 1 sleep(10)
import re pnumber = re.sub("[^0-9]", "", input_number) if pnumber[0] == 1: pnumber = pnumber[1:]#strip 1st char if it's a 1 #insert the dashes if len(pnumber) == 10: pnumber = "%s-%s-%s" % (pnumber[:3],pnumber[3:6],pnumber[6:]) else: #throw error
import Tkinter import threading import Queue class GuiPart: def __init__(self, master, queue, endCommand): self.queue = queue # Do GUI set up here (i.e. draw progress bar) # This guy handles the queue contents def processIncoming(self): while self.queue.qsize(): try: # Get a value (email progress) from the queue progress = self.queue.get(0) # Update the progress bar here. except Queue.Empty: pass class ThreadedClient: # Launches the Gui and does the sending email task def __init__(self, master): self.master = master self.queue = Queue.Queue() # Set up the Gui, refer to code recipe self.gui = GuiPart(master, self.queue, ...) # Set up asynch thread (set flag to tell us we're running) self.running = 1 self.email_thread = threading.Thread(target = self.send_emails) self.email_thread.start() # Start checking the queue self.periodicCall() def periodicCall(self): # Checks contents of queue self.gui.processIncoming() # Wait X milliseconds, call this again... (see code recipe) def send_emails(self): # AKA "worker thread" while (self.running): # Send an email # Calculate the %age of email progress # Put this value in the queue! self.queue.put(value) # Eventually run out of emails to send. def endApplication(self): self.running = 0 root = Tkinter.Tk() client = ThreadedClient(root) root.mainloop()
from collections import defaultdict data = [['A','B','C','D','E'], ['A','B','C'], ['A','B','C','E'], ['C','D','E'], ['C','D','E','B','A']] characters = [i for j in data for i in j] counts = {} combinations = defaultdict(int) for character in set(characters): counts[character] = characters.count(character) for character2 in set(characters): for entry in data: combination = [character, character2] if "".join(combination) in "".join(entry): combinations[tuple(combination)] += 1 probability = {i: combinations[i]/float(counts[i[0]]) for i in combinations} probability {('A', 'B'): 0.75, ('B', 'A'): 0.25, ('B', 'C'): 0.75, ('C', 'D'): 0.6, ('C', 'E'): 0.2, ('D', 'E'): 1.0, ('E', 'B'): 0.25}
class TypedWriter: """ A CSV writer which will write rows to CSV file "f", which uses "fieldformats" to format fields. """ def __init__(self, f, fieldnames, fieldformats, **kwds): self.writer = csv.DictWriter(f, fieldnames, **kwds) self.formats = fieldformats def writerow(self, row): self.writer.writerow(dict((k, self.formats[k] % v) for k, v in row.iteritems())) def writerows(self, rows): for row in rows: self.writerow(row)
def _foreign_id_rel(Cls): return relationship( Cls, uselist=False, lazy=False, # This is just my use case, not needed primaryjoin=lambda: and_( Diff.foreign_table == Cls.__tablename__, foreign(Diff.foreign_id) == Cls.id, ), backref=backref( 'diffs', uselist=True, lazy=True, # This is just my use case, not needed primaryjoin=lambda: and_( Diff.foreign_table == Cls.__tablename__, foreign(Diff.foreign_id) == Cls.id, ), ), ) class Diff(Model): ... foo = _foreign_id_rel(Foo) bar = _foreign_id_rel(Bar) baz = _foreign_id_rel(Baz) @property def foreign(self): if self.foreign_table: return getattr(self, self.foreign_table) @foreign.setter def foreign(self, value): if value is None: self.foreign_table = None self.foreign_id = None else: tbl_name = value.__tablename__ self.foreign_table = tbl_name setattr(self, tbl_name, value)
In [7]: str(decimal.Decimal('0.1')) Out[7]: '0.1' In [13]: "{0:0.6f}".format(decimal.Decimal('0.1')) Out[13]: '0.100000'
from collections import OrderedDict d = OrderedDict([("name", "David"), ("year", 2016)]) values_tuple = tuple([v for v in d.values()]) q = r'INSERT INTO myTable (%s' for i in range(len(values_tuple)-1): # I added first one above so -1 q += r', %s' q += ')' cursor.execute(q, values_tuple)
date = {} data = urllib2.urlopen(url) data_obj = json.loads(data.read()) s = json.dumps(data_obj, sort_keys=True, indent=4) print s
from time import time, sleep from Tkinter import * def empty_textbox(): textbox.delete("1.0", END) root = Tk() frame = Frame(root, width=300, height=100) textbox = Text(frame) frame.pack_propagate(0) frame.pack() textbox.pack() textbox.insert(END, 'This is a test') textbox.after(5000, empty_textbox) root.mainloop()
>>> import os >>> os.path.abspath("mydir/myfile.txt")
def pytest_generate_tests(metafunc): [...] if warning_condition: metafunc.config._warn("Warning condition encountered.") [...]
import json import sys import os data = [] if os.stat("data.txt").st_size != 0 : file = open('data.txt', 'r') data = json.load(file) print(data) choice = input("What's your choice ?") if choice == 'a': # Add a new joke. # See Point 3 of the "Requirements of admin.py" section of the assignment brief. jokeSetup = input('Enter setup of joke: ') jokePunchLine = input('Enter punchline of joke: ') entry = {'setup': jokeSetup , 'punchline': jokePunchLine} data.append(entry) file = open('data.txt', 'w') json.dump(data, file) file.close() print('Joke Added.') pass elif choice == 's': # Search the current jokes. # See Point 5 of the "Requirements of admin.py" section of the assignment brief. searchTerm = input('Enter search term: ') file = open('data.txt', 'r') data = json.load(file) file.close() for sub_dict in data: if searchTerm in sub_dict['setup']: print(sub_dict['punchline']) pass # or you could modify the last for loop, like this: for dict in data: if searchTerm in dict['setup'] or searchTerm in dict['punchline']: print('found!') pass
with open(filename,'wb') as fp: pickle.dump(dict1,fp) pickle.dump(dict2,fp) pickle.dump(dict3,fp) with open(filename,'rb') as fp: d1=pickle.load(fp) d2=pickle.load(fp) d3=pickle.load(fp)
df1.set_index(['id', 'noteId'], inplace=True) df1.update(df2)
businesses = Business.objects.extra( select={ "lat": "SELECT latitude FROM property_table WHERE business_table.address = property_table.address", "lon": "SELECT longitude FROM property_table WHERE business_table.address = property_table.address" } )
char **list_to_argv_array(PyObject *lst) { assert (PyList_Check(lst)); // use better error handling here size_t cnt = PyList_GET_SIZE(lst); char **ret = new char*[cnt + 1]; for (size_t i = 0; i < cnt; i++) { PyObject *s = PyList_GET_ITEM(lst, i); assert (PyString_Check(s)); // likewise size_t len = PyString_GET_SIZE(s); char *copy = new char[len + 1]; memcpy(copy, PyString_AS_STRING(s), len + 1); ret[i] = copy; } ret[cnt] = NULL; return ret; }
session.query(A).options(subqueryload(A.b).subqueryload(B.c))
>>> fmts =["12 sheet","4 sheet","48 sheet","6 sheet", "busrear", "phonebox","train"] >>> fmts.sort(key=lambda x: (int(x.split(None, 1)[0]) if x[:1].isdigit() else 999, x)) >>> fmts ['4 sheet', '6 sheet', '12 sheet', '48 sheet', 'busrear', 'phonebox', 'train']
event = { 'summary': calendar_event_form.cleaned_data['name'], 'location': calendar_event_form.cleaned_data['location'], 'description': calendar_event_form.cleaned_data['description'], 'start': { 'date': start_string, #date here 'timeZone': tz_str, }, 'end': { 'date': end_string, #date here 'timeZone': tz_str, }, }
from collections import Counter from itertools import combinations d = Counter() for sub in a: if len(a) < 2: continue sub.sort() for comb in combinations(sub,2): d[comb] += 1 print(d.most_common()) [(('Jennifer', 'John'), 3), (('John', 'Mark'), 2), (('Jennifer', 'Mark'), 2), (('Anna', 'John'), 1), (('Joe', 'Mark'), 1), (('Anna', 'Jennifer'), 1)]
list = [1,2,3] list. # auto-complete will recognize list is a list
import numpy as np def local_max(a, start, finish): local = a[start:finish+1] loc_max = max(local) loc_pos = local.index(loc_max) + start return loc_max, loc_pos data = [3, np.nan, 5.3, 7.0, 8, 5.0, 0, 1, 3, 5.0, 2.4, 0.1, 0.3, 0.5] print local_max(data, 7, 11) print local_max(data, 0, 5)
import numpy as np import matplotlib.pyplot as plt def _profile(ax, x, y): ln, = ax.plot(x, y) # return the Artist created return ln def profile_matrix(n, m): fig, ax_array = plt.subplots(n, m, sharex=True, sharey=True) for ax in np.ravel(ax_array): _profile(ax, np.arange(50), np.random.rand(50)) profile_matrix(3, 3)
class FixtureSuite(unittest.TestSuite): def run(self, result, debug=False): socket.setdefaulttimeout(30) super().run(result, debug) socket.setdefaulttimeout(None) ... suite1 = unittest.TestSuite(testCases) suite2 = FixtureSuite(testCases) fullSuite = unittest.TestSuite([suite1,suite2]) unittest.TextTestRunner(verbosity=2).run(fullSuite)
import scrapy from selenium import webdriver class product_spiderItem(scrapy.Item): title = scrapy.Field() price=scrapy.Field() pass class ProductSpider(scrapy.Spider): name = "product_spider" allowed_domains = ['ebay.com'] start_urls = ['http://www.ebay.com/sch/i.html?_odkw=books&_osacat=0&_trksid=p2045573.m570.l1313.TR0.TRC0.Xpython&_nkw=python&_sacat=0&_from=R40'] def __init__(self): self.driver = webdriver.Firefox() def parse(self, response): self.driver.get(response.url) while True: sel = scrapy.Selector(text=self.driver.page_source) for prod in sel.xpath('//ul[@id="GalleryViewInner"]/li/div/div'): item = product_spiderItem() item['title'] = prod.xpath('.//div[@class="gvtitle"]/h3/a/text()').extract() item['price'] = prod.xpath('.//div[@class="prices"]//span[@class=" bold"]/text()').extract() yield item next = self.driver.find_element_by_xpath('//td[@class="pagn-next"]/a') try: next.click() except: break def closed(self, reason): self.driver.close()
>>> import win32file >>> win32file.GetVolumeNameForVolumeMountPoint("C:\\") '\\\\?\\Volume{50c800a9-c62e-11df-b5bb-806e6f6e6963}\\' >>> win32file.GetVolumeNameForVolumeMountPoint("K:\\") Traceback (most recent call last): File "<stdin>", line 1, in <module> pywintypes.error: (87, 'GetVolumeNameForVolumeMountPoint', 'The parameter is incorrect.')
import xml.etree.ElementTree as ET str = "<sec>John</sec> said hi to a woman (named <sec>Mary</sec>)" doc = ET.fromstring("<root>" + str + "</root>") result = [x.text for x in doc.findall(".//sec")] # >>> ['John', 'Mary']
>>> dict1 = {"good authors": {"john" : {}, "jack" : {}}, "average authors" : {"kim" : {}, "peter" : {}} } >>> dict2 = {"john" : [{"2008" : "book1"}, {"2009" : "book2"}], "peter" : [{"2008" : "book3"}, {"2009" : "book4"}]} >>> for key, value in dict1.items(): ... for dict2key, dict2value in dict2.items(): ... if dict2key in value: ... value[dict2key] = dict2value ... >>> dict2 {'john': [{'2008': 'book1'}, {'2009': 'book2'}], 'peter': [{'2008': 'book3'}, {'2009': 'book4'}]}
In [70]: s.str.split(',').map(lambda x: ','.join(sorted(x))) Out[70]: 0 abc,def,ghi 1 abc,ghi dtype: object
assert_equal(mock.call.method_to_be_mocked.call_count, 2)
out = initial_input for func in [function1, function2, function3, function4]: out = func(out)
#!/usr/bin/env python import numpy import pylab from mpi4py import MPI class Robot(object): def __init__(self, id, x, y, vx, vy, mass): self.id = id self.x = x self.y = y self.vx = vx self.vy = vy self.ax = 0. self.ay = 0. self.mass = mass def rPrint(self): print "Robot ",self.id," at (",self.x,",",self.y,")" def interact(self, robot2): dx = (self.x-robot2.x) dy = (self.y-robot2.y) eps = 0.25 idist3 = numpy.power(numpy.sqrt(dx*dx +dy*dy + eps*eps),-3) numerator = -self.mass*robot2.mass self.ax += numerator*dx*idist3 self.ay += numerator*dy*idist3 robot2.ax -= numerator*dx*idist3 robot2.ay -= numerator*dy*idist3 def updatePos(self, dt): self.x += 0.5*self.vx*dt self.y += 0.5*self.vy*dt self.vx += self.ax*dt self.vy += self.ay*dt self.x += 0.5*self.vx*dt self.y += 0.5*self.vy*dt self.ax = 0. self.ay = 0. def init(nRobots): myRobotList = [] vx = 0. vy = 0. mass = 1. for i in range(nRobots): randpos = numpy.random.uniform(-3,+3,2) rx = randpos[0] ry = randpos[1] myRobotList.append(Robot(i, rx, ry, vx, vy, mass)) return myRobotList def selfForces(robotList): nRobots = len(robotList) for i in range(nRobots-1): for j in range (i+1, nRobots): robotList[i].interact(robotList[j]) def otherRobotForces(myRobotList, otherRobotList): for i in myRobotList: for j in otherRobotList: i.interact(j) def plotRobots(robotList): xl = [] yl = [] vxl = [] vyl = [] for i in robotList: xl.append(i.x) yl.append(i.y) vxl.append(i.vx) vyl.append(i.vy) pylab.subplot(1,1,1) pylab.plot(xl,yl,'o') pylab.quiver(xl,yl,vxl,vyl) pylab.show() if __name__ == "__main__": comm = MPI.COMM_WORLD nprocs = comm.Get_size() rank = comm.Get_rank() if (nprocs != 2): print "Only doing this for 2 for now.." sys.exit(-1) neigh = (rank + 1) % nprocs robotList = init(50) for i in range (10): print "[",rank,"] Doing step ", i selfForces(robotList) request = comm.isend(robotList, dest=neigh, tag=11) otherRobotList = comm.recv(source=neigh, tag=11) otherRobotForces(robotList,otherRobotList) request.Wait() for r in robotList: r.updatePos(0.05) if (rank == 0): print "plotting Robots" plotRobots(robotList + otherRobotList)
# create an empty list a = []; # take limt as input lim = raw_input("Enter limit") # this is python style of for loop # here i will start from 0 and will go upto limit for i in range (0, int(lim)): # take input from user one by one and append to list elem = raw_input("") a.append(int(elem))
result = re.sub(r"""(?x) (?<!\\) # Make sure that there is no backslash before the current position \\ # Match a backslash (?= # only if... (?:\\\\)* # an even number of backslashes follows (including zero) (?!\\) # and no further backslashes follow after that ) # (End of lookahead assertion)""", r"\\\\", subject)
In [212]: df = pd.DataFrame([['a', 1], ['b', 2], ['c', 3], ['d', 4]], columns=['col1', 'col2']) In [213]: df['col1'].isin(['a', 'b', 'c']) Out[213]: 0 True 1 True 2 True 3 False Name: col1, dtype: bool In [214]: df.ix[df['col1'].isin(['a', 'b', 'c']), :] Out[214]: col1 col2 0 a 1 1 b 2 2 c 3
set $country $cookie_country; if ($country == '') { set $country $geoip_country_code; add_header Set-Cookie country=$geoip_country_code; } uwsgi_param GEOIP_COUNTRY $country;
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> SELECT ?subject, ?longitude_counter, ?latitude_counter, (group_concat(?latitude ; separator = "||") AS ?latitude_set), (group_concat(?longitude ; separator = "||") AS ?longitude_set) WHERE { { SELECT DISTINCT * WHERE { SELECT DISTINCT ?subject (COUNT(?latitude) as ?latitude_counter) (COUNT(?longitude) as ?longitude_counter) WHERE { ?subject geo:lat ?latitude; geo:long ?longitude . } } } ?subject geo:lat ?latitude; geo:long ?longitude . FILTER(?latitude_counter > 1 or ?longitude_counter > 1) } ORDER BY DESC(?longitude_counter)
# Sorry but was not able to check code below def get_diff(fileObj1, fileObj2): f1Diff = [] f2Diff = [] outputData = [] # x is one row f1Data = set(x.strip() for x in fileObj1) f2Data = set(x.strip() for x in fileObj2) f1Column1 = set(x.split('\t')[0] for x in f1Data) f2Column1 = set(x.split('\t')[0] for x in f2Data) l1Col1Diff = f1Column1 ^ f2Column1 l2Col1Diff = f2Column1 ^ f1Column1 commonPart = f1Column1 & f2column1 for line in f1Data.union(f2Data): lineKey = line.split('\t')[0] if lineKey in common: outputData.append(line) elif lineKey in l1ColDiff: f1Diff.append(line) elif lineKey in l2ColDiff: f2Diff.append(line) return outputData, f1Diff, f2Diff outputData, file1Missed, file2Missed = get_diff(open(file1, 'r'), open(file2, 'r'))
small_list_set = set(small_list) for line in big_list: for item in line: if item in small_list_set: bucket.append(line)
import os, glob files = glob.glob('*.jpg') files = [os.path.join("C:\\data", file) for file in files] result = "( " + " ".join(files) + " )" print result # Prints ( C:\data\a.jpg C:\data\b.jpg C:\data\c.jpg )
ScrollView: GridLayout: cols: 1 padding: 10 spacing: 10 size_hint: None, None width: 500 height: self.minimum_height
IDE Settings | Editor | Colors & Fonts | General | Caret Row
s = stream.Stream() n = note.Note('C4') # qtr note default s.append(n) c = chord.Chord('E4 G4') # qtr s.insertIntoNoteOrChord(0.0, c) s.show('t') {0.0} <music21.chord.Chord C4 E4 G4>
import os import shutil srcfile = 'a/long/long/path/to/file.py' dstroot = '/home/myhome/new_folder' assert not os.path.isabs(srcfile) dstdir = os.path.join(dstroot, os.path.dirname(srcfile)) os.makedirs(dstdir) # create all directories, raise an error if it already exists shutil.copy(srcfile, dstdir)
from numpy import * hit_idx = (0,4) # Define a graph by edge list edges = [[0,1],[1,2],[2,3],[2,4]] # Create adj. matrix A = zeros((5,5)) A[zip(*edges)] = 1 # Undirected condition A += A.T # Make the final state an absorbing condition A[hit_idx[1],:] = 0 A[hit_idx[1],hit_idx[1]] = 1 # Make a proper Markov matrix by row normalizing A = (A.T/A.sum(axis=1)).T B = A.copy() Z = [] for n in xrange(100): Z.append( B[hit_idx] ) B = dot(B,A) from pylab import * plot(Z) xlabel("steps") ylabel("hit probability") show()
class MyHandler(tornado.web.RequestHandler): def get(self, *args, **kwargs): components = [x for x in self.request.path.split("/") if x] # results in ['myroute', 'something']
n,m = map(int,raw_input().split()) s = n aux = 0 while n>=m: n, aux = divmod(n, m) s +=n n +=aux print s
class Employee(db.Model): id = db.Column(db.Integer, primary_key=True) employee_name = db.Column(db.String(120)) parent = db.Column(db.Integer, db.ForeignKey('employee.id'), index=True) # implements nested intervals with fractions created = db.Column(db.DateTime, index=True) left_num = db.Column(db.Integer, nullable=False) left_den = db.Column(db.Integer, nullable=False) right_num = db.Column(db.Integer, nullable=False) right_den = db.Column(db.Integer, nullable=False) level = db.Column(db.Integer, nullable=False) def __init__(self, employee_name, parent): self.created = datetime.datetime.now() self.employee_name = employee_name self.parent = parent # handle case of first addition if not parent: self.level = 1 left_node_num = 0 left_node_den = 1 right_node_num = 1 right_node_den = 1 else: parent_employee = Employee.query.get(self.parent) # if the parent exists, set level to 1 more self.level = parent_employee.level + 1 # find the most recent sibling most_recent_sibling = Employee.query\ .filter_by(parent=self.parent)\ .order_by(Employee.id.desc())\ .first() if not most_recent_sibling: # if no sibling, use parent boundaries left_node_num = parent_employee.left_num left_node_den = parent_employee.left_den else: left_node_num = most_recent_sibling.right_num left_node_den = most_recent_sibling.right_den right_node_num = parent_employee.right_num right_node_den = parent_employee.right_den left_boundary = fractions.Fraction(numerator=left_node_num + right_node_num, denominator=left_node_den + right_node_den) right_boundary = fractions.Fraction(numerator=left_boundary.numerator + right_node_num, denominator=left_boundary.denominator + right_node_den) self.left_num = left_boundary.numerator self.left_den = left_boundary.denominator self.right_num = right_boundary.numerator self.right_den = right_boundary.denominator
from ansible.plugins.callback import CallbackBase import os import time import sqlite3 dbname = './test.db' TIME_FORMAT='%Y-%m-%d %H:%M:%S' try: con = sqlite3.connect(dbname) cur = con.cursor() cur.execute('CREATE TABLE `test` (`now` TEXT, `host` TEXT UNIQUE)') con.commit() except: pass def log(host, data): if type(data) == dict: invocation = data.pop('invocation', None) if invocation.get('module_name', None) != 'setup': return facts = data.get('ansible_facts', None) now = time.strftime(TIME_FORMAT, time.localtime()) try: # `host` is a unique index cur.execute("REPLACE INTO test (now, host) VALUES(?,?);", ( now, facts.get('ansible_hostname', None) )) con.commit() except: pass class CallbackModule(CallbackBase): def runner_on_ok(self, host, res): log(host, res)
for node in page.xpath('.//table[@class="gridtable"]/tr'):
with open("input.csv", "r") as input_file: header = input_file.readline()[:-1] #this is to remove trailing '\n' header += ",Table exists?" output_lines = [header] for line in input_file: output_lines.append(line[:-1]) if 'table' in line.split(",")[3]: output_lines[-1]+=",table exists" else: output_lines[-1]+=",No table found" with open("output.csv", "w") as output_file: output_file.write("\n".join(output_lines))
>>> def inversio(interes_fix_anual): ... interes_fix_anual=float(interes_fix_anual) ... money = input('Write here your credit ') ... interes = interes_fix_anual / 100.0 ... years = 0 ... inversion = money ... while inversion <= (money * 2): ... inversion = inversion + (inversion * interes) ... years = years+1 ... print 'money=' + str(money) + ' inversion=' + str(inversion) + ' years=' + str(years) ... return years ... >>> inversio(4) Write here your credit 100 money=100 inversion=104.0 years=1 money=100 inversion=108.16 years=2 money=100 inversion=112.4864 years=3 money=100 inversion=116.985856 years=4 money=100 inversion=121.66529024 years=5 money=100 inversion=126.53190185 years=6 money=100 inversion=131.593177924 years=7 money=100 inversion=136.856905041 years=8 money=100 inversion=142.331181242 years=9 money=100 inversion=148.024428492 years=10 money=100 inversion=153.945405632 years=11 money=100 inversion=160.103221857 years=12 money=100 inversion=166.507350731 years=13 money=100 inversion=173.16764476 years=14 money=100 inversion=180.094350551 years=15 money=100 inversion=187.298124573 years=16 money=100 inversion=194.790049556 years=17 money=100 inversion=202.581651538 years=18 18
class A: pass a = A() # instantiate an object of class A
import pickle data = [int(el) for el in raw_input().split()] try: new = pickle.load(open("save.p", "rb")) + data except IOError: new = data pickle.dump(new, open("save.p", "wb")) print pickle.load(open("save.p", "rb"))
from numpy import allclose,zeros_like from numpy.random import rand from numpy.linalg import solve # generate the 5 vectors as random arrays mat = rand(5,5) v1,v2,v3,v4,v5 = mat.T v0 = rand(5) x= solve(mat,v0) #first check assert allclose(dot(mat,x),v0) #2nd check, which is the equation of the OP res = zeros_like(v0) for xj,vj in zip([v1,v2,v3,v4,v5],x): res+= xj*vj assert allclose(res,v0)
from subprocess import Popen, PIPE df = Popen('df -P /Volumes/link/to/some/folder', shell=True, stdout=PIPE) serverAddress = df.stdout.readlines()[1:][0] serverAddress = serverAddress.split('@')[1] serverAddress = serverAddress.split('/')[0] print serverAddress
x = np.array([1,2,3,4,5]) index = np.argwhere(x==3) y = np.delete(x, index) print(x, y)
driver.find_element_by_css_selector('description').click() # extract the data driver.back()
In [5]: !echo {filename}.bak mytxtfile.txt.bak
mqttc = mqtt.Client(machine_id, clean_session=False) mqttc.username_pw_set(mqtt_user, mqtt_pwd) mqttc.connect(mqtt_host, mqtt_port) mqttc.subscribe(mqtt_topic, qos=1) def on_disconnect(client, userdata, rc): if rc != 0: print "Unexpected MQTT disconnection. Will auto-reconnect" mqttc.on_connect = on_connect mqttc.on_message = on_message mqttc.on_disconnect = on_disconnect mqttc.loop_forever()
data = [ {'id':u'1','name':u'Jeff'}, {'id':u'2','name':'Carlo'}, ] import xlwt w = xlwt.Workbook() ws = w.add_sheet('sheet1') columns = list(data[0].keys()) # list() is not need in Python 2.x for i, row in enumerate(data): for j, col in enumerate(columns): ws.write(i, j, row[col]) w.save('data.xls')
# input data lst = [{'A':'BBB', 'C':'DDD', 'D':'EEE'}, {'A':'BBB', 'C':'DDD', 'D':'ESS'}, {'A':'BBB', 'C':'ASD', 'D':'EEE'}, {'C':'ASD', 'D':'EEE'}] # list of filters flt = [('A', 'BBB'), ('D', 'EEE')] # a list comprehension + all() will do the trick [x for x in lst if all(x.get(k, None) == v for k, v in flt)] => [{'A': 'BBB', 'C': 'DDD', 'D': 'EEE'}, {'A': 'BBB', 'C': 'ASD', 'D': 'EEE'}]
dictionary['screen_name'] = tweet['user']['screen_name']
other_lists = { 'bannana': ["white", "red", "blue"], 'tomato': ["red", "shiny", "grey"], 'peach': ["séché", "mure", "moisi"] } randomlist = random.choice(['bannana', 'tomato', 'peach']) for i in other_lists[randomlist]: if i in ab: if 'bannana' == randomlist: # use 'in' for substring ...
strlist = [u''.join(unichr(c) for c in h5file[obj_ref]) for obj_ref in dataset])
Run_program.bat: python script1.py python script2.py run_program.exe
numservers = 15 # put anything you want here for i in range(1,numservers+1): print('server{}'.format(i)) if i%5 == 0: print('*'*22)
import pandas as pd import numpy as np # I use python3.4 # if your python version is 2.x, replace it with 'import StringIO' import io # generate some 'large' tsv raw_data = pd.DataFrame(np.random.randn(10000, 5), columns='A B C D E'.split()) raw_tsv = raw_data.to_csv(sep='\t') # start to read csv in chunks, 50 rows per chunk (adjust it to the potential of your PC) # the use of StringIO is just to provide a string buffer, you don't need this # if you are reading from an external file, just put the file path there file_reader = pd.read_csv(filepath_or_buffer=io.StringIO(raw_tsv), sep='\t', chunksize=50) # try to show you what's inside each chunk # if you type: list(file_reader)[0] # exactly 50 rows # don't do this in your real processing, file_reader is a lazy generator # and it can only be consumed once Unnamed: 0 A B C D E 0 0 -1.2553 0.1386 0.6201 0.1014 -0.4067 1 1 -1.0127 -0.8122 -0.0850 -0.1887 -0.9169 2 2 0.5512 0.7816 0.0729 -1.1310 -0.8213 3 3 0.1159 1.1608 -0.4519 -2.1344 0.1520 4 4 -0.5375 -0.6034 0.7518 -0.8381 0.3100 5 5 0.5895 0.5698 -0.9438 3.4536 0.5415 6 6 -1.2809 0.5412 0.5298 -0.8242 1.8116 7 7 0.7242 -1.6750 1.0408 -0.1195 0.6617 8 8 -1.4313 -0.4498 -1.6069 -0.7309 -1.1688 9 9 -0.3073 0.3158 0.6478 -0.6361 -0.7203 .. ... ... ... ... ... ... 40 40 -0.3143 -1.9459 0.0877 -0.0310 -2.3967 41 41 -0.8487 0.1104 1.2564 1.0890 0.6501 42 42 1.6665 -0.0094 -0.0889 1.3877 0.7752 43 43 0.9872 -1.5167 0.0059 0.4917 1.8728 44 44 0.4096 -1.2913 1.7731 0.3443 1.0094 45 45 -0.2633 1.8474 -1.0781 -1.4475 -0.2212 46 46 -0.2872 -0.0600 0.0958 -0.2526 0.1531 47 47 -0.7517 -0.1358 -0.5520 -1.0533 -1.0962 48 48 0.8421 -0.8751 0.5380 0.7147 1.0812 49 49 -0.8216 1.0702 0.8911 0.5189 -0.1725 [50 rows x 6 columns] # set up your HDF5 file with highest possible compress ratio 9 h5_file = pd.HDFStore('your_hdf5_file.h5', complevel=9, complib='blosc') h5_file Out[18]: <class 'pandas.io.pytables.HDFStore'> File path: your_hdf5_file.h5 Empty # now, start processing for df_chunk in file_reader: # must use append method h5_file.append('big_data', df_chunk, complevel=9, complib='blosc') # after processing, close hdf5 file h5_file.close() # check your hdf5 file, pd.HDFStore('your_hdf5_file.h5') # now it has all 10,000 rows, and we did this chunk by chunk Out[21]: <class 'pandas.io.pytables.HDFStore'> File path: your_hdf5_file.h5 /big_data frame_table (typ->appendable,nrows->10000,ncols->6,indexers->[index])
class MyApp(wx.App): def OnInit(self): # Set application name before anything else self.SetAppName("My App Name") mainframe = MyMainFrame(None, wx.ID_ANY, "") self.SetTopWindow(mainframe) mainframe.Show() return 1 if __name__ == '__main__': myapp = MyApp() myapp.MainLoop()
import re from datetime import timedelta regex = re.compile(r'((?P<hours>\d+?)hr)?((?P<minutes>\d+?)m)?((?P<seconds>\d+?)s)?') def parse_time(time_str): parts = regex.match(time_str) if not parts: return parts = parts.groupdict() time_params = {} for (name, param) in parts.iteritems(): if param: time_params[name] = int(param) return timedelta(**time_params) >>> from parse_time import parse_time >>> parse_time('12hr') datetime.timedelta(0, 43200) >>> parse_time('12hr5m10s') datetime.timedelta(0, 43510) >>> parse_time('12hr10s') datetime.timedelta(0, 43210) >>> parse_time('10s') datetime.timedelta(0, 10) >>>
object.__setattr__(self, name, value)
A = coo_matrix((values, coords.T))
import csv import re data = [ ['9-1', '9-2', '9-3'] ] def quoteCsvData(data): for x, row in enumerate(data): for y, item in enumerate(row): if data[x][y] != '': data[x][y] = r'="' + data[x][y] + r'"' return data def unquoteCsvData(data): for x, row in enumerate(data): for y, item in enumerate(row): if data[x][y] != '': m = re.match(r'="([^"]*)"',data[x][y]) if m: data[x][y] = m.group(1) return data fd = open('test2.csv', 'wb') data = quoteCsvData(data) try: writer = csv.writer(fd, delimiter=',', quotechar='|', quoting=csv.QUOTE_NONE, escapechar='\\') writer.writerows(data) finally: fd.close() fd = open('test2.csv', 'rb') try: reader = csv.reader(fd, delimiter=',', quotechar='|', quoting=csv.QUOTE_NONE, escapechar='\\') data = [] for row in reader: data.append(row) finally: fd.close() data = unquoteCsvData(data) print data
def _addition(self, cr, uid, ids, fields, arg, context): r = {} for record in self.browse(cr, uid, ids): r[record.id] = record.num1 + record.num2 return r 'num1' : fields.integer('Num1'), 'num2' : fields.float('Num2'), 'total' : fields.function(_addition, string='Tot',type='float'),
#!/usr/bin/env python # -*- coding: utf-8 -*- import simplejson as json from xml import sax try: from cStringIO import StringIO except ImportError: from StringIO import StringIO xml_string = '''<?xml version="1.0" encoding="iso-8859-1"?> <n1:products xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:n7="http://foo.bar.tld" xmlns:n1="http://foo.bar.tld"> <n1:product> <n1:status> <n7:created>2005-02-08T18:18:30.53</n7:created> <n7:updated>2008-09-18T10:29:58.26</n7:updated> </n1:status> <n1:productid>28321503</n1:productid> <n1:producttext> <n7:text>Some product info</n7:text> <n7:type>Info</n7:type> </n1:producttext> <n1:terms> <n7:term> <n7:number>1</n7:number> <n7:name>Term1</n7:name> </n7:term> <n7:term> <n7:number>2</n7:number> <n7:name>Term2</n7:name> </n7:term> </n1:terms> </n1:product> </n1:products> ''' def display(data): import pprint pp = pprint.PrettyPrinter(depth=10) pp.pprint(data) class Element: def setData(self, key, value): self.__dict__[key] = value def setObject(self, key, object): if key in self.__dict__ and not isinstance(self.__dict__[key], (list, tuple)): prev_object = self.__dict__[key] self.__dict__[key] = [] self.__dict__[key].append(prev_object) self.__dict__[key].append(object) elif key in self.__dict__: self.__dict__[key].append(object) else: self.__dict__[key] = object def jsonable(self): return self._traverse(self.__dict__) # http://stackoverflow.com/questions/1036409/recursively-convert-python-object-graph-to-dictionary/1118038#1118038 def _traverse(self, obj): if isinstance(obj, dict): for k in obj.keys(): obj[k] = self._traverse(obj[k]) return obj elif hasattr(obj, "__iter__"): return [self._traverse(v) for v in obj] elif hasattr(obj, "__dict__"): data = dict([(key, self._traverse(value)) for key, value in obj.__dict__.iteritems() if not callable(value) and not key.startswith('_')]) return data else: return obj class ObjBuilder(sax.ContentHandler): def __init__(self, node): sax.ContentHandler.__init__(self) self.obj = [] self.node = node self.fetch = False self.__buffer = '' def startElementNS(self, name, qname, attrs): (ns, localname) = name if self.node == localname: self.fetch = True o = Element() self.rootobject = o self.obj.append(o) elif self.fetch: self.__buffer = '' o = Element() self.obj[-1].setObject(localname, o) self.obj.append(o) def characters(self,contents): if self.fetch: self.__buffer += contents.strip() def endElementNS(self, name, qname): (ns, localname) = name if self.node == localname: self.fetch = False display(self.rootobject.jsonable()) data = self.rootobject.jsonable() elif self.fetch: if self.__buffer != '': self.obj[-2].setData(localname, self.__buffer) del self.obj[-1] self.__buffer = '' if __name__ == '__main__': parser = sax.make_parser() parser.setContentHandler(ObjBuilder('product')) parser.setFeature(sax.handler.feature_namespaces, 1) inpsrc = sax.xmlreader.InputSource() inpsrc.setByteStream(StringIO(xml_string)) parser.parse(inpsrc)
import numpy as np a = np.random.rand(100,100) b = np.random.rand(100,100) c = np.random.rand(100,100) d = np.dstack((a,b,c)) result = np.median(d,axis=2)
>>> class Foo: ... def bar(hello=None): ... return hello ... def baz(world=None): ... return baz ... >>> import inspect >>> members = inspect.getmembers(Foo) >>> print members [('__doc__', None), ('__module__', '__main__'), ('bar', <unbound method Foo.bar> ), ('baz', <unbound method Foo.baz>)] >>> inspect.getargspec(members[2][1]) (['hello'], None, None, (None,)) >>> inspect.getargspec(members[3][1]) (['world'], None, None, (None,))
import Tkinter from Tkinter import * from PIL import Image, ImageTk root = Tk() make_frame = LabelFrame(root, text="Sample Image", width=100, height=100) make_frame.pack() stim_filename = "image.png" # create the PIL image object: PIL_image = Image.open(stim_filename) width = 100 height = 100 # You may prefer to use Image.thumbnail instead # Set use_resize to False to use Image.thumbnail use_resize = True if use_resize: # Image.resize returns a new PIL.Image of the specified size PIL_image_small = PIL_image.resize((width,height), Image.ANTIALIAS) else: # Image.thumbnail converts the image to a thumbnail, in place PIL_image_small = PIL_image PIL_image_small.thumbnail((width,height), Image.ANTIALIAS) # now create the ImageTk PhotoImage: img = ImageTk.PhotoImage(PIL_image_small) in_frame = Label(make_frame, image = img) in_frame.pack() root.mainloop()
def play_music(): while True: if not ch.get_queue(): for x in range(BUFFERSIZE): if x % BLOCKSIZE == 0: outbuf = m.process(inbuf) samples[selector][x][0] = outbuf[(x % BLOCKSIZE) * 2] samples[selector][x][1] = outbuf[(x % BLOCKSIZE) * 2 + 1] ch.queue(sounds[selector]) selector = int(not selector) libpd_release() play_music_thread = threading.Thread(target=play_music) play_music_thread.daemon = True play_music_thread.start() while True: command = raw_input().lower() if command == "commands": print '"look around"' print '"explore"' print '"inventory"' print '"examine"' print '"take"' print '"combine"' print '"quit"' elif command == "look" or command == "look around": char.look()
def create(self, request, *args, **kwargs): data = request.data cart = Cart.objects.get(id=data['id'],user_id=data['user_id']) serializer = self.get_serializer(data=data) serializer.is_valid(raise_exception=True) order = Order.objects.create(**serializer.validated_data) cart.to_be_deleted = True cart.save() headers = self.get_success_headers(serializer.data) return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)
if isinstance(iterable, basestring): iterable = iterable.split(',')
d = {} d[(Character1, Room1)] = (10, 4)
@property def myattr(self): """This is the doc string.""" return self._half * 2 @myattr.setter def myattr(self, value): self._half = value / 2 @myattr.deleter def myattr(self): del self._half
def combos(data): for i in xrange(1, len(data) + 1): for item in itertools.combinations(data, i): for j in itertools.product(*item): yield j
PTAUchar.setData(string data)
>>> c = [0.50, 0.52, 0.54, 0.56, 0.58, 0.60] >>> a = np.array(c) >>> a[(0.5 < a) & (a < 0.6)] array([0.52, 0.54, 0.56, 0.58])
resp = urllib2.urlopen('http://www.google.com') file_read = resp.read(max_wanted_size) if resp.read(1) != '': #file is bigger than expected code
#include <ges/ges.h> int main (int argc, gchar ** argv) { GESAsset *src_asset; GESPipeline *pipeline; GESTimeline *timeline; GESClip *source; GESLayer *layer; GMainLoop *mainloop; GError **error; gchar *uri; GESUriClipAsset *asset; /* Initialize GStreamer (this will parse environment variables and commandline * arguments. */ gst_init (&argc, &argv); /* Initialize the GStreamer Editing Services */ ges_init (); /* Setup of a A/V timeline */ /* This is our main GESTimeline */ timeline = ges_timeline_new_audio_video (); /* We are only going to be doing one layer of clips */ layer = ges_layer_new (); /* Add the tracks and the layer to the timeline */ if (!ges_timeline_add_layer (timeline, layer)) return -1; /* We create a simple asset able to extract GESTestClip */ uri = gst_filename_to_uri (argv[1], NULL); asset = ges_uri_clip_asset_request_sync(uri,error); src_asset = GES_ASSET(asset); /* Add sources to our layer */ ges_layer_add_asset (layer, src_asset, 0, 0, 4*GST_SECOND, GES_TRACK_TYPE_UNKNOWN); /* In order to view our timeline, let's grab a convenience pipeline to put * our timeline in. */ pipeline = ges_pipeline_new (); /* Add the timeline to that pipeline */ if (!ges_pipeline_set_timeline (pipeline, timeline)) return -1; /* The following is standard usage of a GStreamer pipeline (note how you haven't * had to care about GStreamer so far ?). * * We set the pipeline to playing ... */ gst_element_set_state (GST_ELEMENT (pipeline), GST_STATE_PLAYING); /* .. and we start a GMainLoop. GES **REQUIRES** a GMainLoop to be running in * order to function properly ! */ mainloop = g_main_loop_new (NULL, FALSE); /* Simple code to have the mainloop shutdown after 4s */ g_timeout_add_seconds (4, (GSourceFunc) g_main_loop_quit, mainloop); g_main_loop_run (mainloop); return 0; }
def palindrome(s): i = 0 while i <= len(s) / 2: if s[i] != s[-i - 1]: return False i += 1 return True
import schedule import time def job(): print("I'm working...") schedule.every(10).minutes.do(job) schedule.every().hour.do(job) schedule.every().day.at("10:30").do(job) while 1: schedule.run_pending() time.sleep(1)
import lxml.etree as et import csv xml="""<?xml version="1.0" encoding="UTF-8"?> <OASISReport> <MessageHeader> <TimeDate>2015-11-05T07:50:48-00:00</TimeDate> <Source>OASIS</Source> <Version>v20131201</Version> </MessageHeader> <MessagePayload> <RTO> <name>CAISO</name> <REPORT_ITEM> <REPORT_HEADER> <SYSTEM>OASIS</SYSTEM> <TZ>PPT</TZ> <REPORT>PRC_LMP</REPORT> <MKT_TYPE>DAM</MKT_TYPE> <UOM>US$/MWh</UOM> <INTERVAL>ENDING</INTERVAL> <SEC_PER_INTERVAL>3600</SEC_PER_INTERVAL> </REPORT_HEADER> <REPORT_DATA> <DATA_ITEM>LMP_PRC</DATA_ITEM> <RESOURCE_NAME>TH_SP15_GEN-APND</RESOURCE_NAME> <OPR_DATE>2015-10-12</OPR_DATE> <INTERVAL_NUM>2</INTERVAL_NUM> <INTERVAL_START_GMT>2015-10-12T08:00:00-00:00</INTERVAL_START_GMT> <INTERVAL_END_GMT>2015-10-12T09:00:00-00:00</INTERVAL_END_GMT> <VALUE>29</VALUE> </REPORT_DATA> <REPORT_DATA> <DATA_ITEM>LMP_PRC</DATA_ITEM> <RESOURCE_NAME>TH_SP15_GEN-APND</RESOURCE_NAME> <OPR_DATE>2015-10-12</OPR_DATE> <INTERVAL_NUM>12</INTERVAL_NUM> <INTERVAL_START_GMT>2015-10-12T18:00:00-00:00</INTERVAL_START_GMT> <INTERVAL_END_GMT>2015-10-12T19:00:00-00:00</INTERVAL_END_GMT> <VALUE>35.67227</VALUE> </REPORT_DATA> </REPORT_ITEM> <REPORT_ITEM> <REPORT_HEADER> <SYSTEM>OASIS</SYSTEM> <TZ>PPT</TZ> <REPORT>PRC_LMP</REPORT> <MKT_TYPE>DAM</MKT_TYPE> <UOM>US$/MWh</UOM> <INTERVAL>ENDING</INTERVAL> <SEC_PER_INTERVAL>3600</SEC_PER_INTERVAL> </REPORT_HEADER> <REPORT_DATA> <DATA_ITEM>LMP_PRC</DATA_ITEM> <RESOURCE_NAME>TH_SP15_GEN-APND</RESOURCE_NAME> <OPR_DATE>2015-10-12</OPR_DATE> <INTERVAL_NUM>2</INTERVAL_NUM> <INTERVAL_START_GMT>2015-10-12T08:00:00-00:00</INTERVAL_START_GMT> <INTERVAL_END_GMT>2015-10-12T09:00:00-00:00</INTERVAL_END_GMT> <VALUE>29</VALUE> </REPORT_DATA> <REPORT_DATA> <DATA_ITEM>LMP_PRC</DATA_ITEM> <RESOURCE_NAME>TH_SP15_GEN-APND</RESOURCE_NAME> <OPR_DATE>2015-10-12</OPR_DATE> <INTERVAL_NUM>12</INTERVAL_NUM> <INTERVAL_START_GMT>2015-10-12T18:00:00-00:00</INTERVAL_START_GMT> <INTERVAL_END_GMT>2015-10-12T19:00:00-00:00</INTERVAL_END_GMT> <VALUE>35.67227</VALUE> </REPORT_DATA> </REPORT_ITEM> <REPORT_ITEM> <REPORT_HEADER> <SYSTEM>OASIS</SYSTEM> <TZ>PPT</TZ> <REPORT>PRC_LMP</REPORT> <MKT_TYPE>DAM</MKT_TYPE> <UOM>US$/MWh</UOM> <INTERVAL>ENDING</INTERVAL> <SEC_PER_INTERVAL>3600</SEC_PER_INTERVAL> </REPORT_HEADER> <REPORT_DATA> <DATA_ITEM>LMP_PRC</DATA_ITEM> <RESOURCE_NAME>TH_SP15_GEN-APND</RESOURCE_NAME> <OPR_DATE>2015-10-12</OPR_DATE> <INTERVAL_NUM>2</INTERVAL_NUM> <INTERVAL_START_GMT>2015-10-12T08:00:00-00:00</INTERVAL_START_GMT> <INTERVAL_END_GMT>2015-10-12T09:00:00-00:00</INTERVAL_END_GMT> <VALUE>29</VALUE> </REPORT_DATA> <REPORT_DATA> <DATA_ITEM>LMP_PRC</DATA_ITEM> <RESOURCE_NAME>TH_SP15_GEN-APND</RESOURCE_NAME> <OPR_DATE>2015-10-12</OPR_DATE> <INTERVAL_NUM>12</INTERVAL_NUM> <INTERVAL_START_GMT>2015-10-12T18:00:00-00:00</INTERVAL_START_GMT> <INTERVAL_END_GMT>2015-10-12T19:00:00-00:00</INTERVAL_END_GMT> <VALUE>35.67227</VALUE> </REPORT_DATA> </REPORT_ITEM> <DISCLAIMER_ITEM> <DISCLAIMER>The contents of these pages are subject to change without notice. Decisions based on information contained within the California ISO's web site are the visitor's sole responsibility.</DISCLAIMER> </DISCLAIMER_ITEM> </RTO> </MessagePayload> </OASISReport>""" tree = et.fromstring(xml) itms = tree.xpath("//REPORT_ITEM") data = [] for i in itms: d= [[k.text for k in j] for j in i] print d data.append(d) for item in data: for i in range(len(data)): with open("D:\\_" + str(i) + ".csv", 'w') as f: csv_writer = csv.writer(f) csv_writer.writerows(item)
class BaseDataType(object): parent_operation = relationship(Operation, backref="datatype") class DataTypeA(Base, BaseDataType): id = Column(Integer, primary_key=True) class DataTypeB(Base, BaseDataType): id = Column(Integer, primary_key=True)
>>> import abc >>> class B(object): ... __metaclass__ = abc.ABCMeta ... @abc.abstractmethod ... def foo(self): ... print 'In B' ... >>> class C(B): ... def foo(self): ... super(C, self).foo() ... print 'In C' ... >>> C().foo() In B In C
>>> import os >>> help(os.path.split) Help on function split in module ntpath: split(p) Split a pathname. Return tuple (head, tail) where tail is everything after the final slash. Either part may be empty. >>> os.path.split(r'c:\users\sony\desktop\f.html') ('c:\\users\\sony\\desktop', 'f.html') >>> path,filename = os.path.split(r'c:\users\sony\desktop\f.html') >>> path 'c:\\users\\sony\\desktop' >>> filename 'f.html'
import time class something(object): def __init__(self,c): self.c=c def inc(self): new = self.c+1 # if the thread is interrupted by another inc() call its result is wrong time.sleep(0.001) # sleep makes the os continue another thread self.c = new x = something(0) import threading for _ in range(10000): threading.Thread(target=x.inc).start() print x.c # ~900 here, instead of 10000
from flask import send_from_directory @app.route('/js/<path:filename>') def serve_static(filename): root_dir = os.path.dirname(os.getcwd()) return send_from_directory(os.path.join(root_dir, 'static', 'js'), filename)
s = numpy.sum((A[:,:,0:3]-B[:,:,0:3])**2)
output = np.column_stack((arrA.flatten(),arrB.flatten(),arrC.flatten())) np.savetxt('output.dat',output,delimiter=',')
class BaseTask(object): '''change object to BaseProject whenever you figure out what your `Project` class should be, or if you need it at all''' def __init__(self, title): self.title = title self.description="" class Task(BaseTask): def __init__(self, title): super(Task, self).__init__(title) self.subtasks = [] self.default_hours = 1 @property def hours(self): if len(self.subtasks) < 1: return self.default_hours return sum(subtask.hours for subtask in self.subtasks) class SubTask(BaseTask): def __init__(self, title): super(SubTask, self).__init__(title) self.hours = 0
df['team_tuple'] = df.apply( lambda row: tuple( sorted((row['Team A'], row['Team B'])) ), axis='columns' ) df Out[17]: DATE Team A Team B team_tuple 0 24-May-1983 India Australia (Australia, India) 1 24-May-1983 Australia India (Australia, India) duplicates = df.loc[:, ['DATE', 'team_tuple']].duplicated() cleaned_df = df.loc[~ duplicates, :] In [16]: cleaned_df Out[16]: DATE Team A Team B team_tuple 0 24-May-1983 India Australia (Australia, India)
>>> a array([2, 5, 4, 4, 4, 2, 1, 1, 2, 2, 5, 4, 1, 4, 0, 0, 5, 1, 4, 1]) >>> np.nonzero(a == a.max())[0] array([ 1, 10, 16]) >>> a[_] array([5, 5, 5])
def close_far(a, b, c): x, y, z = sorted([a, b, c]) delta_close, delta_far = sorted([y - x, z - y]) return delta_close <= 1 and delta_far >= 2
import re input = 'ABC @XYZ ABC @Python ABC http://www.stackoverflow.com ABC' output = re.sub(r'(http|@)\S*\s', '', input) print output # 'ABC ABC ABC ABC'
from itertools import imap from operator import mul def sumsquared(arr): return sum(imap(mul, arr, arr))
from pyPdf import PdfFileWriter, PdfFileReader output = PdfFileWriter() input1 = PdfFileReader(file("document1.pdf", "rb")) watermark = PdfFileReader(file("watermark.pdf", "rb")) page4.mergePage(watermark.getPage(0)) # finally, write "output" to document-output.pdf outputStream = file("document-output.pdf", "wb") output.write(outputStream) outputStream.close()
import numpy as np A = np.ndarray(shape=(2,2), dtype=float, order='F') B = np.ndarray(shape=(2,2), dtype=float, order='F') C = np.ndarray(shape=(2,2), dtype=float, order='F') D = np.ndarray(shape=(2,2), dtype=float, order='F') T = np.array([[A,B],[C,D]])
class Game(threading.Thread): def update(self): pygame.display.update() self.screen.fill(self.fillcolour) def setup(self): """Placeholder for setup""" pass def frame(self): """Placeholder for frame""" pass def handleEvent(self, event): """Placeholder for input handling""" pass def handleInputs(self): for event in pygame.event.get(): if event.type == pygame.QUIT: self.quit() self.handleEvent(event) def run(self): self.setup() while True: if self.FRAMERATE: self.clock.tick(self.FRAMERATE) self.frame() self.update() self.handleInputs()
# setup redirect uri in order to load strategy uri = redirect_uri = "social:complete" if uri and not uri.startswith('/'): uri = reverse(redirect_uri, args=(backend,)) # load the strategy try: strategy = load_strategy( request=request, backend=backend, redirect_uri=uri, **kwargs ) except MissingBackend: raise Http404('Backend not found')
import urllib2 req = urllib2.urlopen("http://example.com/file.zip") total_size = int(req.info().getheader('last-modified'))
l = [] for m in Message.objects.filter(dst=p).order_by('-date_last_modif'): for c in m.conversations.all(): if c not in l: l.append(c.pk) conversations_read = [c for c in Conversation.objects.filter(pk__in=l)]
# form snippet <input type="submit" value="Edit Summary" name="summary" /> <input type="submit" value="Edit Due Date" name="due_date" /> # view snippet if request.POST.get('summary'): print('user clicked summary') elif request.POST.get('due_date'): print('user clicked due date')
import sys sys.path.insert(0, '/my/path/file.zip') import my_module my_module.caLL_something()
from sqlalchemy import * from sqlalchemy.orm import * from sqlalchemy.ext.declarative import declarative_base Base = declarative_base() class Content(Base): __tablename__ = 'contents' grandma_id = Column(Integer, primary_key=True) author_id = Column(Integer, primary_key=True) s = Session() unique_users_contents = s.query(Content).distinct( Content.grandma_id, Content.author_id).\ subquery('c') q = s.query( Content, func.row_number().over( partition_by=Content.grandma_id, order_by=func.random()).label("row_number") ).select_entity_from(unique_users_contents).subquery() q = s.query(Content).select_entity_from(q).filter(q.c.row_number <= 4) print q
Py_NoSiteFlag = 1; // Disable importing site.py Py_Initialize(); // Create a python interpreter
import wx class Frame(wx.Frame): def __init__(self): wx.Frame.__init__(self,None) self.resized = False # the dirty flag self.Bind(wx.EVT_SIZE,self.OnSize) self.Bind(wx.EVT_IDLE,self.OnIdle) def OnSize(self,event): self.resized = True # set dirty def OnIdle(self,event): if self.resized: # take action if the dirty flag is set print "New size:", self.GetSize() self.resized = False # reset the flag app = wx.PySimpleApp() frame = Frame().Show() app.MainLoop()
words_s1 = nltk.regexp_tokenize(s1, r'(?u)\d+(?:\.\d+)?|\w+')
list_col_b, list_col_c = zip(*MyModel.objects.values_list('col_b', 'col_c'))
In [10]: months = ['Jan', 'Feb', 'Mar', 'Apr'] In [11]: df.loc[:, months].apply(lambda x: pd.algos.is_monotonic_float64(-x)[0], axis=1) Out[11]: 0 False 1 True 2 False 3 True 4 False dtype: bool
results = soup.findAll('div', class_='name') for each in results: if each.text: worksheet.write(row,1,each.text) row += 1
class Server(object): _cp_config = { 'tools.sessions.on': True, 'tools.auth.on': True } auth = AuthController() @cherrypy.expose @require() def index(self): f = open ("file.txt","r") link = f.read() f.close() myText = "Hello World" html = """ <html> <body> <p>%s</p> <a href="%s" ><img src="images/go_online.png"></a> </body> </html> """ %(myText, link) return html index.exposed = True
file.write("My String\n");
# Read the whole "second file" into a set X. with open('foo') as fp: names = set(fp) # Read the "first" file line by line. with open('bar') as fp: for line in fp: # For each line, extract the part before the comma. name = line.split(',')[0] # If this part is in the set X, print whatever is desired. if name in names: print line
str_location = '({0}, {1}, {2})'.format(x, y, z)
x = 4.12121212 print '%.2f' % x
var users = require('org/arangodb/users'); controller.post('/checkpw', function (req, res) { var credentials = req.params('credentials'); res.json({ valid: users.isValid( credentials.username, credentials.password ) }); }) .bodyParam('credentials', joi.object({ username: joi.string().required(), password: joi.string().required() }).required());
N = { 'd' : 3 } four = Template(u'number:{{ d + 1 }}').render(**N)
@click.command(context_settings=dict( ignore_unknown_options=True, allow_extra_args=True, )) @click.pass_context def runner(ctx, tgt, fun): d = dict() for item in ctx.args: d.update([item.split('=')]) req = pyaml.p(meh.PostAdapter(tgt, fun, d)) click.echo(req)
>>> url.find(lambda tag: tag.name == 'span' and tag.get('class', []) == ['bday']) <span class="bday">1899-08-04</span>
>>> from numpy.lib.stride_tricks import as_strided >>> mask = np.random.randint(2, size=(101, 100)).astype(bool) >>> mask_view = as_strided(mask, shape=(500,)+mask.shape, ... strides=(0,)+mask.strides) >>> mask_view.shape (500, 101, 100) >>> np.array_equal(mask_view[0], mask_view[499]) True >>> np.all(mask_view == 0) False >>> mask[:] = 0 >>> np.all(mask_view == 0) True
>>> import numpy as np >>> N=2 >>> np.zeros((N,)*1) array([ 0., 0.]) >>> np.zeros((N,)*2) array([[ 0., 0.], [ 0., 0.]]) >>> np.zeros((N,)*3) array([[[ 0., 0.], [ 0., 0.]], [[ 0., 0.], [ 0., 0.]]])
source = im.split() mask = source[2].point(lambda i: i < 100 and 255) im = Image.merge(im.mode, source)
Help on class defaultdict in module collections: class defaultdict(__builtin__.dict) | defaultdict(default_factory) --> dict with default factory | | The default factory is called without arguments to produce | a new value when a key is not present, in __getitem__ only. | A defaultdict compares equal to a dict with the same items. |
local_path = tempfile.mkdtemp().decode("utf-8") self.addCleanup(shutil.rmtree, local_path) acl = "d:u:{0}:rwX".format(os.geteuid()) subprocess.check_call(["setfacl", "-m", acl, local_path])
N = 4 def supers(number): zeros = sum(1 for bit in xrange(N) if (number >> bit) & 1 == 0) return 2**zeros def solve(a,b,c): total = supers(a) + supers(b) + supers(c) total -= supers(a | b) # counted twice, remove one total -= supers(b | c) # counted twice, remove one total -= supers(a | c) # counted twice, remove one total += supers(a | b | c) # counted three times, removed three times, add one return total print solve(0b1001,0b0011,0b0110)
from websocket import create_connection ws = create_connection("wss://coinsecure.in/websocket") ws.send('{"method": "recentbuytrades"}') while True: result = ws.recv() print ("Received '%s'" % result) ws.close()
def initialize(self): """Hook for subclass initialization. A dictionary passed as the third argument of a url spec will be supplied as keyword arguments to initialize(). Example:: class ProfileHandler(RequestHandler): def initialize(self, database): self.database = database def get(self, username): ... app = Application([ (r'/user/(.*)', ProfileHandler, dict(database=database)), ]) """ pass
heroku config:set QUOTE_REST_API=https://quote-api.herokuapp.com/
_dict = {"foo" : 1234} _dict["bar"] = _dict["foo"] + 1
x = input() NUM_LETTERS = 26 #Can't import modules I'm using a web based grader/compiler def SpyCoder(S, N): y = "" for i in S: if(i.isupper()): x = ord(i) x += N if x > ord('Z'): x -= NUM_LETTERS elif x < ord('A'): x += NUM_LETTERS y += chr(x) else: y += " " return y def GoodnessFinder(S): y = 0 for i in S: if i.isupper(): x = ord(i) x -= ord('A') y += letterGoodness[x] else: y += 1 return y def GoodnessComparer(S): goodnesstocompare = GoodnessFinder(S) goodness = 0 v = '' best_v = S for i in range(0, 26): v = SpyCoder(S, i) goodness = GoodnessFinder(v) if goodness > goodnesstocompare: best_v = v goodnesstocompare = goodness return best_v print(GoodnessComparer(x))
for label in wizard.findChildren(QLabel): label.setOpenExternalLinks(True)
ind_set = set(ind) retain = [i for i in range(len(d1)) if i not in ind_set] d2 = [[d1[k][j] for j in retain] for k in retain]
def makeHTMLRow(d, 'title'): s = "<tr>\n\t" s += "<td>%(year)d</td>\n\t" s += "<td>%(director)s</td>\n" s += "</tr><tr>\n\t" s += "<td>%(title)s></td>\n" s += "</tr>" return s % d
from matplotlib.figure import Figure class FlightData(QtGui.QDialog, Ui_Dialog): def __init__(self, parent=None): QtGui.QDialog.__init__(self, parent) self.setupUi(self) self.figs = {} self.canvas = {} self.axs = {} plot_names = ['speed', 'height', 'map', 'angle'] for pn in plot_names: fig = Figure() self.canvas[pn] = FigureCanvas(fig) ax = fig.add_subplot(1, 1, 1) self.figs[pn] = fig self.axs[pn] = ax # ------------------------------------------------------------- self.speedLayout.addWidget(self.canvas['speed']) self.heightLayout.addWidget(self.canvas['height']) self.mapLayout.addWidget(self.canvas['map']) self.angleLayout.addWidget(self.canvas['angle']) def draw_plot(self, target, data): self.axs[target].plot(data, '-*') self.canvas[target].draw_idle()
for k, v in dict.iteritems(): for item in v: print item, k
import inspect inspect.getsource(random.gauss)
import re str = '12-1 abcd fadf adfad' m = re.search('(\d+-\d+)', str) if m: found = m.group(0) print found
from celery import Celery from kombu import Exchange results_exchange = Exchange('myres', type='fanout') app = Celery() @app.task(ignore_result=True) def something(): res = do_something() with app.producer_or_acquire(block=True) as producer: producer.send( {'result': res}, exchange=results_exchange, serializer='json', declare=[results_exchange], )
infile = open("bowlingscores.txt", "r") name=0 score=0 averagescore=0 count=0 bowlersinfo=[] for line in infile: bowler,score= line.split() score = int(score) averagescore += score bowlersinfo.append([bowler,score]) print (bowlersinfo) infile.close() averagescore /= float(len(bowlersinfo)) outfile = open("bowlingaverages.txt", "w") for name,score in bowlersinfo: if score==300: outcome= "Perfect" elif score > averagescore: outcome= "Above Average" elif score== averagescore: outcome= "Average" else: outcome= "Below Average" print ("%s, %0.0f, %s" % (name, float(score), outcome)) outfile.write(name+": " ) outfile.write(outcome+"\n") outfile.close()
q_sum = (session.query( Projects.id.label("project_id"), func.sum(case([(Tasks.complete == True, 1)], else_=0)).label("x"), func.sum(case([(and_( Tasks.deadline != None, Tasks.completeDate != None, Tasks.deadline > Tasks.completeDate), 1)], else_=0)).label("y"), func.count(Tasks.id).label("total"), ) .join(Goals, Projects.goals) .join(Strategies, Goals.strategies) .join(Tasks, Strategies.tasks) .group_by(Projects.id) ) # (project_id, x, y, total) for p in q_sum: print(p)
if imagename[0].lower().endswith((".jpg", ".jpeg", ".png")): # whatever
codfiscal_in_f1_set = set() with open("file1.csv", 'r') as f1: for line in f1: line = line.strip() if not line: continue codfiscal_in_f1_set.add(line.split(";")[1]) with open("file2.csv", 'r') as f2, open("file3.csv", "w") as output_file: for line in f2: line = line.strip() if not line: continue codfiscal = line.split(";")[1] if codfiscal not in codfiscal_in_f1_set: output_file.write(line + "\n")
>>> import regex >>> m = regex.findall('(ATCT){e<=1}', 'ATCGATCGGCATGCAGTGCAGAAGTGACGAT') >>> print(m) ['ATCG', 'ATCG']
from suds.xsd.sxbasic import Import file_url = 'file://<path to xml.xsd>' Import.bind('http://www.w3.org/XML/1998/namespace', file_url)
dictionary["territory"], dictionary["numeric_id"], dictionary["continent"] = line.split(',')
#!/usr/bin/python2 import sys, os import subprocess import fcntl dump = open("/tmp/dump", "w") dump.write("### starting %s ###" % " ".join(sys.argv)) proc = subprocess.Popen(["<real app>"] + sys.argv[1:], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) def nonblocking(fd): fl = fcntl.fcntl(fd, fcntl.F_GETFL) fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK) nonblocking(proc.stdin) nonblocking(proc.stdout) nonblocking(proc.stderr) nonblocking(sys.__stdin__) nonblocking(sys.__stdout__) nonblocking(sys.__stderr__) def me_to_proc(): x_to_y(sys.__stdin__, proc.stdin, "~in> ") def proc_to_me(): x_to_y(proc.stdout, sys.__stdout__, "<out~ ") def proc_to_me_err(): x_to_y(proc.stderr, sys.__stderr__, "<err~ ") def x_to_y(x, y, prefix=""): try: while True: line = x.readline() to_dump = "%s%s" % (prefix, line) print >> dump, to_dump print to_dump y.write(line) y.flush() dump.flush() except: pass recode = None while recode is None: proc_to_me() #proc_to_me_err() me_to_proc() retcode = proc.poll() exit(retcode)
class StaticGetter(object): def __init__(self, attr): self.attr = attr def __get__(self, instance, owner): # owner is the class, your getter code here return getattr(owner, attr) class Test(object): __staticField = 0 staticField = StaticGetter('_Test__staticField')
def loadDictionaryFromAFile( aFile ): dictionary = {} for line in aFile: fields = line.split('\t') dictionary[fields[0]]= fields dict2 = loadDictionaryFromAFile( open("file2","r" ) dict3 = loadDictionaryFromAFile( open("file3","r" ) for line in open("file1","r"): fields = line.split("/t") d2= dict2.get( fields[0], None ) d3= dict3.get( fields[0], None ) print fields, d2, d3
from sqlalchemy import * from sqlalchemy.orm import * from sqlalchemy.ext.declarative import declarative_base BaseModel = declarative_base() association = Table("message_component_association", BaseModel.metadata, Column("message_id", Integer, ForeignKey("message.id")), Column("component_id", Integer, ForeignKey("component.id"))) class Message(BaseModel): __tablename__ = "message" id = Column(Integer, primary_key=True) components = relationship("Component", secondary=association, backref="messages") # backref instead of back_populates class Component(BaseModel): __tablename__ = "component" __mapper_args__ = dict(polymorphic_on="type") # Polymorphic identity removed id = Column(Integer, primary_key=True) type = Column(String(32)) # relationship removed class Component1(Component): __tablename__ = "component1" __mapper_args__ = dict(polymorphic_identity="component1") id = Column(Integer, ForeignKey("component.id"), primary_key=True) # relationship removed engine = create_engine("sqlite://", echo=True) BaseModel.metadata.create_all(engine) session = Session(engine) component_1 = Component1(id=1) session.commit()
import hashlib import time hash = hashlib.sha1() hash.update(str(time.time())) print hash.hexdigest() print hash.hexdigest()[:10]
DF.eval('Percent = Earned / Total')
| # month | day | sign | 1 | 1 | capricorn | 1 | 20 | capricorn | 1 | 21 | aquarius | 5 | 1 | taurus | 5 | 21 | taurus | 5 | 22 | gemini
import zmq if __name__=='__main__': context = zmq.Context() socket = context.socket(zmq.ROUTER) # Changed socket.setsockopt(zmq.IDENTITY, "R1") socket.connect("tcp://127.0.0.1:6660") while True: print("Wating for request...") me = socket.recv() # New empty = socket.recv() # New toAddr = socket.recv() empty = socket.recv() req = socket.recv() print("%s received!" % str(req)) socket.send(me, zmq.SNDMORE) # New socket.send(empty, zmq.SNDMORE) # New socket.send(toAddr, zmq.SNDMORE) socket.send(empty, zmq.SNDMORE) socket.send("Reply to %s" % str(req))
import re s = "('-1259656819525938837', 598679497)\t0.036787946" re.findall(r'[-+]?[0-9]*\.?[0-9]+', s) % gives: ['-1259656819525938837', '598679497', '0.036787946']
#!/bin/sh #Kill my python process called myPython kill `ps -A | grep myPython | nawk '{ print $1}'` # Or kill `ps -U myname | grep myPython | nawk '{ print $1}'`
data.join(rate, data.col1 == rate.id) .rdd.map(lambda row: (row.id, (row.value, row.target, row.rate)) .groupByKey() .map(lambda (k, v): RandomOperation(v))
def sim_function(row_set, set_from_listofsets): # Note that the arguments are reversed from what you had before pass def find_similar(db, num, listofsets): pool = Pool() threshold = 0.49 similar_db_rows=[] for row in db.execute("SELECT thing1, thing2, thing3 FROM table WHERE num !={n};".format(n=num)): func = partial(sim_function, set(row[3].strip().split(','))) list_process_results = pool.map(func, listofsets) print list_process_results if any(t < threshold for t in list_process_results): #print "appending a row" similar_db_rows.append(row) pool.close() pool.join()
from Tkinter import Tk, Button, GROOVE root = Tk() def appear(index, letter): # This line would be where you insert the letter in the textbox print letter # Disable the button by index buttons[index].config(state="disabled") letters=["A", "T", "D", "M", "E", "A", "S", "R", "M"] # A collection (list) to hold the references to the buttons created below buttons = [] for index in range(9): n=letters[index] button = Button(root, bg="White", text=n, width=5, height=1, relief=GROOVE, command=lambda index=index, n=n: appear(index, n)) # Add the button to the window button.grid(padx=2, pady=2, row=index%3, column=index/3) # Add a reference to the button to 'buttons' buttons.append(button) root.mainloop()
lst_lvl1 = [] # Top level list for i, project in enumerate(root): projects[i] = project print(project.get('name')) lst_lvl1.append(project.get('name')) # Append to the top level list lst_lvl2 = [] # Create an empty 2nd level list for u, design in enumerate(project): designs[u] = design print(design.get('name')) lst_lvl2.append(design.get('name')) # Append to the 2nd level list lst_lvl3 = [] # Create a 3rd level list... for x, param in enumerate(design): params[x] = param print(param.get('name')) lst_lvl3.append(param.get('name')) lst_lvl4 = [] for x, info in enumerate(param): print(info.text) lst_lvl4.append(info.text) lst_lvl3.append(lst_lvl4) # At the end of level 4, append what you got to the level-3 list lst_lvl2.append(lst_lvl3) # At the end of level 3, append what you got to the level-2 list... etc lst_lvl1.append(lst_lvl2) print lst_lvl1
import re m = re.search(r"(NM_\d+)\s+range", name2) if m: print(m.group(1))
In [21]: np.repeat(np.array([1,5,2]), np.array([2,3,4])) Out[21]: array([1, 1, 5, 5, 5, 2, 2, 2, 2])
x = int(input("What would you like x to be? ")) while x<0: print("Sorry, x must be positive. Please try again.") x = int(input("What would you like x to be? ")) y = int(input("What would you like y to be? ")) while y<0: print("Sorry, y must be positive. Please try again.") y = int(input("What would you like y to be? ")) z = int(input("What would you like z to be? ")) while z<0: print("Sorry, z must be positive. Please try again. ") z = int(input("What would you like z to be? "))
unoconv -p p4ssw0rd -f csv protectedFile.xls
from PIL import Image im = Image.open("sweet_pic.ppm") im.save("sweet_pic.jpg")
>>> x = b"\u00f3" >>> print x \u00f3 >>> print x.decode('unicode_escape') ó
import matplotlib.pyplot as plt from matplotlib import colors import numpy as np def plot_matrix(rm, title='Robot World', cmap=plt.cm.Blues): plt.imshow(rm, interpolation='nearest', cmap=cmap) plt.title(title) plt.tight_layout() plt.show() cmap = colors.ListedColormap(['k','b','y','g','r']) bounds=[0,1,2,3,4] norm = colors.BoundaryNorm(bounds, cmap.N) rm = np.random.randint(0,4,(5,5)) plot_matrix(rm,cmap=cmap)
"%s%d" % ("&nbsp;" * (4 - len(str(y))), y)
source_list = new QListWidget(); dest_list = new QListWidget(); new QListWidgetItem(tr("Oak"), source_list); new QListWidgetItem(tr("Birch"), source_list); connect(source_list, SIGNAL(clicked(QModelIndex)), this, SLOT(swapEntry(QModelIndex))); void MyWidget::swapEntry(QModelIndex index) { dest_list->insertItem(dest_list->count(), source_list->takeItem(index.row())); }
from subprocess import call call(["pdfdetach", "-saveall", "file.pdf"])
import wx class NoteBookPage(wx.Panel): def __init__(self,parent,message): wx.Panel.__init__(self,parent) sizer= wx.BoxSizer(wx.VERTICAL) message= wx.StaticText(self,label=message) sizer.Add(message,1,wx.ALIGN_CENTRE) self.SetSizer(sizer) class AppFrame(wx.Frame): def __init__(self,parent,id=-1,title='program'): wx.Frame.__init__(self,parent,id,title,size=((400,400))) # Panels self.AppPanel = wx.Panel(self,-1) self.AppPanel.SetBackgroundColour('grey') main_sizer= wx.BoxSizer(wx.HORIZONTAL) button_sizer= wx.BoxSizer(wx.VERTICAL) #buttons self.button1= wx.Button(self.AppPanel,label="Button 1") button_sizer.Add(self.button1,0,wx.EXPAND) self.button2= wx.Button(self.AppPanel,label="Button 2") button_sizer.Add(self.button2,0,wx.EXPAND) self.button3= wx.Button(self.AppPanel,label="Button 3") button_sizer.Add(self.button3,0,wx.EXPAND) main_sizer.Add(button_sizer,0,wx.ALL,5) #notebook self.Notebook= wx.Notebook(self.AppPanel) page1= NoteBookPage(self.Notebook,"I'm on page 1") page2= NoteBookPage(self.Notebook,"I'm on page 2") self.Notebook.AddPage(page1,"Page 1") self.Notebook.AddPage(page2,"Page 2") main_sizer.Add(self.Notebook,1,wx.ALL|wx.EXPAND,5) #panel on the right (I'm just re-using the NoteBookPage panel to save making a new one) right_panel= NoteBookPage(self.AppPanel,"right panel") main_sizer.Add(right_panel,0,wx.ALL,5) self.AppPanel.SetSizer(main_sizer) self.Show() if __name__ == "__main__": app= wx.App(False) frame= AppFrame(None) app.MainLoop()
db.events.aggregate([ { '$match': { 'end': { '$gte': datetime.utcnow() - timedelta(days=3) } } }, { '$project': { 'timeDelta': { '$subtract': ['$end', datetime.utcnow()] } } }, { '$project': { 'absTimeDelta' : { '$cond' : [ { '$lte': ['$timeDelta', 0] }, { '$multiply' : ['$timeDelta', -1 ] }, '$timeDelta' ] } } }, { '$sort': { 'absTimeDelta' : 1 } } ])
foo_list = [ (ele - k) / j for ele in foo_list]
... >>> print out.getvalue() digraph Tree { 0 [label="X[2] <= 2.4500\nerror = 0.666667\nsamples = 150\nvalue = [ 50. 50. 50.]", shape="box"] ; 1 [label="error = 0.0000\nsamples = 50\nvalue = [ 50. 0. 0.]", shape="box"] ; 0 -> 1 ; 2 [label="X[3] <= 1.7500\nerror = 0.5\nsamples = 100\nvalue = [ 0. 50. 50.]", shape="box"] ; 0 -> 2 ; 3 [label="X[2] <= 4.9500\nerror = 0.168038\nsamples = 54\nvalue = [ 0. 49. 5.]", shape="box"] ; 2 -> 3 ; 4 [label="X[3] <= 1.6500\nerror = 0.0407986\nsamples = 48\nvalue = [ 0. 47. 1.]", shape="box"] ; 3 -> 4 ; 5 [label="error = 0.0000\nsamples = 47\nvalue = [ 0. 47. 0.]", shape="box"] ; 4 -> 5 ; 6 [label="error = 0.0000\nsamples = 1\nvalue = [ 0. 0. 1.]", shape="box"] ; 4 -> 6 ; 7 [label="X[3] <= 1.5500\nerror = 0.444444\nsamples = 6\nvalue = [ 0. 2. 4.]", shape="box"] ; 3 -> 7 ; 8 [label="error = 0.0000\nsamples = 3\nvalue = [ 0. 0. 3.]", shape="box"] ; 7 -> 8 ; 9 [label="X[0] <= 6.9500\nerror = 0.444444\nsamples = 3\nvalue = [ 0. 2. 1.]", shape="box"] ; 7 -> 9 ; 10 [label="error = 0.0000\nsamples = 2\nvalue = [ 0. 2. 0.]", shape="box"] ; 9 -> 10 ; 11 [label="error = 0.0000\nsamples = 1\nvalue = [ 0. 0. 1.]", shape="box"] ; 9 -> 11 ; 12 [label="X[2] <= 4.8500\nerror = 0.0425331\nsamples = 46\nvalue = [ 0. 1. 45.]", shape="box"] ; 2 -> 12 ; 13 [label="X[0] <= 5.9500\nerror = 0.444444\nsamples = 3\nvalue = [ 0. 1. 2.]", shape="box"] ; 12 -> 13 ; 14 [label="error = 0.0000\nsamples = 1\nvalue = [ 0. 1. 0.]", shape="box"] ; 13 -> 14 ; 15 [label="error = 0.0000\nsamples = 2\nvalue = [ 0. 0. 2.]", shape="box"] ; 13 -> 15 ; 16 [label="error = 0.0000\nsamples = 43\nvalue = [ 0. 0. 43.]", shape="box"] ; 12 -> 16 ; }
class UploadImageForm(forms.ModelForm): class Meta: model = GallryImage ... # Sample view def upload_file(request): if request.method == 'POST': form = UploadImageForm(request.POST, request.FILES) if form.is_valid(): form.save() return HttpResponseRedirect('/success/url/') else: form = UploadImageForm() return render_to_response('upload.html', {'form': form})
10/3 -> floor(3.33) -> 3 -10/3 -> floor(-3.33) -> -4
1 and 2 will evaluate to 2 1 or 2 will evaluate to 1 (short-circuit) 1 and "hello" will evaluate to "hello"
import urllib2 listOfStocks = ["AAPL", "MSFT", "GOOG", "FB", "AMZN"] urls = [] for company in listOfStocks: urls.append('http://real-chart.finance.yahoo.com/table.csv?s=' + company + '&d=6&e=28&f=2015&g=m&a=11&b=12&c=1980&ignore=.csv') Output_File = open('C:/Users/rshuell001/Historical_Prices.csv','w') New_Format_Data = '' for counter in range(0, len(urls)): Original_Data = urllib2.urlopen(urls[counter]).read() if counter == 0: New_Format_Data = "Company," + urllib2.urlopen(urls[counter]).readline() rows = Original_Data.splitlines(1) for row in range(1, len(rows)): New_Format_Data = New_Format_Data + listOfStocks[counter] + ',' + rows[row] Output_File.write(New_Format_Data) Output_File.close()
class Thing(object): # New-style class def __init__(self, whatever): self._whatever = whatever @property def whatever(self): return self._whatever # Insert complicated calculation here
def dotProduct(x,y): prod=0 for i in range(len(x)): prod=prod+x[i]*y[i] return prod
import x as y
import atexit import weakref class CallableMethodWeakRef: def __init__(self, object, method_name): self.object_ref = weakref.ref(object) self.method_name = method_name def __call__(self): object = self.object_ref() if object: getattr(object, self.method_name)() class Recorder: def __init__(self, *args): atexit.register(CallableMethodWeakRef(self, 'flush')) def flush(self): print 'flushing'
class StateManager(threading.Thread): def __init__(self, lock, state): threading.Thread.__init__(self) self.lock = lock self.state = state def run(self): lock = self.lock state = self.state while True: lock.acquire() self.updateState(state) lock.release() time.sleep(60)
#!/usr/bin/python # Circuit: # * A Piezo is connected to pin 12 on header P8. - GPIO1_12 # * A LED is connected to pin 14 on header P8. - GPIO0_26 # * A button is connected to pin 45 on header P8. - GPIO2_6 # Use a pull-down resistor (around 10K ohms) between pin 45 and ground. # 3.3v for the other side of the button can be taken from pins 3 or 4 # on header P9. Warning: Do not allow 5V to go into the GPIO pins. # * GND - pin 1 or 2, header P9. def setup(): # this function will run once, on startup pinMode(PIEZO, OUTPUT) # set up pin 12 on header P8 as an output - Piezo pinMode(LED, OUTPUT) # set up pin 14 on header P8 as an output - LED pinMode(BUTTON, INPUT) # set up pin 45 on header P8 as an input - Button def loop(): # this function will run repeatedly, until user hits CTRL+C if (digitalRead(BUTTON) == HIGH): # was the button pressed? (is 3.3v making it HIGH?) then do: buzz() delay(10) # don't "peg" the processor checking pin def delay(j): #need to overwrite delay() otherwise, it's too slow for k in range(1,j): pass def buzz(): #this is what makes the piezo buzz - a series of pulses # the shorter the delay between HIGH and LOW, the higher the pitch limit = 500 # change this value as needed; # consider using a potentiometer to set the value for j in range(1, limit): digitalWrite(PIEZO, HIGH) delay(j) digitalWrite(PIEZO, LOW) delay(j) if j==limit/2: digitalWrite(LED, HIGH) digitalWrite(LED, LOW) # turn it off run(setup, loop)
import bcrypt # Hash a password for the first time hashed = bcrypt.hashpw(password, bcrypt.gensalt()) # gensalt's log_rounds parameter determines the complexity # the work factor is 2**log_rounds, and the default is 12 hashed = bcrypt.hashpw(password, bcrypt.gensalt(10)) # Check that an unencrypted password matches one that has # previously been hashed if bcrypt.hashpw(plaintext, hashed) == hashed: print "It matches" else: print "It does not match"
while True: while queue: queue.pop()()
from __future__ import division import scipy as sp from scipy import stats import pylab as pl x = [1.81,1.715,1.78,1.613,1.629,1.714,1.62,1.738,1.495,1.669,1.57,1.877,1.385,2.129, \ 2.016,1.606,1.444,2.103,1.397,1.854,1.327,1.377,1.798,1.684,2.186,2.079,1.32, \ 1.452,2.272,1.313,1.762,2.308,2.285,2.328,2.288,2.345,2.237,2.078,2.057,1.505, \ 2.595,2.176,2.501,0.942,2.424,2.49,2.65,1.303,2.43,2.241,0.897,1.731,2.464,1.638, \ 0.867,2.392,3.248,2.608,2.733,0.745,2.715,3.078,2.571,0.771,1.071,2.574,3.343, \ 2.835,2.629,3.421,0.642,2.571,2.698,0.595,2.912,0.563,2.832,2.636,3.149,2.522, \ 0.836,0.894,0.447,1.304,1.132,2.488,3.363,2.961,1.317,2.387,0.036,2.199,0.356, \ 3.036,2.103,2.894,-0.097,0.069,2.688,-0.083,0.653,3.247,3.045,3.197,2.963,2.473, \ 2.571,3.333,3.009,1.281,3.257,3.116,2.673,2.901,2.903,2.634,-0.291,-0.29,0.212] y = [0.924,0.915,0.914,0.91,0.909,0.905,0.905,0.893,0.886,0.881,0.873,0.873,0.844, \ 0.838,0.83,0.817,0.811,0.809,0.807,0.803,0.802,0.792,0.777,0.774,0.774,0.77,0.748, \ 0.746,0.742,0.734,0.729,0.726,0.722,0.677,0.676,0.672,0.635,0.62,0.62,0.608,0.605, \ 0.587,0.586,0.578,0.571,0.569,0.549,0.544,0.535,0.53,0.529,0.513,0.499,0.497, \ 0.496,0.496,0.49,0.486,0.482,0.476,0.474,0.473,0.471,0.47,0.459,0.444,0.438,0.435, \ 0.428,0.419,0.411,0.4,0.396,0.384,0.378,0.368,0.362,0.362,0.361,0.357,0.347,0.346, \ 0.344,0.33,0.322,0.319,0.318,0.305,0.296,0.296,0.289,0.288,0.288,0.288,0.287, \ 0.286,0.283,0.283,0.278,0.274,0.264,0.259,0.248,0.244,0.241,0.239,0.238,0.237, \ 0.23,0.222,0.221,0.218,0.214,0.212,0.207,0.205,0.196,0.19,0.182] xmin, xmax = min(x), max(x) ymin, ymax = min(y), max(y) # Generate KDE x1, y1 = sp.mgrid[xmin:xmax:100j, ymin:ymax:100j] positions = sp.vstack([x1.ravel(), y1.ravel()]) values = sp.vstack([x, y]) kernel = stats.gaussian_kde(values) kde = sp.reshape(kernel(positions).T, x1.shape) # plotting CS = pl.contour(x1,y1,kde) # ----------------------------------- our solution ------------------------------------ # processing the distances for i,clc in enumerate(CS.collections): for j,pth in enumerate(clc.get_paths()): cts = pth.vertices d = sp.spatial.distance.cdist(cts,cts) x,y = cts[list(sp.unravel_index(sp.argmax(d),d.shape))].T pl.plot(x,y,':o') print 'Contour Level %d, Part %d'%(i,j) # ----------------------------------- our solution ------------------------------------ pl.clabel(CS, inline=1, fontsize=10, zorder=6) pl.axis('image') # don't forget using this to fix aspect ratio to 1,1 pl.show()
function( cython_add_module _name _dynamic_lookup ) set( pyx_module_sources "" ) set( other_module_sources "" ) foreach( _file ${ARGN} ) if( ${_file} MATCHES ".*\\.py[x]?$" ) list( APPEND pyx_module_sources ${_file} ) else() list( APPEND other_module_sources ${_file} ) endif() endforeach() compile_pyx( ${_name} generated_file ${pyx_module_sources} ) include_directories( ${PYTHON_INCLUDE_DIRS} ) python_add_module( ${_name} ${generated_file} ${other_module_sources} ) ### Added here ## if( ${_dynamic_lookup} ) message( STATUS "Not linking target ${_name} against libpython" ) set_target_properties( ${_name} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup") else() target_link_libraries( ${_name} ${PYTHON_LIBRARIES} ) endif() endfunction()
import matplotlib.pyplot as plt import numpy as np data = {'Alex': 20, 'Jason': 35} x = np.arange(len(data)) y = data.values() plt.bar(x, y) plt.xticks(x + 0.5, data.keys(), rotation='vertical') plt.show()
# generate grid a = [ ] allZeroes = [] allOnes = [] for i in range(0,800): allZeroes.append(0) allOnes.append(1) # append 400 rows of 800 zeroes per row. for i in range(0, 400): a.append(allZeroes) # append 400 rows of 800 ones per row. for i in range(0,400): a.append(allOnes) #So this is a 2D 800 x 800 array of zeros on the top half, ones on the bottom half. array = numpy.array(a) # Need to flip the array so my other code that draws # this array will draw it right-side up array = numpy.flipud(array)
(gdb) python print int(gdb.Value(0)) 0 (gdb) python print float(gdb.Value(0.0)) 0.0
In [2]: dginvdy Out[2]: 2*(y**2)**(1/3)/(3*y) In [3]: factor(dginvdy) Out[3]: 2/(3*y**(1/3))
def get_user(self, user_id): try: return User.objects.get(pk=user_id) except User.DoesNotExist: return None
#include <boost/python.hpp> #include <string> #include <iostream> using namespace boost::python; using namespace std; class World { private: string name; public: void set(string name) { this->name = name; } void greet() { cout << "hello, I am " << name << endl; } }; typedef boost::shared_ptr< World > world_ptr; BOOST_PYTHON_MODULE(hello) { class_<World>("World") .def("greet", &World::greet) .def("set", &World::set) ; }; int main(int argc, char **argv) { Py_Initialize(); try { PyRun_SimpleString( "class Person:\n" " def sayHi(self):\n" " print 'hello from python'\n" " def greetReset(self, instance):\n" " instance.set('Python')\n" ); world_ptr worldObjectPtr (new World); worldObjectPtr->set("C++!"); inithello(); object o_main = object(handle<>(borrowed(PyImport_AddModule("__main__")))); object o_person_type = o_main.attr("Person"); object o_person = o_person_type(); object o_func1 = o_person.attr("sayHi"); o_func1(); object o_func2 = o_person.attr("greetReset"); o_func2(boost::python::ptr(worldObjectPtr.get())); worldObjectPtr->greet(); } catch (error_already_set) { PyErr_Print(); } Py_Finalize(); return 0; }
class DocTest(unittest.TestCase): source_dir = u'docs/source' config_dir = u'docs/source' output_dir = u'docs/build' doctree_dir = u'docs/build/doctrees' all_files = 1 def test_html_documentation(self): app = Sphinx(self.source_dir, self.config_dir, self.output_dir, self.doctree_dir, buildername='html', warningiserror=True, ) app.build(force_all=self.all_files) # TODO: additional checks here if needed def test_text_documentation(self): # The same, but with different buildername app = Sphinx(self.source_dir, self.config_dir, self.output_dir, self.doctree_dir, buildername='text', warningiserror=True, ) app.build(force_all=self.all_files) # TODO: additional checks if needed def tearDown(self): # TODO: clean up the output directory pass
xl = Dispatch( "Excel.Application") xl.Visible = False xlFile = "C:/tab_colour.xls" wkb = xl.Workbooks.Open(xlFile) sheet = xl.Worksheets.Item("SVP INFO") sheet.Tab.Color = 255 wkb.Save() wkb.Close() xl.Quit() xl = None
#!/usr/bin/env python import glob, gzip, re data_files = [ gzip.open(name) for name in sorted( glob.glob('*_txt.gz') ) ] # we'll use the two header columns from the first file firstf = data_files.pop(0) outf = gzip.open('all_c_all_k_concatenated.txt.gz', 'w') for recnum,fline in enumerate( firstf ): print 'record', recnum+1 # output header columns plus first batch of data outf.write( fline.rstrip() ) # separate first file's values from others outf.write( ' ' ) # for each input, read one line of data, write values for dataf in data_files: # read line with headers and values line = dataf.next() # zap two header columns line = re.sub(r'^\S+\s+\S+\s+', '', line) outf.write( line.rstrip() ) # separate this file's values from next outf.write( ' ' ) # finish the line of data outf.write( '\n' ) outf.close()
import itertools for start, stop in itertools.combinations(zipList, 2): print start, stop # now pass start, stop to your function
self.socket = self.context.socket(zmq.DEALER) self.socket.setsockopt(zmq.SNDHWM, 200000)
combo = {k: {i: eval(i)[k] for i in dicts} for k in eval(dicts[0]).keys()}
import re pin_pattern = re.compile(r'^(\d{1,2})(\d{3})(\d{4})(\d{3})?$') pin_formats = { 3: '{0:02d}-{1:03d}-{2:04d}', 4: '{0:02d}-{1:03d}-{2:04d}-{3:03d}' } def parse_pin(s): groups = [int(d) for d in pin_pattern.search(s).groups() if d is not None] return pin_formats[len(groups)].format(*groups)
import signal, os def handler(signum, frame): print 'Signal handler called with signal', signum raise IOError("Couldn't open device!") # Set the signal handler and a 5-second alarm signal.signal(signal.SIGALRM, handler) signal.alarm(5) # This open() may hang indefinitely fd = os.open('/dev/ttyS0', os.O_RDWR) signal.alarm(0) # Disable the alarm
import csv from ftplib import FTP from cStringIO import StringIO ... ftp = FTP(host, user, passwd) ftp.login() output = StringIO() data = csv.writer(output) data.writerow(["data"] * 5) output.seek(0) ftp.storbinary("STOR data.txt", output) ...
def UploadResourceSample(filename, filepath, fullpath): """Upload a document, and convert to Google Docs.""" client = CreateClient() doc = gdata.docs.data.Resource(type='document', title=filename) path = fullpath print 'Selected file at: %s' % path # Create a MediaSource, pointing to the file media = gdata.data.MediaSource() media.SetFileHandle(path, 'application/pdf') # Pass the MediaSource when creating the new Resource create_uri = gdata.docs.client.RESOURCE_UPLOAD_URI + '?ocr=true&ocr-language=de' doc = client.CreateResource(doc, create_uri=create_uri, media=media) print 'Created, and uploaded:', doc.title.text, doc.resource_id.text
import matplotlib.pyplot as plt import numpy as np from matplotlib.table import Table def table_plot(data): fig, ax = plt.subplots() ax.set_axis_off() tb = Table(ax, bbox=[0,0,1,1]) nrows, ncols = data.shape width, height = 1.0 / ncols, 1.0 / nrows for (i, j), val in np.ndenumerate(data): tb.add_cell(i, j, width, height, text=str(val) if val else '', loc='center') for i in range(data.shape[0]): tb.add_cell(i, -1, width, height, text=str(i), loc='right', edgecolor='none', facecolor='none') for i in range(data.shape[1]): tb.add_cell(-1, i, width, height/2, text=str(i), loc='center', edgecolor='none', facecolor='none') tb.set_fontsize(16) ax.add_table(tb) return fig coords = ((1,2), (2,5), (1,2), (5, 5), (4, 5)) # get maximum value for both x and y to allocate the array x, y = map(max, zip(*coords)) data = np.zeros((x+1, y+1), dtype=int) for i, j in coords: data[i,j] += 1 table_plot(data) plt.show()
ServicePointManager.ServerCertificateValidationCallback = (a, b, c, e) => true ;
>>> import re >>> re.sub("&#(\d+);",lambda x:unichr(int(x.group(1),10)),"&#58; or &#46;") u': or .'
def f_a(s): pass def f_b(s): pass consumers = [f_a, f_b] while True: chunk = process.stdout.read(100) if chunk == '': break # or something like that for c in consumers: c(chunk)
colours = np.array(colours) colours[indices, :] = (1, 0, 0, 1)
text = "The Dormouse's story. Once upon a time there were three little sisters; and their names were Elsie, Lacie and Tillie; and they lived at the bottom of a well....badword..." badwords = set(["badword", "badword1", ....]) textwords = set(word for word in text.split()) for badword in badwords.intersection(textwords): print("The bad word '{}' was found in the text".format(badword))
import re r = re.compile(r'^[a-zA-Z0-9]') # match @ beginning anything that's not alpha numeric s = '#abc\ndef\nghi' l = [r.sub('', x) for x in s.split()] # join this list with comma (if that's required else you got the list already) ','.join(l)
{{ article.content|safe }}
>>> res = ["FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'KIDS' & count_EVENT_GENRE >= 1", "FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'FANTASY' & count_EVENT_GENRE >= 1", "FAV_VENUE_CITY_NAME =='Mumbai' & EVENT_GENRE == 'FESTIVAL' & count_EVENT_GENRE >= 1", "FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'WORKSHOP' & count_EVENT_GENRE >= 1", "FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'EXHIBITION' & count_EVENT_GENRE >= 1", "FAV_VENUE_CITY_NAME == 'Mumbai' & FAV_GENRE == '|DRAMA|'", "FAV_VENUE_CITY_NAME = 'Mumbai' & & FAV_GENRE == '|ACTION|ADVENTURE|SCI-FI|'", "FAV_VENUE_CITY_NAME == 'Mumbai' & FAV_GENRE == '|COMEDY|'", "FAV_VENUE_CITY_NAME == 'Mumbai' & FAV_LANGUAGE == 'Hindi'"] >>> [' & '.join(x for x in i.split(' & ') if not x.startswith('count_')) for i in res] ["FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'KIDS'", "FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'FANTASY'", "FAV_VENUE_CITY_NAME =='Mumbai' & EVENT_GENRE == 'FESTIVAL'", "FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'WORKSHOP'", "FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'EXHIBITION'", "FAV_VENUE_CITY_NAME == 'Mumbai' & FAV_GENRE == '|DRAMA|'", "FAV_VENUE_CITY_NAME = 'Mumbai' & & FAV_GENRE == '|ACTION|ADVENTURE|SCI-FI|'", "FAV_VENUE_CITY_NAME == 'Mumbai' & FAV_GENRE == '|COMEDY|'", "FAV_VENUE_CITY_NAME == 'Mumbai' & FAV_LANGUAGE == 'Hindi'"]
def htmlentities(string): def char_htmlentities(c): return '&#%d;' % ord(c) if c in html_symbols else c html_symbols = set(',\'".<>?;:') return ''.join(map(char_htmlentities, string))
list_display = ('email', 'first_name', 'last_name','userprofile')
def half_list(l): return l[:len(l)/2]
import os,glob,fileinput root="/tmp" path=os.path.join(root,"dir") alines=["line 1\n","line 2\n","line 3\n","line 4\n"] os.chdir(path) # for clients for clientfile in glob.glob("*.client.log"): data=open(clientfile).readlines() data.append(alines) open("temp","w").write(''.join(data)) os.rename("temp",clientfile) for svrfile in glob.glob("*.server.log"): f=0 for line in fileinput.FileInput(svrfile,inplace=1): ind=line.find("After-this") if ind!=-1 and not f: line=line[:ind+10] + ''.join(alines) + line[ind+10:] f=1 print line
class MyButton(QPushButton): BigSwitch = SomeQObjectThatDefinesTheSignal() def __init__(self, ...): ... BigSwitch.the_signal.connect(self.some_slot) def some_slot(self, ...): #handle the change of the property @classmethod def enable(cls): cls.BigSwitch.the_signal.emit(...)
import numpy as np import matplotlib.pyplot as plt from matplotlib import animation from matplotlib import sankey import subprocess N = 10 time = np.linspace(0, np.pi * 2, N) flow_in = 4 * np.ones_like(time) flow_out_a = 2 + np.sin(time) flow_out_b = flow_in - flow_out_a fig, ax = plt.subplots() sk = sankey.Sankey(ax=ax, scale=1 / max(flow_in), format=u'%0.3g') diags_text = ax.text(0.05, 0.9, '', transform=ax.transAxes) def init(): a = flow_in[0] b = -flow_out_a[0] c = -flow_out_b[0] sk.add(flows=[a, b, c], orientations=[0, 0, -1], alpha=0.2, lw=2.0, trunklength=1, pathlengths=[1, 1, 1]) diags = sk.finish() return [] def anim(idx): for diag in sk.diagrams: # remove called instead of set_visible(False) to keep # `len(ax.get_children())` constant diag.patch.remove() diag.text.remove() for txt in diag.texts: txt.remove() sk.diagrams = [] a = flow_in[idx] b = -flow_out_a[idx] c = -flow_out_b[idx] sk.add(flows=[a, b, c], orientations=[0, 0, -1], alpha=0.2, lw=2.0, trunklength=1, pathlengths=[1, 1, 1]) diags = sk.finish() diags_text.set_text('len(sk.diagrams) = {l} | len(ax.get_children()) = {gc}' .format(l=len(sk.diagrams), gc=len(ax.get_children()))) ax.set_xlim(-2, 3) ax.set_ylim(-3, 2) fig.savefig('frame_{:03d}.png'.format(idx)) return [] ax.set_xlim(-2, 3) ax.set_ylim(-3, 2) anim = animation.FuncAnimation(fig, anim, init_func=init, repeat=False, frames=N, interval=20, blit=True) # anim.save('mymovie.mp4', writer='mencoder') plt.show() subprocess.call(['convert', '-delay', '10', '-loop', '0', '*.png', 'out.gif'])
import os # no more than 100 million items in memory at a time MAXINMEM = int(1e8) class bigarray(object): def __init__(self): self.f = open('afile.dat', 'w+') self.a = array.array('L') def append(self, n): self.a.append(n) if len(self.a) > MAXINMEM: self.a.tofile(self.f) del self.a[:] def pop(self): if not len(self.a): try: self.f.seek(-self.a.itemsize * MAXINMEM, os.SEEK_END) except IOError: return self.a.pop() # ensure normal IndexError &c try: self.a.fromfile(self.f, MAXINMEM) except EOFError: pass self.f.seek(-self.a.itemsize * MAXINMEM, os.SEEK_END) self.f.truncate() return self.a.pop()
if __name__ == '__main__': unittest.main(defaultTest='suite')
g4ur4v@g4ur4v:~$ cat ./r.py #!/usr/bin/env python print 'hii' g4ur4v@g4ur4v:~$ sudo ./r.py sudo: ./r.py: command not found g4ur4v@g4ur4v:~$ sudo /home/g4ur4v/Desktop/junk/r.py sudo: /home/g4ur4v/Desktop/junk/r.py: command not found g4ur4v@g4ur4v:~$ pwd /home/g4ur4v/Desktop/junk g4ur4v@g4ur4v:~$ ll /home/g4ur4v/Desktop/junk/r.py -rw-rw-r-- 1 g4ur4v g4ur4v 33 Sep 22 03:29 /home/g4ur4v/Desktop/junk/r.py g4ur4v@g4ur4v:~$ chmod +x /home/g4ur4v/Desktop/junk/r.py g4ur4v@g4ur4v:~$ sudo /home/g4ur4v/Desktop/junk/r.py hii g4ur4v@g4ur4v:~$ sudo ./r.py hii
def listpage(self, response): # Parses the entries on the page, and stores them sel = Selector(response) entries = sel.xpath("//table[@id='gv_Subsribers']").css("tr") items = [] for entry in entries: item = Contact() item['name'] = entry.xpath('/td[0]/text()') yield item # remember get next has to return Request with callback=self.listpage yield self.getNext10()
>>> import argparse >>> parser = argparse.ArgumentParser() >>> parser.add_argument('-i', nargs='+') >>> parser.parse_args('-i input1.txt input2.txt input3.txt'.split()) Namespace(i=['input1.txt', 'input2.txt', 'input3.txt'])
email =('email') pwd = ('pwd') data = urllib.parse.urlencode({'email': email, 'pwd':pwd, 'service': 'nudge'}) data = data.encode('utf-8') request = urllib.request.Request("https://jawbone.com/user/signin/login") # adding charset parameter to the Content-Type header. request.add_header("Content-Type","application/x-www-form-urlencoded;charset=utf-8") f = urllib.request.urlopen(request, data) #print(f.read().decode('utf-8')) j=(f.read().decode('utf-8')) b=json.loads(j)
numTimes = dict() target = (len(a)//2)+1 for ele in a: if ele not in numTimes: numTimes[ele] = 1 else: numTimes[ele] +=1 if numTimes[ele] == target: return ele
import inspect def lfmt(s): caller = inspect.currentframe().f_back return s.format(**caller.f_locals) a = 3 b = 'foo' c = dict(mykey='myval') print(lfmt('a is {a}, b is {b}, mykey is {c[mykey]}')) # a is 3, b is foo, mykey is myval
{% for fieldset in adminform %} {% for field in fieldset.fields %} <li> {{ field }} </li> {% if "nanoadded" in field %} <li> nanoadded is here </li> {% else %} <li> nanoadded is NOT here </li> {% endif %} {% endfor %} {% endfor %}
import tarfile archive = tarfile.TarFile('/path/to/my/tarfile.tar') max_size = 0 max_name = None for file in archive.getmembers(): if file.size > max_size: max_size = file.size max_name = file.name print(max_size) print(max_name)
from django.db import connection tables = connection.introspection.table_names() seen_models = connection.introspection.installed_models(tables)
from itertools import count def next_available(base): for ext in count(start=1): name = '{}.{:03d}'.format(base, ext) if not os.path.exists(name): return name
import dns.resolver answers = dns.resolver.query('WSCLUSTER', 'A') for rdata in answers: print rdata
# example code: string_with_newlines = """something someotherthing""" import re print re.match('some', string_with_newlines) # matches print re.match('someother', string_with_newlines) # won't match print re.match('^someother', string_with_newlines, re.MULTILINE) # also won't match print re.search('someother', string_with_newlines) # finds something print re.search('^someother', string_with_newlines, re.MULTILINE) # also finds something m = re.compile('thing$', re.MULTILINE) print m.match(string_with_newlines) # no match print m.match(string_with_newlines, pos=4) # matches print m.search(string_with_newlines, re.MULTILINE) # also matches
def displayTrack(position): output='|'#value given to output track=[' ']*20# track is initially just a bunch of empty spaces track[position]= 'r'#AND track also contains an r icon print(' -'*20)#these are the top and bottom borders print(' 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J')#these represent each individual cell for i in range(len(track)): output= output +track[i] +'|'#append a "|" before and after each empty space " " print (output)#print the result print(' -'*20)
<div id="pcraSpecs"> <script type="text/javascript">...</script> <TABLE cellpadding="0" cellspacing="0" class="specification"> <TR> <TD colspan="2" class="title">Model</TD> </TR> <TR> <TD class="name">Brand</TD> <TD class="desc"><script type="text/javascript">document.write(neg_specification_newline('Intel'));</script></TD> </TR> <TR> <TD class="name">Processors Type</TD> <TD class="desc"><script type="text/javascript">document.write(neg_specification_newline('Desktop'));</script></TD> </TR> ... </TABLE> </div>
>>> timeit.timeit("sum([1 for i in permutations([1, 2, 3, 4, 5])])", setup="from itertools import permutations", number=1000) 0.0829811965812155 >>> timeit.timeit("sum([1 for i in perms([1, 2, 3, 4, 5])])", setup="from test import perms", number=1000) 0.4672438746438843
from sqlalchemy import func, desc session.query( func.count(tablename.id).label('qty') ).group_by(tablename.category ).order_by(desc('qty'))
intweight = 0 while True: try: weight = float(input()) except ValueError: print "Please enter a number" else: break intweight = weight
class TopToolbar(plugins.PluginBase): """Plugin for moving toolbar to top of figure""" JAVASCRIPT = """ mpld3.register_plugin("toptoolbar", TopToolbar); TopToolbar.prototype = Object.create(mpld3.Plugin.prototype); TopToolbar.prototype.constructor = TopToolbar; function TopToolbar(fig, props){ mpld3.Plugin.call(this, fig, props); }; TopToolbar.prototype.draw = function(){ // the toolbar svg doesn't exist // yet, so first draw it this.fig.toolbar.draw(); // then change the y position to be // at the top of the figure this.fig.toolbar.toolbar.attr("y", 2); // then remove the draw function, // so that it is not called again this.fig.toolbar.draw = function() {} } """ def __init__(self): self.dict_ = {"type": "toptoolbar"}
import requests import http.cookiejar class Parent: CookieFile = 'tmp/cookies.txt' def __init__(self): self.cj = http.cookiejar.LWPCookieJar(Parent.CookieFile) self.cj.load(ignore_discard=True) self.session = requests.Session() self.session.cookies = self.cj def save_cookies(self): self.cj.save(Parent.CookieFile, ignore_discard=True) class Child(Parent): def __init__(self): Parent.__init__(self) def main(self): # Do stuff, connect if necessary self.save_cookies() a = Child a.main()
Enter Input Directory's full path [eg. c:\vid\]: C:\Users\Dino\ In: C:\Users\Dino\ Out: C:\Users\Dino\ipod\ C:\Users\Dino\x.avi -i "C:\Users\Dino\x.avi" -t 1 -c 1 -o "C:\Users\Dino\ipod\x.mp4" --preset="iPod"
class Monster(yaml.YAMLObject): yaml_tag = u'!Monster' def __init__(self, name, hp, ac, attacks): self.name = name self.hp = hp self.ac = ac self.attacks = attacks def __repr__(self): return "%s(name=%r, hp=%r, ac=%r, attacks=%r)" % ( self.__class__.__name__, self.name, self.hp, self.ac, self.attacks) print yaml.load(""" --- !Monster name: Cave spider hp: [2,6] # 2d6 ac: 16 attacks: [BITE, HURT] """)
with open('example.csv', 'rb') as csvfile: #detect the delimiter used dialect = csv.Sniffer().sniff(csvfile.read(1024)) #return to the beginning of the file csvfile.seek(0) #file should now open with the correct delimiter. reader = csv.reader(csvfile, dialect)
#-*- coding: utf-8 -*- #!python from ctypes import * from ctypes.wintypes import * # stick to unicode version LPWSTR = POINTER(WCHAR) HINTERNET = LPVOID INTERNET_PER_CONN_FLAGS = 1 INTERNET_PER_CONN_AUTOCONFIG_URL = 4 INTERNET_PER_CONN_AUTODISCOVERY_FLAGS = 5 INTERNET_OPTION_REFRESH = 37 INTERNET_OPTION_SETTINGS_CHANGED = 39 INTERNET_OPTION_PER_CONNECTION_OPTION = 75 PROXY_TYPE_AUTO_PROXY_URL = 4 class INTERNET_PER_CONN_OPTION(Structure): class Value(Union): _fields_ = [ ('dwValue', DWORD), ('pszValue', LPWSTR), ('ftValue', FILETIME), ] _fields_ = [ ('dwOption', DWORD), ('Value', Value), ] class INTERNET_PER_CONN_OPTION_LIST(Structure): _fields_ = [ ('dwSize', DWORD), ('pszConnection', LPWSTR), ('dwOptionCount', DWORD), ('dwOptionError', DWORD), ('pOptions', POINTER(INTERNET_PER_CONN_OPTION)), ] InternetSetOption = windll.wininet.InternetSetOptionW InternetSetOption.argtypes = [HINTERNET, DWORD, LPVOID, DWORD] InternetSetOption.restype = BOOL if __name__ == '__main__': proxy = create_unicode_buffer('http://127.0.0.1:8086/proxy.pac') List = INTERNET_PER_CONN_OPTION_LIST() Option = (INTERNET_PER_CONN_OPTION * 2)() nSize = c_ulong(sizeof(INTERNET_PER_CONN_OPTION_LIST)) Option[0].dwOption = INTERNET_PER_CONN_AUTOCONFIG_URL Option[0].Value.pszValue = proxy Option[1].dwOption = INTERNET_PER_CONN_FLAGS Option[1].Value.dwValue = PROXY_TYPE_AUTO_PROXY_URL List.dwSize = sizeof(INTERNET_PER_CONN_OPTION_LIST) List.pszConnection = None List.dwOptionCount = 2 List.dwOptionError = 0 List.pOptions = Option assert InternetSetOption(None, INTERNET_OPTION_PER_CONNECTION_OPTION, byref(List), nSize) == True assert InternetSetOption(None, INTERNET_OPTION_SETTINGS_CHANGED, None, 0) == True assert InternetSetOption(None, INTERNET_OPTION_REFRESH, None, 0) == True
from readline import rl as readline readline.mode.show_all_if_ambiguous("on")
class Root(object): @cherrypy.expose def index(self): return 'Hello world' class RestAPI(object): exposed = True def POST(self): return 'post' def GET(self): return 'get' cherrypy.config.update({ 'global': { 'environment': 'test_suite', 'server.socket_host': '127.0.0.1', 'server.socket_port': 8080, } }) cherrypy.tree.mount(Root()) cherrypy.tree.mount(RestAPI(), '/api', {'/': {'request.dispatch': cherrypy.dispatch.MethodDispatcher()} } ) cherrypy.engine.start() cherrypy.engine.block()
new_dict = { k: len(v) for k, v in old_dict.iteritems()}
def testfunc(): ok = False while not ok: testvar = input('Select Option\n\n[1] Option 1\n[2] Option 2\n\n >') if testvar in ('1', 'Option 1', 'option 1'): print("\nYou selected Option 1") ok = True elif testvar in ('2', 'Option 2', 'option 2'): print("\nYou Selected Option 2") ok = True else: print("\n\nThat is not an option, please select another option") print(testvar) testfunc()
data = [{u'name': u'xxx', u'age': u'11'}, {u'name': u'myname', u'age': u'2'}, {u'name': u'cat', u'age': u'8'}] for obj in data: mydata.details.add(MyDetails.objects.create(name=obj['name']), age=obj['age'])
newArgs = re.sub(argVariable+r'=\S*', item, newArgs)
print df a b c 0 0 1 2 1 0 1 2 2 1 1 2 3 1 0 1 4 1 1 2 5 0 0 1 mean_value = df.mean(axis=1) print mean_value 0 1.000000 1 1.000000 2 1.333333 3 0.666667 4 1.333333 5 0.333333 mask = df.ge(mean_value, axis=0) print mask a b c 0 False True True 1 False True True 2 False False True 3 True False True 4 False False True 5 False False True print df.mask(mask, 1) a b c 0 0 1 1 1 0 1 1 2 1 1 1 3 1 0 1 4 1 1 1 5 0 0 1
query_args = { 'origins':'2097 Honeysuckle Lane Southwest, Atlanta, GA 30311, USA', 'destinations':'67 Fitzgerald Street Southeast, Atlanta, GA 30312, USA', 'client':client_id, 'departure_time':calendar.timegm(time.gmtime()) }
import pygame, os.path from pygame.locals import * class TranslucentSprite(pygame.sprite.Sprite): def __init__(self): pygame.sprite.Sprite.__init__(self, TranslucentSprite.container) self.image = pygame.image.load(os.path.join('data', 'image.bmp')) self.image = self.image.convert() self.image.set_colorkey(-1, RLEACCEL) self.rect = self.image.get_rect() self.rect.center = (320,240) def main(): pygame.init() screen = pygame.display.set_mode((640,480)) background = pygame.Surface(screen.get_size()) background = background.convert() background.fill((250,250,250)) clock = pygame.time.Clock() transgroups = pygame.sprite.Group() TranslucentSprite.container = transgroups """Here's the Translucency Code""" transsurface = pygame.display.set_mode(screen.get_size()) transsurface = transsurface.convert(screen) transsurface.fill((255,0,255)) transsurface.set_colorkey((255,0,255)) transsurface.set_alpha(50) TranslucentSprite() while 1: clock.tick(60) for event in pygame.event.get(): if event.type == QUIT: return elif event.type == KEYDOWN and event.key == K_ESCAPE: return transgroups.draw(transsurface) screen.blit(background,(0,0)) screen.blit(transsurface,(0,0)) pygame.display.flip() if __name__ == '__main__' : main()
setup( name='your.module', version = '1.0', description='This is your awesome module', author='You', author_email='your@email', package_dir = {'': 'src'}, packages = ['your', 'your.module'], test_suite = 'your.module.tests', use_2to3 = True, convert_2to3_doctests = ['src/your/module/README.txt'], use_2to3_fixers = ['your.fixers'], use_2to3_exclude_fixers = ['lib2to3.fixes.fix_import'], )
d = {'tom':'stats', 'keys':[{'tim': 'doc', 'year': 1999},{'mum':'veg', 'nba':'qweqwe'}] } def print_all_values(input): if isinstance(input, dict): for key, value in input.items(): print_all_values(value) elif isinstance(input, list): for value in input: print_all_values(value) else: print(input) print_all_values(d)
from lxml import etree as ET def filter_by_itemid(doc, idlist): rowset = doc.xpath("/api/result/rowset[@name='assets']")[0] for elem in rowset.getchildren(): if int(elem.get("itemID")) not in idlist: rowset.remove(elem) return doc doc = ET.parse("test.xml") filter_by_itemid(doc, [1004072840841]) print(ET.tostring(doc))
commands = ['foo', 'bar', 'exit', 'hello world', 'add number']
>>> lol = [[1,2,3],[4,40],[10,20,30]] >>> >>> for l in lol: ... if max(l) > 30: ... continue ... print l ... [1, 2, 3] [10, 20, 30]
def transform(model, **kwargs): for p in ('alpha', 'theta', ...): if 'p' not in kwargs and hasattr(model, p): kwargs[p] = getattr(model, p)
import numpy as np import cv2 im = cv2.imread('Photos/test.jpg') im_ycrcb = cv2.cvtColor(im, cv2.COLOR_BGR2HSV) ball_ycrcb_mint = np.array([0, 90, 100],np.uint8) ball_ycrcb_maxt = np.array([25, 255, 255],np.uint8) ball_ycrcb = cv2.inRange(im_ycrcb, ball_ycrcb_mint, ball_ycrcb_maxt) #cv2.imwrite('Photos/output2.jpg', ball_ycrcb) # Second image areaArray = [] count = 1 contours, _ = cv2.findContours(ball_ycrcb, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) for i, c in enumerate(contours): area = cv2.contourArea(c) areaArray.append(area) #first sort the array by area sorteddata = sorted(zip(areaArray, contours), key=lambda x: x[0], reverse=True) #find the nth largest contour [n-1][1], in this case 2 secondlargestcontour = sorteddata[1][1] #draw it x, y, w, h = cv2.boundingRect(secondlargestcontour) cv2.drawContours(im, secondlargestcontour, -1, (255, 0, 0), 2) cv2.rectangle(im, (x, y), (x+w, y+h), (0,255,0), 2) cv2.imwrite('Photos/output3.jpg', im)
import sys def my_print(text): sys.stdout.write(str(text)) sys.stdout.flush()
with open(name, 'r+') as file: for line in file: # Do Something with line file.seek(0) for line in file: # Do Something with line, second time
import matplotlib.pyplot as plt plt.rcParams['savefig.dpi'] = 500
class WorkPackage(Base): __tablename__ = 'work_package' int_id = Column(Integer, primary_key=True) wp_prefix = Column(Unicode, default=u'DIVISION_ABC_REQUEST_', primary_key=True) data = Column(Unicode) @hybrid_property def wp_id(self): return self.wp_prefix + str(self.int_id) @wp_id.expression def wp_id(cls): return cls.wp_prefix.concat(cls.int_id)
pr = subprocess.Popen(['js2coffee'], stdin=subprocess.PIPE, stdout=subprocess.PIPE) result, stderrdata = pr.communicate('var myNumber = 100;')
pieces = [] item = self.tree.GetSelection() while self.tree.GetItemParent(item): piece = self.tree.GetItemText(item) pieces.insert(0, piece) item = self.tree.GetItemParent(item)
conn = httplib.HTTPConnection("mustafa-yontar.commondatastorage.googleapis.com") conn.set_debuglevel(2) f = open(filename,"r") m = hashlib.md5() m.update(f.read()) h = m.hexdigest() has = h dd = "%s" % datetime.datetime.utcnow().strftime("%a, %d %b %Y %H:%M:%S GMT") strToSign = "PUT\n"+h+"\n\n"+dd+"\nx-goog-acl:public-read\n/mustafa-yontar/x.jpg" sig = base64.b64encode(hmac.new(self.secret, strToSign, hashlib.sha1).digest()) total = os.path.getsize(filename) header = {"Date":dd,"x-goog-acl":"public-read","Content-MD5":h,'Content-Length':total,'Authorization':"GOOG1 %s:%s" % (self.key,sig)} conn.putrequest('PUT', "/x.jpg") for h in header: conn.putheader(h, header[h]) conn.endheaders() bytess = open('x.jpg', 'rb').read() f = StringIO(bytess) f.seek(0) while True: bytes = f.read(1024) if not bytes: break length = len(bytes) conn.send('%X\r\n' % length) conn.send(bytes + '\r\n') conn.send('0\r\n\r\n') #errcode, errmsg, headers = conn.getresponse() #h.close() #conn.request("PUT","/mustafa-yontar/x.jpg",f.read(),header) r1 = conn.getresponse() print r1.status, r1.reason print r1.read() conn.close() print has
def parse_data: if isinstance(value, dict): iterator = value.items() elif isinstance(value, list): iterator = enumerate(value) else: return for key, item in iterator: parse_data(value, key, item) # do some cool stuff with the rest
def largest(sequence): """ This is based on Bentley's Programming Pearls chapter 8. My modification: if the sequence is all negatives then max is the largest element """ max_so_far = max_up_to_here = 0 largest_element = sequence[0] all_negatives = True for element in sequence: max_up_to_here= max(max_up_to_here + element, 0) max_so_far = max(max_so_far, max_up_to_here) largest_element = max(largest_element, element) if element >= 0: all_negatives = False if all_negatives: return largest_element return max_so_far
multiply = multiply.replace('[','').replace(']','')
valid = ["Yes", "yes", "y", "ok"] if answer in valid: print "You said yes" else: print "You did not say yes"
>>> s = "chapter1 in chapters" >>> re.sub(r'chapter(\d+)',r'chapter \1',s) 'chapter 1 in chapters'
def first_loop(): while True: if something: # do something else: break # call loop for first time first_loop() while True: if something: #do something else: break # return back to the loop first_loop()
>>> m = re.search('/([0-9]+)-', url) >>> m.group(1) 123456
w = np.array([1, 3, 4, 5, 6, 2, 9, 2, 4, 2, 1, 3, 3, 6]) uvals, idx, counts = np.unique(w, return_counts=True, return_inverse=True) out = np.vstack((w, counts[idx])).T print(out) # [[1 2] # [3 3] # [4 2] # [5 1] # [6 2] # [2 3] # [9 1] # [2 3] # [4 2] # [2 3] # [1 2] # [3 3] # [3 3] # [6 2]]
import os import os.path import sys import lxml.etree if len(sys.argv) == 2: in_filename = str(sys.argv[1]) if os.path.isfile (in_filename): for ent in lxml.etree.parse (in_filename).iter ('entry'): get = ent.xpath if ent.get ("kind") == "file": log_filename = get ('string(name)') log_revision = get('string(commit/@revision)') # Fixed ;) log_date = get ('string(commit/date)') print('{0},{1},{2}'.format(log_revision,log_date[:10],log_filename))
In [2]: def foo():pass ...: In [3]: foo.bar="text" In [4]: foo.bar Out[4]: 'text'
SHFILEINFO sfi; SHGetFileInfo(L"c:\file.txt", 0, &sfi, sizeof(sfi), SHGFI_SYSICONINDEX); HIMAGELIST hil; SHGetImageList(SHIL_JUMBO, IID_IImageList, &hil); ImageList_DrawEx(hil, sfi.iIcon, hdc, x, y, 0, 0, CLR_NONE, CLR_NONE, ILD_NORMAL);
from urllib.request import urlopen; print(int(str(urllib.request.urlopen("http://ir.eia.gov/ngs/wngsr.txt").read()).split("\\n")[4].split(" ")[2])) # note the semi-colon ^
if datetime.datetime.now().hour >= 17: pass
import os # this function splits the attribute=value into two lists # the first list are all the attributes # the second list are all the values def getAttributesAndValues(line): attributes = [] values = [] # first we split the input over the & AtributeValues = line.split('&') for attrVal in AtributeValues: # we split the attribute=value over the '=' sign # the left part goes to split[0], the value goes to split[1] split = attrVal.split('=') attributes.append(split[0]) values.append(split[1]) # return the attributes list and values list return attributes,values # test the function using the line beneath so you understand how it works # line = "Attribute1=Value&Attribute2=Value&Attribute3=Vale&AttibuteN=Value" # print getAttributesAndValues(line) # this function writes a single file to an output file def writeToCsv(inFile='', wfile="outFile.csv", delim=","): f_in = open(inFile, 'r') # only reading the file f_out = open(wfile, 'ab+') # file is opened for reading and appending # read the whole file line by line lines = f_in.readlines() # loop throug evert line in the file and write its values for line in lines: # let's check if the file is empty and write the headers then first_char = f_out.read(1) header, values = getAttributesAndValues(line) # we write the header only if the file is empty if not first_char: for attribute in header: f_out.write(attribute+delim) f_out.write("\n") # we write the values for value in values: f_out.write(value+delim) f_out.write("\n") # Read all the files in the path (without dir pointer) allInputFiles = os.listdir('input/') allInputFiles = allInputFiles[1:] # loop through all the files and write values to the csv file for singleFile in allInputFiles: writeToCsv('input/'+singleFile)
def thread1(): time.sleep(5) return True def thread2(t1,gui): while thread.is_alive(): pass print "Fertig" wx.CallAfter(gui.ThreadDone) class MyFrame(wx.Frame): def startThread(self): calcThread = threading.Thread(target=thread1) checkThread = threading.Thread(target=thread2, args=(calcThread,self)) def ThreadDone(self): print "Both threads done???" print "Now modify gui from main thread(here!)"
some_array = [2, 4, 5, 8, 4, 3] plt.hlines(some_array, 0, 1, colors=['b', 'g', 'r', 'y', 'c', 'm']) plt.ylim(1, 9)
In [1]: arr = [[54.1757, 57.7807], [61.5786, 64.1535], [67.9584, 83.0], [104.4185, 120.377]] In [2]: arr2 = [ "{}:{}".format(a, a-b) for a, b in arr ] In [3]: arr2 Out[3]: ['54.1757:-3.605', '61.5786:-2.5749', '67.9584:-15.0416', '104.4185:-15.9585']
AUTHENTICATION_BACKENDS = ( 'django.contrib.auth.backends.ModelBackend', 'django_openid_auth.auth.OpenIDBackend', )
class MyList(list): def __getitem__(self, index): try: return super(MyList, self).__getitem__(index) except IndexError: return None mylist = MyList([1,2,3,4,5]) print mylist[4] #prints 5 print mylist[6] is None #prints True
import numpy as np import matplotlib.pyplot as plt from scipy.integrate import ode def fun(t, z, omega): """ Right hand side of the differential equations dx/dt = -omega * y dy/dt = omega * x """ x, y = z f = [-omega*y, omega*x] return f # Create an `ode` instance to solve the system of differential # equations defined by `fun`, and set the solver method to 'dop853'. solver = ode(fun) solver.set_integrator('dop853') # Give the value of omega to the solver. This is passed to # `fun` when the solver calls it. omega = 2 * np.pi solver.set_f_params(omega) # Set the initial value z(0) = z0. t0 = 0.0 z0 = [1, -0.25] solver.set_initial_value(z0, t0) # Create the array `t` of time values at which to compute # the solution, and create an array to hold the solution. # Put the initial value in the solution array. t1 = 2.5 N = 75 t = np.linspace(t0, t1, N) sol = np.empty((N, 2)) sol[0] = z0 # Repeatedly call the `integrate` method to advance the # solution to time t[k], and save the solution in sol[k]. k = 1 while solver.successful() and solver.t < t1: solver.integrate(t[k]) sol[k] = solver.y k += 1 # Plot the solution... plt.plot(t, sol[:,0], label='x') plt.plot(t, sol[:,1], label='y') plt.xlabel('t') plt.grid(True) plt.legend() plt.show()
shutdown_mode=False def alarm_handler(signum, frame): sys.exit(0) def sigterm_handler(signum): global shutdown_mode if not shutdown_mode: shutdown_mode=True signal.signal(signal.SIGALRM, alarm_handler) signal.alarm(10)
q = s.query(User) # lazy loads 'addresses' q = s.query(User).options(contains_eager('addresses')) # eager loads q = s.query(User).options(contains_eager('addresses'))\ .options(lazyload('addresses')) # lazy loads q = s.query(User).options(contains_eager('addresses'))\ .options(lazyload('addresses'))\ .options(contains_eager('addresses')) # eager loads
from functools import partial d = defaultdict(partial(deque, maxlen=10))
file.name = slugify(myfile.filename) name, ext = os.path.splitext(file.name) while os.path.exists(os.path.join(permanent_store, file.name)): name += '_' file.name = name + ext raw_file = os.path.join(permanent_store, file.name)
def set_row_csr(A, row_idx, new_row): ''' Replace a row in a CSR sparse matrix A. Parameters ---------- A: csr_matrix Matrix to change row_idx: int index of the row to be changed new_row: np.array list of new values for the row of A Returns ------- None (the matrix A is changed in place) Prerequisites ------------- The row index shall be smaller than the number of rows in A The number of elements in new row must be equal to the number of rows in matrix A ''' assert sparse.isspmatrix_csr(A), 'A shall be a csr_matrix' assert row_idx < A.shape[0], \ 'The row index ({0}) shall be smaller than the number of rows in A ({1})' \ .format(row_idx, A.shape[0]) try: N_elements_new_row = len(new_row) except TypeError: msg = 'Argument new_row shall be a list or numpy array, is now a {0}'\ .format(type(new_row)) raise AssertionError(msg) N_cols = A.shape[1] assert N_cols == N_elements_new_row, \ 'The number of elements in new row ({0}) must be equal to ' \ 'the number of rows in matrix A ({1})' \ .format(N_elements_new_row, N_cols) idx_start_row = A.indptr[row_idx] idx_end_row = A.indptr[row_idx + 1] additional_nnz = N_cols - (idx_end_row - idx_start_row) A.data = np.r_[A.data[:idx_start_row], new_row, A.data[idx_end_row:]] A.indices = np.r_[A.indices[:idx_start_row], np.arange(N_cols), A.indices[idx_end_row:]] A.indptr = np.r_[A.indptr[:row_idx + 1], A.indptr[(row_idx + 1):] + additional_nnz]
In [46]: df = pd.DataFrame(np.random.randn(4,2), index=pd.MultiIndex.from_arrays([['a', 'a', 'b', 'b'],[1,1,2,2]])) In [47]: df Out[47]: 0 1 a 1 0.510701 0.534342 1 0.229360 -1.403280 b 2 -0.218433 0.619108 2 -0.679179 -0.195241 In [48]: df.drop([('a', 1)]) Out[48]: 0 1 b 2 -0.218433 0.619108 2 -0.679179 -0.195241
#! /usr/bin/python # coding: utf-8 import random, os CHUNK_SIZE = 1000 PATH = "/var/log/cron" def pick_next_random_line(file, offset): file.seek(offset) chunk = file.read(CHUNK_SIZE) lines = chunk.split(os.linesep) # Make some provision in case yiou had not read at least one full line here line_offset = offset + len(os.linesep) + chunk.find(os.linesep) return line_offset, lines[1] def get_n_random_lines(path, n=5): lenght = os.stat(path).st_size results = [] result_offsets = set() with open(path) as input: for x in range(n): while True: offset, line = pick_next_random_line(input, random.randint(0, lenght - CHUNK_SIZE)) if not offset in result_offsets: result_offsets.add(offset) results.append(line) break return results if __name__ == "__main__": print get_n_random_lines(PATH)
thedata = ''' Questa mattina mi son svegliato o bella ciao, bella ciao, bella ciao, ciao, ciao questa mattina mi son svegliato ho trovato l'invasor! '''.splitlines(True) class Push(protocol.Protocol): """This is just about the simplest possible protocol""" def connectionMade(self): for line in thedata: if not line or line.isspace(): continue self.transport.write(line) time.sleep(1.0) self.transport.loseConnection()
def get_fun(fn): return '.'.join([fn.__module__, fn.__name__])
if np.isfinite(pcov).all(): print 'valid' else: print 'invalid'
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC driver = webdriver.Firefox() driver.get("http://www.chadbourne.com/search/people?az[b]=b") wait = WebDriverWait(driver, 20) # get more results more_results = wait.until( EC.element_to_be_clickable((By.CSS_SELECTOR, ".load-more-pager-wrapper .pager-next")) ) more_results.click()
>>> s = "238 NEO Sports" >>> s.split(" ", 1) ['238', 'NEO Sports']
set Session = CreateObject("Redemption.RDOSession") set Msg = Session.GetMessageFromMsgFile("C:\Users\abc.msg") Msg.SentOn = #5/17/2016# Msg.Save
import matplotlib.pyplot as plt import matplotlib.transforms as mtransforms fig = plt.figure() ax = fig.add_subplot(111) ax.plot(range(10)) ax.set_yticks((2,5,7)) labels = ax.set_yticklabels(('really, really, really', 'long', 'labels')) def on_draw(event): bboxes = [] for label in labels: bbox = label.get_window_extent() # the figure transform goes from relative coords->pixels and we # want the inverse of that bboxi = bbox.inverse_transformed(fig.transFigure) bboxes.append(bboxi) # this is the bbox that bounds all the bboxes, again in relative # figure coords bbox = mtransforms.Bbox.union(bboxes) if fig.subplotpars.left < bbox.width: # we need to move it over fig.subplots_adjust(left=1.1*bbox.width) # pad a little fig.canvas.draw() return False fig.canvas.mpl_connect('draw_event', on_draw) plt.show()
def arbitrary_tensor(dtype, shape, name=None): # create the type. var_type = theano.tensor.TensorType( dtype=dtype, broadcastable=[False]*len(shape)) # create the variable from the type. return var_type(name)
INSTALLED_APPS = ( ... 'cms.plugins.snippet', 'cms.plugins.flash', ... )
fd = urllib.urlopen(cover) # Drop the entire PIL part covr = MP4Cover(fd.read(), getattr( MP4Cover, 'FORMAT_PNG' if cover.endswith('png') else 'FORMAT_JPEG' )) fd.close() # always a good thing to do audio['covr'] = [covr] # make sure it's a list audio.save()
SELECT * FROM pg_stat_activity WHERE state = 'idle in transaction';
itertools.product(range(2), repeat=4)
df = df.stack().reset_index() df.columns = ['a','b','c'] print df a b c 0 A P 0 1 A Q 2 2 A R 1 3 A S 1 4 B P 2 5 B Q 0 6 B R 1 7 B S 1 8 C P 1 9 C Q 1 10 C R 0 11 C S 0 12 D P 1 13 D Q 1 14 D R 0 15 D S 0
shapes = {'1':Square, '2':Circle, '3':Triangle} # just the class names in the dict x = shapes[raw_input()]() # get class from dict, then call it to create a shape instance.
python program.py 2>&1 | tee out.log
>>> class myClass(object): ... def __init__(self,foo,bar): ... self.foo = foo ... self.bar = bar ... def __repr__(self): ... return 'myClass({0.foo},{0.bar})'.format(self) ... >>> item = myClass(1,2) >>> item myClass(1,2) >>> myDict = {} >>> myDict[item] = 10 >>> myDict {myClass(1,2): 10}
from pandas.tseries.offsets import DateOffset end = datetime.datetime(2018 , 6, 1) start = datetime.datetime(2016 ,2, 8) #Get the range of months to cover months = (end.year - start.year)*12 + end.month - start.month #The frequency of periods period = 6 # in months pd.DatetimeIndex([end - DateOffset(months=e) for e in range(0, months, period)][::-1]).insert(0, start)
import picamera with picamera.PiCamera() as camera: camera.resolution = (800, 600) camera.start_preview() camera.start_recording('foo.h264') camera.wait_recording(10) camera.capture('foo.jpg', use_video_port=True) camera.wait_recording(10) camera.stop_recording()
import ckan.plugins as plugins import ckan.plugins.toolkit as tk from ckan.plugins.toolkit import Invalid def date_str_validator(value, context): valid_date = tk.get_validator('isodate')(value, context) if not valid_date or not isinstance(valid_date, datetime.datetime): raise Invalid("Invalid date") return value class MyPlugin(plugins.SingletonPlugin, tk.DefaultDatasetForm): plugins.implements(plugins.IDatasetForm, inherit=False) def _modify_package_schema(self, schema): schema.update({ # Custom extras 'origination_date':[tk.get_validator('ignore_missing'), date_str_validator, tk.get_converter('convert_to_extras')] }) return schema def create_package_schema(self): schema = super(MyPlugin, self).create_package_schema() schema = self._modify_package_schema(schema) return schema def update_package_schema(self): schema = super(MyPlugin, self).update_package_schema() schema = self._modify_package_schema(schema) return schema def show_package_schema(self): schema = super(MyPlugin, self).show_package_schema() schema.update({ # Custom extras 'origination_date':[tk.get_converter('convert_from_extras'), tk.get_validator('ignore_missing'), date_str_validator] }) return schema
import matplotlib.pyplot as plt import numpy as np # Make dummy csv file for this example from io import StringIO result_csv = StringIO(u""" xstuff, data1, data2, data3 0, 1, 2, 3 1, 1, 3, 4 2, 2, 1, 3 3, 1, 2, 5 """) # Read in csv. Use names=True to also store column headers per_data=np.genfromtxt(result_csv,delimiter=',',names=True) # Loop over columns. Here I assume you have the x-data in the first column, so skip that one for name in per_data.dtype.names[1:]: # Set the line's label to the column name plt.plot(per_data['xstuff'],per_data[name],label=name) # Add a legend plt.legend(loc=0) plt.xlabel ('x stuff') plt.ylabel ('y stuff') plt.title('my test result') plt.grid() plt.show()
df[columns_to_sub] = df[columns_to_sub] - means.loc[df.absorb,columns_to_sub].values >>> df absorb a b c 0 2 -0.060540 -0.270233 0.416213 1 9 0.597084 0.136158 0.415023 2 1 -0.131393 -0.535288 0.158465 3 3 0.282902 -0.008801 0.872598 4 9 -0.236306 -0.337588 0.297589 5 6 0.000000 0.000000 0.283559 6 3 0.022021 -0.110693 0.671295 7 7 0.042000 -0.327157 0.736395 8 1 0.097912 0.119899 0.409241 9 1 -0.460052 0.280302 0.341200 10 1 0.002855 -0.013902 0.648113 11 1 0.490679 0.148989 0.626300 12 8 0.000000 0.000000 0.986039 13 3 -0.304923 0.119494 0.553210 14 0 0.000000 0.000000 0.626576 15 5 0.000000 0.000000 0.105102 16 2 -0.166760 -0.122624 0.750912 17 2 0.227300 0.392857 0.498822 18 7 -0.042000 0.327157 0.323361 19 9 -0.360778 0.201430 0.521043
for message in prioritize(): if DontSendEntry.objects.has_address(message.to_address): logging.info("skipping email to %s as on don't send list " % message.to_address) MessageLog.objects.log(message, 2) # @@@ avoid using literal result code message.delete() dont_send += 1 elif message.when_to_send > datetime.datetime.now(): continue else: try: ... the rest of your code ...
import requests links = ['link.pdf'] for link in links: book_name = link.split('/')[-1] with open(book_name, 'wb') as book: a = requests.get(link, stream=True) for block in a.iter_content(512): if not block: break book.write(block)
import re r = re.compile(r"(\w+)\[(\d+)(?::(\d+))?\]") def expand_seq(seq): result = [] for item in seq: m = r.match(item) name, start, end = m.group(1), int(m.group(2)), m.group(3) rng = xrange(start, int(end)) if end else (start,) t = name + "[" result.extend(t + str(i) + "]" for i in rng) return result
new_dict = {my_mod(key): my_dict[key] for key in my_dict}
from __future__ import print_function from collections import deque import threading import time from twisted.internet import reactor from twisted.internet.protocol import Factory, Protocol class MsgReceiver(Protocol): def __init__(self, myQueue): self.myQueue = myQueue def connectionMade(self): print("Connection made!") def dataReceived(self, msg): self.myQueue.append(msg) class MsgReceiverFactory(Factory): def __init__(self, myQueue): self.myQueue = myQueue def buildProtocol(self, addr): return MsgReceiver(self.myQueue) def showMessages(myQueue): while True: time.sleep(1) try: msg = myQueue.popleft() print(msg) except IndexError: print("No messages in the queue") myQueue = deque() factory = MsgReceiverFactory(myQueue) p = threading.Thread(target=showMessages, args=(myQueue,)) p.daemon = True p.start() reactor.listenTCP(42000, factory) reactor.run()
ones = [] pos = 0 while val: if val & 1: ones.append(pos) pos += 1 val >>= 1
>>> import re >>> data = """ ... /posts/eb8c6d25-8784-4cdf-b016-4d8f6df64a62?mc_cid=37387dcb5f&mc_eid=787bbeceb2 ... /posts/d78fa5da-4cbb-43b5-9fae-2b5c86f883cb/uid/7034 ... /posts/5ff0021c-16cd-4f66-8881-ee28197ed1cf ... """ >>> >>> re.findall(r"/posts/([A-Za-z0-9\-]+)", data) ['eb8c6d25-8784-4cdf-b016-4d8f6df64a62', 'd78fa5da-4cbb-43b5-9fae-2b5c86f883cb', '5ff0021c-16cd-4f66-8881-ee28197ed1cf']
from mpl_toolkits.basemap import Basemap import matplotlib.pyplot as plt import numpy as np import csv mark_font=3 lats=lons=population=[] filename = 'D:/22_sept_14/mvsf.csv' with open(filename) as f: reader = csv.reader(f) for row in reader: lats.append(float(row[0])) lons.append(float(row[1])) population.append(float(row[2])) m = Basemap(projection='robin', resolution = 'l', area_thresh = 10000.0, lat_0=0, lon_0=0) m.drawcoastlines() m.drawcountries() m.fillcontinents(color = 'gray') m.drawmapboundary(fill_color='aqua') m.drawmeridians(np.arange(0, 360, 30)) m.drawparallels(np.arange(-90, 90, 30)) # fill continents, set lake color same as ocean color. # draw parallels and meridians. # label parallels on right and top # meridians on bottom and left parallels = np.arange(0.,81,10.) # labels = [left,right,top,bottom] m.drawparallels(parallels,labels=[False,True,True,False]) meridians = np.arange(10.,351.,20.) m.drawmeridians(meridians,labels=[True,False,False,True]) # plot blue dot on Boulder, colorado and label it as such. lon, lat = -100.237, 49.125 # Location of Boulder # convert to map projection coords. # Note that lon,lat can be scalars, lists or numpy arrays. xpt,ypt = m(lon,lat) # convert back to lat/lon lonpt, latpt = m(xpt,ypt,inverse=True) m.plot(xpt,ypt,'go',markersize=17*mark_font,alpha=.8) # plot a blue dot there # put some text next to the dot, offset a little bit # (the offset is in map projection coordinates) plt.text(xpt,ypt,'17%' , fontsize=17,color='w') lon, lat = -104.237, 40.125 # Location of Boulder # convert to map projection coords. # Note that lon,lat can be scalars, lists or numpy arrays. xpt,ypt = m(lon,lat) # convert back to lat/lon lonpt, latpt = m(xpt,ypt,inverse=True) m.plot(xpt,ypt,'ro',markersize=16*mark_font,alpha=.8) # plot a blue dot there # put some text next to the dot, offset a little bit # (the offset is in map projection coordinates) plt.text(xpt,ypt,'16%' , fontsize=16,color='w') plt.show()
from multiprocessing import Pool def process_image(name): sci=fits.open('{}.fits'.format(name)) <process> if __name__ == '__main__': pool = Pool(processes=4) # process per core pool.map(process_image, data_inputs) # proces data_inputs iterable with pool
firstFS = FS.FloatSpin(self, -1, min_val=0, max_val=None, increment=1, value=1, agwStyle=FS.FS_RIGHT) firstFS.SetName('firstFS') # for example secondFS = FS.FloatSpin(self, -1, min_val=0, max_val=None, increment=1, value=1, agwStyle=FS.FS_RIGHT) secondFS.SetName('secondFS') # for example self.Bind(FS.EVT_FLOATSPIN, self.OnFloatSpin) def OnFloatSpin(self, event): floatspin = event.GetEventObject() floatspinID = event.GetId() # grab the widgets id that is firing the event '''OR''' floatspinName = event.GetEventObject().GetName() # grab the widget name
from collections import defaultdict counts = defaultdict(int) with open("file.txt") as f: for line in f: id, content = line.split("\\t") if "$" in content: counts[id] += 1
sort input-file.txt | uniq -u -w 3
>>> x = {} >>> x['A1760ulorenaf0821x151031175821564'] = [1, 0] >>> x['A1760ulorenaf0821x151031175821564'][1] += 1 # increment the second element. >>> x {'A1760ulorenaf0821x151031175821564': [1, 1]}
from random import randint; class MatterEnergyData: def __init__(self, inputMatter, inputEnergy, resultMatter, resultEnergy): self.inputMatter = inputMatter self.inputEnergy = inputEnergy self.resultMatter = resultMatter self.resultEnergy = resultEnergy def __str__(self): return "Result matter: %s\r\nResult energy: %s" % \ self.resultMatter, self.resultEnergy class simpleAI: matterEnergyDataPoints = [] def cycle(self): inputMatter = int(input("Matter: ")) inputEnergy = int(input("Energy: ")) resultObj = None for obj in self.matterEnergyDataPoints: if obj.inputEnergy == inputEnergy and obj.inputMatter == inputMatter: print("Found positive pair from memory") resultObj = obj break if resultObj == None: print("Creating new pair...") resultObj = MatterEnergyData(inputMatter, inputEnergy, randint(0, 256), randint(0, 256)) self.matterEnergyDataPoints.append(resultObj) print resultObj
for k,v in d.iteritems(): if k.startswith('ev'): result = v break else: raise KeyError() # or set to default value
import pandas as pd data = pd.read_csv("test_rand.csv") fare = pd.read_csv("test_fare.csv") merged = pd.merge(data, fare, how='left', on=['medallion', 'hack_license', 'pickup_datetime']) merged.to_csv("merged.csv", index=False)
jsonresponse = json.loads(response.body_as_unicode())
data_files=[("/usr/local/bin", glob("bin/*"))], ...
grep -P '^(?=.*\bdavid@gmail\.com\b)(?=.*/api/upitem/)' ./file.log
lists = [[7, 6, 1, 8, 3], [1, 7, 2, 4, 2], [5, 6, 4, 2, 3], [0, 3, 3, 1, 6], [3, 5, 2, 14, 3], [3, 11, 9, 1, 1], [1, 10, 2, 3, 1]] for i in range(0, len(lists[1])): for j in range(0, len(lists)): print lists[j][i], print "\n"
import csv from collections import defaultdict db = defaultdict(list) with open('csvfile.csv') as f: csvreader = csv.reader(f) for row in csvreader: db[row[0]].append((row[1], row[4], row[5], row[6])) return db
s1='*'*100000 s2='+'*100000
name = os.path.join(os.path.dirname(__file__) or ".", "binary_file.out") subprocess.Popen(name)
TEMPLATE_DIRS = ( os.path.join(BASE_DIR, 'templates'),
urllib.urlopen('http://localhost:8082/v3/nodes?{}'.format(query))
from kivy.core.window import Window with self.canvas: self.translate = Translate(Window.width / 2, Window.height / 2.)
for field in User._meta.get_sorted_fields(): print field.name
raise HTTP(503, '<html><body>Down for maintenance</body></html>')
from selenium import webdriver browser = webdriver.Chrome() # Get local session of Chrome browser.get("http://www.somepage.com") # Load page elem = browser.find_element_by_id("show_links") # Find javascript button elem.click() # Click on the button that 'populates the div'
tuple(int(x.strip()) for x in raw_input().split(','))
lst = [['a', 'b', 'c'], [1, 2, 3], ['x', 'y']] result = [] # collect your products # n sublists: iterate over all 'sub_lengthes' for length in xrange(1, len(lst)+1): # iterate over all possible combinations of sublists for c in itertools.combinations(lst, length): # iterate over all products for each combination for res in itertools.product(*c): result.append(res) print(result) >>> result # 3 + 3 + 2 = 8 singletons [('a',), ('b',), ('c',), (1,), (2,), (3,), ('x',), ('y',), # 3*3 + 3*2 + 3*2 = 21 pairs ('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3), ('c', 1), ('c', 2), ('c', 3), ('a', 'x'), ('a', 'y'), ('b', 'x'), ('b', 'y'), ('c', 'x'), ('c', 'y'), (1, 'x'), (1, 'y'), (2, 'x'), (2, 'y'), (3, 'x'), (3, 'y'), # 3*3*2 = 18 triplets ('a', 1, 'x'), ('a', 1, 'y'), ('a', 2, 'x'), ('a', 2, 'y'), ('a', 3, 'x'), ('a', 3, 'y'), ('b', 1, 'x'), ('b', 1, 'y'), ('b', 2, 'x'), ('b', 2, 'y'), ('b', 3, 'x'), ('b', 3, 'y'), ('c', 1, 'x'), ('c', 1, 'y'), ('c', 2, 'x'), ('c', 2, 'y'), ('c', 3, 'x'), ('c', 3, 'y')]
[foo.bar for foo in foos]
(r.expr(list_) .concatMap(lambda filts_rank: r.table(...) .has_fields(r.args(filts_rank[0])) .merge({'ranking': filts_rank[1]})) ).run(...)
import cv2 new_data = data.T[::-1] # calculate the pixel coordinates of the # computational domain corners in the data array w,e,s,n = map_extent dx = float(e-w)/new_data.shape[1] dy = float(n-s)/new_data.shape[0] x = (lon.ravel()-w)/dx y = (n-lat.ravel())/dy computational_domain_corners = np.float32(zip(x,y)) data_array_corners = np.float32([[0,new_data.shape[0]], [0,0], [new_data.shape[1],new_data.shape[0]], [new_data.shape[1],0]]) # Compute the transformation matrix which places # the corners of the data array at the corners of # the computational domain in data array pixel coordinates tranformation_matrix = cv2.getPerspectiveTransform(data_array_corners, computational_domain_corners) # Make the transformation making the final array the same shape # as the data array, cubic interpolate the data placing NaN's # outside the new array geometry mapped_data = cv2.warpPerspective(new_data,tranformation_matrix, (new_data.shape[1],new_data.shape[0]), flags=2, borderMode=0, borderValue=np.nan)
In [102]: df = pd.DataFrame({'detect':np.random.randn(5), 'event':np.arange(5)}) df Out[102]: detect event 0 -0.815105 0 1 -0.656923 1 2 -1.417722 2 3 0.210070 3 4 0.211728 4 In [103]: df.ix[0,'detect'] = df.ix[0,'event'] df Out[103]: detect event 0 0.000000 0 1 -0.656923 1 2 -1.417722 2 3 0.210070 3 4 0.211728 4
def __setitem__(self, key, value, dict_setitem=dict.__setitem__): 'od.__setitem__(i, y) <==> od[i]=y' # Setting a new item creates a new link at the end of the linked list, # and the inherited dictionary is updated with the new key/value pair. if key not in self: root = self.__root last = root[0] last[1] = root[0] = self.__map[key] = [last, root, key] return dict_setitem(self, key, value)
>>> cmap = dict(zip(df.prime.unique(), colors)) >>> cmap {23: 'Purple', 2: 'DarkOrange', 3: 'DeepSkyBlue', 7: 'Yellow'} >>> df["color"] = df["prime"].replace(cmap) >>> df prime color 0 2 DarkOrange 1 2 DarkOrange 2 2 DarkOrange 3 3 DeepSkyBlue 4 7 Yellow 5 7 Yellow 6 23 Purple
def recv(): while True: data = s.recv(1024) if not data: sys.exit(0) print data Thread(target=recv).start()
select * from sys.tables select * from sys.all_columns select * from sys.views select * from sys.syscomments
def main(): root = Tk() root.overrideredirect(1) root.geometry('500x250+500+200') app = Application(root) app.parent.configure(background = 'gray32') root.resizable(width=FALSE, height=FALSE) app.mainloop()
from subprocess import Popen p = Popen(['/full/path/to/ppshelper', '-sms', '15062929382','warning']) p.terminate()
>>> l = [(1, 2, 3, 4, 5)] >>> [item for tup in l for item in tup] [1, 2, 3, 4, 5]
text = u'étourdi, etourdi, étourdi, préchauffer' words = re.findall(r'\w+', text, re.U) cap_words = [unidecode.unidecode(word).upper() for word in words]
pngcrush -rem gAMA -rem cHRM -rem iCCP -rem sRGB -brute -l 9 -max -reduce -m 0 -q IMAGE optipng -o7 -q pngout.png pngout pngout.png -q -y -k0 -s0 advpng -z -4 pngout.png > /dev/null
from collections import namedtuple MyType= namedtuple("MyType", "field1 method1") x = MyType(field1="3", method1=lambda x: x+1) print x.field1, x.method1(3)
In [3]: def importCSVtoTable(file, table, columns): ...: # 'mock' data to simulate a reader ...: reader = [{'SEGMENT': 2, 'Comp 1': 'dogs'}, {'Comp 2': 'cats', 'OTHERTHING': 4} ...: print [[row[label] for label in columns if label in row] for row in reader] ...: In [4]: importCSVtoTable(None, None, ['SEGMENT', 'Comp 1']) [[2, 'dogs'], []] In [5]: importCSVtoTable(None, None, ['SEGMENT', 'Comp 1', 'Comp 2']) [[2, 'dogs'], ['cats']]
pl = readPlist(pathOrFile) print(pl["1"])
from datetime import datetime dates = ['2014-01-01', '2014-03-07'] date_objects = [datetime.strptime(date, '%Y-%m-%d').date() for date in dates]
import Image images = ['image.jpg','image.jpg','image.jpg','image.jpg','image.jpg','image.jpg','image.jpg'] hsize = min(5,len(images)) vsize = (len(images)/5) + 1 print hsize,vsize vspace = 10 hspace = 10 (h,w) = Image.open(images[0]).size im = Image.new('RGB',((hsize*(h+hspace)),(vsize*(w+vspace)) )) for i,filename in enumerate(images): imin = Image.open(filename).convert('RGB') xpos = i % hsize ypos = i / hsize print xpos,ypos im.paste(imin,(xpos*(h+hspace),ypos*(w+vspace))) im.save('output.jpg')
title2 = planTitle.findAll("h3")[1]
import dns.resolver domain = 'bbc.co.uk' results = [] for x in dns.resolver.query(domain,'MX',): results.append(x.to_text().split(' ')[1]) print results >>> ['cluster1.eu.messagelabs.com.', 'cluster1a.eu.messagelabs.com.']
from functools import wraps def yourdecorator(func): @wraps(func): def wrapper(*args, **kw): result = func(*args, **kw) if result in certain_values: adjust_other_configuration() return result return wrapper
class WorkloadPutSerializer(serializers.Serializer): vdi = VdiSerializer(required = False) db = DbSerializer(required = False) pk = serializers.IntegerField(read_only=True) def validate(self, data): """ Check if at least one of data['vdi'] or data['vm'] exists and then return the data. Otherwise raise ValidationError. """ if data['vdi'] or data['vm']: return data else: raise serializers.ValidationError("No No No")
areas = relationship('DbArea', backref = backref('routes', order_by = 'DbRoute.name'), secondary = area_relationship_table, primaryjoin = area_id == area_relationship_table.c.descendent, secondaryjoin = DbArea.area_id == area_relationship_table.c.ancestor, innerjoin = True, order_by = DbArea.name, foreign_keys = [area_relationship_table.c.ancestor, area_relationship_table.c.descendent])
string1.rstrip("-") # "title" string2.rstrip("-") # "title" string3.rstrip("-") # "title-is-a-title"
Choice1 = input(" Pick up the box or leave it alone? (p or l): ").lower() RepGain(Choice1) print(Advent, curAdvRep) # Function for gain def RepGain (Choice): global curAdvRep global curCrmRep global Advent global Crimson if Choice in PathSelDict: if Choice == 'p': print('Reputation Gain\nAdvent + 100') curAdvRep += 100 return curAdvRep elif Choice == 'l': print('Crimson + 100') curCrmRep += 100 return curCrmRep else: print(Dismiss) sys.exit(0) Output: Reputation Gain Advent + 100 Advent of Chaos reputation: 100
with open("output.csv", "w") as f: w = csv.writer(f)
pip install modulename --download ~/folder_to_store_downloads
''' Returns frequency of function words ''' def get_func_word_freq(words,funct_words): fdist = nltk.FreqDist([funct_word for funct_word in funct_words if funct_word in words]) funct_freq = {} for key,value in fdist.iteritems(): funct_freq[key] = value return funct_freq ''' Read LIWC 2007 English dictionary and extract function words ''' def load_liwc_funct(): funct_words = set() data_file = open(liwc_dict_file, 'rb') lines = data_file.readlines() for line in lines: row = line.rstrip().split("\t") if '1' in row: if row[0][-1:] == '*' : funct_words.add(row[0][:-1]) else : funct_words.add(row[0]) return list(funct_words)
if any(isInvalid(x) for x in myList): #reject
sql_insert = 'INSERT INTO "tempHoods" (nbhd_id, nbhd_name, typology, notes, geom) values ' sql_values = ['(%s, %s, %s, %s, %s)'] data_values = [] # you can make this larger if you want # ...try experimenting to see what works best batch_size = 100 sql_stmt = sql_insert + ','.join(sql_values*batch_size) + ';' for i, row in enumerate(rows, 1): data_values += row[:5] if i % batch_size == 0: curQa.execute (sql_stmt , data_values ) data_values = [] if (i % batch_size != 0): sql_stmt = sql_insert + ','.join(sql_values*(i % batch_size)) + ';' curQa.execute (sql_stmt , data_values )
class DecoratorFactory(object): def __init__(self, value): self._value = value def decorator(self, function): def wrapper(*args, **kwargs): print(self._value) return function(*args, **kwargs) return wrapper factory = DecoratorFactory("shared between all decorators") @factory.decorator def dummy1(): print("dummy1") @factory.decorator def dummy2(): print("dummy2") # prints: # shared between all decorators # dummy1 dummy1() # prints: # shared between all decorators # dummy2 dummy2()
import datetime ... date=time.strptime(argv[1], "%y-%m-%d"); newdate=date + datetime.timedelta(days=1)
from kivy.base import runTouchApp from kivy.lang import Builder from kivy.factory import Factory from kivy.properties import ListProperty, ObjectProperty from kivy.uix.dropdown import DropDown from kivy.uix.button import Button class MultiSelectSpinner(Button): """Widget allowing to select multiple text options.""" dropdown = ObjectProperty(None) """(internal) DropDown used with MultiSelectSpinner.""" values = ListProperty([]) """Values to choose from.""" selected_values = ListProperty([]) """List of values selected by the user.""" def __init__(self, **kwargs): self.bind(dropdown=self.update_dropdown) self.bind(values=self.update_dropdown) super(MultiSelectSpinner, self).__init__(**kwargs) self.bind(on_release=self.toggle_dropdown) def toggle_dropdown(self, *args): if self.dropdown.parent: self.dropdown.dismiss() else: self.dropdown.open(self) def update_dropdown(self, *args): if not self.dropdown: self.dropdown = DropDown() values = self.values if values: if self.dropdown.children: self.dropdown.clear_widgets() for value in values: b = Factory.MultiSelectOption(text=value) b.bind(state=self.select_value) self.dropdown.add_widget(b) def select_value(self, instance, value): if value == 'down': if instance.text not in self.selected_values: self.selected_values.append(instance.text) else: if instance.text in self.selected_values: self.selected_values.remove(instance.text) def on_selected_values(self, instance, value): if value: self.text = ', '.join(value) else: self.text = '' kv = ''' BoxLayout: orientation: 'vertical' BoxLayout: Label: text: 'Select city' MultiSelectSpinner: id: city values: 'Sydney', 'Moscow', 'Warsaw', 'New York', 'Tokio' BoxLayout: Label: text: 'Select your favorite food' MultiSelectSpinner: id: food values: 'Fish and chips', 'Hot-dog', 'Hamburger' Label: text: 'You selected {} cities and {} as your favourite food.'.format(city.text, food.text) <MultiSelectOption@ToggleButton>: size_hint: 1, None height: '48dp' ''' runTouchApp(Builder.load_string(kv))
class MyView(QtGui.QGraphicsView): def mousePressEvent(self, event): if event.button() == Qt.MidButton: self.__prevMousePos = event.pos() else: super(MyView, self).mousePressEvent(event) def mouseMoveEvent(self, event): if event.buttons() == Qt.MidButton: offset = self.__prevMousePos - event.pos() self.__prevMousePos = event.pos() self.verticalScrollBar().setValue(self.verticalScrollBar().value() + offset.y()) self.horizontalScrollBar().setValue(self.horizontalScrollBar().value() + offset.x()) else: super(MyView, self).mouseMoveEvent(event)
if re.match("[A-Za-z0-9,.$:<>&=-]|\n", char):
In [17]: g = np.cumsum(df.iloc[: , 0] == 'name') In [15]: df.groupby(g).apply(lambda x : pd.DataFrame(x.set_index([0]).T , columns=['name' , 'gender' , 'year' , 'country' , 'city']) ) Out[15]: name gender year country city 0 1 1 Jack M 1993 USA Odessa 2 1 John M 1992 NaN NaN 3 1 Sam NaN NaN Canada Toronto
result = urlfetch.fetch("http://www.domain.com/", headers={"Authorization": "Basic %s" % base64.b64encode("username:password")})
import timeit from itertools import tee, izip, islice def isplit(source, sep): sepsize = len(sep) start = 0 while True: idx = source.find(sep, start) if idx == -1: yield source[start:] return yield source[start:idx] start = idx + sepsize def pairwise(iterable, n=2): return izip(*(islice(it, pos, None) for pos, it in enumerate(tee(iterable, n)))) def zipngram(text, n=2): return zip(*[text.split()[i:] for i in range(n)]) def zipngram2(text, n=2): words = text.split() return pairwise(words, n) def zipngram3(text, n=2): words = text.split() return zip(*[words[i:] for i in range(n)]) def zipngram4(text, n=2): words = isplit(text, ' ') return pairwise(words, n) s = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum." s = s * 10 ** 3 res = [] for n in range(15): a = timeit.timeit('zipngram(s, n)', 'from __main__ import zipngram, s, n', number=100) b = timeit.timeit('list(zipngram2(s, n))', 'from __main__ import zipngram2, s, n', number=100) c = timeit.timeit('zipngram3(s, n)', 'from __main__ import zipngram3, s, n', number=100) d = timeit.timeit('list(zipngram4(s, n))', 'from __main__ import zipngram4, s, n', number=100) res.append((a, b, c, d)) a, b, c, d = zip(*res) import matplotlib.pyplot as plt plt.plot(a, label="zipngram") plt.plot(b, label="zipngram2") plt.plot(c, label="zipngram3") plt.plot(d, label="zipngram4") plt.legend(loc=0) plt.show()
import requests import sys import time def downloadFile(url, directory) : localFilename = url.split('/')[-1] with open(directory + '/' + localFilename, 'wb') as f: start = time.clock() r = requests.get(url, stream=True) total_length = r.headers.get('content-length') dl = 0 if total_length is None: # no content length header f.write(r.content) else: for chunk in r.iter_content(1024): dl += len(chunk) f.write(chunk) done = int(50 * dl / total_length) sys.stdout.write("\r[%s%s] %s bps" % ('=' * done, ' ' * (50-done), dl//(time.clock() - start))) print '' return (time.clock() - start) def main() : if len(sys.argv) > 1 : url = sys.argv[1] else : url = raw_input("Enter the URL : ") directory = raw_input("Where would you want to save the file ?") time_elapsed = downloadFile(url, directory) print "Download complete..." print "Time Elapsed: " + time_elapsed if __name__ == "__main__" : main()
from django.contrib.humanize.templatetags.humanize import intcomma class ProductMaxIPPortEldCountMonthlyTable(tables.Table): ip_count = tables.Column() def render_ip_count(self, value): return intcomma(value)
import re string = "blabla Oxygen: 10.10 blabla" regex_oxygen = re.compile('''Oxygen:\W+([0-9.]*)''') result = re.findall(regex_oxygen,string) print result
SELECT * FROM Table1 AS t1 JOIN table3 as t3 ON t1.ID_table1 = t3.ID_table1 JOIN table2 as t2 ON t1.ID_table1 = t2.ID_table1 JOIN table4 as t4 ON t2.ID_table2 = t4.ID_table2
f = r"""awk -F"\t" '{print$5" "$6" "$7}' file.txt | sort | uniq -c"""
def telnet_service(resource, documents): """ fetch data from telnet device; update 'documents' accordingly """ pass app = Eve() app.on_insert += telnet_service if __name__ == "__main__": app.run()
In [11]: df = pd.DataFrame([[1, 2], [1, 4], [1, 6], [2, 8]], columns=['A', 'B']) In [12]: df Out[12]: A B 0 1 2 1 1 4 2 1 6 3 2 8 In [13]: df.head(2) # the first two rows Out[13]: A B 0 1 2 1 1 4 In [14]: df.groupby('A').head(2) # the first two rows in each group Out[14]: A B 0 1 2 1 1 4 3 2 8
import urllib2 try: response = urllib2.urlopen('https://example.com') print 'response headers: "%s"' % response.info() except IOError, e: if hasattr(e, 'code'): # HTTPError print 'http error code: ', e.code elif hasattr(e, 'reason'): # URLError print "can't connect, reason: ", e.reason else: raise
In [11]: df = pd.DataFrame([[1, 2], [3, 4]], ['a', 'b'], ['A', 'B']) In [12]: df Out[12]: A B a 1 2 b 3 4 In [13]: df.iloc[0] # first row in a DataFrame Out[13]: A 1 B 2 Name: a, dtype: int64 In [14]: df['A'].iloc[0] # first item in a Series (Column) Out[14]: 1
import hashlib class Image(models.Model): #... def save(self, *args, **kwargs): super(Image, self).save(*args, **kwargs) f = self.image_file.open('rb') hash = hashlib.sha1() if f.multiple_chunks(): for chunk in f.chunks(): hash.update(chunk) else: hash.update(f.read()) f.close() self.sha1 = hash.hexdigest() self.filesize = self.image_file.size
normalize-space(//tr[contains(td,"Description")]/following-sibling::tr[1]/td)
def test_memo__function_should_be_called_once_for_same_arg(self): @memo def f(arg): f.call_count += 1 return arg f.call_count = 0 self.assertEqual(f(1), 1) self.assertEqual(f(1), 1) self.assertEqual(f.call_count, 1) self.assertEqual(f(2), 2) self.assertEqual(f(2), 2) self.assertEqual(f(2), 2) self.assertEqual(f.call_count, 2)
file = open("test","ab") file.seek(50,0) dumped= cPickle.dumps(object) file.write(dumped) file.close()
from collections import defaultdict date_parse = re.compile(r'Date:\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)') c = defaultdict(int) for line in sys.stdin: m = date_parse.match(line) if m is None: # pattern did not match # could handle error or log it here if desired continue # skip to handling next input line month = m.group(1) c[month] += 1
1. Add layout to your main window. 2. Right click main window and click 'layout vertically' as you want button below the text area 3. Then add(drag-n-drop) your text area inside vertical area. 4. Add button and what not.... 5. Have a look at 'http://doc.qt.io/qt-4.8/designer-layouts.html' google for properties of layout like alignment of element. size, orientation.
data: {steamid: "<?php echo $steamprofile['steamid']?>"},
v = [8.4, 12.1, 36.2] print("What v do you want to be zero?") print(" 1 = v1") print(" 2 = v2") print(" 3 = v3") a = int(input("Enter your choice: ")) v[a - 1] = 0 print(v)
import matplotlib.pyplot as plt import numpy as np def plotStuff(): lines = plt.plot(np.random.rand(20)) color = lines[0].get_color() plt.plot(np.random.rand(20),color = color,label = "_nolegend_" ) plotStuff()
>>> re.findall("a+", 'sdaaddaa') ['aa', 'aa']
>>> from dateutil.parser import parse >>> s = 'Mar 31st, 2014' >>> parse(s) datetime.datetime(2014, 3, 31, 0, 0)
ax.axes.set_zticks(regions_num)
\b[a-zA-Z]\w*\.
A = Matrix( [[a1,a2,a3],[b1,b2,b3],[c1,c2,c3]]) # Creates a matrix. B = Matrix( [[x],[y],[z]])
class C(object): def __init__(self,c): self.content = c def __nonzero__(self): return bool(self.content) c1 = C(None) c2 = C([]) c3 = C([1]) print 1 if c1 else 0 #result: 0 print 1 if c2 else 0 #result: 0 print 1 if c3 else 0 #result: 1
for x in range(1, columns): for x in range(x): print(" ", end="") print("*") for x in range(columns,0,-1): for x in range(x): print(" ", end="") print("*")
{% if variable is defined %} value of variable: {{ variable }} {% else %} variable is not defined {% endif %} See the default() filter for a simple way to set undefined variables.
>>> import numpy as np >>> np.array([[ 0.29889882, 0.84955019, 0.52989055, 0.57220576, 0.16841406]]) array([[ 0.29889882, 0.84955019, 0.52989055, 0.57220576, 0.16841406]]) >>> >>> >>> ar = np.array([[ 0.29889882, 0.84955019, 0.52989055, 0.57220576, 0.16841406]]) >>> ar[:, random.randint(0,4)] array([ 0.29889882]) >>> ar[:, random.randint(0,4)] array([ 0.52989055])
$('#form').submit(function(e){ e.preventDefault(); //fill FormData with form fields var data = new FormData($(this)); data.append("photo", $("#id_photo")[0].files[0]); data.append("description",$("#id_description").val()); $.ajax({ url:'/', type: 'POST', data: data, cache:false, processData: false, contentType: false, //part related to Django crsf token beforeSend: function(xhr, settings) { if (!csrfSafeMethod(settings.type) && sameOrigin(settings.url)) { // Send the token to same-origin, relative URLs only. // Send the token only if the method warrants CSRF protection // Using the CSRFToken value acquired earlier xhr.setRequestHeader("X-CSRFToken", csrftoken); } }, success: function(data){ var parseData = $.parseJSON(data); console.log(parseData.message); } }); });
from ctypes import CDLL, c_char_p, c_int, c_long, c_ushort, c_byte, c_char, Structure, POINTER, byref, cast, sizeof, get_errno from ctypes.util import find_library class c_dir(Structure): """Opaque type for directory entries, corresponds to struct DIR""" pass class c_dirent(Structure): """Directory entry""" # FIXME not sure these are the exactly correct types! _fields_ = ( ('d_ino', c_long), # inode number ('d_off', c_long), # offset to the next dirent ('d_reclen', c_ushort), # length of this record ('d_type', c_byte), # type of file; not supported by all file system types ('d_name', c_char * 4096) # filename ) c_dirent_p = POINTER(c_dirent) c_dirent_pp = POINTER(c_dirent_p) c_dir_p = POINTER(c_dir) c_lib = CDLL(find_library("c")) opendir = c_lib.opendir opendir.argtypes = [c_char_p] opendir.restype = c_dir_p readdir_r = c_lib.readdir_r readdir_r.argtypes = [c_dir_p, c_dirent_p, c_dirent_pp] readdir_r.restype = c_int closedir = c_lib.closedir closedir.argtypes = [c_dir_p] closedir.restype = c_int import errno def listdirx(path): """ A generator to return the names of files in the directory passed in """ dir_p = opendir(path) if not dir_p: raise IOError() entry_p = cast(c_lib.malloc(sizeof(c_dirent)), c_dirent_p) try: while True: res = readdir_r(dir_p, entry_p, byref(entry_p)) if res: raise IOError() if not entry_p: break name = entry_p.contents.d_name if name not in (".", ".."): yield name finally: if dir_p: closedir(dir_p) if entry_p: c_lib.free(entry_p) if __name__ == '__main__': import sys path = sys.argv[1] max_per_dir = int(sys.argv[2]) for idx, entry in enumerate(listdirx(path)): if idx >= max_per_dir: break print entry
from P4 import P4, P4Exception p4 = P4() p4.port = "1" p4.user = "User" p4.client = "Client" try: p4.connect() changelist = p4.run_filelog('//server/folder/...@yyyy/mm/dd,@now') for r in changelist: print r.depotFile print r.revisions[0].time except P4Exception: for e in p4.errors: print e finally: p4.disconnect()
parser = argparse.ArgumentParser() parser.add_argument('input', type=argparse.FileType(), nargs='?', default=sys.stdin) args = parser.parse_args() G = defaultdict(list) for line in args.input: ...
t = Image.open("IMG_1.jpg").convert('L') #grayscale image f = array(t) #Convert test image into an array OD = 0.51*((f-22.08)/(176.09-f))**(1./-1.519) #Empirical Rodbard formula OD[np.isnan(OD)] = 0 thB = 0.02 ththin = 0.11 ththick = 0.15 GSb = 162 GSthin = 150 GSthick = 145 if np.where(OD < ththin): thresholded = threshold(f, GSthin, GSb) def to_rgb1(thresholded): thresholded.resize((thresholded.shape[0], thresholded.shape[1], 1)) return np.repeat(thresholded.astype(np.uint8), 3, 2) cmap = plt.get_cmap('jet') rgba_img1 = cmap(thresholded) rgb_img1 = np.delete(rgba_img1, 3, 2) view = rgb_img1[:, :, 2] view[view < 0.1] += 128 thin = rgb_img1 if np.where(OD > ththick): thresholded2 = threshold(f, threshmax = GSthick) def to_rgb2(thresholded2): thresholded2.resize((thresholded2.shape[0], thresholded2.shape[1], 1)) return np.repeat(thresholded2.astype(np.uint8), 3, 2) cmap = plt.get_cmap('jet') rgba_img2 = cmap(thresholded2) rgb_img2 = np.delete(rgba_img2, 3, 2) view2 = rgb_img2[:, :, 0] view2[view2 > 0] += 128 thick = rgb_img2
a, b, c = 1, 1, 1 # sides of a triangle if a + b >= c and b + c >= a and c + a >= b: # calculate area and height here else: print('Not a valid triangle')
>>> the_number = decimal.Decimal(1.23456789) >>> round(the_number, 2) Decimal('1.23') >>> d=decimal.Decimal("31.100") >>> d Decimal('31.100') >>> round(d, 10) Decimal('31.1000000000') >>> round(d, 20) Decimal('31.10000000000000000000') >>> round(d, 24) Decimal('31.100000000000000000000000') >>> round(d, 26) Decimal('31.10000000000000000000000000') >>> round(d, 1) Decimal('31.1') >>> round(d, 0) Decimal('31')
im = Image.open('image.gif') rgb_im = im.convert('RGB') r, g, b = rgb_im.getpixel((1, 1)) print r, g, b (65, 100, 137)
import numpy as np # create example file np.arange(256).astype('uint8').tofile('uint8_file.bin') # read example file and convert to uint16 u1 = np.fromfile('uint8_file.bin', 'uint8') u2 = u1.astype('uint16') u2 *= 257 # scale to full 16 bit range u2.tofile('uint16_file.bin')
from django.http import HttpResponse import xlwt def my_view(request): response = HttpResponse(mimetype="application/ms-excel") response['Content-Disposition'] = 'attachment; filename="foo.xls"' wb = xlwt.Workbook() wb.save(response) return response
#!/usr/bin/env python3 import tkinter as tk from tkinter.font import Font class Pad(tk.Frame): def __init__(self, parent, *args, **kwargs): tk.Frame.__init__(self, parent, *args, **kwargs) self.toolbar = tk.Frame(self, bg="#eee") self.toolbar.pack(side="top", fill="x") self.bold_btn = tk.Button(self.toolbar, text="Bold", command=self.make_bold) self.bold_btn.pack(side="left") self.clear_btn = tk.Button(self.toolbar, text="Clear", command=self.clear) self.clear_btn.pack(side="left") # Creates a bold font self.bold_font = Font(family="Helvetica", size=14, weight="bold") self.text = tk.Text(self) self.text.insert("end", "Select part of text and then click 'Bold'...") self.text.focus() self.text.pack(fill="both", expand=True) # configuring a tag called BOLD self.text.tag_configure("BOLD", font=self.bold_font) def make_bold(self): # tk.TclError exception is raised if not text is selected try: self.text.tag_add("BOLD", "sel.first", "sel.last") except tk.TclError: pass def clear(self): self.text.tag_remove("BOLD", "1.0", 'end') def demo(): root = tk.Tk() Pad(root).pack(expand=1, fill="both") root.mainloop() if __name__ == "__main__": demo()
let lines = File.ReadAllLines("tclscript.do") |> Seq.map (fun line -> let newLine = line.Replace("{", "{{").Replace("}", "}}") // Implement additional string processing here newLine ) File.WriteAllLines("tclscript.txt", lines)
x = [] with open('my_file.txt', 'r') as f: temp_list = [] for line in f: if line.strip(): #line is not blank temp_list.append(line) else: #line is blank, i.e., it contains only newlines and/or whitespace if temp_list: #check if temp_list contains any items x.append(temp_list) temp_list = []
>>> import bson >>> class Example(object): ... def __init__(self): ... self.a = 'a' ... self.b = 'b' ... def set_c(self, c): ... self.c = c ... >>> e = Example() >>> e <__main__.Example object at 0x7f9448fa9150> >>> e.__dict__ {'a': 'a', 'b': 'b'} >>> e.set_c(123) >>> e.__dict__ {'a': 'a', 'c': 123, 'b': 'b'} >>> bson.BSON.encode(e.__dict__) '\x1e\x00\x00\x00\x02a\x00\x02\x00\x00\x00a\x00\x10c\x00{\x00\x00\x00\x02b\x00\x02\x00\x00\x00b\x00\x00' >>> bson.BSON.encode(e) Traceback (most recent call last): File "<stdin>", line 1, in <module> File "/usr/local/lib/python2.7/dist-packages/bson/__init__.py", line 566, in encode return cls(_dict_to_bson(document, check_keys, uuid_subtype)) TypeError: encoder expected a mapping type but got: <__main__.Example object at 0x7f9448fa9150> >>>
import requests from bs4 import BeautifulSoup from collections import OrderedDict soup = BeautifulSoup(html, 'html.parser') tables = soup.find_all('table') rows = tables[1].find_all('tr') t_data = OrderedDict((row.th.text, row.td.text) for row in rows if row.td)
import glob files = glob.glob('C:\\python34\\*.txt')
new_event.save()
import datetime import os import shutil threshold = datetime.datetime.now() + datetime.timedelta(days=-7) file_time = datetime.datetime.fromtimestamp(os.path.getmtime('/folder_name')) if file_time < threshold: shutil.rmtree('/folder_name')
>>> from io import StringIO >>> import csv >>> demo = StringIO('''\ ... foo,bar,baz ... 42,88,131 ... 17,19,23 ... ''') >>> reader = csv.DictReader(demo) >>> def only_answers(row): ... return '42' in row.values() ... >>> for row in filter(only_answers, reader): ... print(row) ... {'baz': '131', 'bar': '88', 'foo': '42'}
import os import subprocess def launch_app(): os.environ['APPLICATION_ENVIRON'] = 'usr/path' application_path = 'path/to/application' return subprocess.Popen([application_path]) def _purge_finished_apps(apps): still_running = set() for app in apps: return_code = app.poll() if return_code is not None: print " PID {} no longer running (return code {})".format(app.pid, return_code) else: still_running.add(app) return still_running def ui(): apps = set() while True: print print "1. To launch new instance" print "2. To view all instances" print "3. To exit, terminating all running instances" print "4. To exit, leaving instances running" opt = int(raw_input()) apps = _purge_finished_apps(apps) if opt == 1: app = launch_app() apps.add(app) print " PID {} launched".format(app.pid) elif opt == 2: if not apps: print "There are no instances running" for app in apps: print " PID {} running".format(app.pid) elif opt == 3: for app in apps: print "Terminating PID {}".format(app.pid) app.terminate() for app in apps: app.wait() print "PID {} finished".format(app.pid) return elif opt == 4: return if __name__ == "__main__": ui()
def starts_with_vowel(word): # return True if the word starts with a vowel and False otherwise return word[0] in ['a', 'e', 'i', 'o', 'u'] def encode(word): # translate a single word to the secret language # call starts with vowel to decide which pattern to follow if starts_with_vowel(word): return word[1:] + word[0] + 'ar' else: return word + 'way' def translate(message): # translate the whole text to the secret language # call encode to translate individual words in text return ' '.join(encode(word) for word in message)
""" :rtype: (string, int, int) """
response = HttpResponse(my_data, content_type='text/x-python') response['Content-Disposition'] = 'attachment; filename="foo.py"'
from piston.emitters import Emitter, XMLEmitter class ProductXMLEmitter(XMLEmitter): def _to_xml(self, xml, data): if isinstance(data, (list, tuple)): for item in data: attrs = {} # if item contains id value, use it as an attribute instead if isinstance(item, dict): attrs["id"] = unicode(item.pop("id")) xml.startElement("product", attrs) self._to_xml(xml, item) xml.endElement("product") else: super(BetterXMLEmitter, self)._to_xml(xml, data) # replace default XMLEmitter with ours Emitter.register('xml', ProductXMLEmitter, 'text/xml; charset=utf-8')
replaced = row[0].replace('word','changed word') # I want to replace in first column=row[0] 'word' with 'changed word' row[0] = replaced writer.writerow(row)
while 1: events = po.poll(30000) if not events: print ('TIMEOUT!') for fd, flag in events: # check what's been done with os.lseek and os.read
>>> dictVar={'one':1,'two':2,'three':3} >>> listVar=dictVar.viewvalues() >>> listVar dict_values([3, 2, 1]) >>> dictVar['one']=100 >>> listVar dict_values([3, 2, 100]) >>> dictVar['four']=4 >>> listVar dict_values([4, 3, 2, 100]) >>> list(listVar)==dictVar.values() True
$ sudo docker run -p 5023:5023 -p 8050:8050 -p 8051:8051 scrapinghub/splash --disable-private-mode
#!/usr/bin/env python from __future__ import absolute_import, division, print_function def main(): code = compile('x = (5*y + 8) if z<3 else (4*y+9)', '<main>', 'exec') namespace = {'y': 10, 'z': 8} exec code in namespace print(namespace['x']) if __name__ == '__main__': main()
B = B.set_index('Date') B = B.stack() res = merge(A,B,on='Date')
>>> [[i.encode('ascii', 'ignore').replace('[', '') for i in x] for x in value] [['Seba', '10'], ['Gianfranco', '80'], ['Marco', '20'], ['Massimo', '125']]
d={'ports': [{'hw_addr': 'ee:b1:ab:b1:0e:a0', 'name': 's1-eth1', 'port_no': '00000001', 'dpid': '0000000000000201'}, {'hw_addr': 'f6:83:4d:e4:41:7d', 'name': 's1-eth2', 'port_no': '00000002', 'dpid': '0000000000000201'} ], 'dpid': '0000000000000201'} for i in d["ports"][0]: print "{} : {}".format(i,d["ports"][0][i]) hw_addr : ee:b1:ab:b1:0e:a0 name : s1-eth1 port_no: 00000001 dpid : 0000000000000201
from multiprocessing.dummy import Pool def download_logs(self): """ Downloads logs from S3 using Boto. """ if self.aws_keys: conn = S3Connection(*self.aws_keys) else: conn = S3Connection() files = [] mybucket = conn.get_bucket(self.input_bucket) pool = Pool(20) # 20 threads in the pool. Tweak this as you see fit. with tempdir.TempDir() as directory: results = pool.imap_unordered(item.get_contents_to_filename, [os.path.join(directory, item.key.split("/")[-1] for item in mybucket.list(prefix=self.input_prefix)] for result in results: yield result
import wx ######################################################################## class MyApp(wx.Frame): """""" #---------------------------------------------------------------------- def __init__(self): """Constructor""" wx.Frame.__init__(self, None, title="Example") panel = wx.Panel(self) lbl = wx.StaticText(panel, label="I'm a label!") txt = wx.TextCtrl(panel, value="blah blah") btn = wx.Button(panel, label="Clear") btn.Bind(wx.EVT_BUTTON, self.onClear) self.sizer = wx.BoxSizer(wx.VERTICAL) self.sizer.Add(lbl, 0, wx.ALL, 5) self.sizer.Add(txt, 0, wx.ALL, 5) self.sizer.Add(btn, 0, wx.ALL, 5) panel.SetSizer(self.sizer) #---------------------------------------------------------------------- def onClear(self, event): """""" children = self.sizer.GetChildren() for child in children: widget = child.GetWindow() print widget if isinstance(widget, wx.TextCtrl): widget.Clear() if __name__ == "__main__": app = wx.App(False) frame = MyApp() frame.Show() app.MainLoop()
[root@ichristo_dev]# cat process.py -- A program that reads stdin for input #! /usr/bin/python inp = 0 while(int(inp) != 10): print "Enter a value: " inp = raw_input() print "Got", inp [root@ichristo_dev]# cat communicate.py #! /usr/bin/python from subprocess import Popen, PIPE p = Popen("./process.py", stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True) o, e = p.communicate("10") print o [root@ichristo_dev]#./communicate.py Enter a value: Got 10
Set-Location C:\Python\MyProject
def fmt_3or4(v): """Format float to 4 decimal places, or 3 if ends with 0.""" s = '{:.4f}'.format(v) if s[-1] == '0': s = s[:-1] return s >>> fmt_3or4(1.02345) '1.0234' >>> fmt_3or4(1.023) '1.023' >>> fmt_3or4(1.02) '1.020'
for row in reader: id1 = ids.setdefault(row[0], len(ids))
In [69]: with open('fn') as infile: data = [line.strip().split(None,1)[1] for line in infile] ....: In [70]: data Out[70]: ["It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, co", "Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover .", 'Limit of Liability and Disclaimer of Warranty: e authors have used their best e orts in preparing this book, and the information provided herein as is. e information provided is sold without warranty, either express or implied.', 'Neither the authors nor Cartwheel Web will be held liable for any damages to be caused either directly or indirectly by the contents of this book.', 'Trademarks: Rather than indicating every occurence of a trademarked name as such, this book uses the names only in an editorial fashion and to the bene t of the trademark owner with no intention of infringement of the trademark.']
$ ./manage.py shell >>> from django import template >>> t = template.Template("""{% for f in friendslist %} ... {% if forloop.first %} ... First of the loop ... {% endif %} ... {{ f }} ... {% if forloop.last %} ... Last of the loop ... {% endif %} ... {% endfor %}""") >>> c = template.Context({'freindslist' : ['one element',]}) >>> t.render(c) First of the loop one element Last of the loop
Support for Acrobat Forms in ReportLab documents This module is somewhat experimental at this time. Includes basic support for textfields, select fields (drop down lists), and check buttons. The public interface consists of functions at the moment. At some later date these operations may be made into canvas methods. (comments?) The ...Absolute(...) functions position the fields with respect to the absolute canvas coordinate space -- that is, they do not respect any coordinate transforms in effect for the canvas.
def __init__(self): ... self.items = {'1':['a','b','c'],'2':['d','e','f'],'3':['g','h','i']} self.Combobox_1.activated[str].connect(self.on_combo_activated) ... ... def on_combo_activated(self, text): self.Combobox_2.clear() self.Combobox_2.addItems(self.items[text])
>>> l=[1,2,3] >>> ' '.join(map(str,l)) '1 2 3' >>> string=' '.join(map(string,l)) >>> map(int,string.split()) [1, 2, 3]
from imdb import IMDb ia = IMDb('sql', uri='mysql://username:password@localhost/imdb') inglorious = ia.search_movie('Inglorious Basterds')[0] ia.update(inglorious) print inglorious['soundtrack']
class A(object): pass class X(object): pass class B(A, X): pass class C(B): pass class D(C): pass sorted([B, C, A, D, X], key = lambda cls: len(cls.mro())) => [__main__.A, __main__.X, __main__.B, __main__.C, __main__.D]
print repr(message)
class Model(object): ... def __hash__(self): return hash(self._get_pk_val()) ... def __eq__(self, other): return isinstance(other, self.__class__) and \ self._get_pk_val() == other._get_pk_val()
class MainWindow(QWidget): def __init__(self): QWidget.__init__(self) layout = QGridLayout() self.sliders = [] slider_amount = 3 slider_precision = 10000 # sliders work only with ints, so large ints are used and mapped to floats for i in range(slider_amount): slider = QSlider(Qt.Horizontal) slider.setRange(0, slider_amount*slider_precision) slider.setSingleStep(slider.maximum()/100.0) slider.setPageStep(slider.maximum()/20.0) slider.valueChanged.connect(self.on_slider_value_changed) slider.float_value = (i+1)/((1+slider_amount)/2.0*slider_amount) # provide your own default values slider.label = QLabel() self.sliders.append(slider) layout.addWidget(slider, i, 0) layout.addWidget(slider.label, i, 1) self.update_slider_values() self.setLayout(layout) self.show() def on_slider_value_changed(self, value): changed_slider = self.sender() changed_slider.float_value = float(value)/changed_slider.maximum() delta = sum(slider.float_value for slider in self.sliders)-1 while abs(delta)>0.00001: d = len(self.sliders)-1 for slider in self.sliders: if slider is changed_slider: continue old_value = slider.float_value slider.float_value = min(max(0, old_value-delta/d), 1) delta -= old_value-slider.float_value d -= 1 self.update_slider_values() def update_slider_values(self): for slider in self.sliders: slider_signals_blocked = slider.blockSignals(True) slider.setValue(round(slider.float_value*slider.maximum())) slider.blockSignals(slider_signals_blocked) slider.label.setText('{:.2f}'.format(slider.float_value)) app = QApplication(sys.argv) mw = MainWindow() app.exec_()
#!/bin/bash for line in $(cat requirements.txt) do pip install $line -E /path/to/virtualenv done
is_64bits = sys.maxsize > 2**32
import subprocess, tempfile from wand.image import Image with Image(filename='wizard:') as imageOBJ: tempOBJ = tempfile.NamedTemporaryFile(suffix='.jpg', prefix='/tmp/myProject-', delete=False) imageOBJ.save(file=tempOBJ) subprocess.call('xdg-open {}'.format(tempOBJ.name), shell=True)
select firstname, lastname, avg(score) as score from class1 group by firstname, lastname order by avg(score) desc
cntent = re.sub('<[^>]+>',"\n", str(cntent)) with open(os.path.join('/Users/Brian/Documents/test', titles), "wb") as f: f.writelines(line for line in cntent.splitlines(True) if line.strip())
response = { "con": con_getinfo, "neg": neg_getinfo, ... } print "%.6f" % (response[imput]["balance"])
self.frame = QtGui.QGroupBox(self) self.frame.setTitle("Hello World")
class EmailThread(threading.Thread): def __init__(self, subject, html_content, recipient_list): self.subject = subject self.recipient_list = recipient_list self.html_content = html_content threading.Thread.__init__(self) def run (self): msg = EmailMessage(self.subject, self.html_content, EMAIL_HOST_USER, self.recipient_list) msg.content_subtype = "html" msg.send() def send_html_mail(subject, html_content, recipient_list): EmailThread(subject, html_content, recipient_list).start()
In [87]: pd.DataFrame(s).T Out[87]: 1983-05-15 1983-11-15 1984-05-15 1984-11-15 0 1 1 1 101
>>> tcpdumpProcess = subprocess.Popen(['tcpdump', '-w', 'myPackets.cap', '-i', 'eth0', '-n','ip'], stdout=subprocess.PIPE, stderr=subprocess.PIPE) >>> tcpdumpProcess.terminate() # stdout in [0], stderr in [1] >>> tcpdump_stderr = tcpdumpProcess.communicate()[1] >>> print tcpdump_stderr tcpdump: listening on eth2, link-type EN10MB (Ethernet), capture size 65535 bytes 40 packets captured 40 packets received by filter 0 packets dropped by kernel
>>> class DemoDescriptor: ... def __get__(self, instance, type_): ... if instance is None: ... print('Accesing descriptor on the class') ... return self ... print('Accessing descrtor on the instance') ... return 'Descriptor value for instance {!r}'.format(instance) ... >>> class DemoClass(object): ... foo = DemoDescriptor() ... >>> DemoClass.foo # on the class Accesing descriptor on the class <__main__.DemoDescriptor object at 0x1041d3c50> >>> DemoClass.__dict__['foo'] # bypassing the descriptor protocol <__main__.DemoDescriptor object at 0x1041d3c50> >>> DemoClass().foo # on the instance Accessing descrtor on the instance 'Descriptor value for instance <__main__.DemoClass object at 0x1041d3438>'
xdim,ydim = data.shape k = 2 a, b = np.meshgrid(range(ydim),range(xdim)) mask = (b - a -k) < 0 new_data = data[mask] new_data2 = np.array(data) # to force a copy new_data2[~mask] = 0
>>> from ansible.plugins.filter import ipaddr >>> dir(ipaddr) ['FilterModule', '_6to4_query', '__builtins__', '__doc__', '__file__', '__metaclass__', '__name__', '__package__', '_bare_query', '_bool_hwaddr_query', '_bool_ipaddr_query', '_broadcast_query', '_cidr_lookup_query', '_cidr_query', '_cisco_query', '_empty_hwaddr_query', '_empty_ipaddr_query', '_gateway_query', '_host_query', '_hostmask_query', '_int_query', '_ip_query', '_ipv4_query', '_ipv6_query', '_link_local_query', '_linux_query', '_loopback_query', '_multicast_query', '_need_netaddr', '_net_query', '_netmask_query', '_network_query', '_postgresql_query', '_prefix_query', '_private_query', '_public_query', '_revdns_query', '_size_query', '_subnet_query', '_type_query', '_unicast_query', '_unix_query', '_version_query', '_win_query', '_wrap_query', 'absolute_import', 'division', 'errors', 'hwaddr', 'ipaddr', 'ipsubnet', 'ipv4', 'ipv6', 'ipwrap', 'macaddr', 'netaddr', 'nthhost', 'partial', 'print_function', 'slaac', 'types']
import selenium from selenium import webdriver # I used Firefox, but you could use Chrome or IE browser = webdriver.Firefox() browser.get('http://www.SomeWebsite.com/login') # I needed to stop the script here to actually login. # I tried to use an existing profile w/ my username & password but the website # rejected my profile info and locked me out of the account browser.get('http://www.SomeWebsite.com/blah/blah/blah.html') element = browser.find_element_by_id("TheElementYouNeed").text # This downloads all the text from the article at this particle 'id' element
import Tkinter as tkinter root = tkinter.Tk() canvas = tkinter.Canvas(root) canvas.pack(fill=tkinter.BOTH, expand=1) # expand photo = tkinter.PhotoImage(file = 'img1.gif') root.geometry("450x450") root.update() img = canvas.create_image(225,225, image=photo) #root.after(20000, lambda: canvas.delete(img)) root.mainloop()
import itertools letters = ('',' ', 'abc','def','ghi','jkl','mno','pqrs','tuv','wxyz') reverse_dict = dict((str(ind), group) for ind,group in enumerate(letters) for c in group if letters) print reverse_dict end_nums = '3965' print end_nums, 'can produce', tuple(''.join(w) for w in itertools.product(*map(reverse_dict.get, end_nums))) word = 'word' print('%r = %s' % (word,''.join(key for c in word for key, item in reverse_dict.items() if c in item)))
from functools import partial def actual_handler(page): return u'hello' for page in session.query(Page): route = u'/{0}/{1}/{2}'.format(page.id1, page.id2, page.id3) app.add_url_rule( route, page.name, # this is the name used for url_for partial(actual_handler, page=page), )
my_list = ["Value1", "Value2"] json = simplejson.dumps(my_list) # send json
import webbrowser webbrowser.open(url[, new=0[, autoraise=True]])
import pandas sample={'user1': {'item1': 2.5, 'item2': 3.5, 'item3': 3.0, 'item4': 3.5, 'item5': 2.5, 'item6': 3.0}, 'user2': {'item1': 2.5, 'item2': 3.0, 'item3': 3.5, 'item4': 4.0}, 'user3': {'item2':4.5,'item5':1.0,'item6':4.0}} df = pandas.DataFrame([ [col1,col2,col3] for col1, d in sample.items() for col2, col3 in d.items() ])
distances = (a-b)**2 distances = distances.sum(axis=-1) distances = np.sqrt(distances)
>>> response.xpath('//p/text()').re('\w+')[2] u'some'
>>> import dis >>> def f(x, y): ... return not x in y ... >>> def g(x, y): ... return x not in y ... >>> dis.dis(f) 2 0 LOAD_FAST 0 (x) 3 LOAD_FAST 1 (y) 6 COMPARE_OP 7 (not in) 9 RETURN_VALUE >>> dis.dis(g) 2 0 LOAD_FAST 0 (x) 3 LOAD_FAST 1 (y) 6 COMPARE_OP 7 (not in) 9 RETURN_VALUE
# define necessary urls of your app which should always be present urlpatterns = patterns('', url(r'^$', 'myapp.views.home', name='home'), ) # then add urls of external apps if the app is present in INSTALLED_APPS if 'social_networks' in settings.INSTALLED_APPS: urlpatterns += patterns('', url(r'^social/', include('social_networks.urls')), )
def timer_compare(time1, time2='', note='@', time3=None): if time3 is None: time3 = time.clock()
proc = subprocess.Popen(['prog', 'arg'], shell=False, stdin=subprocess.PIPE) out, err = proc.communicate('some input')
import string alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" key = "XPMGTDHLYONZBWEARKJUFSCIQV" comp = "this is an example" tr = string.maketrans(alpha, key) print string.translate(comp.upper(), tr) # -> ULYJ YJ XW TIXBAZT
size=[140000,3504]; filesize=0; datatype='float64'; filename='my_array.dat'; fid=fopen(filename,'w+'); max_chunk_size=1000000; %fills an empty file while filesize<prod(size) to_write=min(prod(size)-filesize,max_chunk_size); filesize=filesize+fwrite(f, zeros(to_write,1), datatype); end fclose(fid); m = memmapfile(filename,'Format','double', 'Writable',true);
from scrapy.conf import settings from scrapy.contrib.exporter import CsvItemExporter class CSVkwItemExporter(CsvItemExporter): def __init__(self, *args, **kwargs): kwargs['fields_to_export'] = settings.getlist('EXPORT_FIELDS') or None kwargs['encoding'] = settings.get('EXPORT_ENCODING', 'utf-8') super(CSVkwItemExporter, self).__init__(*args, **kwargs) self._join_multivalued = settings.get('MY_CSV_DELIMITER', ',')
>>> def lowest(sequence): 'Find the lowest value in a sequence in just one-pass' best = sequence[0] for i in range(1, len(sequence)): if sequence[i] < best: best = sequence[i] return best >>> lowest(['stack', 'over', 'flow', 'please', 'help']) 'flow'
# Results container results = {} # Collect the data for item in data: # key here is just for later, # you could use anything unique to the entry # (username for example) key = "{0}.{1}".format(item.get('user_name'), item.get('question')) if key in results: results[key] += item.get('value', 0) else: results[key] = item.get('value', 0) # Prints the results as you would like. for key, count in results.iteritems(): name, question = key.split('.') print [name, question, count]
pd.merge(df1, df2, how='outer', on=['Progcode', 'Season'])
[hooks] precommit = python ~/tools/check_syntax.py $($HG root)
ftype txtfile="c:\path\to\pythonw.exe" "c:\path\to\my\editor.py" "%1"
>>> x[np.newaxis, :, :] & y[:, np.newaxis, :] & z[:, :, np.newaxis] array([[[0, 0, 0], [0, 1, 1], [0, 1, 1]], [[0, 0, 0], [0, 1, 1], [0, 1, 1]], [[0, 0, 0], [0, 0, 0], [0, 1, 1]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]) >>>
CHUNK_SIZE = 23000 ports_list_save = [] for host in results['hosts']: for protocol in results['hosts'][host]['protocols']: for port in results['hosts'][host]['protocols'][protocol]: current_port = history.Port(number=int(port), protocol=protocol, state=results['hosts'][host]['protocols'][protocol][port]['state'], service='', version='', address=history.Ip.objects.get(scan=self.scan, address=host)) ports_list_save.append(current_port) if len(ports_list_save) > CHUNK_SIZE: history.Port.objects.bulk_create(ports_list_save) ports_list_save = [] if ports_list_save: history.Port.objects.bulk_create(ports_list_save)
In [22]: df Out[22]: A B C D 0 8 3 5 8 1 9 4 0 4 2 5 4 3 8 3 4 8 5 1 In [23]: bi = df.C==0 In [24]: df.ix[bi, 'C'] = df[bi][['A', 'D']].apply(max, axis=1) In [25]: df Out[25]: A B C D 0 8 3 5 8 1 9 4 9 4 2 5 4 3 8 3 4 8 5 1
(stackoverflow)➜ my_project python ./manage.py shell Type "help", "copyright", "credits" or "license" for more information. (InteractiveConsole) >>> from django.http import HttpRequest >>> req = HttpRequest() >>> print req <HttpRequest path:, GET:{}, POST:{}, COOKIES:{}, META:{}> >>> req.GET['test'] = 'hello world' >>> print req <HttpRequest path:, GET:{'test': 'hello world'}, POST:{}, COOKIES:{}, META:{}> >>>
from scrapy.utils.markup import remove_tags # it'll print 'hello, world' print remove_tags('<p>hello, world</p>')
... def get(self): self.write("Hello, world") light_the_leds() ...
f = open("a.txt", "r") sf = f.read() f.close() sf += "some more text" f = open("a.txt", "w") f.write(sf) f.close()
def justified(title, amount, titlewidth=20, amountwidth=10): return title.ljust(titlewidth) + " = $ " + ('%.2f' % amount).rjust(amountwidth) print(justified('Parts', 12.45)) print(justified('Labor', 100)) print(justified('Tax', 2.5)) print(justified('Total', 114.95))
from pylab import * from scipy import * import matplotlib.pyplot as plt import matplotlib.patches as patches import scipy.constants as const skr = const.pi*const.epsilon_0*4 class DraggablePoint: global Polje def __init__(self, p, q0, ind): self.q = q0 self.point = p self.c_kruznice = p.center self.press = None self.indeks = ind def connect(self): self.cidpress = self.point.figure.canvas.mpl_connect('button_press_event', self.button_press_event) self.cidrelease = self.point.figure.canvas.mpl_connect('button_release_event',self.button_release_event) self.cidmotion = self.point.figure.canvas.mpl_connect('motion_notify_event', self.motion_notify_event) def disconnect(self): self.point.figure.canvas.mpl_disconnect(self.cidpress) self.point.figure.canvas.mpl_disconnect(self.cidrelease) self.point.figure.canvas.mpl_disconnect(self.cidmotion) def button_press_event(self,event): if event.inaxes != self.point.axes: return contains = self.point.contains(event)[0] if not contains: return self.press = self.point.center, event.xdata, event.ydata def button_release_event(self,event): self.press = None self.point.figure.canvas.draw() # This is the part which will erase field # and draw for us new one self.c_kruznice = self.point.center[0], self.point.center[1] if self.indeks == 0: racun = polje(drs, X, Y) ax.cla() circles = [] circles.append(ax.add_patch(circle1)) circles.append(ax.add_patch(circle)) circles.append(ax.add_patch(circle2)) circles.append(ax.add_patch(circle3)) ax.quiver(X,Y,racun[0],racun[1], color='r', alpha=0.5) ax.quiver(X,Y,racun[0],racun[1], edgecolor='k', facecolor='None', linewidth =.5) plt.draw() def motion_notify_event(self, event): if self.press is None: return if event.inaxes != self.point.axes: returnO self.point.center, xpress, ypress = self.press dx = event.xdata - xpress dy = event.ydata - ypress self.point.center = (self.point.center[0]+dx, self.point.center[1]+dy) self.point.figure.canvas.draw() if __name__ == '__main__': f_s=0.3 def R(x,y): r=np.sqrt(x**2+y**2)+f_s return r def polje(tela, X, Y): Ex = 0 Ey = 0 for i in range(len(tela)): r = R(tela[i].c_kruznice[0] - X, tela[i].c_kruznice[1] - Y ) ex = X - tela[i].c_kruznice[0] ey = Y - tela[i].c_kruznice[1] Ex += (tela[i].q/skr)*(1/(r+f_s)**3)*ex Ey += (tela[i].q/skr)*(1/(r+f_s)**3)*ey return Ex, Ey fig = plt.figure(figsize=(8,8)) ax = fig.add_axes([0.05,0.05,0.92,0.92]) ax.set_xlim(-6,6) ax.set_ylim(-6,6) scale = 0.2 X,Y=np.mgrid[-5:5:scale, -5:5:scale] circles = [] q=3*const.e s=abs(q) sx=sqrt(s/np.pi)*1e8*5 circle2 = patches.Circle((2,3), 0.3, fc='r', alpha=0.5, picker=True) circle1 = patches.Circle((2,-3), 0.3, fc='r', alpha=0.5, picker=True) circle = patches.Circle((-2,3), 0.3, fc='b', alpha=0.5, picker=True) circle3 = patches.Circle((-2,-3), 0.3, fc = 'b', alpha = 0.5, picker = True ) circles.append(ax.add_patch(circle1)) circles.append(ax.add_patch(circle)) circles.append(ax.add_patch(circle2)) circles.append(ax.add_patch(circle3)) drs = [] i = 0 q = [-1, 1, -1, 1] for c in circles: dr = DraggablePoint(c, q[i], i) dr.connect() drs.append(dr) i += 1 racun = polje(drs, X, Y) ax.quiver(X,Y,racun[0],racun[1], color='r', alpha=0.5) ax.quiver(X,Y,racun[0],racun[1], edgecolor='k', facecolor='None', linewidth =.5) plt.show()
#!/usr/bin/env python #-*- coding:utf-8 -*- import wx, os script = "/path/to/script" class myFrame(wx.Frame): def __init__(self): wx.Frame.__init__(self, None, wx.ID_ANY, 'wxButton') self.button = wx.Button(self, id=-1, label='Click Me!') self.button.Bind(wx.EVT_BUTTON, self.on_button_click) self.Show(True) def on_button_click(self, event): os.system(script) app = wx.PySimpleApp() main = myFrame() app.MainLoop()
a = np.array([1, 2, 3]) t = tuple(a)
from pyelasticsearch import ElasticSearch import json import os es = ElasticSearch(ES_CLUSTER) json_docs = [] for filename in os.listdir(os.getcwd()): if filename.endswith('.json'): with open(filename) as open_file: json_docs.append(json.load(open_file)) es.bulk(ES_INDEX, ES_TYPE, json_docs)
from datetime import timedelta start = timedelta(hours=1) end = timedelta(hours=6) duration = end - start print duration.total_seconds() / 60
user.save()
def find_domains(txt): # Regex out domains lines = txt.split('\n') domains = [] unwanted_extensions = ('.exe', '.net', '.csv') # tuple containing unwanted extensions, add more if you want. for line in lines: line = line.rstrip() results = re.findall('([\w\-\.]+(?:\.|\[\.\])+[a-z]{2,6})', line) for item in results: # check if item is not in domains already and if item doesn't end with any of the unwanted extensions. if item not in domains and not item.endswith(unwanted_extensions): domains.append(item)
import argparse import zmq parser = argparse.ArgumentParser(description='zeromq server/client') parser.add_argument('--bar') args = parser.parse_args() if args.bar: # client context = zmq.Context() socket = context.socket(zmq.REQ) socket.connect('tcp://127.0.0.1:5555') socket.send(args.bar) msg = socket.recv() print msg else: # server context = zmq.Context() socket = context.socket(zmq.REP) socket.bind('tcp://127.0.0.1:5555') while True: msg = socket.recv() if msg == 'zeromq': socket.send('ah ha!') else: socket.send('...nah')
import shutil createImage(locA, filename) shutil.move(os.path.join(locA, filename), locB)
#!/usr/bin/python2 import sys def colorize(stdoutColor, stderrColor): defaultColor = '\033[0;0m' def applyColorize(f): class colorWrapper(object): def __init__(self, wrapee, color): self.wrapee = wrapee self.color = color def __getattr__(self, attr): if attr == 'write' and self.wrapee.isatty(): return lambda x: self.wrapee.write(self.color + x + defaultColor) else: return getattr(self.wrapee, attr) def wrapper(*args, **kwds): oldStdout = sys.stdout oldStderr = sys.stderr sys.stdout = colorWrapper(oldStdout, stdoutColor) sys.stderr = colorWrapper(oldStderr, stderrColor) try: f(*args, **kwds) finally: sys.stdout = oldStdout sys.stderr = oldStderr return wrapper return applyColorize greenColor = '\033[01;32m' redColor = '\033[01;31m' def foo(): print "I'm ordinary and boring!" print >> sys.stderr, 'Writing to stderr!' @colorize(greenColor, redColor) def colorFoo(): print "I'm colorful and exciting!" print >> sys.stderr, 'Writing to stderr!' if __name__ == '__main__': foo() colorFoo() foo()
from django.test import Client @given('I am logged in') def impl(context): c = Client() c.login(email='test@email.com',password='password') cookie = c.cookies['sessionid'] b = context.browser b.get(context.server_url + '/404-loads-fastest/') # selenium will set cookie domain based on current page domain b.add_cookie({'name': 'sessionid', 'value': cookie.value, 'secure': False, 'path': '/'})
from selenium import webdriver from selenium.webdriver import DesiredCapabilities from selenium.webdriver.common.by import By from selenium.webdriver.support.wait import WebDriverWait from selenium.webdriver.support import expected_conditions as EC # set a custom user-agent user_agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36" dcap = dict(DesiredCapabilities.PHANTOMJS) dcap["phantomjs.page.settings.userAgent"] = user_agent driver = webdriver.PhantomJS(desired_capabilities=dcap) driver.get("http://www.seloger.com/list.htm?cp=40250&org=advanced_search&idtt=2&pxmin=50000&pxmax=200000&surfacemin=20&surfacemax=100&idtypebien=2&idtypebien=1&idtypebien=11") # wait for arcitles to be present wait = WebDriverWait(driver, 10) wait.until(EC.presence_of_element_located((By.TAG_NAME, "article"))) # get articles for article in driver.find_elements_by_tag_name("article"): print(article.text)
import collections words = ['all', 'awesome', 'all', 'yeah', 'bye', 'all', 'yeah'] counter = collections.Counter(words) print(counter.most_common()) >>> [('all', 3), ('yeah', 2), ('bye', 1), ('awesome', 1)]
class MyModule(object): def __init__(self, namespace): self.__dict__.update(namespace) def __getitem__(name): return self.__dict__[name] import other import sys sys.modules[other.__name__] = MyModule(other.__dict__)
static int dict_update_common(PyObject *self, PyObject *args, PyObject *kwds, char *methname) { PyObject *arg = NULL; int result = 0; if (!PyArg_UnpackTuple(args, methname, 0, 1, &arg)) result = -1; else if (arg != NULL) { _Py_IDENTIFIER(keys); if (_PyObject_HasAttrId(arg, &PyId_keys)) result = PyDict_Merge(self, arg, 1); else result = PyDict_MergeFromSeq2(self, arg, 1); } if (result == 0 && kwds != NULL) { if (PyArg_ValidateKeywordArguments(kwds)) result = PyDict_Merge(self, kwds, 1); else result = -1; } return result; }
response = urlfetch.fetch(your_url, follow_redirects=False) location = response.headers['Location']
import numpy as np import scipy as sp
#!/usr/bin/env python import sys, os import wx import wx.lib.scrolledpanel as scrolled class ImgPanel(scrolled.ScrolledPanel): def __init__(self, parent): super(ImgPanel, self).__init__(parent, style = wx.SUNKEN_BORDER) self.bitmap=wx.StaticBitmap(parent=self) image = wx.Bitmap('image.jpg') self.bitmap.SetBitmap(image) self.imgSizer = wx.BoxSizer(wx.VERTICAL) self.imgSizer.Add(self.bitmap, 1, wx.EXPAND) self.SetSizer(self.imgSizer) self.SetAutoLayout(1) self.SetupScrolling() self.Bind(wx.EVT_PAINT, self.OnPaint) self.bitmap.Bind(wx.EVT_MOTION, self.OnMove) self.bitmap.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown) self.bitmap.Bind(wx.EVT_LEFT_UP, self.OnLeftUp) self.IsRectReady = False self.newRectPara=[0,0,0,0] class WinFrame(wx.Frame): def __init__(self, parent, title, width, height): super(WinFrame, self).__init__(parent, title=title, size=(width, height)) self.imgPanel = ImgPanel(self) self.frameSizer = wx.BoxSizer(wx.HORIZONTAL) self.frameSizer.Add(self.imgPanel, 1, wx.EXPAND) self.SetAutoLayout(True) self.SetSizer(self.frameSizer) self.Layout() self.Centre() self.Show(True) class MyApp(wx.App): def __init__(self, width, height): super(MyApp, self).__init__(0) self.width = width self.height = height def createFrame(self): self.frame = WinFrame(None, "test", self.width, self.height) self.SetTopWindow(self.frame) def main(): app = MyApp(640, 480) app.createFrame() app.MainLoop() if "__main__" == __name__ : main()
from collections import defaultdict d = defaultdict(set) with open('data.csv','r') as r: for line in r: splitted = line.strip().split(',') name = splitted[3].strip() value = splitted[4].strip() d[name].add(value)
import os def convert_avi_to_mp4(avi_file_path): os.popen("ffmpeg -i '{input}' -ac 2 -b:v 2000k -c:a aac -c:v libx264 -b:a 160k -vprofile high -bf 0 -strict experimental -f mp4 'output.mp4'".format(input = avi_file_path) return True
windows command prompt>\python27\python -mtimeit -s"a=10**20;n=3" "(a>>n)&1" 1000000 loops, best of 3: 0.238 usec per loop -s"a=10**20;n=3" "(a>>n)&1" 0.238 usec -s"a=10**20;n=3" "not not(a & (1 << n))" 0.154 usec -s"a=10**200;n=3" "(a>>n)&1" 0.382 usec -s"a=10**200;n=3" "not not(a & (1 << n))" 0.155 usec -s"a=10**10;n=3" "(a>>n)&1" 0.231 usec -s"a=10**10;n=3" "not not(a & (1 << n))" 0.156 usec -s"a=10**9;n=3" "(a>>n)&1" 0.0801 usec -s"a=10**9;n=3" "not not(a & (1 << n))" 0.0938 usec -s"a=2**1000;n=64" "(a>>n)&1" 0.446 usec -s"a=2**1000;n=64" "not not(a & (1 << n))" 0.255 usec
In [19]: df.columns[df.sum(axis=0) == 1] Out[19]: Int64Index([5, 6, 7, 8], dtype='int64')
stmt = session.query(Address).\ limit(5).\ subquery() adalias = aliased(Address, stmt) for user, address in session.query(User, adalias).\ join(adalias, User.addresses): print user print address
return map(lambda x: x.doSomething(), filter(lambda x: x[0] == "z", getIterator()))
import numpy as np import matplotlib.pyplot as plt x = y = np.linspace(1, 10, 10) t1mean, t2mean = 2, 9 sigma1, sigma2 = .3, .01 t1 = np.random.normal(t1mean, sigma1, 10) t2 = np.random.normal(t2mean, sigma2, 10) class nlcmap(object): def __init__(self, cmap, levels): self.cmap = cmap self.N = cmap.N self.monochrome = self.cmap.monochrome self.levels = np.asarray(levels, dtype='float64') self._x = self.levels self.levmax = self.levels.max() self.transformed_levels = np.linspace(0.0, self.levmax, len(self.levels)) def __call__(self, xi, alpha=1.0, **kw): yi = np.interp(xi, self._x, self.transformed_levels) return self.cmap(yi / self.levmax, alpha) tmax = max(t1.max(), t2.max()) #the choice of the levels depends on the data: levels = np.concatenate(( [0, tmax], np.linspace(t1mean - 4 * sigma1, t1mean + 4 * sigma1, 5), np.linspace(t2mean - 4 * sigma2, t2mean + 4 * sigma2, 5), )) levels = levels[levels <= tmax] levels.sort() cmap_nonlin = nlcmap(plt.cm.jet, levels) fig, (ax1, ax2) = plt.subplots(1, 2) ax1.scatter(x, y, edgecolors=cmap_nonlin(t1), s=15, linewidths=4) ax2.scatter(x, y, edgecolors=cmap_nonlin(t2), s=15, linewidths=4) fig.subplots_adjust(left=.25) cbar_ax = fig.add_axes([0.10, 0.15, 0.05, 0.7]) #for the colorbar we map the original colormap, not the nonlinear one: sm = plt.cm.ScalarMappable(cmap=plt.cm.jet, norm=plt.Normalize(vmin=0, vmax=tmax)) sm._A = [] cbar = fig.colorbar(sm, cax=cbar_ax) #here we are relabel the linear colorbar ticks to match the nonlinear ticks cbar.set_ticks(cmap_nonlin.transformed_levels) cbar.set_ticklabels(["%.2f" % lev for lev in levels]) plt.show()
df = df.rename(columns=month_dict).sort_index(axis=1)
from email.parser import FeedParser f = FeedParser() f.feed("<insert mail message here, including all headers>") rootMessage = f.close() # Now you can access the message and its submessages (if it's multipart) print rootMessage.is_multipart() # Or check for errors print rootMessage.defects # If it's a multipart message, you can get the first submessage and then its payload # (i.e. content) like so: rootMessage.get_payload(0).get_payload(decode=True)
awk '{ print >> $5 }' yourfile
valid_kwargs = get_valid_kwargs(cls.__init__, config_dict)
import numpy as NP A = NP.random.randint(0, 10, 100) bins = NP.array([0., 20., 40., 60., 80., 100.]) # d is an index array holding the bin id for each point in A d = NP.digitize(A, bins)
import matplotlib.dates as mdates import matplotlib.mlab as mlab import matplotlib.pyplot as plt import datetime as dt import sys def main( datafile ): np_rec_array = mlab.csv2rec( datafile, delimiter='\t' ) np_rec_array.sort() # in-place sort # a `figure` is a starting point for MPL visualizations fig = plt.figure( figsize=(8,6) ) # add a set of `axes` to above `figure` ax = fig.add_subplot(111) x = np_rec_array.visit_time y = np_rec_array.total_visits # `plot_date` is like `plot` but allows for easier x-axis formatting ax.plot_date(x, y, 'o-', color='g') # show time every 30 minutes ax.xaxis.set_major_locator( mdates.MinuteLocator(interval=30) ) # specify time format ax.xaxis.set_major_formatter( mdates.DateFormatter("%H:%M") ) # set x-axis label rotation (otherwise they can overlap) for l in ax.get_xticklabels(): l.set_rotation(60) plt.title( 'Website Visits' ) plt.show() if __name__ == '__main__': if len( sys.argv ) == 1: sys.stderr.write( 'need a filename, exiting...' ) sys.exit(-1) main( sys.argv[1] )
class MyMainWindow(QWidget): def __init__(self): QWidget.__init__(self, None) vbox = QVBoxLayout(self) self.sone = QSlider(Qt.Horizontal) self.sone.setRange(0,99) self.sone.setValue(0) vbox.addWidget(self.sone) self.stwo = QSlider(Qt.Horizontal) self.stwo.setRange(0,99) self.stwo.setValue(99) vbox.addWidget(self.stwo) self.sone.valueChanged.connect(self.sliderChanged) def sliderChanged(self, val): self.stwo.setValue(self.stwo.maximum() - val)
>>> import dis >>> def test(x, y): ... x, y = y, x ... >>> dis.dis(test) 2 0 LOAD_FAST 1 (y) 3 LOAD_FAST 0 (x) 6 ROT_TWO 7 STORE_FAST 0 (x) 10 STORE_FAST 1 (y) 13 LOAD_CONST 0 (None) 16 RETURN_VALUE
class dequePlus(collections.deque): def __init__(self, iterable): collections.deque.__init__(self, iterable, 100)
def custom_files(members): for tarinfo in members: if os.path.splitext(tarinfo.name)[1] != ".html": yield tarinfo tar = tarfile.open("sample.tar.gz") tar.extractall(members=custom_files(tar)) tar.close()
#!/usr/bin/env python # -*- coding: UTF-8 -*- import multiprocessing # We must import this explicitly, it is not imported by the top-level # multiprocessing module. import multiprocessing.pool import time from random import randint class NoDaemonProcess(multiprocessing.Process): # make 'daemon' attribute always return False def _get_daemon(self): return False def _set_daemon(self, value): pass daemon = property(_get_daemon, _set_daemon) # We sub-class multiprocessing.pool.Pool instead of multiprocessing.Pool # because the latter is only a wrapper function, not a proper class. class MyPool(multiprocessing.pool.Pool): Process = NoDaemonProcess def sleepawhile(t): print("Sleeping %i seconds..." % t) time.sleep(t) return t def work(num_procs): print("Creating %i (daemon) workers and jobs in child." % num_procs) pool = multiprocessing.Pool(num_procs) result = pool.map(sleepawhile, [randint(1, 5) for x in range(num_procs)]) # The following is not really needed, since the (daemon) workers of the # child's pool are killed when the child is terminated, but it's good # practice to cleanup after ourselves anyway. pool.close() pool.join() return result def test(): print("Creating 5 (non-daemon) workers and jobs in main process.") pool = MyPool(5) result = pool.map(work, [randint(1, 5) for x in range(5)]) pool.close() pool.join() print(result) if __name__ == '__main__': test()
import urllib2 from cookielib import CookieJar cookiejar = CookieJar() opener = urllib2.build_opener() cookieproc = urllib2.HTTPCookieProcessor(cookiejar) opener.add_handler(cookieproc)
class MyClass(object): def __init__(self, ...): self._session = ... def insert_stuff(self, table): self._session.add(table) c = MyClass(...) t = MyTableClass(...) c.insert_stuff(t)
final = myClassObject.getPlays() print final
class Foo: def __init__(self): self.bars = [] def append_bar(self, *args, **kwargs): self.bars.append(Bar(*args, **kwargs)) class Bar: def __init__(self, a, b, c, d): self.a = a self.b = b self.c = c self.d = d f=Foo() f.append_bar(1,2,3,4)
chr(ord('b') + 1)
import subprocess stdoutdata = subprocess.getoutput("wc --lines /var/log/syslog") print("stdoutdata: " + stdoutdata.split()[0])
def OnMessageStatus(msg, status): if status == Skype4Py.cmsReceived: msg.Chat.SendMessage("n/a")
class PollForm(forms.ModelForm): # used in manage view class Meta: model = StandardWork exclude = ('cbs_and_role','publish', 'standard_work_number') widgets = { 'system_description': forms.Textarea(attrs={'rows':3}), } def __init__(self, *args, **kwargs): super(PollForm, self).__init__(*args, **kwargs) if self.instance: print "printing in form" print self.instance.id self.fields['ideal_behaviour'].queryset = IdealBehaviour.objects.filter(cbs__exact=cbsobject)
def func(df1): idx = df1.index.get_level_values(0)[0] df1 = df1.loc[idx] return (df1['Values'] / df1.loc['Calc']['Values']).to_frame() df.groupby(level=0).apply(func)
if user_can_read(request.user, b): ## do stuff
/// <summary> /// Set up an IronPython environment - for interactive shell or for canned scripts /// </summary> public void SetupEnvironment(ScriptEngine engine, ScriptScope scriptScope) { // add variables from Revit scriptScope.SetVariable("__revit__", _commandData.Application); scriptScope.SetVariable("__commandData__", _commandData); scriptScope.SetVariable("__message__", _message); scriptScope.SetVariable("__elements__", _elements); scriptScope.SetVariable("__result__", (int)Result.Succeeded); // add preconfigures variables scriptScope.SetVariable("__vars__", RevitPythonShellApplication.GetVariables()); // add the current scope as module '__main__' var languageContext = Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetLanguageContext(engine); var pythonContext = (IronPython.Runtime.PythonContext)languageContext; var module = pythonContext.CreateModule(null, GetScope(scriptScope), null, IronPython.Runtime.ModuleOptions.None); pythonContext.PublishModule("__main__", module); // add the search paths AddSearchPaths(engine); } /// <summary> /// Be nasty and reach into the ScriptScope to get at its private '_scope' member, /// since the accessor 'ScriptScope.Scope' was defined 'internal'. /// </summary> private Microsoft.Scripting.Runtime.Scope GetScope(ScriptScope scriptScope) { var field = scriptScope.GetType().GetField( "_scope", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance); return (Microsoft.Scripting.Runtime.Scope) field.GetValue(scriptScope); }
def main(): done = False while not done: limit = ask_limit() speed = ask_speed() findfine(speed, limit) done = raw_input("Done? ") == "yes"
with open('your_file', 'w') as f: f.write('Some text\n')
def find_word_vertical(crosswords,word): z=[list(i) for i in zip(*crosswords)] for rows in z: row_index = z.index(rows) single_row = ''.join(rows) column_index = single_row.find(word) if column_index >= 0: return([column_index, row_index])
import re password = raw_input("Enter string to test: ") if re.match(r'[A-Za-z0-9@#$%^&+=]{8,}', password): # match else: # no match
import numpy as np from scipy.optimize import fmin_l_bfgs_b # do the math by hand, it's quite simple in this case def target_fun(p, k, n): f = - k* np.log(p) - (n-k)*np.log(1-p) g = - k/p + (n-k) / (1-p) return f, g f = lambda p: target_fun(p, k=6, n=9) epsilon = 1e-9 fmin_l_bfgs_b(f, 0.999, bounds=[(epsilon,1-epsilon)])
/env/<env>/artifact/<artifact>?verbose=1&noformat=1
def decider(x, y, condition, val): if condition: return val, y return x, val a, b = decider(a, b, cond, value)
import copy new_list = copy.deepcopy(old_list)
http://example.com/api/users?ordering=-time http://example.com/api/users?ordering=username
for i in range(len(words)): for j in range(i+1, len(words)): word, other_word = words[i], words[j] ...
>>> from sqlalchemy.util import KeyedTuple >>> res = KeyedTuple(a + b, a.keys() + b.keys())
>>> import sys >>> print sys.executable /usr/bin/python
def generate_serial(): return random.choice(string.ascii_uppercase) + random.choice(string.digits) class CardFactory(DjangoModelFactory): class Meta: model = Card serial_number = FuzzyAttribute(generate_serial)
FORM_DATA = { '__EVENTTARGET': '', '__EVENTARGUMENT': '', '__VIEWSTATE': '/wEPDwUKMTA5NTA5ODU1MQ9kFgJmD2QWAgIGDxBkDxYFZgIBAgICAwIEF***REMAINDER REMOVED***', '__EVENTVALIDATION': '/wEdAAp4d3BHvSTs+Kv6cxGP3xEbBr8xrgRYad2tj4YCyRIw5qUAjimf****REMAINDER REMOVED****', 'jsCheck': '', 'ddlEngine': 'REMOVED:13008', 'Username': uname, 'Password': passw, 'btnLogin.x': '42', 'btnLogin.y': '9', 'btnLogin': 'Login', }
{% for user in all_entries_user %} Do your thing with {{ user }} {% endfor %}
col_ext_name = Document.ActiveDataTableReference.Columns["I_id"].Properties["ExternalName"] print(col_ext_name) >> index_id
import matplotlib.pylab as plt import matplotlib.animation as animation import numpy as np #create image with format (time,x,y) image = np.random.rand(100,10,10) #setup figure fig = plt.figure() ax1 = fig.add_subplot(1,2,1) ax2 = fig.add_subplot(1,2,2) #set up viewing window (in this case the 25 most recent values) repeat_length = (np.shape(image)[0]+1)/4 ax2.set_xlim([0,repeat_length]) #ax2.autoscale_view() ax2.set_ylim([np.amin(image[:,5,5]),np.amax(image[:,5,5])]) #set up list of images for animation im = ax1.imshow(image[0,:,:]) im2, = ax2.plot([], [], color=(0,0,1)) def func(n): im.set_data(image[n,:,:]) im2.set_xdata(np.arange(n)) im2.set_ydata(image[0:n, 5, 5]) if n>repeat_length: lim = ax2.set_xlim(n-repeat_length, n) else: # makes it look ok when the animation loops lim = ax2.set_xlim(0, repeat_length) return im, im2 ani = animation.FuncAnimation(fig, func, frames=image.shape[0], interval=30, blit=False) plt.show()
def f(x1, a1, b1, c1, d1): return c1 * (((x1 - a1)/(d1 - x1))**1/b1) x_data = np.array([176.5, 161.333, 66.1667, 40.833]) y_data = np.array([0., 0.1, 0.9, 2.5]) p0 = np.array([168., -0.01, -7.4, 35000.]) popt, pcov = opt.curve_fit(f, x_data, y_data, p0, None, False, True, ftol = 0.00001)
table='''乘客姓名,性别,出生日期 HuangTianhui,男,1948/05/28 姜翠云,女,1952/03/27 李红晶,女,1994/12/09 LuiChing,女,1969/08/02 宋飞飞,男,1982/03/01 唐旭东,男,1983/08/03 YangJiabao,女,1988/08/25 提江·阿布拉,男,1979/07/10 安文兰,女,1949/10/20 胡偲婠(婴儿),女,2011/02/25 (有待确定姓名),男,1985/07/20 ''' table = table.encode('gb18030') data = [[cell for cell in row.split(b",")] for row in table.split(b"\n") if row] len0 = max([len(x[0]) for x in data]) len1 = max([len(x[1]) for x in data]) len2 = max([len(x[2]) for x in data]) for cell in data: print("_" * (len0+len1+len2+4)) line = ( b"|" + cell[0].rjust(len0) + b"|" + cell[1].rjust(len1) + b"|" + cell[2].rjust(len2) + b"|" ) print(line.decode('gb18030'))
cs = tricontourf(tri,height) for collection in cs.collections: for path in collection.get_paths(): print path.to_polygons()
#!/usr/bin/python import sys d = {} line_list=[] alist=[] f = open(sys.argv[3], 'r') # Persisted Dictionary File for line in f: line = line.strip() if line =="": continue alist = line.split() key = alist[0] value = alist[1] d[str(key)] = str(value) alist=[] f.close() fr = open(sys.argv[1], 'r') # source file fw = open(sys.argv[2]+"/masked_"+sys.argv[1], 'w') # Target Directory Location for line in fr: line = line.strip() if line == "": continue columns = line.strip().split('|') if columns[0].find("@") > 1: looking_for = columns[0] # this is what we need to search else: looking_for = "Dummy@dummy.com" if looking_for in d: # by default, iterating over a dictionary will return keys new_line = d[looking_for]+'|'+'|'.join(columns[1:]) line_list.append(new_line) else: new_idx = str(len(d)+1) d[looking_for] = new_idx kv = open(sys.argv[3], 'a') kv.write(looking_for+" "+new_idx+'\n') kv.close() new_line = d[looking_for]+'|'+'|'.join(columns[1:]) line_list.append(new_line) fw.writelines(line_list)
import urllib.parse parsed = urllib.parse.urlparse(sys.argv[1]) mail_addr = parsed.path fields = urllib.parse.parse_qs(parsed.query)
re.findall(r'(?<![!])\b\w+', ' !Hai Yo!')
{ "query": { "function_score": { "query": { "match": { "text": "how now brown cow" } }, "functions": [{ "script_score": { "script": "doc['weight'].value" } }], "score_mode": "multiply" } } }
pattern = r"\w.\d{3}\-\w+.(jpg|Jpg|JPG)" for filename in FileList: if displaymatch(re.match(pattern, filename)) is None: os.rename(filename, "P." + str("{0:0=3d}".format(num)) + "-" + filename) num+= 1
your_sum = sum([ord(i) for i in '\xff\x1a'])
timeout 100 ./myprocess.py
>>> import string >>> string.letters 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' >>> import random >>> random.choice(string.letters) 'j'
my_handler = TimedRotatingFileHandler(LOG_PATH, when='midnight', backupCount=20)
def receive(self, message): plaintext_body = '' for plain in message.bodies('text/plain'): plaintext_body = plain[1].decode() if not plaintext_body and hasattr(message, 'attachments'): for attachment in message.attachments: if attachment[0].endswith('.txt'): plaintext_body = attachment[1].decode() if plaintext_body: break
#!/usr/bin/env python import MySQLdb # Open databse connection db = MySQLdb.connect(host="****",user="****",passwd="****",db="****") #Prepare a cursor object using cursor() method cur = db.cursor(MySQLdb.cursors.DictCursor) #Execute SQL query using execute() method cur.execute("SELECT sensor_id, sensor_types.type_name FROM sensors INNER JOIN sensor_types ON sensors.type_id=sensor_types.type_id") #Fetch the results data = cur.fetchall() #Print out results for row in data: print row["sensor_id"],row["type_name"] #Disconnect from server db.close()
class baseTest(unittest.TestCase): def setUp(self): print('base setup') self.A = 100 def testSomething(self): print('base test') self._DoTestSomething(self) def _DoTestSomething(self) # Do something with self.A class subTest(baseTest): def setUp(self): print('sub setup') self.A = 999 def _DoTestSomething(self) # Do something with self.A
np.any(np.absolute(my_array) < eps)
motifs = [ x.strip() for x in open('final motifs_11SGLOBULIN','r') ] redact = '*****' with open('11sglobulin.seqs','r') as data_in, open('11sglobulin.seqs.new','w') as data_out: for seq in data_in: for motif in motifs: while True: x = seq.find(motif) if x >= 0: seq = seq[:x] + redact + seq[x+len(motif):] else: break data_out.write(seq)
def total_len(bst): if isinstance(bst, tuple): if bst == (): return 0 else: return total_len(bst[0]) + total_len(bst[1:]) else: return len(bst)
>>> import lxml.html >>> text_string = '''<html> ... <body> ... <p>Hello World!</p> ... <p>Goodbye!</p> ... </body> ... </html>''' >>> root = lxml.html.document_fromstring(text_string) >>> text_elements = root.xpath('//text()') >>> for t in text_elements: ... print t.getparent(), type(t), repr(t) ... <Element body at 0x193b170> <class 'lxml.etree._ElementStringResult'> '\n ' <Element p at 0x193b1d0> <class 'lxml.etree._ElementStringResult'> 'Hello World!' <Element p at 0x193b1d0> <class 'lxml.etree._ElementStringResult'> '\n ' <Element p at 0x193b290> <class 'lxml.etree._ElementStringResult'> 'Goodbye!' <Element p at 0x193b290> <class 'lxml.etree._ElementStringResult'> '\n '
l1 = [('A', 1, 3), ('B', 2, 5), ('C', 3, 16), ('D', 4, 19), ('E', 5, 20)]; l2 = [('A', 1), ('C', 2), ('F', 8), ('D', 15), ('X',21)]; l3 = [('C', 1), ('F', 4), ('R', 16), ('D', 19), ('Z', 31)] for k in l1,l2,l3: # 'dummy to keep track of tuple size' k.append(('dummy',len(k[0][1:]))) dict_lx = [ dict(map(lambda x: (x[0], x[1:]), l)) for l in l1,l2,l3 ] sorted_keys = sorted(set(reduce(lambda x,y : x + y.keys(), dict_lx, []))) final = map(lambda key: tuple( [key] + reduce(lambda x,y: x + list(y.get(key, y.get('dummy')[0]*[0])), dict_lx, [])), sorted_keys) final = filter(lambda x: x[0] != 'dummy', final) print final #[('A', 1, 3, 1, 0), ('B', 2, 5, 0, 0), ('C', 3, 16, 2, 1), ('D', 4, 19, 15, 19), ('E', 5, 20, 0, 0), ('F', 0, 0, 8, 4), ('R', 0, 0, 0, 16), ('X', 0, 0, 21, 0), ('Z', 0, 0, 0, 31)]
indices = [['islink',], ['authors', 0, 'name']] result = [] for index in indices: value = input_dict for single_index in index: value=value[single_index] result.append(value)
# this basic string query is safe query = Song.all() query.filter('title =', self.request.get('title')) # a GqlQuery version of the previous example query = GqlQuery("SELECT x FROM Song WHERE title = :1",self.request.get('title')) # sanitize/validate when you have requirements: e.g., year must be a number query = Song.all() try: year = int(self.request.get('year')) # make sure we got a number except: show error msg query.filter('year =', year)
r=1.220536239336080619e+01 print "%-.24f"%(r) 12.205362393360806194664292
class USBclient(Protocol): def connectionMade(self): global serServ serServ = self print 'Arduino device: ', serServ, ' is connected.' def cmdReceived(self, cmd): serServ.transport.write(cmd) print cmd, ' - sent to Arduino.' pass def dataReceived(self,data): print 'USBclient.dataReceived called with:' print str(data)
import binascii, doctest def ascii_to_packed_hex(string_data): r""" >>> binascii.a2b_hex('01') '\x01' >>> binascii.a2b_hex('0102030405') '\x01\x02\x03\x04\x05' >>> binascii.a2b_hex('fafbfcfd') '\xfa\xfb\xfc\xfd' >>> binascii.a2b_hex('31323334') '1234' """ doctest.testmod()
def give_matrix(arr,i,j): res = [] for ii in range(i-2,i+3): inner_res = [] for jj in range(j-2,j+3): if (ii-2<0 or ii+3>n or jj-2<0 or jj+3>n): # manage borders inner_res.append('x') else: inner_res.append(arr[ii][jj]) res.append(inner_res) return res
import os import glob for filename in glob.glob('*.apk'): os.system("java -Xmx4g -cp soot-trunk.jar;soot-infoflow.jar;soot-infoflow-android.jar;slf4j-api-1.7.5.jar;s‌​lf4j-simple-.7.5.jar;axml-2.0.jar soot.jimple.infoflow.android.TestApps.Test C:\\Users\\Admin\\Downloads\\DroidBench-master\\DroidBench-master\\apk\\nf\\%s C:\\Users\\Admin\\Downloads\\EnSoft\\EnSoft\\android-sdk\\platforms" % filename)
import cv capture = cv.CaptureFromFile(filename) while Condition1: # Need a frame to get the output video dimensions frame = cv.RetrieveFrame(capture) # Will return None if there are no frames # New video file video_out = cv.CreateVideoWriter(output_filenameX, CV_FOURCC('M','J','P','G'), capture.fps, frame.size(), 1) # Write the frames cv.WriteFrame(video_out, frame) while Condition2: frame = cv.RetrieveFrame(capture) # Will return None if there are no frames cv.WriteFrame(video_out, frame)
fields = ax.stackplot(df.index,df.field1,df.field2) colors = [field.get_facecolor()[0] for field in fields] patch1=mpl.patches.Patch(color=colors[0],label= 'field 1') patch2=mpl.patches.Patch(color=colors[1], label ='field 2')
# Sometimes MCO gives us a ruby hash as a string, We can coerce this into json then into dictionary def convert_hash_to_dict(self,ruby_hash): dict_str = ruby_hash.replace(":",'"') # Remove the ruby object key prefix dict_str = dict_str.replace("=>",'" : ') # swap the k => v notation, and close any unshut quotes dict_str = dict_str.replace('""','"') # strip back any double quotes we created to sinlges return json.loads(dict_str)
String formFile = "/path/to/myform.pdf" String newFile = "/path/to/output.pdf" PdfReader reader = new PdfReader(formFile); FileOutputStream outStream = new FileOutputStream(newFile); PdfStamper stamper = new PdfStamper(reader, outStream); AcroFields fields = stamper.getAcroFields(); // fill the form fields.setField("name", "Shane"); fields.setField("url", "http://stackoverflow.com"); // PDF infos HashMap<String, String> infoDoc = new HashMap<String, String>(); infoDoc.put("Title", "your title here"); infoDoc.put("Author", "JRE ;)"); stamper.setMoreInfo(infoDoc); // Flatten the PDF & cleanup stamper.setFormFlattening(true); stamper.close(); reader.close(); outStream.close();
>>> class Foo(object): ... d = {'foo': 'bar'} ... (lambda stuff: d[stuff])('foo') Traceback (most recent call last): File "<pyshell#3>", line 1, in <module> class Foo(object): File "<pyshell#3>", line 3, in Foo (lambda stuff: d[stuff])('foo') File "<pyshell#3>", line 3, in <lambda> (lambda stuff: d[stuff])('foo') NameError: global name 'd' is not defined >>> class Foo(object): ... d = {'foo': 'bar'} ... def f(stuff): ... d[stuff] ... f('foo') Traceback (most recent call last): File "<pyshell#4>", line 1, in <module> class Foo(object): File "<pyshell#4>", line 5, in Foo f('foo') File "<pyshell#4>", line 4, in f d[stuff] NameError: global name 'd' is not defined
for k in d: print('The key is {} and the value is {}'.format(k, d[k]))
(gdb) target exec python (gdb) run >>> import your_extension as ye >>> ye.do_something () >>> # do your python here >>> # or just run your python script from here (gdb) do debugging stuff
>>> [n.targets[0].id for n in ast.walk(ast.parse("x = struct()")) if isinstance(n, ast.Assign) and isinstance(n.value, ast.Call) and n.value.func.id == 'struct'] ['x']
import os id = raw_input('please enter the file numbers id:') file='AY{0}1.txt'.format(id) if not os.path.exists(file): print "Error the file doesn't exists" else: g,a,c,t=0,0,0,0 with open(file,'r') as f: next(f) for line in f: for char in line.lower(): if char == 'g': g+=1 if char == 'a': a+=1 if char == 'c': c+=1 if char == 't': t+=1 print "Guanina: {0}".format(g) print "Adenina: {0}".format(a) print "Citosina: {0}".format(c) print "Timina: {0}".format(t) gc = (g+c+0.) / (a+t+c+g+0.) print "Conteúdo GC: {0}".format(gc)
@app.route('/errorform', methods=['GET', 'POST']) def errorform(): form = ErrorForm() logs = str(open(file, "r").readlines()[int(file_len(file))]).rstrip() if form.validate_on_submit(): if form.includeLogs.data == False: return redirect('mailto:test@mail.com?subject=Feedback&body=<insert your message here>') else: return redirect('mailto:test@mail.com?subject=Feedback&body=<insert your message here> \n\n Logs: %s' % (logs)) return render_template('main.html', form=form, show_results=0, page = 'errorform')
>>> some_lst = [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> l = [some_lst[i:i+3] for i in xrange(len(some_lst)-2)]
import requests import sys from requests.auth import HTTPBasicAuth, HTTPDigestAuth AUTH_MAP = { 'basic': HTTPBasicAuth, 'digest': HTTPDigestAuth, } def auth_get(url, *args, **kwargs): r = requests.get(url) if r.status_code != 401: return r auth_scheme = r.headers['WWW-Authenticate'].split(' ')[0] auth = AUTH_MAP.get(auth_scheme.lower()) if not auth: raise ValueError('Unknown authentication scheme') r = requests.get(url, auth=auth(*args, **kwargs)) return r if __name__ == '__main__': print auth_get(*sys.argv[1:])
import numpy as np def submatrix(arr): x, y = np.nonzero(arr) # Using the smallest and largest x and y indices of nonzero elements, # we can find the desired rectangular bounds. # And don't forget to add 1 to the top bound to avoid the fencepost problem. return arr[x.min():x.max()+1, y.min():y.max()+1] test = np.array([[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0]]) print submatrix(test) # Result: # [[1 1 1 1] # [0 1 1 0]]
import types class A: def meth1(self, par1): print("in A.meth1: par1 =", par1) a = A() s = '''def meth1(self, par1): print("in recompiled A.meth1: par1 = ", par1)''' code = compile(s, __file__, "exec") environment = {} exec(code, environment) a.meth1 = types.MethodType(environment["meth1"], A) a.meth1("via meth1")
cv2.setWindowProperty("window", cv2.WND_PROP_FULLSCREEN, cv2.cv.CV_WINDOW_FULLSCREEN)
>>> x = [(('university', 'NN'), 'nsubj', ('bit', 'NN')), (('university', 'NN'), 'cop', ('is', 'VBZ')), (('university', 'NN'), 'amod', ('good', 'JJ'))] >>> for arg1, pred, arg2 in x: ... word1, pos1 = arg1 ... word2, pos2 = arg2 ... if pos1.startswith('NN') and pos2.startswith('JJ') and pred == 'amod': ... print ((arg1, pred, arg2)) ... (('university', 'NN'), 'amod', ('good', 'JJ'))
list_key_value_tuples = [("A", 1), ("B", 2), ("A", 3)] d = {} for key, value in list_key_value_tuples: d[key] = d.get(key, 0) + value > print d {'A': 4, 'B': 2}
>>> class User: ... hash = "" ... def __init__(self, hash): ... self.hash = hash ... >>> u1 = User("hash1") >>> User.hash '' >>> u1.hash 'hash1'
aa = {1:'a', 3:'c', 2:'b', 4:'d'} bb = {'apple':'a', 'pear':'b', 'mango': 'g'} bb_rev = dict((value, key) for key, value in bb.iteritems()) # bb.items() in python3 dd = dict((key, bb_rev[value]) for key, value in aa.iteritems() # aa.items() in python3 if value in bb_rev) print dd
>>> str_list=['a','b','c'] >>> ''.join(str_list) 'abc'
remote_repo = self.repo.remotes[remote] # here is where you could choose an executable based on the platform. # Shell scripts might just not work plainly on windows. ssh_executable = os.path.join(rw_dir, 'my_ssh_executable.sh') # This permanently changes all future calls to git to have the given environment variables set # You can pass additional information in your own environment variables as well. self.repo.git.update_environment(GIT_SSH_COMMAND=ssh_executable) # now all calls to git which require SSH interaction call your executable remote_repo.push(self.repo.active_branch.name)
import re x=[['asgy200;f','ssll100','time is: 10h:00m:12s','xxxxxxx','***','','asgy200;f','frl5100','time is: 00h:00m:05s','ooo']] s=str(x) print re.findall(r"(?<=time is)\s*:\s*[^']*:(\d+)",s)
def __setitem__(self, k, v): if hasattr(k, 'lower'): k = k.lower() return super(MyDict, self).__setitem__(k, v)
player = MusicPlayer()
from multiprocessing import Pool, Value from sys import stdout def init(s, p): global searched_counter, processed_counter searched_counter = s processed_counter = p def run_scrape(var_input): global searched_counter, processed_counter #get search results parsed = #parse using bs4 with searched_counter.get_lock(): searched_counter.value += 1 stdout.write("\rTotal Searched/Processed: %d/%d" % (searched_counter.value, processed_counter.value)) stdout.flush() if parsed: with processed_counter.get_lock(): processed_counter.value += 1 stdout.write("\rTotal Searched/Processed: %d/%d" % (searched_counter.value, processed_counter.value)) stdout.flush() if __name__ == "__main__": searched_counter = Value('i', 0) processed_counter = Value('i', 0) list_to_scrape = ["data%05d" % (x,) for x in range(1,10000)] pool = Pool(8, initializer=init, initargs=(searched_counter, processed_counter)) pool.map(run_scrape, list_to_scrape) stdout.write('\n')
>>> import random >>> cells = [['empty'] * 5 for i in range(5)] >>> for i in range(3): x = random.randrange(5) y = random.randrange(5) cells[x][y] = 'mine' >>> import pprint >>> pprint.pprint(cells) [['empty', 'empty', 'empty', 'empty', 'empty'], ['mine', 'empty', 'mine', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'mine'], ['empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty']]
<html> <head> <style> hr { page-break-before: always; } </style> </head> <body> <pre> report 1 text here </pre> <hr> <pre> report 2 text here </pre> <hr> <pre> report 3 text here </pre> </body> </html>
#!/usr/bin/jython from org.opentripplanner.scripting.api import OtpsEntryPoint # Instantiate an OtpsEntryPoint otp = OtpsEntryPoint.fromArgs(['--graphs', '.', '--router', 'portland']) # Start timing the code import time start_time = time.time() # Get the default router # Could also be called: router = otp.getRouter('paris') router = otp.getRouter('portland') # Create a default request for a given time req = otp.createRequest() req.setDateTime(2015, 9, 15, 10, 00, 00) req.setMaxTimeSec(7200) req.setModes('WALK,BUS,RAIL') # The file points.csv contains the columns GEOID, X and Y. points = otp.loadCSVPopulation('points.csv', 'Y', 'X') dests = otp.loadCSVPopulation('points.csv', 'Y', 'X') # Create a CSV output matrixCsv = otp.createCSVOutput() matrixCsv.setHeader([ 'Origin', 'Destination', 'Walk_distance', 'Travel_time' ]) # Start Loop for origin in points: print "Processing origin: ", origin req.setOrigin(origin) spt = router.plan(req) if spt is None: continue # Evaluate the SPT for all points result = spt.eval(dests) # Add a new row of result in the CSV output for r in result: matrixCsv.addRow([ origin.getStringData('GEOID'), r.getIndividual().getStringData('GEOID'), r.getWalkDistance() , r.getTime()]) # Save the result matrixCsv.save('traveltime_matrix.csv') # Stop timing the code print("Elapsed time was %g seconds" % (time.time() - start_time))
proc = subprocess.Popen([executable, arg1, arg2], stdout=subprocess.PIPE, stderr=subprocess.PIPE) out, err = proc.communicate() status_code = proc.returncode
MyModel.objects.order_by('field_1__pk', 'field_2__pk', 'field_3__pk', '-time_stamp') .distinct('field_1__pk', 'field_2__pk', 'field_3__pk') .values('value')
import subprocess proc = subprocess.Popen(["python", "-c", "import writer; writer.write()"], stdout=subprocess.PIPE) out = proc.communicate()[0] print out.upper()
import numpy as np import pylab as pl x = np.linspace(-1, 1, 100) y = np.zeros((5, 100)) for i in range(5): y[i] = x**i ax = [] kw = {} for i in range(5): if i > 0: kw ={'sharex': ax[0], 'sharey': ax[0]} ax.append(pl.subplot(3, 2, i+1, **kw)) ax[i].plot(x, y[i])
getattr(cls, method_name)
from nltk.tokenize import regexp_tokenize sent = "I like apple fruit but grape fruit more" dict_list = ["apple fruit", "grape fruit"] newdict = {} for item in dict_list: dk = item.replace(" ", "_") newdict[item] = dk for key, val in newdict.items(): if key in sent: sent = sent.replace(key, val) res = regexp_tokenize(sent, pattern='\S+') print(res)
class A(object): def test(self): print("I am A") class B(object): def test(self, a1, a2): a1.test() a2.test() a1 = A() a2 = A() b = B() b.test(a1, a2)
In [11]: df['D'] = pd.Series([[[4,-0.05],[0.03,[-0.02,0.02]],[0.01,-0.03]], [[4,-0.35],[0.07,[-0.02,0.02]],[0.91,-0.03]]]) In [12]: df Out[12]: A B C D 0 0 1 2 [[4, -0.05], [0.03, [-0.02, 0.02]], [0.01, -0.... 1 1 6 5 [[4, -0.35], [0.07, [-0.02, 0.02]], [0.91, -0....
import matplotlib.pylab as pl import numpy as np data = np.random.random([10,10]) * 40 hot2 = pl.cm.get_cmap('hot', 20) pl.figure() pl.subplot(121) pl.pcolormesh(data, cmap=pl.cm.hot, vmin=0, vmax=20) pl.colorbar() pl.subplot(122) pl.pcolormesh(data, cmap=hot2, vmin=0, vmax=20) pl.colorbar()
import wx, os, subprocess class MyDialog(wx.Dialog): def __init__(self, parent, id, title): wx.Dialog.__init__(self, None, wx.ID_ANY, title, pos=(0, 0), size=(1000,600)) self.btn1 = None self.btn2 = None self.btn3 = None self.compute_btn1 = None self.compute_btn2 = None def drawAllLines(self): dc = wx.ClientDC(self) dc.SetBrush(wx.Brush('BLACK', wx.SOLID)) dc.DrawLine(100, 100, 950, 100) dc.DrawLine(100, 200, 480, 200) dc.DrawLine(100, 300, 480, 300) dc.DrawLine(100, 400, 480, 400) dc.DrawLine(100, 500, 950, 500) dc.DrawLine(100, 100, 100, 500) def buildLayout(self): text = wx.StaticText(self, -1, "SecureIT: An Operating System Security Tool", (250,20)) font = wx.Font(20, wx.Unconstrained, wx.ITALIC, wx.BOLD) text.SetFont(font) self.Button1 = wx.Button(self, -1, 'Malicious Code Protection', (230,140)) self.Button1.Bind(wx.EVT_BUTTON,self.button1hide) self.Button1.SetBackgroundColour("yellow") self.Button1.SetForegroundColour("blue") self.Button2 = wx.Button(self, -1, 'Authentication', (230,240)) self.Button2.Bind(wx.EVT_BUTTON, self.button2hide) self.Button2.SetBackgroundColour("yellow") self.Button2.SetForegroundColour("blue") self.Button3 = wx.Button(self, -1, 'Data Security', (230,340)) self.Button3.Bind(wx.EVT_BUTTON, self.button3hide) self.Button3.SetBackgroundColour("yellow") self.Button3.SetForegroundColour("blue") self.Button4 = wx.Button(self, -1, 'Miscellaneous', (230, 440 )) self.Button4.Bind(wx.EVT_BUTTON, self.button4hide) self.Button4.SetBackgroundColour("yellow") self.Button4.SetForegroundColour("blue") self.drawAllLines() def clearAllBtn(self): if self.btn1: self.btn1.Hide() if self.btn2: self.btn2.Hide() if self.btn3: self.btn3.Hide() if self.compute_btn2: self.compute_btn2.Hide() if self.compute_btn1: self.compute_btn1.Hide() def button1hide(self, event): self.clearAllBtn() self.btn1 = wx.StaticText(self, -1, 'Firewall ', (550, 180)) self.btn1.SetForegroundColour("blue") if os.path.exists('/usr/bin/iptables-xml'): self.btn1.SetForegroundColour("dark green") else: self.btn1.SetForegroundColour("red") self.btn2 = wx.StaticText(self, -1, 'Intrusion Detection System ', (550, 260)) self.btn2.SetForegroundColour("blue") if os.path.exists('/usr/bin/snort-mysql') or os.path.exists('usr/bin/acidbase'): self.btn2.SetForegroundColour("green") else: self.btn2.SetForegroundColour("red") self.btn2.SetToolTip(wx.ToolTip("Intrustion Detection" " System helps detect intruders. Kindly press the install button " "to get an IDS for your system." "")) self.compute_btn1 = wx.Button(self, 3, 'install', (750, 250)) self.Bind(wx.EVT_BUTTON, self.IDS, id=3) self.btn3 = wx.StaticText(self, -1, 'Rootkit Scanner ', (550, 340)) self.btn3.SetForegroundColour("blue") if os.path.exists('/usr/bin/rkhunter'): self.btn3.SetForegroundColour("green") else: self.btn3.SetForegroundColour("red") self.btn3.SetToolTip(wx.ToolTip("Rootkit Scanner not found" " System helps detect rootkits. Kindly press the install button " "to get an IDS for your system." "")) self.compute_btn2 = wx.Button(self, 4, 'install', (750, 330)) self.Bind(wx.EVT_BUTTON, self.Rootkit, id=4) def button2hide(self, event): self.clearAllBtn() self.btn1 = wx.StaticText(self, -1, 'Screen Lock ', (550, 180)) self.btn1.SetForegroundColour("blue") self.btn2 = wx.StaticText(self, -1, 'Anonymous ', (550, 260)) self.btn2.SetForegroundColour("blue") self.btn3 = wx.StaticText(self, -1, 'Guest Login ', (550, 340)) self.btn3.SetForegroundColour("blue") def button3hide(self, event): self.clearAllBtn() self.btn1 = wx.StaticText(self, -1, 'Secure Data Deletion ', (550, 180)) self.btn1.SetForegroundColour("blue") if os.path.exists('/usr/bin/wipe'): self.btn1.SetForegroundColour("green") else: self.btn1.SetForegroundColour("red") self.btn1.SetToolTip(wx.ToolTip("Rootkit Scanner not found" " System helps detect rootkits. Kindly press the install button " "to get an IDS for your system." "")) self.compute_btn1 = wx.Button(self,5, 'install', (750, 170)) self.Bind(wx.EVT_BUTTON, self.wipe, id=5) self.btn2 = wx.StaticText(self, -1, 'Folder Encryption ', (550, 260)) self.btn2.SetForegroundColour("blue") if os.path.exists('/usr/bin/encfs'): self.btn2.SetForegroundColour("dark green") else: self.btn2.SetForegroundColour("red") self.btn2.SetToolTip(wx.ToolTip("Click install to get a rootkit hunter")) self.compute_btn2 = wx.Button(self, 6, 'install', (750, 260)) self.Bind(wx.EVT_BUTTON, self.encfs, id=6) self.btn3 = wx.StaticText(self, -1, 'ASLR ', (550, 340)) self.btn3.SetForegroundColour("blue") def button4hide(self, event): self.clearAllBtn() self.btn1 = wx.StaticText(self, -1, 'Telnet ', (550, 180)) self.btn1.SetForegroundColour("blue") self.btn2 = wx.StaticText(self, -1, 'Folder Encryption ', (550, 260)) self.btn2.SetForegroundColour("blue") self.btn3 = wx.StaticText(self, -1, 'ASLR ', (550, 340)) self.btn3.SetForegroundColour("blue") def Rootkit(self, event): os.system("gksudo \"apt-get -y install rkhunter\"") def IDS(self, event): os.system("gksudo \"apt-get -y install acidbase\"") def wipe(self, event): os.system("gksudo \"apt-get -y install wipe\"") def encfs(self, event): os.system("gksudo \"apt-get -y install encfs\"") class MyApp(wx.App): def OnInit(self): dlg = MyDialog(self, -1, '') dlg.Show(True) dlg.Centre() dlg.buildLayout() return True app = MyApp(0) app.MainLoop()
output_file.write('{:-50} {:-6} {:-3} {:-25} {:-4}\n'.format(country, category, third, fourth, year))
s = mode; while (*s) { switch (*s++) { case 'r': if (rwa) { bad_mode: PyErr_SetString(PyExc_ValueError, "Must have exactly one of read/write/append mode"); goto error; } rwa = 1; self->readable = 1; break; case 'w': if (rwa) goto bad_mode; rwa = 1; self->writable = 1; flags |= O_CREAT | O_TRUNC; break; case 'a': if (rwa) goto bad_mode; rwa = 1; self->writable = 1; flags |= O_CREAT; append = 1; break; case 'b': break; case '+': if (plus) goto bad_mode; self->readable = self->writable = 1; plus = 1; break; default: PyErr_Format(PyExc_ValueError, "invalid mode: %.200s", mode); goto error; } } if (!rwa) goto bad_mode;
>>> filename = 'greatv02_v001_jam.mb' >>> import re >>> re.findall(r'(?<=_v)\d+', filename) ['001'] >>> >>> filename = 'greatv02_v001_av456jam.mb' >>> re.findall(r'(?<=_v)\d+', filename) ['001'] >>> filename = 'greatv02_v001_v456jam.mb' >>> re.findall(r'(?<=_v)\d+', filename) ['001', '456'] >>>
lines.linewidth : 2 axes.grid : True axes.linewidth : 0 xtick.major.width : 0 ytick.major.width : 0 grid.color : black
class ProfileIndex(indexes.SearchIndex, indexes.Indexable): # your other fields, most likely model attributes role_name = indexes.CharField() def get_model(self): return Person def prepare_role_name(self, person): return person.workplace.role_name
http://sourceafis.hg.sourceforge.net:8000/hgroot/sourceafis/sourceafis (read-only)
....... # loops berekenen de chaotische nummers voor de input for i in range(c): a_temp = 3.9 * a_temp * (1 - a_temp) b_temp = 3.9 * b_temp * (1 - b_temp) z = z + 1 #Print resultaten naar tabel print('%10s %20s %20s' % (c, a_temp, b_temp))
>>> for n in xrange(11): print ", ".join(str((a, n-2*a)) for a in xrange(n/2+1)) ... ... (0, 0) (0, 1) (0, 2), (1, 0) (0, 3), (1, 1) (0, 4), (1, 2), (2, 0) (0, 5), (1, 3), (2, 1) (0, 6), (1, 4), (2, 2), (3, 0) (0, 7), (1, 5), (2, 3), (3, 1) (0, 8), (1, 6), (2, 4), (3, 2), (4, 0) (0, 9), (1, 7), (2, 5), (3, 3), (4, 1) (0, 10), (1, 8), (2, 6), (3, 4), (4, 2), (5, 0)
import wx import time from threading import Thread def print_something_forever(something): while True: print something time.sleep(1) class Frame(wx.Frame): def __init__(self,parent): wx.Frame.__init__(self,parent) self.panel= wx.Panel(self) t= Thread(target=print_something_forever,args=("Thread alive!",)) t.daemon= True t.start() self.Show() if __name__ == "__main__": app= wx.App(False) Frame(None) app.MainLoop()
pixels = img.load() # create the pixel map for i in range(img.size[0]): # for every pixel: for j in range(img.size[1]): pixels[i,j] = (i, j, 100) # set the colour accordingly
def quick_sort(list): if not list: return list pivot = list[0] lesser = quick_sort([x for x in list[1:] if float(x[1]) < float(pivot[1])], 1) greater = quick_sort([x for x in list[1:] if float(x[1]) >= float(pivot[1])], 1) return lesser + [pivot] + greater
from tkinter import * root = Tk() button = Button(root, text="Example button") button.pack() root.geometry("200x200") root.mainloop()
out_cc = env.Command('file.wave.cpp', 'file.cpp', 'wave command < $SOURCE > $TARGET') env.Program('myprog', ['this.cc', 'that.cc', out_cc])
import matplotlib matplotlib.get_cachedir()
from IPython.core.display import HTML HTML(""" <style> div.cell { /* Tunes the space between cells */ margin-top:1em; margin-bottom:1em; } div.text_cell_render h1 { /* Main titles bigger, centered */ font-size: 2.2em; line-height:1.4em; text-align:center; } div.text_cell_render h2 { /* Parts names nearer from text */ margin-bottom: -0.4em; } div.text_cell_render { /* Customize text cells */ font-family: 'Times New Roman'; font-size:1.5em; line-height:1.4em; padding-left:3em; padding-right:3em; } </style> """)
>>> minput = """Yesterday<person>Peter Smith</person>drove to<location>New York</location>""" >>> from lxml import html >>> tree = html.fromstring(minput) >>> for e in tree.iter(): print e, e.tag, e.text_content() if e.tag() == 'person': # getting the last name per comment last = e.text_content().split()[-1] print last <Element p at 0x3118ca8> p YesterdayPeter Smithdrove toNew York <Element person at 0x3118b48> person Peter Smith Smith # here is the last name <Element location at 0x3118ba0> location New York
>>> sorted("asd") == sorted("dsa") True >>> sorted( "asd" ) == sorted( "dsa" ) True >>> sorted( "asd" ) == sorted( "dsaf" ) False >>> set( "asd" ) == set( "dasf" ) False >>> set( "asd" ) == set( "daas" ) True >>> set( "asd" ) ^ set( "daf" ) set(['s', 'f'])
response = urllib2.urlopen(URL) lines=response.read().splitlines()
import threading def starter_function(cmd_to_execute): os.system(cmd_to_execute) execution_thread = threading.Thread(target=starter_function, args=(cmd_to_execute,)) execution_thread.start()
def update_score(new_score, file_name="save.txt"): with open(file_name,'r+') as saved_file: existing_score = int(saved_file.read()) if new_score > existing_score: # replace existing score with open(file_name,'w') as saved_file: saved_file.write(str(new_score))
counter=0 for element in string: counter+=bool(function(element)) yield counter
xrange(1, n)
>>> def some_func(): ... print 'in some_func' ... return [1, 2, 3, 10] ... >>> for a in some_func(): ... print a ... in some_func 1 2 3 10
def insert_top_to_bottom(test_list, v): return test_list[v : -1] + test_list[:v] + [test_list[-1]] test_list = [1, 28, 3, 4, 27, 8, 7, 6, 5] test_list = insert_top_to_bottom(test_list, 5) print test_list
def lahendaRuut(maatriks, rida, veerg): prindiMaatriks(maatriks) if numberOlemas(maatriks, rida, veerg) == True: print("juba olemas") if veerg > 7: print("yolo2"); rida = rida + 1 if rida > 8: print("DONE!") sys.exit() veerg = -1 lahendaRuut(maatriks, rida, veerg + 1) else: for i in range (1, 10): if kasSobib(maatriks, rida, veerg, i): maatriks[rida][veerg] = i if veerg > 7: print("yolo"); rida = rida + 1 if rida > 8: print("DONE!") sys.exit() veerg = -1 lahendaRuut(maatriks, rida, veerg + 1) print("ei sobi") #========================= # very important line of code # resets the cell before the algorithm backtracks maatriks[rida][veerg] = 0 #========================= prindiMaatriks(maatriks)
lines = pastedtext.splitlines()
match = re.search(r'(\w+)\s(?:D\.C\.), (\w\w)\W', location).groups()
import struct RESULT_FORMAT = 'd' # Double-precision float. RESULT_SIZE = struct.calcsize(RESULT_FORMAT) RESULT_FILE = '/tmp/results' def worker(position, input_filename1, input_filename2): val = MyScript(input_filename1, input_filename2) with open(RESULT_FILE, 'rb+') as f: f.seek(RESULT_SIZE * position) f.write(struct.pack(RESULT_FORMAT, val))
In [4]: df[(df[['cell1','cell2']] > 2).any(axis=1)] Out[4]: cell1 cell2 gene 0 5 12 foo 1 0 90 bar 2 1 13 qux
an = Animal() attrs = vars(an) # {'kids': 0, 'name': 'Dog', 'color': 'Spotted', 'age': 10, 'legs': 2, 'smell': 'Alot'} # now dump this in some way or another print ', '.join("%s: %s" % item for item in attrs.items())
>>> from BeautifulSoup import BeautifulSoup >>> import re >>> page = '''\ <form action="/2811457/follow?gsid=3_5bce9b871484d3af90c89f37" method="post"> <div> <a href="/2811457/follow?page=2&amp;gsid=3_5bce9b871484d3af90c89f37">next_page</a> &nbsp;<input name="mp" type="hidden" value="3" /> <input type="text" name="page" size="2" style='-wap-input-format: "*N"' /> <input type="submit" value="jump" />&nbsp;1/3 </div> </form> ''' >>> soup = BeautifulSoup(page) >>> soup.find(text=re.compile(r'next_page')).parent.get('href') u'/2811457/follow?page=2&gsid=3_5bce9b871484d3af90c89f37'
def landed2(input): idx = np.floor(input).astype(np.int) mask = binary_matrix[idx[:,0], idx[:,1]] == 1 return input[mask] res1 = landed(input) res2 = landed2(input) np.testing.assert_allclose(res1, res2)
function O = split_array(I) % Wrapper function to sort the output of the recursive output O = split_array_R(I); [~,ind] = sort(cellfun(@numel, O), 'descend'); O = O(ind); end function O = split_array_R(I, I1, I2) if ~iscell(I) n = ceil(numel(I)/2); I1 = I(1:n); I2 = I(n+1:end); I = {I}; end; if numel(I1) > 1 O1 = split_array_R(I1); else O1 = {I1}; end if numel(I2) > 1 O2 = split_array_R(I2); else O2 = {I2}; end O = {I{:}, O1{:}, O2{:}}; end
unicode.join(u'\n',map(unicode,result))
try: return abs(number) except TypeError: return 'Nope'
<input name="email" value="{{ email }}">
s[s.index('|')+1:]
import string from itertools import product indexes = set(['A', 'AA', 'CB', 'B', 'H', 'IZ']) all_indexes = set(['']) unused_indexes = set() while (unused_indexes == set()): all_indexes = set([''.join(p) for p in product(all_indexes, list(string.ascii_uppercase))]) unused_indexes = all_indexes - indexes print(unused_indexes) # this prints out all indexes that are available at that length print(sorted(list(unused_indexes))[0]) # this prints out the first available index >>> C
re.sub( "(\d+)-(\d+)" , lambda x : ",".join( map( str , range( int(x.group(1)) , int( x.group(2) ) +1 ) )) , "1,3-5,7" )
>>> import timeit >>> # For the set >>> timeit.timeit("for i in s: pass", "s = set([1,4,7,10,13])") 0.20565616500061878 >>> # For the list >>> timeit.timeit("for i in l: pass", "l = [1,4,7,10,13]") 0.19532391999928223
p=array_2 q=array_2 p=numpy.vstack([p,q])
.. parsed-literal:: ./home/user/somecommand-|version|
outputwriter = csv.writer(open('output.csv', 'w'), delimiter = ' ') for tup in in_tup: inputList = [tup[0]] inputList.extend(tup[1]) outputwriter.writerow(inputList)
import seaborn as sns import matplotlib.pyplot as plt sns.set(style="ticks", color_codes=True) tips = sns.load_dataset("tips") g = sns.FacetGrid(tips, col="time", hue="smoker") g = g.map(plt.scatter, "total_bill", "tip", edgecolor="w") g.axes[0,0].set_xlabel('axes label 1') g.axes[0,1].set_xlabel('axes label 2') plt.show()
>>> s = "cats \\ dogs" >>> print s cats \ dogs >>> print s.replace("\\", "\\\\") cats \\ dogs
class Mixin(object): def __init__(self, parent=None, arg=None): super(Mixin, self).__init__(parent=parent) # This will call QWidget.__init__ self.arg = arg self.parent = parent # Setup the UI from QDesigner ui = Ui_widget() ui.setupUi(self.parent) def setLayout(self, layout, title): self.parent.setWindowTitle(title) self.parent.setLayout(layout) def doSomething(self): # Do something awesome. pass class Widget(Mixin, QtGui.QWidget): def __init__(self, parent, arg): super(Widget, self).__init__(parent=parent, arg=arg) # Calls Mixin.__init__
"time": { "M": { "creation_timestamp_utc": { "S": "2012-08-31T03:35:56.881Z" }, "localtime": { "S": "12:25:31" }, "received_timestamp_utc": { "S": "2012-08-31T07:50:50.367Z" }, "spacecraft_clock": { "S": "399657440.746" } }
In [13]: soup = BeautifulSoup("""<div id="content"> I want to keep this<br /><div id="blah">I want to remove this</div> </div>""") In [14]: soup = BeautifulSoup("""<div id="content"> ....: I want to keep this<br /><div id="blah">I want to remove this</div> ....: </div>""") In [15]: blah = soup.find(id='blah') In [16]: _ = blah.extract() In [17]: soup Out[17]: <html><body><div id="content"> I want to keep this<br/> </div></body></html>
import mock class A(object): def meth(self, a): return a a = A() ma = mock.Mock(wraps=a)
@route('/open/<item_id:int>/<url:path>') def open(item_id , url): if request.query_string: url += '?' + request.query_string print url
b = Button(...) b.image = c_black print(b.image.cget('file'))
n=int(input('n=')) for m in range(1, n+1): d=m**2 x = m all = 0 all2 = 0 while x != 0: if x%10 == d%10: all += 1 x = x//10 d = d//10 all2 += 1 if all == all2: print m
import datetime import random import numpy as np import math import sys from openpyxl import Workbook from openpyxl.cell import get_column_letter from openpyxl import load_workbook from tempfile import TemporaryFile from random import normalvariate, expovariate, seed, gammavariate from math import sqrt from itertools import groupby ## Test Lists for testing code lst_FC_error = [] ## Using Lists and Excel wb = Workbook() dest_filename = r'RHF_Loop_test4py.xlsx' EC_PlanData = [] sheet1 = wb.create_sheet(0) sheet1.title = "EC_PlanData" EC_FC_Data_original = [] sheet2 = wb.create_sheet(1) sheet2.title = "EC_FC_Data_original" FC_AccData = [] sheet5 = wb.create_sheet(4) sheet5.title = "FC_Acc_Data" EC_FC_Data_commited = [] sheet6 = wb.create_sheet(5) sheet6.title = "EC_FC_Data_commited" FC_Error = 0 alpha = 50 beta = 10 CurrentWeekRangeSize = 10 CurrentWeek = range(1,CurrentWeekRangeSize,1) RemainingFCError = .2 for Global_counter in CurrentWeek: if Global_counter == 1: for index in range(Global_counter,Global_counter + 52 + CurrentWeekRangeSize,1): PlanWeek = index EC_demand = 500.0 if EC_demand <= 0: EC_demand = EC_demand *(-1) EC_PlanData.append(EC_demand) d = sheet1.cell(row = Global_counter, column = PlanWeek) print "hello", Global_counter, PlanWeek d2 = sheet2.cell(row = Global_counter, column = PlanWeek) d.value = EC_demand d2.value = EC_demand wb.save('RHF_Loop_test4py.xlsx') print "-------------" else: #this was the original logic: #for index in range(Global_counter,Global_counter + 52,1): for index in range(Global_counter,52,1): PlanWeek = index DiffWeek = PlanWeek - Global_counter Sigma = 1 mu = 0 FC_VZ = random.normalvariate(mu, Sigma) if FC_VZ > 0: FC_VZ = 1 FC_Error = FC_Error+RemainingFCError ## decrease demand fcerr = sheet5.cell(row = Global_counter, column = PlanWeek) fcerr.value = FC_Error Prev_Week = Global_counter - 1 ECDD1 = sheet1.cell(row=Prev_Week, column=PlanWeek).value print Prev_Week, PlanWeek, ECDD1 ECDD2 = sheet1.cell(row=Prev_Week, column=PlanWeek).value EC_demand = ECDD1 - (ECDD2*FC_Error) FC_Error = 0 ECPD = sheet1.cell(row = Global_counter, column=PlanWeek) ECPD.value = EC_demand FCAD = sheet6.cell(row = Global_counter, column=PlanWeek) FCAD.value = FC_Error IEFD = sheet2.cell(row = Global_counter, column=PlanWeek) IEFD.value = EC_demand EC_demand = 0 wb.save('RHF_Loop_test4py.xlsx')
' | '.join(new_line.split(','))
import xlwt, csv, os csv_folder = "Output/" book = xlwt.Workbook() for fil in os.listdir(csv_folder): sheet = book.add_sheet(fil[:-4]) with open(csv_folder + fil) as filname: reader = csv.reader(filname) i = 0 for row in reader: for j, each in enumerate(row): sheet.write(i, j, each) i += 1 book.save("Output.xls")
bad_code = "system('rm -rf /users')" eval(bad_code)
#!/usr/bin/env python # vim:ai:et:ts=2:sw=2:bg=dark from twisted.internet import protocol from twisted.protocols.basic import LineOnlyReceiver from twisted.application import service from xml.etree import ElementTree as ET from aMuleClass import amulecmd class DialogueProtocol(LineOnlyReceiver): def connectionMade(self): print "Connected: %s" % self.transport.getPeer().host def lineReceived(self, line): parsed= ET.XML(line) if parsed.attrib['type'] == 'request': if parsed.attrib['prompt'] == 'results': self.transport.write(self.factory.mule.results()) elif parsed.attrib['prompt'] == 'downloads': self.transport.write(self.factory.mule.downloads()) else: print "Invalid request: %s\n" % line else: query= parsed.attrib['value'] if parsed.attrib['type'] == 'search': print "must search for %s" % query self.factory.mule.search(query) elif parsed.attrib['type'] == 'cancel': print "must cancel %s" % query self.factory.mule.command("cancel %s" % query) elif parsed.attrib['type'] == 'download': print "must download %s" % query self.factory.mule.command("download %s" % query) class MyService(service.Service): def __init__(self,port=14000): self.port = port def startService(self): self.factory = protocol.Factory() self.factory.protocol = DialogueProtocol from twisted.internet import reactor reactor.callWhenRunning(self.startListening) def startListening(self): self.factory.mule = amulecmd() from twisted.internet import reactor self.listener = reactor.listenTCP(self.port,self.factory) print "Started listening" def stopService(self): self.listener.stopListening() if __name__ == '__main__': pass else: application = service.Application("aMuleSocket") services = service.IServiceCollection(application) MyService().setServiceParent(services)
$ python2 ~/google-cloud-sdk/platform/google_appengine/remote_api_shell.py -s localhost:8080 Email: test@example.com Password: App Engine remote_api shell Python 2.7.8 (default, Sep 24 2014, 18:26:21) [GCC 4.9.1 20140903 (prerelease)] The db, ndb, users, urlfetch, and memcache modules are imported. dev~{appid}>
{{ appointment.teachers|join:", " }} {{ appointment.subjects|join:", " }}
url_for('handle_contact_form', _external=True)
for i, (d1, d2) in enumerate(zip(self.csv_readingon, self.csv_readingkun)): # pass
#!python3 from collections import defaultdict AB_map = defaultdict(set) Values = set() with open('train.tsv') as infile: headers = next(infile) for line in infile: if not line.strip(): continue a,b = map(int, line.split()) AB_map[a].add(b) Values.add(b) print("# of keys:", len(AB_map.keys())) print("# of values:", len(Values)) def impact_of_deletion(keylist): values_impacted = set([]) for key in keylist: values_impacted.update(AB_map[key]) return values_impacted for hyp in ((1,), (1,6)): print("Deleting", hyp, "would impact:", len(impact_of_deletion(hyp)))
def sparse_col_vec_dot(csc_mat, csc_vec): # row numbers of vector non-zero entries v_rows = csc_vec.indices v_data = csc_vec.data # matrix description arrays m_dat = csc_mat.data m_ind = csc_mat.indices m_ptr = csc_mat.indptr # output arrays sizes = m_ptr.take(v_rows+1) - m_ptr.take(v_rows) sizes = np.concatenate(([0], np.cumsum(sizes))) data = np.empty((sizes[-1],), dtype=csc_mat.dtype) indices = np.empty((sizes[-1],), dtype=np.intp) indptr = np.zeros((2,), dtype=np.intp) for j in range(len(sizes)-1): slice_ = slice(*m_ptr[[v_rows[j] ,v_rows[j]+1]]) np.multiply(m_dat[slice_], v_data[j], out=data[sizes[j]:sizes[j+1]]) indices[sizes[j]:sizes[j+1]] = m_ind[slice_] indptr[-1] = len(data) ret = sps.csc_matrix((data, indices, indptr), shape=csc_vec.shape) ret.sum_duplicates() return ret
# get tables m_table = ItemMySQL.__table__ pg_table = ItemPG.__table__ # SQL Expression that gets a range of rows quickly pg_q = select([pg_table]).where( and_( pg_table.c.id >= id_start, pg_table.c.id <= id_end, )) # get PG DB rows eng_pg = DBSessionPG.get_bind() conn_pg = eng_pg.connect() result = conn_pg.execute(pg_q) rows_pg = result.fetchall() for row_pg in rows_pg: # convert PG row object into dict value_d = dict(row_pg) # insert into MySQL m_table.insert().values(**value_d) # close row proxy object and connection, else suffer leaks result.close() conn_pg.close()
import ImageFont, ImageDraw, Image image = Image.open('hsvwheel.png') draw = ImageDraw.Draw(image) txt = "Hello World" fontsize = 1 # starting font size # portion of image width you want text width to be img_fraction = 0.50 font = ImageFont.truetype("arial.ttf", fontsize) while font.getsize(txt)[0] < img_fraction*image.size[0]: # iterate until the text size is just larger than the criteria fontsize += 1 font = ImageFont.truetype("arial.ttf", fontsize) # optionally de-increment to be sure it is less than criteria fontsize -= 1 font = ImageFont.truetype("arial.ttf", fontsize) print 'final font size',fontsize draw.text((10, 25), txt, font=font) # put the text on the image image.save('hsvwheel_txt.png') # save it
class DeletionMixin(object): """ A mixin providing the ability to delete objects """ success_url = None def delete(self, request, *args, **kwargs): """ Calls the delete() method on the fetched object and then redirects to the success URL. """ self.object = self.get_object() self.object.delete() return HttpResponseRedirect(self.get_success_url()) # Add support for browsers which only accept GET and POST for now. def post(self, *args, **kwargs): return self.delete(*args, **kwargs) def get_success_url(self): if self.success_url: return self.success_url else: raise ImproperlyConfigured( "No URL to redirect to. Provide a success_url.")
>>> import collections >>> dir(collections) ['Callable', 'Container', 'Hashable', 'ItemsView', 'Iterable', 'Iterator', 'KeysView', 'Mapping', 'MappingView', 'MutableMapping', 'MutableSequence', 'MutableSet', 'Sequence', 'Set', 'Sized', 'ValuesView', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '_abcoll', '_iskeyword', '_itemgetter', '_sys', 'defaultdict', 'deque', 'namedtuple'] >>>
pip install svn+http://code.google.com/p/pyclamd/source/browse/#svn%2Ftrunk
import OpenSSL.crypto from OpenSSL.crypto import load_certificate_request, FILETYPE_PEM csr = '''-----BEGIN NEW CERTIFICATE REQUEST----- MIIDPzCCAqgCAQAwZDELMAkGA1UEBhMCQ04xCzAJBgNVBAgTAmJqMQswCQYDVQQH EwJiajERMA8GA1UEChMIbXhjei5uZXQxETAPBgNVBAsTCG14Y3oubmV0MRUwEwYD VQQDEwx3d3cubXhjei5uZXQwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMQ7 an4v6pHRusBA0prMWXMWJCXY1AO1H0X8pvZj96T5GWg++JPCQE9guPgGwlD02U0B NDoEABeD1fwyKZ+JV5UFiOeSjO5sWrzIupdMI7hf34UaPNxHo6r4bLYEykw/Rnmb GKnNcD4QlPkypE+mLR4p0bnHZhe3lOlNtgd6NpXbAgMBAAGgggGZMBoGCisGAQQB gjcNAgMxDBYKNS4yLjM3OTAuMjB7BgorBgEEAYI3AgEOMW0wazAOBgNVHQ8BAf8E BAMCBPAwRAYJKoZIhvcNAQkPBDcwNTAOBggqhkiG9w0DAgICAIAwDgYIKoZIhvcN AwQCAgCAMAcGBSsOAwIHMAoGCCqGSIb3DQMHMBMGA1UdJQQMMAoGCCsGAQUFBwMB MIH9BgorBgEEAYI3DQICMYHuMIHrAgEBHloATQBpAGMAcgBvAHMAbwBmAHQAIABS AFMAQQAgAFMAQwBoAGEAbgBuAGUAbAAgAEMAcgB5AHAAdABvAGcAcgBhAHAAaABp AGMAIABQAHIAbwB2AGkAZABlAHIDgYkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAADANBgkqhkiG9w0BAQUFAAOBgQBIKHVhHb9FZdVLV4VZ 9DK4aBSuYY//jlIpvsfMIdHXfAsuan7w7PH87asp1wdb6lD9snvLZix1UGK7VQg6 wUFYNlMqJh1m7ITVvzhjdnx7EzCKkBXSxEom4mwbvSNvzqOKAWsDE0gvHQ9aCSby NFBQQMoW94LqrG/kuIQtjwVdZA== -----END NEW CERTIFICATE REQUEST-----''' req = load_certificate_request(FILETYPE_PEM, csr) key = req.get_pubkey() key_type = 'RSA' if key.type() == OpenSSL.crypto.TYPE_RSA else 'DSA' subject = req.get_subject() components = dict(subject.get_components()) print "Common name:", components['CN'] print "Organisation:", components['O'] print "Orgainistional unit", components['OU'] print "City/locality:", components['L'] print "State/province:", components['ST'] print "Country:", components['C'] print "Signature algorithm:", '?' print "Key algorithm:", key_type print "Key size:", key.bits()
data = list() for root, dirs, files in os.walk(targetdir): for filename in files: nm, ext = os.path.splitext(filename) if ext.lower().endswith(('.xlsx', '.m4v', 'mov')): fullpath = os.path.join(os.path.abspath(root), filename) data.append((filename, filepath)) df1 = pd.DataFrame(data, columns=['filename', 'fullpath']) print(df1)
import mock def function_under_test(f): f.tell() # => 0 f.read() f.tell() # => 0 return f.name with mock.patch('__main__.open', mock.mock_open(read_data=''), create=True) as m: with open('/tmp/1') as f: f.name = '/tmp/1' f.tell.return_value = 0 assert function_under_test(f) == '/tmp/1'
actions = [ ('ROAMING' , lambda service,nr_called,cost: service=='R'), ('ONNET' , lambda service,nr_called,cost: service in ('V O','S') and float(cost)==0.0), ('INTERNET' , lambda service,nr_called,cost: service=='' and nr_called==''), ('OTHERSERV', lambda service,nr_called,cost: service in ('I','ROAMING - MMS')) # fallthrough ('OTHERSERV', lambda service_nr_called,cost: True) ] for value,check in actions: if check(service,nr_called,cost): return value # fallthrough return 'OTHERSERV'
from AppKit import NSPasteboard from LaunchServices import pb = NSPasteboard.generalPasteboard() text = pb.stringForType_(kUTTypeUTF8PlainText)
# Produces all possible RPN layouts with n values and n-1 binary operators, # representing values as '#' and operators as '+' def RPN(n): if n == 1: yield '#' for i in range(1,n): for left in RPN(i): for right in RPN(n - i): yield left + right + '+'
shape("circle") shapesize(5,4,1) fillcolor("white")
a=np.array([[1,1,10],[1,2,20],[2,1,30],[1,3,40],[2,3,50]]) xy= a[:,:2].tolist() [[x,y,z] for [x,y,z] in a if [y,x] in xy and x!=y] [[1, 2, 20], [2, 1, 30]]
from itertools import tee, izip def pairwise(iterable): "s -> (s0,s1), (s1,s2), (s2, s3), ..." a, b = tee(iterable) next(b, None) return izip(a, b) with open(filename) as f: # Remember to use a with block so the file is safely closed after for line, next_line in pairwise(f): # do stuff
df.to_csv(filename, date_format='%Y-%m-%d')
binaryInt[2:]
>>> from django.db import models >>> from a1.models import Foo, Bar >>> >>> f1 = Foo.objects.create(aaa=5) >>> f2 = Foo.objects.create(aaa=8) >>> f3 = Foo.objects.create(aaa=1) >>> f4 = Foo.objects.create(aaa=12) >>> f5 = Foo.objects.create(aaa=3) >>> >>> b1 = Bar.objects.create(foo=f2, bbb=True) >>> b2 = Bar.objects.create(foo=f1, bbb=True) >>> b3 = Bar.objects.create(foo=f5, bbb=False) >>> b4 = Bar.objects.create(foo=f3, bbb=True) >>> b5 = Bar.objects.create(foo=f2, bbb=True) >>> b6 = Bar.objects.create(foo=f3, bbb=True) >>> b7 = Bar.objects.create(foo=f4, bbb=True) >>> b8 = Bar.objects.create(foo=f5, bbb=False) >>> b9 = Bar.objects.create(foo=f4, bbb=False) >>> b10 = Bar.objects.create(foo=f5, bbb=True) >>> b11 = Bar.objects.create(foo=f4, bbb=True) >>> b12 = Bar.objects.create(foo=f4, bbb=True) >>> b13 = Bar.objects.create(foo=f4, bbb=True) >>> b14 = Bar.objects.create(foo=f4, bbb=True) >>> b15 = Bar.objects.create(foo=f4, bbb=True) >>> >>> Foo.objects.filter(bar__bbb=True).count() 12 >>> Foo.objects.filter(bar__bbb=True).aggregate(models.Sum("aaa"))['aaa__sum'] 98 >>> Foo.objects.filter(bar__bbb=True).distinct().count() 5 >>> Foo.objects.filter(bar__bbb=True).distinct().aggregate(models.Sum("aaa"))['aaa__sum'] 29
def indices(lst, items): last_index = 0 for item in items: last_index += lst.index(item, last_index + 1) + 1 yield last_index
def sumD(num): if num == 0: return 0 return (num % 10) + sumD(num // 10)
import matplotlib.pyplot as plt, numpy as np, numpy.random, scipy #histogram definition xyrange = [[-5,5],[-5,5]] # data range bins = [100,100] # number of bins thresh = 3 #density threshold #data definition N = 1e5; xdat, ydat = np.random.normal(size=N), np.random.normal(1, 0.6, size=N) # histogram the data hh, locx, locy = scipy.histogram2d(xdat, ydat, range=xyrange, bins=bins) posx = np.digitize(xdat, locx) posy = np.digitize(ydat, locy) #select points within the histogram ind = (posx > 0) & (posx <= bins[0]) & (posy > 0) & (posy <= bins[1]) hhsub = hh[posx[ind] - 1, posy[ind] - 1] # values of the histogram where the points are xdat1 = xdat[ind][hhsub < thresh] # low density points ydat1 = ydat[ind][hhsub < thresh] hh[hh < thresh] = np.nan # fill the areas with low density by NaNs plt.imshow(np.flipud(hh.T),cmap='jet',extent=np.array(xyrange).flatten(), interpolation='none', origin='upper') plt.colorbar() plt.plot(xdat1, ydat1, '.',color='darkblue') plt.show()
>>> def sparse_rolling_corr(ts, other, window): ... return rolling_corr(ts.dropna(), other[ts.name].dropna(), window).reindex_like(ts) ... >>> hey.apply(sparse_rolling_corr, args=(hoo, 4))
>>> strs = "/forums/support/" >>> spl =strs.strip('/').split('/') >>> a,b,c,d,e = spl + [None]*(5-len(spl)) >>> a,b,c,d,e ('forums', 'support', None, None, None) >>> strs = "/forums/support/windows/" >>> spl =strs.strip('/').split('/') >>> a,b,c,d,e = spl + [None]*(5-len(spl)) >>> a,b,c,d,e ('forums', 'support', 'windows', None, None) >>> strs = "/forums/support/windows/help_i_deleted_sys32/6/" >>> spl =strs.strip('/').split('/') >>> a,b,c,d,e = spl + [None]*(5-len(spl)) >>> a,b,c,d,e ('forums', 'support', 'windows', 'help_i_deleted_sys32', '6')
def fromIriToUri(iri): myUri = [] iri = urlsplit(iri) iri = list(iri) for i in iri: try: i.encode("ascii") myUri.append(i) except UnicodeEncodeError: myUri.append(urllib.parse.quote(i)) uri = urllib.parse.urlunsplit(myUri) return uri
>>> from requests.compat import urljoin, quote_plus >>> url = "http://some-address.com/api/" >>> term = 'This is a test' >>> urljoin(url, quote_plus(term)) 'http://some-address.com/api/This+is+a+test'
from ctypes import * # if on Windows, may need to change following to use WinDLL instead of CDLL vix = CDLL('vix.dll') # user defined types VixHandle = c_int VixHandleType = c_int VixError = c_uint64 VixPropertyType = c_int VixPropertyID = c_int VixEventType = c_int VixHostOptions = c_int VixServiceProvider = c_int VixFindItemType = c_int VixVMOpenOptions = c_int VixPumpEventsOptions = c_int VixVMPowerOpOptions = c_int VixVMDeleteOptions = c_int VixPowerState = c_int VixToolsState = c_int VixRunProgramOptions = c_int VixRemoveSnapshotOptions = c_int VixCreateSnapshotOptions = c_int VixMsgSharedFolderOptions = c_int VixCloneType = c_int VixEventProc = CFUNCTYPE(VixHandle, VixEventType, VixHandle, c_void_p) # constant definitions VIX_INVALID_HANDLE = 0 VIX_HANDLETYPE_NONE = 0 VIX_HANDLETYPE_HOST = 2 VIX_HANDLETYPE_VM = 3 VIX_HANDLETYPE_NETWORK = 5 VIX_HANDLETYPE_JOB = 6 VIX_HANDLETYPE_SNAPSHOT = 7 VIX_HANDLETYPE_PROPERTY_LIST = 9 VIX_HANDLETYPE_METADATA_CONTAINER = 11 VIX_OK = 0 VIX_E_FAIL = 1 VIX_E_OUT_OF_MEMORY = 2 VIX_E_INVALID_ARG = 3 VIX_E_FILE_NOT_FOUND = 4 VIX_E_OBJECT_IS_BUSY = 5 VIX_E_NOT_SUPPORTED = 6 VIX_E_FILE_ERROR = 7 VIX_E_DISK_FULL = 8 VIX_E_INCORRECT_FILE_TYPE = 9 VIX_E_CANCELLED = 10 VIX_E_FILE_READ_ONLY = 11 VIX_E_FILE_ALREADY_EXISTS = 12 VIX_E_FILE_ACCESS_ERROR = 13 VIX_E_REQUIRES_LARGE_FILES = 14 VIX_E_FILE_ALREADY_LOCKED = 15 VIX_E_VMDB = 16 VIX_E_NOT_SUPPORTED_ON_REMOTE_OBJECT = 20 VIX_E_FILE_TOO_BIG = 21 VIX_E_FILE_NAME_INVALID = 22 VIX_E_ALREADY_EXISTS = 23 VIX_E_BUFFER_TOOSMALL = 24 VIX_E_OBJECT_NOT_FOUND = 25 VIX_E_HOST_NOT_CONNECTED = 26 VIX_E_INVALID_UTF8_STRING = 27 VIX_E_OPERATION_ALREADY_IN_PROGRESS = 31 VIX_E_UNFINISHED_JOB = 29 VIX_E_NEED_KEY = 30 VIX_E_LICENSE = 32 VIX_E_VM_HOST_DISCONNECTED = 34 VIX_E_AUTHENTICATION_FAIL = 35 VIX_E_HOST_CONNECTION_LOST = 36 VIX_E_DUPLICATE_NAME = 41 VIX_E_INVALID_HANDLE = 1000 VIX_E_NOT_SUPPORTED_ON_HANDLE_TYPE = 1001 VIX_E_TOO_MANY_HANDLES = 1002 VIX_E_NOT_FOUND = 2000 VIX_E_TYPE_MISMATCH = 2001 VIX_E_INVALID_XML = 2002 VIX_E_TIMEOUT_WAITING_FOR_TOOLS = 3000 VIX_E_UNRECOGNIZED_COMMAND = 3001 VIX_E_OP_NOT_SUPPORTED_ON_GUEST = 3003 VIX_E_PROGRAM_NOT_STARTED = 3004 VIX_E_CANNOT_START_READ_ONLY_VM = 3005 VIX_E_VM_NOT_RUNNING = 3006 VIX_E_VM_IS_RUNNING = 3007 VIX_E_CANNOT_CONNECT_TO_VM = 3008 VIX_E_POWEROP_SCRIPTS_NOT_AVAILABLE = 3009 VIX_E_NO_GUEST_OS_INSTALLED = 3010 VIX_E_VM_INSUFFICIENT_HOST_MEMORY = 3011 VIX_E_SUSPEND_ERROR = 3012 VIX_E_VM_NOT_ENOUGH_CPUS = 3013 VIX_E_HOST_USER_PERMISSIONS = 3014 VIX_E_GUEST_USER_PERMISSIONS = 3015 VIX_E_TOOLS_NOT_RUNNING = 3016 VIX_E_GUEST_OPERATIONS_PROHIBITED = 3017 VIX_E_ANON_GUEST_OPERATIONS_PROHIBITED = 3018 VIX_E_ROOT_GUEST_OPERATIONS_PROHIBITED = 3019 VIX_E_MISSING_ANON_GUEST_ACCOUNT = 3023 VIX_E_CANNOT_AUTHENTICATE_WITH_GUEST = 3024 VIX_E_UNRECOGNIZED_COMMAND_IN_GUEST = 3025 VIX_E_CONSOLE_GUEST_OPERATIONS_PROHIBITED = 3026 VIX_E_MUST_BE_CONSOLE_USER = 3027 VIX_E_VMX_MSG_DIALOG_AND_NO_UI = 3028 VIX_E_NOT_ALLOWED_DURING_VM_RECORDING = 3029 VIX_E_NOT_ALLOWED_DURING_VM_REPLAY = 3030 VIX_E_OPERATION_NOT_ALLOWED_FOR_LOGIN_TYPE = 3031 VIX_E_LOGIN_TYPE_NOT_SUPPORTED = 3032 VIX_E_EMPTY_PASSWORD_NOT_ALLOWED_IN_GUEST = 3033 VIX_E_INTERACTIVE_SESSION_NOT_PRESENT = 3034 VIX_E_INTERACTIVE_SESSION_USER_MISMATCH = 3035 VIX_E_UNABLE_TO_REPLAY_VM = 3039 VIX_E_CANNOT_POWER_ON_VM = 3041 VIX_E_NO_DISPLAY_SERVER = 3043 VIX_E_VM_NOT_RECORDING = 3044 VIX_E_VM_NOT_REPLAYING = 3045 VIX_E_VM_NOT_FOUND = 4000 VIX_E_NOT_SUPPORTED_FOR_VM_VERSION = 4001 VIX_E_CANNOT_READ_VM_CONFIG = 4002 VIX_E_TEMPLATE_VM = 4003 VIX_E_VM_ALREADY_LOADED = 4004 VIX_E_VM_ALREADY_UP_TO_DATE = 4006 VIX_E_VM_UNSUPPORTED_GUEST = 4011 VIX_E_UNRECOGNIZED_PROPERTY = 6000 VIX_E_INVALID_PROPERTY_VALUE = 6001 VIX_E_READ_ONLY_PROPERTY = 6002 VIX_E_MISSING_REQUIRED_PROPERTY = 6003 VIX_E_INVALID_SERIALIZED_DATA = 6004 VIX_E_PROPERTY_TYPE_MISMATCH = 6005 VIX_E_BAD_VM_INDEX = 8000 VIX_E_INVALID_MESSAGE_HEADER = 10000 VIX_E_INVALID_MESSAGE_BODY = 10001 VIX_E_SNAPSHOT_INVAL = 13000 VIX_E_SNAPSHOT_DUMPER = 13001 VIX_E_SNAPSHOT_DISKLIB = 13002 VIX_E_SNAPSHOT_NOTFOUND = 13003 VIX_E_SNAPSHOT_EXISTS = 13004 VIX_E_SNAPSHOT_VERSION = 13005 VIX_E_SNAPSHOT_NOPERM = 13006 VIX_E_SNAPSHOT_CONFIG = 13007 VIX_E_SNAPSHOT_NOCHANGE = 13008 VIX_E_SNAPSHOT_CHECKPOINT = 13009 VIX_E_SNAPSHOT_LOCKED = 13010 VIX_E_SNAPSHOT_INCONSISTENT = 13011 VIX_E_SNAPSHOT_NAMETOOLONG = 13012 VIX_E_SNAPSHOT_VIXFILE = 13013 VIX_E_SNAPSHOT_DISKLOCKED = 13014 VIX_E_SNAPSHOT_DUPLICATEDDISK = 13015 VIX_E_SNAPSHOT_INDEPENDENTDISK = 13016 VIX_E_SNAPSHOT_NONUNIQUE_NAME = 13017 VIX_E_SNAPSHOT_MEMORY_ON_INDEPENDENT_DISK = 13018 VIX_E_SNAPSHOT_MAXSNAPSHOTS = 13019 VIX_E_SNAPSHOT_MIN_FREE_SPACE = 13020 VIX_E_SNAPSHOT_HIERARCHY_TOODEEP = 13021 VIX_E_HOST_DISK_INVALID_VALUE = 14003 VIX_E_HOST_DISK_SECTORSIZE = 14004 VIX_E_HOST_FILE_ERROR_EOF = 14005 VIX_E_HOST_NETBLKDEV_HANDSHAKE = 14006 VIX_E_HOST_SOCKET_CREATION_ERROR = 14007 VIX_E_HOST_SERVER_NOT_FOUND = 14008 VIX_E_HOST_NETWORK_CONN_REFUSED = 14009 VIX_E_HOST_TCP_SOCKET_ERROR = 14010 VIX_E_HOST_TCP_CONN_LOST = 14011 VIX_E_HOST_NBD_HASHFILE_VOLUME = 14012 VIX_E_HOST_NBD_HASHFILE_INIT = 14013 VIX_E_DISK_INVAL = 16000 VIX_E_DISK_NOINIT = 16001 VIX_E_DISK_NOIO = 16002 VIX_E_DISK_PARTIALCHAIN = 16003 VIX_E_DISK_NEEDSREPAIR = 16006 VIX_E_DISK_OUTOFRANGE = 16007 VIX_E_DISK_CID_MISMATCH = 16008 VIX_E_DISK_CANTSHRINK = 16009 VIX_E_DISK_PARTMISMATCH = 16010 VIX_E_DISK_UNSUPPORTEDDISKVERSION = 16011 VIX_E_DISK_OPENPARENT = 16012 VIX_E_DISK_NOTSUPPORTED = 16013 VIX_E_DISK_NEEDKEY = 16014 VIX_E_DISK_NOKEYOVERRIDE = 16015 VIX_E_DISK_NOTENCRYPTED = 16016 VIX_E_DISK_NOKEY = 16017 VIX_E_DISK_INVALIDPARTITIONTABLE = 16018 VIX_E_DISK_NOTNORMAL = 16019 VIX_E_DISK_NOTENCDESC = 16020 VIX_E_DISK_NEEDVMFS = 16022 VIX_E_DISK_RAWTOOBIG = 16024 VIX_E_DISK_TOOMANYOPENFILES = 16027 VIX_E_DISK_TOOMANYREDO = 16028 VIX_E_DISK_RAWTOOSMALL = 16029 VIX_E_DISK_INVALIDCHAIN = 16030 VIX_E_DISK_KEY_NOTFOUND = 16052 VIX_E_DISK_SUBSYSTEM_INIT_FAIL = 16053 VIX_E_DISK_INVALID_CONNECTION = 16054 VIX_E_DISK_ENCODING = 16061 VIX_E_DISK_CANTREPAIR = 16062 VIX_E_DISK_INVALIDDISK = 16063 VIX_E_DISK_NOLICENSE = 16064 VIX_E_DISK_NODEVICE = 16065 VIX_E_DISK_UNSUPPORTEDDEVICE = 16066 VIX_E_CRYPTO_UNKNOWN_ALGORITHM = 17000 VIX_E_CRYPTO_BAD_BUFFER_SIZE = 17001 VIX_E_CRYPTO_INVALID_OPERATION = 17002 VIX_E_CRYPTO_RANDOM_DEVICE = 17003 VIX_E_CRYPTO_NEED_PASSWORD = 17004 VIX_E_CRYPTO_BAD_PASSWORD = 17005 VIX_E_CRYPTO_NOT_IN_DICTIONARY = 17006 VIX_E_CRYPTO_NO_CRYPTO = 17007 VIX_E_CRYPTO_ERROR = 17008 VIX_E_CRYPTO_BAD_FORMAT = 17009 VIX_E_CRYPTO_LOCKED = 17010 VIX_E_CRYPTO_EMPTY = 17011 VIX_E_CRYPTO_KEYSAFE_LOCATOR = 17012 VIX_E_CANNOT_CONNECT_TO_HOST = 18000 VIX_E_NOT_FOR_REMOTE_HOST = 18001 VIX_E_INVALID_HOSTNAME_SPECIFICATION = 18002 VIX_E_SCREEN_CAPTURE_ERROR = 19000 VIX_E_SCREEN_CAPTURE_BAD_FORMAT = 19001 VIX_E_SCREEN_CAPTURE_COMPRESSION_FAIL = 19002 VIX_E_SCREEN_CAPTURE_LARGE_DATA = 19003 VIX_E_GUEST_VOLUMES_NOT_FROZEN = 20000 VIX_E_NOT_A_FILE = 20001 VIX_E_NOT_A_DIRECTORY = 20002 VIX_E_NO_SUCH_PROCESS = 20003 VIX_E_FILE_NAME_TOO_LONG = 20004 VIX_E_TOOLS_INSTALL_NO_IMAGE = 21000 VIX_E_TOOLS_INSTALL_IMAGE_INACCESIBLE = 21001 VIX_E_TOOLS_INSTALL_NO_DEVICE = 21002 VIX_E_TOOLS_INSTALL_DEVICE_NOT_CONNECTED = 21003 VIX_E_TOOLS_INSTALL_CANCELLED = 21004 VIX_E_TOOLS_INSTALL_INIT_FAILED = 21005 VIX_E_TOOLS_INSTALL_AUTO_NOT_SUPPORTED = 21006 VIX_E_TOOLS_INSTALL_GUEST_NOT_READY = 21007 VIX_E_TOOLS_INSTALL_SIG_CHECK_FAILED = 21008 VIX_E_TOOLS_INSTALL_ERROR = 21009 VIX_E_TOOLS_INSTALL_ALREADY_UP_TO_DATE = 21010 VIX_E_TOOLS_INSTALL_IN_PROGRESS = 21011 VIX_E_WRAPPER_WORKSTATION_NOT_INSTALLED = 22001 VIX_E_WRAPPER_VERSION_NOT_FOUND = 22002 VIX_E_WRAPPER_SERVICEPROVIDER_NOT_FOUND = 22003 VIX_E_WRAPPER_PLAYER_NOT_INSTALLED = 22004 VIX_E_WRAPPER_RUNTIME_NOT_INSTALLED = 22005 VIX_E_WRAPPER_MULTIPLE_SERVICEPROVIDERS = 22006 VIX_E_MNTAPI_MOUNTPT_NOT_FOUND = 24000 VIX_E_MNTAPI_MOUNTPT_IN_USE = 24001 VIX_E_MNTAPI_DISK_NOT_FOUND = 24002 VIX_E_MNTAPI_DISK_NOT_MOUNTED = 24003 VIX_E_MNTAPI_DISK_IS_MOUNTED = 24004 VIX_E_MNTAPI_DISK_NOT_SAFE = 24005 VIX_E_MNTAPI_DISK_CANT_OPEN = 24006 VIX_E_MNTAPI_CANT_READ_PARTS = 24007 VIX_E_MNTAPI_UMOUNT_APP_NOT_FOUND = 24008 VIX_E_MNTAPI_UMOUNT = 24009 VIX_E_MNTAPI_NO_MOUNTABLE_PARTITONS = 24010 VIX_E_MNTAPI_PARTITION_RANGE = 24011 VIX_E_MNTAPI_PERM = 24012 VIX_E_MNTAPI_DICT = 24013 VIX_E_MNTAPI_DICT_LOCKED = 24014 VIX_E_MNTAPI_OPEN_HANDLES = 24015 VIX_E_MNTAPI_CANT_MAKE_VAR_DIR = 24016 VIX_E_MNTAPI_NO_ROOT = 24017 VIX_E_MNTAPI_LOOP_FAILED = 24018 VIX_E_MNTAPI_DAEMON = 24019 VIX_E_MNTAPI_INTERNAL = 24020 VIX_E_MNTAPI_SYSTEM = 24021 VIX_E_MNTAPI_NO_CONNECTION_DETAILS = 24022 VIX_E_MNTAPI_INCOMPATIBLE_VERSION = 24300 VIX_E_MNTAPI_OS_ERROR = 24301 VIX_E_MNTAPI_DRIVE_LETTER_IN_USE = 24302 VIX_E_MNTAPI_DRIVE_LETTER_ALREADY_ASSIGNED = 24303 VIX_E_MNTAPI_VOLUME_NOT_MOUNTED = 24304 VIX_E_MNTAPI_VOLUME_ALREADY_MOUNTED = 24305 VIX_E_MNTAPI_FORMAT_FAILURE = 24306 VIX_E_MNTAPI_NO_DRIVER = 24307 VIX_E_MNTAPI_ALREADY_OPENED = 24308 VIX_E_MNTAPI_ITEM_NOT_FOUND = 24309 VIX_E_MNTAPI_UNSUPPROTED_BOOT_LOADER = 24310 VIX_E_MNTAPI_UNSUPPROTED_OS = 24311 VIX_E_MNTAPI_CODECONVERSION = 24312 VIX_E_MNTAPI_REGWRITE_ERROR = 24313 VIX_E_MNTAPI_UNSUPPORTED_FT_VOLUME = 24314 VIX_E_MNTAPI_PARTITION_NOT_FOUND = 24315 VIX_E_MNTAPI_PUTFILE_ERROR = 24316 VIX_E_MNTAPI_GETFILE_ERROR = 24317 VIX_E_MNTAPI_REG_NOT_OPENED = 24318 VIX_E_MNTAPI_REGDELKEY_ERROR = 24319 VIX_E_MNTAPI_CREATE_PARTITIONTABLE_ERROR = 24320 VIX_E_MNTAPI_OPEN_FAILURE = 24321 VIX_E_MNTAPI_VOLUME_NOT_WRITABLE = 24322 VIX_E_NET_HTTP_UNSUPPORTED_PROTOCOL = 30001 VIX_E_NET_HTTP_URL_MALFORMAT = 30003 VIX_E_NET_HTTP_COULDNT_RESOLVE_PROXY = 30005 VIX_E_NET_HTTP_COULDNT_RESOLVE_HOST = 30006 VIX_E_NET_HTTP_COULDNT_CONNECT = 30007 VIX_E_NET_HTTP_HTTP_RETURNED_ERROR = 30022 VIX_E_NET_HTTP_OPERATION_TIMEDOUT = 30028 VIX_E_NET_HTTP_SSL_CONNECT_ERROR = 30035 VIX_E_NET_HTTP_TOO_MANY_REDIRECTS = 30047 VIX_E_NET_HTTP_TRANSFER = 30200 VIX_E_NET_HTTP_SSL_SECURITY = 30201 VIX_E_NET_HTTP_GENERIC = 30202 VIX_PROPERTYTYPE_ANY = 0 VIX_PROPERTYTYPE_INTEGER = 1 VIX_PROPERTYTYPE_STRING = 2 VIX_PROPERTYTYPE_BOOL = 3 VIX_PROPERTYTYPE_HANDLE = 4 VIX_PROPERTYTYPE_INT64 = 5 VIX_PROPERTYTYPE_BLOB = 6 VIX_PROPERTY_NONE = 0 VIX_PROPERTY_META_DATA_CONTAINER = 2 VIX_PROPERTY_HOST_HOSTTYPE = 50 VIX_PROPERTY_HOST_API_VERSION = 51 VIX_PROPERTY_VM_NUM_VCPUS = 101 VIX_PROPERTY_VM_VMX_PATHNAME = 103 VIX_PROPERTY_VM_VMTEAM_PATHNAME = 105 VIX_PROPERTY_VM_MEMORY_SIZE = 106 VIX_PROPERTY_VM_READ_ONLY = 107 VIX_PROPERTY_VM_NAME = 108 VIX_PROPERTY_VM_GUESTOS = 109 VIX_PROPERTY_VM_IN_VMTEAM = 128 VIX_PROPERTY_VM_POWER_STATE = 129 VIX_PROPERTY_VM_TOOLS_STATE = 152 VIX_PROPERTY_VM_IS_RUNNING = 196 VIX_PROPERTY_VM_SUPPORTED_FEATURES = 197 VIX_PROPERTY_VM_IS_RECORDING = 236 VIX_PROPERTY_VM_IS_REPLAYING = 237 VIX_PROPERTY_JOB_RESULT_ERROR_CODE = 3000 VIX_PROPERTY_JOB_RESULT_VM_IN_GROUP = 3001 VIX_PROPERTY_JOB_RESULT_USER_MESSAGE = 3002 VIX_PROPERTY_JOB_RESULT_EXIT_CODE = 3004 VIX_PROPERTY_JOB_RESULT_COMMAND_OUTPUT = 3005 VIX_PROPERTY_JOB_RESULT_HANDLE = 3010 VIX_PROPERTY_JOB_RESULT_GUEST_OBJECT_EXISTS = 3011 VIX_PROPERTY_JOB_RESULT_GUEST_PROGRAM_ELAPSED_TIME = 3017 VIX_PROPERTY_JOB_RESULT_GUEST_PROGRAM_EXIT_CODE = 3018 VIX_PROPERTY_JOB_RESULT_ITEM_NAME = 3035 VIX_PROPERTY_JOB_RESULT_FOUND_ITEM_DESCRIPTION = 3036 VIX_PROPERTY_JOB_RESULT_SHARED_FOLDER_COUNT = 3046 VIX_PROPERTY_JOB_RESULT_SHARED_FOLDER_HOST = 3048 VIX_PROPERTY_JOB_RESULT_SHARED_FOLDER_FLAGS = 3049 VIX_PROPERTY_JOB_RESULT_PROCESS_ID = 3051 VIX_PROPERTY_JOB_RESULT_PROCESS_OWNER = 3052 VIX_PROPERTY_JOB_RESULT_PROCESS_COMMAND = 3053 VIX_PROPERTY_JOB_RESULT_FILE_FLAGS = 3054 VIX_PROPERTY_JOB_RESULT_PROCESS_START_TIME = 3055 VIX_PROPERTY_JOB_RESULT_VM_VARIABLE_STRING = 3056 VIX_PROPERTY_JOB_RESULT_PROCESS_BEING_DEBUGGED = 3057 VIX_PROPERTY_JOB_RESULT_SCREEN_IMAGE_SIZE = 3058 VIX_PROPERTY_JOB_RESULT_SCREEN_IMAGE_DATA = 3059 VIX_PROPERTY_JOB_RESULT_FILE_SIZE = 3061 VIX_PROPERTY_JOB_RESULT_FILE_MOD_TIME = 3062 VIX_PROPERTY_JOB_RESULT_EXTRA_ERROR_INFO = 3084 VIX_PROPERTY_FOUND_ITEM_LOCATION = 4010 VIX_PROPERTY_SNAPSHOT_DISPLAYNAME = 4200 VIX_PROPERTY_SNAPSHOT_DESCRIPTION = 4201 VIX_PROPERTY_SNAPSHOT_POWERSTATE = 4205 VIX_PROPERTY_SNAPSHOT_IS_REPLAYABLE = 4207 VIX_PROPERTY_GUEST_SHAREDFOLDERS_SHARES_PATH = 4525 VIX_PROPERTY_VM_ENCRYPTION_PASSWORD = 7001 VIX_EVENTTYPE_JOB_COMPLETED = 2 VIX_EVENTTYPE_JOB_PROGRESS = 3 VIX_EVENTTYPE_FIND_ITEM = 8 VIX_EVENTTYPE_CALLBACK_SIGNALLED = 2 VIX_FILE_ATTRIBUTES_DIRECTORY = 0x0001 VIX_FILE_ATTRIBUTES_SYMLINK = 0x0002 VIX_HOSTOPTION_USE_EVENT_PUMP = 0x0008 VIX_SERVICEPROVIDER_DEFAULT = 1 VIX_SERVICEPROVIDER_VMWARE_SERVER = 2 VIX_SERVICEPROVIDER_VMWARE_WORKSTATION = 3 VIX_SERVICEPROVIDER_VMWARE_PLAYER = 4 VIX_SERVICEPROVIDER_VMWARE_VI_SERVER = 10 VIX_API_VERSION = -1 VIX_FIND_RUNNING_VMS = 1 VIX_FIND_REGISTERED_VMS = 4 VIX_VMOPEN_NORMAL = 0x0 VIX_PUMPEVENTOPTION_NONE = 0 VIX_VMPOWEROP_NORMAL = 0 VIX_VMPOWEROP_FROM_GUEST = 0x0004 VIX_VMPOWEROP_SUPPRESS_SNAPSHOT_POWERON = 0x0080 VIX_VMPOWEROP_LAUNCH_GUI = 0x0200 VIX_VMPOWEROP_START_VM_PAUSED = 0x1000 VIX_VMDELETE_DISK_FILES = 0x0002 VIX_POWERSTATE_POWERING_OFF = 0x0001 VIX_POWERSTATE_POWERED_OFF = 0x0002 VIX_POWERSTATE_POWERING_ON = 0x0004 VIX_POWERSTATE_POWERED_ON = 0x0008 VIX_POWERSTATE_SUSPENDING = 0x0010 VIX_POWERSTATE_SUSPENDED = 0x0020 VIX_POWERSTATE_TOOLS_RUNNING = 0x0040 VIX_POWERSTATE_RESETTING = 0x0080 VIX_POWERSTATE_BLOCKED_ON_MSG = 0x0100 VIX_POWERSTATE_PAUSED = 0x0200 VIX_POWERSTATE_RESUMING = 0x0800 VIX_TOOLSSTATE_UNKNOWN = 0x0001 VIX_TOOLSSTATE_RUNNING = 0x0002 VIX_TOOLSSTATE_NOT_INSTALLED = 0x0004 VIX_VM_SUPPORT_SHARED_FOLDERS = 0x0001 VIX_VM_SUPPORT_MULTIPLE_SNAPSHOTS = 0x0002 VIX_VM_SUPPORT_TOOLS_INSTALL = 0x0004 VIX_VM_SUPPORT_HARDWARE_UPGRADE = 0x0008 VIX_LOGIN_IN_GUEST_REQUIRE_INTERACTIVE_ENVIRONMENT = 0x08 VIX_RUNPROGRAM_RETURN_IMMEDIATELY = 0x0001 VIX_RUNPROGRAM_ACTIVATE_WINDOW = 0x0002 VIX_VM_GUEST_VARIABLE = 1 VIX_VM_CONFIG_RUNTIME_ONLY = 2 VIX_GUEST_ENVIRONMENT_VARIABLE = 3 VIX_SNAPSHOT_REMOVE_CHILDREN = 0x0001 VIX_SNAPSHOT_INCLUDE_MEMORY = 0x0002 VIX_SHAREDFOLDER_WRITE_ACCESS = 0x04 VIX_CAPTURESCREENFORMAT_PNG = 0x01 VIX_CAPTURESCREENFORMAT_PNG_NOCOMPRESS = 0x02 VIX_CLONETYPE_FULL = 0 VIX_CLONETYPE_LINKED = 1 VIX_INSTALLTOOLS_MOUNT_TOOLS_INSTALLER = 0x00 VIX_INSTALLTOOLS_AUTO_UPGRADE = 0x01 VIX_INSTALLTOOLS_RETURN_IMMEDIATELY = 0x02 # functions vix.Vix_GetErrorText.restype = c_char_p vix.Vix_GetErrorText.argtypes = [VixError,c_char_p] vix.Vix_ReleaseHandle.restype = None vix.Vix_ReleaseHandle.argtypes = [VixHandle] vix.Vix_AddRefHandle.restype = None vix.Vix_AddRefHandle.argtypes = [VixHandle] vix.Vix_GetHandleType.restype = VixHandleType vix.Vix_GetHandleType.argtypes = [VixHandle] vix.Vix_GetProperties.restype = VixError # warning - vix.Vix_GetProperties takes variable argument list vix.Vix_GetProperties.argtypes = [VixHandle,VixPropertyID] vix.Vix_GetPropertyType.restype = VixError vix.Vix_GetPropertyType.argtypes = [VixHandle,VixPropertyID,POINTER(VixPropertyType)] vix.Vix_FreeBuffer.restype = None vix.Vix_FreeBuffer.argtypes = [c_void_p] vix.VixHost_Connect.restype = VixHandle vix.VixHost_Connect.argtypes = [c_int,VixServiceProvider,c_char_p,c_int,c_char_p,c_char_p,VixHostOptions,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixHost_Disconnect.restype = None vix.VixHost_Disconnect.argtypes = [VixHandle] vix.VixHost_RegisterVM.restype = VixHandle vix.VixHost_RegisterVM.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p] vix.VixHost_UnregisterVM.restype = VixHandle vix.VixHost_UnregisterVM.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p] vix.VixHost_FindItems.restype = VixHandle vix.VixHost_FindItems.argtypes = [VixHandle,VixFindItemType,VixHandle,c_int32,POINTER(VixEventProc),c_void_p] vix.VixHost_OpenVM.restype = VixHandle vix.VixHost_OpenVM.argtypes = [VixHandle,c_char_p,VixVMOpenOptions,VixHandle,POINTER(VixEventProc),c_void_p] vix.Vix_PumpEvents.restype = None vix.Vix_PumpEvents.argtypes = [VixHandle,VixPumpEventsOptions] vix.VixPropertyList_AllocPropertyList.restype = VixError # warning - vix.VixPropertyList_AllocPropertyList takes variable argument list vix.VixPropertyList_AllocPropertyList.argtypes = [VixHandle,POINTER(VixHandle),c_int] vix.VixVM_Open.restype = VixHandle vix.VixVM_Open.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p] vix.VixVM_PowerOn.restype = VixHandle vix.VixVM_PowerOn.argtypes = [VixHandle,VixVMPowerOpOptions,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_PowerOff.restype = VixHandle vix.VixVM_PowerOff.argtypes = [VixHandle,VixVMPowerOpOptions,POINTER(VixEventProc),c_void_p] vix.VixVM_Reset.restype = VixHandle vix.VixVM_Reset.argtypes = [VixHandle,VixVMPowerOpOptions,POINTER(VixEventProc),c_void_p] vix.VixVM_Suspend.restype = VixHandle vix.VixVM_Suspend.argtypes = [VixHandle,VixVMPowerOpOptions,POINTER(VixEventProc),c_void_p] vix.VixVM_Pause.restype = VixHandle vix.VixVM_Pause.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_Unpause.restype = VixHandle vix.VixVM_Unpause.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_Delete.restype = VixHandle vix.VixVM_Delete.argtypes = [VixHandle,VixVMDeleteOptions,POINTER(VixEventProc),c_void_p] vix.VixVM_BeginRecording.restype = VixHandle vix.VixVM_BeginRecording.argtypes = [VixHandle,c_char_p,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_EndRecording.restype = VixHandle vix.VixVM_EndRecording.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_BeginReplay.restype = VixHandle vix.VixVM_BeginReplay.argtypes = [VixHandle,VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_EndReplay.restype = VixHandle vix.VixVM_EndReplay.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_WaitForToolsInGuest.restype = VixHandle vix.VixVM_WaitForToolsInGuest.argtypes = [VixHandle,c_int,POINTER(VixEventProc),c_void_p] vix.VixVM_LoginInGuest.restype = VixHandle vix.VixVM_LoginInGuest.argtypes = [VixHandle,c_char_p,c_char_p,c_int,POINTER(VixEventProc),c_void_p] vix.VixVM_LogoutFromGuest.restype = VixHandle vix.VixVM_LogoutFromGuest.argtypes = [VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_RunProgramInGuest.restype = VixHandle vix.VixVM_RunProgramInGuest.argtypes = [VixHandle,c_char_p,c_char_p,VixRunProgramOptions,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_ListProcessesInGuest.restype = VixHandle vix.VixVM_ListProcessesInGuest.argtypes = [VixHandle,c_int,POINTER(VixEventProc),c_void_p] vix.VixVM_KillProcessInGuest.restype = VixHandle vix.VixVM_KillProcessInGuest.argtypes = [VixHandle,c_uint64,c_int,POINTER(VixEventProc),c_void_p] vix.VixVM_RunScriptInGuest.restype = VixHandle vix.VixVM_RunScriptInGuest.argtypes = [VixHandle,c_char_p,c_char_p,VixRunProgramOptions,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_OpenUrlInGuest.restype = VixHandle vix.VixVM_OpenUrlInGuest.argtypes = [VixHandle,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_CopyFileFromHostToGuest.restype = VixHandle vix.VixVM_CopyFileFromHostToGuest.argtypes = [VixHandle,c_char_p,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_CopyFileFromGuestToHost.restype = VixHandle vix.VixVM_CopyFileFromGuestToHost.argtypes = [VixHandle,c_char_p,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_DeleteFileInGuest.restype = VixHandle vix.VixVM_DeleteFileInGuest.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p] vix.VixVM_FileExistsInGuest.restype = VixHandle vix.VixVM_FileExistsInGuest.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p] vix.VixVM_RenameFileInGuest.restype = VixHandle vix.VixVM_RenameFileInGuest.argtypes = [VixHandle,c_char_p,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_CreateTempFileInGuest.restype = VixHandle vix.VixVM_CreateTempFileInGuest.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_GetFileInfoInGuest.restype = VixHandle vix.VixVM_GetFileInfoInGuest.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p] vix.VixVM_ListDirectoryInGuest.restype = VixHandle vix.VixVM_ListDirectoryInGuest.argtypes = [VixHandle,c_char_p,c_int,POINTER(VixEventProc),c_void_p] vix.VixVM_CreateDirectoryInGuest.restype = VixHandle vix.VixVM_CreateDirectoryInGuest.argtypes = [VixHandle,c_char_p,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_DeleteDirectoryInGuest.restype = VixHandle vix.VixVM_DeleteDirectoryInGuest.argtypes = [VixHandle,c_char_p,c_int,POINTER(VixEventProc),c_void_p] vix.VixVM_DirectoryExistsInGuest.restype = VixHandle vix.VixVM_DirectoryExistsInGuest.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p] vix.VixVM_ReadVariable.restype = VixHandle vix.VixVM_ReadVariable.argtypes = [VixHandle,c_int,c_char_p,c_int,POINTER(VixEventProc),c_void_p] vix.VixVM_WriteVariable.restype = VixHandle vix.VixVM_WriteVariable.argtypes = [VixHandle,c_int,c_char_p,c_char_p,c_int,POINTER(VixEventProc),c_void_p] vix.VixVM_GetNumRootSnapshots.restype = VixError vix.VixVM_GetNumRootSnapshots.argtypes = [VixHandle,POINTER(c_int)] vix.VixVM_GetRootSnapshot.restype = VixError vix.VixVM_GetRootSnapshot.argtypes = [VixHandle,c_int,POINTER(VixHandle)] vix.VixVM_GetCurrentSnapshot.restype = VixError vix.VixVM_GetCurrentSnapshot.argtypes = [VixHandle,POINTER(VixHandle)] vix.VixVM_GetNamedSnapshot.restype = VixError vix.VixVM_GetNamedSnapshot.argtypes = [VixHandle,c_char_p,POINTER(VixHandle)] vix.VixVM_RemoveSnapshot.restype = VixHandle vix.VixVM_RemoveSnapshot.argtypes = [VixHandle,VixHandle,VixRemoveSnapshotOptions,POINTER(VixEventProc),c_void_p] vix.VixVM_RevertToSnapshot.restype = VixHandle vix.VixVM_RevertToSnapshot.argtypes = [VixHandle,VixHandle,VixVMPowerOpOptions,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_CreateSnapshot.restype = VixHandle vix.VixVM_CreateSnapshot.argtypes = [VixHandle,c_char_p,c_char_p,VixCreateSnapshotOptions,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_EnableSharedFolders.restype = VixHandle vix.VixVM_EnableSharedFolders.argtypes = [VixHandle,c_byte,c_int,POINTER(VixEventProc),c_void_p] vix.VixVM_GetNumSharedFolders.restype = VixHandle vix.VixVM_GetNumSharedFolders.argtypes = [VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_GetSharedFolderState.restype = VixHandle vix.VixVM_GetSharedFolderState.argtypes = [VixHandle,c_int,POINTER(VixEventProc),c_void_p] vix.VixVM_SetSharedFolderState.restype = VixHandle vix.VixVM_SetSharedFolderState.argtypes = [VixHandle,c_char_p,c_char_p,VixMsgSharedFolderOptions,POINTER(VixEventProc),c_void_p] vix.VixVM_AddSharedFolder.restype = VixHandle vix.VixVM_AddSharedFolder.argtypes = [VixHandle,c_char_p,c_char_p,VixMsgSharedFolderOptions,POINTER(VixEventProc),c_void_p] vix.VixVM_RemoveSharedFolder.restype = VixHandle vix.VixVM_RemoveSharedFolder.argtypes = [VixHandle,c_char_p,c_int,POINTER(VixEventProc),c_void_p] vix.VixVM_CaptureScreenImage.restype = VixHandle vix.VixVM_CaptureScreenImage.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_Clone.restype = VixHandle vix.VixVM_Clone.argtypes = [VixHandle,VixHandle,VixCloneType,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p] vix.VixVM_UpgradeVirtualHardware.restype = VixHandle vix.VixVM_UpgradeVirtualHardware.argtypes = [VixHandle,c_int,POINTER(VixEventProc),c_void_p] vix.VixVM_InstallTools.restype = VixHandle vix.VixVM_InstallTools.argtypes = [VixHandle,c_int,c_char_p,POINTER(VixEventProc),c_void_p] vix.VixJob_Wait.restype = VixError # warning - vix.VixJob_Wait takes variable argument list vix.VixJob_Wait.argtypes = [VixHandle,VixPropertyID] vix.VixJob_CheckCompletion.restype = VixError vix.VixJob_CheckCompletion.argtypes = [VixHandle,POINTER(c_byte)] vix.VixJob_GetError.restype = VixError vix.VixJob_GetError.argtypes = [VixHandle] vix.VixJob_GetNumProperties.restype = c_int vix.VixJob_GetNumProperties.argtypes = [VixHandle,c_int] vix.VixJob_GetNthProperties.restype = VixError # warning - vix.VixJob_GetNthProperties takes variable argument list vix.VixJob_GetNthProperties.argtypes = [VixHandle,c_int,c_int] vix.VixSnapshot_GetNumChildren.restype = VixError vix.VixSnapshot_GetNumChildren.argtypes = [VixHandle,POINTER(c_int)] vix.VixSnapshot_GetChild.restype = VixError vix.VixSnapshot_GetChild.argtypes = [VixHandle,c_int,POINTER(VixHandle)] vix.VixSnapshot_GetParent.restype = VixError vix.VixSnapshot_GetParent.argtypes = [VixHandle,POINTER(VixHandle)]
ii = [0, 5, 21] y = x[ii] <manipulate y> x[ii] = y
from itertools import groupby a = [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0], [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 5.0, 5.0, 5.0], [1.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0], [5.0, 5.0, 5.0], [1.0] ] b = [] c = [] for inner in a: new_b = [] new_c = [] for value, repeated in groupby(sorted(inner)): new_b.append(value) new_c.append(sum(1 for _ in repeated)) b.append(new_b) c.append(new_c) print b # [[1.0], [2.0, 3.0, 4.0], [3.0, 5.0], [1.0, 4.0, 5.0], [5.0], [1.0]] print c # [[13], [6, 5, 4], [8, 3], [1, 3, 3], [3], [1]]
import sys, time from PyQt4 import QtGui as qt from PyQt4 import QtCore as qtcore app = qt.QApplication(sys.argv) class widget(qt.QWidget): def __init__(self, parent=None): qt.QWidget.__init__(self) def appinit(self): thread = worker() self.connect(thread, thread.signal, self.testfunc) thread.start() def testfunc(self, sigstr): print sigstr class worker(qtcore.QThread): def __init__(self): qtcore.QThread.__init__(self, parent=app) self.signal = qtcore.SIGNAL("signal") def run(self): time.sleep(5) print "in thread" self.emit(self.signal, "hi from thread") def main(): w = widget() w.show() qtcore.QTimer.singleShot(0, w.appinit) sys.exit(app.exec_()) main()
import os os.makedirs('a/b/c', exist_ok=True)
values = T.vector('values') nb_values = values.shape[0] # For every element in 'values', obtain the total number of times # its value occurs in 'values'. # NOTE : I've done the broadcasting a bit more explicitly than # needed, for clarity. freqs = T.eq(values[:,None], values[None, :]).sum(0).astype("float32") # Compute a vector containing, for every value in 'values', the # probability of that value in the vector 'values'. # NOTE : these probabilities do *not* sum to 1 because they do not # correspond to the probability of every element in the vector 'values # but to the probability of every value in 'values'. For instance, if # 'values' is [1, 1, 0] then 'probs' will be [2/3, 2/3, 1/3] because the # value 1 has probability 2/3 and the value 0 has probability 1/3 in # values'. probs = freqs / nb_values entropy = -T.sum(T.log2(probs) / nb_values) fct = theano.function([values], entropy) # Will output 0.918296... print fct([0, 1, 1])
import Tkinter as Tk root = Tk.Tk() def submit(): print "entered text were " + entry.get() entry = Tk.Entry(root) entry.pack() button = Tk.Button(root,text='submit',command=submit) button.pack() root.mainloop()
from datetime import datetime tick = datetime.now() # run the tests here tock = datetime.now() diff = tock - tick # the result is a datetime.timedelta object print(diff.total_seconds())
class CatZoo(object): def __init__(self, name, age, gender, location): self._names = name self._ages = age self._genders = gender self._location = location @classmethod def make_zoo_cat(cls, name, ages, genders, location): return cls.mak_zoo_cats([name], age, gender, location) @classmethod def make_zoo_cats(cls, names, ages, genders, location): return CatZoo(names, age, gender, location) @property def location(self): return self._location @property def names(self): return self._names def age(self, name): if name in self._names: return self._ages[self._names.index(name)] else: return None def gender(self, name): if name in self._names: return self._genders[self._names.index(name)] else: return None @property def meow(self): return "meow!"
dc = DesiredCapabilities.CHROME dc['loggingPrefs'] = {'browser': 'ALL'} chrome_profile = webdriver.ChromeOptions() profile = {"download.default_directory": "C:\\SeleniumTests\\PDF", "download.prompt_for_download": False, "download.directory_upgrade": True, "plugins.plugins_disabled": ["Chrome PDF Viewer"]} chrome_profile.add_experimental_option("prefs", profile) #Helpful command line switches # http://peter.sh/experiments/chromium-command-line-switches/ chrome_profile.add_argument("--disable-extensions") self.driver = webdriver.Chrome(executable_path="C:\\SeleniumTests\\chromedriver.exe", chrome_options=chrome_profile, service_args=["--log-path=C:\\SeleniumTests\\chromedriver.log"], desired_capabilities=dc)
>>> import pymunk >>> b = pymunk.Body() >>> b2 = pymunk.Body() >>> j = pymunk.PivotJoint(b,b2,(0,0)) >>> s = pymunk.Circle(b,3) >>> b.constraints set([<pymunk.constraint.PivotJoint object at 0x02521890>]) >>> b.shapes set([<pymunk.Circle object at 0x025218F0>])
>>> c = ['(37470-880j)','(35093-791j)','(33920-981j)'] >>> map(complex, c) [(37470-880j), (35093-791j), (33920-981j)]
greetings = open("x.txt", "r").readlines() names = open("c.txt", "r").readlines() with open("b.txt", "w") as output_file: for greeting, name in zip(greetings, names): greeting = greeting.split(" ")[0] output = "{0} {1}\n".format(greeting, name) output_file.write(output)
LIST_STYLE = TableStyle([('LINEABOVE', (0,0), (-1,0), 2, colors.green), ('LINEABOVE', (0,1), (-1,-1), 0.25, colors.black), ('LINEBELOW', (0,-1), (-1,-1), 2, colors.green)])
" If you prefer the Omni-Completion tip window to close when a selection is " made, these lines close it on movement in insert mode or when leaving " insert mode autocmd CursorMovedI * if pumvisible() == 0|pclose|endif autocmd InsertLeave * if pumvisible() == 0|pclose|endif
lenOfPage = driver.execute_script("window.scrollTo(0, document.body.scrollHeight);var lenOfPage=document.body.scrollHeight;return lenOfPage;") match=False while(match==False): lastCount = lenOfPage time.sleep(3) lenOfPage = driver.execute_script("window.scrollTo(0, document.body.scrollHeight);var lenOfPage=document.body.scrollHeight;return lenOfPage;") if lastCount==lenOfPage: match=True
convert input.gif -rotate 90 out.gif
while condition: # s is socket to read from # for stdin use sys.stdin instead ready = select.select([s], [], [], 0) if ready[0]: #u can start read
import numpy as np import matplotlib.mlab as mlab import matplotlib.pyplot as plt import pickle if 0: # to generate the file delta = 0.025 x = np.arange(-3.0, 3.0, delta) y = np.arange(-2.0, 2.0, delta) X, Y = np.meshgrid(x, y) Z1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0) Z2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1) Z = 10.0 * (Z2 - Z1) ax = plt.subplot(111) CS = ax.contourf(X, Y, Z) pickle.dump(ax, open("mpl_test.pkl", "w")) pickle.dump(CS, open("contours.pkl", "w")) else: # Then at a later time... x0 = pickle.load(open("mpl_test.pkl", "r")) x1 = pickle.load(open("contours.pkl", "r")) v = x1.collections[0].get_paths()[0].vertices # get the vertices of the contour x, y = v[:,0]+.2, v[:,1]+.1 # shift the contour x0.plot(x, y, 'w', linewidth=3) # add it to the plot as a white line
import subprocess subprocess.call('ipconfig /all')
#!/usr/bin/python import os import subprocess proc=raw_input("Enter the mode :") os.environ["JAVA_HOME"] = '/usr/lib/jvm/java-7-openjdk-amd64' os.environ["CATALINA_HOME"] = '/export/apps/tomcat7' if proc == "start": os.getcwd() os.chdir("/export/apps/tomcat7/bin/") os.getcwd() subprocess.call('sh catalina.sh start',shell=True) print "Tomcat started successfully" elif proc == "stop": os.getcwd() os.chdir("/export/apps/tomcat7/bin/") os.getcwd() subprocess.call('sh catalina.sh stop',shell=True) print "Tomcat stopped successfully" elif proc == "restart": os.getcwd() os.chdir("/export/apps/tomcat7/bin/") os.getcwd() subprocess.call('sh catalina.sh stop',shell=True) subprocess.call('sh catalina.sh start',shell=True) print "tomcat restarted successfully" else: print "error: give any mode" print "Thank you"
#!/usr/bin/python import binascii, os.path, urllib, random, Image from Crypto.Cipher import AES class ECBPenguin(object): ''' A penguin class ''' def __init__(self, img_clr=""): if not img_clr: self.__demo_image__() self.img_clr = "tux_clear.bmp" else: self.img_clr = img_clr self.__get_header__() def __demo_image__(self): ''' Downloads a TUX image compatible for this program: square and with size multiple of 16 ''' print "Downloading image..." image = urllib.URLopener() image.retrieve("http://fp-games.googlecode.com/svn/trunk/CodeWeek1/graviTux/data/tux.bmp","tux_clear.bmp") def __get_sizes__(self, dibheader): # Get image's dimensions (at offsets 4 and 8 of the DIB header) DIBheader = [] for i in range(0,80,2): DIBheader.append(int(binascii.hexlify(dibheader)[i:i+2],16)) self.width = sum([DIBheader[i+4]*256**i for i in range(0,4)]) self.height = sum([DIBheader[i+8]*256**i for i in range(0,4)]) def __get_header__(self): ''' Read BMP and DIB headers from input image and write them to output image ''' f_in = open(self.img_clr, 'rb') # BMP is 14 bytes bmpheader = f_in.read(14) # DIB is 40 bytes dibheader = f_in.read(40) self.__get_sizes__(dibheader) self._bmpheader = bmpheader self._dibheader = dibheader f_in.close() def encrypt(self, img_enc = "tux_enc.bmp", key = '0123456789abcdef'): ''' Encrypt the my_penguin ''' self.img_enc = img_enc f_in = open(self.img_clr, 'rb') f_out = open(img_enc, 'wb') f_out.write(self._bmpheader) f_out.write(self._dibheader) row_padded = (self.width * self.height * 3) image_data = f_in.read(row_padded) cleartext = binascii.unhexlify(binascii.hexlify(image_data)) # Initialization Vector IV = ''.join(chr(random.randint(0, 0xFF)) for i in range(16)) # AES ECB mode mode = AES.MODE_ECB # Encryptor encryptor = AES.new(key, mode, IV=IV) # Perform the encryption and write output to file f_out.write(encryptor.encrypt(cleartext)) f_in.close() f_out.close() def show_clr(self): ''' Display cleartext penguin ''' im = Image.open(self.img_clr) im.show() def show_enc(self): ''' Display ciphertext penguin ''' im = Image.open(self.img_enc) im.show() def main(): my_penguin = ECBPenguin() my_penguin.show_clr() my_penguin.encrypt() my_penguin.show_enc() if __name__ == "__main__": main()
>>> 0x02 2 >>> 0x104 260 >>> import ctypes >>> ctypes.c_int(0x104) c_int(260)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('', port))
>>> re.findall(r'[a-zA-Z]+(?![a-zA-Z(])', "movav(x/2, 2)*movsum(y, 3)*z") ['x', 'y', 'z']
textfile = open('output.txt','w') syslist = dir(sys) MAX_COLUMNS = 3 # Maximum number of columns to print colcount = 0 # Track the column number for x in syslist: # First thing we do is add one to the column count when # starting the loop. Since we're doing some math on it below # we want to make sure we don't divide by zero. colcount += 1 textfile.write(x) # After each entry, add a tab character ("\t") textfile.write("\t") # Now, check the column count against the MAX_COLUMNS. We # use a modulus operator (%) to get the remainder after dividing; # any number divisible by 3 in our example will return '0' # via modulus. if colcount % MAX_COLUMNS == 0: # Now write out a new-line ("\n") to move to the next line. textfile.write("\n") textfile.close()
r.table('f_tab').filter( lambda row: r.expr([{'sid': 21, 'et': 5}, ...]).set_difference(row['sk']).is_empty() ).filter( lambda row: r.expr([{'wid': 22, 'et': 6}, ...]).set_difference(row['wc']).is_empty() )['pid']
id_us = self.cbUser.itemData(self.cbUser.currentIndex()).toPyObject()
import pandas as pd data_frame = pd.read_table('test_data.txt', sep='\s+', header=None) data_frame.columns = ['year', 'month', 'day', 'n1', 'n2', 'n3', 'n4', 'type'] data_frame
$ echo 您好 | python -c "import sys; print repr(sys.stdin.read().decode('utf8'))" u'\u60a8\u597d\n'
#!/usr/bin/env python import urllib from os import pardir, rename, listdir, getcwd from os.path import join class MyOpener(urllib.FancyURLopener): version = 'QuickTime/7.6.2 (verqt=7.6.2;cpu=IA32;so=Mac 10.5.8)' # This line tells urllib.urlretrieve and urllib.urlopen to use your MyOpener # instead of the default urllib.FancyOpener urllib._urlopener = MyOpener() def main(): # lots of stuff for title, url in downloads.iteritems(): fpath = join(data_dir, title.strip().replace('\t',"").replace(" ", "_")) fpath += ".mov" urllib.urlretrieve(url, fpath)
from functools import partial try: old_save = bundle.obj.save bundle.obj.save = partial(old_save, user=bundle.request.user) return super(FooResource, self).save(bundle) finally: bundle.obj.save = old_save
>>> open('test_newlines.txt', 'rb').read() 'a\rb\nc\r\nd' >>> list(open('test_newlines.txt')) ['a\rb\n', 'c\r\n', 'd'] >>> list(open('test_newlines.txt', 'U')) ['a\n', 'b\n', 'c\n', 'd'] >>> open('test_newlines.txt').readlines() ['a\rb\n', 'c\r\n', 'd'] >>> open('test_newlines.txt', 'U').readlines() ['a\n', 'b\n', 'c\n', 'd'] >>> open('test_newlines.txt').read().split() ['a', 'b', 'c', 'd']
def dfs_visit(start_city): mark start_city as visited if(end_city is discovered) //soon as end_city is discovered, return the path it took to get there. return stack for each adj_city of start_city: add adj_city to stack //to keep track of that path to the end_city if adj_city is not discovered: dfs_visit(adj_city)
for obj1 in some_list: dict1['key'] = value for obj2 in some_other_list: ... dict1['key'] = list2 list2 = [] # create new list to fill next time list1.append(dict1)
from traits.api import HasTraits, Float class AA(HasTraits): a =Float() class BB(HasTraits): b = Float() aa = AA() bb = BB() aa.sync_trait("a", bb, "b") # aa.a and bb.b are synchronized # Now we use non-official API functions info = aa._get_sync_trait_info() synced = info.has_key("a") # True if aa.a is synchronized to some other trait if synced: sync_info = info["a"] # fails if a is not a synchronized trait # sync_info is a dictionary which maps (id(bb),"b") to a tuple (wr, "b") # If you do not know the id() of the HasTraits-object and the name of # the trait, you have to loop through all elements of sync_info and # search for the entry you want... wr, name = sync_info[(id(bb), "b")] # wr is a weakref to the class of bb, and name is the name # of the trait which aa.a is synced to cls = wr() # <__main__.BB at 0x6923a98>
import errno import os def mkdir_p(path): try: os.makedirs(path) except OSError as exc: # Python >2.5 if exc.errno == errno.EEXIST and os.path.isdir(path): pass else: raise
In [16]: def conv(col, tzs): ....: return [ d.tz_localize(tz) for d, tz in zip(col, tzs) ] ....: In [17]: df Out[17]: date1 date2 tz 0 2014-11-19 16:11:45 2014-11-19 16:30:31 America/New_York 1 2014-11-19 18:37:47 2014-11-19 18:57:55 America/New_York 2 2014-11-19 18:59:21 2014-11-19 19:51:29 America/Los_Angeles 3 2014-11-19 19:47:35 2014-11-19 20:58:04 America/New_York 4 2014-11-19 20:29:46 2014-11-19 20:40:36 America/New_York 5 2014-11-19 22:23:42 2014-11-19 22:58:43 America/Los_Angeles 6 2014-11-20 16:31:24 2014-11-20 17:49:12 America/New_York In [18]: df['date1_tz'] = conv(df['date1'],df['tz']) In [19]: df['date2_tz'] = conv(df['date2'],df['tz']) In [20]: df Out[20]: date1 date2 tz date1_tz date2_tz 0 2014-11-19 16:11:45 2014-11-19 16:30:31 America/New_York 2014-11-19 16:11:45-05:00 2014-11-19 16:30:31-05:00 1 2014-11-19 18:37:47 2014-11-19 18:57:55 America/New_York 2014-11-19 18:37:47-05:00 2014-11-19 18:57:55-05:00 2 2014-11-19 18:59:21 2014-11-19 19:51:29 America/Los_Angeles 2014-11-19 18:59:21-08:00 2014-11-19 19:51:29-08:00 3 2014-11-19 19:47:35 2014-11-19 20:58:04 America/New_York 2014-11-19 19:47:35-05:00 2014-11-19 20:58:04-05:00 4 2014-11-19 20:29:46 2014-11-19 20:40:36 America/New_York 2014-11-19 20:29:46-05:00 2014-11-19 20:40:36-05:00 5 2014-11-19 22:23:42 2014-11-19 22:58:43 America/Los_Angeles 2014-11-19 22:23:42-08:00 2014-11-19 22:58:43-08:00 6 2014-11-20 16:31:24 2014-11-20 17:49:12 America/New_York 2014-11-20 16:31:24-05:00 2014-11-20 17:49:12-05:00
re.search(r"(?<![x)])\)+", text) >>> re.search(r"(?<![x)])\)+", " hello)))))") <_sre.SRE_Match object at 0xb75c0c98> >>> _.group() ')))))' >>> re.search(r"(?<![x)])\)+", " hellox)))))") >>>
import os def lowercase_rename( dir ): # renames all subforders of dir, not including dir itself def rename_all( root, items): for name in items: try: os.rename( os.path.join(root, name), os.path.join(root, name.lower())) except OSError: pass # can't rename it, so what # starts from the bottom so paths further up remain valid after renaming for root, dirs, files in os.walk( dir, topdown=False ): rename_all( root, dirs ) rename_all( root, files)
CACHES = { 'default': { 'BACKEND': 'django.core.cache.backends.dummy.DummyCache', } }
import matplotlib.pyplot as plt import mpl_toolkits.mplot3d.axes3d as axes3d import numpy as np x = np.linspace(0, 6, 10) y = np.sin(x) z = x fig = plt.figure() ax = fig.add_subplot(1, 1, 1, projection='3d') ax.plot(x, y, z , linestyle='-' , linewidth=20 , marker='o' , markersize=20 , solid_capstyle='round' ) ax.set_xlim3d(-1, 7) ax.set_ylim3d(-2, 2) ax.set_zlim3d(-1, 7) plt.show()
positions = random.sample(range(100), amount_you_want) for coord in positions: matrix[coord%10][coord//10] = 'O'
from xlutils.copy import copy from xlrd import open_workbook import xlwt import os import shutil import glob def openexcel_main(): book = open_workbook('input.xls',formatting_info=True) sheet = book.sheet_by_index(0) wb = copy(book) w_sheet = wb.get_sheet(0) folder_name=['do_not_delete','internal_builds'] for j in range (0,2): folder=folder_name.pop() for i in range (1,(sheet.nrows)): cell_test_group = sheet.cell(i,0) data=str(cell_test_group.value) print '#####################################' print data list=[] source_path='/mnt/'+folder+'/pybuild/'+data+'/MAIN/' if os.path.exists(source_path): try: os.chdir(source_path) all_subdirs = [d for d in os.listdir('.') if os.path.isdir(d)] for dirs in all_subdirs: dir = os.path.join('/mnt/'+folder+'/pybuild/'+data+'/MAIN/', dirs) os.chdir(dir) current = os.getcwd() new = str(current).split("/")[6] list.append(new) list.sort() val=list for i in range (1,4): if val==[]: break else: print i current_build_number=val.pop() print 'Current_Build:'+current_build_number source_path_copy = r""+ source_path+"/"+current_build_number+"/" print 'Copying From:'+ source_path_copy dest_path = r"/home/builds_repo/"+folder+"/pybuild/"+data+"/MAIN/"+current_build_number+"/" os.chdir(source_path_copy) file_name=(glob.glob('*[_bin].*')).pop() print 'File_Copied:'+ file_name if not os.path.exists(dest_path): os.makedirs(dest_path) shutil.copyfile(source_path_copy + file_name, dest_path + file_name) except Exception ,e: #Use Exception if not sure which exception will raise print'File Not Found ..',e #raise def main(): openexcel_main() if __name__ == '__main__': #Use main main()
cur.execute("SELECT * FROM Posts ORDER BY date ASC")
def makeKey2( row2 ): return ( row2[1], row2[2] ) # Whatever the lookup key is for source2 def makeKey1( row1 ): return ( row1[3], row1[0] ) # Whatever the lookup key is for source1 dayFile = [ open("day%d.pajek","w") for i in range(6) ] combined = open("combined.dat","w") source1 = open( schedules, "r" ) rdr1= csv.reader( source1 ) source2 = open( aboutSchedules, "r" ) rdr2= csv.reader( source2 ) # "Combine" usually means a relational join between source 1 and source 2. # We'll assume that source2 is a small-ish dimension and the # source1 is largish facts aboutDim = dict( (makeKey2(row),row) for row in rdr2 ) for row in rdr1: connection, dayList = mine_and_combine( row, aboutDim[ makeKey1(row) ] ) for d in dayList: dayFile[d].write( connection ) flags = [ 1 if d is in dayList else 0 for d in range(6) ] combined.write( connection, flags )
point_list=[(0.,1.,2.), (2.,2.,3.)] point3d(point_list)
import numpy masses = numpy.array([[0, 0, 0, 0], [0, 1, 0, 0], [0, 2, 0, 0], [1, 0, 0, 0], [1, 1, 0, 1], [1, 2, 0, 1], [2, 0, 0, 0], [2, 1, 0, 0], [2, 2, 0, 0]]) nonZeroMasses = masses[numpy.nonzero(masses[:,3])] # Not really necessary, can just use masses because 0 mass used as weight will work just fine. CM = numpy.average(nonZeroMasses[:,:3], axis=0, weights=nonZeroMasses[:,3])
import wx def set_frame_display(frame, display_index): display = wx.Display(display_index) x, y, w, h = display.GetGeometry() frame.SetPosition((x, y)) def main(): app = wx.PySimpleApp() count = wx.Display_GetCount() for index in range(count): frame = wx.Frame(None, -1, 'Display %d of %d' % (index + 1, count)) set_frame_display(frame, index) frame.Center() frame.Show() app.MainLoop() if __name__ == '__main__': main()
import os, re path = 'C:/Temp/Folder1/allTexts' listing = os.listdir(path) for infile in listing: text = open(path + '/' + infile).read() match = re.search('<div id="text-interesting1">', text) if match is None: continue start = match.start() end = re.search('<div id="text-interesting2">', text).start() print text[start:end]
import sys from PyQt4 import QtGui from PyQt4 import QtCore class MainWindow(QtGui.QWidget): def __init__(self): super(MainWindow, self).__init__() main_layout = QtGui.QVBoxLayout() # Create the model self.model = MyModel() # Create a slider and link it to the model self.slider1 = QtGui.QSlider() self.model.add_slider(self.slider1) main_layout.addWidget(self.slider1) # Add a lineEdit and button to force update the model # Note that the LineEdit is not linked to the model, so won't update with the slider self.edit = QtGui.QLineEdit() button = QtGui.QPushButton('update model') button.clicked.connect(self.on_clicked) main_layout.addWidget(self.edit) main_layout.addWidget(button) self.setLayout(main_layout) def on_clicked(self): self.model.update_model(int(self.edit.text()),self.slider1) class MyModel(QtGui.QStandardItemModel): def __init__(self,*args,**kwargs): super(MyModel,self).__init__(*args,**kwargs) self._slider_list = {} self.itemChanged.connect(self.on_item_changed) def add_slider(self,slider): if slider in self._slider_list: raise Exception('You cannot link a slider to the model twice') item = QtGui.QStandardItem(str(slider.value())) self._slider_list[slider] = item self.appendRow(item) slider.valueChanged.connect(lambda value: self.update_model(value,slider)) def update_model(self,value,slider): if str(value) != self._slider_list[slider].text(): self._slider_list[slider].setText(str(value)) print 'update_model: %d'%value def on_item_changed(self,item): slider = self._slider_list.keys()[self._slider_list.values().index(item)] if slider.value() != int(item.text()): slider.setValue(int(item.text())) print 'on_item_changed: %s'%item.text() app = QtGui.QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_())
matches = [] def match_found(m): # append the match start position to the matches array matches.append(m.end(0)) editor.research('pattern', match_found) matches[0] #should now contain the index of the *end* of the first match
from itertools import product gene_regions, species_plural, ontologies, lengths = zip(*result_dict) for gene_region, species, ontology, length in product(gene_regions, species_plural, ontologies, lengths): # do something with this combo.
from itertools import groupby, permutations perms = filter(lambda x: x[0] < x[-1], permutations(range(4), 3)) key = lambda x: x[1] # sort and group by second element angles = [list(g) for k, g in groupby(sorted(perms, key=key), key=key)] # here, any comprehension can be used, e.g. # angles = {k: list(g) for k, g in groupby(sorted(perms, key=key), key=key)} # will produce the dict from @niemmi's answer >>> angles [ [(1, 0, 2), (1, 0, 3), (2, 0, 3)], [(0, 1, 2), (0, 1, 3), (2, 1, 3)], [(0, 2, 1), (0, 2, 3), (1, 2, 3)], [(0, 3, 1), (0, 3, 2), (1, 3, 2)] ]
>>> d = {'translation 1': 'dilligent', 'pinyin 1': 'ren4wei2', 'character 1': '\xe8\xaa\x8d\xe7\x88\xb2'} >>> key = "translation %s" % 1 >>> d[key] 'dilligent'
huffman_tree = encode(tree) complete_tree = huffman_tree get_intermediate_node = lambda val, arr : ''.join( [ char for char,binary in itertools.ifilter( lambda node : node[1].startswith( val ),arr)] ) for val in range( next_power_of_two( len(huffman_tree) ) ): bvalue = bin(val)[2:] node = [ get_intermediate_node( bvalue , huffman_tree) , bvalue ] if node not in complete_tree: complete_tree.append( node) print sorted( complete_tree , key=lambda p: (len(p[-1]), p) ) >>> [['ab', '0'], ['cde', '1'], ['a', '00'], ['b', '01'], ['c', '10'], ['de', '11'], ['', '100'], ['', '101'], ['d', '110'], ['e', '111']]
import subprocess def php(script_path): p = subprocess.Popen(['php', script_path], stdout=subprocess.PIPE) result = p.communicate()[0] return result # YOUR CODE BELOW: page_html = "<h1>News and Updates</h1>" news_script_output = php("news-generator.php") print page_html + news_script_output
if event.type == PG.KEYDOWN and keystate[PL.K_UP]: key_up_pressed = True elif event.type == PG.KEYUP and keystate[PL.K_UP]: key_up_pressed = False
result = [[str(subitem) for subitem in sublist] for sublist in start]
from itertools import groupby from operator import itemgetter with open('somefile') as fin: lines = (line.split() for line in fin) for key, items in groupby(lines, itemgetter(1)): print list(items) [['12', 'fish'], ['50', 'fish']] [['1', 'turtle']] [['11', 'dog'], ['34', 'dog'], ['12', 'dog']]
from IPython.utils.io import stdout; stdout.write('Matches:'+'\033[0;33m'+str(123)+'\033[0;0m')
nxn = np.arange(n**2).reshape(n, -1) for i in xrange(0, 2**(n**2)): arr = (i >> nxn) % 2 # do smthng with arr
from paste.deploy.loadwsgi import appconfig config = appconfig('config:development.ini', 'myapp', relative_to='.') if config['env'] == 'production': api_endpoint_uri = 'http://api.external.com/?{0}' timezone = timezone('US/Eastern') # .. and so on ...
import time tt = time.strptime("19/Jun/2014:00:03:09","%d/%b/%Y:%H:%M:%S") print time.mktime(tt)
mask = pyinotify.IN_CREATE | pyinotify.IN_MOVED_TO class PTmp(pyinotify.ProcessEvent): ... def process_IN_MOVED_TO(self, event): print "Moved: %s " % os.path.join(event.path, event.name) event_log = open('/home/saad/Code/test/event_log', 'a') event_log.write(event.name + ' - ' + timestamp.strftime('%c') + '\n') event_log.close()
QtCore.QObject.connect(self.worker, Qt.SIGNAL("a"), self.Tester, Qt.Qt.DirectConnection) #this is added
>>> Note.query.filter(Note.message.like("%somestr%")).all() []
def Help(string): if string == 'Manifest': return Manifest() elif string == 'Intent': return Intent() else: print('The options available are:\n%s\nType Q to Quit\n' % '\n'.join(andHelp)) x = input('What option do you choose: ') print('\n') if x != 'Q': Help(x)
Pos_List, Room_List, Type_List, Spec_List, Sub_List, Rtr_List, IPa_List, MAC_List = [], [], [], [], [], [], [], []
Pipe dec_pipe(new Base64_Decoder, get_cipher("AES-256/CBC/NoPadding", key, iv, Botan::DECRYPTION));
>>> if x == 0: x = 0 print('Negative changed to zero') pass elif x == 0: print('other stuff')
import matplotlib.pyplot as plt channel,percentages, mass = "ab",[0.2,0.2,0.1,0.5], 10 # build a rectangle in axes coords left, width = .25, .5 bottom, height = .25, .5 right = left + width top = bottom + height channel = ''.join(i for i in channel if i in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') nu_energy , d_plus_p_energy, e_energy, gamma_energy = percentages # The slices will be ordered and plotted counter-clockwise. labels = [r'$E_{\nu} / E_{tot}$ = %.3f' % nu_energy, r'$E_{d+p} / E_{tot}$ = %.3f' % d_plus_p_energy, r'$E_{e} / E_{tot}$ = %.3f' % e_energy, r'$E_{\gamma} / E_{tot}$ = %.3f' %gamma_energy] sizes = [nu_energy , d_plus_p_energy, e_energy, gamma_energy] colors = ['gold','red','green', 'lightskyblue'] explode = (0.1, 0,0,0) patches, texts = plt.pie(sizes, colors=colors)#, startangle=90) ** not working for some reason plt.legend(patches, labels, loc = "best") E_gamma_e = e_energy + gamma_energy #plt.pie(sizes, explode=explode, labels=labels, colors=colors, #autopct='%1.1f%%', shadow=True) # Set aspect ratio to be equal so that pie is drawn as a circle. plt.axis('equal') plt.title(r'DM DM $\rightarrow$ $%s$ + $%s$'%(channel,channel),position=(0.5,1),bbox=dict(facecolor='0.8',), fontsize=30) plt.text(-1,-0.98, r'$E_{\gamma + e} / E_{tot}$ = %.3f'%E_gamma_e, bbox=dict(facecolor='white', alpha=0.5), fontsize=14) plt.tight_layout() plt.show()
def merge(source, destination): """ run me with nosetests --with-doctest file.py >>> a = { 'first' : { 'all_rows' : { 'pass' : 'dog', 'number' : '1' } } } >>> b = { 'first' : { 'all_rows' : { 'fail' : 'cat', 'number' : '5' } } } >>> merge(b, a) == { 'first' : { 'all_rows' : { 'pass' : 'dog', 'fail' : 'cat', 'number' : '5' } } } True """ for key, value in source.items(): if isinstance(value, dict): # get node or create one node = destination.setdefault(key, {}) merge(value, node) else: destination[key] = value return destination
Graph.Read_Ncol(netFile, names=True, weights="if_present", directed=True)
>>> msvcrt.get_osfhandle(a.fileno()) 1956 # valid HANDLE
def update(self, instance, validated_data): # First, update the User user_data = validated_data.pop('user', None) for attr, value in user_data.items(): setattr(instance.user, attr, value) # Then, update UserProfile for attr, value in validated_data.items(): setattr(instance, attr, value) instance.save() return instance
$ convert *.tif pictures.pdf
lol[2][0]
>>> from collections import OrderedDict >>> mydict = { 'age': {'context': 2}, 'address': {'context': 4}, 'name': {'context': 1} } >>> OrderedDict(sorted(mydict.iteritems(), key=lambda x: x[1]['context'])) OrderedDict([('name', {'context': 1}), ('age', {'context': 2}), ('address', {'context': 4})])
import pandas as pd from ggplot import * df = pd.DataFrame([{"day": 20150203, "ndcg@k": 0.245559, "MAP@k": 0.201919}, {"day": 20150204, "ndcg@k": 0.255559, "MAP@k": 0.191919}, {"day": 20150205, "ndcg@k": 0.2645559, "MAP@k": 0.181919}, {"day": 20150203, "ndcg@k": 0.275559, "MAP@k": 0.171919}, {"day": 20150204, "ndcg@k": 0.285559, "MAP@k": 0.161919}, {"day": 20150205, "ndcg@k": 0.295559, "MAP@k": 0.151919}]) df2 = pd.melt(df[['day', 'ndcg@k', 'MAP@k']], id_vars=['day']) df2.day = pd.to_datetime(df2.day, format = '%Y%m%d') ggplot(aes(x='day', y='value', group='variable', shape='variable', colour='variable'), data=df2) + geom_line() + geom_point() + scale_x_date(labels = date_format('%Y-%m-%d %H:%M'))
for i, v in kwargs.items(): print (" ", i, ": ", v)
data:"AlternativeTitle:" + alttitle + '&' "othervalue" + otherval,
import signal dict((k, v) for v, k in reversed(sorted(signal.__dict__.items())) if v.startswith('SIG') and not v.startswith('SIG_'))
np.vstack((one, two, three))
clib = ctypes.cdll.LoadLibrary('some.so') c_foo = clib.c_foo c_foo.restype = ctypes.py_object
class NewsletterAdmin(admin.ModelAdmin): def save_model(self, request, obj, form, change): obj.save() if not change: # newly created newsletter if obj.send_to == '1': for student in Student.objects.all(): EmailLog.objects.create(student=student, newsletter=obj) elif obj.send_to == '2': for teacher in Teacher.objects.all(): EmailLog.objects.create(teacher=teacher, newsletter=obj)
if not MyModel.objects.filter(content=mytext).count():
def worker(stop, jobs): for j in jobs: if stop: break j.do() stop = [] d = deferToThread(worker) # This will make the list eval to true and break out of the loop. stop.append(None)
# Features are length-100 vectors of floats feature_input = tf.placeholder(tf.float32, shape=[100]) # Labels are scalar integers. label_input = tf.placeholder(tf.int32, shape=[]) # Alternatively, could do: # feature_batch_input = tf.placeholder(tf.float32, shape=[None, 100]) # label_batch_input = tf.placeholder(tf.int32, shape=[None]) q = tf.FIFOQueue(100, [tf.float32, tf.int32], shapes=[[100], []]) enqueue_op = q.enqueue([label_input, feature_input]) # For batch input, do: # enqueue_op = q.enqueue_many([label_batch_input, feature_batch_input]) label_batch, feature_batch = q.dequeue_many(BATCH_SIZE) # Build rest of model taking label_batch, feature_batch as input. # [...] train_op = ... sess = tf.Session() def load_and_enqueue(): with open(...) as feature_file, open(...) as label_file: while True: feature_array = numpy.fromfile(feature_file, numpy.float32, 100) if not feature_array: return label_value = numpy.fromfile(feature_file, numpy.int32, 1)[0] sess.run(enqueue_op, feed_dict={feature_input: feature_array, label_input: label_value}) # Start a thread to enqueue data asynchronously, and hide I/O latency. t = threading.Thread(target=load_and_enqueue) t.start() for _ in range(TRAINING_EPOCHS): sess.run(train_op)
args = argp.parse_args() args.o = open(args.o,'w')
profile = form.save(commit=False) profile.user = request.user profile.save()
class SiteMiddleware(object): def process_request(self, request): try: current_site = Site.objects.get(domain=request.get_host()) except Site.DoesNotExist: current_site = Site.objects.get(id=settings.DEFAULT_SITE_ID) request.current_site = current_site settings.SITE_ID = current_site.id
import os import sys directory = os.path.dirname(os.path.abspath(__file__)) sys.stdout = open(os.path.join(directory, "demo-logfiles", "log_file_template.txt"), "a")
{ "Version": "2008-10-17", "Id": "PolicyForCloudFrontPrivateContent", "Statement": [ { "Sid": "1", "Effect": "Allow", "Principal": { "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EH238ELEGANOC" }, "Action": "s3:GetObject", "Resource": "arn:aws:s3:::onur.deneme/*" } ] }
import itertools import operator L = [('HSBC8999', 4, 179447), ('HSBC1199', 81, 864108), ('HSBC1199', 32, 715121),('HSBC8999', 4, 1447),('HSBC1199', 32, 61521) ] L.sort(key=operator.itemgetter(0)) for _k, stackoverflow in itertools.groupby(L, operator.itemgetter(0)): subl = list(stackoverflow) subl.sort(key=operator.itemgetter(1)) for k, subg in itertools.groupby(subl, operator.itemgetter(1)): subs = list(subg) print("the average of {} is {}".format(k, sum(s[2] for s in subs)/len(subs)))
from sqlalchemy import select def alias_dups(join): dups = set(col.key for col in join.left.columns) & \ set(col.key for col in join.right.columns) columns = [] for col in join.columns: if col.key in dups: col = col.label('%s_%s' % (col.table.name, col.key)) columns.append(col) return select(columns, from_obj=[join]).alias() class ST2(Base): __table__ = alias_dups(t1.join(t2))
from BeautifulSoup import BeautifulSoup import urllib2 import codecs response = urllib2.urlopen('http://www.reality.sk/zakazka/0747-003578/predaj/1-izb-byt/kosice-mestska-cast-sever-sladkovicova-kosice-sever/art-real-1-izb-byt-sladkovicova-ul-kosice-sever') html = response.read() soup = BeautifulSoup(html) tabulka = soup.find("table", {"class" : "detail-char"}) records = [] # store all of the records in this list for row in tabulka.findAll('tr'): col = row.findAll('td') prvy = col[0].string.strip() druhy = col[1].string.strip() record = '%s;%s' % (prvy, druhy) # store the record with a ';' between prvy and druhy records.append(record) fl = codecs.open('output.txt', 'wb', 'utf8') line = ';'.join(records) fl.write(line + u'\r\n') fl.close()
import itertools G = [0, 1, 2, 3, 4, 5] # or whatever your group might be def is_associative(x, y, z): if (x*y)*z == x*(y*z): return True return False xyz = itertools.product(G, repeat=3) for three in xyz: if not is_associative(*three): print("associativity fails for %s, %s, %s") % three
print("Hello World!") raw_input("Press Enter to Continue. . .: ") print("\033[FX X X X X X X X X X X X X X X "); # ^^^^^^ # move up # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # overwrite by whatever you want
$ python -c 'import time; print(time.tzname)' ('GMT', 'BST') $ TZ='Europe/Stockholm' python -c 'import time; print(time.tzname)' ('CET', 'CEST')
def read_csv(csvfile): with open(csvfile, 'rb') as file: columns = 4 reader = csv.reader(file, delimiter=';') # i will count the rows, starting at 1 for i, row in enumerate(reader, start=1): for column in range(0, columns): print row[column], ' ====== ', 'column ', column+1, ' and row ', i
def print_function_name_and_result(func, *args, **kw): print "%s : %s" % (func.__name__, func(*args, **kw)) print_function_name_and_result(func, keyword1='B') >> func : B
$user_info = $twitteroauth->get('account/verify_credentials');
elif event.type==pygame.MOUSEBUTTONDOWN and event.button==LEFT: print "You pressed the left mouse button at (%d,%d)" %event.pos screen.set_at((event.pos.x, event.pos.y), pygame.Color(255,0,0,255))
def readFile(ui): L = [] with open(ui, 'r') as f: for line in f.readlines(): L.append(float(line)) return sorted(L) def fileAddValue(ui, val): with open(ui, 'a') as f: f.write(str(val) + '\n') ui = raw_input("Please enter your file name:") L = readFile(ui) print('original file:') print(L) val = float(raw_input("Enter the value you would like to add to the list: ")) fileAddValue(ui, val) L = readFile(ui) print('updated file:') print(L)
def test_get_or_create_indexed_node_with_int_property(self): graph_db = neo4j.GraphDatabaseService() fred = graph_db.get_or_create_indexed_node(index="person", key="name", value="Fred", properties={"level" : 1}) assert isinstance(fred, neo4j.Node) assert fred["level"] == 1 graph_db.delete(fred)
def joinby(value, arg): return arg.join(value)
You run the Main() function for this script to work # Main function. # *** THIS FUNCTION NEEDS TO BE CALLED IN THE CONSOLE *** # i.e >>> main() def main(): # Choose the files you wish to use inputFile = pickAFile() vignetteFile = pickAFile() # Turn both files into picture objects inputPic = makePicture(inputFile) vignette = makePicture(vignetteFile) # addVignette() function combines the input picture and vignette together # and returns the result as a new picture object newImage = addVignette(inputPic, vignette) # saveNewImage() function stores the new image as file saveNewImage(newImage) # Main() calls this function to add input picture and vignette together def addVignette(inputPic, vignette): # Create empty canvas canvas = makeEmptyPicture(getWidth(inputPic), getHeight(inputPic)) # Iterate through all the pixels of the input image. x and y are # used as the current coordinates of the pixel for x in range(0, getWidth(inputPic)): for y in range(0, getHeight(inputPic)): # Get the current pixels of inputPic and vignette inputPixel = getPixel(inputPic, x, y) vignettePixel = getPixel(vignette, x, y) # The getNewColorValues() function, makes a new color from those # values newColor = getNewColorValues(inputPixel, vignettePixel) # Assign this new color to the current pixel of the canvas px = getPixel(canvas, x, y) setColor(px, newColor) # Show the result of combiming the input picture with the vignette explore(canvas) # return the new image to main() function. return canvas # Called from the addVignette() function to add the color values from # the input picture and vignette together. It returns a new color # object def getNewColorValues(inputPixel, vignettePixel): # Get the individual colour values inputRed = getRed(inputPixel) vignetteRed = getRed(vignettePixel) inputGreen = getGreen(inputPixel) vignetteGreen = getGreen(vignettePixel) inputBlue = getBlue(inputPixel) vignetteBlue = getBlue(vignettePixel) # *********************************************************** # Most important part. This will determine if the pixel is darkent # and by how much. How it works is the darker the vignette pixel the less that will # be taken away from 255. This means the result of `255 - vignetteRed` will be a higher # value which means more will be taken away from the input colour. # The light the vignette pixel the less that will be taken away from input pixel newR = inputRed - (255 - vignetteRed) newG = inputGreen - (255 - vignetteGreen) newB = inputBlue - (255 - vignetteBlue) # *********************************************************** newC = makeColor(newR, newG, newB) return newC # Called from the main() function in order to save the new image def saveNewImage(newImage): folder = pickAFolder() filename = requestString("Please enter file name: ") path = folder + filename + ".jpg" writePictureTo(newImage, path)
from pyparsing import nestedExpr, ungroup, originalTextFor # use nestedExpr to define a default expression with left-right nesting markers nestedText = ungroup(nestedExpr('{{','}}')) sample = """{{detect this {{and this as well}} text}} but text does not ends here so it should {{not detect this}}.""" # note how reporting the results as a list keeps the nesting of {{ }}'s print nestedText.parseString(sample).asList() # prints ['detect', 'this', ['and', 'this', 'as', 'well'], 'text'] # if you just want the string itself, wrap with 'originalTextFor' print originalTextFor(nestedText).parseString(sample)[0] # prints {{detect this {{and this as well}} text}}
import numpy as np # Generate nested list a. N, M = 10, 7 # number of sublists and length of each sublist a = np.random.rand(N, M) # x,y indexes of max float in a. print np.unravel_index(a.argmax(), a.shape) A = np.full_like(a, -np.inf) # use np.inf if doing np.argmin A[3:5, 2:6] = a[3:5, 2:6] np.unravel_index(A.argmax(), A.shape)
query=re.sub(r"\bsearch\w+", "", query) ^^ ^^
# on build machine cd myproject pip wheel --wheel-dir wheelbase . scp -r wheelbase me@target.example.org # on target machine pip install --no-index --find-links=wheelbase myproject
f = open('test') json_obj = ijson.items(f,'').next() # '' loads everything as only one object. for (key, value) in json_obj.items(): print key + " -> " + str(value)
d = con[db][col].find_one()
mydict = {k: unicode(v).encode("utf-8") for k,v in mydict.iteritems()}
len(set([x.attrib for x in objects]))
from timeit import Timer from urllib2 import urlopen def fetch(): page = urlopen('http://www.google.com') return page.info() timer = Timer(fetch) print timer.timeit(1)
import string s = "the qUiCk BROWN fox:: jumped. over , the lazy dog." s_correct = "The quick brown fox: jumped. Over, the lazy dog." def chars_from_lines(lines): for line in lines: for ch in line: yield ch start, in_sentence, saw_space = range(3) punct = set(string.punctuation) punct_non_repeat = punct - set(['.', '-']) end_sentence_chars = set(['.', '!', '?']) def edit_sentences(seq): state = start ch_punct_last = None for ch in seq: ch = ch.lower() if ch == ch_punct_last: # Don't pass repeated punctuation. continue elif ch in punct_non_repeat: ch_punct_last = ch else: # Not punctuation to worry about, so forget the last. ch_punct_last = None if state == start and ch.isspace(): continue elif state == start: state = in_sentence yield ch.upper() elif state == in_sentence and ch in end_sentence_chars: state = start yield ch yield ' ' elif state == in_sentence and not ch.isspace(): yield ch elif state == in_sentence and ch.isspace(): state = saw_space continue elif state == saw_space and ch.isspace(): # stay in state saw_space continue elif state == saw_space and ch in punct: # stay in state saw_space yield ch elif state == saw_space and ch.isalnum(): state = in_sentence yield ' ' yield ch #with open("input.txt") as f: # s_result = ''.join(ch for ch in edit_sentences(chars_from_lines(f))) s_result = ''.join(ch for ch in edit_sentences(s)) print(s_result) print(s_correct)
>>> a = [{'id': 1, 'array': ['a','b','c']}, {'id': 2, 'array': ['d','e','f']}] >>> [{'id': d['id'], 'term': v } for d in a for v in d['array']] [{'term': 'a', 'id': 1}, {'term': 'b', 'id': 1}, {'term': 'c', 'id': 1}, {'term': 'd', 'id': 2}, {'term': 'e', 'id': 2}, {'term': 'f', 'id': 2}]
class MyClass(object): def __init__(self,arg): self.arg = arg @classmethod def from_sum(cls,*args): return cls(sum(args)) inst = MyClass.from_sum(1,2,3,4) print inst.arg #10
{{json | safe}}
from datetime import datetime date_strs = ['07-06-2010', '06-24-2010', '07-05-2010', '06-25-2010'] # date_strs = ['02-29-2012', '02-28-2012', '03-01-2012'] # date_strs = ['01-01-2000'] dates = [datetime.strptime(d, "%m-%d-%Y") for d in date_strs] date_ints = set([d.toordinal() for d in dates]) if len(date_ints) == 1: print "unique" elif max(date_ints) - min(date_ints) == len(date_ints) - 1: print "consecutive" else: print "not consecutive"
from tkinter import * import random root = Tk() class Recta: def __init__(self, height=60, width=80): self.height = height self.width = width self.create_buttons() self.canvas = Canvas(root) self.canvas.pack() def create_buttons(self): self.frame = Frame(root, bg='grey', width=400, height=40) self.frame.pack(fill='x') self.button1 = Button(self.frame, text='Add Rect', command=self.randomRects) self.button1.pack(side='left', padx=10) self.button2 = Button(self.frame, text='Remove Rect', command=self.randomRects) self.button2.pack(side='left') def randomRects(self): w = random.randrange(300) h = random.randrange(200) self.canvas.create_rectangle(0, 0, w, h, fill='green') tes = Recta() root.mainloop()
>>> '{0:07b}'.format(12) '0001100'
from math import ceil def week_of_month(dt): first_day = dt.replace(day=1) dom = dt.day adjusted_dom = dom + first_day.weekday() return int(ceil(adjusted_dom/7.0))
with open ('file.xml', 'w') as fd: buf.seek (0) shutil.copyfileobj (buf, fd)
text[10] == '\u201c'
plt = nightlife_ratings_mean.plot(x = 'year', y = 'stars', style = 'o-', title = "Stars for each month and year") plt.set_xlabel("[Year, Month]") plt.set_ylabel("Stars")
a = [i for i in a if i != p]
import csv lookup = set(l.strip().lower() for l in open(path_to_file3)) map(csv.writer(open(path_to_file2, 'w')).writerow, (row for row in csv.reader(open(path_to_file)) if row[1].lower() in lookup))
In [7]: import scipy, numpy, math In [8]: scipy.math.factorial, numpy.math.factorial, math.factorial Out[8]: (<function math.factorial>, <function math.factorial>, <function math.factorial>)
devices = [] network_name = "Data" vnic_label = "pyvmomi sriov nic1" content = si.content vm = get_obj(content, [vim.VirtualMachine], vm_name) nic = vim.vm.device.VirtualDeviceSpec() # VM device nic.operation = vim.vm.device.VirtualDeviceSpec.Operation.add nic.device = vim.vm.device.VirtualSriovEthernetCard() nic.device.addressType = 'assigned' nic.device.key = 13016 nic.device.deviceInfo = vim.Description() nic.device.deviceInfo.label = vnic_label nic.device.deviceInfo.summary = network_name nic.device.backing = vim.vm.device.VirtualEthernetCard.NetworkBackingInfo() nic.device.backing.network = get_obj(content, [vim.Network], network_name) nic.device.backing.deviceName = network_name nic.device.backing.useAutoDetect = False nic.device.connectable = vim.vm.device.VirtualDevice.ConnectInfo() nic.device.connectable.startConnected = True nic.device.connectable.allowGuestControl = True nic.device.sriovBacking = vim.vm.device.VirtualSriovEthernetCard.SriovBackingInfo() nic.device.sriovBacking.physicalFunctionBacking = vim.vm.device.VirtualPCIPassthrough.DeviceBackingInfo() nic.device.sriovBacking.physicalFunctionBacking.id = '84:00.1' nic.device.sriovBacking.virtualFunctionBacking = vim.vm.device.VirtualPCIPassthrough.DeviceBackingInfo() nic.device.sriovBacking.virtualFunctionBacking.id = '84:11.1' devices.append(nic) vmconf = vim.vm.ConfigSpec(deviceChange=devices) task = vm.ReconfigVM_Task(vmconf)
with open('somefile.txt') as f: first_row = next(f).strip().split(';') TOTAL_NUMBER = len(first_row[first_row.index('START'):first_row.index('END')+1]) bits = ''.join(line.rstrip() for line in f).split(';') final_array = bits[bits.index('PROVEEDOR'):bits.index('PROVEEDOR')+TOTAL_NUMBER]
class Myclass: def do_x(self): pass class My_child(Myclass): def do_x(self): print("I am the chile class") class My_2nd_child(Myclass): def do_x(self): print("I am the 2nd child")
#!/bin/sh case $1 in start) nohup ./server.py & echo $! > ./server.pid ;; stop) # code to stop the service kill `cat ./server.pid` esac
import paramiko # Define connection info host_ip = 'xx.xx.xx.xx' user = 'xxxxxxxx' pw = 'xxxxxxxx' # Paths input_loc = '/nfs_home/appers/extracts/*/*.xml' output_loc = '/user/lcmsprod/output/cnielsen/' python_path = "/usr/lib/python_2.7.3/bin/python" hdfs_home = '/nfs_home/appers/cnielsen/' output_log = r'C:\Users\cnielsen\Desktop\MR_Test\MRtest011316_0.txt' # File names xml_lookup_file = 'product_lookups.xml' mapper = 'Mapper.py' reducer = 'Reducer.py' helper_script = 'Process.py' product_name = 'test1' output_ref = 'test65' # ---------------------------------------------------- def buildMRcommand(product_name): space = " " mr_command_list = [ 'hadoop', 'jar', '/share/hadoop/tools/lib/hadoop-streaming.jar', '-files', hdfs_home+xml_lookup_file, '-file', hdfs_home+mapper, '-file', hdfs_home+reducer, '-mapper', "'"+python_path, mapper, product_name+"'", '-file', hdfs_home+helper_script, '-reducer', "'"+python_path, reducer+"'", '-input', input_loc, '-output', output_loc+output_ref] MR_command = space.join(mr_command_list) print MR_command return MR_command # ---------------------------------------------------- def unbuffered_lines(f): line_buf = "" while not f.channel.exit_status_ready(): line_buf += f.read(1) if line_buf.endswith('\n'): yield line_buf line_buf = '' # ---------------------------------------------------- client = paramiko.SSHClient() client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) client.connect(host_ip, username=user, password=pw) # Build Commands list_dir = "ls "+hdfs_home+" -l" getmerge = "hadoop fs -getmerge "+output_loc+output_ref+" "+hdfs_home+"test_011216_0.txt" # Run Command stdin, stdout, stderr = client.exec_command(list_dir) ##stdin, stdout, stderr = client.exec_command(buildMRcommand(product_name)) ##stdin, stdout, stderr = client.exec_command(getmerge) print "Executing command..." writer = open(output_log, 'w') for l in unbuffered_lines(stderr): e = '[stderr] ' + l print '[stderr] ' + l.strip('\n') writer.write(e) for line in stdout: r = '[stdout]' + line print '[stdout]' + line.strip('\n') writer.write(r) client.close() writer.close()
import numpy as np def solve_gaussian(val,data_array,sigma_array): return (1. / sigma_array) * np.exp(- (val - data_array) * (val - data_array) / (2 * sigma_array * sigma_array)) def solve_kde(xlist,data_array,sigma_array): kde_array = np.array([]) for xx in xlist: single_kde = solve_gaussian(xx,data_array,sigma_array) if np.ndim(kde_array) == 3: kde_array = np.concatenate((kde_array,single_kde[np.newaxis,:,:]),axis=0) else: kde_array = np.dstack(single_kde) return kde_array xlist = np.linspace(0,1,101) #Adjust as needed kde_array = solve_kde(xlist,data_array,sigma_array) kde_vector = np.sum(np.sum(kde_array,axis=2),axis=1) mode_guess = xlist[np.argmax(kde_vector)]
select min(clm0), clm1, clm2, group_concat(clm3) from yourtable group by clm1, clm2
import re import locale # Remove anything not a digit, comma or period no_cruft = re.sub(r'[^\d,.-]', '', st) # Split the result into parts consisting purely of digits parts = re.split(r'[,.]', no_cruft) # ...and sew them back together if len(parts) == 1: # No delimeters found float_str = parts[0] elif len(parts[-1]) != 2: # >= 1 delimeters found. If the length of last part is not equal to 2, assume it is not a decimal part float_str = ''.join(parts) else: float_str = '%s%s%s' % (''.join(parts[0:-1]), locale.localeconv()['decimal_point'], parts[-1]) # Convert to float my_float = float(float_str)
>>> import datetime >>> >>> trade_date = datetime.date(2005, 7, 25) >>> effective_date = datetime.datetime(2005, 7, 27, 11, 26, 38) >>> termination_date = datetime.datetime(2010, 7, 26, 11, 26, 38) >>> >>> d = vars() # You can access the variable as d['name'] >>> tradedates = { ... name: d[name].strftime('%Y-%m-%d') ... for name in ('trade_date', 'effective_date', 'termination_date') ... } >>> tradedates {'effective_date': '2005-07-27', 'termination_date': '2010-07-26', 'trade_date': '2005-07-25'}
class Spheres(object): def __init__(self): self._dict = dict() def volumes(self, radii=None): if radii is None: radii = self._dict['radii'] return (4/3) * math.pi *radii**3
import numpy as np X = np.random.uniform(size=(10,3)) n,m = X.shape # for generality X0 = np.ones((n,1)) Xnew = np.hstack((X,X0)) print(X) [[ 0.78614426 0.24150772 0.94330932] [ 0.60088812 0.20427371 0.19453546] [ 0.31853252 0.31669057 0.82782995] [ 0.71749368 0.54609844 0.74924888] [ 0.86883981 0.54634575 0.83232409] [ 0.89313181 0.8006561 0.05072146] [ 0.79492088 0.07750024 0.45762175] [ 0.92350837 0.20587178 0.76987197] [ 0.0092076 0.0044617 0.04673518] [ 0.69569363 0.3315923 0.15093861]] print(X0) [[ 1.] [ 1.] [ 1.] [ 1.] [ 1.] [ 1.] [ 1.] [ 1.] [ 1.] [ 1.]] print(Xnew) [[ 0.78614426 0.24150772 0.94330932 1. ] [ 0.60088812 0.20427371 0.19453546 1. ] [ 0.31853252 0.31669057 0.82782995 1. ] [ 0.71749368 0.54609844 0.74924888 1. ] [ 0.86883981 0.54634575 0.83232409 1. ] [ 0.89313181 0.8006561 0.05072146 1. ] [ 0.79492088 0.07750024 0.45762175 1. ] [ 0.92350837 0.20587178 0.76987197 1. ] [ 0.0092076 0.0044617 0.04673518 1. ] [ 0.69569363 0.3315923 0.15093861 1. ]]
list(enumerate(set(color_names)))
In [4]: mat = [ [(4,4),(1,6)] , [(6,1),(2,2)] ] In [6]: c,d=mat[0][0] #here mat[0] is [(4,4),(1,6)], invoking [0] on this yields [4,4] In [7]: c Out[7]: 4 In [8]: d Out[8]: 4 In [9]: a,b=mat[1][1] #here mat[1] is [(6,1),(2,2)], invoking [1] on this yields [2,2] In [10]: a Out[10]: 2 In [11]: b Out[11]: 2
>>> re.findall("(.+?)\1+", "FFFFFFF") [] >>> re.findall(r"(.+?)\1+", "FFFFFFF") ['F'] >>>
host = request.host host = host.split(':', 1)[0] # Strip off optional ':##' port number username = None if host.endswith('.yourdomain.com'): username = host.split('.', 1)[0]
payload = { 'username': 'your username', 'password': 'your password' } p = requests.post(myurl, data=payload)
import sys from pdfminer.pdfparser import PDFParser from pdfminer.pdfdocument import PDFDocument from pdfminer.pdftypes import resolve1 filename = sys.argv[1] fp = open(filename, 'rb') parser = PDFParser(fp) doc = PDFDocument(parser) doc.initialize() fields = resolve1(doc.catalog['AcroForm'])['Fields'] for i in fields: field = resolve1(i) name, value = field.get('T'), field.get('V') print '{0}: {1}'.format(name, value)
user = ModelChoiceField(queryset=User.objects.filter( is_staff=True, profile__fieldtocheck=False), ...)
import time import serial # configure the serial connections (the parameters differs on the device you are connecting to) ser = serial.Serial( port='COM2', baudrate=9600, timeout=1, parity=serial.PARITY_ODD, stopbits=serial.STOPBITS_TWO, bytesize=serial.SEVENBITS ) ser.isOpen() # Reading the data from the serial port. This will be running in an infinite loop. while 1 : # get keyboard input bytesToRead = ser.inWaiting() data = ser.read(bytesToRead) time.sleep(1) print(data)
(defun python-shell-send-line (&optional send-main msg) "Send the entire line to inferior Python process. When optional argument SEND-MAIN is non-nil, allow execution of code inside blocks delimited by \"if __name__== \\='__main__\\=':\". When called interactively SEND-MAIN defaults to nil, unless it's called with prefix argument. When optional argument MSG is non-nil, forces display of a user-friendly message if there's no process running; defaults to t when called interactively." (interactive (list current-prefix-arg t)) (save-restriction (widen) (python-shell-send-region (line-beginning-position) (line-end-position) send-main msg)))
In [52]: a = [ ['StarList', 'StarId38', 'ShipList'] ] In [53]: b = [ ['StarList', 'StarId3', 'ShipList'], ['StarList', 'StarId4', 'ShipList'] ] In [54]: set(map(tuple, a)) == set(map(tuple, b)) Out[54]: False In [55]: a = [ ....: ['StarList', 'StarId4', 'ShipList'], ....: ['StarList', 'StarId3', 'ShipList'] ....: ] In [56]: set(map(tuple,a))==set(map(tuple,b)) Out[56]: True
>>> import re >>> re.sub("[^0-9]", "", "sdkjh987978asd098as0980a98sd") '987978098098098'
import threading.Thread class Line_Counter(threading.Thread): def __init__(self, staticText, filename): threading.Thread.__init__(self) self.staticText = staticText def run(self): self.exit = False with open(self.filename) as f: if self.exit: return for count, _ in enumerate(f): pass self.staticText.SetLabel(str(count + 1)) def abort(self): self.exit = True class MainFrame(wx.Frame): def __init__(self, parent, id, filename): wx.Frame.__init__(self, parent, id, 'Threaded File Loader') self.line_counter = False # Set up a dummy thread variable #### remaining code self.file_open_button.Bind( wx.EVT_BUTTON, self.OnOpenFile ) # Event handler for opening file def OnOpenFile(self, event): filepath = getFile() # Creates a file open dialog and returns the file path if self.line_counter: # Checks if a counter thread is already running self.line_counter.abort() # Stops the thread if True self.line_counter = Line_Counter(self.staticText, filename).start() # Starts a new thread
from StringIO import StringIO import sys import re from pip import parseopts from pip.commands import commands def list_outdated(pypi_server): args = ['list', '-o', '-f', pypi_server, '--no-index'] cmd_name, options, args, parser = parseopts(args) command = commands['list'](parser) _stdout = sys.stdout output = StringIO() sys.stdout = output command.main(args, options) sys.stdout = _stdout return re.findall('(\w+)\s+\(Current:\s+(.*?) Latest:\s+(.*?)\)', output.read() * 2) outdated = list_outdated('http://my_server:8080/packages/')
if form.is_valid(): comment = form.save(commit=False) comment.story = story_details comment.save() return ...
import seaborn as sns tips = sns.load_dataset("tips") sns.set(style="ticks", palette="colorblind") g = sns.FacetGrid(tips, col="time", size=4, aspect=.75) g = g.map(sns.violinplot, "sex", "total_bill", "smoker", palette={"No": "b", "Yes": "w"}, inner=None, linewidth=1, scale="area", split=True, width=0.75).despine(left=True) g.fig.get_axes()[0].legend(title= 'smoker',loc='upper left') g.set_axis_labels('lunch','total bill') sns.plt.show()
import datetime **** timestamp = datetime.datetime.utcnow().isoformat() isoDate = datetime.datetime.strptime( timestamp, "%Y-%m-%dT%H:%M:%S.%f" ) print (timestamp)
>>> set.intersection(*D.values()) {2}
from Bio import SeqIO import re with open(fasta_path, 'rb') as fin: s = SeqIO.parse(fin, 'fasta') for r in s: num_you_want = int(re.findall('\((\d+) - \d+\)', r.description)[0])
def filtering(a_list): results = [] for i, item in enumerate(a_list): if re.search(r'\d{0,1}\s+Contacts;\s*', item) is not None: results.extend(a_list[i+1:i+6])
// 8(7 used) bit per channel double R=double(col>>16)/127.0; double G=double(col>> 8)/127.0; double B=double(col )/127.0; // 8 bit per channel double R=double(col>>16)/255.0; double G=double(col>> 8)/255.0; double B=double(col )/255.0;
tokens = [] for linea in f.readlines(): line_content = linea.split(' ') for token in line_content: tokens.append(token) print(tokens)
class CustomUserAdmin(UserAdmin): # ...code here... fieldsets = ( (None, {'fields': ('email',)}), (_('Personal info'), {'fields': ('first_name', 'last_name')}), (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}), (_('Important dates'), {'fields': ('last_login', 'date_joined')}), ) add_fieldsets = ( (None, { 'classes': ('wide',), 'fields': ('email', 'first_name', 'last_name', 'password1', 'password2')} ), )
import os .... filename = '{}:/{}/{}.mp3'.format(d_name, dir_list[i], s_name) if os.path.exists(filename): system('start ' + filename) else: print "File {} was not found".format(filename)
import collections import bisect class FastTable: def __init__(self): self.__deque = collections.deque() def __len__(self): return len(self.__deque) def head(self): return self.__deque.popleft() def tail(self): return self.__deque.pop() def peek(self): return self.__deque[-1] def insert(self, obj): index = bisect.bisect_left(self.__deque, obj) self.__deque.rotate(-index) self.__deque.appendleft(obj) self.__deque.rotate(index)
if var in [2, 3]: ... elif var in [2, 15]: ...
import cProfile import pstats import glob import math def gen(): for i in range(1, 10): yield math.factorial(i) class index(object): def GET(self): p = cProfile.Profile() it = gen() while True: try: nxt = p.runcall(next, it) except StopIteration: break print nxt p.print_stats() index().GET()
# myapp/apps.py from django import VERSION as DJANGO_VERSION if DJANGO_VERSION >= (1, 7): from django.apps import AppConfig class MyAppConfig(AppConfig): ... # myapp/__init__.py from django import VERSION as DJANGO_VERSION if DJANGO_VERSION >= (1, 7): default_app_config = 'myapp.apps.MyAppConfig'
>>> import shlex >>> argument_string = "-a arga -b \"argument b\" arg1 arg2" >>> l = shlex.split(argument_string) >>> l ['-a', 'arga', '-b', 'argument b', 'arg1', 'arg2']
>>> WEEKDAY_ORDER = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] >>> >>> def sorted_schedule(s): ... return sorted(s, key=lambda k: WEEKDAY_ORDER.index(k.split()[0])) # <--- ... >>> schedule2 = set(['Wednesday afternoon', 'Friday']) >>> print(sorted_schedule(schedule2)) ['Wednesday afternoon', 'Friday']
%apply (float* INPLACE_ARRAY1, int DIM1) {(float* data1, int n1), (float* data2, int n2)}; class Class { public: void test(float* data1, int n1, float* data2, int n2) { //... } };
def wrap(*args, **kwargs): return helloworld(*args, **kwargs) ui.pushButton.clicked.connect(wrap)
>>> import re >>> import urllib2 >>> import lxml.html >>> page = urllib2.urlopen("http://maps.google.com/maps/place?cid=2860002122405830765").read() # have to search the page source since the link is added in javascript >>> mo = re.search(r'<div class="pp-more-reviews">.*?</div>', page) >>> div = lxml.html.fromstring(mo.group(0)) >>> href = div.find("a").attrib["href"]
import pandas as pd import numpy as np data = pd.DataFrame(np.random.randn(2000,784)) panel = pd.Panel(data.values.reshape(2000, 28, 28)) # In [49]: q.panel[42].shape # Out[49]: (28, 28) # In [51]: q.panel # Out[51]: # <class 'pandas.core.panel.Panel'> # Dimensions: 2000 (items) x 28 (major_axis) x 28 (minor_axis) # Items axis: 0 to 1999 # Major_axis axis: 0 to 27 # Minor_axis axis: 0 to 27
>>> class List(list): ... pass ... >>> weaklist = List() >>> weaklist.append('a') >>> weaklist.append('b') >>> stronglist = [ ['c','d','e'] ] >>> weaklist ['a', 'b'] >>> stronglist [['c', 'd', 'e']] >>> import weakref >>> stronglist.append(weakref.ref(weaklist)) >>> stronglist [['c', 'd', 'e'], <weakref at 0x10046e578; to 'List' at 0x100455f70>] >>> stronglist[1]() ['a', 'b'] >>> del weaklist >>> stronglist [['c', 'd', 'e'], <weakref at 0x10046e578; dead>] >>> stronglist[1]() >>>
for line in soup.find_all('h1',attrs={'itemprop':'name'}): [s.extract() for s in line('span')] print line.get_text() # => New Men's Genuine Leather Bifold ID Credit Card Money Holder Wallet Black
>>> a set([(2, 7), (4, 7), (6, 7), (5, 7), (7, 7), (0, 7), (1, 7), (3, 7)]) >>> sorted(a) [(0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7)]
date_realization_for_articles = Article.objects.values_list('date_realization', flat=True).distinct()
only = set(args.onlyTheseServers or availableServers)
def checkIfRomanNumeral(numeral): """Controls that the userinput only contains valid roman numerals""" numeral = numeral.upper() validRomanNumerals = ["M", "D", "C", "L", "X", "V", "I", "(", ")"] for letters in numeral: if letters not in validRomanNumerals: print("Sorry that is not a valid roman numeral") return True romanToInt(numeral)
# Create the initial circle circle = Circle([2,2], 2); # Get the path and the affine transformation path = circle.get_path() transform = circle.get_transform() # Now apply the transform to the path newpath = transform.transform_path(path) # Now you can use this polygon = matpatches.PathPatch(newpath) patches.append(polygon)
re.findall(r'\d{1,2}/optimized/.+?\.tif', swatch) ^^
def make_counter(): i = 0 def counter(): # counter() is a closure nonlocal i i += 1 return i return counter c1 = make_counter() c2 = make_counter() print (c1(), c1(), c2(), c2()) # -> 1 2 1 2
User.query.filter(User.name != 'Rachmaninoff')
>>> import uuid >>> def foo(): ... uuid = uuid.uuid4() ... >>> foo() Traceback (most recent call last): File "<stdin>", line 1, in <module> File "<stdin>", line 2, in foo UnboundLocalError: local variable 'uuid' referenced before assignment >>> def bar(): ... uuidValue = uuid.uuid4() ... >>> bar() >>> >>> someGlobal = 10 >>> def baz(): ... someGlobal = someGlobal + 1 ... >>> baz() Traceback (most recent call last): File "<stdin>", line 1, in <module> File "<stdin>", line 2, in baz UnboundLocalError: local variable 'someGlobal' referenced before assignment >>> def quux(): ... someLocal = someGlobal + 1 ... >>> quux() >>>
def export_to_png(self, filename, *args): '''Saves an image of the widget and its children in png format at the specified filename. Works by removing the widget canvas from its parent, rendering to an :class:`~kivy.graphics.fbo.Fbo`, and calling :meth:`~kivy.graphics.texture.Texture.save`. .. note:: The image includes only this widget and its children. If you want to include widgets elsewhere in the tree, you must call :meth:`~Widget.export_to_png` from their common parent, or use :meth:`~kivy.core.window.WindowBase.screenshot` to capture the whole window. .. note:: The image will be saved in png format, you should include the extension in your filename. .. versionadded:: 1.9.0 ''' if self.parent is not None: canvas_parent_index = self.parent.canvas.indexof(self.canvas) self.parent.canvas.remove(self.canvas) fbo = Fbo(size=self.size, with_stencilbuffer=True) with fbo: ClearColor(0, 0, 0, 1) ClearBuffers() Scale(1, -1, 1) Translate(-self.x, -self.y - self.height, 0)
def facebook_login(request): """ Facebook login page """ if request.REQUEST.get("device"): device = request.REQUEST.get("device") else: device = "user-agent" params = {} params["client_id"] = FACEBOOK_APP_ID params["redirect_uri"] = request.build_absolute_uri(reverse("socialauth_facebook_login_done")) url = "https://graph.facebook.com/oauth/authorize?"+urllib.urlencode(params) return HttpResponseRedirect(url) def facebook_login_done(request): user = authenticate(request=request) if not user: request.COOKIES.pop(FACEBOOK_API_KEY + '_session_key', None) request.COOKIES.pop(FACEBOOK_API_KEY + '_user', None) # TODO: maybe the project has its own login page? logging.debug("SOCIALAUTH: Couldn't authenticate user with Django, redirecting to Login page") return HttpResponseRedirect(reverse('socialauth_login_page')) login(request, user) logging.debug("SOCIALAUTH: Successfully logged in with Facebook!") if request.GET.get('next'): return HttpResponseRedirect(request.GET.get('next')) else: return HttpResponseRedirect(LOGIN_REDIRECT_URL)
<span style="color:red"><b>This is red</b></span>
0.024 sec (avg) - wc -l file.txt 0.121 sec (avg) - sed -n '$=' file.txt 0.396 sec (avg) - nl file.txt | tac |sed -n 1p | awk '{print $1}
def mytext(stmt, params): bindparams = [] for k, v in params: if isinstance(v, datetime): type_ = MyType() else: type_ = None bindparams.append(bindparam(k, v, type_=type)) return text(stmt, bindparams=bindparams)
# Initialize output array res = np.zeros(r.shape) # Get mask1 and compute values for all elements and use the mask to set only # TRUE positions with the computed values mask1 = (r >= 0.5*dr) & (r <= 1.5*dr) V1 = (5-3*np.abs(r*mask1)/dr - np.sqrt(-3*(1-np.abs(r*mask1)/dr)**2+1))/(6*dr) res[mask1] = V1[mask1] # Similarly for mask2 and the computations with that mask mask2 = np.logical_not(mask1) & (r <= 0.5*dr) V2 = (1+np.sqrt(-3*(r*mask2/dr)**2+1))/(3*dr) res[mask2] = V2[mask2]
# Option 1 s = s.sort_index() df.plot(color = s.values) # as per Fiabetto's answer # Option 2 df.plot(color = ['c', 'y')
import matplotlib.pyplot as plt fig = plt.figure() # Add subplots nRows = 4 nCols = 2 nPlots = 7 ax1 = fig.add_subplot(nRows,nCols,1) ax1.set_yscale('log') ax1.set_xscale('log') for n in range(1, nPlots+1): plt.subplot(nRows,nCols,n, sharex=ax1, sharey=ax1) # Turn off tick lables where needed. index = 0 for r in range(1, nRows +1): for c in range(1, nCols + 1): index += 1 # Turn off y tick labels for all but the first column. if ((c != 1) and (index <= nPlots)): ax = plt.subplot(nRows, nCols, index, sharex=ax1, sharey=ax1) plt.setp(ax.get_yticklabels(), visible=False) # Turn off x tick lables for all but the bottom plot in each # column. if ((nPlots - index) >= nCols): ax = plt.subplot(nRows, nCols, index, sharex=ax1, sharey=ax1) plt.setp(ax.get_xticklabels(), visible=False) plt.subplots_adjust(wspace=0, hspace=0) plt.show()
import cssutils css = cssutils.parseFile('index.html') for rule in css.cssRules: print(rule.style.top) print(rule.style.left)
import someapp
from fractions import Fraction >>> print float( Fraction(2**54343) / Fraction( 2**54347 + 1 ) ) 0.0625 >>> print Fraction(2**54343) / Fraction( 2**54347 + 1 ) # ... very long exact answer expressed as a fraction ...
starts = df["Start Time"].copy() starts.sort() dt = starts.diff() heat = (dt > pd.Timedelta(seconds=60)).cumsum() heat = heat.sort_index()
>>> re.sub(r"([0123]?[0-9])(st|th|nd|rd)",r"\1<sup>\2</sup>","Meet you on 5th") 'Meet you on 5<sup>th</sup>'
.. automodule:: bar .. autofunction:: foo(x=0.97)
itertools.product(*A)
import matplotlib.pyplot as plt from matplotlib.ticker import FuncFormatter, MultipleLocator x_data = np.arange(97, 110) y_data = np.random.rand(len(x_data)) def ord_to_char(v, p=None): return chr(int(v)) fig, ax = plt.subplots() ax.plot(x_data, y_data, 'x') ax.xaxis.set_major_formatter(FuncFormatter(ord_to_char)) ax.xaxis.set_major_locator(MultipleLocator(1)) plt.show()
if self.request.get('key'): # Key specified, get field values from db store key = self.request.get('key') sort = db.get(key) for field in ItemDB.properties(): self.formdata[field] = getattr(sort, field)
import cmd class MainConsole(cmd.Cmd): def __init__(self,console_id): cmd.Cmd.__init__(self) self.console_id = console_id def do_something(self, line): print "do something!",self.console_id return def do_something2(self, line): print "do something2!",self.console_id return class SubConsole1(cmd.Cmd): def __init__(self, maincon): cmd.Cmd.__init__(self) self.maincon = maincon self.register_main_console_methods() def do_super_commands(self,line): print "do supercommand",self.maincon def register_main_console_methods(self): main_names = dir(self.maincon) for name in main_names: for prefix in 'do_','help_','complete_', : if name.startswith(prefix) and name not in dir(self): self.__dict__[name] = getattr(self.maincon, name) def get_names(self): result = cmd.Cmd.get_names(self) result+=self.maincon.get_names() return result SubConsole1(MainConsole("mainconsole")).cmdloop()
def save(self, commit=True): user = super(CustomFormThing, self).save(commit=False) #set some other attrs on user here ... user._some = 'some' user._other = 'other' if commit: user.save() return user @receiver(post_save, sender=User) def create_profile(sender, instance, created, **kwargs): some_id = getattr(instance, '_some', None) other_id = getattr(instance, '_other', None) if created: #do something with the kwargs above...
>>> import datetime >>> str(datetime.timedelta(seconds=666)) '0:11:06'
step1 = Popen(['ip','addr','show','br0'],stdout=PIPE) step2 = Popen(['grep','inet6'],stdout=PIPE,stdin=step1.stdout) step3 = Popen(['sed','-e','/fe80/d','-e','s/ *inet6 *//g','-e','s/\/64.*$//g'],stdout=PIPE,stdin=step2.stdout) step4 = Popen(['tail','-n1'],stdout=PIPE,stdin=step3.stdout) step4.communicate()[0]
def my_facebook_api(input): if input=='A': return 'X' elif input=='B': return 'D' facebook_api = Mock(side_effect=my_facebook_api)
void MManager::acquirePython(void) { MThread thisThread = MFramework::MProcesses::GetCurrentThread(); if (thisThread != mainThread) { Lock(); std::map<MThread,void*>::iterator i = threadStates.find(thisThread); if (i == threadStates.end()) { Unlock(); PyGILState_STATE gstate = PyGILState_Ensure(); _PyGILState_STATE_* encState = new _PyGILState_STATE_; encState->state = gstate; encState->refCount = 1; Lock(); threadStates[thisThread] = encState; Unlock(); } else { _PyGILState_STATE_* encState = (_PyGILState_STATE_*)i->second; encState->refCount = encState->refCount + 1; Unlock(); } } else { if (mainThreadState) PyEval_RestoreThread((PyThreadState*)mainThreadState); } } void MManager::releasePython(void) { MThread thisThread = MFramework::MProcesses::GetCurrentThread(); if (thisThread != mainThread) { Lock(); std::map<MThread,void*>::iterator i = threadStates.find(thisThread); if (i != threadStates.end()) { _PyGILState_STATE_* encState = (_PyGILState_STATE_*)i->second; if (encState->refCount <= 1) { threadStates.erase(i); Unlock(); PyGILState_Release(encState->state); delete encState; } else { encState->refCount = encState->refCount - 1; Unlock(); } } else { Unlock(); } } else { mainThreadState = PyEval_SaveThread(); } }
In [77]: df.loc[(df['Name'] == 'Richard') & (df['Points']==35),'String'].str[3:5] Out[77]: 1 67 3 38 Name: String, dtype: object
word[:2] # The first two characters word[2:] # Everything except the first two characters
x = 'ABCD' [(x[i], x[:i] + x[i+1:]) for i in range(len(x))] # Outputs: # [('A', 'BCD'), ('B', 'ACD'), ('C', 'ABD'), ('D', 'ABC')]
In [88]: import itertools as it In [89]: list(it.product(('1','11'),('2','22'),('3','33'))) Out[89]: [('1', '2', '3'), ('1', '2', '33'), ('1', '22', '3'), ('1', '22', '33'), ('11', '2', '3'), ('11', '2', '33'), ('11', '22', '3'), ('11', '22', '33')]
def combine(a, b, a_weight, b_weight): if isinstance(a, tuple): return tuple(combine(x,y,a_weight,b_weight) for x,y in zip(a,b)) elif isinstance(a, dict): return dict((k, combine(a[k],b[k],a_weight,b_weight)) for k in a) #add other data structures here if you need to (e.g. list, set, etc.) else: #assume a number return ((a * a_weight) + (b * b_weight)) / (a_weight + b_weight)
self.timer = Timer(seconds, lambda: None)
def maketransformer(file): #contains arbitrary stuff that takes too long data = gdal.Open(file) output_wkt = data.GetProjection() srs_out = osr.SpatialReference() srs_out.ImportFromWkt(output_wkt) transformer = osr.CoordinateTransformation(srs_out) return transformer transformer = maketransformer('data/w001001.adf') for tuple in shapefilepoints: getelevation(transformer.Transform(tuple))
import itertools users = df.user_id.unique() df_indexed = df.set_index(['user_id', 'day']) index = pd.MultiIndex.from_tuples(list(itertools.product(users, range(365)))) reindexed = df_indexed.reindex(index, fill_value=0)
from tkinter import * from tkinter.ttk import * root = Tk() tree = Treeview(root,selectmode="extended",columns=("A","B")) tree.pack(expand=YES, fill=BOTH) tree.heading("#0", text="C/C++ compiler") tree.column("#0",minwidth=0,width=100, stretch=NO) tree.heading("A", text="A") tree.column("A",minwidth=0,width=200, stretch=NO) tree.heading("B", text="B") tree.column("B",minwidth=0,width=300) root.mainloop()
In [7]: import requests In [8]: url = 'http://www.analysis.im/uploads/seminar/pdf-sample.pdf' In [9]: requests.get(url) Out[9]: <Response [404]> In [10]: requests.get(url, headers={'User-Agent': 'firefox'}) Out[10]: <Response [200]>
if key in array: # do something
unqiue_values = collection.distinct("key")
class MyFilteredAdmin(admin.ModelAdmin): def queryset(self, request): qs = super(MyFilteredAdmin, self).queryset(request) if is_related_to(self.model, Profile): qs = qs.exclude(user__email='guest@mysite.com') return qs
def sieve3(n): top = n+1 sieved = dict.fromkeys(xrange(3,top,2), True) for si in xrange(3,top,2): if si * si > top: break if sieved[si]: for j in xrange(3*si, top, si*2): sieved[j] = False return [2] + [pr for pr in xrange(3,top,2) if sieved[pr]]
def initUI(self): calculateBtn = QtGui.QPushButton("Calculate", self) calculateBtn.clicked.connect(self.calculate_btn_on_click) self.earningsTextbox = QtGui.QLineEdit(self) self.show() def calculate_btn_on_click(self): self.earningsTextbox.setText("42")
if timestamp % 3600 == 0: # save the timestamp-value tuple
for line in fileinput.input(['thefile.txt'], inplace=True): print(line.replace('old stuff', 'shiny new stuff'))
class E(C, D): def do_c_thing(self): # Call C's version C.some_method(self, ...) def do_d_thing(self): # Call D's version D.some_method(self, ...)
from PyQt4 import QtCore, QtGui, QtXml class XmlHandler(QtXml.QXmlDefaultHandler): def __init__(self, root): QtXml.QXmlDefaultHandler.__init__(self) self._root = root self._item = None self._text = '' self._error = '' def startElement(self, namespace, name, qname, attributes): if qname == 'folder' or qname == 'item': if self._item is not None: self._item = QtGui.QTreeWidgetItem(self._item) else: self._item = QtGui.QTreeWidgetItem(self._root) self._item.setData(0, QtCore.Qt.UserRole, qname) self._item.setText(0, 'Unknown Title') if qname == 'folder': self._item.setExpanded(True) elif qname == 'item': self._item.setText(1, attributes.value('type')) self._text = '' return True def endElement(self, namespace, name, qname): if qname == 'title': if self._item is not None: self._item.setText(0, self._text) elif qname == 'folder' or qname == 'item': self._item = self._item.parent() return True def characters(self, text): self._text += text return True def fatalError(self, exception): print('Parse Error: line %d, column %d:\n %s' % ( exception.lineNumber(), exception.columnNumber(), exception.message(), )) return False def errorString(self): return self._error class Window(QtGui.QTreeWidget): def __init__(self): QtGui.QTreeWidget.__init__(self) self.header().setResizeMode(QtGui.QHeaderView.Stretch) self.setHeaderLabels(['Title', 'Type']) source = QtXml.QXmlInputSource() source.setData(xml) handler = XmlHandler(self) reader = QtXml.QXmlSimpleReader() reader.setContentHandler(handler) reader.setErrorHandler(handler) reader.parse(source) xml = """\ <root> <folder> <title>Folder One</title> <item type="1"> <title>Item One</title> </item> <item type="1"> <title>Item Two</title> </item> <item type="2"> <title>Item Three</title> </item> <folder> <title>Folder Two</title> <item type="3"> <title>Item Four</title> </item> <item type="0"> <title>Item Five</title> </item> <item type="1"> <title>Item Six</title> </item> </folder> </folder> <folder> <title>Folder Three</title> <item type="0"> <title>Item Six</title> </item> <item type="2"> <title>Item Seven</title> </item> <item type="2"> <title>Item Eight</title> </item> </folder> </root> """ if __name__ == '__main__': import sys app = QtGui.QApplication(sys.argv) window = Window() window.resize(400, 300) window.show() sys.exit(app.exec_())
<input type="radio" name="music" value="Rock" checked="checked"> Rock<br> <input type="radio" name="music" value="Pop"> Pop<br> <input type="radio" name="music" value="Metal"> Metal<br>
from itertools import groupby def block_generator(filename): with open(filename) as lines: for pred,block in groupby(lines, "\t\n".__ne__): if pred: yield block
class MyModelAdmin(admin.ModelAdmin): def save_model(self, request, obj, form, change): # custom stuff here obj.save()
import numpy as np import pandas as pd import matplotlib.pyplot as plt import matplotlib.dates as dates idx = pd.date_range('2011-05-01', '2011-07-01') s = pd.Series(np.random.randn(len(idx)), index=idx) fig, ax = plt.subplots() ax.plot_date(idx.to_pydatetime(), s, 'v-') ax.xaxis.set_minor_locator(dates.WeekdayLocator(byweekday=(1), interval=1)) ax.xaxis.set_minor_formatter(dates.DateFormatter('%d\n%a')) ax.xaxis.grid(True, which="minor") ax.yaxis.grid() ax.xaxis.set_major_locator(dates.MonthLocator()) ax.xaxis.set_major_formatter(dates.DateFormatter('\n\n\n%b\n%Y')) plt.tight_layout() plt.show()
"hello %(name)s , how are you %(name)s, welcome %(name)s" % {"name": "john"} 'hello john, how are you john, welcome john'
def parsePsycopgSQLArray(input): import csv import cStringIO input = input.strip("{") input = input.strip("}") buffer = cStringIO.StringIO(input) reader = csv.reader(buffer, delimiter=',', quotechar='"') return reader.next() #There can only be one row if __name__ == "__main__": text = '{2f5e5fef-1e8c-43a2-9a11-3a39b2cbb45e,"Marc, Dirk en Koen",398547,85.5,-9.2, 62fe6393-00f7-418d-b0b3-7116f6d5cf10}' result = parsePsycopgSQLArray(text) print result
class NotesMixin(object): @declared_attr def notes(cls): return sa.Column(sa.String(4000) , nullable=False, default='')
import win32com.client xl = win32com.client.Dispatch("Excel.Application") xl.DisplayAlerts = False wb = xl.Workbooks.Open(r"C:\PATH\TO\SOURCE_FILENAME.XLSX") wb.SaveAs(r"C:\PATH\TO\DESTINATION_FILENAME.XLS", FileFormat = 56) wb.Close() xl.Quit()
routes_in = ( ('/user', '/login'), ) routes_out = ( ('/user', '/'), )
import numpy as np from scipy.interpolate import UnivariateSpline def make_norm_dist(x, mean, sd): return 1.0/(sd*np.sqrt(2*np.pi))*np.exp(-(x - mean)**2/(2*sd**2)) x = np.linspace(10, 110, 1000) green = make_norm_dist(x, 50, 10) pink = make_norm_dist(x, 60, 10) blue = green + pink # create a spline of x and blue-np.max(blue)/2 spline = UnivariateSpline(x, blue-np.max(blue)/2, s=0) r1, r2 = spline.roots() # find the roots import pylab as pl pl.plot(x, blue) pl.axvspan(r1, r2, facecolor='g', alpha=0.5) pl.show()
>>> np.matrix(list(itertools.product([0,1],repeat = 2))) matrix([[0, 0], [0, 1], [1, 0], [1, 1]])
def hms_to_seconds(t): h, m, s = [int(i) for i in t.split(':')] return 3600*h + 60*m + s
from django.contrib.auth.decorators import login_required @login_required(redirect_field_name='redirect_to') def my_view(request): ...
import telnetlib # ... a_tuple = [('172.28.247.240', 66)] HOST = a_tuple[0] # do you mean to use 'a_tuple' instead of 'j'? # ... tn = telnetlib.Telnet(HOST[0], HOST[1]) # <-- pass the port, I don't think this accepts tuples of hostname/ip and port # ...
>>> lists = {} >>> lists['homework'] = [40, 60, 70] >>> lists['tests'] = [35, 99, 20] >>> lists {'tests': [35, 99, 20], 'homework': [40, 60, 70]} >>>
from datetime import datetime def str2datetime(s): parts = s.split('.') dt = datetime.strptime(parts[0], "%Y-%m-%d %H:%M:%S") return dt.replace(microsecond=int(parts[1]))
for line in input_file: numbers = line.replace('\n',"").split(',') min = int(numbers[0]) for num in numbers: n = int(num) if n < min: min = n print min
For this version of Visual C++ Use this compiler version Visual C++ 4.x MSC_VER=1000 Visual C++ 5 MSC_VER=1100 Visual C++ 6 MSC_VER=1200 Visual C++ .NET MSC_VER=1300 Visual C++ .NET 2003 MSC_VER=1310 Visual C++ 2005 (8.0) MSC_VER=1400 Visual C++ 2008 (9.0) MSC_VER=1500 Visual C++ 2010 (10.0) MSC_VER=1600 Visual C++ 2012 (11.0) MSC_VER=1700 Visual C++ 2013 (12.0) MSC_VER=1800 Visual C++ 2015 (14.0) MSC_VER=1900
import re def searchReplace(file, search, replace): with open (file,'r') as f: f_content= f.read() # Re to search and replace f_content = (re.sub(search, replace, f_content)) #write file with replaced content with open (file,'w') as f: f.write(f_content) searchReplace("file.txt","sys.test1.pwd = 1234","sys.test1.pwd = 4321")
>>> a = raw_input('type a word') type a word hello >>> a[::-1] 'olleh'
subprocess.Popen(['gedit'])
>>> hi_obj = hi() >>> hi_obj.__dict__.keys()
print ' '.join(str(next_cell).split()[:3])
env_variables: FLASK_CONF: 'DEV'
class URIString(str): _default_namespace = "default" def __init__(self, value, namespace=_default_namespace): self.namespace = namespace def __new__(cls, value, namespace=_default_namespace): return super().__new__(cls, value) @property def local_name(self): return self[(self.find(self.namespace)+len(self.namespace)):]
yourFile = "C:\folder\folder\file.txt" import os if os.path.isfile(yourFile) and os.access(yourFile, os.R_OK): # if you got into this check, your file is good to go!
>>> import re >>> def get_year(citation): ... citation = citation.strip() ... year = re.search(r"\((\d{4}).*\)\.$", citation).group(1) ... return int(year) >>> test_list = ['Bauer et al. (2000).', 'G. M. Kirwan in litt. (1999).', 'Pacheco (1999).', 'Scott (1997).', 'Venturini et al.(2002).', 'Venturini et al. (2005).', 'P. Develey in litt. (2007, 2008).'] >>> test_list ['Bauer et al. (2000).', 'G. M. Kirwan in litt. (1999).', 'Pacheco (1999).', 'Scott (1997).', 'Venturini et al. (2002).', 'Venturini et al. (2005).', 'P. Develey in litt. (2007, 2008).'] >>> test_list.sort(key = get_year) >>> test_list ['Scott (1997).', 'G. M. Kirwan in litt. (1999).', 'Pacheco (1999).', 'Bauer et al. (2000).', 'Venturini et al. (2002).', 'Venturini et al. (2005).', 'P. Develey in litt. (2007, 2008).']
ax = plt.gca() ax.yaxis.set_major_formatter(matplotlib.ticker.NullFormatter()) plt.draw()
In [11]: df = pd.DataFrame([[23], [34], ['36/375'], ['NA'], [62]]) In [12]: df Out[12]: 0 0 23 1 34 2 36/375 3 NA 4 62 In [13]: df.convert_objects(convert_numeric=True) Out[13]: 0 0 23 1 34 2 NaN 3 NaN 4 62
from multiprocessing import Process, Queue import time q = Queue() def some_func1(arg1, arg2, q): #this one will take longer, so we'll kill it after the other finishes time.sleep(20) q.put('some_func1 finished!') def some_func2(arg1, arg2, q): q.put('some_func2 finished!') proc1 = Process(target=some_func1, args = ('arga', 'argb', q)) proc2 = Process(target=some_func2, args = ('arg1', 'arg2', q)) proc1.start() proc2.start() #this will be the result from the first thread that finishes. #At this point you can wait for the other threads or kill them, or whatever you want. result = q.get() print result #if you want to kill all the procs now: proc1.terminate() proc2.terminate()
# '1.000000' "%f" % (1.0) # '1.00' "%.2f" % (1.0) # ' 1.00' "%6.2f" % (1.0)
if CBControl.GetType() == System.Windows.Forms.CheckBox().GetType():
import numpy as np import matplotlib.pyplot as plt from itertools import compress data = np.genfromtxt('beta_tracking.csv', delimiter=' ') f=data[:,0] x=data[:,1] y=data[:,2] z=data[:,3] k=range(1,11) for j in k: g=list(compress(x, (abs(i)==j for i in f))) h=list(compress(y, (abs(i)==j for i in f))) FigList = [ ] FigList.append(plt.figure()) ax = FigList[-1].add_subplot(1,1,1) ax.plot(g,h,',') for i in plt.get_fignums(): plt.figure(i) plt.savefig('plots/figure%d.png' % i)
pyplot.bar(hist1_flux[1], hist1_flux[0], width=hist1_flux[1][1] - hist1_flux[1][0])
>>> import dis >>> def foo(): ... a = b + 2 ... print bar ... baz() ... >>> dis.dis(foo) 2 0 LOAD_GLOBAL 0 (b) 3 LOAD_CONST 1 (2) 6 BINARY_ADD 7 STORE_FAST 0 (a) 3 10 LOAD_GLOBAL 1 (bar) 13 PRINT_ITEM 14 PRINT_NEWLINE 4 15 LOAD_GLOBAL 2 (baz) 18 CALL_FUNCTION 0 21 POP_TOP 22 LOAD_CONST 0 (None) 25 RETURN_VALUE
from copy import copy import csv class Part_Base(object): pass class MultiPart_Base(list): pass class part_meta(type): part_names = {} parts = [] def __init__(cls, cls_name, cls_bases, cls_dict): super(part_meta, cls).__init__(cls_name, cls_bases, cls_dict) if(not Part_Base in cls_bases): part_meta.part_names[cls_name] = cls def __call__(self, *args, **kwargs): name = kwargs.get("name", "") if(part_meta.part_names.has_key(name) and not (self is part_meta.part_names[name])): obj = part_meta.part_names[name].__call__(*args, **kwargs) else: obj = None if(not part_meta.part_names.has_key(self.__name__)): new_class = part_meta(name, (Generic_Part,), {}) globals()[name] = new_class obj = new_class(*args, **kwargs) else: obj = super(part_meta, self).__call__(*args, **kwargs) if not obj in part_meta.parts: part_meta.parts.append(obj) return obj @classmethod def save(cls): all_fields = list(reduce(lambda x, y: x | set(y.fields), cls.parts, set([]))) with open("parts.csv", "w") as file_h: writer = csv.DictWriter\ ( file_h, all_fields, restval = "", extrasaction = "ignore", dialect = "excel", lineterminator = "\n", ) writer.writeheader() for part in cls.parts: writer.writerow({field : getattr(part, field) for field in part.fields}) @classmethod def load(cls): with open("parts.csv", "r") as file_h: reader = csv.DictReader(file_h) for row in reader: Part(**row) class Part(Part_Base): __metaclass__ = part_meta fields = [] def __init__(self, **kwargs): for name, value in kwargs.items(): setattr(self, name, value) self.fields += kwargs.keys() def __repr__(self): return "<%s>" % self.description @property def description(self): return "%s: %s %s %s %s" % (self.name, self.intype, self.outtype, self.shape, self.serialno) def linkwith(self, *parts): return Generic_MultiPart(self, *parts) class Generic_Part(Part): def __init__(self, **kwargs): kwargs["name"] = self.__class__.__name__ super(Generic_Part, self).__init__(**kwargs) class Generic_MultiPart(MultiPart_Base): def __init__(self, *parts): super(Generic_MultiPart, self).__init__() if len(parts) >= 2: self.shape = parts[0].shape self.linkwith(*parts) else: raise ValueError("Not enough parts") def __repr__(self): return "<MultiPart: %s>" % super(Generic_MultiPart, self).__repr__() def linkwith(self, *parts): for part in parts: if part.shape == self.shape: if isinstance(part, Part): self.append(part) elif isinstance(part, MultiPart_Base): self.extend(part) else: raise ValueError("Incompatible parts") return self class cooler(Generic_Part): intype = "hotwater" outtype = "coldwater" fields = ["intype", "outtype"] class heater(Generic_Part): intype = "coldwater" outtype = "hotwater" fields = ["intype", "outtype"] def make_some_parts(): some_parts = \ [ # This is actually a cooler object # The metaclass uses the cooler class from above # to create the object Part ( name = "cooler", shape = "1/4 inch round", serialno = "SN:11111" ), # Using the heater class directly heater ( shape = "1/4 inch round", serialno = "SN:22222" ), Part ( name = "purifier", intype = "coldwater", outtype = "hotwater", shape = "1/6 inch round", serialno = "SN:33333" ), Part ( name = "carbon_filter", intype = "coldwater", outtype = "coldwater", shape = "1/4 inch round", serialno = "SN:33333" ) ] useless_part = some_parts[0].linkwith(some_parts[1]) print useless_part filter_part = copy(useless_part).linkwith(some_parts[3]) print filter_part part_meta.save() def load_some_parts(): part_meta.load() print part_meta.parts
import urllib2 completed_courses_url = 'http://ranger.uta.edu/~kamangar/CSE-1310-FA13/LinkedDocuments/sample_completed_courses.txt' required_courses_url = 'http://ranger.uta.edu/~kamangar/CSE-1310-FA13/LinkedDocuments/required_courses.csv' completed_courses_set = set([x.strip() for x in urllib2.urlopen(completed_courses_url)]) for required_course in urllib2.urlopen(required_courses_url): if required_course[0] != '#': (course,category,prerequisites,notes) = required_course.split(',') if set(prerequisites.split('|')).intersection(completed_courses_set): print required_course
#!/usr/bin/env python import numpy as np import matplotlib.pyplot as plt from matplotlib import lines import random deltas = [4, 6, 13, 18, 15, 14, 10, 13, 9, 6, 15, 9, 6, 1, 1, 2, 4, 4, 4, 4, 10, 11, 16, 17, 12, 10, 12, 15, 17, 16, 11, 10, 9, 9, 7, 10, 7, 16, 8, 12, 10, 14, 10, 15, 15, 16, 12, 8, 15, 16] bases = [46, 49, 45, 45, 44, 49, 51, 52, 56, 58, 53, 57, 62, 63, 68, 66, 65, 66, 63, 63, 62, 61, 61, 57, 61, 64, 63, 58, 56, 56, 56, 60, 59, 54, 57, 54, 54, 50, 53, 51, 48, 43, 42, 38, 37, 39, 44, 49, 47, 43] def rand_pt(bases, deltas): return [random.randint(base, base + delta) for base, delta in zip(bases, deltas)] # randomly assign opening and closing prices openings = rand_pt(bases, deltas) closings = rand_pt(bases, deltas) # First we draw the bars which show the high and low prices # bottom holds the low price while deltas holds the difference # between high and low. width = 0 ax = plt.axes() rects1 = ax.bar(np.arange(50), deltas, width, color='r', bottom=bases) # Now draw the ticks indicating the opening and closing price for opening, closing, bar in zip(openings, closings, rects1): x, w = bar.get_x(), 0.2 args = { } ax.plot((x - w, x), (opening, opening), **args) ax.plot((x, x + w), (closing, closing), **args) plt.show()
@register.filter(name='format_date_display') def format_date_display(value, arg): ....... # yyyy-mm (dash separator and year first). elif arg in ('eu', 'en-CA', 'fr-CA', 'lt', 'sv', 'zh-CN', 'zh-TW'): # the line below will change the date format from mm/yyyy to yyyy-mmm. value = value[3:] + value[2:3] + value[0:2] return value.replace("/", '-') ......
diff --git a/IO/vtkEnSightReader.cxx b/IO/vtkEnSightReader.cxx index 68a9b8f..7ab8ddd 100644 --- a/IO/vtkEnSightReader.cxx +++ b/IO/vtkEnSightReader.cxx @@ -985,6 +985,8 @@ int vtkEnSightReader::ReadCaseFileTime(char* line) int timeSet, numTimeSteps, i, filenameNum, increment, lineRead; float timeStep; + this->TimeSetFileNameNumbers->RemoveAllItems(); + // found TIME section int firstTimeStep = 1;
def non_Destructive_pixel_addition(original, segmentated): to_be_added = np.matrix(np.where(segmentated)).transpose() n, m = np.shape(to_be_added) for k in range(n): i = to_be_added[k, 0] j = to_be_added[k, 1] if (original[i,j] == 0): original[i,j] = segmentated[i,j]
re.sub(r'@(\w+)', lambda m: d[m.group(1)], s)
>>> state_license = {u'License ': u'29393, 25633', ... u'Expiration': u'08-01-2012, 04-02-2012', ... u'Trade': u'Registered Contractor, Plumber'} >>> {key: value.split(", ") for key, value in state_license.items()} {u'License ': [u'29393', u'25633'], u'Expiration': [u'08-01-2012', u'04-02-2012'], u'Trade': [u'Registered Contractor', u'Plumber']}
for seq0, seq1 in itertools.combinations(data['sequence'], 2): for a in pairwise2.align.globalxx(seq0, seq1): print(format_alignment(*a))
table = [[{} for _ in range(len(words)+1)] for _ in range(len(words))]
def __delattr__(self, key): del self._meta[key]
class Server(object): pass for k, v in services: setattr(Server, k, v)
f(k|n,a,b) = comb(n,k) * B(k+a, n-k+b) / B(a,b)
for i, channel in enumerate(self.image): channel_ = spf.fftshift(spf.fft2(channel)) # take FFT of each channel (r,g,b) separately channel_ = scipy.multiply(channel_,ff) # multiply each channel by the filter (freq. domain) filtered_image[:][:][i] = spf.fftshift(spf.ifft2(channel_)) # inverse FFT each channel separately
import os.path import glob import shutil source = "My Source Path" # Replace these variables with the appropriate data dest = "My Dest Path" command = "My command" # Find the files that need to be copied files = glob.glob(os.path.join(source, "swale-*")) # Copy the files to the destination for file in files: shutil.copy(os.path.join(source, "swale-*"), dest) # Create a sorted list of files - using the file sizes # biggest first, and then use the 1st item biggest = sorted([file for file in files], cmp=lambda x,y : cmp(x,y), key=lambda x: os.path.size( os.path.join( dest, x)), reverse = True)[0] # Rename that biggest file to swale.dat shutil.move( os.path.join(dest,biggest), os.path.join(dest,"swale.date") ) # Run the command os.system( command ) # Only use os.system if you know your command is completely secure and you don't need the output. Use the popen module if you need more security and need the output.
class TABLE(models.Model): id = models.AutoField(primary_key=True) parent = models.ForeignKey('self')
from flask import Flask from werkzeug.routing import BaseConverter app = Flask(__name__) class RegexConverter(BaseConverter): def __init__(self, url_map, *items): super(RegexConverter, self).__init__(url_map) self.regex = items[0] app.url_map.converters['regex'] = RegexConverter # To get all URLs ending with "/number" @app.route("/<regex('.*\/([0-9]+)'):param>/") def go_to_one(param): return param.split("/")[-1] # To get all URLs ending with a number @app.route("/<regex('.*([0-9]+)'):param>/") def go_to_one(param): return param.split("/")[-1] # To get all URLs without a number @app.route("/<regex('[^0-9]+'):param>/") def go_to_two(param): return param @app.route('/') def hello_world(): return 'Hello World!' if __name__ == '__main__': app.run()
import matplotlib.pyplot as plt import numpy as np import matplotlib.font_manager as fm from datetime import datetime import matplotlib.dates as mdates fig,ax = plt.subplots(1, 1) #width height inches data=np.genfromtxt('data', dtype='M8[us],S5,float,float,float',delimiter=',',usecols= [0,1,11,12,13]) my_dates = np.array([d[0] for d in data]).astype('datetime64[D]') dates = np.unique(my_dates) print(dates) x_list = [] x_list[:] = dates.astype(datetime) y_list = [10,11,12,13] plt.plot(x_list,y_list) plt.title('hv 20 to 10 ranks',fontsize=20) plt.xlabel('dates',fontsize=16) ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d')) plt.ylabel('symbol ranks',fontsize=30) plt.show()
import time # Repeat forever while True: post_to_twitter() # Call your function # Sleep for 60 seconds / minute * 30 minutes time.sleep(60 * 30)
Question.objects.filter(module__course__subject__name = 'Mathematics', num_attempts__gt = 20, avg_score__gt = 0).order_by('avg_score')
@csrf_exempt def applicationform(request): if request.method == 'POST': getappid = request.POST['appid'] getjobtitle=request.POST['jobtitle'] odeskid=request.POST['odeskid'] clientspent=request.POST['client_spent'] jobtype=request.POST['jobtype'] notestype=request.POST['notes'] request.session['setid'] = request.POST['appid'] if getappid == '': return HttpResponse('<script> alert("fill app id"); document.location.href="redirect url" </script>') #change here else: getintable = application(app_id = request.POST['appid'], job_title = request.POST['jobtitle'], odesk_id = request.POST['odeskid'],client_spent = request.POST['client_spent'], job_type = request.POST['jobtype'],notes_type = request.POST['notes']) getintable.save() return HttpResponseRedirect('/applicationview/') else: return render_to_response('applicationform.html')
>>> pandas.DataFrame({"A": 'City', "B": d['City']}) A B 0 City Item1 1 City Item2 2 City Item3 3 City Item4 4 City Item5
import csv def phoneNumber(number): ... def userName(name): ... def targetDate(datestring): ... control = [phoneNumber, userName, userName, targetDate] with open("csvFile", "r") as inFile: reader = csv.reader(inFile) for row in reader: for op, item in zip(control, row): op(item)
try: s = pxssh.pxssh(timeout=60, maxread=2000000) s.force_password = True hostname = raw_imput('hostname: ') username = raw_input('password: ') password = getpass.getpass('password: ') s.PROMPT= 'SSH> ' s.login (hostname, username, password, auto_prompt_reset=False) s.prompt() s.sendline('foo bar') s.prompt() data = s.before print data s.logout() except pxssh.ExceptionPxssh, e: print "pxssh failed on login." print str(e)
Python 2.5.1 >>> import sqlite3 >>> sqlite3.version '2.3.2' >>> sqlite3.sqlite_version '3.3.4'
>>> l = [500,800,1500] >>> d = {800:3, 1500:1, 500:4} >>> [d[x] for x in l] [4, 3, 1]
setup( ... zipfile="foo/bar.zip", options={"py2exe": {"skip_archive": True}})
from M2Crypto import EVP import base64 import time def aws_url_base64_encode(msg): msg_base64 = base64.b64encode(msg) msg_base64 = msg_base64.replace('+', '-') msg_base64 = msg_base64.replace('=', '_') msg_base64 = msg_base64.replace('/', '~') return msg_base64 def sign_string(message, priv_key_string): key = EVP.load_key_string(priv_key_string) key.reset_context(md='sha1') key.sign_init() key.sign_update(message) signature = key.sign_final() return signature def create_url(url, encoded_signature, key_pair_id, expires): signed_url = "%(url)s?Expires=%(expires)s&Signature=%(encoded_signature)s&Key-Pair-Id=%(key_pair_id)s" % { 'url':url, 'expires':expires, 'encoded_signature':encoded_signature, 'key_pair_id':key_pair_id, } return signed_url def get_canned_policy_url(url, priv_key_string, key_pair_id, expires): #we manually construct this policy string to ensure formatting matches signature canned_policy = '{"Statement":[{"Resource":"%(url)s","Condition":{"DateLessThan":{"AWS:EpochTime":%(expires)s}}}]}' % {'url':url, 'expires':expires} #sign the non-encoded policy signature = sign_string(canned_policy, priv_key_string) #now base64 encode the signature (URL safe as well) encoded_signature = aws_url_base64_encode(signature) #combine these into a full url signed_url = create_url(url, encoded_signature, key_pair_id, expires); return signed_url def encode_query_param(resource): enc = resource enc = enc.replace('?', '%3F') enc = enc.replace('=', '%3D') enc = enc.replace('&', '%26') return enc #Set parameters for URL key_pair_id = "APKAIAZVIO4BQ" #from the AWS accounts CloudFront tab priv_key_file = "cloudfront-pk.pem" #your private keypair file # Use the FULL URL for non-streaming: resource = "http://34254534.cloudfront.net/video.mp4" #resource = 'video.mp4' #your resource (just object name for streaming videos) expires = int(time.time()) + 300 #5 min #Create the signed URL priv_key_string = open(priv_key_file).read() signed_url = get_canned_policy_url(resource, priv_key_string, key_pair_id, expires) print(signed_url) #Flash player doesn't like query params so encode them if you're using a streaming distribution #enc_url = encode_query_param(signed_url) #print(enc_url)
>>> import pandas as pd >>> import urllib2 >>> link = 'http://www.econ.yale.edu/~shiller/data/chapt26.xls' >>> socket = urllib2.urlopen(link) >>> xd = pd.ExcelFile(socket) NOTE *** Ignoring non-worksheet data named u'PDVPlot' (type 0x02 = Chart) NOTE *** Ignoring non-worksheet data named u'ConsumptionPlot' (type 0x02 = Chart) >>> xd.sheet_names [u'Data', u'Consumption', u'Calculations'] >>> df = xd.parse(xd.sheet_names[-1], header=None) >>> df 0 1 2 3 4 0 Average Real Interest Rate: NaN NaN NaN 1.028826 1 Geometric Average Stock Return: NaN NaN NaN 0.065533 2 exp(geo. Avg. return) NaN NaN NaN 0.067728 3 Geometric Average Dividend Growth NaN NaN NaN 0.012025
In [17]: df Out[17]: Date Time 0 2014-05-01 60 1 2014-05-02 505 In [18]: pd.to_datetime(df['Date']) + pd.to_timedelta(df['Time'], unit='m') Out[18]: 0 2014-05-01 01:00:00 1 2014-05-02 08:25:00 dtype: datetime64[ns]
from tkinter import * root = Tk() num1 = IntVar() num2 = IntVar() total = IntVar() def update_total(*severalignoredargs): total.set(num1.get() + num2.get()) num1.trace('w',update_total) num2.trace('w',update_total) entry1 = Entry(root,textvariable=num1) entry1.pack() entry2 = Entry(root,textvariable=num2) entry2.pack() total_label = Label(root,textvariable=total) total_label.pack() root.mainloop()
def paren_matcher(string, opens, closes): """Yield (in order) the parts of a string that are contained in matching parentheses. That is, upon encounting an "open parenthesis" character (one in <opens>), we require a corresponding "close parenthesis" character (the corresponding one from <closes>) to close it. If there are embedded <open>s they increment the count and also require corresponding <close>s. If an <open> is closed by the wrong <close>, we raise a ValueError. """ stack = [] if len(opens) != len(closes): raise TypeError("opens and closes must have the same length") # could make sure that no closes[i] is present in opens, but # won't bother here... result = [] for char in string: # If it's an open parenthesis, push corresponding closer onto stack. pos = opens.find(char) if pos >= 0: if result and not stack: # yield accumulated pre-paren stuff yield ''.join(result) result = [] result.append(char) stack.append(closes[pos]) continue result.append(char) # If it's a close parenthesis, match it up. pos = closes.find(char) if pos >= 0: if not stack or stack[-1] != char: raise ValueError("unbalanced parentheses: %s" % ''.join(result)) stack.pop() if not stack: # final paren closed yield ''.join(result) result = [] if stack: raise ValueError("unclosed parentheses: %s" % ''.join(result)) if result: yield ''.join(result) print list(paren_matcher('(([a] b) c ) [d] (e) f', '([', ')]')) print list(paren_matcher('foo (bar (baz))', '(', ')'))
all_cols = np.arange(old_m.shape[1]) cols_to_keep = np.where(np.logical_not(np.in1d(all_cols, cols_to_delete)))[0] m = old_m[:, cols_to_keep]
pip install python-dev
myDict = { 'p1': {1: [1, 2, 3], 2: [4, 5, 6]}, 'p2': {3: [7, 8, 9], 4: [0, 1, 2]} } from collections import Mapping def go_go_gadget_go(mapping): for k, v in mapping.items(): if isinstance(v, Mapping): for ok in go_go_gadget_go(v): yield [k] + ok else: yield [k] + [v] for protocol, n, counts in go_go_gadget_go(myDict): print(protocol, n, counts) # p2 3 [7, 8, 9] # p2 4 [0, 1, 2] # p1 1 [1, 2, 3] # p1 2 [4, 5, 6]
imgsize = (int(self.viewport.cget('width')) - 1,int(self.viewport.cget('height')) - 1) # limit the draggable mouse area to just the image dimensions if event.x < 4: currentx = 4 elif event.x > imgsize[0]: currentx = imgsize[0] else: currentx = event.x if event.y < 4: currenty = 4 elif event.y > imgsize[1]: currenty = imgsize[1] else: currenty = event.y
in_string = False input_str = 'foo,bar,\n"hihi","hi\nhi"' output_str = '' for ch in input_str: if ch == '"': in_string = not in_string if ch == '\n' and in_string: continue output_str += ch print output_str
thread_queues = [] for i in range(4): thread_queues = Queue() for user in user_list: user_hash=hash(user.user_id) #hash in here is just shortcut to some standard hash utility thread_id = user_hash % 4 thread_queues[thread_id].put(user) # From here ... your pool of threads access thread_queues but each thread ONLY accesses # one queue based on a numeric id given to each of them.
sum([f.subs(dict(k=k)) for k in u])
from django.utils.dateformat import DateFormat DateFormat(datetime.datetime.now()).format('N j, Y, P')
from subprocess import Popen, PIPE, STDOUT p = Popen(['lzop', '-c'], stdout=PIPE, stdin=PIPE, stderr=STDOUT) result_stdout = p.communicate(input=json.dump(results))[0]
def latin1_to_ascii (unicrap): """This replaces UNICODE Latin-1 characters with something equivalent in 7-bit ASCII. All characters in the standard 7-bit ASCII range are preserved. In the 8th bit range all the Latin-1 accented letters are stripped of their accents. Most symbol characters are converted to something meaningful. Anything not converted is deleted. """ xlate = { 0xc0:'A', 0xc1:'A', 0xc2:'A', 0xc3:'A', 0xc4:'A', 0xc5:'A', 0xc6:'Ae', 0xc7:'C', 0xc8:'E', 0xc9:'E', 0xca:'E', 0xcb:'E', 0xcc:'I', 0xcd:'I', 0xce:'I', 0xcf:'I', 0xd0:'Th', 0xd1:'N', 0xd2:'O', 0xd3:'O', 0xd4:'O', 0xd5:'O', 0xd6:'O', 0xd8:'O', 0xd9:'U', 0xda:'U', 0xdb:'U', 0xdc:'U', 0xdd:'Y', 0xde:'th', 0xdf:'ss', 0xe0:'a', 0xe1:'a', 0xe2:'a', 0xe3:'a', 0xe4:'a', 0xe5:'a', 0xe6:'ae', 0xe7:'c', 0xe8:'e', 0xe9:'e', 0xea:'e', 0xeb:'e', 0xec:'i', 0xed:'i', 0xee:'i', 0xef:'i', 0xf0:'th', 0xf1:'n', 0xf2:'o', 0xf3:'o', 0xf4:'o', 0xf5:'o', 0xf6:'o', 0xf8:'o', 0xf9:'u', 0xfa:'u', 0xfb:'u', 0xfc:'u', 0xfd:'y', 0xfe:'th', 0xff:'y', 0xa1:'!', 0xa2:'{cent}', 0xa3:'{pound}', 0xa4:'{currency}', 0xa5:'{yen}', 0xa6:'|', 0xa7:'{section}', 0xa8:'{umlaut}', 0xa9:'{C}', 0xaa:'{^a}', 0xab:'<<', 0xac:'{not}', 0xad:'-', 0xae:'{R}', 0xaf:'_', 0xb0:'{degrees}', 0xb1:'{+/-}', 0xb2:'{^2}', 0xb3:'{^3}', 0xb4:"'", 0xb5:'{micro}', 0xb6:'{paragraph}', 0xb7:'*', 0xb8:'{cedilla}', 0xb9:'{^1}', 0xba:'{^o}', 0xbb:'>>', 0xbc:'{1/4}', 0xbd:'{1/2}', 0xbe:'{3/4}', 0xbf:'?', 0xd7:'*', 0xf7:'/' } r = '' for i in unicrap: if xlate.has_key(ord(i)): r += xlate[ord(i)] elif ord(i) >= 0x80: pass else: r += i return r # This gives an example of how to use latin1_to_ascii(). # This creates a string will all the characters in the latin-1 character set # then it converts the string to plain 7-bit ASCII. if __name__ == '__main__': s = unicode('','latin-1') for c in range(32,256): if c != 0x7f: s = s + unicode(chr(c),'latin-1') print 'INPUT:' print s.encode('latin-1') print print 'OUTPUT:' print latin1_to_ascii(s)
#!/usr/bin/python3 # License: MIT import svgwrite progname = 'example_filter_on_group' def create_svg(name): svg_size_w = 900 svg_size_h = 1500 title_size = 20 y = 0 title = name + ': example of filter on a group' dwg = svgwrite.Drawing(name, (svg_size_w, svg_size_h), debug=True) # background will be white. dwg.add(dwg.rect(insert=(0, 0), size=('100%', '100%'), fill='white')) # create simple filter to blur rectangle blur6_filter = dwg.defs.add(dwg.filter()) blur6_filter.feGaussianBlur(in_='SourceGraphic', stdDeviation=6) # group with filter g_f = dwg.add(dwg.g(filter=blur6_filter.get_funciri())) g_f.add( dwg.rect(insert=(50, 50), size=(50, 50), fill='aqua')) dwg.save() if __name__ == '__main__': create_svg(progname + '.svg')
def create_response(self, request, data, response_class=HttpResponse, **response_kwargs): stripped_data = data.get('objects') or data desired_format = self.determine_format(request) serialized = self.serialize(request, stripped_data, desired_format) response = response_class(content=serialized, content_type=build_content_type(desired_format), **response_kwargs) # Convert meta data to HTTP Headers for name, value in data.get('meta', {}).items(): response[name] = str(value) return response
image_fullsize.save(filepath+name_fullsize, quality=95)
from __future__ import division from ipywidgets import * import numpy as np import matplotlib.pyplot as p %matplotlib inline def rotatedata(x,y,a): cosa=np.cos(a) sina=np.sin(a) x = x*cosa-y*sina y = x*sina+y*cosa return x,y data=np.loadtxt('plot3.txt') data=data.T x,y=data[0],data[1] def workit(a2): fig=p.figure(num=None, figsize=(18, 16), dpi= 80, facecolor='w', edgecolor='k') p.subplot(511) # , aspect='equal') p.plot(x,y) #what is the slope? m,b = np.polyfit(x, y, 1) x1,y1=rotatedata(x,y, -np.arctan(m) ) # rotate data to have flat surface, # interesting for surface roughness p.subplot(512 ) p.plot(x1,y1) x2,y2=rotatedata(x,y, a2) # rotate data to 'sharpen' histogram p.subplot(513 ) p.plot(x2,y2) p.subplot(514) p.hist(y2,bins=130) y3=np.diff(y2) p.subplot(515 ) p.plot(y3) return HTML() interact(workit,a2=[-0.002,0.002,0.00001])
def get_account_data(account): fields = serializers.serialize('python', [account, ])[0]['fields'] return {field: str(fields[field]) for field in fields}
import win32gui win = win32gui while True: print(win.GetWindowText(win.GetActiveWindow()))
import pygame pygame.init() screen = pygame.display.set_mode((400, 400)) rect = pygame.Rect(180, 180, 20, 20) clock = pygame.time.Clock() d=1 while True: for e in pygame.event.get(): if e.type == pygame.QUIT: raise screen.fill((0, 0, 0)) pygame.draw.rect(screen, (255, 255, 255), rect) rect.move_ip(d, 0) if not screen.get_rect().contains(rect): d *= -1 pos = pygame.mouse.get_pos() # print the 'absolute' mouse position (relative to the screen) print 'absoulte:', pos # print the mouse position relative to rect print 'to rect:', pos[0] - rect.x, pos[1] - rect.y clock.tick(100) pygame.display.flip()
if sys.platform == "win32": base = "Win32GUI"
if any(obj.type == 'type 1' for obj in object_list): object_list = [obj for obj in object_list if obj.name != 'some_name']
$ for filename in $(seq 20020101 20090726); do wget http://www.ctrlaltdel-online.com/comics/"$filename".jpg; done
from os import path import sys PACKAGE_NAMESPACE = ["project_name", "ext"] VIRTUAL_PACKAGE = '.'.join(PACKAGE_NAMESPACE) __import__(VIRTUAL_PACKAGE) local_package = path.abspath(path.join(*PACKAGE_NAMESPACE)) sys.modules[VIRTUAL_PACKAGE].__dict__["__path__"].insert(0, local_package)
return render(request, 'cart.html', {'key': value})
import numpy as np import matplotlib import matplotlib.pyplot as plt from matplotlib.finance import candlestick from matplotlib.finance import volume_overlay3 from matplotlib.dates import num2date from matplotlib.dates import date2num import matplotlib.mlab as mlab import datetime datafile = 'data.csv' r = mlab.csv2rec(datafile, delimiter=';') # the dates in my example file-set are very sparse (and annoying) change the dates to be sequential for i in range(len(r)-1): r['date'][i+1] = r['date'][i] + datetime.timedelta(days=1) candlesticks = zip(date2num(r['date']),r['open'],r['close'],r['max'],r['min'],r['volume']) fig = plt.figure() ax = fig.add_subplot(1,1,1) ax.set_ylabel('Quote ($)', size=20) candlestick(ax, candlesticks,width=1,colorup='g', colordown='r') # shift y-limits of the candlestick plot so that there is space at the bottom for the volume bar chart pad = 0.25 yl = ax.get_ylim() ax.set_ylim(yl[0]-(yl[1]-yl[0])*pad,yl[1]) # create the second axis for the volume bar-plot ax2 = ax.twinx() # set the position of ax2 so that it is short (y2=0.32) but otherwise the same size as ax ax2.set_position(matplotlib.transforms.Bbox([[0.125,0.1],[0.9,0.32]])) # get data from candlesticks for a bar plot dates = [x[0] for x in candlesticks] dates = np.asarray(dates) volume = [x[5] for x in candlesticks] volume = np.asarray(volume) # make bar plots and color differently depending on up/down for the day pos = r['open']-r['close']<0 neg = r['open']-r['close']>0 ax2.bar(dates[pos],volume[pos],color='green',width=1,align='center') ax2.bar(dates[neg],volume[neg],color='red',width=1,align='center') #scale the x-axis tight ax2.set_xlim(min(dates),max(dates)) # the y-ticks for the bar were too dense, keep only every third one yticks = ax2.get_yticks() ax2.set_yticks(yticks[::3]) ax2.yaxis.set_label_position("right") ax2.set_ylabel('Volume', size=20) # format the x-ticks with a human-readable date. xt = ax.get_xticks() new_xticks = [datetime.date.isoformat(num2date(d)) for d in xt] ax.set_xticklabels(new_xticks,rotation=45, horizontalalignment='right') plt.ion() plt.show()
>>> import datetime, pytz >>> melbourne = pytz.timezone("Australia/Melbourne") >>> melbourne.utcoffset(datetime.datetime.now()) datetime.timedelta(0, 36000) >>> pacific = pytz.timezone("US/Pacific") >>> pacific.utcoffset(datetime.datetime.now()) datetime.timedelta(-1, 61200) >>> -1*86400+61200 -25200 >>> pacific.utcoffset(datetime.datetime.now()).total_seconds() -25200.0
>>> get_session('Mmusc20090126', False, True) #doctest: +ELLIPSIS <sqlalchemy.orm.session.Session object at 0x...>
@staticmethod def time_method(method): def __wrapper(self, *args, **kwargs): if hasattr(self, '_being_timed'): # We're being timed already; just run the method return method(self, *args, **kwargs) else: # Not timed yet; run the timing code self._being_timed = True # remember we're being timed try: start = time.time() result = method(self, *args, **kwargs) finish = time.time() sys.stdout.write('instancemethod %s took %0.3f s.\n' %( method.__name__, (finish - start))) return result finally: # Done timing, reset to original state del self._being_timed return __wrapper
>>> from lxml import etree >>> doc = etree.HTML("""<html> ... <head></head> ... <body> ... <tr> ... <td class="or_q_artist"><a title="[Artist916]" href="http://rateyourmusic.com/artist/ac_dc" class="artist">AC/DC</a></td> ... <td class="or_q_album"><a title="[Album374717]" href="http://rateyourmusic.com/release/album/ac_dc/live_f5/" class="album">Live</a></td> ... <td class="or_q_rating" id="rating374717">4.0</td><td class="or_q_ownership" id="ownership374717">CD</td> ... <td class="or_q_tags_td"> ... </tr> ... </body> ... </html> ... """) >>> doc.xpath('//td[@class="or_q_artist"]/a/text()|//td[@class="or_q_album"]/a/text()') ['AC/DC', 'Live']
In [21]: ts = pd.DataFrame(np.random.randn(20, 2), index=pd.DatetimeIndex(start='2014-01-01 ', periods=20, freq='min')) In [23]: ts.to_csv('tst.csv', date_format='%Y-%m-%d') In [24]: !cat tst.csv ,0,1 2014-01-01,0.23269024172796468,-0.27276285241328363 2014-01-01,-2.1271569576784652,-0.08828528516158064 2014-01-01,-0.7476540707009801,0.4496366704379928 2014-01-01,-1.278025433730537,1.9559942454312738 2014-01-01,-0.5197557973521872,-0.38696497057942586 2014-01-01,1.907212175479462,0.08269395500820262 2014-01-01,-0.002980557062394977,1.649695381207261 2014-01-01,-0.9676320141522591,0.549518266575642 2014-01-01,-1.3499641850605548,-0.11695278340333974 2014-01-01,0.3281427666328896,0.2290718384099928 2014-01-01,0.29854271481529915,-1.606564949527949 2014-01-01,-1.8476324099199142,-1.1062031058677215 2014-01-01,-0.2625937089406767,0.6743539439246344 2014-01-01,0.1901494293074155,2.830381213725509 2014-01-01,-0.16171736635213055,-0.6913561112174935 2014-01-01,-0.6340530961142582,0.1944027320940862 2014-01-01,0.1875828513714546,0.3539781699433568 2014-01-01,1.502398492411021,0.9554844690144768 2014-01-01,0.40825706445611654,-0.6555754482696242 2014-01-01,-1.9870063518613181,0.8300825796678137
import src.module.submodule def mock_function(parameter = None): return 0 def test_function_works(monkeypatch): monkeypatch.setattr("src.module.submodule.function",mock_function ] assert src.module.submodule.function(parameter = None) == 0
class MySearchView(SearchView): def extra_context(self): return { 'ordered_tasks': ... }
>>> import sys >>> sys.byteorder 'little'
my_path = "some/path/blah" os.path.insert(0,my_path) import my_custom_module
def prompt_age(min=11, max=100): while True: try: age = int(raw_input('ENTER YOUR AGE: ')) except ValueError: print 'Please enter a valid number' continue if not min <= age <= max: print 'You are too young/old' continue return age
# Python 3.4 @asyncio.coroutine def some_coroutine(*some_args, loop=None): while True: [...] result = yield from loop.run_in_executor( None, # Use the default executor some_blocking_io_call, *some_args) [...] # Python 3.5 async def some_coroutine(*some_args, loop=None): while True: [...] result = await loop.run_in_executor( None, # Use the default executor some_blocking_io_call, *some_args) [...] loop = asyncio.get_event_loop() coro = some_coroutine(*some_arguments, loop=loop) loop.run_until_complete(coro)
class MyClass(models.Model): # some fields here def save(self, *args, **kwargs): # strip spaces here super(MyClass, self).save(*args, **kwargs) # make sure to call parent save method ^
# -*- coding: utf-8 -*- import matplotlib matplotlib.use('Agg') import matplotlib.pylab as plt plt.plot(range(10)) # you might need to change this to be a font that you know works for your gylphs # that you have installed plt.xlabel(u'وَبَوِّئْنا', name='Arial') plt.savefig('test.jpg',format='jpg')
from IPython.core.debugger import Tracer def my_function(): x = 5 Tracer()() print 5
from datetime import datetime startTime = datetime.now() a=2**1000000-3 b=a/13 elapsedTime = datetime.now() - startTime print "Elapsed time %s\n Number: %s" % (elapsedTime, b)
from itertools import product from math import log10 def foo(row, col): table = [[0]*col for _ in range(row)] for i, j in product(range(row), range(col)): table[i][j] = sum(range(i+1, j+2)) if i < j else sum(range(j+1, i+2)) _max = max(row, col) _max = int(log10(_max*(_max+1) / 2)) + 3 formatstr = ("{{:^{}}}".format(_max))*col for row in table: print formatstr.format(*row) >>> foo(3,4) 1 3 6 10 3 2 5 9 6 5 3 7 >>> foo(10,10) 1 3 6 10 15 21 28 36 45 55 3 2 5 9 14 20 27 35 44 54 6 5 3 7 12 18 25 33 42 52 10 9 7 4 9 15 22 30 39 49 15 14 12 9 5 11 18 26 35 45 21 20 18 15 11 6 13 21 30 40 28 27 25 22 18 13 7 15 24 34 36 35 33 30 26 21 15 8 17 27 45 44 42 39 35 30 24 17 9 19 55 54 52 49 45 40 34 27 19 10
def sortkey(row): return (row[5], row) def unwrap(key): sortkey, row = key return row from itertools import imap FILE_LIST = map(file, ['foo.csv', 'bar.csv']) input_iters = imap(sortkey, map(csv.csvreader, FILE_LIST)) output_iter = imap(unwrap, heapq.merge(*input_iters))
define([ 'base/js/namespace', 'base/js/events' ], function(IPython, events) { events.on("app_initialized.NotebookApp", function () { IPython.Cell.options_default.cm_config.extraKeys = {"Ctrl-," : "toggleComment"}; } ); } );
import pytest import requests from hamcrest import * class SiteImpl: def __init__(self, url): self.url = url def has_valid_cert(self): return requests.get(self.url, verify=True) @pytest.yield_fixture def site(request): # setUp yield SiteImpl('https://' + request.param) # tearDown def has_status(item): return has_property('status_code', item) @pytest.mark.parametrize('site', ['google.com', 'github.com'], indirect=True) def test_cert(site): assert_that(site.has_valid_cert(), has_status(200)) if __name__ == '__main__': pytest.main(args=[__file__, '-v'])
>>> import requests >>> response = requests.get("http://104.71.136.252/", timeout=60, verify=False) >>> response.raw.version 10 >>> response = requests.get("http://stackoverflow.com", timeout=60, verify=False) >>> response.raw.version 11
class Activity(EmbeddedDocument): user = ReferenceField('Profile') user_unrelated = ReferenceField('Profile') created_date = DateTimeField(default=datetime.datetime.now, required=True)
import pymysql from bottle import Bottle,run app = Bottle() @app.route('/conn') def conn(): yield "Trying to connect to database..." try: conn = pymysql.connect(user="X",passwd="X",host="X",port=X,database="X") yield "Connection succeded" except: yield "Oops...connection failed" run(app, host='localhost',port = 8080)
>>> s = '''Report: Location: (569P,921L) Band 1: Value: 12''' >>> x,y = re.findall(r'\b\d+(?=[A-Z])', s) >>> print(x,y) 569 921
class Post(db.Model): id = db.Column(db.Integer, primary_key=True) class Comment(db.Model): id = db.Column(db.Integer, primary_key=True post_id = db.Column(db.Integer, db.ForeignKey(Post.id), nullable=False) post = db.relationship(Post, backref='comments')
[compile_catalog] directory = YOURPROJECT/locale domain = YOURPROJECT statistics = true [extract_messages] add_comments = TRANSLATORS: output_file = YOURPROJECT/locale/YOURPROJECT.pot width = 80 [init_catalog] domain = YOURPROJECT input_file = YOURPROJECT/locale/YOURPROJECT.pot output_dir = YOURPROJECT/locale [update_catalog] domain = YOURPROJECT input_file = YOURPROJECT/locale/YOURPROJECT.pot output_dir = YOURPROJECT/locale previous = true
>>> list1 = ['f', 'o', 'o'] >>> list2 = ['hello', 'world'] >>> result = [None]*(len(list1)+len(list2)) >>> result[::2] = list1 >>> result[1::2] = list2 >>> result ['f', 'hello', 'o', 'world', 'o']
from collections import OrderedDict annotations = [OrderedDict([('ID', i + 1), # need to initialize with a list of tuples ('NAME', 'Tag Name'), # to preserve the order of the items ('CONTENT', 'Note Content: This space will have a lot of text'), ('URL', 'ref address'), ('URL Info', 'url info')]) for i in range(10)] for i, dct in enumerate(annotations): print("Annotation #{}".format(i+1)) for key, value in dct.items(): print("{}: {}".format(key, value)) print()
r_old = old_w / old_h r_new = new_w / new_h if (r_old > r_new) then w = new_w // width of mapped rect h = w / r_old // height of mapped rect x = 0 // x-coord of mapped rect y = (new_h - h) / 2 // y-coord of centered mapped rect else h = new_h w = h * r_old y = 0 x = (new_w - w) / 2 endif
return Response(my_date, mimetype, {'Content-Disposition':'attachment'})
def convert_bng(double[::1] x, double[::1] y): # I'm assuming that the data is double, not float, but it's easy changed # here the [::1] promises it's continuous in memory cdef _FFIArray x_ffi, y_ffi # get a pointer to the data, and cast it to void* x_ffi.data = <void*>&x[0] x_ffi.len = x.shape[0] # possibly *sizeof(double) - depends on the C api # repeat for y y_ffi.data = <void*>&y[0] y_ffi.len = y.shape[0] cdef _Result_Tuple result = convert_to_bng_threaded(x_ffi, y_ffi) # get data pointers for the two result arrays cdef double* e_ptr = <double*>(result.e.data) cdef double* n_ptr = <double*>(result.n.data) # now view your output arrays using memoryviews # you need to tell it the length (this is how many doubles the contain) cdef double[::1] e = <double[:result.e.len:1]>e_ptr cdef double[::1] n = <double[:result.n.len:1]>n_ptr # create a numpy copy of the two arrays import numpy as np e_numpy = np.copy(e) n_numpy = np.copy(n) # you can now free your two returned arrays # I assume this is done with drop_float_array drop_float_array(result.e,result.n) # return as tuple containing two arrays to python return e_numpy, n_numpy
>>> a = '{"code":"ok","job":{"config":{"progress":{"message":"Reading 2014-03-03__12-57-01-PM.xml","percent":107, "maxmemory":954,"memory":667},"projectID":1868117666669}}}' >>> json.loads(a)['job']['config']['projectID'] 1868117666669
image = Image.open(StringIO.StringIO(image_data))
def isUSER1(): env.user="USER1" with settings(abort_on_prompts=True): if env.host.find("@")==-1: try : sudo('whoami') env.hosts.remove(env.host) fullhost=env.user+'@'+env.host env.hosts.append(fullhost) except : pass
from kafka import KafkaClient from kafka.protocol.offset import OffsetRequest, OffsetResetStrategy from kafka.common import OffsetRequestPayload client = KafkaClient(brokers) partitions = client.topic_partitions[topic] offset_requests = [OffsetRequestPayload(topic, p, -1, 1) for p in partitions.keys()] offsets_responses = client.send_offset_request(offset_requests) for r in offsets_responses: print "partition = %s, offset = %s"%(r.partition, r.offsets[0])
INPUT = 'file.txt' OUTPUT = 'calc.txt' def main(): with open(INPUT, 'r') as reader, open(OUTPUT, 'a') as writer: last_value = 0 for line in reader: column_1, *remaining_columns = map(float, line.split()) column_2 = column_1 - last_value last_value = column_1 print(column_1, column_2, sep='\t', file=writer) if __name__ == '__main__': main()
import threading, time from msvcrt import getch key = "lol" def thread1(): global key lock = threading.Lock() while True: with lock: key = getch() threading.Thread(target = thread1).start() while True: time.sleep(1) print(key)
class Person(models.Model): name = models.CharField(max_length=20) lastname = models.CharField(max_length=20) job = models.CharField(max_length=20) salary = models.IntegerField() class Meta: abstract = True class Person1(Person): ...
import re from selenium.webdriver.common.by import By from selenium.webdriver.support import expected_conditions as EC from selenium import webdriver from selenium.webdriver.support.wait import WebDriverWait browser = webdriver.Firefox() browser.get('http://www.spokeo.com/search?q=Joe+Henderson,+Phoenix,+AZ&sao7=t104#:18643819031') WebDriverWait(browser, 10).until(EC.presence_of_element_located((By.ID, "profile_details_section_header"))) content = browser.page_source m_obj = re.search(r"(\(\d{3}\)\s\d{3}-\*{4})", content) if m_obj: print m_obj.group(0) browser.quit()
python Python 2.6.6 (r266:84292, May 10 2011, 11:07:28) [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin Type "help", "copyright", "credits" or "license" for more information. >>> MAIL_SERVER = 'smtp.domain.com' >>> TO_ADDRESS = 'you@gmail.com' >>> FROM_ADDRESS = 'email@domain.com' >>> REPLY_TO_ADDRESS = 'email2@domain2.com' >>> import smtplib >>> import email.mime.multipart >>> msg = email.mime.multipart.MIMEMultipart() >>> msg['to'] = TO_ADDRESS >>> msg['from'] = FROM_ADDRESS >>> msg['subject'] = 'testing reply-to header' >>> msg.add_header('reply-to', REPLY_TO_ADDRESS) >>> server = smtplib.SMTP(MAIL_SERVER) >>> server.sendmail(msg['from'], [msg['to']], msg.as_string()) {}
>>> a = (2,3) >>> b = (2,3,) >>> c = 2,3 >>> a==b True >>> a==c True >>> b==c True >>> d = 2,3, >>> a==d True
headers = { 'User-Agent': 'My User Agent 1.0', 'From': 'youremail@domain.com' # This is another valid field } response = requests.get(url, headers=headers)
from scripttest import TestFileEnvironment env = TestFileEnvironment('./scratch') def test_script(): env.reset() result = env.run('do_awesome_thing testfile --with extra_win --file %s' % filename) # or use a list like ['do_awesome_thing', 'testfile', ...] assert result.stdout.startswith('Creating awesome file') assert filename in result.files_created
import re import sys import time # Tested with PySide 1.0.9, changing imports to PyQt should work identically from PySide.QtCore import Qt, QUrl from PySide.QtGui import QApplication, QImage, QPainter from PySide.QtWebKit import QWebPage, QWebSettings def os_safe_name(url): url = re.sub("[^a-zA-Z0-9_-]+", "_", url) url = re.sub("_{2,}", "_", url) return url class Render(QWebPage): def __init__(self, url): QWebPage.__init__(self) self.url = url self.finished = False # Settings s = self.settings() #s.setAttribute(QWebSettings.AutoLoadImages, False) s.setAttribute(QWebSettings.JavascriptCanOpenWindows, False) s.setAttribute(QWebSettings.PluginsEnabled, True) #self.mainFrame().setScrollBarPolicy(Qt.Vertical, Qt.ScrollBarAlwaysOff) self.mainFrame().setScrollBarPolicy(Qt.Horizontal, Qt.ScrollBarAlwaysOff) # When page is loaded, callback saves image to file self.loadFinished.connect(self._loadFinished) self.mainFrame().load(QUrl(url)) def _loadFinished(self, result): frame = self.mainFrame() size = frame.contentsSize() size.setWidth(1366) self.setViewportSize(size) image = QImage(self.viewportSize(), QImage.Format_ARGB32) painter = QPainter(image) frame.render(painter) painter.end() self.filepath = "output/%s.png" % os_safe_name(self.url) image.save(self.filepath) self.finished = True def run(url, app = None): if app is None: app = QApplication(sys.argv) r = Render(url) while not r.finished: app.processEvents() time.sleep(0.01) return r.filepath if __name__ == '__main__': app = QApplication(sys.argv) print run("http://stackoverflow.com", app=app) print run("http://google.com", app=app)
def test(request): obj2 = Student.objects.get(name='john') classes_name = obj2._meta.get_field('classes').related_model.__name__ return render(request, 'test/list.html', {'obj2':obj2, 'classes_name': classes_name})
import subprocess import os.path def start_editor(editor,file_name): if not os.path.isfile(file_name): # If file doesn't exist, create it with open(file_name,'w'): pass command_line=editor+' '+file_name # Add any desired command line args p = subprocess.Popen(command_line) p.wait() file_name='test.txt' # Probably known from elsewhere editor='notepad.exe' # Read from environment variable if desired start_editor(editor,file_name) with open(file_name,'r') as f: # Do something with the file, just an example here for line in f: print line
def spaces(sentences): textList = sentences.split('. ') whiteList = [whitespaces.count(' ') for whitespaces in textList] return max(whiteList) print(spaces(sentences))
## Explore the data (line 27) data = pd.read_table('u.data', header=None) # header=None avoid getting the columns automatically data.columns = ['userID', 'itemID', 'rating', 'timestamp'] # Manually set the columns. data = data.drop('timestamp', axis=1) # Continue with regular work. ... ## Load user information (line 75) users_info = pd.read_table('u.user', sep='|', header=None) users_info.columns = ['useID', 'age', 'gender', 'occupation' 'zipcode'] users_info = users_info.set_index('userID') ... ## Load movie information (line 88) movies_info = pd.read_table('u.item', sep='|', header=None) movies_info.columns = ['movieID', 'movie title', 'release date', 'video release date', 'IMDb URL', 'unknown', 'Action', 'Adventure', 'Animation', "Children's", 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror', 'Musical', 'Mystery', 'Romance', 'Sci-Fi',' Thriller', 'War', 'Western'] movies_info = movies_info.set_index('movieID')#.drop(low_count_movies)
import collections val_map = collections.defaultdict(list) for k,v in myRackDict.items(): val_map[v].append(k)
report_tuples = [ ('http://www.myreport.com/report1', report1_date_object_or_string), ('http://www.myreport.com/report2', report2_date_object_or_string), ('http://www.myreport.com/report3', report3_date_object_or_string), ] sorted(report_tuples, key=lambda reports: reports[1]) # sort by date html = '<html><body>' #add anything else in here or even better #use a template that you read and complement lastDate = None for r in report_tuples: if not lastDate or not lastDate == r[1]: html += '<h3>%s</h3>' % (str(r[1])) html += '<a href="%s">Your Report Title</a>' % (r[0]) return html #or even better, write it to the disk.
def get_item_by_label(self, tree, search_text, root_item): item, cookie = tree.GetFirstChild(root_item) while item.IsOk(): text = tree.GetItemText(item) if text.lower() == search_text.lower(): return item if tree.ItemHasChildren(item): match = self.get_item_by_label(tree, search_text, item) if match.IsOk(): return match item, cookie = tree.GetNextChild(root_item, cookie) return wx.TreeItemId() result = get_item_by_label(tree, 'MyStories', tree.GetRootItem()) if result.IsOk(): print('We have a match!')
self.app.conf['CELERYBEAT_SCHEDULE']
import datetime ax.plot_date([d.astype(datetime.datetime) for d in data['date']], data['count'])
class UserProfile(models.Model): user = models.OneToOneField(User) website = models.URLField() class Mobile(models.Model): phone_number = models.CharField(min_length = 7, max_length = 20) description = models.CharField(min_length = 7, max_length = 20) user_profile = models.ForeignKey(UserProfile)
import tkinter as tk CORRECT_ANSWER = 'Some answer' def callback(): if var.get() != CORRECT_ANSWER: for i in range(10, 50): canvas.move(text, -i if i% 2 == 0 else i, 0) canvas.update() canvas.move(text, i if i % 2 == 0 else -i, 0) canvas.update() if __name__ == '__main__': root = tk.Tk() var = tk.StringVar() canvas = tk.Canvas(root, bg="black") canvas.pack(fill=tk.BOTH, expand=1) text = canvas.create_text(200, 100, text='Enter the answer to this question.', fill='white') entry = tk.Entry(root, textvariable = var) entry.pack(side=tk.LEFT, fill=tk.X, expand=1) submit = tk.Button(root, text='Submit', command=callback) submit.pack(side=tk.LEFT, fill=tk.X, expand=1) root.mainloop()
binned = np.full((bin_idx[-1]+1, np.max(col_idx)+1), np.nan) binned[bin_idx, col_idx] = x
return wireAmpacityTable[pos1][1]
>>> s = "how much for the maple syrup? $20.99? That's ricidulous!!!" >>> re.sub(r'[^\w]', ' ', s) 'how much for the maple syrup 20 99 That s ricidulous '
import numpy as np from scipy.linalg import schur a = np.array([[ 1., 2., 3.], [4., 5., 6.], [7., 8., 9.]]) u, q = schur(a) # q is the unitary matrix, u is upper triangular repr(u) # array([[ 1.61168440e+01, 4.89897949e+00, 1.58820582e-15], # [ 0.00000000e+00, -1.11684397e+00, -1.11643184e-15], # [ 0.00000000e+00, 0.00000000e+00, -1.30367773e-15]])
<ul id="theSortableStuff"> {% for item in things_to_sort %} <li id="item-{{ item.id }}">{{ item.name }}</li> {% endfor %} </ul> <script> var $sortables = $("#theSortableStuff").sortable({ stop: function() { var sortedItems = $sortables.sortable("toArray"); // Update some form in the DOM or use AJAX to invoke a server-side update } }); </script>
>>> "www.example.com" in "http://www.example.com/aaa/bbb/ccc" True
hmag = np.array(hmag) jmag = np.array(jmah) colorjh = jmag - hmag idx_c = (colorjh > 0) & (colorjh < 1) # where condition on c is met idx_h = (hmag > 10) & (hmag < 13) # where condition on h is met idx = idx_c & idx_h # where both conditions are met plt.scatter(colorjh[idx], hmag[idx], c='g', s=1, alpha=0.05)
photo = tkinter.PhotoImage(file = './Images/img1.gif') root.geometry("450x450") root.update() img = canvas.create_image(225,225, image=photo) root.after(20000, lambda: canvas.delete(img)) # 20,000 milli seconds = 20 seconds root.mainloop()
from random import randrange def lowHigh(): l = input ("Please input the low number range.") numl = eval(l) h = input ("Please input the high number range.") numh = eval(h) lowest = l highest = h while True: guess = randrange(lowest,highest+1) print (guess) ask = input("Is this number correct? y for yes or n for no.") if ask == 'y': print("Yay! I guessed right!") break else: lowOrHigh = input ("Is this number too high or low? h for high, l for low.") if lowOrHigh == 'h': highest = guess - 1 else: lowest = guess
import sys sys._getframe(number)
from Tkinter import * cb_strings = ['item 1', 'item 2', 'item 3', 'item 4'] def sel(): print "You selected the option " + str(var.get()) root = Tk() var = StringVar() var.set(cb_strings[0]) for item in cb_strings: button = Radiobutton(root, text=item, variable=var, value=item, command=sel) button.pack(anchor=W) root.mainloop()
In [230]: s = 'Website is: http://www.somesite.com ' In [231]: re.findall('Website is:\s+(\S+)', s) Out[231]: ['http://www.somesite.com']
b = Element("Batch") b.append(Attribute("OnError","Continue")).append(Attribute("ListVersion","3")) bm= Element("Method") bm.append(Attribute("ID","1")).append(Attribute("Cmd","Update")) bm.append(Element("Field").append(Attribute("Name","ID")).setText('')) bm.append(Element('Field').append(Attribute('Name','FileRef')).setText('http://.....')) bm.append(Element('Field').append(Attribute('Name','Jurisdiction')).setText('UK')) bm.append(Element('Field').append(Attribute('Name','Desk')).setText('Structured Equity Derivatives')) bm.append(Element('Field').append(Attribute('Name','Business Area')).setText('Back Office')) bm.append(Element('Field').append(Attribute('Name','Title')).setText('whatever')) b.append(bm) u = Element("ns1:updates") u.append(b) c.service.UpdateListItems("Reports",u)
states = [gtk.STATE_NORMAL, gtk.STATE_ACTIVE, gtk.STATE_PRELIGHT, gtk.STATE_SELECTED, gtk.STATE_INSENSITIVE] for state in states: button.modify_bg(state, gtk.gdk.color_parse("Green"))
ax.set_rasterization_zorder(1)
def nohsps(input): count=0 for line in input: if line.startswith('AJ000012.1'): count=count+1 return count
existing_set = {os.path.basename(f) for f in existing_list} # set comprehension, python2.7+ # alternatively: set(os.path.basename(f) for f in existing_list) remaining_list = [f for f in all_list if f not in existing_set]
class KFold(_BaseKFold): """K-Folds cross validation iterator. Provides train/test indices to split data in train test sets. Split dataset into k consecutive folds (without shuffling). Each fold is then used a validation set once while the k - 1 remaining fold form the training set. Parameters ---------- n : int Total number of elements. n_folds : int, default=3 Number of folds. Must be at least 2. shuffle : boolean, optional Whether to shuffle the data before splitting into batches. random_state : None, int or RandomState Pseudo-random number generator state used for random sampling. If None, use default numpy RNG for shuffling Examples -------- >>> from sklearn import cross_validation >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]]) >>> y = np.array([1, 2, 3, 4]) >>> kf = cross_validation.KFold(4, n_folds=2) >>> len(kf) 2 >>> print(kf) # doctest: +NORMALIZE_WHITESPACE sklearn.cross_validation.KFold(n=4, n_folds=2, shuffle=False, random_state=None) >>> for train_index, test_index in kf: ... print("TRAIN:", train_index, "TEST:", test_index) ... X_train, X_test = X[train_index], X[test_index] ... y_train, y_test = y[train_index], y[test_index] TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] Notes ----- The first n % n_folds folds have size n // n_folds + 1, other folds have size n // n_folds. See also -------- StratifiedKFold: take label information into account to avoid building folds with imbalanced class distributions (for binary or multiclass classification tasks). """ def __init__(self, n, n_folds=3, shuffle=False, random_state=None): super(KFold, self).__init__(n, n_folds, shuffle, random_state) self.idxs = np.arange(n) if shuffle: rng = check_random_state(self.random_state) rng.shuffle(self.idxs) def _iter_test_indices(self): n = self.n n_folds = self.n_folds fold_sizes = (n // n_folds) * np.ones(n_folds, dtype=np.int) fold_sizes[:n % n_folds] += 1 current = 0 for fold_size in fold_sizes: start, stop = current, current + fold_size yield self.idxs[start:stop] current = stop def __repr__(self): return '%s.%s(n=%i, n_folds=%i, shuffle=%s, random_state=%s)' % ( self.__class__.__module__, self.__class__.__name__, self.n, self.n_folds, self.shuffle, self.random_state, ) def __len__(self): return self.n_folds
data_files = [] directories = glob.glob('data/subfolder?/subfolder??/') for directory in directories: files = glob.glob(directory+'*') data_files.append((directory, files)) # then pass data_files to setup()
B = [5,-4,5,-6] y = [ [0,1,0,1], [0,0,0,0], [0,0,0,1], [0,0,0,0], ] x = [] for i, row in enumerate(y): temp = [] for j, col in enumerate(row): if col != 0: temp.append(str(col) + '*x' + str(i) + str(j)) else: temp.append(col) x.append(temp) #for one in x: # print one equ = [] for i in xrange(4): temp1 = [] temp2 = [] for j in xrange(4): temp1.append(x[i][j]) temp2.append(x[j][i]) temp2.append(B[i]) equ.append(tuple(temp1 + temp2)) equtions = [] for one in equ: s = '%s + %s + %s + %s - %s - %s - %s - %s = %s' % one equtions.append(s) for one in equtions: print one import re from copy import deepcopy equ_bak = deepcopy(equtions) p_var = re.compile(r'x\d\d') vars = set([]) for one in equ_bak: m = p_var.findall(one) vars |= set(m) vars = sorted(list(vars)) p_ef = re.compile(r'([+-]* *\d*)\*(x\d\d)') effs = [] for one in equ_bak: m = p_ef.findall(one) #print m temp = [0] * len(vars) for num, var in m: try: temp[vars.index(var)] = float(num.replace(' ', '')) except: pass effs.append(tuple(temp)) #for one in effs: # print one import numpy as np A = np.array(effs) x = np.linalg.lstsq(A,B) print vars print x[0]
for key, val in zip(jobids, jobdeps): if key == '0': print val
#include <functional> #include <string> #include <unordered_map> std::function<std::string(std::string)> maketrans(const std::string& from, const std::string& to) { std::unordered_map<char, char> map; for (std::string::size_type i = 0; i != std::min(from.size(), to.size()); ++i) { map[from[i]] = to[i]; } return [=](std::string s) { for (auto& c : s) { const auto mapped_c = map.find(c); if (mapped_c != map.end()) { c = mapped_c->second; } } return s; }; } #include <iostream> int main() { const std::string intab = "aeiou"; const std::string outtab = "12345"; const auto translate = maketrans(intab, outtab); const std::string str = "this is string example....wow!!!"; std::cout << translate(str) << std::endl; return 0; }
from __future__ import print_function import time import sys print(".", end="\r") sys.stdout.flush() time.sleep(1) print("..", end="\r") sys.stdout.flush() time.sleep(1) print("...") sys.stdout.flush()
list(cf.get_range().get_keys())
a <- matrix(c(1,2,3,4), 2, byrow=TRUE) b <- array(t(a), dim=c(2,1,2)) b
secsAfterADEpoch = float(your_weird_time) / 10000000.0 # seconds since jan 1st 1601 ADToUnixConvertor = ((1970-1601) * 365.242190) * 86400 # unix epoch - AD epoch * number of tropical days * seconds in a day unixified = (secsAfterADEpoch-ADToUnixConvertor)+31800 # unix Timestamp version of AD timestamp + correction time
In [4]: df['label'] = 'F' In [33]: df.loc[df[df['V1'] > df['V1'].mean()].sample(1).index,'label'] = 'T' In [34]: df.loc[df[df['V1'] <= df['V1'].mean()].sample(1).index,'label'] = 'T' In [35]: df Out[35]: V1 label 0 1 T 1 2 F 2 3 F 3 4 F 4 5 T
import matplotlib.pyplot as plt # Turn on LaTeX formatting for text plt.rcParams['text.usetex']=True # Place the command in the text.latex.preamble using rcParams plt.rcParams['text.latex.preamble']=r'\makeatletter \newcommand*{\rom}[1]{\expandafter\@slowromancap\romannumeral #1@} \makeatother' fig,ax = plt.subplots(1) # Lets try it out. Need to use a 'raw' string to escape # the LaTeX command properly (preface string with r) ax.text(0.2,0.2,r'\rom{28}') # And to use a variable as the roman numeral, you need # to use double braces inside the LaTeX braces: for i in range(1,10): ax.text(0.5,float(i)/10.,r'\rom{{{}}}'.format(i)) plt.show()
