with open("File1.txt") as fin1: lines = set(fin1.readlines()) with open("File2.txt") as fin2: lines.update(set(fin2.readlines())) with open("file3.txt", 'w') as fout: fout.write('\n'.join(list(lines)))
process = subprocess.Popen([path_to_acrobat, '/n', '/A', 'page=' + page, path_to_pdf], shell=False, stdout=subprocess.PIPE)
test[numpy.logical_or.reduce([test[:,1] == x for x in wanted])]
>>> import re >>> pattern = r"\t(\w+) -- (\w+)" >>> s = ' test1 -- test2' >>> a, b = re.search(pattern, s).groups() >>> a 'test1' >>> b 'test2'
class DummyClient: def __init__(self): def callback_get_login(realm, username, may_save): name = raw_input("Enter your svn login : ") password = getpass.getpass("Enter your svn password :") return True, name, password, False self.client.callback_get_login = callback_get_login
def main(): with open("in.txt", "rb") as f, open('out.txt','w') as output: byte = f.read(1) while byte != "": output.write(str(ord(byte))) byte = f.read(1) if __name__ == '__main__': main()
import itertools as it def vecAdd(v1, v2): return tuple(it.imap(add, v1, v2)) def vecMul(v1, f): return tuple(it.imap(mul, v1, it.repeat(f)))
def fields(cursor): results = {} column = 0 for d in cursor.description: results[d[0]] = column column = column + 1 return results
name = 'harold' order_id = driver.find_element_by_xpath('//div[@class="boxbody"]//table//tr[td[last()][text()="%s"]]/td[1]/a' % name) print order_id.text
os.path.dirname("http://www.google.com/test") # outputs http://www.google.com
def singleNumber(nums): unique = 0 for num in nums: unique ^= num return unique
user.email = Email.as_unique('foo@bar.com')
for tup in list: a,b,c,d,e = tup
>>> from __future__ import unicode_literals >>> s = 'hi' >>> type(s) <type 'unicode'>
from glob import glob from process import process_one_file for i in range(100): process_one_file(glob('prefix_foo_{}_*'.format(i)))
List = [(3,5,6,7,6),(3,5,3,2,6),(3,6,1,0,5)] X= [1,4,5,6] scores = [] for item in List: scores.append(tuple(map(lambda x: 0 if item[2] < x else 1, X))) result = [] for item, score in zip(List, scores): result.append(item + score) print(result) # [(3, 5, 6, 7, 6, 1, 1, 1, 1), (3, 5, 3, 2, 6, 1, 0, 0, 0), (3, 6, 1, 0, 5, 1, 0, 0, 0)]
import lxml.html t = lxml.html.fromstring("...") t.text_content()
>>> from decimal import * >>> getcontext().prec = 100 >>> Decimal(2).sqrt() Decimal('1.414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641573')
for i in x: print i
import urllib2 url="http://www.test.com/page.html" page=urllib2.urlopen(url) data=page.read() for item in data.split("</h3>"): if "<h3>" in item: print item.split("<h3>")[1]
import subprocess p = subprocess.Popen(['./script.sh', '-p', '1234'], stdin=subprocess.PIPE, stdout=subprocess.PIPE) stdout, stderr = p.communicate(input='password\nauth username\nauth password\n')
'test': fields.function(_get_value, type='integer', store=True, 'Test'),
Not very well documented outside of vim. In vim: help python Look at other python scripts at vim.org
# myvariables.py name = 'Steve' # main.py import myvariables print myvariables.name
mainwindow.setWindowFlags(QtCore.Qt.FramelessWindowHint) mainwindow.showFullScreen()
l = [[name_d, 5], [name_e, 10], [name_a, 5]] # copy l_sorted = sorted(l, key=lambda x: (x[1] * -1, x[0])) # in place l.sort(key=lambda x: (x[1] * -1, x[0])
from collections import Counter with open('ip.txt') as f: cnt = Counter(line.strip() for line in f) print('{:<20} {}'.format('IP Address', 'count(number of repeated)')) for ip, c in cnt.most_common(): print('{:<20} {}'.format(ip, c))
someXML = lxml.etree.XML(someString) if ns is None: ns = {"m": someXML.tag.split("}")[0][1:]} someid = someXML.xpath('.//m:ImportantThing//m:ID', namespaces=ns)
>>> lis = [1,-5,10,6,3,-4,-9] >>> sorted(lis, key=abs, reverse=True) [10, -9, 6, -5, -4, 3, 1]
import numpy import matplotlib.pyplot as plt x = numpy.random.randn(1000) values, bins, _ = plt.hist(x, normed=True) area = sum(numpy.diff(bins)*values)
import pygame from pygame.locals import * pygame.init() def circle_drawing(surf): pass #your circle drawing function using passed in surface DISPLAY = (1, 1) DEPTH = 32 FLAGS = 0 screen = pygame.display.set_mode(DISPLAY, FLAGS, DEPTH) work_surface = pygame.Surface((500,500)) count = 0 while True: ws = circle_drawing(work_surface.copy()) pygame.image.save(ws, "circles_" + str(count)+".png") count +=1
a = [] for q in sorted((set(q) for q in sort), key=len, reverse=True): if not any(q.issubset(Q) for Q in a): a.append(q) a = [list(q) for q in a] # Back to lists, if you want
class InternForm(ModelForm): # ... class Meta: model = Intern class ApplyInternForm(InternForm): class Meta: model = Intern exclude = ('is_active',)
print df col 0 20151028 193133 1 20151028 193133 2 20151028 193133 df['col'] = pd.to_datetime(df['col'], format="%Y%m%d %H%M%S") print df col 0 2015-10-28 19:31:33 1 2015-10-28 19:31:33 2 2015-10-28 19:31:33
from itertools import izip with open('data.txt', 'r') as f: for line1, line2 in izip(*(iter(f),) * 2): print line1, line2
im = ... # get image into PIL image instance dpi = im.info["dpi"] # retrive the DPI print dpi # (x-res, y-res) im.info["dpi"] = new dpi # (x-res, y-res) im.save("PNG") # uses the new DPI
def bar(self): assert isinstance(self, Foo) return self
class EnumChoices(views.APIView): class EnumPermission(permissions.BasePermission): def has_permission(self, request, view): # whatever permission logic you need, e.g. return request.user.has_perm("planning.view_enums") permission_classes = (permissions.IsAuthenticated, EnumPermission) def get(self, request): enums = {} return Response(enums)
from Tkinter import * def getvalue(): e1_var.get() l1 = Label(root, text=e1_var).grid() root = Tk() e1_var = StringVar e1 = Entry(root, textvariable=e1_var).grid() b1 = Button(root, command=getvalue).grid() root.mainloop()
$ . |-- happy_birthday/ |-- __init__.py |-- art.txt |-- MANIFEST.in |-- README.rst |-- setup.py
if len(the_entry_widget.get()) == 0: do_something()
In [1]: l = [122,423,134] In [2]: [int(str(val)[::-1]) for val in l] Out[2]: [221, 324, 431]
import itertools as it, operator as op summary_trees = [] for k,g in it.groupby(sorted_trees, key=op.itemgetter(0)) tempg=list(g) summary_trees.append([k, sum(i[2] for i in tempg), sum(i[3] for i in tempg)])
catString = "randomtextrandomtext (cats:1)=1 randomtext randomtextrandomtext (cats:3)=3 randomtext randomtext (cats:1540)=1,540 randomtextrandomtext randomtext (cats:85):85 randomtext" result = '' end = -1 try: while True: start = catString.index('(cats:', end+1) end = catString.index(')', start) result += catString[start:end+1] except ValueError: pass print(result)
if int(humidity)>75:
if line_num == 151: if self.run_count == 1: print(values[self.run_count-1]) elif line_num == 129: if self.run_count == 2: print(values[self.run_count-1]) elif self.run_count == 3: print("here") else: print(line_num) f.write(line)
try: while True: do_something() except KeyboardInterrupt: pass
tree = (5, (8, (12, None, None), (2, None, None)),(9, (7, (1, None, None), None), (4, (3, None, None), None))) def tree_depth(node): if not isinstance(node, tuple): return 1 else: return max(tree_depth(subnode) for subnode in node) + 1 print tree_depth(tree)
query = 'SELECT id,sing_name,bir_yr FROM singers_list WHERE bir_yr = %s' curs.execute(query, (year, ))
def sumD(num): if num == 0: return 0 return (num % 10) + sumD(num // 10)
>>> '\\' '\\' >>> len('\\') 1 >>> print '\\' \ >>> '\(' '\\(' >>> len('\(') 2 >>> print '\(' \(
print "I'm inside Python file %s" % __file__
_, FILENAME = os.path.split(infile)
path = os.path.join(os.path.dirname(__file__), '..', 'templates', 'myPage.html')
idle idle-python2.7
>>> from datetime import datetime as dt >>> date_str='12/20/2014 15:25:05 pm' >>> date_obj = dt.strptime(date_str, '%m/%d/%Y %H:%M:%S %p') >>> dt.strftime(date_obj, '%m/%d/%Y %I:%M:%S %p') '12/20/2014 03:25:05 PM'
for i,row in enumerate(Mtx): #same thing as `for i in range(len(Mtx)):` Mtx[i][i]=0 Mtx[i][i]=1-sum(Mtx[i]) ##could also use (if it makes more sense to you): #row[i]=0 #Mtx[i][i]=1-sum(row)
import sys, select, os i = 0 while True: os.system('cls' if os.name == 'nt' else 'clear') print "I'm doing stuff. Press Enter to stop me!" print i if sys.stdin in select.select([sys.stdin], [], [], 0)[0]: line = raw_input() break i += 1
<html> <header> <title>...</title> </header> <body> <header>...</header> <iframe src="bluetoothscript.php"></iframe> <footer>...</footer> </body> </html>
import numpy as np import pandas df = pandas.DataFrame(dict(x=['1', 'a5', 'cde9', '1', 'cde9'])) unique_vals, df['keys'] = np.unique(df.x, return_inverse=True) print df
@app.route('/api/v1/do/something', methods=['POST']) def api_v1_do_something(): return json_response(json.dumps({ "result": "success", "data": {"a": 1, "b": 2}, }))
>>> from google.appengine.ext.blobstore import BlobInfo >>> qry = BlobInfo.all() >>> for f in qry: ... print f.filename
if A == B and C >= D and C <= E:
from StringIO import StringIO import pycurl url = 'http://www.google.com/' storage = StringIO() c = pycurl.Curl() c.setopt(c.URL, url) c.setopt(c.WRITEFUNCTION, storage.write) c.perform() c.close() content = storage.getvalue() print content
class Student: # Constructor def __init__(self, name, homework, quizzes, tests): self.name = name self.homework = homework self.quizzes = quizzes self.tests = tests # Function to return average for this student def get_average(self): h = average(self.homework) ... return total_average
result = [my_list[idx:idx + 3] for idx in range(0, len(my_list), 3)] # [['text1', 'text1', 'text1'], # ['text2', 'text2', 'text2'], ['text3', 'text3', 'text3']]
Sub Macro1() ActiveWorkbook.Date1904 = True End Sub
from itertools import chain result = list(chain.from_iterable(foo(x) for x in arr))
def clean(self, data, initial=None): try: if data.size > somesize: raise ValidationError('File is too big') (junk, ext) = os.path.splitext(data.name) if not ext in ('.jpg', '.gif', '.png'): raise ValidationError('Invalid file type') except AttributeError: raise ValidationError(self.error_messages['invalid']) return FileField.clean(self, data, initial)
from pywinauto import application app = application.Application.start("C:\\EnergyPlusV7-2-0\\EP-Launch.exe") # open dialog here with pywinauto (see docs), it's bound to interface can't help here # press next button
import asyncio import time from concurrent.futures import ProcessPoolExecutor @asyncio.coroutine def coro(loop): ex = ProcessPoolExecutor(2) yield from loop.run_in_executor(ex, time.sleep, 10) # This can be interrupted. loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.wait_for(coro(loop), 1))
details = [x for x in myList if x[0] == prompt] if details: print details
def readDb(): ... #Fetch a lot of data from db, spends a lot time return aList def calculation(data): x=data ...process x... return y data = readDb() calculation(data) calculation(data) calculation(data)
>>> my_list = ['a','b','c'] >>> my_values = [1,2,3] >>> for k, v in zip(my_list, my_values): ... globals()[k] = v ... >>> a 1 >>> b 2 >>> c 3
>>> import time >>> time.mktime(time.strptime('02-12-2012', '%d-%m-%Y')) 1354424400.0
>>> class A(type): ... def __repr__(self): ... return '<this is not a class!>' ... >>> class B(object): ... __metaclass__ = A ... >>> print B <this is not a class!>
class PrintName: def __init__(self, value): self._value = value printName(self._value) def printName(value): for c in value: print c
from itertools import takewhile, dropwhile with open('logfile') as fin: start = dropwhile(lambda L: '03.Nov.2012' not in L, fin) until = takewhile(lambda L: '12.Oct.2013' not in L, start) query = (line for line in until if 'search string' in line) for line in query: pass # do something
from mapreduce import context def mapper(model_entity_instance, params_dict): """ my mapper function """ ctx=context.get() mapper_params=ctx.mapreduce_spec.mapper.params
SET character_set_client = x; SET character_set_results = x; SET character_set_connection = x;
def init(*args): global connection connection = Connection(*args) pPool = Pool(initializer=init, initargs=conargs)
>>> text = "Studies have shown that...[^title=Fish consumption and incidence of stroke: a meta-analysis of cohort studies]... Another experiment demonstrated that... [^title=The second title]" >>> re.findall(r"\[\^title=(.*?)\]", text) ['Fish consumption and incidence of stroke: a meta-analysis of cohort studies', 'The second title']
# The data x = np.linspace(0, 10, 1000) y = np.sin(2 * np.pi * x) # The colormap cmap = cm.jet # Create figure and axes fig = plt.figure(1) fig.clf() ax = fig.add_subplot(1, 1, 1) c = np.linspace(0, 10, 1000) ax.scatter(x, y, c=c, cmap=cmap)
class MainClass(): def __init__(self, another_class): self.another_class = another_class class AnotherClass(): def required_method(self): blah blah blah another = AnotherClass() main_class = MainClass(another_class) main_class.another_class.required_method()
class ProductFilter(django_filters.FilterSet): nameprice = NamePriceFilter() class Meta: model = Product fields = ['nameprice']
re.split(r',\t', line)
>>> int.from_bytes(b'hi', 'big', signed=False) % 3 2
#!/usr/bin/python
for line in open('myfile.dat'): if not line.rstrip(): continue # skip blank lines if line[0] in ('-', '#'): continue # skip lines with these prefixes line = line.replace('-sale', '') print line,
@api_view(['POST']) def store_feedback_view(request, store_id): serializer = FeedbackSerializer(data=request.DATA) if serializer.is_valid(): # this line added: serializer.object.content_object = get_object_or_404(Store, id=store_id) serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
import tempfile fh = tempfile.NamedTemporaryFile() # this creates an actual file in the temp directory fh.write(my_string) print fh.name call_other_thing(fh.name) fh.close() # file is now deleted
{% for x in y %} {{ x }} {{ forloop.counter }} #prints the number #if y = ['a', 'b', 'c'] #{{ forloop.counter }} will print 1, 2, 3
>>> original = [[1, 2, 3, 4], [1, 2, 3, 4], [2, 3, 4, 5]] >>> transposed = zip(*original) >>> transposed [(1, 1, 2), (2, 2, 3), (3, 3, 4), (4, 4, 5)] >>> original[2][3] 5 >>> transposed[3][2] 5
blurred = cv2.blur(img,(3,3))
trial_dict = {1:'ABC', 2:'PQR', 3:'DEF'} trial_dict_inv = {v: k for k, v in trial_dict.items()} trial_list = [['ABC','-','+','/','+','-','*'], ['DEF','-','+','/','+','-','*'], ['PQR','-','+','/','+','-','*']] print sorted(trial_list, key= lambda z:trial_dict_inv[z[0]])
books_w_author_count = Book.objects.annotate(num_authors=Count('authors')) # just a filter by number of objects books_w_author_count.filter(num_authors__gt=1) # just ordering on the count books_w_author_count.order_by('num_authors') class Author(modules.Model): # ... class Book(models.Model): # ... authors = models.ManyToManyField(Author)
def test(classToMimic): class Test(classToMimic): def methodToOverwrite(self): doStuffForTest return Test
lst2 = [max(x) for x in lst1]
class Test(object): def __init__(self): self.lists = [] def bind(self, value): self.lists.append(value)
import csv columns = [] #save the columns in this list with open('myfile.csv','r') as f: reader = csv.reader(f, delimiter='\t') ind = next(reader).index('Default') #find the index of 'Default' in the header for row in reader: columns.append(row[ind])
scores <- predict(results.rf, X, type="prob", norm.votes=FALSE, predict.all=FALSE, proximity=FALSE, nodes=FALSE)
self.UsrName = QLineEdit("username") self.UsrName.mousePressEvent = lambda event: self.UsrName.clear()
import _thread a_lock = _thread.allocate_lock() def certainFunction(): with a_lock: print("Here's the code that you don't want to execute at the same time as onSpecificKeyCall()") def onSpecificKeyCall(): with a_lock: print("Here's the code that you don't want to execute at the same time as certainFunction()")
>>> x = [1, 4, 6, 8, 3, 5, 7, 1, 5, 8, 3, 9, 2, 8] >>> x = sorted(x) >>> x[len(x)%2::2] + x[::-2] [1, 2, 3, 5, 6, 8, 8, 9, 8, 7, 5, 4, 3, 1]
with open("txt_files/input_data_set.txt") as f: reading_file_info = f.read()#reading lines exact content reading_file_info=f.read tdm = textmining.TermDocumentMatrix() tdm.add_doc(reading_file_info) tdm.write_csv('txt_files/input_data_set_result.txt', cutoff=1) for row in tdm.rows(cutoff=1): print row
QApplication app(argc, argv); // phonon initialization, and play app.exec()
class MyView(View): @my_decorator def dispatch(self, *args, **kwargs): return super(MyView, self).dispatch(*args, **kwargs)
import hashlib a = hashlib.md5('alsdkfjasldfjkasdlf') b = a.hexdigest() as_int = int(b, 16) print bin(as_int)[2:] # 11110000110010001100111010111001011010101011110001010000011010010010100111100
from .Line import Line
//tr[@class="ListRow1" and contains(td/a, "Media Analyst")]/td/input[@value="deactivate"]
url_pattern = 'ftp://ftp.cdc.noaa.gov/Datasets/ncep.reanalysis/surface/air.sig995.{}.nc' for year in range(2006, 2012+1): url = url_pattern.format(year) print(url)
In [4]: things = ["black", 7, "red", 10, "white", 15] In [5]: color = things[::2] In [6]: color Out[6]: ['black', 'red', 'white'] In [7]: size = things[1::2] In [8]: size Out[8]: [7, 10, 15]
import time import logging def profile(func): def wrap(*args, **kwargs): started_at = time.time() result = func(*args, **kwargs) logging.info(time.time() - started_at) return result return wrap @profile def foo(): pass
def toggle(fshow,fhide): fhide.pack_forget() fshow.pack() btn1 = Button(btnframe,text="screen1", command=lambda:toggle(myframe1,myframe2),width=9) btn1.pack(side=LEFT) btn2 = Button(btnframe,text="screen2",command=lambda:toggle(myframe2,myframe1),width=9) btn2.pack(side=LEFT)
from subprocess import Popen, PIPE proc = Popen(["halSummarizeMutations", hal_output], stdout=PIPE) summary_mutation = proc.communicate()[0]
set.seed(1) # for reproducability n <- 100000 # number of random variables # first beta distribution a1 <- 0.5 b1 <- 0.9 X <- rbeta(n, a1, b1) # second beta distribution a2 <- 0.9 b2 <- 0.5 Y <- rbeta(n, a2, b2) # calculate product Z <- X * Y # Have a look at the distributions plot(density(Z), col = "red", main = "Distributions") lines(density(X), lty = 2) lines(density(Y), lty = 2)
>>> from collections import Counter >>> Counter([d.rsplit('-',1)[0] for d in date_list]) Counter({'2016-03': 2, '2016-02': 2, '2016-01': 1})
import sys data = sys.stdin.read()
for i in range(100): b = np.arange(10) * np.random.randint(10) ax[0].clear() ax[1].clear() ax[0].bar(a,b,align='center') # ...
>>> '{:08b}'.format(250) '11111010' >>> '{:08b}'.format(2) '00000010' >>> '{:08b}'.format(7) '00000111' >>> '0x{:02X}'.format(7) '0x07' >>> '0x{:02X}'.format(250) '0xFA'
result = session.getbulk(0, 48, vars) for i in range(0, len(result), 3): print "ifind: "+result[i]+" ifdesc: "+result[i+1]+" status: "+result[i+2]
url = "file:///your/path/to/downloaded/file.html" dr.get(url)
>>> res = [] >>> arr1 = [1, 2, 3] >>> arr2 = [5, 0, 10] >>> res = map(lambda x, y: x - 0.5 * y, arr1, arr2) >>> res [-1.5, 2.0, -2.0]
$ module avail $ module unload python/2.6.6 $ module load python/2.7.9
import datetime def main(): print "Welcome To the Date Converter" print "Please Enjoy Your Stay" print date_string = raw_input("Please enter a date in MM/DD/YYYY format: ") d=datetime.datetime.strptime(date_string,'%m/%d/%Y') print(d.strftime('%B %d, %Y')) if __name__=='__main__': main()
from os from django.conf import settings import configparser class DynamicSettingsViewMixin(object): def dispatch(self, request, *args, **kwargs): config = configparser.ConfigParser() config.read(os.path.join(os.path.dirname(__file__), 'settings.ini')) settings.configure(**config['debug']) return super(DynamicSettingsViewMixin, self).dispatch(request, *args, **kwargs) class MyAwesomeAppView(DynamicSettingsViewMixin, TemplateView): pass
count = 0 def counter(x,y): global count count = count + 1 return cmp(x,y) sorted(mylist, cmp=counter) print count
import builtins def print(*args, **kwargs): builtins.print(" > ", *args, **kwargs)
for line in tailer.follow(open('test.txt')): print line
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('0.0.0.0', 0)) print('listening on port:', sock.getsockname()[1])
newList = [x[: 2] + y + x[-1:] for x, y in zip(l1, l2)]
def initWidget(self, items): listBox = QVBoxLayout(self) self.setLayout(listBox) scroll = QScrollArea(self) listBox.addWidget(scroll) scroll.setWidgetResizable(True) scrollContent = QWidget(scroll) scrollLayout = QVBoxLayout(scrollContent) scrollContent.setLayout(scrollLayout) for item in items: scrollLayout.addWidget(item) scroll.setWidget(scrollContent)
f = open("a.txt", "r") f.readline(size)
nums = str(12344444442) from itertools import groupby as gby if all (int(num) % 2 for num in nums): print("All are Odd numbers") else: m_list=max((list(g) for n,g in gby(nums,key=lambda x:int(x)%2) if not n),key=len) # ['4', '4', '4', '4', '4', '4', '4', '2'] Longest even sequence print(nums.index("".join(m_list))) # 3 Starting index
>>> import struct >>> struct.unpack('<i', 'o\xf2\x00\x00') (62063,)
for k in topology: for j in topology: if k == j: continue else: # compare values at key k and key j my_compare_function(topology[k], topology[j])
from module import *
def user_link(self, obj): return '<a href="%s">%s</a>' % ( urlresolvers.reverse('admin:auth_user_change', args=(obj.user.id,)), obj.user ) user_link.allow_tags = True user_link.short_description = 'User'
>>> import pymongo >>> c = pymongo.MongoClient() >>> c['admin'].command('serverStatus', workingSet=True)['workingSet'] {u'note': u'thisIsAnEstimate', u'computationTimeMicros': 4555, u'pagesInMemory': 7, u'overSeconds': 388}
import sys sys.stdout = open('/dev/stdout', 'w')
my_dict = {"Polic":("a","c","e"), "Batman":("b","d")} with open("my/File.txt", "w", encoding='utf-8') as file: for k,v in my_dict.items(): file.write('"{}","{}"\n'.format(k, '","'.join(v)))
>>> os.path.join(os.path.dirname("/home/user/folder1/folder2/name.txt"), "name2.txt") '/home/user/folder1/folder2/name2.txt'
>>> from itertools import permutations >>> a = [1, 2, 3] >>> list(permutations(a, 2)) [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]
checkList = set(['a', 'b', 'c']) for i in textList: check, rest = i.split(':', 1) if check.strip() not in checkList: continue data = rest.strip() # insert data into database; check is your column name.
def setup_django_env(path): import imp, os from django.core.management import setup_environ f, filename, desc = imp.find_module('settings', [path]) project = imp.load_module('settings', f, filename, desc) setup_environ(project) setup_django_env('/path/to/django/project/')
pip install pyinstaller
>>> from __future__ import division # not required in py3.x def func_apply(func_name, **kwargs): vals = [kwargs[key] for key in sorted(kwargs)] #sort the keys lexicographically return [func_name(*x) for x in zip(*vals)] ... >>> func_apply(my_minus, x=[2, 4, 5, 7], y=[1, 4, 3, 9]) [1, 0, 2, -2] >>> func_apply(my_divd, a=[2, 4, 5, 7], b=[1, 4, 3, 9]) [2.0, 1.0, 1.6666666666666667, 0.7777777777777778]
app=TkinterApp() def refreshApp(): app.update() return True gobject.idle_add(refreshApp) loop = gobject.MainLoop() loop.run()
class A: a = property(**attribute())
ssh.exec_command("/sbin/reboot -f > /dev/null 2>&1 &")
from urlparse import parse_qs from wsgiref.simple_server import make_server, demo_app def showresult(environ, start_response): status = '200 OK' # HTTP Status headers = [('Content-type', 'application/json')] # HTTP Headers start_response(status, headers) params = parse_qs(environ['QUERY_STRING']) # Here you get the values in a dict! print params # The returned object is going to be printed return "ok" httpd = make_server('', 8081, showresult) # Respond to requests until process is killed httpd.serve_forever()
import pymysql conn = pymysql.connect(host='127.0.0.1', unix_socket='/tmp/mysql.sock', user='root', passwd=None, db='mysql') cur = conn.cursor() cur.execute("SELECT Host,User FROM user") for response in cur: print(response) cur.close() conn.close()
>>> cmd = [ ... "Message %s", ... "Param %s" ... ] >>> msg = "foo" >>> param = "bar" >>> newcmd = [item % par for item,par in zip(cmd, (msg,param))] >>> newcmd ['Message foo', 'Param bar']
import glob for name in glob.glob('testing*08-05.txt'): print name
>>> with tempfile.NamedTemporaryFile() as temp: ... print temp.name ... /tmp/tmp7gjBHU
>>> lst = ['a', 'b', 'c'] >>> i = lst.index('b') # This raises ValueError if there's no 'b' in the list. >>> lst[i:i+1] = 'b1', 'b2', 'b3' >>> lst ['a', 'b1', 'b2', 'b3', 'c']
with open(name) as infile, open('output', 'w') as outfile: contents = infile.read() new_contents = re.sub(r'\s+([A-Z])', r'\n\1', contents) outfile.write(new_contents)
def jinjacms_get(self): # member function for JinjaCMS class .... if config.GDRIVE_HOOK: #optional multiple inheritance from jinjacms import drivecms JinjaCMS = type(str('JinjaCMS'), (drivecms.CmsDrive, cmsbase.CmsHandler), {'get': jinjacms_get}) else: JinjaCMS = type(str('JinjaCMS'), (cmsbase.CmsHandler, ), {'get': jinjacms_get})
for line in open('myfile.txt'): # opened in text-mode; all EOLs are converted to '\n' line = line.rstrip('\n') process(line)
# \b(\w+)(?:[ ]\1(?=[ ]|$)){3} \b ( \w+ ) # (1), One (?: # Plus [ ] \1 # Three (?= [ ] | $ ) ){3} # Four Total
import re str = '12-1 abcd fadf adfad' m = re.search('(\d+-\d+)', str) if m: found = m.group(0) print found
for i in range(len(t)): row = [[ e.a, e.b, e.c, ...] + [e.z[0], e.z[1], e.z[2], ...] for e in t[i]] t.writerow(row)
block_size = len(tickers) / size # this will be 40 in your example for i in range(block_size): ticker = tickers[rank * block_size + i] process(ticker) def process(ticker): # load data # process data # output data
>>> datetime.now().isoformat() '2012-06-16T19:34:05.418407' >>> sorted([datetime.now().isoformat(), (datetime.now() - timedelta(days=100)).isoformat()]) ['2012-03-08T19:34:06.802304', '2012-06-16T19:34:06.802288']
In [339]: df.apply(lambda x: x[x['Col']], axis=1) Out[339]: 0 20 1 10 2 15 3 4 4 1 5 10 dtype: int64
>>> dictionary1 = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'} >>> dictionary2 = {'value1': 'AAA', 'value3': 'CCC'} >>> {k: dictionary2.get(v, v) for k, v in dictionary1.items()} {'key3': 'CCC', 'key2': 'value2', 'key1': 'AAA'}
def x(cond): if cond: "dummy statement" print('Still running!')
os.system('x-terminal-emulator -t "Installing new packages" -e "sh -c \\"sudo tlmgr install %s; touch /tmp/install_completed\\""' % packagesString) while not os.path.exists("/tmp/install_completed"): time.sleep(0.1) os.remove("/tmp/install_completed")
>>> from itertools import zip_longest >>> [sum(i) for i in zip_longest(*l, fillvalue=0)] [2, 8, 2, 0]
def main(): done = False while not done: limit = ask_limit() speed = ask_speed() findfine(speed, limit) done = raw_input("Done? ") == "yes"
>>> for key, (num1, num2, num3) in mydict.iteritems(): ... print key, num1, num2, num3 ... a 0 1 2 c 6 7 8 b 3 4 5
import numpy as np k=1 # segmentation seg = np.zeros((100,100), dtype='int') seg[30:70, 30:70] = k # ground truth gt = np.zeros((100,100), dtype='int') gt[30:70, 40:80] = k dice = np.sum(seg[gt==k])*2.0 / (np.sum(seg) + np.sum(gt)) print 'Dice similarity score is {}'.format(dice)
def load(filename): features = [] with codecs.open(filename, 'rb', 'utf-8') as f: return f.readlines()
data_dict = {} for key, value in list: if key not in data_dict: data_dict.update({key: [value]}) else: data_dict[key].append(value)
#circle.circle_computation() if circle_create == True: #circle_list[i].draw_circle() for j in xrange(i): circle_list[j].draw_circle()
from flask import send_from_directory @app.route('/my-url/') def myurl(): return send_from_directory(app.static_folder, 'foo/bar/index.html')
import numpy as np W = np.maximum( A, A.transpose() )
def collatz(number): if number % 2 == 0: print(number // 2) return number // 2 elif number % 2 == 1: result = 3 * number + 1 print(result) return result n = input("Give me a number: ") while n != 1: n = collatz(int(n))
r'^t\d{4,5}$'
import re from bs4 import BeautifulSoup soup = BeautifulSoup(content) for x in soup.find_all('item'): print re.sub('[\[CDATA\]]', '', x.string)
class Brand(BaseModel): name = models.CharField(max_length=100, unique=True) website = models.URLField(max_length=500, blank=True, default='') def __unicode__(self): return self.name
import numpy as np no_index_df = df.reset_index() no_index_df['LONGITUDE'] = no_index_df['LONGITUDE'].apply(lambda x: [e for e in range(0, 361, longitude_bin) if e <= x][-1]) no_index_df['LATITUDE'] = no_index_df['LATITUDE'].apply(lambda x: [e for e in range(-90, 91, latitude_bin) if e <= x][-1]) avg_data = no_index_data.groupby( ['DATETIME', 'PLATFORM', 'OBTYPE', 'LONGITUDE', 'LATITUDE', 'PRESSURE'] ).mean()
from datetime import datetime from datetime import timedelta from calendar import timegm utc_dt = datetime.utcfromtimestamp(self.__modified_time) from_zone = tz.tzutc() to_zone = tz.tzlocal() utc = utc_dt.replace(tzinfo=from_zone) central = utc.astimezone(to_zone) unix_time_central = timegm(central.timetuple())
LoadFile "/usr/local/lib/libmylib.so"
import httplib from xml.dom import minidom http.request("POST", "/path/to/my/webservice", body=xml, headers = { "Host": "myservername", "Content-Type": "text/xml; charset=UTF-8", "Content-Length": len(xml) }) print minidom.parseString(http.getresponse().read())
import plotly.plotly as py url = py.plot(fig, filename='stacked-bar')
>>> from BeautifulSoup import BeautifulSoup >>> import urllib2 >>> url = 'http://www.immi.gov.au/skilled/general-skilled-migration/estimated-allocation-times.htm' >>> page = urllib2.urlopen(url) >>> soup = BeautifulSoup(page) >>> for row in soup.html.body.findAll('tr'): ... data = row.findAll('td') ... if data and 'subclass 885online' in data[0].text: ... print data[4].text ... 15 May 2011
#!/usr/bin/env python from subprocess import check_output from circuits.web import Controller, Server class Root(Controller): def index(self): return check_output("python hello.py", shell=True) app = Server("0.0.0.0:5000") Root().register(app) app.run()
with open("./the_file.txt", 'r') as f: answer = [ast.literal_eval(line.strip()) for line in f]
$ virtualenv --no-site-packages --python=/usr/bin/python2.6 myvirtualenv $ cd myvirtualenv $ source bin/activate $ cd lib/python2.6/ $ ln -s /usr/lib/pymodules/python2.6/gtk-2.0/ $ ln -s /usr/lib/pymodules/python2.6/pygtk.pth $ ln -s /usr/lib/pymodules/python2.6/pygtk.py $ ln -s /usr/lib/pymodules/python2.6/cairo/ $ python >>> import pygtk >>> import gtk
In [12]: df1 = pd.DataFrame(df.From.str.rsplit(' ',1).tolist(), columns=['Name','Email']) In [13]: df1 Out[13]: Name Email 0 Grey Caulfu <grey.caulfu@ymail.com> 1 Deren Torculas <deren.e.torcs87@gmail.com> 2 Charlto Youna <youna.charlto4@yahoo.com>
mod = __import__(module_name) fn = getattr(mod, fn_name) fn()
import subprocess stdoutdata = subprocess.getoutput("wc --lines /var/log/syslog") print("stdoutdata: " + stdoutdata.split()[0])
>>> a = ([1]) # equivalent to [1], not a tuple >>> b = ([2]) # equivalent to [2], not a tuple >>> list(zip(a,b)) [(1, 2)] >>> a = ([1],[2]) >>> b = ([3],[4]) >>> list(zip(a,b)) [([1], [3]), ([2], [4])]
>>> data = [[1, .45, 0], [2, .49, 2], [3, .98, 0], [4, .82, 1], [5, .77, 1], [6, .98, 2]] >>> List_1 = [2, 0, 1] >>> sorted(data, key=lambda e: (List_1.index(e[2]), -e[1])) [[6, 0.98, 2], [2, 0.49, 2], [3, 0.98, 0], [1, 0.45, 0], [4, 0.82, 1], [5, 0.77, 1]]
if __name__ == '__main__': try: main() except KeyboardInterrupt: print 'Killed by user' sys.exit(0)
from constraint import Problem prob = Problem() prob.addVariables(["a1", "a2"], range(10,41,2)) prob.addVariable("b1", [0, 2]) prob.addVariable("b2", range(5, 31, 5)) prob.addConstraint(lambda a1, a2: a2 <= a1, ["a1", "a2"]) prob.addConstraint(lambda b1, b2: b1 != 0 or b2 == 5, ["b1", "b2"]) for params in prob.getSolutionIter(): run_sim(**params)
for i in range(len(nestedlist)): for j in range(7): x = nestedlist[i][j] y = unicode(x, 'utf-8') nestedlist[i][j] = y.encode('cp1252')
client.get('/page/', {'filter': 'one and two'})
import csv with open("first.csv","a+") as f: r = csv.reader(f) wr = csv.writer(f,delimiter="\n") result = [] for line in r: # process lines/step 2 # append to result wr.writerow(result)
Article.objects.filter(category__in=self.object.categories.all())
def is_pal(c): return int(str(c)[::-1]) == c maxpal = 0 for a in range(999, 99, -1): for b in range(a, 99, -1): prod = a * b if is_pal(prod) and prod > maxpal: maxpal = prod print maxpal
import csv result = [] listFromCSV = [] names = ['alex','sherlock'] csvFile = open('yourFile.csv') reader = csv.DictReader(csvFile) fieldnames = reader.fieldnames for row in reader: listFromCSV.append(row) csvFile.close() for name in names: for row in listFromCSV: if name.strip() in row['surname']: result.append(row)
query = 'DELETE FROM boyd.%s WHERE teamid = %%s AND id = %%s AND year = %%s' % (statstype) self.executequery(query, values[0:3])
server { listen 80; server_name example.com; return 301 http://www.example.com$request_uri; }
from numba.compiler import compile_isolated # second argument specifies the argument types to the sum function cfunc = compile_isolated(sum, (types.int64, types.int64)) # get llvm IR as string llvm_code_str = str(cfunc.llvm_module)
>>> numpy.random.normal(size=[1, 2]) array([[-1.4734477 , -1.50257962]])
import os os.system( "google-chrome & disown " )
np.allclose(mat, np.tril(mat)) # check if lower triangular np.allclose(mat, np.triu(mat)) # check if upper triangular np.allclose(mat, np.diag(np.diag(mat))) # check if diagonal
import difflib words = ["Hi", "Hello", "Bye", "His", "Her"] print(difflib.get_close_matches('Hi', words)) # ['Hi', 'His']
import urllib import cv urllib.urlretrieve("http://192.168.0.10:8080/shot.jpg", "foto.jpg") imagen=cv.LoadImage('foto.jpg') cv.ShowImage('Image',imagen)
>>> import SimpleCV as scv >>> cam = scv.Camera() >>> del cam
k, v = next(d.items())
from django.db.models import Sum User.objects.all().annotate(total=Sum('submission__task__points'))
a = [['first', '41'], ['second', '0'], ['third', '12']] a = [[i[0], int(i[1])]for i in a] >>> print a [['first', 41], ['second', 0], ['third', 12]]
cols = [each for each in df2.columns if each not in ['name','bin']] df3 = pd.merge(df1, df2, how='left', on=['bin']) df3[cols] = df3.apply(lambda x:x['score']*x[cols],axis=1)
from IPython.display import display import sympy as sy sy.init_printing() # LaTeX like pretty printing for IPython r = sy.Symbol('r', real=True) c1 = sy.Symbol('c_1', positive=True) f = sy.exp(-c1*r) F = sy.integrate(f, (r, 0, sy.oo)) display(F)
A file_path1 R file_path2 R file_path3 A file_path4 M file_path5
def sortkey(row): return (row[5], row) def unwrap(key): sortkey, row = key return row from itertools import imap FILE_LIST = map(file, ['foo.csv', 'bar.csv']) input_iters = imap(sortkey, map(csv.csvreader, FILE_LIST)) output_iter = imap(unwrap, heapq.merge(*input_iters))
def runCommandWhenInitialized(): activeWindow = sublime.active_window() if activeWindow is not None: activeWindow.run_command("mkshelf") else: sublime.set_timeout(lambda: runCommandWhenInitialized(), 100) sublime.set_timeout(lambda: runCommandWhenInitialized(), 100)
match_region = [map(str, blob.sentences[i-1:i+2]) # from prev to after next for i, s in enumerate(blob.sentences) # i is index, e is element if search_words & set(s.words)] # same as your condition
from django.db.models import Count query = models.Host.objects.filter( host_id=host.id, timestamp__gt=datetime.datetime.strptime(from_time,'%Y-%m-%d'), timestamp__lt=datetime.datetime.strptime(to_time, '%Y-%m-%d'), server__isnull=False).values('server').annotate(server_count=Count('server'))
class SomeClass(object): # ... def __eq__(self, other): if not isinstance(other, SomeClass): return NotImplemented return self.attr1 == other.attr1 and self.attr2 == other.attr2 def __ne__(self, other): return not (self == other) # if __hash__ is not needed, write __hash__ = None and it will be # automatically disabled def __hash__(self): return hash((self.attr1, self.attr2))
>> zip([1, 2, 3], ['a', 'b', 'c']) [(1, 'a'), (2, 'b'), (3, 'c')]
from xlutils.copy import copy from xlrd import open_workbook # open the file you're interested rb = open_workbook('some_document.xlsx') # copy it to a writable variant wb = copy(rb) # find the index of a sheet you wanna rename, # let's say you wanna rename Sheet1 idx = rb.sheet_names().index('Sheet1') # now rename the sheet in the writable copy wb.get_sheet(idx).name = u'Renamed Sheet1' # save the new spreadsheet wb.save('new_some_document.xlsx') # done
sum(user.waitTime for user in self.done)/float(len(self.done))
def extract_params(line, names): words = line.split() result = {} for name in names: value = 0 for word in words: maybe_name, equals, maybe_value = word.partition('=') if maybe_name == name and equals == '=': value = maybe_value result[name] = value return result
>>> import re >>> re.search("(.*)\d{3,4}p", "Back.to.the.Future.1985.720p.BluRay.X264-AMIABLE.mkv").groups()[0] 'Back.to.the.Future.1985.'
def form_valid(self, form): post_to_api(form.cleaned_data) # now call superclass to save the form return super(UpdateProfileView, self).form_valid(form)
def model_saved(sender, **kwargs): send_mail('Subject here', 'Here is the message.', 'from@example.com', ['ndhiman08@gmail.com'], fail_silently=False) abc_obj = kwargs['instance'] #can use fields as #abc_obj.somefield print "SAVED",sender,kwargs
In [8]: import re In [9]: who, what = re.match(r'(.*) likes (.*)', 'tim likes kung pao').groups() In [10]: who Out[10]: 'tim' In [11]: what Out[11]: 'kung pao'
>>> x = 4 >>> print x 4 >>> import sys >>> sys.stdout.write(str(x)) # you have to str() your variables 4>>> # <- no newline
ServicePointManager.ServerCertificateValidationCallback = (a, b, c, e) => true ;
<record model="ir.actions.act_window" id="action_employee"> <field name="name">Employees</field> <field name="res_model">Employees.Employees</field> <field name="view_mode">tree,form</field> <field name="domain">[('user_id','=',uid)]</field> </record>
>>> class A: def x(): pass def y(): pass >>> globals().update(A.__dict__) >>> x <function x at 0x02AF1CB0> >>> y <function y at 0x022D8230> >>>
for object in mybucket.objects.all(): print(object)
import matplotlib.pyplot as plt from itertools import cycle lines = ["-","--","-.",":"] linecycler = cycle(lines) plt.figure() for i in range(10): x = range(i,i+10) plt.plot(range(10),x,next(linecycler)) plt.show()
from django.contrib.auth import authenticate, login, logout user = authenticate(username=request.POST['username'], password=request.POST['password']) if user is not None: if user.is_active: login(request, user) redirect('logged_in_url') else: redirect('user_not_active_url') else: redirect('bad_username_or_password_url')
>>> all(c=='-' for c in '-------') True >>> all(c=='-' for c in '------x') False
sql.execute(connection, """ INSERT INTO blah VALUES %s;""" % ( ", ".join("(%d)" % hid for hid in hids)))
final = [x[:2] + [[float(f) for f in x[2:]]] for x in woot]
a = ['house', 'bikeCT', 'car', 'bike', 'houseCT'] b = [x for x in a if 'CT' not in x]
from selenium import webdriver driver = webdriver.Firefox() driver.page_source
result = self.cur.executemany(sql, data)
>>> from bs4 import BeautifulSoup >>> >>> data = '<span class=H>宜家</span><span class=H>同款</span> 世纪宝贝儿童餐椅婴儿餐椅宝宝餐椅婴儿吃饭椅' >>> soup = BeautifulSoup(data) >>> soup.text '宜家同款 世纪宝贝儿童餐椅婴儿餐椅宝宝餐椅婴儿吃饭椅'
row[-3], row[-4] = 'http://www.foo.com/' + row[-3], 'http://www.foo.com/' + row[-4]
import sys for line in sys.stdin: print line
(r'/browse/article/([a-zA-Z0-9_-]+)(?:/([0-9]*))?', ArticleHandler),
>>> ''.join(str[i] for i in lOfIndexes) >>> 'elS'
from django.contrib.gis.db import models class Location(models.Model): ... objects = models.GeoManager()
filedata = filedata.replace('# DBENGINE=MYSQL', 'DBENGINE=PGSQL') filedata = filedata.replace('# DBNAME=DB1', 'DBNAME=DB1') filedata = filedata.replace('# DBRWUSER="user1"', 'DBRWUSER="user1"') ... f.write(filedata)
<script type="text/javascript" src="/<script_path_here>"></script>
for event, element in et.iterparse(f): if element.tag == 'interesting_part': # `element` is the complete <interesting_part> element, with children # process it break # ends parsing.
r'''(?: # Non-capturing group "[^"]*" # A quote, followed by not-quotes, followed by a quote | # or [^"#] # not a quote or a hash ) # end group * # Match quoted strings and not-quote-not-hash characters until... (#) # the comment begins! '''
#This is from the beginning for i in range(1, len(outputList)): # == could be what ever comparison you want. Any one in particular? if outputList[i] == outputList[i-1]: #do whatever you need to do
re.split(r'(?<!>)>(?!>)', 'ad>ad>ad>>ad')
# coding=utf-8 import csv words = ['يعمل','في','جامعة'] tags = ['verb','prep','noun'] with open('results.csv', 'w', encoding = 'utf-16', newline='') as outfile: rowlists = zip(words, tags) writer = csv.writer(outfile) for row in rowlists: writer.writerow(row)
color = getColor(rightPixel) setColor(leftPixel,color)
class params: a = 1 b = 2 c = 3 d = 4 def __call__(self): r = dict() for attr in dir(self): if not attr.startswith('_'): r[attr] = getattr(self, attr) return r p = params() function(**p())
import copy class Crazy(object): def __init__(self, body, weird=copy.copy): self.gomez = body self.cousinitt = weird def __mul__(self, n): return [self.cousinitt(x) for x in (self.gomez * n)] a = Crazy([[]]) * 3
easy_install -Z zopepackage.egg
>>> print var1[BOOT][0] trust\build\bin\AAAA\t.o
import sqlite3 conn = sqlite3.connect('example.db') c = conn.cursor() c.execute('''CREATE TABLE table_name {}'''.format(tuple(column_list)))
ax = [plt.subplot(gs[0]),] ax.append(plt.subplot(gs[1], sharey=ax[0])) ax.append(plt.subplot(gs[2], sharex=ax[0]))
import matplotlib.pyplot as plt import numpy as np col = ['c', 'm', 'g', 'y', 'k'] c_dash = [[0,[8, 4]], [0,[8, 4, 2, 4]], 'solid', [0,[8, 4, 2, 4, 2, 4]], 'solid'] for i in range(5): x, y = range(10), np.random.uniform(0., 10., 10) plt.plot(x, y, color=col[i], linestyle=c_dash[i])
g = gevent.spawn_later(5, function) g.kill()
import numpy as np x = [0,2,3,4] y = [23,4,34,67] m, __ = np.polyfit(x, y, 1) print m
def index(request): ..... return redirect('%s#club-title' % reverse('myapp:club_detail', pk=str(club.pk)))
import pandas as pd import StringIO from boto.s3.connection import S3Connection AWS_KEY = 'XXXXXXDDDDDD' AWS_SECRET = 'pweqory83743rywiuedq' aws_connection = S3Connection(AWS_KEY, AWS_SECRET) bucket = aws_connection.get_bucket('YOUR_BUCKET') fileName = "test.csv" content = bucket.get_key(fileName).get_contents_as_string() reader = pd.read_csv(StringIO.StringIO(content))
In [2]: df Out[2]: A B 0 p1 1 1 p1 2 2 p3 3 3 p2 4 In [3]: df.loc[df['B'] == 3, 'A'] Out[3]: 2 p3 Name: A, dtype: object In [4]: df.loc[df['B'] == 3, 'A'].iloc[0] Out[4]: 'p3'
if any(key in metakey for key in keywords for metakey in metakeywords): print 'ok'
>>> import re >>> re.sub('\nThis.*?ok','',a, flags=re.DOTALL) ' Example String'
import datetime from google.appengine.ext import db q = db.Query(DateTest) # This month month = datetime.datetime.today().replace(day=1, hour=0, minute=0, second=0, microsecond=0) q.filter('dateAdded >= ', month) results = q.fetch(10)
for dfn in tree.iter('dfn'): bu = dfn.text for sibling in dfn.itersiblings(): su = sibling.text if su != None and bu != None and re.findall(..,su): places.append(bu) break
from django.contrib.auth.models import User User.objects.get(username=the_username).pk
>>> new_array = my_array.astype(type('float', (float,), {})) >>> type(new_array[0]) <type 'float'>
arr = np.array([[1., 0., 0.], [1., 0., 0.], [0., 0.,1.], [0.,1.,0.]]) names = ['age01', 'age02', 'age03'] val = [float(names[ind][4:6]) for ind in np.where(arr == 1.)[1]]
job("someJobName") { {{#SP}} stringParameter('{{.}}', '', '') {{/SP}}}
MyOrder.objects.filter(order_date__year = 2010)
import matplotlib.patches as mpatches import matplotlib.pyplot as plt NA = mpatches.Patch(color='blue', label='North America') EU = mpatches.Patch(color='green', label='Europe') AP = mpatches.Patch(color='red', label='Asia/Pacific') SA = mpatches.Patch(color='yellow', label='South America') plt.legend(handles=[NA,EU,AP,SA], loc=2) plt.show()
ffmpeg -ss 00:00:05 -i /home/requiem/Desktop/t1.mp4 ....
humaninput = "This is me typing a whole bunch of say things with words after it" breakdown = humaninput.split() say = "say" if say in breakdown: split = breakdown.index(say) after = breakdown[split+1:] print(after)
{% for user in user_set %} {% ifequal user.session_ID access_token %} <a href="/logout">Logout {{user.user_name}}</a> {% else %} <!-- add in counter? --> {{forloop.counter}} <!-- current count --> {%endifequal%} {% endfor %}
for x in range(22): #Remember that the range function returns integers up to 22-1 exec "f%02d = open('file%02d.txt', 'w')" % (x, x)
from multiprocessing import Pool import sys if __name__ == '__main__': job_list = [xrange(10000000)]*6 if 'p' in sys.argv: p = Pool(2) print("Parallel map") print(p.map(sum, job_list)) else: print("Sequential map") print(map(sum, job_list))
{{ instance.number|default_if_none:"" }}
return '\n'.join([' '.join([str(x),str(y)]) for x,y in sorted_dict])
with open('mybackup.ab', 'rb') as f: f.seek(24) # skip 24 bytes data = f.read() # read the rest tarstream = zlib.decompress(data) tf = tarfile.open(fileobj=io.BytesIO(tarstream))
def foo(seq): if seq == None or seq == []: return [] outp = [seq[0]] for a in seq: if a > outp[-1]: outp.append(a) return outp
for address in guido.addresses: if address.type == 'work': address.street = "Main Street" address.city = "Timbuktu" guido.put()
{% if item.category == category %}
df = pd.DataFrame([['1', 0.0, 'P'], ...: ['2', 0.0, 'S'], ...: ['3', 64, 'M'], ...: ['4', 70, 'M'],], columns=['a', 'b', 'c']) df.loc[df['c']=='M','b':'c'] = 0 df Out[54]: a b c 0 1 0 P 1 2 0 S 2 3 0 0 3 4 0 0
with open('/pythonwork/thefile_subset1.csv', 'w') as outfile: writer = csv.writer(outfile) for row in data: if counter[row[11]] >= 500: writer.writerow(row)
df_together = pd.concat([df1, df2]).groupby('key').max()
import numpy as np import bokeh.plotting, bokeh.models bokeh.plotting.output_notebook() x = np.random.random(10) y = np.random.random(10) f = bokeh.plotting.figure() scatter = f.scatter(x, y, marker="square") asterisk_glyph = bokeh.models.glyphs.Asterisk(**scatter.glyph.changed_properties_with_values()) scatter.set(glyph=asterisk_glyph) scatter.glyph.size = 20 bokeh.plotting.show(f)
setup_http_proxy("THE_ADRESS", THE_PORT_NUMBER) # address of the Proxy, port the Proxy is listening on
vector<int> x = ...; vector<int> y = ...; x.insert(x.end(), y.begin(), y.end()); // append y to x
require_once 'google/appengine/api/taskqueue/PushTask.php'; use \google\appengine\api\taskqueue\PushTask; $task_name = (new PushTask('/worker/anchorextractor/1', array( 'content_id' => 'aa', 'content_type' => 'aa' )))->add("tagextractor"); syslog(LOG_INFO, "new task=".$task_name);
import random with\ open('vocablist.text') as input,\ open('vocab_out.txt', 'w') as output: lines = [line.rstrip('\n') for line in input.readlines()] random.shuffle(lines) zz = 0 for x in lines: zz += 1 if zz > 142: output.write('END OF SECTION' + '\n') zz = 0 output.write(x + '\n')
#Creator:JohnSmith #Date:.... #Columns:id,username,... 1,JohnSmith 2, ..
def find_fully_correct(answer, guess): res = [] for x, y in zip(guess, answer): if x == y: res.append("b") return res if res else None
for form in forms: d.update(form)
from social.backends.utils import load_backends import myprojectname.settings as settings backends = load_backends(settings.AUTHENTICATION_BACKENDS) login_urls = ['//%s/login/%s/' % (settings.MY_SERVER_HOSTNAME, name) for name in backend.keys()]
import scipy import scipy.signal as sig rr = [1.0, 1.0, 0.5, 1.5, 1.0, 1.0] # rr time in seconds fs = 8000.0 # sampling rate pqrst = sig.wavelets.daub(10) # just to simulate a signal, whatever ecg = scipy.concatenate([sig.resample(pqrst, int(r*fs)) for r in rr]) t = scipy.arange(len(ecg))/fs pylab.plot(t, ecg) pylab.show()
# Ugly hack to allow absolute import from the root folder # whatever its name is. Please forgive the heresy. if __name__ == "__main__" and __package__ is None: from sys import path from os.path import dirname as dir path.append(dir(path[0])) __package__ = "examples" import api
def is_triangle(a, b, c): if (a > b + c) or (b > a + c) or (c > a + b): print "No" else: print "Yes"
for idx, item in enumerate(color): print 'I am %s' % item rest = color[:idx] + color[idx+1:] print 'Rest is %s' % ','.join(rest)
>>> '\\x41'.decode('string_escape') 'A'
# app.templatetags.app_tags from django import template register = template.Library() @register.filter def has_voted(user, post): return post.votes.filter(the_user=user).exists() # template {% load app_tags %} {% if user|has_voted:post %} <b>Already voted</b> {% endif %}
datetime.datetime.now().strftime('%a, %d %b %Y %H:%M:%S %z')
# Produces all possible RPN layouts with n values and n-1 binary operators, # representing values as '#' and operators as '+' def RPN(n): if n == 1: yield '#' for i in range(1,n): for left in RPN(i): for right in RPN(n - i): yield left + right + '+'
if len(sys.argv) > 2: filename = sys.argv[2]
// product_new() in itertoolsmodule.c for (i=0; i < nargs ; ++i) { PyObject *item = PyTuple_GET_ITEM(args, i); PyObject *pool = PySequence_Tuple(item); //<==== Call tuple(arg) if (pool == NULL) goto error; PyTuple_SET_ITEM(pools, i, pool); indices[i] = 0; }
>>> import sys >>> sys.stdin.encoding 'cp437' >>> print urllib.urlencode({'foo':raw_input('> ').decode('cp437').encode('utf8')}) > áéíóúñ foo=%C3%A1%C3%A9%C3%AD%C3%B3%C3%BA%C3%B1
>>> import subprocess >>> import shlex >>> cmd = 'wc -l test.txt' >>> cm = shlex.split(cmd) >>> subprocess.check_output(cm,shell=True) ' 1 test.txt\n' >>>
{% if forloop.counter|divisibleby:"2" %}even{% else %}odd{% endif %}
^[aeiou]*m[aeiou]*t[aeiou]*h[aeiou]*r[aeiou]*$
for line in f: mo = re.match(r'^(\S+)\s+"(.*?)"\s*$') if not mo: continue key, value = mo.groups() setattr(objInstance, key, value)
keys = set() biglist = [keys.add(sublist[0]) or sublist for sublist in biglist if sublist[0] not in keys] del keys # if you don't need it any more
school_name = "your school name" Students_in_school = Student.objects.filter(grade__school__name = school_name)
jinja2.filters.FILTERS['datetimeformat'] = datetimeformat
import Tkinter main_window=Tkinter.Tk() text_widget = Tkinter.Text(main_window) text_widget.insert('insert',"text message will display here") text_widget.pack(anchor = "w", padx = 50, pady = 50) main_window.mainloop()
mykey = '/path/to/ssl_key_file' mycert = '/path/to/ssl_cert_file' opener = urllib2.build_opener(HTTPSClientAuthHandler(mykey, mycert)) opener.add_handler(urllib2.HTTPBasicAuthHandler()) # add HTTP Basic Authentication information... opener.add_password(user=settings.USER_ID, passwd=settings.PASSWD)
list1=[1,2,3,4,5] list2=[123,234,456] d={'a':[],'b':[]} d['a'].append(list1) d['a'].append(list2) print d['a']
import requests import json from bs4 import BeautifulSoup # Use requests library to get the JSON data JSONDATA = requests.request("GET", "http://www.websitehere.com/") #Make sure you include the http part # Load it with JSON JSONDATA = JSONDATA.json() # Cycle through each `line` in the JSON for line in JSONDATA['line']: # Load stripped html in BeautifulSoup soup = BeautifulSoup(line['text']) # Prints tidy html print soup.prettify()
>>> import locale >>> price = '20,355' >>> locale.setlocale(locale.LC_NUMERIC, '') # Or any other appropriate locale. 'English_United Kingdom.1252' >>> locale.atoi(price) 20355
conn = boto.connect_s3(AWS_ACCESS_KEYXXX, AWS_SECRET_KEYXXX) bucket = conn.get_bucket(AWS_BUCKET_NAMEXXX) k = Key(bucket) k.key = s3_file_name k.set_metadata('Content-Type', 'image/jpeg') k.set_contents_from_file(file_obj)
from interface.modules import Wiki, Search, Web, Default modules = {'wiki': Wiki, 'search': Search, 'Internet': Web, 'browser': Web} module_to_load = modules.get(user_input, Default) view.load(module_to_load)
import matplotlib.pyplot as plt from matplotlib.widgets import Button class ButtonClickProcessor(object): def __init__(self, axes, label): self.button = Button(axes, label) self.button.on_clicked(self.process) def process(self, event): print self.button.label fig = plt.figure() axnext = plt.axes([0.81, 0.05, 0.1, 0.075]) bnext = ButtonClickProcessor(axnext, "Next") plt.show()
from datetime import datetime birthday = datetime(1988, 2, 19, 12, 0, 0) diff = datetime.now() - birthday print diff # 8954 days, 7:03:45.765329
numbers = [1,2,3,4,5,6] with open('output.txt', 'w') as f: f.write('\t'.join(numbers))
def selector(seqs, picks): iters = [iter(x) for x in seqs] for choice in picks: yield next(iters[choice]) print list(selector((news, post), (0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0)))
return redirect('new_cross_phase_2')
>>> import re >>> strs = "Hello (Test1 test2) (Hello1 hello2) other_stuff" >>> [", ".join(x.split()) for x in re.split(r'[()]',strs) if x.strip()] ['Hello', 'Test1, test2', 'Hello1, hello2', 'other_stuff']
re.findall("[\d]+x[\d]+",variable_string)
locs = (np.diff(np.sign(np.diff(v_1))) < 0).nonzero()[0] +1
>>> from operator import methodcaller >>> a = ['2011-12-22 46:31:11','2011-12-20 20:19:17', '2011-12-20 01:09:21'] >>> map(methodcaller("split", " "), a) [['2011-12-22', '46:31:11'], ['2011-12-20', '20:19:17'], ['2011-12-20', '01:09:21']]
# The language for content autogenerated by Sphinx. Refer to documentation # for a list of supported languages. language = 'nl'
from os import path zf = zipfile.ZipFile( zipPath, mode='w' ) for file in files: with NamedTemporaryFile(mode='w+b', bufsize=-1, prefix='tmp') as tempFile: tempPath = tempFile.name with open(tempPath, 'w') as f: write stuff to tempPath with contents of the variable 'file' zf.write(tempPath,arcname=path.basename(tempPath)) zf.close()
notifier = pyinotify.Notifier(wm, handler) wm.add_watch('/tmp', pyinotify.IN_CREATE) notifier.loop()
num_entry = int(input('Please enter an odd number: ')) def number(): return num_entry % 2 == 0 def main(): if number() == True: print('Sorry, please try again.') else: print('Nice! You know your numbers!') number() main()
import fileinput for fl, line in zip(li, fileinput.input(['a.txt'], inplace=True)): print(line.strip() + '\t' + str(fl))
pip install Django==1.0.4
> a = np.matrix([[1,1,0],[0,1,1]], dtype=bool) > a.T * a matrix([[ True, True, False], [ True, True, True], [False, True, True]], dtype=bool)
def custom_input(question): answer = input(question).lower() if answer == 'quit': sys.exit() # or whatever you want to do return answer
def _q_getattr(self, attr): print("get %s" % attr) return getattr(self, 'x') def override(p, methods): oldType = type(p) newType = type(oldType.__name__ + "_Override", (oldType,), methods) p.__class__ = newType override(p, { '__getattr__': _q_getattr}) print(p.__getattr__('x')()) # Works! Prints "0" print(p.x()) # Should work!
import math s = "0.5 * gdp[t] + 0.2 * ln( sp500[t-2] ) " gdp = [0,1,2,3,4,5] sp500 = [0,1,2,3,4,5] t = 5 ln = lambda x: math.log(x) y = eval(s) print y # prints 2.71972245773
>>> import platform >>> platform.machine() 'x86' >>> platform.version() '5.1.2600' >>> platform.platform() 'Windows-XP-5.1.2600-SP2' >>> platform.uname() ('Windows', 'name', 'XP', '5.1.2600', 'x86', 'x86 Family 6 Model 15 Stepping 6, GenuineIntel') >>> platform.system() 'Windows' >>> platform.processor() 'x86 Family 6 Model 15 Stepping 6, GenuineIntel'
def check_lower(pair): key,value = pair return (key.lower(),value) meaningHash={'Banana':'fruit','apple':'fruit'} sortedMeaningHash = collections.OrderedDict(sorted(meaningHash.items(), key=check_lower)) print(sortedMeaningHash)
from kivy.uix.popup import Popup from kivy.uix.textinput import TextInput from kivy.uix.boxlayout import BoxLayout from kivy.uix.label import Label box = BoxLayout() box.add_widget(Label(text='Hello world')) box.add_widget(TextInput(text='Hi')) popup = Popup(title='Test popup', content=box, size_hint=(None, None), size=(400, 400))
web.setcookie('session', '', expires=-1, domain=session_cookie_domain)
ave = pd.stats.moments.rolling_mean(data,length) ave = ave.dropna() sd = pd.stats.moments.rolling_std(data,length) sd = sd.dropna()
>>> dict1 = {'a':0, 'b':1, 'c':2,'d':3,'e':4,'f':5} >>> dict2 = {'a':3, 'b':4, 'c':5} >>> d1 = {v:k for k,v in dict1.iteritems()} >>> d1 {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f'} >>> dict3 = {k:d1[v] for k,v in dict2.iteritems()} >>> dict3 {'a': 'd', 'c': 'f', 'b': 'e'}
In [4]: l=[['a'],[['p','l']]] In [5]: [j for i in l for j in i] Out[5]: ['a', ['p', 'l']]
>>> re.search(r';Video=([A-Z]{2})', 'nt;Video=SD-H.264;D').group(1) 'SD'
E[X^2] - (E[X])^2
cookie['Cycle']['domain'] # lowercase domain !
>>> import PyPDF2 >>> pdfFileObj = open('my_file.pdf',rb) #'rb' for read binary mode >>> pdfReader = PyPDF2.PdfFileReader(pdfFileObj) >>> pdfReader.numPages 56 >>> pageObj = pdfReader.getPage(9) #'9' is the page number >>> pageObj.extractText()
from django.db.models import Count, Sum num_taken = 5 # modify this if you want more/less than 5 query = Car.objects.values('manufacturer').annotate(num_cars=Count('manufacturer')).order_by('-num_cars') top_cars = query[:num_taken] others = query[num_taken:].aggregate(total=Sum('num_cars'))['total'] car_nums = [entry['num_cars'] for entry in top_cars] + [others] car_manufactureres = [entry['manufacturerer'] for entry in top_cars] + ['Others']
python -m admin_client_tests python -m client_tests python -m protocol_tests python -m worker_tests
cls.query(ancestor=version_key()).filter(topic=topic).order(-cls.created)
import urllib2, mimetypes from django.http import HttpResponse def ForwardToSocketIO(request): # Capture the URL pattern path = request.get_full_path() # Create a URL opener response = urllib2.urlopen('http://localhost:20000%s' % path) # Capture and return response django_response = HttpResponse(response.read()) django_response['Content-Type'] = 'octet-stream' return django_response
dictionary = {} word_pos_list = [] for word in sentence: if word not in dictionary: dictionary[word] = len(dictionary) + 1 word_pos_list.append(dictionary[word])
>>> import re >>> email_list = "mail1@mail.com,mail2@mail.com, mail3@mail.com mail4@mail.com" >>> re.split(r'[, ]*',email_list) ['mail1@mail.com', 'mail2@mail.com', 'mail3@mail.com', 'mail4@mail.com']
class A(type): def _repr_pretty_(cls, p, cycle): p.text(repr(self)) def __repr__(cls): return 'This Information' class B: #or for Py3K: class B(metaclass=A): __metaclass__ = A
log = open('/dev/shm/access_log', 'a') with daemon.DaemonContext(stderr=log): run(host='0.0.0.0', port=8080)
tags = ['aa','ab','ae','af','ak','an','ar'] tags_set = set(tags) tags_str = "|".join(tags) %timeit 'ro' in tags 1000000 loops, best of 3: 223 ns per loop %timeit 'ro' in tags_set 1000000 loops, best of 3: 73.5 ns per loop %timeit 'ro' in tags_str 1000000 loops, best of 3: 98.1 ns per loop
# create dictionary, defaulting to new random positions randpos = lambda: (random.randrange(0, width), random.randrange(0, height)) d = collections.defaultdict(randpos) for i in range(10): # corresponds to your outer 'while' loop print "outer loop", i for k in range(5): # your 'for characters...' loop x, y = d[k] # get x, y from dict, default to random position print x, y # use position
list_of_lists=[] category=0 list_of_lists.append([]) f = open(file_name,'r') for line in f.readlines(): item = line.strip('\n') # no white spaces in the list if len(item) > 0: #add to current category list_of_lists[category].append(item) else: #add new category list_of_lists.append([]) category = category + 1 f.close()
if row[0] == username and row[1] == password:
def retrieve_user(self, id=None, name=None, email=None): if id: return self.session.query(User).\ filter(User.id == id).one() if name: return self.session.query(User).\ filter(func.lower(User.username) == func.lower(name)).first() etc
import clr from System.Threading import Interlocked refInt = clr.Reference<int>(5) #Create a reference to an integer #refInt = <System.Int32 object at 0x0000000000000049 [5]> #refInt.Value = 5 Interlocked.Increment(refInt) #Returns 6 and refInt now points to a new integer #refInt = <System.Int32 object at 0x000000000000004A [6]> #refInt.Value = 6
from scipy import stats import numpy as np stats.lognorm(0.5, scale=np.exp(2)).ppf(0.005)
request.session['viewed_post_%s' % post.id] = True
def func(my_list, z): if z == len(my_list): return something else: # do something else return func(my_list, z+1) z = someValue print func(my_list, z)
temp = lb.E.entityset( lb.E.entity( lb.E.temp(code='{0}'.format(temp_code)), lb.E.attr(lb.E.value('{0}'.format(value)), code='2ndCode'), lb.E.attr(lb.E.value('{0}'.format(value2)), code='3rdCode'), ) )
# Set limits to x < 10^1 and x > 10^-1 # (overlapping, thus all inclusive, hopefully) gca().get_yaxis().get_major_formatter().set_powerlimits((0, 0))
import csv r = csv.reader(...) lines = [line for line in r] print len(lines) #number of lines for odd in lines[1::2]: print odd # print odd lines
ax = plt.gca() ax.get_xaxis().get_major_formatter().scaled[365] = '%y' plt.draw()
for NoOfGamesPlayed in range(1, NoOfGamesInMatch+1): # do stuff
self.Bind(wx.EVT_CHAR_HOOK, self.onKey) ... def onKey(self, evt): if evt.GetKeyCode() == wx.WXK_DOWN: print "Down key pressed" else: evt.Skip()
exec('command', $output); var_dump($output);
print "{}\t{}\t{}".format(n, int(bu.total_seconds() * 1000),int(qui.total_seconds() * 1000))
all_vars = locals().get('all_vars', [])
>>> import unicodedata >>> print unicodedata.normalize("NFC",u"c\u0327") ç
SELECT p.*, (SELECT prices.price FROM prices WHERE prices.product_id = p.id ORDER BY prices.id DESC LIMIT 1) as last_price FROM product p WHERE p.category_id = 4;
re.findall(r'\r\n(\d+)\r\n',contents)[-1]
class Fruit: def __init__(self, FruitName): self.name = FruitName self.facts = [] def addfact(self, FruitName): ...
request.path # the url (excluding domain) request.method # eg GET or POST request.cookies request.user # A django.contrib.auth.models.User object representing the currently logged-in user request.META # A standard Python dictionary containing all available HTTP headers
def removeButtons(self): for cnt in reversed(range(self.dvbox.count())): # takeAt does both the jobs of itemAt and removeWidget # namely it removes an item and returns it widget = self.dvbox.takeAt(cnt).widget() if widget is not None: # widget will be None if the item is a layout widget.deleteLater()
def select(columns=None, whereclause=None, from_obj=[], **kwargs): """Returns a ``SELECT`` clause element. (... long docstring ...) """ return Select(columns, whereclause=whereclause, from_obj=from_obj, **kwargs)
>>> import numpy as np >>> old_set = [[0, 1], [4, 5]] >>> new_set = [[2, 7], [0, 1]] >>> (np.array(old_set) + np.array(new_set)) / 2 array([[1, 4], [2, 3]])
ar = np.zeros((512,256),dtype=np.uint16) # there should be something here to fill ar xs = np.arange(ar.shape[0]) ys = np.arange(ar.shape[1]) check = (0 < ar) & (ar < 1000) ind = np.where( check ) xlist = xs[ ind[0] ] ylist = ys[ ind[1] ] zlist = ar[ check ]
import csv cr = csv.reader(open("temp.csv","rb")) arr = range(100) #adjust to needed x = 0 for row in cr: arr[x] = row x += 1 print arr[:22] #adjust to needed
import sys, re, math def find_numbers(f): for line in f: for word in line.split(): if word.isdigit(): yield float(word) lst = list(find_numbers(sys.stdin)) lst.reverse() for x in lst: print('%.4f' % math.sqrt(x))
pizza_form = PizzaFormSet(request.POST or None) choices = [(t.pk, unicode(t)) for t in restaraunt.toppings.all().order_by('-id')] for form in pizza_form: form.fields['toppings'].choices = choices
data = "Hello World" file_hande = sftp_client.file(pollFile, mode='a', bufsize=1) file_handle.write(data) file_handle.flush() file_handle.close()
newlist = [word for word in words if len(word) == 9]
>>> a = "%0.10f" % (10 ** -10) >>> a '0.0000000001'
# on Linux/Unix at /etc/hosts 127.0.0.1 www.example.dev sub1.example.dev sub2.example.dev # on windows its in system32\drivers\etc\
>>> import numpy as np >>> a = ['Foo', '59.8', 'bar', 'spam'] >>> arr = np.ma.array(a, mask=[True, False, True, True]) >>> arr.compressed().astype(float) array([ 59.8]) >>> arr[arr.mask].data array(['Foo', 'bar', 'spam'], dtype='|S4')
export SECRET_KEY='asdgladfkga....'
def execu(lst, seq, raw_para): return reduce(lambda x, y: y(x), reversed(operator.itemgetter(*seq)(lst)), raw_para)
fn = 'mydownload.pdf' print 'Content-Type:application/pdf'; print 'Content-Disposition: attachment; filename="%s"' %(fn); print print sio.getvalue()
>>> from datetime import timedelta >>> delta = timedelta(days=7) >>> df_score_mean = df.apply(lambda x: np.mean(df['score'][df['ts'] <= x['ts'] + delta]), axis=1) 0 5.500000 1 5.500000 2 4.000000 3 4.600000 4 4.500000 5 4.500000 6 4.555556 7 4.200000 8 4.200000 9 4.200000
for line, item in zip (open ('myfile.txt'), mylist): print (line) print (item)
['<a href="%s">%s' % (n, l) for (n, l) in zip(name, link)]
def toUnix(path): return path.replace("\\", "/")
import boto3 s3 = boto3.client("s3") all_objects = s3.list_objects(Bucket = 'my-bucket-name')
import csv with open('csvfile.csv', 'rb') as source: rdr= csv.reader( source ) for row in rdr: # do whatever with row
{"$where": "function() { for (var i=0; i<1000000; i++) {}; return true; }"}
class A(object): def __init__(self, msg): self.msg = msg def __call__(self): print self.msg def __getattr__(self, name): return self a = A('Hello World') a() a.b() a.b.c()
import csv with open('location.csv', newline='') as fp_in: reader = csv.reader(fp_in, delimiter=',') data = list(reader) data.sort(key=lambda x: (len(x[-1].strip()) != 2, x[-1].strip())) with open("locout.csv", "w", newline='') as fp_out: writer = csv.writer(fp_out, delimiter=',') writer.writerows(data)
subprocess.Popen([file],shell=True)
np.where(a>threshold, upper, lower) Out[6]: array([[0, 1, 1, 1], [1, 1, 0, 1], [0, 1, 0, 1], [1, 0, 0, 1]])
from collections import namedtuple # We define our data type like this: fileData = namedtuple('fileData', ('name', 'path', 'size')) # Now we can create an instance of it: def pathToData(pathAndName): path, name = os.path.split(pathAndName) size = os.path.getsize(pathAndName) return fileData(name, path, size) # Or a whole bunch at once, using a list comprehension: def pathsToData(filePaths): return [pathToData(p) for p in filePaths] # There is no need to do all the 'append' logic yourself.
def bounding_box(iterable): min_x, min_y = numpy.min(iterable[0], axis=0) max_x, max_y = numpy.max(iterable[0], axis=0) return numpy.array([(min_x, min_y), (max_x, min_y), (max_x, max_y), (min_x, max_y)])
import requests import re from bs4 import BeautifulSoup req = requests.get(url) req.raise_for_status() html_doc = req.text.encode(req.encoding) soup = BeautifulSoup(html_doc) links = soup.findAll(href=re.compile("\.pdf$")) for link in links: req = requests.get(link) # here, you'll want to use r.content, since it's probably a binary file content = req.content # write the bytes to a file
mylist = [] for col in ws.columns[0]: mylist.append(col.value)
>>> def foo(): ... x = 5 ... def bar(): ... return x ... return bar ... >>> bar = foo() >>> import dis >>> dis.dis(bar) 4 0 LOAD_DEREF 0 (x) 3 RETURN_VALUE
>>> import re >>> re.findall('"([^"]*)"', 'SetVariables "a" "b" "c" ') ['a', 'b', 'c']
from collections import Counter with open('input.tsv') as infile: counts = Counter(infile.read()) for c in 'SF': print '{}: {}'.format(c, counts.get(c))
class GeocodeResult(object): """class to handle Reverse Geocode Result""" ... Result = namedtuple( 'Result', 'address score location attributes', ) @property def results(self): results = [] for result in self.address + self.candidates + self.locations: results.append(self.Result(...)) # pass in the four relevant attributes return result ...
data[0:2] + data[-2:]
# project/.gitignore passwords.py # project/passwords.py GITHUB_KEY = '123' GITHUB_KEY_SECRET = 'ABC' GITHUB_TOKEN = '456' GITHUB_TOKEN_SECRET = 'XYZ' # project/my_script.py from passwords import GITHUB_KEY, GITHUB_KEY_SECRET, GITHUB_TOKEN, GITHUB_TOKEN_SECRET KEY = GITHUB_KEY KEY_SECRET = GITHUB_KEY_SECRET TOKEN = GITHUB_TOKEN TOKEN_SECRET = GITHUB_TOKEN_SECRET
def __hash__(self): return hash(tuple(self.list_attribute))
files = os.listdir(".") files.sort(key=os.path.getmtime, reverse=True) for name in files: with open(name) as f: if search_string in f.read(): print name break
<tree string="My Tree" delete="false">
{{ value.time.date }}
pytz.utc.localize(utc_time, is_dst=None).astimezone(tz)
from pylab import * import time ion() tstart = time.time() # for profiling x = arange(0,2*pi,0.01) # x-array line, = plot(x,sin(x)) for i in arange(1,200): line.set_ydata(sin(x+i/10.0)) # update the data draw() # redraw the canvas print 'FPS:' , 200/(time.time()-tstart)
attributes = ['pandas', 'tunas', 'cows'] choice = random.choice(attributes) setattr(z, choice, getattr(z, choice) + 1)
# let publication be your existing Pets publication instance cats_tag, created = Tag.objects.get_or_create(title='cats') publication.tags.add(cats_tag)
for line in infile: if line.startswith('Brown'): left, sep, right=line.partition('\t') outstr=''.join([left, sep])+'\n' else: outstr=line outfile.write(outstr)
for line in search_file: if search_registration in line: str1 = line; for line in search_av_speed_file: if search_registration in line: current_line = line.split(",") speed_of_car = current_line[2] print(speed_of_car) str2 = speed_of_car fstr=" ".join(str1,str2) #further formatting can be done here,like strip() and you can print this to see the desired result fine_file.write(fstr)
>>> t = (1, 2, 3, 4, 5) >>> a, b, c = t[0], t[1:-1], t[-1] >>> a, b, c (1, (2, 3, 4), 5)
m = re.match('Season ([0-9]+), Episode ([0-9]+): .*', s) (season, episode) = (int(m.group(1)), int(m.group(2)))
driver.get(testurl)
import os import glob directory = raw_input("path to base directory?") for fle in glob.glob(os.path.join(directory,"savedrecs*.txt")): with open(fle) as f: sm = sum(not line.strip() for line in f) print("{} has {} empty lines".format(fle, sm))
import numpy as np from scipy.fftpack import dct, idct # Lets create a 3D array and fill it with some values a = numpy.random.rand(3,3,3) f,x,y = a.shape b = np.zeros((f,x,y)) b = dct(dct(dct(a).transpose(0,2,1)).transpose(1,2,0)).transpose(1,2,0).transpose(0,2,1)
#d = (('name-1', 100), ('name-2',90), ('name-3',80), ('name-1',80)) names = "name1,name2,name3,name1".split(",") salaries = map(int,"100,90,80,80".split(",")) d = zip(names,salaries) print max(d,key=lambda x:names.count(x[0])*1000+x[1]) #('name-1', 100) print sorted(d,key=lambda x:names.count(x[0])*1000+x[1],reverse=True) [('name-1', 100), ('name-1', 80), ('name-2', 90), ('name-3', 80)]
t = datetime.strptime(self.start, "%H:%M:%S").time() start = datetime.combine(self.job_record.date, t)
vote_date = models.DateField(_('vote date'), null=False, blank=False, auto_now=True)
global_votecount = Vote.objects.all().values('user', 'user__username').annotate(votesTotal=Count('user__username')).order_by('-votesTotal') import datetime today_min = datetime.datetime.combine(datetime.date.today(), datetime.time.min) today_max = datetime.datetime.combine(datetime.date.today(), datetime.time.max) votesToday = dict(Vote.objects.filter(date__range=(today_min, today_max)).values_list('user__username').annotate(votesToday=Count('user__username'))) for item in global_votecount: item['votesToday'] = votesToday[item['user__username']]
def sort_columns(column_list): # Create a list of tuples: (question position, column name) sort_list = [(int(col.split('_')[2]), col) for col in column_list] # Sorts by the first item in each tuple, which is the question position sort_list.sort() # Return the column names in the sorted order: return [x[1] for x in sort_list] # Now, you should be able to reorder the DataFrame like so: demo_pivot = demo_pivot.loc[:, sort_columns(demo_pivot.columns)]
def multi_func(functions): def f(col): return functions[col.name](col) return f df = pd.DataFrame(np.random.random((10, 2)), columns=['A', 'B']) result = df.apply(multi_func({'A': np.mean, 'B': np.sum}))
import httplib conn = httplib.HTTPConnection("www.python.org") conn.request("GET", "/index.html") r1 = conn.getresponse() print r1.status, r1.reason
>>> text = "thisfragmentiwant" >>> text[4 : 12] 'fragment'
{{product.description|safe}}
browser.maximize_window()
>>> list_of_dicts = [{} for i in range(32)] >>> len(list_of_dicts) 32 >>> list_of_dicts[0] {}
In [0]: os.path.abspath('c:/some/path') Out[0]: 'c:\\some\\path'
{% load staticfiles %} <!DOCTYPE html> <html lang="fa"> <head> <script type="text/javascript" src="{% static 'my_app/js/app.js' %}"></script> <title>{{ title }}</title> </head> <body> {% block content %} {% endblock %} </body> </html>
nodes = Node.objects.filter(foo="bar").select_subclasses() for node in nodes: #logic
a = (7,8,9,10,11,12) #or any other sequence of integers print set(y-x for x,y in zip(a,a[1:])) in ({1}, {-1})
>>> names = 'Benjamin Franklin, Thomas Jefferson, Carl Sagan' >>> names.split(',') ['Benjamin Franklin', ' Thomas Jefferson', ' Carl Sagan']
from operator import itemgetter sorted(L, key=itemgetter(1))
thread = Thread() thread.finished.connect(gui.do_update_thingy)
import json ... l = soup.p.get_text() # find p tag and extract text from it result = json.loads(l) # convert text into python list
title = quest1.find_element_by_class_name("title").text desc = quest1.find_element_by_class_name("desc").text progress = quest1.find_element_by_class_name("progress").text
return char in x
my_instance = MyModel(email='test')
data = pd.read_csv('SUPERLARGEFILE.csv', index_col=0, encoding = "ISO-8859-1", low_memory=Fals, chunksize=10) result = [] for chunk in data: # get chunks of 10 rows each result.append(chunk.mean()) # do something with res e.g. res = DataFrame(res).to_csv("result.csv")
>>> df['dxCount'] = [len(c) for c in df['dxCodes']]
SELECT * FROM items ORDER BY is_hidden, id DESC
df['value'].apply(lambda x: 0 if not re.findall('\d+', str(x)) else re.findall('\d+', str(x))[0])
from selenium.webdriver.common.action_chains import ActionChains def hover(self): wd = webdriver_connection.connection element = wd.find_element_by_link_text(self.locator) hov = ActionChains(wd).move_to_element(element) hov.perform()
def variant1a(node_name, graph): """Include a docstring, too!""" for node in graph.get_nodes(): if node.get_name() == node_name: return node, graph return create_node(node_name, graph)
Returns the mean accuracy on the given test data and labels. Parameters ---------- X : array-like, shape = (n_samples, n_features) Test samples. y : array-like, shape = (n_samples,) True labels for X. sample_weight : array-like, shape = [n_samples], optional Sample weights. Returns ------- score : float Mean accuracy of self.predict(X) wrt. y.
import difflib file1 = "PATH OF FILE 1" file1 = open(file1, "r") file2 = "PATH OF FILE 2" file2 = open(file2, "r") diff = difflib.ndiff(file1.readlines(), file2.readlines()) file1.close() file2.close() delta = ''.join(x[2:] for x in diff if x.startswith('- ')) print delta
for item in XML_Document.getElementsByTagName('item'): tag1 = item.getElementsByTagName('tag1')[0].toxml(encoding="utf-8") tag2 = item.getElementsByTagName('tag2')[0].toxml(encoding="utf-8") tag3 = item.getElementsByTagName('tag3')[0].toxml(encoding="utf-8") print tag1, tag2, tag3
var jsdom = require( 'jsdom' ); jsdom.env( { url: <give_url_of_page_u_want_to_scarpe>, scripts: [ "http://code.jquery.com/jquery.js" ], done: function( error, window ) { var $ = window.$; // required page is loaded in $.... //you can write any javascript or jquery code get what ever you want } } );
import datetime target_date = datetime.date(2011,2,7) delta = datetime.timedelta(days=2) new_date = target_date - delta print new_date # 2011-02-05
df.groupby("Job").filter(lambda x : x["Dept"].isin(["TC"]).any())
python setup.py build_ext --inplace --library-dirs=lib_dir1;lib_dir2 --include-dirs=inc_dir1;inc_dir2
for item in by_school.get_xticklabels(): item.set_rotation(45)
>>> z = np.array([1, 2, 1, 2.2, 3, 4.4, 1, 1.2, 2, 3, 2.1, 1.2, 5, 0.5]) >>> m = 3. >>> n = 4. >>> x = scipy.stats.scoreatpercentile(z, 100*(1-m/n)) >>> print(x) 1.05 >>> print((z>x).sum()/len(z)) # test, should be about 0.75 0.714285714286
import json jstr = '''{ "EZMessage":{ "action":"account.cash", "data":{ "authToken":"123456", "account":"#ACCOUNTID#", "portfolio":"true", "historical":"true" } } }''' j = json.loads(jstr) j['EZMessage']['data']['authToken'] = 654321 jstr = json.dumps(j)
counter = 0 while True: if os.path.isfile(name + str(counter) + suffix): counter += 1 else: filepath = name + str(counter) + suffix break
import sys lists = { "list1": ["A", "B", "C"], "list2": [1, 2, 3], } myarg = sys.argv[1] print len(lists[myarg])
from itertools import chain def custom_dictmerge(*args): result = {} keys = set(chain(*(d.keys() for d in args))) for k in keys: result[k] = tuple(d[k] for d in args if k in d) if len(result[k]) == 1: result[k] = result[k][0] return result
lst = [1, 3, 4, 5, 1] new_lst = lst[:3] del lst[:3] print lst print new_lst
class LoginView(generic.edit.FormView): def dispatch(self, request, *args, **kwargs): if request.user.is_authenticated(): return HttpRedirect('/whatever/') else: return super(LoginView, self).dispatch(request, *args, **kwargs)
>>> # Style 2: Explicit tuple >>> for i in (x, y, z): print(i)
import string import itertools chars = string.digits + string.letters MAX_CHARS = 4 for nletters in range(MAX_CHARS): for word in itertools.product(chars, repeat=nletters + 1): print (''.join(word))
@celery.task def task(): RealTask.apply_async(countdown=30)
print os.stat("filename.data") #ensure that st_size > 0 with open("filename.data","rb") as f: print repr(f.read())
from django.http import HttpResponse from django.contrib.auth.models import User def search(request): users = \ User.objects.filter(first_name=request.POST['firstname'], last_name=request.POST['lastname']) if users: return HttpResponse(users[0].username) else: return HttpResponse('No match')
dims = [] while isinstance(matrix, list) and matrix is not None: dims.append(len(matrix)) matrix = matrix[0] number_of_dimensions = len(dims)
self.grid_columnconfigure(0,weight=1) self.grid_columnconfigure(1,weight=1) self.grid_columnconfigure(2,weight=1) self.grid_rowconfigure(0,weight=1) self.grid_rowconfigure(1,weight=1)
for cookie in my_cookie_jar: if cookie <is the cookie I want, eg cookie.name == my_cookie_name>: cookie.<morsel> = new_value my_cookie_jar.pop(cookie.name) # removes cookie from my_cookie_jar my_cookie_jar.set_cookie(cookie) # adds it back in
import psutil pid = 14551 def rss_MB(pid): proc = psutil.Process(pid) mem_bytes = proc.get_memory_info().rss return( float(mem_bytes)/1048576 ) mem_MB = rss_MB(pid) print "pid: %d has an rss of %f MB" % (pid, mem_MB)
def lists_with_sum(length, limit, exact=True): if length: for l in lists_with_sum(length-1, limit, False): gap = limit-sum(l) for i in range(gap if exact else 0, gap+1): yield l + [i] else: yield []
move_names = ['scissor', 'rock', 'paper'] winner_strings = ["It's a draw.", "You win.", "You lose."] def get_result_string(player_move, computer_move): winner = player_move - computer_move % 3 return 'You played {}. The computer played {}. {}'.format( move_names[player_move], move_names[computer_move], winner_strings[winner])
DATA = {"records": [{"key1": "AAA", "key2": "BBB", "key3": "CCC", "key4": "AAA"}]} for name, datalist in DATA.iteritems(): # Or items() in Python 3.x for datadict in datalist: for key, value in datadict.items(): if value == "AAA": datadict[key] = "XXX" print (DATA) # Prints {'records': [{'key3': 'CCC', 'key2': 'BBB', 'key1': 'XXX', 'key4': 'XXX'}]}
cmd = "sudo ./deepbelief {} > try5.txt".format(newest)
ax2.fill_betweenx(y,x, x2=0.5, where=x>0.5,interpolate=True)
>>> import time >>> timestamp = 1284375159 >>> time.strftime("%m %d %Y",time.localtime(timestamp)) '09 13 2010'
import pylab import matplotlib.pyplot as plt import numpy as np pylab.ion() x = np.arange(0,5,0.1) y = np.sin(x) plt.plot(x,y) pylab.show() tin = input("Test Input: ")
import numpy as np import matplotlib.pyplot as plt %matplotlib inline ax1 = plt.subplot(121) cbar1 = plt.colorbar(CS) cbar1.ax.set_ylabel('verbosity coefficient',labelpad = 15,fontsize = 15) ax2 = plt.subplot(122) cbar2 = plt.colorbar(CS) cbar2.ax.set_ylabel('verbosity coefficient',labelpad = 25,fontsize = 15) plt.tight_layout() plt.show()
from networkx.algorithms.traversal.depth_first_search import dfs_edges G = DiGraph( ... ) for edge in dfs_edges(G, parent1): color(edge)
sudo docker exec -it container_1 bash -c "sudo find - type f -iname_abc_ -print0 | du --files0-from - -b | awk 'BEGIN{sum=0} {sum+=$1} END{print sum}'"
input("Press Enter to continue...")
address = Address(email='foo@bar.com', person_id=current_user.id) db.session.add(address) db.session.commit()
>>> help(numpy.random.random) Help on built-in function random_sample: random_sample(...) random_sample(size=None) Return random floats in the half-open interval [0.0, 1.0). Results are from the "continuous uniform" distribution over the stated interval. To sample :math:`Unif[a, b), b > a` multiply the output of `random_sample` by `(b-a)` and add `a`:: (b - a) * random_sample() + a ...
#include <iostream> #include <string> #define f(x) substr(true?x, false?x) int main () { std::string s = "Hello, world"; std::string y = s.f(1:4); std::cout << y << "\n"; }
IPTCFormSet = modelformset_factory(IPTCForm) formset = IPTCFormSet(queryset=IPTC.objects.all())
data = np.array(list('abcdefabc')).reshape((3, 3)) df = pd.DataFrame(data, columns=list('ABC')) df A B C 0 a b c 1 d e f 2 a b c df.groupby('A').agg(lambda x:list(x).count('c')) B C A a 0 2 d 0 0
for i, o in enumerate(obj_list): if o.attr == known_value: del obj_list[i] break
from flask import request @app.route('/summary',methods = ['GET']) def api_summary_2(): filename = request.args.get('file', None) if filename is None: abort(404) else: return api_summary(filename)
col = df.columns[0] df[col] = [1, 2, 3, 4, 5]
if all( x in 'hello world' for x in ['hel','ell','orl'] ): print "Found all of them"
keys = ['name', 'last_name', 'phone_number', 'email'] dict1 = {x:dict1[x] for x in keys}
In [13]: df[df > df.quantile(0.8)].dropna() Out[13]: data c 0.860467 j 1.887577 In [14]: list(df[df > df.quantile(0.8)].dropna().index) Out[14]: ['c', 'j']
models = [name.split('_')[2] for name in files]
p = re.compile(ur'[^\s@<>]+@[^\s@<>]+\.[^\s@<>]+', re.MULTILINE | re.IGNORECASE) test_str = r'...' re.findall(p, test_str)
import re s = "123456789123456789" matches = re.finditer(r'(?=(\d{10}))',s) results = [int(match.group(1)) for match in matches] # results: # [1234567891, # 2345678912, # 3456789123, # 4567891234, # 5678912345, # 6789123456, # 7891234567, # 8912345678, # 9123456789]
import re pattern = re.compile(r'foo\(.*?\)') test_str = 'foo(123456) together with foo(2468)' for match in re.findall(pattern, test_str): print(match)
d = {} l = llist.dllist() # insert 'foo' and obtain the link lnk = l.append('foo') # insert the link to the dictionary d['foo'] = lnk
# Ned's startup.py file, loaded into interactive python prompts. print("(.startup.py)") import datetime, os, pprint, re, sys, time print("(imported datetime, os, pprint, re, sys, time)") def dirx(thing, regex): return [ n for n in dir(thing) if re.search(regex, n) ] pp = pprint.pprint
ffmpeg -i input.mp4 -s 320x240 -b:v 16k -b:a 8k output.mp4
a = ["test", "news", "hello"] >>> print [(i,)*2 for i in a] #thanks to @JonClements for the suggestion [('test', 'test'), ('news', 'news'), ('hello', 'hello')]
http://www.yourapp.com/continue/1234
from IPython.parallel import Client rc = Client(profile='ssh') dview = rc[:] dview.execute('reload(<module>)', block = True)
from collections import defaultdict d = defaultdict(int) with open("chat.txt") as f: for line in f: id, data = line.split(None, 1) d[id] += data.lower().count("optimus")
>>> from random import choice >>> def prbs(): ... while True: ... yield choice([False, True])
# create a sandbox globals dict sandbox = {} # create a new version of test() that uses the sandbox for its globals newtest = type(test)(test.func_code, sandbox, test.func_name, test.func_defaults, test.func_closure) # add the sandboxed version of test() to the sandbox sandbox["test"] = newtest
from django.views.decorators.cache import cache_control @cache_control(no_cache=True, must_revalidate=True) def func() #some code return
class DefaultHelpParser(argparse.ArgumentParser): def error(self, message): sys.stderr.write('error: %s\n' % message) self.print_help() sys.exit(2)
class OrderSerializer(serializers.ModelSerializer) class Meta: model = Order class UserSerializer(serializers.ModelSerializer) orders = OrderSerializer(many = True) class Meta: model = user fields = ('city', 'firstName', 'zip', 'taxNumber', 'lastName', 'street', 'country', 'email', 'orders')
def test(the_list): for i in range(len(the_list)): the_list[i] = the_list[i].lower() the_list=["Python", "Programming"] test(the_list) print the_list
results = ( Table .objects .using('production') .filter(foreign_id=76) .order_by() .distinct() )
from io import StringIO filename = 'ham.egg' vfile = StringIO(u'[Pseudo-Sectio]\n%s' % open(filename).read())
import itertools with open('output.txt', 'w') as f: for n in range(1,5): for p in itertools.permutations('ab@F3',n): print(''.join(p), file=f)
import re d = {} with open('data', 'r') as f: for line in f: line = re.sub('\s', '', line) key, value = line.split('=') d[key] = value for el in d.items(): print(el)
import uwsgi, os from flask import Flask app = Flask('demo') @app.route('/') def index(): return "Hello World" def callback(): print "Worker %i exinting" % os.getpid() uwsgi.atexit = callback
output = csv.DictWriter(open('file3.csv','w'), delimiter=',', lineterminator='\n', fieldnames=headers)
env = {'somevar': 'somevalue'} exec(code, env)
parser = argparse.ArgumentParser() parser.add_argument('file', nargs='?') parser.add_argument('-f', dest='file_opt') args = parser.parse_args() if args.file_opt: args.file = args.file_opt
@classmethod def show(cls, message): print("The message is: {}".format(message))
import unicodedata glob.glob(unicodedata.normalize('NFD', '*/Bärlauch*'))
class AppointmentUpdateForm(wtf.Form): start_time = wtforms.DateField('Start at', [wtforms.validators.required()], widget=DatePickerWidget()) end_time = wtforms.DateField('End at', [wtforms.validators.required()], widget=DatePickerWidget())
word='www.wgoowglew.cowm' print '.' + word.split('.')[1].replace('w', '') + '.'
In [11]: df.loc[rows, columns] = 99 In [12]: df Out[12]: 0 1 2 3 4 5 6 7 8 9 A 0 99 2 3 99 5 6 99 8 9 B 10 11 12 13 14 15 16 17 18 19 C 20 99 22 23 99 25 26 99 28 29
>>> not False True >>> not True False >>> not "".isalpha() True >>> not "abc".isalpha() False
def combiner(itemkey, methodname, *a, **k): def keyextractor(container): item = container[itemkey] method = getattr(item, methodname) return method(*a, **k) return keyextractor
my_string = "1" print my_string.zfill(2) # Prints 01 my_string = "1000" print my_string.zfill(2) # Prints 1000
def fmt_3or4(v): """Format float to 4 decimal places, or 3 if ends with 0.""" s = '{:.4f}'.format(v) if s[-1] == '0': s = s[:-1] return s >>> fmt_3or4(1.02345) '1.0234' >>> fmt_3or4(1.023) '1.023' >>> fmt_3or4(1.02) '1.020'
In [200]: cols = pd.Series(df.columns.tolist()).apply(pd.Series).sum(axis=1) In [201]: cols Out[201]: 0 ADF 1 ADG 2 AEF 3 AEG 4 BDF 5 BDG 6 BEF 7 BEG 8 CDF 9 CDG 10 CEF 11 CEG dtype: object
for i in range(2, 11): print 1.0*(1 % i) / i
def capitalize_nth(s, n): return s[:n].lower() + s[n:].capitalize()
for i in range(10000): # code to be repeated 10000 goes in an indented block here # more lines in the loop should be indented at same level as previous line # to mark what code runs after the for loop finishes, just un-indent again h - prtns.tolist() ...
class PurchaseOrder(models.Model): ... your fields ... def get_po_number(self): return self.po_number if self.confirmed else '' get_po_number.short_description = 'po_number'
def retrieve_sub_array(element): for sub_array in array: if element in sub_array: return sub_array
from multiprocessing import Process, Queue def trace_pdf(a,b,c,d): x = np.linspace(0,100,a) fig2 = plt.figure() ax2 = fig2.add_subplot(111) ax2.plot(b,c,'b', label='BA',linewidth=3.5) ax2.set_title('a pdf like no other') fig2.savefig('file.pdf', format='pdf') plt.close() trace_pdf = Process(target=trace_pdf, args=(a,b,c,d)) trace_pdf.start()
%matplotlib inline import matplotlib.pyplot as plt from numpy.random import normal gaussian_numbers = normal(size=1000) plt.hist(gaussian_numbers) plt.title("Gaussian Histogram") plt.xlabel("Value") plt.ylabel("Frequency") plt.show()
import pylab, glob txt_files = glob.iglob("./*.txt") for data in txt_files: data = pylab.loadtxt(data) pylab.plot(data[:,1], data[:,2]) pylab.show()
import random import sys import time def slowprint(s): for c in s + '\n': sys.stdout.write(c) sys.stdout.flush() # defeat buffering time.sleep(random.random() * 0.1) slowprint('Hello, world.')
L = [] for student in range(0,10): x = (raw_input("Enter grade here: ")).lower() L.append(x) d = dict((x,L.count(x)) for x in set(L)) for k,v in d.iteritems(): print "Count for {}'s : {}".format(k.capitalize(), v)
>>> def print_list_matrix(lst, row_num): ... for i in range(row_num): ... print ' '.join(lst[i::row_num]) ... >>> print_list_matrix(lst, 3) v1 v4 v7 v10 v13 v2 v5 v8 v11 v14 v3 v6 v9 v12 >>> print_list_matrix(lst, 4) v1 v5 v9 v13 v2 v6 v10 v14 v3 v7 v11 v4 v8 v12
Cursa.objects.filter[:50]
for line in old_file: stripped_line = line.lstrip() # do your matching here against `stripped_line` instead of `line` # `line` still contains the original, non-stripped line
>>> import numpy as np >>> a=np.asarray([3,4,np.nan,1,2]) >>> np.isnan(a) array([False, False, True, False, False], dtype=bool) >>> a[np.isnan(a)] array([ nan]) >>> np.where(np.isnan(a)) (array([2], dtype=int64),)
import string import random from itertools import islice chars = string.printable + string.whitespace # make infinite generator of random chars random_chars = iter(lambda: random.choice(chars), '') with open('output_file','w', buffering=102400) as fout: fout.writelines(islice(random_chars, 1000000)) # write 'n' many
from wireless import Wireless wireless = Wireless() wireless.connect(ssid='ssid', password='password')
>>> import icu # pip install PyICU >>> sorted(['a','b','c','ä']) ['a', 'b', 'c', 'ä'] >>> collator = icu.Collator.createInstance(icu.Locale('de_DE.UTF-8')) >>> sorted(['a','b','c','ä'], key=collator.getSortKey) ['a', 'ä', 'b', 'c']
datestr=datetime.strptime( datetime[:-1], "%Y-%m-%dT%H:%M:%S" ) >>> test = "2010-08-17T19:00:00Z" >>> test[:-1] '2010-08-17T19:00:00'
real_plot = plot def my_plot(*args, **kwargs): x, y = args[0], args[1] ...your extra code here... real_plot(*args, **kwargs) plot = my_plot
hist, bin_edges = apply_along_axis(lambda x: histogram(x, bins=bins), 0, B)
toy <- tbl_df(toy) toy$Chr <- as.factor(toy$Chr) toy$Pos <- as.factor(toy$Pos) toy$Value <- as.factor(toy$Value) df <- as.data.frame(toy %>% group_by(Name, Chr, Pos, Value) %>% tally %>% group_by(Name, Value)) df %>% mutate(pct = n/sum(n))
appcfg.py download_data --application=YourAppID --kind=YourKind --url=http://localhost:YourPort/_ah/remote_api --filename=YourFileName
import numpy as np from mayavi import mlab vertices = np.array([[0, 1, 0, 0],[0, 0, 1, 0],[0, 0, 0, 1]]) faces = np.array([[0, 1, 0, 0],[1, 2, 1, 2],[2, 3, 3, 3]]) mlab.triangular_mesh(vertices[0,:], vertices[1,:], vertices[2,:], faces.T) mlab.show()
from django.db.backends.signals import connection_created from django.dispatch import receiver @receiver(connection_created) def extend_sqlite(connection=None, **kwargs): connection.connection.create_function("least", 2, min) connection.connection.create_function("greatest", 2, max)
class MyRegistrationForm(UserCreationForm): ... class Meta: model = UserProfile fields = ('username', 'address', 'password1', 'password2', 'status')
$Env:PY_PYTHON = 2
f1 = csv.DictReader(open('testconfig')) last_group = '' for row in f1: if row['group'] != last_group: print row['group'] + ':' last_group = row['group'] print " " + row['monitor']
# Demean demeaned = np_arr_2d - np_arr_2d.mean(axis=1)[:, None] # Dot product of each row with index res = np.ma.dot(demeaned, demeaned[index]) # Norm of each row row_norms = np.ma.sqrt((demeaned ** 2).sum(axis=1)) # Normalize res = res / row_norms / row_norms[index]
define("logging", default="info", help=("Set the Python log level. If 'none', tornado won't touch the " "logging configuration."), metavar="debug|info|warning|error|none")
>>> m = re.findall(r"([a-z])([a-z])(\1)", T) >>> m [('e', 'r', 'e')] >>> ''.join(m[0]) 'ere'
b = soup.find("b", text=lambda x: x and x.endswith("Smart History")) table = b.find_parent("table") rows = table.find_all("tr") for row in rows: # do smth with row
def string_to_num(in_str): try: translationdict = str.maketrans("abcdefghijklmnopqrstuvwxyz","22233344455566677778889999") except AttributeError: import string translationdict = string.maketrans("abcdefghijklmnopqrstuvwxyz","22233344455566677778889999") out_str = in_str.lower().translate(translationdict) return out_str
hour = pd.DatetimeIndex(df["Date"]).hour df[(hour >= 12) & (hour <= 16)]
<select name="combo2" id="combo2" onchange="Dajaxice.your_project.your_appname.updatefilter(Dajax.process,{'option':this.value}" size="1"></select>
movie_data.drop_duplicates(subset='movie_id').sort('rating', ascending = False).head(5)
>>> a=[1, 2, 3] >>> b=list(a) >>> id(a) 3065460108L >>> id(b) 3073003244L >>> id(a) == id(b) # Equivalent to a is b False >>> a is b False
(let ((my-buffer-name (buffer-name)) ....
print GM = iso.GraphMatcher(B,A,node_match=iso.categorical_node_match(['material', 'size'],['metal',1]))
>>> import win32com.client >>> h = win32com.client.Dispatch('matlab.application') >>> h.Execute ("plot([0 18], [7 23])") >>> h.Execute ("1+1") u'\nans =\n\n 2\n\n'
for stanje in dohvatljiva_stanja: for znak in abcd: novi=tablicaPrijelaza.get((stanje,znak)) if novi: pomocna.append(novi) dohvatljiva_stanja.extend(pomocna) dohvatljiva_stanja=list(set(dohvatljiva_stanja)) dohvatljiva_stanja=sorted(dohvatljiva_stanja) del pomocna[0:len(pomocna)]
sorted(a, key=lambda v: (v, random.random()))
for l in _lst: l.append(7)
self.ematrix = [ [ Entry(self.top) for j in range(6)] # columns for i in range(30)] # rows for i,row in enumerate(self.ematrix): for j,elt in enumerate(row): elt.grid(row=i,column=j)
# Assuming YourButton is a Button subclass defined in Python <YourButton>: background_normal: ''
def split_padded(a,n): padding = (-len(a))%n return np.split(np.concatenate((a,np.zeros(padding))),n)
baseprob = [] for i in range(1,s): #changed to do a range 1-s instead of 1000 #must use the loop variable here, not s (s is always the same) matrix_n = numpy.linalg.matrix_power(matrix, i) baseprob.append(matrix_n.item(0))
>>> away = ["away1", "away2", "away3"] >>> home = ["home1", "home2", "home3"] >>> list(zip(away, home)) [('away1', 'home1'), ('away2', 'home2'), ('away3', 'home3')]
msg = "<span style=\"color:#FF0000\">string in red</span>" self.showMessage(msg)
assignment_stmt ::= (target_list "=")+ (expression_list | yield_expression) ^ here
from datetime import datetime, timedelta serial_number = (datetime(2012, 1, 1, 9, 55, 56) + timedelta(223)).strftime('%d-%h-%y %H:%M:%S')
file_data = open('x:\\path\\to\\file','r').read() my_list = re.findall(pattern, file_data, re.MULTILINE) my_dict = {c:b for a,b,c in my_list}
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV) dst = cv2.calcBackProject([hsv],[0],roi_hist,[0,180],1) # apply meanshift to get the new location ret, track_window = cv2.CamShift(dst, track_window, term_crit)
#get the key k = ob.getData().getKey() #create a new Ipo ni = Ipo.New('Key','ni') #if there check if there already a key by that name, otherwise add key if(k.ipo['Key 1'] == None): k.ipo.addCurve('Key 1') #add a point to the 'Key 1' ipo curve k.ipo['Key 1'].append(BezTriple.New(6.0,0.8,0.1))
getreg('.')
f[^\W2]*2
# input will prompt user for a bill amount at the command line amount = float(input('Enter the amount of the bill: ')) tip_15 = amount * .15 tip_20 = amount * 0.2 print('A 15%% tip is: %.2f. A 15%% tip is: %.2f.' % (tip_15, tip_20)) print('Total price with 15%% tip is: %.2f' % (amount + tip_15)) print('Total price with 20%% tip is: %.2f' % (amount + tip_20))
>>> from mock import MagicMock >>> >>> lst = [1, 2] >>> mock = MagicMock(side_effect=lst) >>> mock(), mock() (1, 2) >>> mock.side_effect = lst # <------- >>> mock(), mock() (1, 2)
from mpl_toolkits.mplot3d import axes3d import matplotlib.pyplot as plt from matplotlib import cm X, Y, Z = axes3d.get_test_data(0.05) plt.subplot(131) cset = plt.contourf(X, Y, Z, cmap=cm.coolwarm) plt.subplot(132) cset = plt.contourf(Y, Z, X, cmap=cm.coolwarm) plt.subplot(133) cset = plt.contourf(X, Z, Y, cmap=cm.coolwarm) plt.show()
>>> strings = ['foo','','bar','moo'] >>> ' '.join(filter(None, strings)) 'foo bar moo'
lib.test_function(u'x'.encode('utf8'), u'y'.encode('utf8'), u'z'.encode('utf8'))
subprocess.call(['curl', '-i', '-H', '"emptyheader"', '"http://somewhere:5000/somewhere"'])
for tweet in tweets: print re.sub(r'http://\S+\s?','',tweet)
... channel.basic_qos(prefetch_count=1) channel.basic_consume(callback, queue='task_queue', no_ack=False) ...
>>> varname = 'spam' >>> value = 'eggs' >>> locals() {'__builtins__': <module 'builtins' (built-in)>, 'varname': 'spam', 'value': 'eggs', '__package__': None, '__name__': '__main__', '__doc__': None} >>> locals()[varname] = value >>> locals() {'__builtins__': <module 'builtins' (built-in)>, 'varname': 'spam', 'spam': 'eggs', 'value': 'eggs', '__package__': None, '__name__': '__main__', '__doc__': None} >>> print(spam) some value
from matplotlib.ticker import MaxNLocator import matplotlib.pyplot as plt fig, (ax1, ax2, ax3, ax4, ax5, ax6) = plt.subplots(nrows=2, ncols=3) # add plot code here ax1.xaxis.set_major_locator(MaxNLocator(nbins=9)) ax1.yaxis.set_major_locator(MaxNLocator(nbins=7)) #repeat for other axes
s = 'i am what i am am' seen = {} result = [] for index, word in enumerate(s.split(), 1): result.append(seen.setdefault(word, index)) result = ' '.join(map(str, result)) print(result) # 1 2 3 1 2 2
code_lengths = {'US':9, 'Canada':10} df['correct_code_length'] = df.Country.replace(code_lengths) df['is_correct'] = (df.Code1.apply(lambda x: len(str(x))) == df.correct_code_length) | (df.Code2.apply(lambda x: len(str(x))) == df.correct_code_length)
if soup.find(text=re.compile(line.strip())):
ls = [{'id': 1, 'a1': 2, 'a2': 3}, {'id':2, 'a2':4}, {'id':3, 'a2':5}] for d in ls: d['b1'] = d.pop('a1', 0) >>> ls [{'a2': 3, 'id': 1, 'b1': 2}, {'a2': 4, 'id': 2, 'b1': 0}, {'a2': 5, 'id': 3, 'b1': 0}]
>>> s = "Hello, World" >>> c_s = c_char_p(s) >>> print c_s c_char_p('Hello, World') >>> c_s.value = "Hi, there" >>> print c_s c_char_p('Hi, there') >>> print s # first string is unchanged Hello, World >>>
authors = [('A', "Aho"), ('W', "Weinberger"), ('K', "Kernighan")] option = get_option() while option not in (x[0] for x in authors): option = get_option()
def __init__(self): global engine global central_db engine = engine_from_config(config, 'sqlalchemy.central.') central_db = create_engine(engine)
if __name__ == '__main__': Arbitrary_code_function.run() MRJOB_Jobname.run()
if len(l) != len(set(l)): # not unique
>>> soup.find(class_='bookie-offer').attrs {'class': ['bookie-offer', 'first'], 'data-bookie-code': 'BB', 'data-customer-type': 'existing', 'data-sport-type': '2'} >>> soup.find(class_='bookie-offer').attrs['data-customer-type'] 'existing'
from __future__ import division print round(27/10) 3.0 print round(21/10) 2.0
class Node: def __init__(self): self.dist_ = [] self.from_ = [] rt = []
f = open('another_csv.csv','w+') for row in reader: try: url = row[4] req=urllib2.Request(url) tree = lxml.html.fromstring(urllib2.urlopen(req).read()) print >>f,','.join(row) except: #can log the faulty links in another file continue f.close()
>>> import datetime >>> x=datetime.datetime(1865, 7, 2, 9, 30, 21) >>> x.isoformat() '1865-07-02T09:30:21'
list_of_numbers = [1,2,4,5] list_of_numbers.insert(2,3)
users=pd.read_csv('5ch.xls.Sheet1.cvs')
def Split(): separate = [] with open('myFile1.txt','r') as inFile: for line in inFile: separate.append(line.split()) return(separate)
>>> c = [0.50, 0.52, 0.54, 0.56, 0.58, 0.60] >>> a = np.array(c) >>> a[(0.5 < a) & (a < 0.6)] array([0.52, 0.54, 0.56, 0.58])
while i < len(gList): if gList[i] == a[i]: x = x + 1 else: x = x i = i + 1
import re myString = 'myPERLPythonJavaScriptJavaTextSample' myString = re.sub(r'((?<=[a-z])[A-Z]|(?<!\A)[A-Z](?=[a-z]))', r' \1', myString) result = myString.split() print result
def trial(self): self.buttonA.configure(background="green") self.after(2000, lambda: self.buttonA.configure(background="black")
os.path.exists(r"C:\Users\mcmullma\Desktop\TestingDocuments\readListing.txt")
gdb$ set logging on Copying output to gdb.txt. gdb$
'/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisTop/2.0.24/RootCore'.split('/')[-2]
select = TableWithData.select() insert = NewTable.insert_from(NewTable._meta.get_fields(), select)
self.defaultstyle = wx.richtext.RichTextAttr() self.GetStyle(self.GetInsertionPoint(), self.defaultstyle) self.defaultsize = self.defaultstyle.GetFont().GetPointSize()
In [237]: df.pivot(index='idx', columns='key', values='value') Out[237]: key a b d e idx 1 1 hi 2 NaN 2 0.5 NaN hello NaN 3 NaN 2 NaN NaN 4 NaN NaN -1 3
import re print dict(re.findall('TEXTSTART\[([^\]]+)\](.*?)TEXTEND', report, re.DOTALL))
def post(self): """ Adds a :class:`Persona` resource in Persona resource list. :returns: A newly created Persona resource with http 201 response code. .. todo:: Validate all post fields """
from IPython import start_ipython start_ipython()
apiapp.config['TESTING'] = True apitest = apiapp.test_client() apicontentapp.config['TESTING'] = True contenttest = apicontentapp.test_client()
attr_getter = operator.attrgetter('name') names = map(attr_getter, l) if most_common(names) in set(map(attr_getter, [a1, a2])): pass # do smth here
l = ['cd\\xd9>+O\\0x17 \\xafbQ\\x85\\x86\\xaaPo\\xd8m', 'cd\\xc3k\\x9b\\x1d\ \x08\\x84MXr0!\\xd1\\xec\\x86\\xab\\x01', 'cw\\x1c\\x9e\\x08\\x05`\\x8f\\x9dfd\\ xd0\\xbfS7\\x9dZ\\x8f'] print l[0] cd\xd9>+O\x17 \xafbQ\x85\x86\xaaPo\xd8m
<?php exec('/path/to/python /path/to/your/script.py') ?>
In [23]: num = 15 In [24]: for x in range(num): print("{0:>{1}}".format(x, len(str(num)))) ....: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
query = session.query(Post).filter(~Post.tags.any(Tag.name.in_(['dont', 'want', 'these'])))
query:sky board:123 res_opt:eqeq res:0x0 aspect:0 nsfw_sfw:1 nsfw_sketchy:0 nsfw_nsfw:0 thpp:32 orderby:relevance orderby_opt:desc
pynotify.init("app_name") n = pynotify.Notification("", "message A", icon='some_icon') n.set_urgency(pynotify.URGENCY_CRITICAL) n.set_timeout(1000) n.show() n.update("","message B") n.show()
scipy.sparse.csr_matrix(df.values)
>>> import urllib >>> urllib.urlretrieve('http://www.example.com/myfile.zip', 'path/to/download/dir/myfile.zip')
In [32]: l[0:-1] Out[32]: [1, 2, 3, 4, 5] # all but last element In [33]: l[0::2] # start at first and step of 2 Out[33]: [1, 3, 5] In [34]: l[0::3] # start at first and step of 3 Out[34]: [1, 4]
import traceback def foo(): bar() def bar(): baz() def baz(): traceback.print_stack() # or trace = traceback.extract_stack() foo()
text = 'abcdefa' pattern = re.compile('a|c') [(m.group(), m.start()) for m in pattern.finditer(text)]
import importlib import cars def runmycar(car_name): #car_name = 'Tesla' module_name = '.' + car_name.lower() mod = importlib.import_module(module_name, 'cars') cls = getattr(mod, car_name) obj = cls() obj.run()
backup = open(filename, 'rb') while True: part_of_file = backup.read(60000000) # not exactly 60 MB.... response = connection.put() # submit part_of_file here to amazon
>>> def func(x): ... x[0] = 2 # Mutating the object affects the object outside the function >>> myList = [1] >>> func(myList) >>> myList # myList has changed [2] >>> def func(x): ... x = 2 # rebinding name has no effect outside the function >>> myList = [1] >>> func(myList) >>> myList # myList is unaffected [1]
fin = open('E:\KGG 375 - GIS Advanced\Assignment 2 - Python\TIR043109gpxpos.txt') for line in fin: # no need to read these into a list first info = line.split(',') blurry = float(info[1]) print info[0], if blurry > 0.3: print ' is blurry' else: print ' is not blurry'
from ldtp import * from ldtputils import * try: launchapp("gedit") if waittillguiexist("*.gedit")==0: raise LdtpExecutionError("Gedit window does not exist") selectmenuitem("*-gedit", "mnuFile;mnuOpen") selectrow("dkgOpenFiles...", "tblFiles", fileName[0]) ...
Truncator(value).words(length, html=True, truncate=' ...')
RUN mkdir /user ENV HOME /user WORKSPACE /user
my_dict = {x: {y: get_dict(x, y) for y in range(b)} for x in range(a)}
string_values = 'abc|xyz|mno'.split('|') for obj in queryset.iterator(): writer.writerow([smart_str(obj.code)] + string_values)
def wraps_with_first_line(f): def wrap(wrapper): wrapper = wraps(f)(wrapper) if not hasattr(wrapper, '_first_line'): wrapper._first_line = inspect.getsourcelines(f)[1] return wrapper return wrap
goodfiles = fnmatch.filter(files, pattern) badfiles = set(files).difference(goodfiles)
import tkinter as tk root = tk.Tk() scalevar = tk.IntVar() scalevar.set(50) scale = tk.Scale(root, from_=0, to=100, variable=scalevar, orient="horizontal") label = tk.Label(root, textvariable=scalevar) scale.pack(side="top", fill="x", expand=True) label.pack(side="top", fill="x", expand=True) root.mainloop()
>>> import ast >>> i = ast.literal_eval('[22, 33, 36, 41, 46, 49, 56]') >>> i[3] 41
{{ form.question(value=q.question) }}
c = repeat(b, a)
from datetime import datetime starttime = datetime.strptime('2015-06-22', '%Y-%m-%d') endtime = datetime.strptime('2015-06-23', '%Y-%m-%d') query = Event.query.filter(Event.starttime>=starttime, Event.endtime<endtime).all()
threads = [] while len(threads) < threadLimit: t=threading.Thread(target=run_command) threads.append(t) t.daemon = True t.start() [thread.join() for thread in threads]
>>> import re >>> test_text = 'grep -i 'blair' filename.log | more' >>> print re.sub(r'[^|\w\.]', ' ', test_text) 'grep i blair filename.log more'
x = 'hu1_X', 'hu2_Y', 'hu3_H', 'hu4_H', 'hu5_H', 'hu7_H' y = 'hu1_H', 'hu2_X', 'hu3_H', 'hu4_H', 'hu5_H', 'hu7_X' print(sum(item1 == item2 for item1, item2 in zip(x, y))) # 3
>>> re.search(u'[\u30a0-\u30ff]', u'カタカナ') <_sre.SRE_Match object at 0x7fa0dbb62578>
>>> int('0x'+'2a',16) 42 >>> packet=["2a","19","00","00"] >>> packet=[int(p,16) for p in packet] >>> packet [42, 25, 0, 0] >>> print ", ".join(map(hex,packet)) 0x2a, 0x19, 0x0, 0x0
items = soup.find_all("div", {"class":"zg_itemWrapper"}) for item in items: title_elm = item.find("div", {"class":"zg_title"}).a title = title_elm.get_text() link = title_elm["href"] author = item.find("div", {"class": "zg_byline"}).get_text() price = item.find("div", {"class": "zg_price"}).get_text() print title, link, author, price
from Tkinter import * root = Tk() root.geometry("300x200") navbar = Frame(root, bg="green", width=100) navbar.pack(anchor=W, fill=Y, expand=False, side=LEFT) # <---- content_frame = Frame(root, bg="orange") content_frame.pack(anchor=N, fill=BOTH, expand=True, side=LEFT ) root.mainloop()
from sched import scheduler from time import time, sleep s = scheduler(time, sleep) def run_periodically(start, end, interval, func): event_time = start while event_time < end: s.enterabs(event_time, 0, func, ()) event_time += interval s.run() if __name__ == '__main__': def say_hello(): print 'hello' run_periodically(time()+5, time()+10, 1, say_hello)
>>> from collections import OrderedDict >>> OrderedDict([('method', 'constant'), ('data', '1.225')]) OrderedDict([('method', 'constant'), ('data', '1.225')]) >>> dict(OrderedDict([('method', 'constant'), ('data', '1.225')])) {'data': '1.225', 'method': 'constant'} >>>
awk '{ print >> "artists_"toupper(substr($1, 1, 1))".txt" }' < songs.txt
if troll.collidesWith(monsters): # some monsters will need removing removals = [] for mon in monsters: # figure out which if mon.collidesWith(GroupSingle(troll)): removals.append(mon) for mon in removals: # remove them mon.removeCharacter() screen.remove_character(mon)
ctypes.CDLL('librt.so', mode=ctypes.RTLD_GLOBAL)
layers = [ WMSLayer(wms=wmsInstance, layer_name=str(layer)) for layer in wms.contents if {'EPSG:900913', 'EPSG:3857'}.intersection(wms[layer].crsOptions) ]
print [k for k in d if string in k]
>>> import pyparsing >>> ing_ending = pyparsing.Regex(r'(?i)\b[a-z]+ing\b') >>> ing_ending.parseString("jumping") (['jumping'], {})
>>> items = ["First", "Second", "# First", "Third", "# Second"] >>> for e in items: ... if e.startswith('#'): ... items.remove(e) ... break ... >>> items ['First', 'Second', 'Third', '# Second']
import pandas as pd #Considering that you have your data in a file called 'stock.txt' #and it is tab separated, by default the blank lines are not read by read_csv, #hence set the header=1 df = pd.read_csv('stock.txt', sep='\t',header=1) #Rename the columns as required df.columns= ['CompanyName', 'ASXCode', 'GICS'] #Reorder the columns as required df = df[['ASXCode','CompanyName','GICS']]
def follow(thefile): thefile.seek(0,2) while True: line = thefile.readline() if not line: time.sleep(0.1) continue yield line def beginread(): loglines = follow(logfile) for line in loglines: print line
import requests username = "SomeUser" password = "SomePass" r = requests.get("https://a.b.c:7895/resource/path?param1=foo",auth=(username,password),verify=False)
import uu uu.encode("Bar.txt", "Hello.txt") import StringIO output = StringIO.StringIO() uu.encode("Bar.txt", output) print output.getvalue()
import itertools class count(object): def __init__(self, start=0, step=1): self.start = start self.step = step def __eq__(self, other): return self.start == other.start and self.step == other.step def __iter__(self): return itertools.count(self.start, self.step)
indexVal = 0 for massVal in mass: indexVal += 1 ...code for getting dist_2, var2, sigma_num_2 variables... plt.plot(np.log(dist_2[1:]/var2['r200'][:20]), np.log(sigma_num_2),'b-o', color = 'b', label = "MASS%s = %.1E" % (indexVal, massVal))
import shelve d = shelve.open('my_shelf') for i in range(100000): d[str(i)] = 'Item %s' % i d.close() d = shelve.open('my_shelf') >>> d['50000'] 'Item 50000'
>>> class foo: ... def __init__(self,x): ... self.x = x ... def __eq__(self,y): ... return int(self.x)==int(y) ... >>> f = foo(5) >>> f == '5' True >>> 5 == '5' False
import os import multiprocessing def worker(num): with open(num, 'w') as f: f.write("This is my first text file written in python\n") if __name__ == '__main__': number_of_workers = 4 pool = multiprocessing.Pool(processes=number_of_workers) pool.map(worker, [os.path.join(inDir, i) for i in inTxtList]) pool.close() pool.join()
# create data x = np.array(range(20)) y = np.array(19 * [0] + [1]) (y[np.logical_and(x>=9, x<=13)] >= 0.05).any() # False (y[np.logical_and(x>=9, x<=20)] >= 0.05).any() # True
lines = [] with open('myfile.txt') as file: for line_number, line in enumerate(file, start=1): if line_number not in [1, 6, 7]: lines.append(line) with open('myfile.txt', 'w') as file: file.writelines(lines)
import mechanize FILE_URL = 'http://mit.edu/img/MIT_logo.gif' DESTINATION = '/tmp/lol.gif' br = mechanize.Browser() br.retrieve(FILE_URL, DESTINATION)
target = reStructuredText.split('icon_plain')[1].split('\n')[2].strip()
import termios attr = termios.tcgetattr(1) attr[3] = attr[3] | termios.ECHO termios.tcsetattr(1, termios.TCSANOW, attr)
easy_install_pre.exe %1 unzip_eggs.py %1
>>> test_list_2 = [[1,2,3,4,5,6], 0, [7,8,9,10], [11,12,13,14]] >>> def lift_int(v): ... if not isinstance(v, list): ... return [v] ... else: ... return v ... >>> test_list_2 = [item for sublist in test_list_2 for item in lift_int(sublist)] >>> test_list_2 [1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 12, 13, 14]
import multiprocessing pool = multiprocessing.Pool(multiprocessing.cpu_count()) success = all(pool.imap_unordered(process, directories))
text = open('file.txt').readlines() for line in text: print line.split(' ')[0]
{% extends "layout.html" %} {% block body %} <ul class=entries> {% for entry in entries %} <li><h2>{{ entry["ColIntitule"] }}</h2> <br> {% else %} <li><em>No entry here</em> {% endfor %} </ul> {% endblock %}
In [1]: import ast In [2]: ast.dump(ast.parse('print "hi"')) Out[2]: "Module(body=[Print(dest=None, values=[Str(s='hi')], nl=True)])" In [3]: ast.dump(ast.parse('print "hi",')) Out[3]: "Module(body=[Print(dest=None, values=[Str(s='hi')], nl=False)])"
class Polymorph(object): def __new__(cls, value): if isinstance(value, float): return MyFloat(value) elif isinstance(value, int): return MyInt(value) elif isinstance(value, str): return MyStr(value) else: raise TypeError, 'Unknown type'
import threading, time def my_threaded_func(arg, arg2): print "Running thread! Args:", (arg, arg2) time.sleep(10) print "Done!" thread = threading.Thread(target=my_threaded_func, args=("I'ma", "thread")) thread.start() print "Spun off thread"
message = '' if 'form.submitted' in request.params:#form.submitted being the name of the submit of the form #check if email exists if exists: message = 'email already registered' else: message = 'success' return dict(message = message)
d={'one' : Series([1, 2, 3], index=['a', 'b', 'c']), 'two' :Series([datetime.datetime(2014, 7, 9) , datetime.datetime(2014, 7, 10) , datetime.datetime(2014, 7, 11) ], index=['a', 'b', 'c'])} df = pd.DataFrame(d) def avg_datetime(series): dt_min = series.min() deltas = [x-dt_min for x in series] return dt_min + functools.reduce(operator.add, deltas) / len(deltas) print(avg_datetime(df['two']))
params = { 'param1': param1, 'param2': param2, .... } obj = Model1(**params)
import urllib from urllib.request import urlopen x = None class ABC(object): def __init__(self): global x x=urlopen('http://www.google.com/').read()
from time import time time_before = time() perform_get() # whatever way you do this time_after = time() time_taken = time_after-time_before print time_taken
return "matrix(%f %f %f %f %f %f)" % tuple(transformMatrix)
!![] // true !!null // false
import random import string lower = string.ascii_lowercase # letters a-z s = 'zyxwvutsr' l = ['abc', 'def'] # This loop will continue while the string s does not # contain all of the substrings in l while not all(i in s for i in l): s += random.choice(lower)
new_lst = [x for t in lst for x in t[1:] if x != 0]
>>>l = collections.deque(maxlen=5) >>>l.append('apple') >>>l.append('orange') >>>l.append('grape') >>>l.append('banana') >>>l.append('mango') >>>print(l) deque(['apple','orange','grape','banana','mango'], maxlen=5) >>>l.append('kiwi') >>>print(l) deque(['orange','grape','banana','mango','kiwi'], maxlen=5) #only 5 items in list
class AboutFrame(wx.Frame): title = "About this program" def __init__(self): wx.Frame.__init__(self, wx.GetApp().TopWindow, title=self.title)
",".join( map(str, record_ids) )
>>> lst = [3, 3, 4] >>> import itertools >>> set(itertools.permutations(lst)) {(3, 4, 3), (3, 3, 4), (4, 3, 3)}
import numpy as np import pandas as pd from io import StringIO #StringIO to write to f = StringIO() #Write to StringIO dist = np.random.normal(100, 30, 10000) for idx,s in enumerate(dist): f.write('{}\t{}\t{}\n'.format("label_A-%d" % idx, "label_B-%d" % idx, str(s))) # rewind the stream f.seek(0) #Pandas DataFrame from it DF = pd.read_table(f,sep="\t",header=None) #EmptyDataError: No columns to parse from file
C:\python pyintaller.py --onefile -w guiscript.py
>>> nums = [1,2,3,4,5] >>> [(x,y) for x in nums for y in nums] [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)] >>> min(_, key=lambda pair: pair[0]/pair[1]) (1, 5)
import random words = ['hello', 'apple', 'something', 'yeah', 'nope', 'lalala'] print [random.sample(words, 1)[0] for i in range(10)]
#your model class Author(models.Model): name = models.CharField(max_length=100) birth_date = models.DateField(blank=True, null=True) #your model-form class AuthorForm(ModelForm): your_checkbox = forms.BooleanField(required = False,label = 'your_checkbox', ...) class Meta: model = Author fields = ['name', 'birth_date'] #your checkbox is missing, so it's model independent
def RepresentsInt(s): try: int(s) return True except ValueError: return False >>> print RepresentsInt("+123") True >>> print RepresentsInt("10.0") False
x = ['i like cats', 'i like dogs', 'i like both'] for position in range(len(x)): if 'cats' in x[position]: print ".".join([x[pos] for pos in range(position-1, position+2) if pos in range(0, len(x))]) + "."
for f in fcn: for ix in range(len(a)): print f(a[ix], b[ix], c[ix])
clean = [] for item in result: subitems = item.split(',') clean.extend(si[1:-1] for si in subitems)
>>> xs = [1, 2, 3, 4, 5, 6, 7] >>> [x for i in range(3) for x in xs[i::3]] [1, 4, 7, 2, 5, 3, 6]
>>> dictionary3 = OrderedDict(sorted(x.items(), key=lambda (key, value): int(key.split('_')[1]))) >>> dictionary3 OrderedDict([('day_1', 1), ('day_2', 2), ('day_10', 10), ('day_11', 11)])
attr = wx.TextAttr() attr.SetFlags(wx.TEXT_ATTR_TEXT_COLOUR) r = rtc.GetSelectionRange() attr.SetFlags(wx.TEXT_ATTR_TEXT_COLOUR) attr.SetBackgroundColour(colour) rtc.SetStyle(r, attr)
for sub in obj: if len(sub) == 2 and all(isinstance(i, list) for i in sub): # you can add " and isinstance(sub, list)" if you are not sure about the type of sub look_val(sub)
del_items = set() for i in xrange(sizeX): if dataX[i] == -999 or dataY[i] == -999: del_items.add(i)
horaactual = datetime.datetime.now() - datetime.timedelta(hours=7)
import re def tryint(s): try: return int(s) except: return s def alphanum_key(s): """ Turn a string into a list of string and number chunks. "z23a" -> ["z", 23, "a"] """ return [ tryint(c) for c in re.split('([0-9]+)', s) ] def sort_nicely(l): """ Sort the given list in the way that humans expect. """ l.sort(key=alphanum_key)
class myClass(object): def __init__(self): self.a = '' def A(self): self.a = 'A' print self.a def B(self): print self.a + ' in B' def main(): stuff = myClass() stuff.A() stuff.B() if __name__ == '__main__': main()
>>> os.stat("C:\\autoexec.bat") nt.stat_result(st_mode=33279, st_ino=0, st_dev=0, st_nlink=0, st_uid=0, st_gid=0, st_size=0, st_atime=1150614982, st_mtime=1150614982, st_ctime=1150614982)
import matplotlib.pyplot as plt import pandas as pd df = pd.DataFrame({'x': [0, 1], 'y': [0, 1]}) plt.plot(df['x'], df['y'], label='') plt.legend(loc='best')
<div> {{ flaskReplacesThis }} </div> <div> {% raw %} {{ angularReplacesThis }} {% endraw %} </div>
date_list = [my_dt_ob.year, my_dt_ob.month, my_dt_ob.day, my_dt_ob.hour, my_dt_ob.minute, my_dt_ob.second]
subprocess.call(("explorer", "/select,", file_path))
size = 5 inner_size = size - 2 print ('*' * size) for i in range(inner_size): print ('*' + ' ' * inner_size + '*') print ('*' * size)
import os import webbrowser html = '<html> ... generated html string ...</html>' path = os.path.abspath('temp.html') url = 'file://' + path with open(path, 'w') as f: f.write(html) webbrowser.open(url)
from bisect import bisect_left def binary_search(a, x, lo=0, hi=None): # can't use a to specify default for hi hi = hi if hi is not None else len(a) # hi defaults to len(a) pos = bisect_left(a,x,lo,hi) # find insertion position return (pos if pos != hi and a[pos] == x else -1) # don't walk off the end
def parse_item(self, response): item = MyItem() # populate the item with this response data yield FormRequest( 'url', formdata={'key': 'value'}, callback=self.get_currency, meta={'item':item} ) def get_currency(self, response): self.log('lalalalala') item = response.meta['item'] item['price'] = 123 # get your price from the response body. # keep populating the item with this response data yield item
def your_view(request, ..., page_size=50): scanned_assets_qs = # get your scanned_assets QuerySet if page_size == -1: page_size = scanned_assets_qs.count() paginator = Paginator(scanned_assets_qs, page_size)
res_all = [] for res in results: low, upp = res.confint().T # unpack columns res_all.append(numpy.concatenate(([res.llf], res.params, res.tvalues, res.pvalues, low, upp)))
from operator import itemgetter sorted(map(itemgetter(1,-1),lists),key=itemgetter(-1))
from urllib.request import urlopen import json import csv url_fl = 'http://company.server.org' url_response = urlopen(url_fl).read().decode('utf-8') obj = json.loads(url_response) obj_parse = obj['aaData'] with open('test.csv', 'w', newline='') as fp: data = csv.writer(fp, delimiter=',') for row in obj_parse: data.writerows([row[1:]])
listA = [1,20,12,4] pd.DataFrame(data = listA , columns=['listA'])
import re from bs4 import BeautifulSoup soup = BeautifulSoup(html) pattern = re.compile(r"UID_(\w+)\-SRC_\d+") id = soup.find("div", id=pattern)["id"] uid = pattern.match(id).group(1) print(uid)
from tqdm import trange from time import sleep t = trange(100, desc='Bar desc', leave=True) for i in t: t.set_description("Bar desc (file %i)" % i) sleep(0.01)
syncoutput,sync_error = p.communicate() print(syncoutput)
Valid = True while Valid: try: Column = int(input("Insert Column: ")) Row = int(input("Insert Row: ")) Valid = Row in range(10) and Column in range(10) except Exception as e: print(e) Valid = False
playermove=raw_input()
import sys class Blackhole(object): def write(self, string): pass stdout = sys.stdout sys.stdout = Blackhole() function_el_spammo() sys.stdout = stdout
>>> itemDateNums, itemWeights, itemVolumes = [[[] for _ in range(sizeNeeded)] for _ in range(3)] >>> itemDateNums[1].append("hello world") >>> itemDateNums [[], ['hello world'], [], []] >>> itemWeights [[], [], [], []]
dom = xml.dom.minidom.parseString(document) for node in dom.childNodes: if node.attributes: for key in node.attributes.keys(): node.removeAttribute(key)
before = ['JACKIE:34', 'MATT:444', 'CEN:12', 'PETE:12', 'RANDY:92', 'MITCH:2', 'JAN:2'] after = [(name, int(value)) for name, value in (x.split(':') for x in before)] print after
import lxml.html doc = lxml.html.parse(url_to_site) feeds = doc.xpath('//link[@type="application/rss+xml"]/@href') # list feed urls
import numpy as np import matplotlib.pyplot as plt im = plt.imshow(image) colours = im.cmap(im.norm(np.unique(image))
def __init__(self): self.driver = webdriver.Firefox() def parse(self, response): items = [] self.driver.get(response.url) # get hidden menu urls yield scrapy.Request(hidden_menu_url, callback=self.parse_original_scrapy) def parse_original_scrapy(self, response): pass
file = open(r"D:\wamp\www\User_App.rar", "rb")
{% for option in options %} {{option}} {% for proof in option.proof_set.all %} {{proof}} {% endfor %} {% endfor %}
results = db.session.query(User).filter(User.name == "Bob").order_by(User.age.desc()).limit(10)
>>> import multiprocessing as mp >>> p = mp.Pool() >>> p.imap <bound method Pool.imap of <multiprocessing.pool.Pool object at 0x109592c50>> >>> p.map_async <bound method Pool.map_async of <multiprocessing.pool.Pool object at 0x109592c50>>
print "I have worked %s hours, %s minutes, and %s seconds" % (hours, minutes, seconds);
def longest_ascending(s): matches = [] current = [s[0]] for index, character in enumerate(s[1:]): if character >= s[index]: current.append(character) else: matches.append(current) current = [character] matches.append(current) return "".join(max(matches, key=len))
def get_form(self, request, obj=None, **kwargs): .... .... defaults = { "form": self.form, "fields": fields, "exclude": exclude, "formfield_callback": curry(self.formfield_for_dbfield, request=request), } defaults.update(kwargs) ...
>>> df / (df.iloc[0] / 100) ColA ColB ColC 0 100 100 100 1 200 150 300
import operator ops = {"+": operator.add, "-": operator.sub, "*": operator.mul, "/": operator.div} op_char = raw_input('enter a operand') op_func = ops[op_char] result = op_func(a, b)
import sys, itertools count = int(next(sys.stdin)) x = 0 for line in itertools.islice(sys.stdin, count): x += 1 if '++' in line else -1 print(x)
degree_list = G.degree().values() H = nx.expected_degree_graph(degree_list)
[sum([x.count(1) for x in L[:i]]) for i in range(1, len(L) + 1)]
def reverse(num): return int(str(num)[::-1]) largest = None for y in range (100,999): for x in range (100,999): xy = x*y if xy > largest and xy == reverse(xy): largest = xy print largest
list(my_dataframe.columns.values)
import sys from pylab import * from subprocess import * from shlex import split # some arbitrary x,y points points = [(11,31),(13,33),(15,37),(16,35),(17,38),(18,39.55)] commandline = 'my_unix_prog option1 option2 ....' command = split(commandline) process = Popen(command, stdin=PIPE, stdout=open('outfile', 'w'), stderr=PIPE) for p in points: process.stdin.write(str(p[0]) + ' ' + str(p[1]) + '\n') print process.communicate()
def sum(summands) s = 0 summands = summands if isinstance(summands, list) else [summands] for a in summands: s = a + s
import numpy as np import matplotlib.pyplot as plt x = np.linspace(0, 1.6, 100) y = np.exp(-x*3)*x fig, axs = plt.subplots(nrows=2, sharex=True) axs[0].plot(x, y) axs[1].plot(x[::-1], y) plt.xlim(x.min(), x.max()) plt.show()
<b>.*Items\s*<\/b>\s*<br>(?:\s*[1-4]0[0-9][0-9][0-9] <br>\s*(\d*)\s*(.*) <br>)
import re re.search("", "ffff") <_sre.SRE_Match object at 0xb7166410> re.search("", "ffff").start() 0 re.search("$", "ffff").start() 4
In [193]: word="timer" In [194]: print list(word).reverse() None In [195]: word[::-1] Out[195]: 'remit' In [196]: "".join(reversed(word)) Out[196]: 'remit'
has_capital = lambda s:s[0].isupper() or has_capital(s[1:]) if s else False
from views import function1, function2 def a_function_one(): ... #call function1 from views function1()
for element in list: Do stuff if(write_to_file): for element in list: write to file
import numpy as np: xs=[]; ys=[] for x,y in xy_list: xs.append(x) ys.append(y) xs=np.asarray(xs) ys=np.asarray(ys) plot(xs,ys,'ro')
for i in xrange(1,101): name = 'folder_%03d' % (i) if not os.path.exists(name): os.mkdir(name)
import numpy as np myarray = np.asarray(mylist)
import simplejson as json myfruits = {'fruit':4, 'color':11} json.dumps(myfruits)
def get_queryset(self, request): qs = super(PostAdmin, self).get_queryset(request) if request.user.is_superuser: return qs return qs.filter(user=request.user)
from flask.ext.sqlalchemy import SQLAlchemy from sqlalchemy import Column from sqlalchemy.dialects.mysql import MEDIUMINT, TINYINT db = SQLAlchemy(app) class User(db.Model): id = Column(MEDIUMINT(unsigned=True), primary_key=True)
gca().ticklabel_format(style='sci',axis='y',scilimits=(0,0)) ylim(-3e-6,-1e-6)
token = Session.query(AuthToken).options(eagerload('user')).filter(...).one() user = token.user
visio = win32com.client.Dispatch("Visio.InvisibleApp")
numpy.polyfit(x, y, deg, rcond=None, full=False)¶ Least squares polynomial fit. Fit a polynomial p(x) = p[0] * x**deg + ... + p[deg] of degree deg to points (x, y). Returns a vector of coefficients p that minimises the squared error.
df = DataFrame(columns=('lib', 'qty1', 'qty2')) for i in range(5): df.loc[i] = [randint(-1,1) for n in range(3)] print(df) lib qty1 qty2 0 0 0 -1 1 -1 -1 1 2 1 -1 1 3 0 0 0 4 1 -1 -1 [5 rows x 3 columns]
$('.submit.btn.primary-btn').eq(0).attr('id', 'foobar');
def mon_fonction(une_formation, TYPE_RECHERCHE): tot = 0 liste = [] for quel, val in une_formation: if quel == TYPE_RECHERCHE: tot += val liste.append(val) print "Les vals sont:", liste print "en tout:", tot return tot
python manage.py runserver 127.0.0.1:8001 # it normally runs at :8000
>>> mystr = 'abcde' >>> mystr[1:] # Remove the first 'bcde' >>> mystr[1:-1] # Remove the first and the last 'bcd' >>> mystr[2:-2] # Remove the first two and the last two 'c' >>>
>>> x = repr(pkt.time) >>> type(x) >>> <type 'str'>
row_val = [str(w) for w in row_val]
import csv from collections import defaultdict # Gather the data from the CSV file d = defaultdict(list) with open('data.csv', 'r') as csvfile: reader = csv.reader(csvfile, delimiter='\t') for row in reader: d[float(row[0])].append(float(row[1])) # Print the mean. for k in d.keys(): print k, sum(d[k])/len(d[k])
>>> print img.shape (342, 548, 3)
In [32]: import random In [33]: task_list = ['task_%d' % (i,) for i in range(1, 17)] In [34]: random.shuffle(task_list) In [35]: persons = zip(*[iter(task_list)]*4) In [36]: persons Out[36]: [('task_7', 'task_2', 'task_15', 'task_13'), ('task_6', 'task_11', 'task_9', 'task_12'), ('task_5', 'task_10', 'task_4', 'task_1'), ('task_3', 'task_8', 'task_14', 'task_16')]
from BeautifulSoup import BeautifulSoup with open('Path/to/file', 'r') as content_file: content = content_file.read() soup = BeautifulSoup(content) [div.extract() for div in soup.findAll('div')] with open('Path/to/file.modified', 'w') as output_file: output_file.write(str(soup))
import re from BeautifulSoup import BeautifulSoup # find ".html" or ".pdf" in a string match = re.compile('\.(html|pdf)') # parse page content status, response = http.request("http://www.example.com") page = BeautifulSoup(response) # check links for link in page.findAll('a'): try: href = link['href'] if re.search(match, href): print href except KeyError: pass
# Run all the tests in the animals.tests module $ ./manage.py test animals.tests # Run all the tests found within the 'animals' package $ ./manage.py test animals # Run just one test case $ ./manage.py test animals.tests.AnimalTestCase # Run just one test method $ ./manage.py test animals.tests.AnimalTestCase.test_animals_can_speak
>>> d = { 'd1': 5, 'd4': 4 } >>> print min(d, key=d.get) d4
def contents(self): return [action for action in dir(self) if all( not action in ['contents','start_response'], not action.startswith('_'), callable(action))]
%matplotlib inline import matplotlib.pyplot as plt for days in grouper.groups.keys(): grouper.get_group(days).hist() plt.show()
test = "level"+level d = {test: l_id} device_level_mapping = DeviceLevelMapping.objects.filter(**d)
@receiver(m2m_changed, sender=Blog.users.through) def blog_users_change(sender, instance, action, **kwargs): if action == 'pre_remove': # This will give you the users BEFORE any removals have happened print instance.users.all() elif action == 'post_remove': # This will give you the users AFTER any removals have happened print instance.users.all()
>>> import re >>> usa = (u'ç¾Žå›½', u'ç±³å›½', u'ë¯¸êµ') >>> re.sub('|'.join(usa), 'USA', u'ç¾Žå›½ is a country.') u'USA is a country.'
servoMin = 500 servoMid = 1500 servoMax = 2500 servoTilt = 1500 servostep = 100 def servo1_up(): global servoTilt servoTilt += servostep if servoTilt > servoMax: servoTilt = servoMax port.write("#15P%dT100\r\n" % servoTilt)
if request.has_permission('edit', context): ... render some template or somehow include ui in current view's template ... else: .. dont ...
chart.data = [(20.5,32.4),(0.01, 0.01)]
def main(): final_message = [] words = ['drat','crap','sucks'] counter = 0 userInput = input("Enter The Sentense: ") # use raw_input if you're using python2.X truncatedInput = userInput[:140] sentence = truncatedInput.split() for word in sentence: if word in words: word = 'x' * len(word) final_message.append(word) print ' '.join(final_message)
>>> a.sum(axis=0) array([ 9, 12, 15])
self.picname = "some_img.png" self.picture = pygame.image.load(self.picname)
In [1]: from sympy import * In [2]: from sympy.abc import x, y, b In [3]: eq1 = Eq(x - 1/y - b, 0) In [4]: eq2 = Eq(2*x - y, 0) In [5]: solve([eq1, eq2], b) Out[5]: {b: x - 1/y}
{% for src in product.source_set.all %} {{src.platform.shortname}} / {{src.sensor.shortname}}<br/> {% endfor %} {% for repo in product.repository_set.all %} {{repo.url}}%} {% endfor %}
for i in tree.get_children(): tree.delete(i)
answer = input('Pick a card:\n') guess = random.choice(card) guesses = 1 while guess != answer: if guess != card: guess = random.choice(card) card.remove(guess) guesses += 1 print('\nWhoopy, I guessed right!\n') print('It only took me %s guesses to guess %s.' % (guesses, answer))
import matplotlib.pyplot as plt import numpy as np mat = np.random.rand(500,5000) plt.imshow(mat, interpolation='none', aspect='auto') plt.show()
import time import sys bar = '>' for i in range(100): bar = '='.join(['', bar]) sys.stdout.write('\r' + bar) sys.stdout.flush() time.sleep(0.5)
3>> ''.join(chr(int(x, 16)) for x in "0x000A 0x000B 0x000C 0x000D".split()).encode('utf-16be') b'\x00\n\x00\x0b\x00\x0c\x00\r'
import cffi ffi = cffi.FFI() # paste the function signature from the library header file ffi.cdef('int ContrastStretch(double* data, int w0 ,int h0, int wf, int hf) # open the shared library C = ffi.dlopen('ContrastEnhancement.so') img = np.random.randn(10,10) # get a pointer to the start of the image img_pointer = ffi.cast('double*', img.ctypes.data) # call a function defined in the library and declared here with a ffi.cdef call C.ContrastStretch(img_pointer, img.shape[0], img.shape[1], 5, 10)
datafile.seek(0)
f2.write(line.replace('12345', str(n)))
Kitten(BaseClient): def create(self, **params): uri = self.BASE_URL data = dict(**(params or {})) r = self._get_response(uri, data) return r if r.status_code == 201 else self._get_response(uri, data) def _get_response(uri, data): return self.client.post(uri, data=json.dumps(data)
class Employee: pass def foo(self): pass Employee.foo = foo
mkdir(...) mkdir(path [, mode=0777]) Create a directory.
links = sel.xpath('//a[contains(@href, "enforcementactions.pdf") and contains(@class, "titlelink")]') for link in links: item = PDFItem() item['title'] = link.xpath('text()').extract()[0] item['url'] = URL + link.xpath('@href').extract()[0]
import os fileobj.flush() # clear buffers fileobj.seek(-256, os.SEEK_END) # 256 bytes from the end fileobj.truncate()
csvinput = 'mainfile.csv' reader = csv.reader(open(r'{0}'.format(csvinput)), delimiter=',') for word in wordlist: filtered = filter(lambda p: word == p[6], reader) csv.writer(open("{}\{}.csv".format(word, word),'w', newline = ''),delimiter=',').writerows(filtered) time.sleep(0.1)
d1 = datetime.strptime('08:10:32', '%H:%M:%S') d2 = datetime.strptime('12:34:45', '%H:%M:%S') time_delta = d2 - d1 float('.'.join(str(time_delta).split(":")[0:2]))
def find_between( s, first, last ): try: start = s.index( first ) + len( first ) end = s.index( last, start ) return s[start:end] except ValueError: return "" original = [{1: "xxx [pear] yyy", 2: "xxx [apple] zzz"}, {0: "aaa [cat] yyy", 1: "bbb [dog] zzz"}] for dct in original: for key in dct: dct[key] = find_between(dct[key], "[", "]")
import pandas as pd df1 = pd.DataFrame([['B0006IYIMW',5.0],['B000A56PUO', 3.0],['B000AMLQQU', 4.0],['B000OVNMGE', 1.0]],columns=('item_id','rating')) df2 = pd.DataFrame([['B0006IYIMW','iphone'],['B000A56PUO', 'nokia'],['B000AMLQQU', 'htc'],['B000OVNMGE', 'samsung']],columns=('item_id','class')) df_merged = df1.merge(df2,on='item_id') print df_merged
l = [ random.randint(1,80) for i in range(150)] l = [l[i:i + 5] for i in range(0, len(l), 5)] for el in l: print(el) [55, 55, 66, 73, 17] [12, 76, 72, 22, 46] .................... [70, 29, 62, 39, 54] [65, 73, 7, 55, 37]
filenames = os.listdir('.') text = '\n'.join(filenames) console.settext(text)
writer.writerow([key] + value)
def incoming_ping(): pass regexes = {"^PING: (.+)": incoming_ping, "more regex": "more meanings"}
class Node(db.Model): children = db.ListProperty(db.Key)
from sklearn.externals import joblib joblib.dump(clf, 'filename.pkl') #then load it later, remember to import joblib of course clf = joblib.load('filename.pk1')
v = [1,2,3,4,3,1,2] any([2,3] == v[i:i+2] for i in xrange(len(v) - 1))
D = {'a':1,'b':2,'c':3} inverse = {v: k for k, v in D.items()} print(inverse) # {1: 'a', 2: 'b', 3: 'c'}
'loggers': { #root logger '': { 'handlers': ['file'], 'level': 'DEBUG', }, # other loggers ... }
import uuid hdr="\xff"*6 mac=uuid.getnode() txt="%012X"%mac as_b=[int("".join(x),16) for x in map(None,*(txt[::2],txt[1::2]))] as_s="".join(chr(b) for b in as_b) out=hdr+as_s
# ... skipped ... if __name__ == "__main__": for i in range(5): unittest.main(exit=False)
from datetime import datetime, timedelta class MyObject: startTime = models.DateTimeField(default=datetime.utcnow) expiredTS = models.DateTimeField( default=lambda: datetime.utcnow() + timedelta(days=1))
ans = np.logical_and( np.logical_and(array1 != 0, array2 != 0), array1 == array2 )
username = "Max" query = """ SELECT username, password FROM UserInfo.User WHERE username = %s """ mycursor.execute(query, (username, )) username, password = mycursor.fetchone() # here we can unpack the tuple returned from fetchone
with open('dictionary.txt') as fin: words = fin.read().strip().split('\n') import re import time expr = re.compile(r'a[^aeiouy]+e$', re.I) # Of course, this extends easily to using a dictionary, too def bench(): start = -time.time() matches = [word for word in words if expr.search(word)] return start + time.time()
location_in = 'London, Greater London, England, United Kingdom' locations = location_in.split(', ') location_out = [', '.join(locations[n:]) for n in range(len(locations))]
>>> a = 'xyz-abc' >>> a.find('-') # return the index of the first instance of '-' 3 >>> a[a.find('-'):] # return the string of everything past that index '-abc'
c.InteractiveShellApp.exec_lines = [ 'import sys,os; sys.path.append(os.getcwd())' ]
for i, (a, b) in enumerate(l): # i will be the index of (a, b) in l
In [71]: A = [['A',[1,2,3]],['D',[3,4]],['E',[6,7]],['F',[1]],['G',[7,6,5,4]]] In [72]: [[x[0],x[1][:2]] for x in A] Out[72]: [['A', [1, 2]], ['D', [3, 4]], ['E', [6, 7]], ['F', [1]], ['G', [7, 6]]]
violin_parts = plt.violinplot(...) for pc in violin_parts['bodies']: pc.set_facecolor('red') pc.set_edgecolor('black')
import pyPdf if pyPdf.PdfFileReader(open("file_name.pdf", 'rb')).isEncrypted: print "Rut ro, it's encrypted." # skip file? Write to a log? else: print "We're clear." # Do stuff with the file.
a = re.compile(r"""\d + # the integral part \. # the decimal point \d * # some fractional digits""", re.X) b = re.compile(r"\d+\.\d*")
#!/usr/bin/python from Tkinter import * from tkFileDialog import askopenfilename root = Tk() root.withdraw() print askopenfilename()
In [18]: from pandas import DataFrame In [19]: from numpy.random import randn In [20]: df = DataFrame(randn(10, 2)) In [21]: df2 = DataFrame(randn(10, 2)) In [22]: axs = df.hist() In [23]: for ax, (colname, values) in zip(axs.flat, df2.iteritems()): ....: values.hist(ax=ax, bins=10) ....: In [24]: draw()
function(doc) { if (doc.type == "user") { emit([doc._id,0],null); } else if(doc.type == "project") { emit([doc.username,doc._id],null); } }
def test(): a=[set([1,2,3]),set([3,4,5])] x=set([1,4]) for i in a: diff=i.difference(x) # a[idx]=diff print a
>>> from scipy.stats import mannwhitneyu >>> a = np.arange(100) >>> b = np.arange(100) >>> np.random.shuffle(b) >>> np.corrcoef(a,b) array([[ 1. , -0.07155116], [-0.07155116, 1. ]]) >>> mannwhitneyu(a, b) (5000.0, 0.49951259627554112) # result for almost not correlated >>> mannwhitneyu(a, a) (5000.0, 0.49951259627554112) # result for perfectly correlated
PyObject* module = PyImport_AddModule("__main__"); PyObject* o = PyObject_GetAttrString(module , "__NAME__"); if (PyString_Check(o)) { const char* name = PyString_AsString(o); // don't delete or modify "name"! } Py_DECREF(o);
class MainWindow(QMainWindow): def __init__(self): QMainWindow.__init__(self) layout = QVBoxLayout() button1 = QPushButton("win2", self) layout.addWidget(button1) button1.clicked.connect(self.showwin2) self.w2 = win2(self) def showwin2(self): self.w2.show() self.w2.raise_()
>>> import re >>> NAMES_AND_VALUES = re.compile(r'\w+') >>> OPERATORS = re.compile(r'(?:\+|\*|\-|\/)+') >>> string = '((a * 5) // ((10 - y) + z))' >>> NAMES_AND_VALUES.findall(string) ['a', '5', '10', 'y', 'z'] >>> OPERATORS.findall(string) ['*', '//', '-', '+']
In [18]: a Out[18]: x1 x2 0 0 5 1 1 6 2 2 7 3 3 8 4 4 9 In [19]: a.x2 = a.x2.shift(1) In [20]: a Out[20]: x1 x2 0 0 NaN 1 1 5 2 2 6 3 3 7 4 4 8
with open("image.bin", "rb") as b_f: OverScan = 0 sizeY = 480 reg = OverScan + 10 binary_data = b_f.read(2*192*(1+sizeY)*reg)
movearray[imageasarray.T > 0] += 1
class DateField(Field): ... def pre_save(self, model_instance, add): if self.auto_now or (self.auto_now_add and add): value = datetime.date.today() setattr(model_instance, self.attname, value) return value
import random a = [12,2,3,4,5,33,14,124,55,233,565] b = a[:] random.shuffle(b) # b: [55, 12, 33, 5, 565, 3, 233, 2, 124, 4, 14]
def load_some_script(): pyfd = open("some_python_script.py", "r") src = pyfd.read() pyfd.close() exec(src, globals()) # execute the code in the global scope load_some_script() some_function('foo', 'bare') # should now be available at module level.
def addToList(funcList): '''Decorator that adds the function to a given list''' def actual_decorator(f): funcList.append(f) return f return actual_decorator class MyClass(object): funcList = [] @addToList(funcList) def some_function(self, name): print 'Hello,', name
from copy import deepcopy dist = getDistances(deepcopy(qt), ex)
vars = list(set(permutations(vars)))
ftp.retrlines('RETR ' + weatherfile, callback=lambda line: handleData(line, other_arg, another_arg))
print(np.array(list(map(lambda v: re.sub(r'^A','XA', v) ,arr)))) % outputs: ['XAB' 'XAC' 'XAB' 'XAC' 'XAD']
def myfunc(col): return np.sum(col) x.apply(myfunc) Out[1]: A 6 B 21 C 5 dtype: int64
links = Link.objects.select_related().annotate(votes=Count('vote')) for link in links: delta_in_hours = (int(datetime.now().strftime("%s")) - int(link.created.strftime("%s"))) / 3600 link.popularity = ((link.votes - 1) / (delta_in_hours + 2)**1.5) links = sorted(links, key=lambda x: x.popularity, reverse=True)
def func2(qtWnd): # Self should go here if func2 is beloning to some class, if not, then it is not necessary qtWnd.ui.statusbar.showMessage("This should work now!") if __name__ == "__main__": app = QtGui.QApplication(sys.argv) myapp = StartQT4() myapp.show() func2(myapp) sys.exit(app.exec_())
import pandas as pd df1 = pd.read_csv("read.csv") run = 0 def crawl(a): global run run = run + 1 #Create x, y df2 = pd.DataFrame([[x, y]], columns=["X", "Y"]) if run == 1: df2.to_csv("output.csv") if run != 1: df2.to_csv("output.csv", header=None, mode="a") df1["Column A"].apply(crawl)
import imaplib gmail = imaplib.IMAP4_SSL('imap.gmail.com') gmail.login('username@gmail.com', 'password') ...
^[a-z0-9]+\.[a-z0-9]{1,4}$
import matplotlib.pyplot as plt plt.bar(pos_freq['pos'], pos_freq['freq']) plt.show()
$.ajax({ url: "http://localhost:6543/linefollower/7/send_result", type: "POST", data: JSON.stringify({"results": [... "team_name": "IT Vennad", "id": 57}]}), contentType: "application/json; charset=utf-8", dataType: "json" }
{ "anyOf": [ { "type": "number", "minimum": 0, "maximum": 360, "exclusiveMaximum": true }, { "type": "null" } ] }
def callback(event): canvas = event.widget x = canvas.canvasx(event.x) y = canvas.canvasy(event.y) print canvas.find_closest(x, y)
>>> import numpy as np >>> np.genfromtxt("file.dat", skip_header=1, delimiter='\t') array([[ 10. , 0. ], [ 10.1, 0. ], [ 10.2, 0. ], [ 10.3, 0. ], [ 10.4, 0. ], [ 10.5, 0. ]])
In [8]: l Out[8]: [['a', 'b', 'c'], ['b', '', ''], ['a', '', ''], ['a', 'c', 'd'], ['b', 'c', ''], ['b', 'c', '']] In [9]: [ filter(None, a) for a in l] Out[9]: [['a', 'b', 'c'], ['b'], ['a'], ['a', 'c', 'd'], ['b', 'c'], ['b', 'c']]
import datetime def yourFunction(...): expireTime = datetime.datetime.now() #Check the docs, about adding 29 days, etc. self.response.set_cookie('name', 'value', expires=expireTime, path='/', domain='example.com')
$secret = '2fd0bba6b1774ed391c1ff8467f52a5d'; $code = 'UNIA'; $valid_institution = array('amount' => '0.0', 'code' => $code, 'identifier' => ' '); $text = $valid_institution['code'] . ":" . $valid_institution['identifier'] . ":" . $valid_institution['amount'] . ":" . $secret; print strtoupper(hash("md5", $text));
import gtk d = gtk.Dialog() d.add_buttons(gtk.STOCK_YES, 1, gtk.STOCK_NO, 2) label = gtk.Label('Do you like GTK?') label.show() d.vbox.pack_start(label) answer = d.run() print answer
>>> nums [1, 2, 3, 4, 5, 6] >>> [sum(nums[i:i+3]) for i in range(0, len(nums),3)] [6, 15] >>>
def get_cell_content(self): currentRow = self.tableWidget.currentRow() currentCol = self.tableWidget.currentColumn() if currentRow > -1: text = (self.tableWidget.item(currentRow, currentCol).text(), ) self.textBrowser.setHtml(text)
UserProfile.objects.select(extra={'birth_day': 'extract(day from birthDate)'}).order_by('-birth_day')
with open("exports.txt",'r') as infile: exports = {} for line in infile: parts = line.partition('\t') exports[parts[0]] = parts[-1].strip().split(', ') for country, exports in exports.iteritems(): print country print exports
"powerpoint.exe /s <filename>.ppt"
if (1 == 1 and 2 == 2 and 3 == 3): # ...
my_file = open(filename, "r") lines_of_file = my_file.readlines() lines_of_file.insert(-1, "This line is added one before the last line") my_file.writelines(lines_of_file)
In [10]: raw[faulty.isnull()] Out[10]: NE NW S timestamp 0 15 12 13 1 NaN NaN 13 2 15 12 13 3 NaN NaN 11
cdef extern from "foo.h": void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset) cdef int PROT_READ cdef int MAP_ANONYMOUS ...
text = file.read() text = re.sub(r'[.,:;-_]', '', text) text = text.upper() words = re.split(r'\\s+', text) c = Counter() c.update(words)
goodUrl = false while (!goodUrl) url = urlqueue.Dequeue(); lock domainsInUse if domainsInUse.Contains(url.domainName) urlqueue.Add(url) // put it back at the end of the queue else domainsInUse.Add(url.domainName) goodUrl = true
class MyFormatter(Formatter): def format_field(self, value, format_spec): if format_spec == 't': # Truncate and render as int return str(int(value)) return super(MyFormatter, self).format_field(value, format_spec) MyFormatter().format("{0} {1:t}", "Hello", 4.567) # returns "Hello 4"
class C(object): @property def dx(self): return self._dx def __init__(self, dx = 1): self._dx = dx
data = list() with open("data.txt", "r") as f: for line in f.readlines(): if line != '\n': listLine = line.split(";") data.append("0;{}\n".format(listLine[0])) with open('data.txt', 'w') as f: for line in data: f.write(line)
import tkinter frame = tkinter.Tk() frame.config(height=370, width=670, bg="#C2C2D6") entry = tkinter.Entry(frame, exportselection=0) entry.pack(padx=100, pady=100, expand=1, fill='x') frame.mainloop()
mylist = [(A,8), (A,3), (A,3), (A,3)] def indices( mylist, value): return [i for i,x in enumerate(mylist) if x==value] print indices(mylist, (A,3)) # [1, 2, 3]
import datetime ist_time = datetime.utcnow() + datetime.timedelta(hours=5, minutes = 30) # Turn this into a time object (no day information). ist_time = ist_time.time() if datetime.time(9, 55) <= ist_time <= datetime.time(16, 1): ...
coa1.to_csv('0000-2951-test.txt',index=False, sep='\t', encoding = 'utf-16')
df.apply(myfunction, args=(df2,x,y,z), axis=1).stack().reset_index(drop=True)
import threading dummy_event = threading.Event() dummy_event.wait()
class _Context: foo = 'bar' render(request, 'example.html', vars(_Context))
def ravel_index(x, dims): i = 0 for dim, j in zip(dims, x): i *= dim i += j return i
>>> from __future__ import print_function >>> def f(x, y): pass ... >>> f(print(1), print(2)) 1 2 >>> [print(1), print(2)] 1 2 [None, None] >>> {1:print(1), 2:print(2)} 1 2 {1: None, 2: None} >>> def f(x=print(1), y=print(2)): pass ... 1 2
import glob import os import re os.chdir( "C:/headers" ) txt = open( 'C:/files.txt', 'w' ) for file in glob.glob( "*.h" ): with open( file ) as f: contents = f.read() [...] if 'struct' in contents: txt.write( "%s\n"% re.sub('\.h$', '', file) ) txt.close()
while (userin!="c" or low == high): userin = raw_input()
>>> import numpy as np >>> arr = np.fromfunction(lambda i,j: i+j, (6,6)) >>> print arr [[ 0. 1. 2. 3. 4. 5.] [ 1. 2. 3. 4. 5. 6.] [ 2. 3. 4. 5. 6. 7.] [ 3. 4. 5. 6. 7. 8.] [ 4. 5. 6. 7. 8. 9.] [ 5. 6. 7. 8. 9. 10.]]
import numpy as np import matplotlib.pyplot as plt def _profile(ax, x, y): ln, = ax.plot(x, y) # return the Artist created return ln def profile_matrix(n, m): fig, ax_array = plt.subplots(n, m, sharex=True, sharey=True) for ax in np.ravel(ax_array): _profile(ax, np.arange(50), np.random.rand(50)) profile_matrix(3, 3)
entire_set = len(data) == len(train) + len(test) logging.log(logging.WARNING if entire_set else logging.INFO, "Entire data set allocated => {0}".format(entire_set))
def convert_bool(col): if str(col).title() == "True": #check for nan return "YES" elif str(col).title() == "False": return "NO" else: return col pandas.read_csv(file_in, converters={"C3": lambda x:convert_bool(x)})
def forwards(self, orm): db.execute("CREATE TABLE new_table LIKE old_table") db.execute("INSERT new_table SELECT * old_table") def backwards(self, orm): db.drop_table('new_table')
def countedSubWords(word, dictionary): fragments = set( word[i:j] for i in range(len(word)) for j in range(i+3, len(word)+1) ) subWords = fragments.intersection(dictionary) return (len(subWords), subWords) def main(): with open('wordlist.txt') as words: dictionary = set(word.strip() for word in words if len(word.strip()) > 2) print max(countedSubWords(word, dictionary) for word in dictionary)
{ "display_name": "Python 2", "language": "python", "argv": [ "/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/bin/python2.7", "-m", "ipykernel", "-f", "{connection_file}" ] }
def temperatureTable(elevation): tempTable = list() for temperature in range(225, 350, 5): candyTemp = candyTemperature(temperature, elevation) tempTable.append((candyTemp, temperature)) return tempTable
max_len = 0 max_key = "" for key in d: cur_len = len(d[key]) if cur_len>max_len: max_key = key max_len = cur_len print max_key
for z in range(1, numSectors+1): labels = input('Enter the label for sector {z}: '.format(z=z)) # Test result Enter the label for sector 1: Hello Enter the label for sector 2: World Enter the label for sector 3: !
wader/ cli/ common/ contrib/ gtk/ controllers/ models/ views/ test/ utils/
from pymongo import MongoClient from pymongo import database as DB conn = MongoClient("127.0.0.1", "27017") # host, port db = DB.Database(conn, "my_db_name") # db name db.authenticate("username", "password") # username, password
print '''<html> <head><title>My first Python CGI app</title></head> <body> <p>Hello, 'world'!</p> </body> </html>'''
form = PortfolioForm() tuple((field_name, form.fields[field_name].widget.__class__) for field_name in form.fields)
df['Number'] = df.index.astype(str) Name Number 1 Rob 1 2 Mark 2 3 Alex 3
dfVariableImportance.plot(xticks=dfVariableImportance.index)
with open('input') as f: sorted_file = sorted(f) #save to a file with open('output') as f: f.writelines(sorted_file) #write to stdout import sys sys.stdout.writelines(sorted_file)
def to_hex_string(unsigned_64bit_int): return '{:016x}'.format(my_unsigned_64bit_int) def to_unsigned_64bit_int(hex_string): return int(hex_string, 16)
try: self._connection.close() except AttributeError: pass self._connection = psycopg2.connect(connection_string) return self._connection
process.stdin.write(ser.read())
In [600]: df[df.duplicated('c1') | df.duplicated('c1', take_last=True)] Out[600]: c1 c2 0 1 A 1 1 B 2 2 A 4 2 C 5 4 E 6 4 E
def aircraftListBoxRefresh(): sqlConnect=sqlite3.connect("fglconfdb") sqlCursor=sqlConnect.cursor() sqlCursor.execute("SELECT fgAircraftDir FROM fglconfig") adl=sqlCursor.fetchall() for x in adl: aircraftDirectories.append(x) aircraftDirectories=[] aircraftDir=StringVar(value=aircraftDirectories) aircraftListBox=Listbox(mainframe,height=7,width=100,listvariable=aircraftDir) aircraftListBox.place(x=170,y=170)
>>> from django.contrib.auth.models import User >>> user_type = ContentType.objects.get_for_model(User) >>> user_type <ContentType: user>
from scipy.optimize import fsolve func = lambda r : (1./2.)*((CF**2)/(r))+CT*r**(gamma)+bm/(2.*muo) - CM # assign some numeric values to CF, CT, gamma, bm, muo, CM sol = fsolve(func, 1) # 1 is the initial guess for the solver
import ast L = ["hello", "3", "3.64", "-1"] def tryeval(val): try: val = ast.literal_eval(val) except ValueError: pass return val print [tryeval(x) for x in L]
a = ephem.separation((panel_az, panel_alt), (sun_az, sun_alt)) print a
regex = re.compile(r'\{# xxx #\}(.*?)\{# zzz #\}')
In [13]: from tensorflow.models.embedding.word2vec_optimized import FLAGS In [14]: from tensorflow.models.embedding.word2vec_optimized import main In [16]: main(_) --train_data --eval_data and --save_path must be specified. An exception has occurred, use %tb to see the full traceback. In [17]: FLAGS.train_data = "this" In [18]: FLAGS.eval_data = "that" In [19]: FLAGS.save_path = "some_path" In [20]: main(_) I tensorflow/core/common_runtime/local_device.cc:40] Local device intra op parallelism threads: 8
index = self.selectedIndexes()[0] crawler = index.model().itemFromIndex(index)
In [58]: re.findall(r'\d+%', text) Out[58]: ['3%', '3%', '3%', '7%', '7%', '10%', '10%', '10%', '11%', '50%', '75%', '77%', '82%', '91%', '100%', '100%', '100%']
import numpy as np import matplotlib.pyplot as plt x = np.random.random(100) normed_value = 2 hist, bins = np.histogram(x, bins=20, density=True) widths = np.diff(bins) hist *= normed_value plt.bar(bins[:-1], hist, widths) plt.show()
class MyAdmin(admin.ModelAdmin): def __init__(self, model, admin_site): general_fields = ['notes', 'created_at', 'updated_at'] fields = [f.name for f in self.model._meta.fields if f.name not in general_fields] self.fields = fields + general_fields super(admin.ModelAdmin, self).__init__(model, admin_site)
>>> import re >>> strs = "@ sample This is a sample string $ 1.00 # sample" >>> re.sub(r'([@#$])(\s+)([a-z0-9])', r'\1\3', strs, flags=re.I) '@sample This is a sample string $1.00 #sample'
for line in file: data = re.search('(\d+\.\d+)\|(-\d+\.\d+)\|(.*?)\|(.*?)\|(\d+:\d+\s+\w+)\sTO\s(.*?)',line) groups = data.groups() # do the magic...
class Dummy(object): def __init__(self, mylist=None): self.mylist = mylist if mylist is not None else []
>>> re.findall(r'Food: ([^|]*)', 'Food: is great|foo') ['is great'] >>> re.findall(r'Food: ([^|]*)', 'Food: is great') ['is great']
import libtorrent as lt piece_size = 256 * 1024 creator_str = "python-libtorrent" thetracker = "your desired tracker" theurlseed = "your desired url seed" fs = lt.file_storage() lt.add_files(fs, "/tmp/torrentme") fs.num_files() t = lt.create_torrent(fs, piece_size) t.add_tracker(thetracker) lt.set_piece_hashes(t, ".") t.set_creator(creator_str) t.add_url_seed(theurlseed) t.generate()
`Sphinx docs <_build/html/index.html>`_
import re pat = re.compile(r'cat|Dog', re.I) db.collection.find({ "Animal": {'$regex': pat}})
import sys sys.argv.append('syncdb') from django.core.management import execute_manager import settings # Your project's settings. Assumed to be in the same directory. execute_manager(settings)
print("Starting script...") sys.stdout.flush() build.run()
def my_pre_post_callback(resource, request): allowId = request.args.get('allowId') ...
shared_items = set(x.items()) & set(y.items()) print len(shared_items)
In [126]: df.gt(s, axis=0) Out[126]: Stock1 Stock2 index Date1 True True Date2 False True
myDict.pop(key, None)
import sys from StringIO import StringIO input_text = 'whatever you want the function to read from input()' old_stdin = sys.stdin #Reassign stdin to a StringIO object sys.stdin = StringIO(input_text) f() sys.stdin = old_stdin
>>> import platform >>> platform.win32_ver() ('XP', '5.1.2600', 'SP2', 'Multiprocessor Free') >>> platform.system() 'Windows' >>> platform.version() '5.1.2600' >>> platform.release() 'XP'
print fromstring(source).xpath('.//form[@action]')[0].get('action')
filename = str(colorHair) + str(colorEye) + str(styleHair) + str(colorSkin) + ".png"
>>> import subprocess >>> proc = subprocess.Popen('cmd.exe', stdin = subprocess.PIPE, stdout = subprocess.PIPE) >>> stdout, stderr = proc.communicate('dir c:\\') >>> stdout 'Microsoft Windows [Version 6.1.7600]\r\nCopyright (c) 2009 Microsoft Corporatio n. All rights reserved.\r\n\r\nC:\\Python25>More? '
import requests url = 'http://ES_search_demo.com/document/record/_search?pretty=true' data = '{"query":{"bool":{"must":[{"text":{"record.document":"SOME_JOURNAL"}},{"text":{"record.articleTitle":"farmers"}}],"must_not":[],"should":[]}},"from":0,"size":50,"sort":[],"facets":{}}' response = requests.get(url, data=data)
>>> class ChipCar(object): ... def __repr__(self): ... return '{}() object, id => 0x{:x}'.format(type(self).__name__, id(self)) ... >>> ChipCar() ChipCar() object, id => 0x1046c33d0
import matplotlib.pyplot as plt import numpy as np x = np.array([0,1,2,3]) y = np.array([20,21,22,23]) my_xticks = ['John','Arnold','Mavis','Matt'] plt.xticks(x, my_xticks) plt.plot(x, y) plt.show()
query = open('foo.sql', 'r').read() cursor.execute(query)
import random def decision(probability): return random.random() < probability
python: - 2.6 - 2.7 - 3.2 - 3.3 - pypy install: - if [[ $TRAVIS_PYTHON_VERSION == 2.6 ]]; then pip install importlib unittest2; fi - pip install -r requirements.txt
import sqlite3 con = sqlite3.connect("db") con.execute("create table users(id, name, avatar)") con.execute("insert into users(id, name, avatar) values (?, ?, ?)", (friend.id, friend.name, friend.avatar)) con.commit() for row in con.execute("select * from users") print row con.close()
user_choices = {} i = 1 print '\nPhone listings:\n' for record in pBook: key = i user_choices[key] = record i += 1 print str(key) + ')', record + ':', 'Home', pBook[record]['home'] + ',', 'Cell', pBook[record]['cell'] print ''
subprocess.call(["find_info", image, json_file], env=dict(TEST__LIB_PATH="/path/requried/for/test", **os.environ))
import networkx as nx data=[[1, 5, 6], [2, 3, 5, 6], [2, 5], [7]] G = nx.DiGraph() for path in data: G.add_nodes_from(path) G.add_path(path) ts=nx.topological_sort(G) print(ts) # [7, 2, 3, 1, 5, 6]
def timestamp(time): form dateutil import parser time = parser.parse(time) #Converts string in to datetime object from pytz import UTC if time.tzinfo: #Checks if the time is aware or naive time = time.astimezone(UTC) #Converts aware time into UTC return time.strftime('%Y%m%dT%H%M%SZ')
>>> import re >>> a = ['rhubarb','plain custard','jam','vanilla custard','pie','cheesecake'] >>> [i for i, s in enumerate(a, start=1) if re.search('custard', s)] [2, 4]
a http://my.acunote.site/ticket/$1 # Acunote ticket $1 g https://github.com/peritor/webistrano/commit/$1 # Changeset $1 on Github y http://www.yiiframework.com/doc/api/1.1/$1 # Yii documentation for $1
with io.open('output.txt', 'w', encoding='utf-8') as fp:
import urlparse # if we're pre-2.6, this will not include parse_qs try: from urlparse import parse_qs except ImportError: # old version, grab it from cgi from cgi import parse_qs urlparse.parse_qs = parse_qs
plt.imshow(A, interpolation='nearest', aspect='auto')
In [32]: test3.index = ['f','g','z'] test3 Out[32]: f 1 g 2 z 3 dtype: int64
print "started" self.SendCommand(kEdsCameraCommand_PressShutterButton, kEdsCameraCommand_ShutterButton_Completely_NonAF) sleep(2) self.SendCommand(kEdsCameraCommand_PressShutterButton) print "finished"
A.objects.filter(name='name_a', type='type_a', b__name='name_b', b__type='type_b').distinct()
for item, qnt in request.POST: {do something with each item, for example where you can sum total}
import ast for item in ["[u'cheese']", "[u'grapes', u'oranges']", "[u'apple']"]: for food in ast.literal_eval(item): print(food)
In [379]: df_sample['C'].str.get_dummies(sep=',') Out[379]: CAT1 CAT2 CAT3 0 1 0 0 1 0 1 0 2 0 0 1 3 1 1 0 4 0 0 1
class Example(Enum): this = 1 that = 2 dupe = 1 those = 3 print(len(Example)) # duplicates are not counted # 3 print(list(Example)) # [<Example.this: 1>, <Example.that: 2>, <Example.those: 3>] print(Example['this']) # Example.this print(Example['dupe']) # Example.this print(Example(1)) # Example.this
z_bin = numpy.linspace(0.0, 10.0, 21) for i in range(len(z_bin)-1): zmin = z_bin[i] zmax = z_bin[i+1] # do some things with zmin/zmax
from Bio.Restriction.Restriction import RestrictionBatch sequence=('ACGGCGAATTCTATCGATAACTG...') # Read enzyme name from input. enzyme_name = input("Enter enzyme name:\n") # E.g EcoRI print (type(enzyme_name)) # <type 'str'> # Get RestrictionType by name batch = RestrictionBatch() batch.add(enzyme_name) enzyme = batch.get(enzyme_name) print (type(enzyme)) # RestrictionType print (enzyme.site in sequence) # True
a = np.array([1, 2, 3]) t = tuple(a)
conda remove nbconvert pip install nbconvert
self.composerMap = QgsComposerMap(self.composition, 5,2,408,286) self.composition.addComposerMap(self.composerMap) self.composition.moveItemToBottom(self.composerMap) self.composition.moveSelectedItemsToBottom()
import os goal_dir = os.path.join(os.getcwd(), "../../my_dir") print goal_dir # prints C:/here/I/am/../../my_dir print os.path.normpath(goal_dir) # prints C:/here/my_dir print os.path.realpath(goal_dir) # prints C:/here/my_dir print os.path.abspath(goal_dir) # prints C:/here/my_dir
mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9] print [mylist[i:i+4] for i in range(0, len(mylist), 4)] # Prints [[1, 2, 3, 4], [5, 6, 7, 8], [9]]
>>> a = """a0 a1 a2 """ >>> b = """b0 b1 b2 """ >>> temp = [x.splitlines() for x in (a, b)] >>> print '\n'.join(' '.join(x) for x in zip(*temp)) a0 b0 a1 b1 a2 b2
>>> re.sub(r'\[.*?\]|\(.*?\)|\W', ' ', 'T.N.T. (live) [nyc]') 'T N T '
from threading import Timer def delayed(seconds): def decorator(f): def wrapper(*args, **kargs): t = Timer(seconds, f, args, kargs) t.start() return wrapper return decorator @delayed(1) def foo(): print('foo') foo() print('dudee')
print A col1 col2 col3 0 aa 1 2 1 bb 2 5 print B col1 col2 col3 0 aa 1 2 1 aa 1 3 2 bb 2 5 print pd.merge(A,B, on=['col1','col2','col3'], how='left') col1 col2 col3 0 aa 1 2 1 bb 2 5
item = db.get(db.Key.from_path('Notes', id))
def f(...): ... f = staticmethod(f) @staticmethod def f(...): ...
import tkinter from functools import partial def font_config(widget, fontslant, event): widget.configure(font=fontslant) parent = tkinter.Tk() text = tkinter.Label(parent, text="Hello Text") text.bind("<Enter>", partial(font_config, text, "Helvetica 9 italic")) text.bind("<Leave>", partial(font_config, text, "Helvetica 9")) text.pack() tkinter.mainloop()
In [1]: import networkx as nx In [2]: import numpy as np In [3]: G = nx.Graph() In [4]: feature_vector=np.array([1,7,22]) In [5]: G.add_node(1,v=feature_vector) In [6]: G.node[1]['v'] Out[6]: array([ 1, 7, 22])
a = [opt1, opt2, opt3, opt4, opt5] data_clients = [] for j in a: if j is not None: user, db = j.split("/") db = country_assoc(int(db)) client = Client(None, user, db) data_clients.append(client.get_user())
#!/usr/bin/python from csv import DictReader from collections import defaultdict users = defaultdict(dict) for row in DictReader(open('./file.csv', 'rb')): key = row.pop('User') tmp_dict = {int(k):int(v) for k,v in row.iteritems() if v != ''} users[key] = tmp_dict >>> users {'27671':{89:7, 91:29, 92:49}, ... }
from dateutil.parser import parse s1 = "2013-11-21T07:45:51ZUTC+0000" # Europe s2 = "2013-11-21T13:15:28ZUTC+0530" # India def new_parse(string): return parse(string.replace('ZUTC', '')) dt1 = new_parse(s1) dt2 = new_parse(s2) print (dt1-dt2).total_seconds()
#/usr/bin/python import subprocess cpu = subprocess.check_output(["top -n 5 -b | awk '/sshd/ {print $9}'"], shell=True) values = cpu.split() print values
docopt('./myapp [-a [-b BVAL] | -c]')
#Modified code from main loop: s = serial.Serial(5) #Modified code from thread reading the serial port while 1: tdata = s.read() # Wait forever for anything time.sleep(1) # Sleep (or inWaiting() doesn't give the correct value) data_left = s.inWaiting() # Get the number of characters ready to be read tdata += s.read(data_left) # Do the read and combine it with the first character ... #Rest of the code
for i in range(len(myList)): f.write(str(time.strftime("%Y_%m_%d_%H_%M_%S", time.localtime(currentTime + i)))) f.write(',') f.write(" ") f.write(str(myList[i])) f.write('\n')
perl -lne 'print $& while /[0-9x]{1,3}\.[0-9x]{1,3}\.[0-9x]{1,3}\.[0-9x]{1,3}/g' my_input_file
text = "seeking help on possible homework task" raw_words = text.split(" ") positive_words = ['seeking','help'] negative_words = ['homework'] positive_score = len([word for word in raw_words if word in positive_words]) negative_score = len([word for word in raw_words if word in negative_words]) total_score = positive_score - negative_score
>>> df2 = df.asn.str.split(',').apply(pd.Series) >>> df2.index = df.set_index(['Name', 'count']).index >>> df2.stack().reset_index(['Name', 'count']) Name count 0 0 Org1 1 asn1 1 Org1 1 asn2 0 org2 2 asn3 0 org3 5 asn4 1 org3 5 asn5
import numpy as np import pandas as pd import matplotlib.pyplot as plt dataframe = pd.DataFrame({'Col': np.random.uniform(size=1000)}) plt.scatter(dataframe.index, dataframe['Col'])
str1 = "Start" fp = open("C:...test.txt") check = 0 for i,line in enumerate(fp): if str1 in line: check = i continue if "contain" in line and (i == check + 3): print "OK" else: print "NOK"
@api.onchange('fieldx') def do_stuff(self): if self.fieldx == x: self.fieldy = 'toto'
class my_array: def __init__(self, lis): self.array = lis def sum(self): sm = 0 for a in self.array : sm += a return sm #or simply use the built-in function `sum()` ... >>> x = my_array([3,5,6]) >>> x.sum() 14
with open("film.txt", "w") as f: for root, _, files in os.walk(os.getcwd()): for file in files: if file.endswith((".avi", ".mp4")): f.write(file)
list1 = [0,1,2] list2 = [0,1] list3 = [0,1,2,3] listOfLists = [list1,list2,list3] for list in itertools.product(*listOfLists): print(list)
with open('somefile') as fileobj: lines = list(fileobj) for index in indices: print lines[index]
>>> import pickle >>> banana, beans = ['Banana' , .54 , 'No' , 'Food'], ['Beans' , 1.39, 'Yes', 'Food'] >>> food = [banana, beans] >>> with open('data', 'wb') as f: pickle.dump(food, f) >>> with open('data', 'rb') as f: print pickle.load(f) [['Banana', 0.54, 'No', 'Food'], ['Beans', 1.39, 'Yes', 'Food']]
>>> re.findall('<span>([a-zA-Z]+)</span>(.*?)([0-9]+)',string) [('Name', '</p><div class="info"><span>', '100')]
In [1]: import BeautifulSoup In [2]: from urllib import urlopen In [3]: html = urlopen('http://www.gutenberg.org/files/82/82-h/82-h.htm').read() In [4]: soup = BeautifulSoup.BeautifulSoup(html) In [5]: len(soup('h2')) Out [5]: 58
>>> [list(x) for x in output.split('\n')] [['S', '.', '#', '#', '.', '.', '.', '.', '.', '.'], ['#', '.', '#', '#', '.', '.', '#', '#', '#', '.'], ['#', '.', '#', '#', '#', '.', '#', '#', '#', '.'], ['#', '.', '.', '.', '.', '.', '#', '#', '#', '.'], ['#', '#', '#', '.', '#', '#', '#', '#', '#', 'S']]
>>> "1138".zfill(10) 0000001138
./manage.py runserver 0.0.0.0:8000
import re a="BILLY: The sky is blue. SALLY: It really is blue. SAM: I think it looks like this: terrible." print re.split(r"\s(?=[A-Z]+:)",a)
(sympify("1/(x+1)+4*x/(x-1)+3-4*x**2+10*x**2", evaluate=False)).args
def sublist(list1, list2): n = len(list1) return any((list1 == list2[i:i + n]) for i in range(len(list2) - n + 1)) print sublist([2, 3], [1, 2, 3, 4, 5]) print sublist([1, 3], [1, 2, 3, 4, 5]) print sublist([1, 2, 3], [1, 2, 1, 2, 3, 4])
from code import InteractiveConsole livePythonInterpreters= {} class LivePythonCommand(sublime_plugin.TextCommand): def run(self, edit): ic = InteractiveConsole() global livePythonInterpreters livePythonInterpreters[self.view.buffer_id()] = ic class LivePythonListener(sublime_plugin.EventListener): def on_modified(self, view): ic = livePythonInterpreters[view.buffer_id()]
<a href="{{ url_for('view_transactions', page=transactions.next_num, account=account_parm, category=category_parm, ...) }}?{{request.query_string}}">{{ _('>>') }}</a>
pages = Page.objects.annotate(num_countries=Count('country')) pages[0].num_countries # 3 pages[1].num_countries # 4
import uuid import base64 gen_id = uuid.uuid1() # generate type 1 UUID id_bytes = gen_id.bytes # take its bytes encoded = base64.b64encode(id_bytes, b'-_') encoded = encoded.replace(b'=', b'') # remove the padding bytes result = '_' + encoded.decode('ascii') # result is a string with '_' prepended.
>>> sample=[[1,[1,0]],[1,1]] >>> from itertools import chain >>> print [1,0] in chain(*sample) True
[Tile(el.id) for el in <tile descriptions> for _ in range(el.n_tiles)]
myList = [] for line in myOpenFileObj: myList.append(line)
def ballSnapTop(): ballRect.top = playerRect.bottom - distance
import bisect i = bisect.bisect_left(dates, dates[i1]-timedelta(days=interval))
class Beer(object): def __init__(self, temp): self.__T = temp @property def temp(self): return Param('Beer Temperature', self.__T) @temp.setter def temp(self,value): self.__T = float(value)
import dateutil.parser dateutil.parser.parse('2015-01-28 03:00:00').date() >>datetime.date(2015, 1, 28)
A = np.eye(4) scale = [2, 3, 4] A[:3, :3] *= scale
# let (--) i j = let rec aux n acc = if n < i then acc else aux (n-1) (n :: acc) in aux j [] ;; val ( -- ) : int -> int -> int list = <fun> # 1--2;; - : int list = [1; 2] # 1--5;; - : int list = [1; 2; 3; 4; 5] # 5--10;; - : int list = [5; 6; 7; 8; 9; 10]
job = Job(field1=value1, field2=value2) job.save()
>>> from datetime import datetime, timedelta >>> start_time = datetime.now() >>> start_time datetime.datetime(2011, 5, 18, 20, 38, 55, 546000) >>> first = start_time.replace(minute=0, second=0, microsecond=0)+timedelta(hours=1) >>> first datetime.datetime(2011, 5, 18, 21, 0) >>>
def write_bmp_to_dc_rotated( dc, bitmap, angle ): ''' Rotate a bitmap and write it to the supplied device context. ''' img = bitmap.ConvertToImage() img_centre = wx.Point( img.GetWidth()/2, img.GetHeight()/2 ) img = img.Rotate( angle, img_centre ) dc.WriteBitmap( img.ConvertToBitmap(), 0, 0 )
>>> import pyparsing as p >>> ope, clo, com = map(p.Suppress, '(),') >>> w = p.Word(p.alphas) >>> s = ope + w + com + w + com + ope + p.delimitedList(w) + clo + clo >>> x = '(xx,yyy,(aa,bb,cc))' >>> list(s.parseString(x)) ['xx', 'yyy', 'aa', 'bb', 'cc']
if '4.2.1' in pl.values(): print ("We're good!") else: print ("No good")
response = captcha.submit( req.args['recaptcha_challenge_field'], req.args['recaptcha_response_field'], self.private_key, req.remote_addr, ) if response.is_valid: # captcha was passed
In [1]: abs(1-2) Out[1]: 1 In [2]: abs(2-1) Out[2]: 1
$.post("/search/loadBottomLooks/", { pageNum: "2" }, function(responseText, responseStatus){ alert('got into the callback!'); $("#garbage").html(responseText); });
import xmmsclient import xmmsclient.glib import os import sys import gobject def cb(result): if not result.is_error(): print "Current: %(artist)s - %(title)s" % result.value() ml = gobject.MainLoop(None, False) xc = xmmsclient.XMMS("stackoverflow") xc.connect() conn = xmmsclient.glib.GLibConnector(xc) xc.broadcast_playback_current_id(lambda r: xc.medialib_get_info(r.value(), cb)) ml.run()
children = {5,10,15,20,25} globalChildren = {1,2,3,4,5,6,7,8,9,10,12,14,16,18,20} difference = children - globalChildren shared = children & globalChildren
import sys import re import os assert len(sys.argv) == 3, "Usage: %s LT-dir extract-dir"%sys.argv[0] _, ltdir, exdir = sys.argv def key(x): return [int(y) for y in re.findall('\d+', x)] ltfiles = sorted(os.listdir(ltdir), key=key) exfiles = sorted(os.listdir(exdir), key=key) for exfile,ltfile in zip(exfiles, ltfiles): os.rename(os.path.join(exdir,exfile), os.path.join(exdir,ltfile))
nbTrain = [] if classifier.positiv > classifier.negativ: word = (input_text , 'pos') else: word = (input_text , 'neg') nbTrain.append(word)
>>> data = ['ABC', 'EFG', 'IJK', 'MNO'] >>> zip(*data) [('A', 'E', 'I', 'M'), ('B', 'F', 'J', 'N'), ('C', 'G', 'K', 'O')]
>>> old_dict = {'one': '.', 'two': 2, 'three':3, 'four':'.'} >>> new_dict = {k:v for k,v in old_dict.iteritems() if not v == '.'} >>> new_dict {'three': 3, 'two': 2}
from odo import odo odo('hdfstore://path_store_1::table_name', 'hdfstore://path_store_new_name::table_name')
>>> np.exp(-554.979039475) 9.4550881914378009e-242
from django.http import HttpResponse def serve_pdf_view(request): pdf_data = magically_create_pdf() return HttpResponse(pdf_data, content_type='application/pdf')
class FavoriteEnroledTrainee(SessionMixin, View): def get(self, request, *args, **kwargs): print 'here' favorite_enroled_trainee = dajaxice_register(method='GET', name='company.favorite')(FavoriteEnroledTrainee.as_view())
if word[-1] in ".?":
cursor = conn.cursor("some_unique_name") cursor.execute("SELECT aid FROM pgbench_accounts") for record in cursor: something(record)
{{ form.first_name(class_='validate') }} {{ form.first_name.label(class_='active') }} {{ form.begins(class_='datepicker', length=50) }}
>>> stockdata["Close"] == pd.rolling_max(stockdata["Close"], 5) 2013-09-23 09:30:00 False 2013-09-23 09:31:00 False 2013-09-23 09:32:00 False 2013-09-23 09:33:00 False 2013-09-23 09:34:00 False 2013-09-23 09:35:00 True 2013-09-23 09:36:00 False 2013-09-23 09:37:00 False 2013-09-23 09:38:00 True 2013-09-23 09:39:00 True dtype: bool
import urllib2 test = {'A':'', 'B':'-B', 'XYZ': '-X-Y-Z'} flower_list = [] for key, value in test.items(): page = urllib2.urlopen('http://www.all-my-favourite-flower-names.com/list-of-flower-names{0}.html'.format( value)).read() soup = BeautifulSoup(page) # Now do your logic or every page, and probably save the flower names in a list.
SELECT * FROM Article a LEFT JOIN ( SELECT ArticleID, count(*) AS ct FROM ArticleTag WHERE tag IN ('tag1', 'tag2', 'tag6') -- your tags here GROUP BY ArticleID ) t ON t.ArticleID = a.ID ORDER BY t.ct DESC NULLS LAST , (a.blog = 'BBC') DESC NULLS LAST -- your blog here , rating DESC NULLS LAST;
<script type='text/javascript'> var a = {{ someJsonObject }} </script>
from functools import wraps def some_decorator(arg1, arg2): def wrapper(func): @wraps(func) def inner_wrapper(*args, **kwargs): func(*args, **kwargs) inner_wrapper.arg1 = arg1 inner_wrapper.arg2 = arg2 return inner_wrapper return wrapper
>>> a = np.arange(10, 0, -1) >>> a array([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) >>> b = a[2:-2] >>> b array([8, 7, 6, 5, 4, 3]) >>> i = b.argsort() >>> b[:] = b[i] # change the values inside the view >>> a # note `a` has been sorted in [2:-2] slice array([10, 9, 3, 4, 5, 6, 7, 8, 2, 1])
values[1] = values[:]
import matplotlib.pyplot as plt import numpy as np listAct = [] for pos,rem in np.array(db.extractData(mess)): act = gen.unixTime_to_dateTime(rem)- gen.unixTime_to_dateTime(pos) ##act is a datetime object listAct.append(act.days + act.seconds/float(86400)) bins = range(1,15) plt.hist(listAct,bins) plt.show()
getattr(target,part).deltahealth(dmg)
max(enumerate(props), key = lambda tup: len(tup[1]))
file = request.files['file'] #file.read() is the same as file.stream.read() img_key = hashlib.md5(file.read()).hexdigest()
list1 = [[x] for x in range(10)] list2 = list1[:4] list1[1][0] = 100 print list2
select_sql = """ SELECT * FROM table WHERE ((? = 'all' OR gender = ?) AND (? = 'all' OR hand = ?)) """ cursor.execute(select_sql, (gender_var, gender_var, hand_var, hand_var))
>>> "{:.2f}".format(float("40.12")) '40.12' >>> "{:.2f}".format(float("40")) '40.00' >>> "{:.2f}".format(float("40.123")) '40.12' >>> try: ... "{:.2f}".format(float("40.123€")) ... except ValueError: ... "fail" ... 'fail'
class WrappedBox(object): def __init__(self, title, message, wraplength=60): self.title = title self.message = message self.wraplength = wraplength self.messageWrapped = '\n'.join([self.message[i:i+self.wraplength] for i in xrange(0,len(self.message),self.wraplength)]) tkMessageBox.showinfo(self.title, self.messageWrapped) WrappedBox("Results", str(e), wraplength=30)
[uid for uid, attrs in users.items() if attrs['name'] == name_you_are_looking_for]
def f(event): caller = event.widget
from PIL.ImageQt import ImageQt image2 = Image.open('./Images/Cache/Cache.png') qimage = ImageQt(image2) pixmap = QtGui.QPixmap.fromImage(qimage)
clock = pygame.time.Clock() time_counter = 0 while True: time_counter = clock.tick() if time_counter > 3000: enemy.move() time_counter = 0
s = 'abc123' >>> list(s) ['a', 'b', 'c', '1', '2', '3']
hist, bins = np.histogram(norm2d.ravel(), normed=True, bins=100) threshold = bins[np.cumsum(hist) * (bins[1] - bins[0]) > 0.8][0] mnorm2d = np.ma.masked_less(norm2d,threshold) com = ndimage.measurements.center_of_mass(mnorm2d) plt.imshow(norm2d, origin="lower") plt.scatter(*com[::-1]) plt.show()
>>> import httplib >>> >>> def exists(site, path): ... conn = httplib.HTTPConnection(site) ... conn.request('HEAD', path) ... response = conn.getresponse() ... conn.close() ... return response.status == 200 ... >>> exists('http://www.fakedomain.com', '/fakeImage.jpg') False
with open('rooms') as f: chunks = f.read().split('\n\n') people_by_id = {} for chunk in chunks: data = dict(row.split('=', 1) for row in chunk.split('\n')) people_by_id[data['id']] = data del data['id'] def get_person_by_id(id): return people_by_id.get(id)
%init %{ my_init_function(); %}
with open('input.txt','r') as f: data = f.readlines() with open('output.txt','w') as f: for i, line in enumerate(data): if '456' in line: fields = data[i+3].split(',') fields[-1] = 'PIZZA\n' data[i+3] = ','.join(fields) f.write(line)
click_element(get_element_by_xpath('your xpath'), wait=True) click_link(get_element_by_xpath('your xpath'), wait=True) click_button(get_element_by_xpath('your xpath'), wait=True)
def My_func(x, y, size, ls): return analysis(ls), generate_data(size), func(x,y)
df = pd.merge(df1, df2, on='DateTime', how='left').fillna(method='ffill')
score = [1,2,3,4,5] with open("file.txt", "w") as f: for s in score: f.write(str(s) +"\n") with open("file.txt", "r") as f: for line in f: score.append(int(line.strip()))
import difflib str1 = "black_red_yellow" str2 = "blue_red_green" difference = difflib.SequenceMatcher() difference.set_seqs(str1, str2) for match in difference.get_matching_blocks(): print str1[match[0]:match[0] + match[2]]
>>> o = subprocess.check_output( ['dd', 'if=/etc/resolv.conf', 'of=r'], stderr=subprocess.STDOUT) >>> print(o) b'0+1 records in\n0+1 records out\n110 bytes (110 B) copied, 0.00019216 s, 572 kB/s\n'
my_string = 'qwer123asd!@#$%^' predef = set('0x#$qi') if set(my_string).issubset(predef): print "only predefined symbols"
From: =?utf-8?q?Adrian_P=C5=82onka?= <pokemon@myservice.com>
{{your_date|safe}}
for line in FILE: for word in keyWords: if word in line: parseString = line[29:35] #pulling in session ID sessionID.append(parseString) #saving session IDs to a list break # Assuming there will only be one keyword per line, else remove this logLine +=1 #for debugging purposes when testing importFile2.close() print(sessionID) #for debugging purposes when testing
soup = BeautifulSoup(doc) tags = soup.fetch('td') for tag in tags: if tag.contents[0] and tag.contents[0].strip() == 'Preferred Name': return tag
+--------------------------+ |task1 | wait period | comp| +--------------------------+ +--------------------------+ |task2 | wait period | comp| +--------------------------+
findall(pattern, string, flags=0) Return a list of all non-overlapping matches in the string. If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group. Empty matches are included in the result.
<p> {{ doctor.treatment.all|join:", " }}. </p>
>>> d = pandas.DataFrame({"A": [1, 2, 3], "B": [8, 88, 888]}) >>> d A B 0 1 8 1 2 88 2 3 888 >>> d.assign(A=d.A**2) A B 0 1 8 1 4 88 2 9 888 >>> d A B 0 1 8 1 2 88 2 3 888
import Tkinter, tkFileDialog root = Tkinter.Tk() root.withdraw() save_dir = tkFileDialog.asksaveasfilename()
time = xray.DataArray(arr.time.values, coords=[arr.time.values], dims=['time']) time_first = time.resample('1M', 'time', how='first') time_last = time.resample('1M', 'time', how='last') time_diff = time_last - time_first
from django.db.models import Q query = 'fun' books = Fun.objects.filter(Q(categories__id__in=[1,2,3]), Q(name__icontains=query) | \ Q(description__icontains=query) | \ Q(keywords__title__icontains=query))
QApplication.processEvents()
>>> re.findall(r"(?<!\d)\d\d(?!\d)", "abc123#d$45^abrt&89*") ['45', '89']
def clean_text(rgx_list, text): new_text = text for r in rgx_list: new_text = re.sub(rgx, '', new_text) return new_text
>>> help(Schematron): class Schematron(lxml.etree._Validator) | An ISO Schematron validator. | | ... | With ``store_report`` set to True (default: False), the resulting validation | report document gets stored and can be accessed as the ``validation_report`` | property.
>>> from ast import literal_eval >>> literal_eval('[1,2,3]') [1, 2, 3] >>> literal_eval("['1','2','3']") ['1', '2', '3']
>>> lst = [(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13, 14), (15, 16), (17, 18)] >>> [lst[i:i+4] for i in xrange(0, len(lst), 4)] [[(1, 2), (3, 4), (5, 6), (7, 8)], [(9, 10), (11, 12), (13, 14), (15, 16)], [(17, 18)]]
return '%s/%s/%s' % ('//example.blob.core.windows.net', 'mypictures', name)
class Filter : public QObject { Q_OBJECT public: bool eventFilter(QObject *object, QEvent *event) { if (event->type() == QEvent::KeyPress) { return true; } return false; } }; <...> QComboBox box; box.view()->installEventFilter(new Filter());
for i in range(0, len(mylogger.handlers)): try: print(mylogger.handlers[i].baseFilename) except AttributeError: print('no to file')
from django.contrib.contenttypes.management import update_all_contenttypes from django.contrib.auth.management import create_permissions from django.db.models import get_apps update_all_contenttypes() for app in get_apps(): create_permissions(app, None, 2)
class State(models.Model): title = models.CharField(max_length=50) def __unicode__(self): return self.title class Transaction(models.Model): ... state = models.ForeignKey(State)
re.sub(r'\(a\)', '@', x.strip(), flags=re.IGNORECASE)
sql.execute("INSERT OR IGNORE INTO foo(data) VALUES(?);" ("Some text.", )) last_row_id = sql.execute("SELECT id FROM foo WHERE data = ?;" ("Some text. ", ))
a = list(set(a))
>>> lst = [ ... (1, 100), ... (2, 150), ... (3, 200) ... ] >>> list(zip(*lst)) # zip(*lst) groups the items that you want to sum [(1, 2, 3), (100, 150, 200)] >>> >>> [sum(x) for x in zip(*lst)] [6, 450] >>>
"topdirectory/sub1/subsub1/subsubsub1/target".rsplit('/',2)[-2:]
class Question(models.Model): question_package = models.ManyToManyField(QuestionPackage, blank=True) name = models.CharField(max_length=128) answer = models.TextField() class Meta: abstract = True
# x = range(6) x = ["this", "is", "an", "example", "list"] for prv, nxt in zip(x, x[1:]): print prv, nxt
>>> data = [None] * 10 >>> data [None, None, None, None, None, None, None, None, None, None] >>>
with open(filename) as input_file: data = [] for line in input_file: if not line.startswith("Sarah,Brown"): data.append(line) with open(filename, 'w') as output_file: for d in data: output_file.write(d + '\n')
import os def get_size(start_path = '.'): total_size = 0 for dirpath, dirnames, filenames in os.walk(start_path): for f in filenames: fp = os.path.join(dirpath, f) total_size += os.path.getsize(fp) return total_size print get_size()
L1 = [1, 2, 3, 4, 5, 6, 7, 8, 9] indices = (2, 5, 7) start = 0 sections = [] for end in indices: sections.append(L1[start:end]) start = end sections.append(L1[start:]) for part in sections: print part # [1, 2] # [3, 4, 5] # [6, 7] # [8, 9]
In [21]: r = lxml.objectify.fromstring('<root><item>1</item><item>2</item></root>') In [22]: lxml.etree.tostring(r.item) Out[22]: '<item>1</item>'
>>> [x for x in range(2, 20) if all(x % y != 0 for y in range(2, x))] [2, 3, 5, 7, 11, 13, 17, 19]
./compiled_c_here "$(test)"
def strip_http_headers(http_reply): p = http_reply.find('\r\n\r\n') if p >= 0: return http_reply[p+4:] return http_reply
html=""" <td> +421 48/471 78 14 <br /> <em>(bowling)</em> </td> """ from bs4 import BeautifulSoup soup = BeautifulSoup(html) print soup.find("td").contents[0].strip() +421 48/471 78 14 print soup.find("td").next_element.strip() +421 48/471 78 14
>>> for m in re.findall(r'<strong>([^<]+)</strong>', raw_string): ... print m ... Mar08 Mar09 Mar10 Mar11 Mar12 Mar13
import pandas sample={'user1': {'item1': 2.5, 'item2': 3.5, 'item3': 3.0, 'item4': 3.5, 'item5': 2.5, 'item6': 3.0}, 'user2': {'item1': 2.5, 'item2': 3.0, 'item3': 3.5, 'item4': 4.0}, 'user3': {'item2':4.5,'item5':1.0,'item6':4.0}} df = pandas.DataFrame([ [col1,col2,col3] for col1, d in sample.items() for col2, col3 in d.items() ])
print ('%10d %10s') % (value1, value2),
with transaction.atomic(): for person in p: try: People.objects.filter(email=person['email']).update(birthday=person['birthday']) except IntegrityError: #handle the exception
dev = usb.core.find(idVendor=int(vendor, 16), idProduct=int(product, 16))
results = [] for item in dirlist: newsML = ET.parse(item) NewsLines = newsML.getroot() HeadLine = NewsLines.getiterator("HeadLine") results.append(HeadLine)
def createSocket(ip): # return the new socket object s = socket.socket() s.connect((ip, 55555)) return s addresses=[ip, ip2, ip3, ...] sockets=[createSocket(addr) for addr in addresses] sock = chooseSocket(sockets) # pick one (somehow) sock.send(data) # use the selected socket
class Widget: def __init__(self): self.x = 1 def sleep(self): os.sleep(self.x)
>>> out = re.findall(r'\d{7,20}', '123223423424,1982379879343') >>> out ['123223423424', '1982379879343']
for edge in tree.findall(".//edge"): start = edge.get('from') end = edge.get('to') dk(start,end)
import csv log=open("sync_de.log",'r') out=open("fn.csv",'w') csv = csv.writer(out) # to store the list out_list = [] for eachline in log: # your code if blabla: out_list.append([filename, start, end]) # write the csv csv.writerows(out_list)
from PIL import Image img = Image.open('multipage.tif') for i in range(4): try: img.seek(i) print img.getpixel( (0, 0)) except EOFError: # Not enough frames in img break
self.plot.parent.parent.scalar_data = self.p[self.n]
parent.hide() dialog = QtGui.QDialog() dialog.exec_() parent.show()
def funct(objnameOrType): dispatcher = {str: getObjByName, type1: getObjByType1, type2: getObjByType2} t = type(objnameOrType) obj = dispatcher[t](objnameOrType) doStuffWithObj(obj)
>>> path1 = "./base/folder1/subfolder" >>> path2 = "./base/folder2/" >>> import os >>> os.path.relpath(path1, path2) '../folder1/subfolder' >>> os.path.relpath(path2, path1) '../../folder2'
def __gt__(self, other): return self > other
pngcrush -rem gAMA -rem cHRM -rem iCCP -rem sRGB -brute -l 9 -max -reduce -m 0 -q IMAGE optipng -o7 -q pngout.png pngout pngout.png -q -y -k0 -s0 advpng -z -4 pngout.png > /dev/null
date_list = Note.objects.all().dates('created', 'year') for years in date_list: Note.objects.filter(created__year = years.year)
import clr clr.AddReference('System') from System import * with IO.Ports.SerialPort("COM3") as serialPort: serialPort.BaudRate = 9600 serialPort.DataBits = 8 serialPort.Open() while 1: print serialPort.ReadLine()
series[series==i].index
names = [child['institution_name'] for child in inst_array[0]['children']]
import urllib2 req = urllib2.Request('http://www.python.org/') # # Here we request that bytes 18000--19000 be downloaded. # The range is inclusive, and starts at 0. # req.headers['Range']='bytes=%s-%s' % (18000, 19000) f = urllib2.urlopen(req) # This shows you the actual bytes that have been downloaded. content_range=f.headers.get('Content-Range') print(content_range) # bytes 18000-18030/18031
>>> n = range(16) >>> s = ''.join(map(chr, n)) >>> np.fromstring(s, dtype=np.uint64) array([506097522914230528, 1084818905618843912], dtype=uint64) >>> sum((256**i)*x for i,x in enumerate(n[:8])) 506097522914230528L >>> sum((256**i)*x for i,x in enumerate(n[8:])) 1084818905618843912L
def cmdArray = ["python", "-c", "print('hello')"] def cmd = cmdArray.execute() cmd.waitForOrKill(1000) println cmd.text
def poly(x, roots): poly = 1 for r in roots: poly *= (x - r) return poly # EXAMPLE x = 1 roots = [2, 5, 7] print ( poly(x, roots) )
>>> import unicodedata >>> unicodedata.normalize('NFKD', u"m\u00fasica").encode('ascii', 'ignore') 'musica'
def create_list(self, object_list, bundle): """ Unimplemented, as Tastypie never creates entire new lists, but present for consistency & possible extension. """
#!/usr/bin/env python3 import sys import time data = "this is a sentence with some words".split() max_len=max([len(w) for w in data]) pad = " "*max_len for w in data: sys.stdout.write('%s\r' % pad) sys.stdout.write("%s\r" % w) sys.stdout.flush() time.sleep(0.4) print
>>> type(Table.col1.property) <class 'sqlalchemy.orm.properties.ColumnProperty'> >>> type(Table.rel.property) <class 'sqlalchemy.orm.relationships.RelationshipProperty'>
import csv result={} with open('/tmp/test.csv','r') as f: red=csv.DictReader(f) for d in red: result.setdefault(d['team'],[]).append(d['bldg']) #results={'1': ['1450'], '3': ['204', '250', '1437'], '2': ['1440']}
>>> import numpy as np >>> I = np.matrix([[ 0.66581073+0.00033919j], [ 0.81568896-0.03291265j], [ 0.99884785+0.00045446j]]) >>> >>> I[0, 0] (0.66581073000000002+0.00033919000000000001j)
colours = np.array(colours) colours[indices, :] = (1, 0, 0, 1)
from sorl.thumbnail import get_thumbnail im = get_thumbnail(my_file, '100x100', crop='center', quality=99)
import glob import imp import os def load_modules(module_names=None): if module_names is None: cur_dir = os.path.realpath(os.path.dirname(__file__)) module_wc = '{}/*.py'.format(cur_dir) module_names = [mn for mn in glob.glob(module_wc) if not mn.startswith('_')] modules = map(imp.load_source, module_names) return modules
df['tag'] = np.where(df['org_o'].isin(gt['org_o']), 'TP', 'FP')
In [18]: individuals.append(individuals.loc[1]) Out[18]: female fitness 0 True 1 1 False 1 1 False 1 In [19]: individuals.append(individuals.loc[1]).dtypes Out[19]: female bool fitness int64 dtype: object
def newGrid(...): group = QtGui.QGraphicsItemGroup(scene=self) group.setFlag(QtGui.QGraphicsItem.ItemIsMovable) #let't test how it works for i in range(xccells + 1): ... group.addToGroup(self.addLine(x,ymin,x,ymax,self.meshPen)) ...
... with open("test.gcode","r+") as s: with open("test_replaced.gcode","a") as replaced: ... print ("Done! - " + str(a) + " number of operations done!") print ("Loopcount: " + str(b))
to_json = {"accountId":accountId, "emailSubject":customData.emailSubject, "emailBlurb":customData.emailBlurb, "customFields":customFields, "status":customData.status, "messageLock":customData.messageLock} if james is not None: to_json['james'] = james requestBody = json.dumps(to_json)
>>> datetime.datetime(1601, 1, 1) + datetime.timedelta(microseconds=1e16) datetime.datetime(1917, 11, 21, 17, 46, 40) >>> _.isoformat() '1917-11-21T17:46:40'
In [18]: df['Time'].dt.hour + df['Time'].dt.minute/60 Out[18]: 0 16.533333 1 17.216667 2 18.166667 Name: Time, dtype: float64
Python 2.7.4 (default, Apr 6 2013, 19:54:46) [MSC v.1500 32 bit (Intel)] on win32 Type "help", "copyright", "credits" or "license" for more information. >>> s = 'MR1|L2-S1x' >>> p = r'([A-Z]+)(\d)?([|.+:x-]+)' >>> import re >>> t = re.findall(p, s) >>> t [('MR', '1', '|'), ('L', '2', '-'), ('S', '1', 'x')] >>>
import matplotlib.pyplot as plt import pandas as pd df = pd.read_csv('t.txt', delim_whitespace=True, header=None, parse_dates={'Dates': [1, 2]}) plt.figure() l_h = [] for identifier in df[0].unique(): h, = plt.plot(df[df[0]==identifier]['Dates'], df[df[0]==identifier][3], label=identifier) l_h.append(h) plt.legend(handles=l_h) plt.show()
class A(object): def __init__(self, msg, term_print) super(A, self).__init__() self.msg = msg self.term_print = term_print def a_0(): return self.a_1() def a_1(): return self.a_2() def a_2(): print msg, term_print
>>> soup.find_all(scope=["row", "col"]) [ <th scope="col">US $</th>, <th scope="col">Euro</th>, <th scope="row">Mon – Fri</th>, <th scope="row">Sat – Sun</th>, ]
def diff_elements(lst): """ >>> list(diff_elements([])) [] >>> list(diff_elements([1])) [] >>> list(diff_elements([1, 2, 4, 7])) [1, 2, 3] """ as_iter = iter(lst) last = next(as_iter) for value in as_iter: yield value - last last = value
obj1 = objectify.fromstring(expect) expect = etree.tostring(obj1) obj2 = objectify.fromstring(xml) result = etree.tostring(obj2) self.assertEquals(expect, result)
import re one_line = ''.join(menu).replace('\n', ' ') print re.sub(', ([a-z]+:)', r'\n\1', one_line)[:-1]
count = 0 for key, value in lmdb_env.cursor(): count = count + 1
In [14]: fruits = [["Mango", 6,5,8.0], ["Banana", 2.0,5,8.9,7], ["Pineapple", 4,6.8,9], ["Apple", 3.9,6,7,2]] In [15]: fruits.sort() In [16]: fruits Out[16]: [['Apple', 3.9, 6, 7, 2], ['Banana', 2.0, 5, 8.9, 7], ['Mango', 6, 5, 8.0], ['Pineapple', 4, 6.8, 9]]
def foo(a, b, c): print(a, b, c) a = [1,2,3] foo(*a) # 1 2 3
cdef class A: cdef foo(self): print "A" cdef class B(A) cdef foo(self, x=None) print "B", x cdef class C(B): cpdef foo(self, x=True, int k=3) print "C", x, k
dataframe['Compression Velocity'] *= 0.0254
#!/bin/sh cd $HOME/Projects/openerp_7_0/server/ /usr/bin/xterm -e 'python openerp-server --addons-path=../addons; /bin/bash' &
with open(your_file_path) as f: lines = f.read_lines() lines[1] = '#MOAB -l walltime={0}'.format(new_walltime_str) with open(your_file_path, 'w') as f: f.write('\n'.join(lines))
zf = zipfile.ZipFile(file_to_search, mode='w') zf.write(bin_file_path, custom_name) zf.close()
def our_special_filter( some_queryset ): for row in some_queryset: if row.aMethod(): yield row result= our_special_filter( SomeModel.objects.filter(...) )
with open("myfile", "r+") as f: lines = f.readlines() lines.sort() f.seek(0) f.writelines(lines)
import base64, StringIO, zipfile # base64 string from the message attachment = '...' attachment = base64.b64decode(attachment) attachment = StringIO.StringIO(attachment) zipFile = zipfile.ZipFile(attachment, 'r')
occurrences = {} while True: words = input('Enter line: ') words = words.lower() #this is also where I have tried a split() if words =='': break for word in words.split(): occurrences[word]=occurrences.get(word,0)+1 for word in (occurrences): print(word, occurrences[word])
import StringIO f = StringIO.StringIO() # create a file-like object wbk = xlwt.Workbook() earnings_tab = wbk.add_sheet('EARNINGS') wbk.save(f) # write to stdout
string1="""blah blah blah " some' thi'ng " end of string """
from django.middleware.cache import UpdateCacheMiddleware from django.utils.cache import learn_cache_key from django.http import HttpRequest from network.views import StatusView request = HttpRequest() request.META['SERVER_NAME'] = '1.0.0.127.in-addr.arpa' # important request.META['SERVER_PORT'] = '8000' # important request._cache_update_cache = True response = StatusView(request=request).get(request) cacher = UpdateCacheMiddleware() cacher.process_response(request, response).render()
import html2text html = open("foobar.html").read() print html2text.html2text(html)
results1_dict = dict((row[0], list(row[1:])) for row in results1) results2_dict = dict((row[0], list(row[1:])) for row in results2) for key, value in results2_dict: if key in results1_dict: results1_dict[key].extend(value) else: results1_dict[key] = value
>>> df = pd.DataFrame({"body": ["ball", "red BALL", "round sphere"]}) >>> df[df["body"].str.contains("ball")] body 0 ball >>> df[df["body"].str.lower().str.contains("ball")] body 0 ball 1 red BALL >>> df[df["body"].str.contains("ball", case=False)] body 0 ball 1 red BALL >>> df[df["body"].str.contains("ball", case=True)] body 0 ball
from nose.plugins import Plugin import datetime class SeparateReports(Plugin): "Log the results of each test into a separate file." def afterTest(self, test): logname = test.id() + '.log' success = test.passed date = datetime.datetime.now() # print logname, datetime.datetime.now(), success with open(logname, 'a') as log: log.write("%s: %s\n" % (date, success))
df.values.flatten()
d={'Alyssa':22, 'Char':25, 'Dan':25, 'Jeff':20, 'Kasey':20, 'Kim':20, 'Mogran':25, 'Ryan':25, 'Stef':22} import collections print collections.Counter(d.values()).most_common()[-1][0] 22
w = ['a', 'b', 'c'] s = '%s\t%s\t%s\n' % tuple(w)
queryCurs.execute("SELECT * FROM PATIENT") row = 0 while True: form = queryCurs.fetchone() if form == None: break for column, item in enumerate(form): patientTable.setItem(row, column, QtGui.QTableWidgetItem(str(item))) row += 1
>>> a = [1, 2, 3] >>> b = [1, 2, 3] >>> a == b True
>>> s = '34 ch33se 34e8 3.4' >>> map(int, filter(None, ''.join(map(lambda c: (c.isdigit() and c or ' '), s)).split(' '))) [34, 33, 34, 8, 3, 4]
from itertools import product a=[['AA', 'aa'], ['BB', 'bb'], ['CC'],['DD','dd']] for i in product(*a): print i #output ('AA', 'BB', 'CC', 'DD') ('AA', 'BB', 'CC', 'dd') ('AA', 'bb', 'CC', 'DD') ('AA', 'bb', 'CC', 'dd') ('aa', 'BB', 'CC', 'DD') ('aa', 'BB', 'CC', 'dd') ('aa', 'bb', 'CC', 'DD') ('aa', 'bb', 'CC', 'dd')
def change_label(*args): label.config(text='') # clear label label.config(text='T' + var.get()) # set new label text root = Tk() var = StringVar() # make the StringVar() label = Label(root) entry = Entry(root, textvariable=var) # set the textvariable to var var.trace('w', change_label) # trace var to monitor for changes, calling function on change label.pack() entry.pack() root.mainloop()
import re digits = re.compile(r'(\d+)') def tokenize(filename): return tuple(int(token) if match else token for token, match in ((fragment, digits.search(fragment)) for fragment in digits.split(filename))) # Now you can sort your PDF file names like so: pdfList.sort(key=tokenize)
from codecs import iterdecode for line in iterdecode(filename, 'utf16'): yield line
count = 0 coin=[200,100,50,20,10,5,2,1] total=[200,0,0,0,0,0,0,0] def func(i): global count,total,coin for x in range(total[i-1]/coin[i-1]+1): total[i]=total[i-1]-x*coin[i-1] if (i == 7): count += 1 else: func(i+1)
def printMaze(maze, x, y): for i in range(9): for z in range(4): if i == x and z == y: print 'X', else: print maze[i][z], print ''
print '\n%s %s' % (row[0].strftime('%Y-%m-%d'), row[1])
with open('u.txt') as uf, open('v.txt') as vf: for u,v in zip(uf,vf): print uv2sd(float(u),float(v))
import sys import subprocess logfile = open('logfile', 'w') proc=subprocess.Popen(['cat', 'file'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT) for line in proc.stdout: sys.stdout.write(line) logfile.write(line) proc.wait()
import arff, numpy as np dataset = arff.load(open('mydataset.arff', 'rb')) data = np.array(dataset['data'])
>>> a = Type_1(1,2,3,4,5) # making an instance of Type_1 >>> b = Type_2(1,2,3,4,5) # making an instance of Type_2 >>> a.push(b) # pushing one to another >>> b.variable2 # it worked! 0 >>> a.variable1 # it worked! 6
target: yourmodule
for Line in file("Text.txt", "r"): if Line.find("sum") >= 0: print Line.split()[0]
(<\s*?script[\s\S]*?(?:(?:src=[\'"](.*?)[\'"])(?:[\S\s]*?))?>)([\s\S]*?)(</scrip‌​t>)
def sort(sortlist, sortby): sortlist.sort(key = lambda x: getattr(x, sortby))
np.maximum(x, 0)
>>> n = '0100' >>> '{:0{}b}'.format(long(n, 2) + 1, len(n)) '0101'
entry1 = Entry(...) entry2 = Entry(...) entries = (entry1, entry2) ... def disable_all_entries(): for entry in entries: entry.configure(state="disabled")
for word in words.split(): print(word)
def get_float(prompt): while True: try: return float(input(prompt)) except ValueError: print "invalid input, try again!"
me/favorites?oauth_token=your_auth_token
import traceback traceback.print_exc()
In [98]: df = pd.DataFrame({'X': ['A','B','C','A','B','C','B','C','D','B','C','D'], 'Y': np.arange(12)}) df[0:6].groupby(['X']).count().add(df[6:].groupby(['X']).count(), fill_value=0) Out[98]: Y X A 2 B 4 C 4 D 2
def tt(w): if ' ' in w: print 'space' else: print 'no space' >> tt('b ') >> space >> tt('b b') >> space >> tt('bb') >> no space
x1 = float(raw_input("x1: ")) y1 = float(raw_input("y1: ")) x2 = float(raw_input("x2: ")) y2 = float(raw_input("y2: "))
df = df[((df.B>df.D) & (df.B<df.D*2)) & ((df.B>df.F) & (df.B<df.F*2))]
dates.MinuteLocator(interval=30)
import sys import StringIO import contextlib @contextlib.contextmanager def stdoutIO(stdout=None): old = sys.stdout if stdout is None: stdout = StringIO.StringIO() sys.stdout = stdout yield stdout sys.stdout = old code = """ i = [0,1,2] for j in i : print j """ with stdoutIO() as s: exec code print "out:", s.getvalue()
querystring['param2']
{{ form.instance.guest_name }}
df_labor = df[df.job == "Labor"].reset_index(drop = True) In [94]: df_labor Out[94]: age job name sex 0 30 Labor Mike M 1 66 Labor Dave M 2 7 Labor Luke M 3 80 Labor Ellen F
In [16]: df.groupby('id')['x'].apply(pd.rolling_mean, 2, min_periods=1) Out[16]: 0 0.0 1 0.5 2 1.5 3 3.0 4 3.5 5 4.5 In [17]: df.groupby('id')['x'].cumsum() Out[17]: 0 0 1 1 2 3 3 3 4 7 5 12
[COEFF, SCORE]= princomp(zscore(X)); x=SCORE(1:2:end,1); y=SCORE(1:2:end,2); z=SCORE(1:2:end,3); u=SCORE(2:2:end,1); v=SCORE(2:2:end,2); w=SCORE(2:2:end,3); quiver3(x,y,z,u-x,v-y,w-z,0);
def func(df1): idx = df1.index.get_level_values(0)[0] df1 = df1.loc[idx] return (df1['Values'] / df1.loc['Calc']['Values']).to_frame() df.groupby(level=0).apply(func)
IEnumerable<TResult> Zip<TResult,T1,T2> (IEnumerable<T1> a, IEnumerable<T2> b, Func<T1,T2,TResult> combine) { using (var f = a.GetEnumerator()) using (var s = b.GetEnumerator()) { while (f.MoveNext() && s.MoveNext()) yield return combine(f.Current, s.Current); } }
A.objects.filter("some-filter-criteria", m2m__b__x__gt=50)
user@host> manage.py shell >>> from django.contrib.auth.models import User >>> user=User.objects.create_user('foo', password='bar') >>> user.is_superuser=True >>> user.is_staff=True >>> user.save()
>>> import AppKit >>> path = os.path.expanduser('~/src/foo.xcodeproj/project.pbxproj') >>> d = AppKit.NSDictionary.dictionaryWithContentsOfFile_(path)
response = urlfetch.fetch(your_url, follow_redirects=False) location = response.headers['Location']
import re s = 'Now is 20m before 10h' rgx = re.compile(r'[0-9]+[hms](?= *before)') print rgx.findall(s) # ['20m']
my_options = {"bg" : "gray60", "font" : ("Tahoma", 20)} tk.Label(root, text = "Same background", **my_options).grid(row = 1, column = 1) tk.Button(root, text = "and font.", **my_options).grid(row = 1, column = 2, padx = (5, 0))
a = [1,2,3,4,5] b = [11,22,None,44,55]
form.helper['peso'].wrap(AppendedText, "kg")
df['mango'] = df.fruit == 'mango' df2 = df.groupby(['customer', 'mango']).sum().unstack() df2.columns = ['not mango', 'mango'] >>> df2 not mango mango customer cust1 55 75 cust2 135 23 cust3 100 22 cust4 54 44
import struct struct.unpack('i', b'\x05\x00\x00\x00') # i stands for integer
import ftplib ftp_srv = 'ftp.example.com' ftp_usr = 'user' ftp_pass = 'password' ftp = ftplib.FTP(ftp_srv) ftp.login(ftp_usr, ftp_pass) files = [('remote_file1', 'local_file1'), ('remote_file2', 'local_file2')] for file_ in files: with open(file_[1], "wb") as f: ftp.retrbinary("RETR " + file_[0], f.write) ftp.quit()
from math import sqrt def is_within(point, circle): distance = sqrt(((point.x - circle.x) ** 2) + ((point.y - circle.y) ** 2)) return distance < circle.radius
barbs = m.quiver(x, y, u[0, :], v[0, :], scale = 100) for i in range(365): barbs.set_UVC(u[i,:],v[i,:]) #save the figure or something
>>> import lxml.etree >>> tree = lxml.etree.XML("<root><a id='1'/><b id='2'/></root>") >>> tree.xpath("*[@id=1]") [<Element a at c3bc30>] >>> lxml.etree.tostring(tree.xpath("*[@id=1]")[0]) '<a id="1"/>'
def __getitem__(self, index): return self.list[index-1] def __setitem__(self, index, value): self.list[index-1] = value
import sys from time import sleep for i in range(3): sys.stdout.write('.') sys.stdout.flush() sleep(1) print('Welcome!')
while True: user_input = requestInteger("Enter a number between 0 and 9...") if not 0 <= user_input <= 9: printNow("Error! Input must be between 0 and 9. Please re-enter.") else: print "Thanks, you've entered: ", user_input break
x = np.array([[3,5,9],[6,0,7],[2,3,4]]) m = np.array([[1,1,2],[2,1,1],[2,1,2]]) indices = np.where(m == 1) # indices contains two arrays, the column and row indices values = x[indices]
def view_function(request,id): object_to_edit = get_object_or_404(Model,id=id) #Or slug=slug form = ModelForm(data = request.POST or None, instance=object_to_edit) if form.is_valid(): form.save() redirect() return render_to_response('template_name',{},RequestContext(request))
import multiprocessing.Pool p = multiprocessing.Pool() # use all available CPUs input = open("input.txt") x = (process_line(line) for line in input) y = p.imap(process_item, x) z = (generate_output_line(item) + "\n" for item in y) output = open("output.txt", "w") output.writelines(z)
hBiasLayer=BiasUnit() net.addModule(hBiasLayer)
from IPython.display import Latex Latex(r"""\begin{eqnarray} \nabla \times \vec{\mathbf{B}} -\, \frac1c\, \frac{\partial\vec{\mathbf{E}}}{\partial t} & = \frac{4\pi}{c}\vec{\mathbf{j}} \\ \nabla \cdot \vec{\mathbf{E}} & = 4 \pi \rho \\ \nabla \times \vec{\mathbf{E}}\, +\, \frac1c\, \frac{\partial\vec{\mathbf{B}}}{\partial t} & = \vec{\mathbf{0}} \\ \nabla \cdot \vec{\mathbf{B}} & = 0 \end{eqnarray}""")
import pytz from datetime import datetime now = datetime.utcnow().replace(tzinfo = pytz.utc)
import pandas as pd x = pd.cut(np.arange(0,20), 10) np.array(map(lambda t:t[1:-1].split(","), x.levels), float)
from time import time prev = time() while True: now = time() if now - prev > 3: print 'report' prev = now else: pass # runs
>>> col1 = ['2006-03-28','2006-04-05','2006-04-06'] >>> col2 = ['IBM', 'MSFT', 'IBM'] >>> col3 = [1000, 1000, 500] >>> zip(col1, col2, col3) [('2006-03-28', 'IBM', 1000), ('2006-04-05', 'MSFT', 1000), ('2006-04-06', 'IBM', 500)]
gtk_tree_view_set_search_column (GtkTreeView *tree_view, gint column) column : the column of the model to search in, or -1 to disable searching
>>> from collections import Counter >>> d = {'a':3, 'b':9, 'c':88, 'd': 3} >>> Counter(d.values()).most_common() [(3, 2), (88, 1), (9, 1)]
import datetime import pytz now = datetime.now(pytz.utc) # datetime.datetime(2012, 6, 8, 10, 31, 58, 493905, tzinfo=<UTC>) [tz for tz in pytz.common_timezones_set if now.astimezone(pytz.timezone(tz)).hour == 9] # ['Atlantic/Cape_Verde'] [tz for tz in pytz.common_timezones_set if now.astimezone(pytz.timezone(tz)).hour == 12] # returns a list of 45 timezones, 'Europe/Oslo' included
import datetime now = datetime.datetime.now() past = now - datetime.timedelta(hours=10)
df["new_variable"] = df.ix[6:].apply(perform_function1).apply(perform_function2)
@classmethod @ndb.transactional() def create_account(cls, name, other_params): acct = Account.get_by_id(name) if not acct: acct = Account(id=name, other param assigns) acct.put()
requests.get()
In [2]: List=[['XD',1],['XD',3],['XD',2],['X5',2],['X5',3],['XT',2]] In [3]: SortByList={'XD': 'A', 'XT':'B', 'XQ': 'C','X5': 'D'} In [4]: sorted(List, key=lambda x:(SortByList[x[0]],x[1])) Out[4]: [['XD', 1], ['XD', 2], ['XD', 3], ['XT', 2], ['X5', 2], ['X5', 3]]
import ast for line in open('listaraw.csv'): line = ast.literal_eval(line.replace('""', '\\"')) if isinstance(line, tuple): items = map(ast.literal_eval, list(line)) else: items = ast.literal_eval(line) if isinstance(items, dict): items = [items] for item in items: print item['geometry']['location']
from django_cron import cronScheduler, Job class sendMail(Job): # period run every 300 seconds (5 minutes) run_every = 300 def job(self): # This will be executed every 5 minutes datatuple = check_subscription_finishing() send_mass_mail(datatuple) //and just register it cronScheduler.register(sendMail)
In [11]: df = pd.DataFrame([["a", "b", 43, 87, 29]], columns=["N", "P", 1, 2, 3]) In [12]: pd.melt(df, id_vars=["N", "P"], value_vars=[1, 2, 3], var_name="Day") Out[12]: N P Day value 0 a b 1 43 1 a b 2 87 2 a b 3 29
{% set var = "This Text" %} {{ var|lower|replace(' ','-') }}
BUILDDIR = build ... clean: -rm -rf $(BUILDDIR)/*
if self.steps.current == "form1": data = self.request.POST["form1-response"] user = CustomerModel.objects.get(id=self.request.user.id) user.response = data user.form_step = "form1" user.save()
In [2]: boolean_array = np.array([True, False, False, True]) In [3]: float_array = np.ones(4) * 1.0 In [4]: float_array Out[4]: array([ 1., 1., 1., 1.]) In [5]: float_array[boolean_array] = 0 In [6]: float_array Out[6]: array([ 0., 1., 1., 0.])
(df['Date2']-df['Date1']).apply(lambda x: x/np.timedelta64(1,'M'))
version = func1() or func2()
from django.db.models import Count Profile.objects.values('age').annotate(Count('age')) Result: [{'age': 10, 'age__count': 52}, ...]
>>> from collections import OrderedDict >>> x= [('a',1),('b', 2)] >>> x_1 = OrderedDict(x) >>> for key in x_1: ... print(key) ... a b
import numpy import matplotlib.pyplot as plt #Random data data = numpy.random.random((10, 10)) #Set all data points equal to zero to NaN #data[data == 0.] = float("NaN") #Set single data value to nan data[2][2] = float("NaN") fig = plt.figure() ax = fig.add_subplot(1, 1, 1) ax.imshow(data, interpolation = "nearest") plt.show()
qry = DBSession.query(Item) # ensure that each condition is present using separate condition for cid in condition_ids: qry = qry.filter(Item.conditions.any(Condition.id == cid)) # ensure that other skills are not present: qry = qry.filter(~Item.conditions.any(~Condition.id.in_(condition_ids)))
Python 2.7.10 (default, Oct 23 2015, 19:19:21) [GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin Type "help", "copyright", "credits" or "license" for more information. >>> a_set = set([1, 2, 3]) >>> a_set set([1, 2, 3]) >>> b_set = {1, 2, 3} >>> b_set set([1, 2, 3])
#!/bin/sh "exec" "python" "-B" "$0" "$@" # The rest of the Python program follows below:
import sys import time for i in range(3): sys.stdout.write('\r' + ','.join([str(a) for a in range(i+1, 0, -1)])) sys.stdout.flush() time.sleep(1) sys.stdout.write('\n')
>>> results = [{'addr': '10.0.0.1', 'broadcast': '10.0.0.2', 'netmask': '255.255.255.255'}] >>> results[0] {'addr': '10.0.0.1', 'broadcast': '10.0.0.2', 'netmask': '255.255.255.255'} >>> results[0]['addr'] '10.0.0.1'
In [6]: full = np.vstack(([1,'a','b'],[2,'c','d'],[3,'e','f'])) In [7]: full Out[7]: array([['1', 'a', 'b'], ['2', 'c', 'd'], ['3', 'e', 'f']], dtype='|S1') In [8]: for a,b,c in full: ...: print a,b,c ...: 1 a b 2 c d 3 e f
my_file = io.open("myfile.txt", "w", encoding="utf-8")
class ToggleButton(Button): def __init__(self, text="ToggleButton", state=True): super(ToggleButton, self).__init__(text) self.state = state def press(self): super(ToggleButton, self).press() self.state = not self.state print('ToggleButton is now', 'ON' if self.state else 'OFF')
def create_profile(sender, instance, created, **kwargs): profile = None if created: profile, created = Profile.objects.get_or_create(user=instance) post_save.connect(create_profile, sender=User)
RewriteEngine On RewriteRule ^(.*)$ http://a.b.com/abc/def?info=$1 [L]
if len(set(line.split()).intersection(keywords)) > 2:
In [297]: import pandas as pd import io t="""ID, Price, Name 1, $800, Jim""" df = pd.read_csv(io.StringIO(t), sep=',\s+') t1="""ID, Price, Address, Name 2, $500, 1 Main St., Amanda""" df1 = pd.read_csv(io.StringIO(t1), sep=',\s+') pd.concat([df,df1], ignore_index=True) Out[297]: Address ID Name Price 0 NaN 1 Jim $800 1 1 Main St. 2 Amanda $500
>>> the_list = ['albert', 'angela', 'leo', 'bridget'] >>> [ word.upper().replace('A', 'a') for word in the_list] ['aLBERT', 'aNGELa', 'LEO', 'BRIDGET']
[i.find('ul', {'class': "definitionList"}).find('li').text for i in soup.find_all('div', {'class': "contentBlurb"}) if 'Description Synonyms' in str(i.text)][0]
Python 2.5.1 >>> import sqlite3 >>> sqlite3.version '2.3.2' >>> sqlite3.sqlite_version '3.3.4'
>>> import struct >>> result = struct.unpack('i', '\x00\xff\xff\xff') >>> result[0] -256
>>> t = (1, 2, 3, 4) # t is the tuple (1, 2, 3, 4) >>> l = list(t) # l is the list [1, 2, 3, 4]
SELECT DISTINCT table1.* FROM table1 JOIN table2 WHERE table1.b = table2.b AND table2.c = '1'
from status import Alert context['list'] = Alert.objects.filter(All My Filters Here! (link below))[:8]
from __future__ import division as _division import numpy as _np import pandas as _pd
from Bio import SeqIO temp = {} for line in open("test.txt","r"): i, c = line.strip().split() temp[i] = c for rec in SeqIO.parse("mymodified_transcript.fa","fasta"): if str('>'+rec.id) in temp.keys(): print str('>'+rec.id), temp['>'+rec.id] print str(rec.seq)
>>> A = np.empty(2, dtype=object) >>> A[0] = array([0, 0, 0]) >>> A[1] = array([1, 2, 3]) >>> A array([array([0, 0, 0]), array([1, 2, 3])], dtype=object) >>> np.vstack(A) array([[0, 0, 0], [1, 2, 3]])
def run_command(command): p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT) return p.communicate()
print method ci = proxy.methods.get(method) for param in ci.inparams: print param.name.ljust(20), param.type print
U = np.random.rand(3,24,5) R = np.eye(3,3) result = np.einsum( "ijk,il", U,R )
string = "Article One News" words = string.split() i = 0 while i < len(words): word = words[i] # Do whatever you want with this word i += 1
>>> l = [0.01, 0.1, 0.4, 0.034, 0.6, 0.7, 0.9, 1] >>> [0.4 if (0. < f < 0.5) else 0.7 for f in l] [0.4, 0.4, 0.4, 0.4, 0.7, 0.7, 0.7, 0.7]
any(a == 'Mary' for a, b in tuples) # check if any tuple has a name equal to Mary
import re regex = re.compile(r'[,:/]') a, b, c, d, e = regex.split('a,b:c,d/e')
from skimage import io from skimage import color from skimage import filter import matplotlib.pyplot as plt image = color.rgb2gray(io.imread('4g1te.png')) denoised = filter.denoise_tv_bregman(image, 1) edges = filter.canny(denoised, 1, 0.01, 0.1) fig, axes = plt.subplots(ncols=2) axes[0].imshow(denoised) axes[1].imshow(edges) for ax in axes: ax.set_axis_off() plt.show()
from sqlalchemy.sql import select, func ... Column('version', Integer, default=select([func.max(1, func.max(version_table.c.old_versions))]))
for comment in comments_generator(client, VIDEO_ID): author_name = comment.author[0].name.text text = comment.content.text post_date = comment.published.text last_update_date = comment.update.text print("{}(date:{}): {}".format(author_name, post_date, text))
obj = pickle.loads(%s)
df = df.set_index('Count_Product') ax = df['Count_Transaction'].plot(kind='bar', figsize=(5,5), color='blue') ax.set_ylabel("Count_Transaction") ax.set_xlabel("Count_Product") patches, labels = ax.get_legend_handles_labels() ax.legend(patches, labels, loc='best')
>>> from SortedCollection import SortedCollection >>> from operator import itemgetter >>> s = SortedCollection(key=itemgetter(0)) >>> s.insert((1,2,'a')) >>> s.insert((10,20,'b')) >>> s.insert((20,30,'c')) >>> s.find_le(10) (10, 20, 'b')
>>> WeDoNotWantToDeriveThis.__setitem__ = types.MethodType(set_item_func, None, WeDoNotWantToDeriveThis) >>> inst[0] = None hi there >>>
import socket server = "www.google.com" server = socket.gethostbyname(server) port = 80 request = "GET / HTTP/1.1\nHost: " + server + "\n\n" sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((server, port)) sock.send(request.encode()) response = sock.recv(4096).decode("utf-8") print(response) test = response.index("\r\n\r") print(test)
def load_miniatures(self, *args): proxy = Loader.image('http://10.0.13.206:9000/?action=snapshot') proxy.bind(on_load=self.receive_miniatures) def receive_miniatures(self, proxy): if proxy.image.texture: self.image.texture = proxy.image.texture Clock.schedule_once(self.load_miniatures, 0.1) def build(self): self.image = Image() self.load_miniatures() return self.image
E = sum( abs(fft(x))[:len(x)/2]**2 ) / len(x)
def koch_invoke(): koch(int(pointSize_max.get()), int(pointSize.get())) drawButton = tk.Button(frame, text = "Draw a fractal", command=koch_invoke)
import httplib import os.path total_size = os.path.getsize('/path/to/file') infile = open('/path/to/file') conn = httplib.HTTPConnection('example.org') conn.connect() conn.putrequest('POST', '/upload/') conn.putheader('Content-Type', 'application/octet-stream') conn.putheader('Content-Length', str(total_size)) conn.endheaders() while True: chunk = infile.read(1024) if not chunk: break conn.send(chunk) resp = conn.getresponse()
res1.rx('sigma_stat', 'fit', 'L=300', 'AR=1.5', 'SO=3', 'T=30')
Example outputs # The outputs are sqashed by the sigmoid( ) function 0 1 1 0 # class one 1 1 1 0 # class one 0 0 1 0 # class two 0 1 1 1 # class two 0 0 1 0 # class three
options, args = parser.parse_args() option_dict = vars(options)
>>> import re >>> my_string = 'a hello aaaaa hi aaaaaaa bye bbb' >>> re.sub(r'a+', 'b', my_string) 'b hello b hi b bye bbb'
likes = json.loads(likes_data) comments = json.loads(comments_data) data = {'likes': likes['data'], 'comments': comments['data']} self.response.out.write(json.dumps(data))
def getEventsForMonth(self, month, year): start_date = datetime.datetime(year, month, 1) if month == 12: end_date = datetime.datetime(year + 1, 1, 1) else: end_date = datetime.datetime(year, month + 1, 1) return Events.all().filter('date >=', start_date).filter('date <=', end_date).fetch(1000)
t = [1, 2, (30)] t[2] += (40,)
import datetime a_list = ["01.06.2012 09:45 a a a", "01.06.2012 08:00 b b b", "21.12.2012 21:00 c c c", "13.07.2011 17:00 d d d", "26.05.2012 08:00 e e e"] def sorting(x): date = " ".join(x.split()[:2]) return datetime.datetime.strptime(date, '%d.%m.%Y %H:%M') print sorted(a_list, key=sorting)
df1['DateTime']=pd.to_datetime(df1['Time_Date'],coerce=True) nulls=df1['Time_Date'][df1['Time_Date'].notnull()==False]
tick_locs = [list of locations where you want your tick marks placed] tick_lbls = [list of corresponding labels for each of the tick marks] plt.xticks(tick_locs, tick_lbls)
for link in soup.select("section.LINK_CLASS > div.LINK_CLASS2 > div.LINK_CLASS3 > a[href]"): print(link["href"])
def save(self, *args, **kwargs): if not self.id: super(Project, self).save(*args, **kwargs) year = datetime.datetime.now().year self.jobNumber = '{}{:04d}'.format(year, self.id) super(Project, self).save(*args, **kwargs)
if (strlen(name) <= 20) { //code }
class A(object): ... class B(A): ... b = B() super(B, b).get_value = Something() # no b.get_value = Something() # ok B.get_value = Something() # ok A.get_value = Something() # ok
open('//HOST/share/path/to/file')
for i, record in enumerate(qs): record.value = i
deltas = MyArray[1]-MyArray[0] diff_days = np.fromiter((d.days for d in deltas), dtype=float, count=len(deltas))
from sklearn.feature_extraction import DictVectorizer X_train_raw = [{'a': 1}, {'b': 1}, {'c': 1}] y_train = [('first',), ('second',), ('first', 'second')] v = DictVectorizer() X_train = v.fit_transform(X_train_raw) clf = OneVsRestClassifier(MultinomialNB()) clf.fit(X_train, y_train)
%inline %{ // Serializes into a string void SerCmd(Class *v, int *length, std::string& str) { QByteArray ba; QDataStream out(&ba, QIODevice::WriteOnly); out << *v; *length = ba.size(); str.clear(); str.append(ba.constData(), ba.size()); } %}
sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM) #UDP sock.bind((UDP_IP, UDP_PORT)) while True: z, addr = sock.recvfrom(1024) #buffer size is 1024 bytes decode = base64.b64decode(z) print("Received message:", z, decode) if not z:break
db=MySQLdb.connect(user="root",passwd="",db="my_db",unix_socket="/opt/lampp/var/mysql/mysql.sock")
import numpy as np import matplotlib.pyplot as plt plt.figure() plt.axis([0, 6000, 0, 45000]) # From your example I am assuming that the maximum value is 6000 binBoundaries = np.linspace(0,6000,201) data['column'][data.value == 0].hist(bins=binBoundaries, label='A') data['column2'][data.value == 1].hist(bins=binBoundaries, label='B') plt.title('A Histogram') plt.xlabel('x-axis') plt.ylabel('y-axis') plt.legend()
>>> from urllib2 import urlopen >>> from bs4 import BeautifulSoup >>> >>> url = "http://www.baseball-reference.com/players/split.cgi?id=aardsda01&year=2015&t=p" >>> soup = BeautifulSoup(urlopen(url)) >>> soup.find("b", text='Throws:').next_sibling.strip() u'Right'
>>> print re.sub(r'\B@\b', r'', '@Alice @ home') Alice @ home >>> print re.sub(r'\B@\b', r'', 'foo @Alice @ home') foo Alice @ home
set(i['id'] for i in items)
print your_qs.filter(league_pk__in=[1,2,3]).query print your_qs.filter(league=[1,2,3]).query
filter = lambda: Entity.owner == get_current_user() query = session.query(Entity).... #some more query = query.filter(filter())
b = B() b.__class__ b.__class__.__base__ b.__class__.__bases__ b.__class__.__base__.__subclasses__()
import numpy np = numpy del numpy
def treeToList(node, order=Order.INORDER): if node is None: return [] right = treeToList(node.right, order) down = treeToList(node.down, order) current = [node.data] if order == Order.PREORDER: return current + right + down if order == Order.INORDER: return right + current + down if order == Order.POSTORDER: return right + down + current
>>> import ctypes >>> ctypes.windll.user32.RegisterRawInputDevices <_FuncPtr object at 0x01FCFDC8>
re.findall('ABC-[0-9]+', string)
from math import sqrt as _sqrt
Post.objects.raw(""" SELECT DISTINCT post FROM (SELECT appname_post.post_id AS post, appname_recommendation.submit_time FROM appname_post INNER JOIN appname_recommendation ON appname_post.post_id = appname_recommendation.post_id ORDER_BY appname_recommendation.submit_time) """)
def lbuild( start, inc, test ): rslt = [start] while not test(start,inc): start += inc rslt.append( start ) return rslt n = '22' a = 4 nval = int(n) print lbuild( nval, -10, lambda(x,y): (x<10 and x>=0) ) print lbuild( nval, 1, lambda(x,y): x%10 == a-1 )
def list_delta(before, after): out = {} for key in before: if isinstance(before[key], list): out[key] = len(after[key]) - len(before[key]) return out before = {'name': 'davidism', 'numbers': [0, 1, 2, 3, 4]} after = do_update(before) # after = {'name': 'davidism', 'numbers': [0, 1, 2, 3, 4, 5]} list_delta(before, after) # returns {'numbers': 1}
class MyWidget(QtGui.QWidget): def __init__(self, parent=None): super(MyWidget, self).__init__(parent) self.menu=QtGui.QMenuBar() self.menu.addAction("do something") layout=QtGui.QVBoxLayout() layout.addWidget(self.menu)
http_server = tornado.httpserver.HTTPServer(application,ssl_options={ "certfile": "cert.cer", "keyfile": "key.key", })
Pattern = Pattern.replace("\\",r"\\").replace("^",r"\^")
from itertools import repeat # open the file, create a reader for row in reader: row_ = [i for item in row for i in itertools.repeat(item,2)] # now do whatever you want to do with row_
name = 'Project_Name' glob.glob(os.path.join(directory, '{}_*.txt'.format(name)))
(?i)((?:\S+\s+){0,3})\bRAM\b\s*((?:\S+\s+){0,3})
>>> import string >>> [a[1] for a in string.Formatter().parse('{foo}/{bar}')] ['foo', 'bar']
import os print os.getcwd() #Your current working directory os.chdir(os.getcwd() + '/folder1/folder2/') print os.getcwd() #Your new wordking dir create_zip_path = "my_zip.zip" file_to_add_to_zip = "my_file.txt" zip_file(create_zip_path, file_to_add_to_zip)
window.opener.location.href = "http://some/new/location"; window.close();
c = 0xFFFFFFFF & (a+b)
import csv reader = csv.reader(open('match_log.txt','rb'), dialect='excel', delimiter='|') filenameVariable = [] data = {} for row in reader: filenameVariable.append(row[0]) data[row[0]] = dict(item.split(',') for item in row[1:]) print data print filenameVariable
vsizer.Add(hsizer2, 1, wx.EXPAND)
from django.contrib.auth.models import User User.objects.create_user(username='somename', password='somepass')
def function(number_of_items): n = number_of_items # do some stuff. . . n -= 1 # now the variable number_of_items was changed in the enclosing scope!
from collections import Counter counts = Counter(list_of_words)
while True: if self.h <= 1: incr = 1 elif self.h >= 359: incr = -1 self.h += incr ... ...
tag1 = rally.create('Tag', dict(Name=info['test_id'])) tag2 = rally.create('Tag', dict(Name=info['platform'])) tags = [ dict(_ref=tag1.ref), dict(_ref=tag2.ref)] defect = { "Tags" : tags }
import os # change the directory os.chdir('c:\dir1\dir2') # use os to send commands to shell or dos os.system('python program.py') # you are done
<docx.text.paragraph.Paragraph object at 0x04299FD0>
def run(): app = QtGui.QApplication([]) loader = ExampleLoader() app.setWindowIcon(QtGui.QIcon('icon.png') # This is the only new line app.exec_()
def _format(self, object, stream, indent, allowance, context, level): # … rep = self._repr(object, context, level - 1) max_width = self._width - 1 - indent - allowance sepLines = len(rep) > max_width if sepLines: # … custom repr logic write(rep)
[re.sub("/\*.+\*/", "", m).replace('\n', '').strip() for m in re.findall("{(.+?)};", c_file_as_string, re.S)]
In [1]: list1 = [1,2,3,4] # some list In [2]: a = list1.append(5) # append '5' to the list and assign return value to 'a' In [3]: print a None # means '.append()' operation returned None In [4]: list1 Out[4]: [1, 2, 3, 4, 5] In [5]: list1.append(6) In [6]: list1 Out[6]: [1, 2, 3, 4, 5, 6]
class Proc(object): def __init__(self,cmd) self.cmd = cmd def run(self): proc = multiprocessing.Process(target=myProcess,args=(args)) self.startime = datetime.datetime.now() proc.start() proc.join() // Don't use this if you don't want to wait. procobj = Proc(cmd) procobj.run() procobj.startime // gives you starttime
from flask.ext.login import user_logged_in @user_logged_in.connect_via(app) def on_user_logged_in(sender, user): log_auth_token(user.get_auth_token()) # or whatever.
arr1inds = arr1.argsort() sorted_arr1 = arr1[arr1inds[::-1]] sorted_arr2 = arr2[arr1inds[::-1]]
random.shuffle(l) random_selection = l[ :l.index(10) ]
[input[i:i+n] for i in range(0, len(input), n)]
import json import os import shutil import tempfile def rewriteJsonFile(sourceObj, targetFilePath, **kwargs): temp = tempfile.mkstemp() tempHandle = os.fdopen(temp[0], 'w') tempFilePath = temp[1] json.dump(sourceObj, tempHandle, **kwargs) tempHandle.close() shutil.move(tempFilePath, targetFilePath)
from selenium.webdriver.firefox import webdriver browser = webdriver.WebDriver() browser.get('https://www.hidemyass.com/proxy-list') rows = browser.find_elements_by_xpath('//table[@id="listtable"]//tr') for row in rows[1:]: cells = row.find_elements_by_tag_name('td') print cells[1].text browser.close()
>>> import croniter >>> import datetime >>> now = datetime.datetime.now() >>> cron = croniter.croniter('45 17 */2 * *', now) >>> cron.get_next(datetime.datetime) datetime.datetime(2011, 9, 14, 17, 45) >>> cron.get_next(datetime.datetime) datetime.datetime(2011, 9, 16, 17, 45) >>> cron.get_next(datetime.datetime) datetime.datetime(2011, 9, 18, 17, 45)
def register_New_Date(): # Cast PostgreSQL Date as Python string # Reference: # 1. http://initd.org/psycopg/docs/extensions.html#psycopg2.extensions.new_type # 2. http://initd.org/psycopg/docs/advanced.html#type-casting-from-sql-to-python # 1082 is OID for DATE type. NewDate = psycopg2.extensions.new_type((1082,), 'DATE', psycopg2.STRING) psycopg2.extensions.register_type(NewDate)
for item in v: print v
print "0x%X" % value
import Tkinter as tk def keyPress(event): if event.char in ('V', 'F', ' '): print event.char elif event.keysym not in ('Alt_r', 'Alt_L', 'F4'): print event.keysym return 'break' root = tk.Tk() entry = tk.Entry() entry.bind('<KeyPress>', keyPress) entry.pack() entry.focus() root.mainloop()
current_ids = set(soldier.id for soldier in user.soldiers) for soldier_class in soldierlist: if soldier_class.id not in current_ids: user.soldiers.append( soldier_class() )
elif selection == '2': print "Opened database successfully \n" cursor = conn.execute("SELECT * FROM DATABASE") all = cursor.fetchall() for row in all: print "ID = ", row[0], "NAME = ", row[1], "CHECKED IN = ", row[2], "\n" raw_input()
>>> tuple = ('one', 'two', 'one', 'two', 'one') >>> ['<strong>%s</strong>' % tuple[i] if i%2 else tuple[i] for i in range(len(tuple))] ['one', '<strong>two</strong>', 'one', '<strong>two</strong>', 'one']
def run(self, edit, target): if not target or target == "": return content = self.view.substr(sublime.Region(0, self.view.size())) begin = content.find(target) if begin == -1: return end = begin + len(target) target_region = sublime.Region(begin, end) self.view.sel().clear() self.view.sel().add(target_region)
print df.apply(lambda x: pd.Series(x[~x.isnull()].values), axis=1) 0 1 2 0 Bus Car NaN 1 Plane NaN NaN 2 Car NaN NaN 3 Boat Car NaN 4 Boat Car Plane
#!/bin/bash export PYTHONSTARTUP="$1" # Set the startup script python will run when it start. shift # Remove the first argument, don't want to pass that. python manage.py shell "$@" # Run manage.py with the startup script.
from array import array buf = array("d", range(101)) addr, count = buf.buffer_info() print lib.sum(cast(addr, POINTER(c_double)), count)
row_data = ['Col 1', row.col2, XML(body_col.replace(".", ".<br/><br/>")), row.col4]
class node: name="temp" ID=-1 abstract="a short description" text="the full description" sons=[] def sLen(self): # here print ("hello") return len(self.sons) n = node() n.sons = [1, 2, 3] print n.sLen()
In [11]: df.index = pd.MultiIndex.from_tuples(df.index.map(lambda x: (x[0:2], x[2:4]))) In [12]: df Out[12]: a b bar foo bah foo A1 B1 1 0 3 2 B2 5 4 7 6 A2 B1 9 8 11 10 B2 13 12 15 14
import numpy as np; np.random.seed(0) import seaborn as sns; sns.set() uniform_data = np.random.rand(10, 12) ax = sns.heatmap(uniform_data, cbar=False, vmin=0, vmax=1) cbar = ax.figure.colorbar(ax.collections[0]) cbar.set_ticks([0, 1]) cbar.set_ticklabels(["0%", "100%"])
SPLIT="SV=" line=">tr|A0A024RAP8|A0A024RAP8_HUMAN HCG2009644, isoform CRA_b OS=Homo sapiens GN=KLRC4-KLRK1 PE=4 SV=1MGWIRGRRSRHSWEMSEFHNYNLDLKKSDFSTRWQ" print line.split(SPLIT)[0] + SPLIT + line.split(SPLIT)[1][0]
#Create the array [Nx, Ny, Nz] = (60, 220, 85) [I, J, K] = (np.arange(0,Nx,1),np.arange(0,Ny,1),np.arange(0,Nz,1)) [I, J, K] = np.meshgrid(I, J, K) #Create the 1-d idexed array ix = np.ravel_multi_index((I,J,K),(Nx,Ny,Nz),order='F') print(ix)
class MockOpen(object): def __call__(self, *args, **kwargs): #print('mocked') return self.__open(TEST_FILE) #it would be better to return a file-like object instead def __enter__(self): global open self.__open = open open = self def __exit__(self, exception_type, exception_value, traceback): global open open = self.__open with MockOpen(): # here you run your test ...
In [3]: df['Occur'] = df.groupby('Col1')['Col2'].transform(pd.Series.value_counts) df Out[3]: Col1 Col2 Occur 0 test Something 2 1 test2 Something 2 2 test3 Something 1 3 test Something 2 4 test2 Something 2 5 test5 Something 1
related_model = model_obj.__class_.foom2m.field.rel.to
#!/usr/bin/python import sys import socket file_nm = sys.argv[1] with open(file_nm, 'r') as f: for host in f: print socket.gethostbyname(host.strip())
SELECT SUM(price * exchange_rate) AS total FROM sales LEFT JOIN ( SELECT 'USD' AS currency, 1.00000 AS exchange_rate UNION ALL SELECT 'EUR', 1.32875 UNION ALL SELECT 'GBP', 1.56718 -- ... ) AS exchange ON exchange.currency = sales.currency
import numpy as np arr = np.array([False, False, True], dtype=bool) arr.all() => False np.all(arr) => False
import sys import time for i in range(10): time.sleep(0.5) sys.stdout.write('*') sys.stdout.flush() # <-- this is the key sys.stdout.write('\n')
>>> s = 'badcfe' >>> ''.join([ s[x:x+2][::-1] for x in range(0, len(s), 2) ]) 'abcdef'
class TestMyClass(unittest.TestCase): def test_should_raise(self): x = myClass() def assign_bad_name(): x.name = "7" self.assertRaises(ValueError, assign_bad_name)
import operator lst = [ ('Lisa', 'F', 8976), ('Shelly', 'F', 8975), ('Tom', 'M', 1658), ('Anthony', 'M', 985), ('Ben', 'M', 698)] ] sorted(lst, key=operator.itemgetter(1, 2))
class myHandler(webapp2.RequestHandler): def get(self): # somehow get account uiod type = Account.check_user_role_by_uid(uid) if type == 'SkilledPerson': self.render('index_farm.html') elif type == 'FarmCompany': self.render('index_farmcompany.html')
request = requests.get(url) file = zipfile.ZipFile(BytesIO(request.content))
keys=sorted(g.keys()) size=len(keys) M = [ [0]*size for i in range(size) ] for a,b in [(keys.index(a), keys.index(b)) for a, row in g.items() for b in row]: M[a][b] = 2 if (a==b) else 1 M [2, 1, 1, 0, 0], [1, 0, 1, 0, 1], [1, 1, 0, 1, 0], [0, 0, 1, 0, 1], [0, 1, 0, 1, 0]]
import os with open(os.devnull, 'w') as null: subprocess.Popen(['7z', 'e', input_file, '-o', output_dest, '-y'], stdout=null, stderr=null)
subprocess.check_call(["ping", "google.com"], shell=True)
features = pipeline.named_steps['tfidf'].get_feature_names() print(features[pipeline.named_steps['l1'].coef_ != 0])
request.headers.getlist('accept')
[^,]+
*network NetworkX *vertices 4 1 "multi part" 0.0 0.0 ellipse 2 single 0.0 0.0 ellipse 3 12 0.0 0.0 ellipse 4 13 0.0 0.0 ellipse *arcs 1 3 1.0 2 3 1.0
brew install wget
unoconv -p p4ssw0rd -f csv protectedFile.xls
def parse(self, response): for href in response.xpath('//span[@class ="itemlistinginfo"]/a/@href'): full_url = urljoin(href.extract()) item = DmozItem() item['link'] = full_url yield item
from django import template from django.template.defaultfilters import stringfilter from django.utils.text import slugify register = template.Library() @register.filter @stringfilter def germanslugify(value): replacements = [(u'ä', u'ae')] for (s, r) in replacements: value = value.replace(s, r) return slugify(value)
<?PHP $output = []; exec("python myScript.py", $output); // the $output array now contains all lines printed by the python script ?> <p> The solution was <?PHP echo $output[0]; ?>. </p>
(lambda words, rules: sum([[word[:-len(rule)]] if word.endswith(rule) else [] for word in words for rule in rules], []))(str_test.split(), stem_rules)
class myRowObj(object): def __init__(self, mac, port, dpid): self.mac = mac self.port = port self.dpid = dpid myTable = list() for each in some_inputs: myTable.append(myRowObj(*each.split())
In [15]: s = 'some text with \tspaces between' In [16]: timeit re.sub(r'(\w)(\s+)(\w)', '\\1 \\3', s) 10000 loops, best of 3: 30.5 us per loop In [17]: timeit re.sub(r'(\w)(\s+?)(\w)', '\\1 \\3', s) 10000 loops, best of 3: 24.9 us per loop
class MyNum(object): def __init__(self, val): super(MyNum,self).__init__() self.val = val def __add__(self, num): return self.__class__.(self.val + num) def __str__(self): return self.__class__.__name__ + '(' + str(self.val) + ')' print(MyNum(3) + 2) # -> MyNum(5)
>>> from collections import defaultdict >>> d = defaultdict(str) >>> for i, j in zip(X, Y): ... d[i] += j ... >>> print d defaultdict(<type 'str'>, {'1': 'mGw', '0': 'azh22'}) >>> print d.items() [('1', 'mGw'), ('0', 'azh22')] >>> X = d.keys() >>> Y = d.values() >>> print X ['1', '0'] >>> print Y ['mGw', 'azh22']
def key_check(self, key): # "x" is a meaningless name; use something meaningful lookup = { 'grade': self.grade } func = lookup[key] # Look up the correct method return func() # Call that method and return its result
from itertools import groupby from operator import itemgetter data = [1,1,1,1,0,0,0,0,0,1,1,1,0,0] blocks = [map(itemgetter(0), itemgetter(0, -1)(list(g))) + [k] for k, g in groupby(enumerate(data), itemgetter(1))] # [[0, 3, 1], [4, 8, 0], [9, 11, 1], [12, 13, 0]]
fields = ["reference_link", "rss_link"] # define fields to use with open(filename,'a+') as f: # handle the source file f.write("{}\n".format('\t'.join(str(field) for field in fields))) # write header for item in items: f.write("{}\n".format('\t'.join(str(item[field]) for field in fields))) # write items
getattr(rpc, function_name)(*params)
{% for field in form.visible_fields %}{# loop over form fields #} {% if field.name == "choice_field_name" %} {% for choice in field.queryset %} {# loop over choices #} {# here you access to choice object #} {% endfor %} {% endif %} {% endfor %}
import pandas as pd import numpy as np df = pd.DataFrame(np.random.randn(50, 4), columns=list('ABCD')) for row in df.itertuples(): df.set_value(row.Index,'test',row.D) print df.head() print df.head()
>>> xs = np.array([45982, 124, 12, 1092, 45982, 1, 985, 299, 10092]) >>> ys = np.array([1, 12, 299]) >>> np.in1d(xs, ys) array([False, False, True, False, False, True, False, True, False], dtype=bool)
import sys sys.stdin = open('input.txt', 'r')
liste = [] for i in range(34): liste.append(self.ui.tableWidget.item(self.ui.tableWidget.currentRow(), i).text()) print(liste)
combined_list = zip(somelist, otherlist) ... {% for item in combined_list %} {{ item.0 }} {{ item.1 }} {% endfor %}
import numpy as np # .... a = [[1,2,3],[4,5,6],[7,8,9]] a = np.array(a).astype(np.float32) padding = 2 noDataValue = -999.0 pixels = np.pad(a, (padding,padding), mode='constant', constant_values=(noDataValue))
>>> df.groupby(['Type', 'Major'], as_index=False).GPA.count().sort_values(['Major', 'GPA']) Type Major GPA 0 F A 2 2 T B 2 1 F C 1 3 T C 1
pip works with CPython versions 2.6, 2.7, 3.1, 3.2, 3.3 and also pypy. pip works on Unix/Linux, OS X, and Windows. Note: Python 2.5 was supported through v1.3.1, and Python 2.4 was supported through v1.1.
@app.after_request def add_header(response): """ Add headers to both force latest IE rendering engine or Chrome Frame, and also to cache the rendered page for 10 minutes. """ response.headers['X-UA-Compatible'] = 'IE=Edge,chrome=1' response.headers['Cache-Control'] = 'public, max-age=0' return response
sorted(A, key=A.get)
>>> s = "<-20 "+u"\u00B0" >>> s u'<-20 \xb0' >>> type(s) <type 'unicode'> >>> repr(s) "u'<-20 \\xb0'" >>> print s <-20 ° >>> s == u"<-20 °" True >>> s == u'<-20 \xb0' True >>> s.encode('utf-8') '<-20 \xc2\xb0' s.encode('latin1') '<-20 \xb0'
pageButton.clicked.connect(wizard.button(QWizard.NextButton).click)
>>> dir(A.B.C) ['__doc__', '__module__', 'method']
media = MediaFileUpload('image.png', mimetype='image/png', chunksize=1000, resumable=True) request = drive.files().update(id='fileId', media_body=media) response = None while response is None: status, response = request.next_chunk() if status: print status.progress()
>>> a * b[c,1,:] + b[c,0,:] array([[ 0, 6, 14, 24], [ 16, 26, 38, 52], [104, 126, 150, 176], [152, 178, 206, 236], [336, 374, 414, 456]])
DELETE FROM <the_worker_table_name> WHERE id=<the_worker_object_id>
with open('dictionary.txt', 'r') as f: dictionary_words = f.read().splitlines()
fig = plt.figure(figsize=(20, 2)) ax = fig.add_subplot(111) ax.plot(x, y)
B_inv = scipy.linalg.inv(B) C = (A.transpose().dot(B_inv.transpose())).transpose()
class Classes(models.Model): classcode = models.CharField(max_length=15) classname = models.TextField() students = models.ManyToManyField(User) def __str__(self): return "{0}: {1}".format(self.classcode, self.classname)
NO_KEY = object() def f(ch): chap = { 1: 'foo', } return chap.get(ch, NO_KEY) chapter = f(1) print(chapter if chapter is not NO_KEY else 'There was no chapter')
def fun_name(): i = 0 numbers = [] while i < 6: print "At the top of i is %d" % i numbers.append(i) i = i + 1 print "Numbers now: ", numbers print "At the bottom i is %d" % i print "The numbers: " for num in numbers: print num
for k in d: print('The key is {} and the value is {}'.format(k, d[k]))
int **zip(int *arr1, int *arr2, int length) { int **ret = new int*[length]; for(int i = 0; i<length; i++) { ret[i] = new int[2]; ret[i][0] = arr1[i]; ret[i][1] = arr2[i]; } return ret; }
In [202]: df['sum_num'] = df.sum(axis=1) In [203]: df Out[203]: num1 num2 num3 sum_num 0 1 NaN 1 2 1 NaN 1 1 2 2 1 1 1 3
class DateTimeFieldTz(models.DateTimeField): def from_db_value(self, value, expression, connection, context): if value is None: return None else: return django.utils.timezone.localtime(value)
f = open (locfile, "rb")
>>> str = u"Ñandu" >>> str[0] == u"\xd1" True >>> if str[0] == u"\xd1": print "Begins with \xd1!" Begins with Ñ!
>>> x = [1, 2, 3] >>> y = [1, 2, 3] >>> x == y True >>> x is y False
>>> dict((x[0], (x[1], x[2])) for x in names[1:]) {'A104': ('Ann', 'Lee'), 'A102': ('Jane', 'Smith'), 'A103': ('Mark', 'Twain'), 'A101': ('Mark', 'Smith')} >>> dict((x[2], (x[0], x[1])) for x in names[1:]) {'Twain': ('A103', 'Mark'), 'Smith': ('A102', 'Jane'), 'Lee': ('A104', 'Ann')}
C:\Python27\;C:\Python27\Scripts;
import numpy surf_array = pygame.surfarray.pixels3d(surface) window_array = numpy.zeros(surf_array.shape[:2], dtype=numpy.int8) ... surf_array[numpy.nonzero(window_array == 1)] = np.array([0, 0, 0]) surf_array[numpy.nonzero(window_array == 2)] = np.array([50, 50, 50])
matching_objects = News.objects.filter(title="SomeText") # this means the query returned at least one result self.assertNotEqual(matching_objects.count(), 0)
>>> dc = ["hello", "world", "foo"] >>> lines = ["This is", "an example of hello", "line in the world of strings", "Testing"] >>> [word for word in dc if any(word in line for line in lines)] ['hello', 'world']
if abc == 'abc': subprocess.check_output('bash file.sh', shell=True)
for x, left in enumerate(all): for y, right in enumerate(all): common = len(set(left) & set(right)) print "item%s has %s values in common with item%s"%(x, common, y)
import itertools def hash_on_each_end_permutations(array): array = list(array) array.remove('#') array.remove('#') for subpermutation in itertools.permutations(array): yield '#' + ''.join(subpermutation) + '#'
import filters filter_list = [(2, filters.filterA), (1, filters.filterB)] data_list = ['A', 'B' , 'C' , 'D'] def nFilter(filters, my_list): for _, f in sorted(filters): my_list = ifilter(f, my_list) return my_list # or list(my_list) if you actually want a list
import numpy as np import matplotlib.pyplot as plt fig, (ax1, ax2) = plt.subplots(1, 2) ax1.plot(np.arange(10)) ax1.set_aspect("equal") ax2.plot(np.arange(10), np.arange(0, 1, .1)) # Determining the ranges x1,x2 = ax2.get_xlim() y1,y2 = ax2.get_ylim() xRange = x2-x1 yRange = y2-y1 ax2.set_aspect(xRange/yRange) plt.show()
>>> x = [1.,2.,3.,4.] >>> [ ((e-f)/f) for e,f in zip ( x[:-1], x[1:]) ] [-0.5, -0.3333333333333333, -0.25]
import random RANDOMID = random.randit(0, 1<<32)
def writetocsv(l): #convert the set to the list b = list(l) #print b #checking print b, it prints all values of b with open("eggs.csv",'wb') as f: w = csv.writer(f) for value in b: w.writerow(value)
Popen(["C:\Users\Johannes\Documents\A Customized JonDoFox Portable Profiles - Beta 2\JonDoFoxPortable" + variable + "\JonDoFoxPortable.exe", "https://www.amazon.com/gp/sign-in.html"], ) Popen(["C:\Users\Johannes\Documents\A Customized JonDoFox Portable Profiles - Beta 2\JonDoFoxPortable%a\JonDoFoxPortable.exe"%variable, "https://www.amazon.com/gp/sign-in.html"], )
writer.writerow(("%.6f" % obj["time"], ))
import matplotlib.pyplot as plt import matplotlib.patches as patches fig1 = plt.figure() ax1 = fig1.add_subplot(111, aspect='equal') ax1.add_patch( patches.Rectangle( (0.1, 0.1), # (x,y) 0.5, # width 0.5, # height ) ) fig1.savefig('rect1.png', dpi=90, bbox_inches='tight')
a = array([[5.97561615e-06, 0.055617379], 0.119262253938, [], 0.21321, []], dtype=object) In [110]: a.nonzero() Out[110]: (array([0, 1, 3]),) non_empty= set(a.nonzero()[0]) complete_index = set(range(len(a))) empty = list(complete - non_empty) a[empty]= 0 In [130]: a Out[130]: array([[5.97561615e-06, 0.055617379], 0.119262253938, 0, 0.21321, 0], dtype=object)
"jimbo".contains("jim"); // true
def traverse(o, tree_types=(list, tuple)): if isinstance(o, tree_types): if len(o) == 0: yield '' for value in o: for subvalue in traverse(value): yield subvalue else: yield o
print("Kilograms Pounds") for i in range(1,199+1,2): kg = i * 202 print('{:<3} {:>15.1f}'.format(i, kg))
>>> mylist = [{'id':1,'value':4},{'id':1,'value':6},{'id':2,'value':6},{'id':3,'value':9},{'id':3,'value':56},{'id':3,'v alue':67},] >>> import itertools >>> [{'id': key, 'value': [x['value'] for x in grp]} ... for key, grp in itertools.groupby(mylist, key=lambda d: d['id'])] [{'id': 1, 'value': [4, 6]}, {'id': 2, 'value': [6]}, {'id': 3, 'value': [9, 56, 67]}]
set(amino).isdisjoint(set(sequence)) # True if the sets have nothing in common set(amino).intersection(set(sequence)) # a set of common elements
import requests url = 'https://api.github.com/users/braitsch' headers = {'Accept': 'application/json'} auth = ('username', 'userpass') response = requests.get(url, headers=headers, auth=auth) with open('outputfile.json', 'w') as outf: outf.write(response.content)
from constants import *
class MyThing( object ): def __init__( self, theInstance ): self.ec2_instance = theInstance
from email.utils import make_msgid msg['Message-ID'] = make_msgid()
cdef class pyScene: cdef Scene * m_scene cdef object drill_button_func def setDrillButtonCallback(self, func): self.m_scene.setDrillButtonCallback(pyHDButtonCallback, <void*>func) self.drill_button_func = func
Examples -------- Create a graph object that tracks the order nodes are added. >>> from collections import OrderedDict >>> class OrderedNodeGraph(nx.Graph): ... node_dict_factory=OrderedDict >>> G=OrderedNodeGraph() >>> G.add_nodes_from( (2,1) ) >>> G.nodes() [2, 1] >>> G.add_edges_from( ((2,2), (2,1), (1,1)) ) >>> G.edges() [(2, 1), (2, 2), (1, 1)]
SUBDOMAIN_RE = '^([^.]+)\.app-id\.appspot\.com$' app = WSGIApplication([ DomainRoute(SUBDOMAIN_RE, [ Route('/foo', 'FooHandler', 'subdomain-thing'), ]), Route('/bar', 'BarHandler', 'normal-thing'), ])
class FooMeta(type): def __new__(cls, name, bases, attrs): # do something with the kwargs... # for example: if 'foo' in attrs: attrs['fooattr'] = 'foovalue' return super(FooMeta, cls).__new__(cls, name, bases, attrs) class FooBase(object): pass class FooClass(with_metaclass(FooMeta, FooBase)): foo = "Yes" >>> FooClass.fooattr 'foovalue'
X = 42 # Create new object 42, bind name X to it. L = [] L.append(X) # Bind L[0] to the 42 object. X = 666 # Create new object 666, bind name X to it. print(L) # Will not see the 666.
class B: """docs for B with reference to :class:`.A`""" pass
def enumerate_month_dates(start_date, end_date): current = start_date while current <= end_date: if current.month >= 12: next = datetime.date(current.year + 1, 1, 1) else: next = datetime.date(current.year, current.month + 1, 1) last = min(next - datetime.timedelta(1), end_date) yield current, last current = next
from django.conf import settings settings.DEBUG = True # Don't do this!
#!/usr/bin/env python # test.py class Master(object): mydata = [] def __init__(self): s1 = Sub1() s2 = Sub2() class Sub1(Master): def __init__(self): super(Sub1, self).mydata.append(1) class Sub2(Master): def __init__(self): super(Sub2, self).mydata.append(2) if __name__ == "__main__": m = Master() print m.mydata
"fdfdfd.dfdfd.dfdfdf.dfdfdf".rfind('.')
[{"pk": 1, "model": "app_name.model", "fields": {"field1": "value1", "field2": "value2", }}, {"pk": 2, "model": "app_name.model", "fields": {"fiel1": "value2", "field2": "value2", }}]
command = input("Type a command") if command in ["1","D","dog"]: do_something() else: do_something_else()
from math import sqrt from trueskill import BETA from trueskill.backends import cdf def win_probability(player_rating, opponent_rating): delta_mu = player_rating.mu - opponent_rating.mu denom = sqrt(2 * (BETA * BETA) + pow(player_rating.sigma, 2) + pow(opponent_rating.sigma, 2)) return cdf(delta_mu / denom)
name = request.forms.get('name') data = request.files.get('data') raw = "" if name and data.file: while True: datachunk = data.file.read(1024) if not datachunk: break raw = raw + datachunk filename = data.filename return "Hello %s! You uploaded %s (%d bytes)." % (name, filename, len(raw))
import ntplib from time import ctime c = ntplib.NTPClient() response = c.request('europe.pool.ntp.org', version=3) ctime(response.tx_time)
print DIV('bar', Class="title") ==> <DIV class="title">bar</DIV>
import getpass pswd = getpass.getpass('Password:')
if all(b==5 for b in base): do_something()
class node(object): def __init__(self, value, children = None): self.value = value self.children = children or [] self.parent = None for child in self.children: child.parent = self
>>> df = pd.DataFrame({"A": [1,2,np.nan]}, index=[10,20,np.nan]) >>> df A 10 1 20 2 NaN NaN >>> df.query("index == index or index != index") A 10 1 20 2 NaN NaN
var_list = ['default'] print var_list[-1] # 'default' var_list.append('new var') print var_list[-1] # 'new var'
class UserProfileConfig(forms.Form): def __init__(self,request,*args,**kwargs): super (UserProfileConfig,self).__init__(*args,**kwargs) self.fields['username'] = forms.CharField(label='Username',max_length=100,initial=request.session['some_var'])
CALL object%ParentType%Binding(...)
plt.savefig("g3.19e10.01024.jpg") plt.savefig("g3.19e10.01024.png")
import csv lstName = ['a', 'b', 'c', 'd', 'e', 'etc'] with open('file.csv', 'r+') as f: reader = csv.reader(f, delimiter='\t') out_lines = [row + [lstName[i]] for i, row in enumerate(reader)] f.seek(0) # set file position to the beginning of the file csv.writer(f, delimiter='\t').writerows(out_lines)
self.img = [gtk.Image() for _ in xrange(20)]
import numpy as np impoty scipy.optimize as opt def objective(pars): a, b, c = pars return np.sum((y-(a*np.exp(-b*x)+c))**2) opt.minimize(objective, x0=np.array([12000, 0.3, 2000]))
>>> b = QtCore.QByteArray.fromPercentEncoding('abc%20.def%C3%A4.ghi') >>> b.data() 'abc .def\xc3\xa4.ghi' >>> s = b.data().decode('utf8') >>> print s abc .defä.ghi
class BoringForm(Form): until = DateTimeField( "Until", format="%Y-%m-%dT%H:%M:%S", default=datetime.today, ## Now it will call it everytime. validators=[validators.DataRequired()] )
>>> original_text = "Go USA\n Hail UK\n" >>> acronyms = {"USA": "America", "UK": "Britannia"} for acronym in acronyms: ... original_text = acronyms[acronym].join(original_text.split(acronym)) ... >>> original_text ... 'Go America\n Hail Britannia\n'
>>> f = open('test.txt', 'r') >>> f.read() 'Initial contents\n' >>> f.close() >>> f = open('test.txt', 'wua') >>> print >> f, 'writing' >>> f.close() >>> f = open('test.txt', 'r') >>> f.read() 'writing\n' >>> f.close() >>> f = open('test.txt', 'auw') >>> print >> f, 'appending' >>> f.close() >>> f = open('test.txt', 'r') >>> f.read() 'writing\nappending\n' >>> f.close()
virtualenv -p python3.5 env source env/bin/activate pip install flask
return np.fabs((XX - X ** 2 / count) / d)
import os string = input("Please type the input ") directory = "c://files//python" for file in os.listdir(directory): if file.endswith(".txt"): filecontent = open(file, "r") if string in filecontent.read(): print("The file that matches the input was found at" + file)
#blog/templates/blog/entry_detail.html {% extends "base.html" %} {% load django_markdown %} {% block content %} <div class="post"> <h2><a href="{% url "entry_detail" slug=object.slug %}">{{ object.title }}</a></h2> <p class="meta"> {{ object.creation_date }} | Tagged under {{ object.tags.all|join:", " }} </p> {{ object.body|markdown }} </div> {% endblock content %}
pip install scrapy==0.18.4
from flask.views import MethodViewType class CombinedType(ResourceRegistry, MethodViewType): pass class BaseRegistered(object): __metaclass__ = Combinedtype
x,y=editor.control.GetScreenPosition()
def delete_file(request_id, response, exception): if exception is not None: # Do something with the exception pass else: # Do something with the response pass batch = service.new_batch_http_request(callback=delete_file) for file in children["items"]: batch.add(service.files().delete(fileId=file["id"])) batch.execute(http=http)
print (" please enter all the numbers you want to calculate the avarage. After you enter all of them press 'f' to finish.") s = i = 0 #declare counter: i = 0 x = raw_input ('please enter the number') while (x != 'f'): x = eval (x) s = s + x i+=1 #increment counter: i=i+1 or i+=1 (these 2 options are equivalent) x = raw_input ('please enter the number') print (' the average is'), s/i #divide the sum by counter
image = Image.new("RGBA", (600,150), (255,255,255)) draw = ImageDraw.Draw(image) font = ImageFont.truetype("resources/HelveticaNeueLight.ttf", fontsize) draw.text((10, 0), txt, (0,0,0), font=font) img_resized = image.resize((188,45), Image.ANTIALIAS)
pattern = "%.4f" floats = [pattern % i for i in floats]
import csv import time from datetime import date year = str(date.today().year) filename = r'output\Year\{}.csv'.format(year) reader = csv.reader(open(r"input.csv"),delimiter=',') filtered = filter(lambda p: year == p[7], reader) csv.writer(open(filename, 'w', newline=''), delimiter=',').writerows(filtered) time.sleep(0.1)
>>> user_columns = User.__table__.columns >>> sess.query(*user_columns).all() # unpack user_columns into arguments [(1, u'One', u'one@example.com', u'An address'), (2, u'Two', u'two@example.com', u'An address'), (3, u'Three', u'three@example.com', u'An address')]
file = open('P:\test.csv', 'w') fields = ('ItemID', 'Factor', 'FixedAmount') wr = csv.DictWriter(file, fieldnames=fields, lineterminator = '\n') wr.writeheader() wr.writerow({'ItemID':1, 'Factor': 2, 'FixedAmount':3}) file.close()
>>> d = {} >>> for i in allData: if i[0] in d: d[i[0]][-1] = list(set(d[i[0]][-1] + (i[-1].split(',')))) else: d[i[0]] = [i[1],i[2].split(',')] >>> d {'jill': ['27', ['veggie supreme', ' cheese']], 'joe': ['32', ['pepperoni', 'cheese', 'pepperoni', 'veggie supreme']], 'marc': ['24', ['cheese', 'cheese', 'chicken supreme']]}
$ python -m timeit -s "import struct; network_stream = struct.pack('>I', 0x12345678)" "(converted_int,) = struct.unpack_from('>I', network_stream, 0)" 1000000 loops, best of 3: 0.277 usec per loop $ python -m timeit -s "import struct; from struct import unpack_from; network_stream = struct.pack('>I', 0x12345678)" "(converted_int,) = unpack_from('>I', network_stream, 0)" 1000000 loops, best of 3: 0.258 usec per loop
import unicodedata a = u"STRING GOES HERE" # using an actual string would break stackoverflow's code formatting. u"".join( x for x in a if not unicodedata.category(x).startswith("M") )
# add to your Client model def get_fields(self): fields_display = [] for f in Client._meta.fields: name = f.name if len(f.choices) == 0: fields_display.append([name, f.value_to_string(self)]) else: fields_display.append([name, getattr(self,"get_%s_display" % name)()]) return fields_display
from random import randint mcworks = [] for n in xrange(NUM_ITERATIONS): mctest = [randint(0, 100) for i in xrange(5)] if sum(mctest[:3])/3 == mcavg[2]: mcworks.append(mctest) # mcavg is real data
# transactional session Session = sessionmaker(transactional=True) sess = Session()
subprocess.Popen(full_command, close_fds=True)
df.groupby("c")["b"].nunique()
template<class T> struct foo {}; template<class T> void export_foo(std::string name) { boost::python::class_<foo<T>>(name.c_str()); } BOOST_PYTHON_MODULE(foo) { export_foo<int>("foo_int"); export_foo<std::string>("foo_string"); //... }
-- object_id - tablename -- name - column name select case when is_computed=0 then 'Not Computed' else 'Computed'end [Is Computed] from sys.columns where object_id=object_id('dbo.x1') and name ='i1'
>>> import redis >>> r = redis.Redis() >>> for x in r.scan_iter('dummy*'): ... print(x) ... b'dummy3' b'dummy2' b'dummy1'
In [18]: [x for x in range(5)] Out[18]: [0, 1, 2, 3, 4] In [19]: x Out[19]: 4
f = urlopen ('http://ichart.finance.yahoo.com/table.csv?s=AAPL&d=4&e=29&f=2014&g=d&a=8&b=22&c=1981&ignore=.csv') with open('output.csv', 'w') as out: # print header first out.write(f.readline()) # then print reversed lines for line in reversed(f.readlines()): out.write(line) f.close() # !!!
:noremap <expr> <C-f> empty(bufname('')) ? ':edit ' : ':tabnew '
sudo chown odoo: conf
import os if not os.path.exists('abc.db'): conn = sqlite3.connect('abc.db')
source_list = new QListWidget(); dest_list = new QListWidget(); new QListWidgetItem(tr("Oak"), source_list); new QListWidgetItem(tr("Birch"), source_list); connect(source_list, SIGNAL(clicked(QModelIndex)), this, SLOT(swapEntry(QModelIndex))); void MyWidget::swapEntry(QModelIndex index) { dest_list->insertItem(dest_list->count(), source_list->takeItem(index.row())); }
class MyModelAdmin(admin.ModelAdmin): def save_model(self, request, obj, form, change): # custom stuff here obj.save()
>>> print "to:", new or "EMPTY" , "from:" , old or "EMPTY" to: [1, 2, 3] from: [0, 1, 2, 3, 4, 5] >>> new = [] >>> print "to:", new or "EMPTY" , "from:" , old or "EMPTY" to: EMPTY from: [0, 1, 2, 3, 4, 5]
bucket.put('path/to/your/pdf/object/on/s3', pdf_object_bytes, headers={'Content-Disposition': 'attachment;filename=test.pdf'})
@register.filter def isotime(datestring): datestring = str(datestring) return datestring.replace("T"," ")
res = [z for z in ((x, y[i]) for i in I)]
from itertools import groupby, accumulate from collections import defaultdict def sub_seq(li, n): d = defaultdict(list) rle = [(k, len(list(g))) for k, g in groupby(li)] endpoints = accumulate(size for k, size in rle) for end_index, (value, count) in zip(endpoints, rle): for index in range(end_index - count, end_index - n + 1): d[value].append(index) return dict(d)
"{{'key_1': '{value}'}}".format(**{'value': 'test'})
db = MySQLdb.connect(host="xxx.xx.xx.x", user="xxx", passwd="xxx", db="xxxx") cursor = db.cursor() cursor.executemany('Insert Query',json_data) db.commit() cursor.close() db.close()
with open('yourfile.pdf', 'w') as f: f.write(xdata)
lst = [1,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,1,0,1,3,0,3,0,3,1] if lst[4] == 3: print('yes')
x = 10 lst = [] #Note: do not use list as a variable name, it shadows the built-in while x != 0: lst.append(raw_input('Enter a word: ')) x-=1
from scipy.integrate import simps from numpy import seterr, pi, sqrt, linspace, tan, cos, exp N = 100 a = 2. t = linspace(0, pi / 2, N) x = tan(t) f = cos(a * x) * exp(-x ** 2) * (1 + x ** 2) print "numerical solution = ", 2 * simps(f, t) print "analytical solution = ",sqrt(pi) * exp(-a ** 2 / 4)
>>> from operator import itemgetter >>> from itertools import groupby >>> data=[["apple",2],["cake",5],["cake",8],["chocolate",3],["chocolate",9],["chocolate",10],["grapes",6]] >>> [list(g) for _,g in groupby(sorted(data,key=itemgetter(0)),itemgetter(0))] [[['apple', 2]], [['cake', 5], ['cake', 8]], [['chocolate', 3], ['chocolate', 9], ['chocolate', 10]], [['grapes', 6]]] >>>
$ ulimit -n 1200 $ python sockets .... Creating socket 1197 Creating socket 1198 Traceback (most recent call last): File "sockets", line 7, in <module> File "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/socket.py", line 182, in __init__ socket.error: [Errno 24] Too many open files
getattr(client.service, 'getWeatherInfo')()
MyModel.objects.filter(**your_filters).extra(select={ 'measure_name': 'SELECT measure.name FROM measure WHERE mymodeltable.measure_id = measure.id' })
cr.save() # push a new context onto the stack cr.scale(0.5, 0.5) # scale the context by (x, y) cr.set_source_surface(imagesurface, margin, margin) cr.paint() cr.restore() # pop the context
import re re.sub(r'\d', '', s) # or re.sub(r',\d', '', s) to remove the commas, too
seen = set() item_list = [seen.add(item) or item for item in item_list if item not in seen]
str = "What $noun$ is $verb$?" print str.replace("$noun$", "the heck")
import numpy as np from scipy.stats import pareto b = 0.9 np.random.seed(seed=233423) print pareto.rvs(b, loc=0, scale=1, size=5) np.random.seed(seed=233423) print pareto.rvs(b, loc=0, scale=1, size=5)
from pyramid.view import view_config @view_config(route_name='some_api_name', request_method='POST', accept='application/json') def handle_someapi_json(request): # return JSON @view_config(route_name='some_api_name', request_method='POST', accept='text/html') def handle_someapi_html(request): # return HTML
if sys.stdin is not sys.__stdin__: return fallback_getpass(prompt, stream)
# patch_twitter.py import twitter TwitterStatus = twitter.Status class Status(TwitterStatus): def __init__(self, *args, **kwargs): TwitterStatus.__init__(self, *args, **kwargs) self.args = args self.time = parseTime(self.created_at) self.phrase = ... def prettyprint(self): # something twitter.Status = Status # use api
def save(self, force_insert=False, force_update=False, *args, **kwargs): if self.id: # updated else: # inserted models.Model.save(self, *args, **kwargs)
In [26]: pd.DataFrame({'D':l}).merge(df, how='left') Out[26]: D A B C 0 4 a b 1 1 2 a b 1 2 6 c d 3 3 4 a b 1
def reload_start(self): self.enable() self.conn.set_prompt(r'Save\? \[yes/no\]\:') self.conn.execute('reload') self.conn.set_prompt(r'Proceed with reload\? \[confirm\]') self.conn.execute('no') self.conn.set_prompt() self.conn.execute('confirm') print self.conn.response
def controlTextDidChange_(self, notification): NSLog("textdidchange")
class MyImgPattern(Pattern): def handleMatch(self, m): a = etree.Element('a', attrib={'href':m.group(3)}) img = etree.Element('img', attrib={ 'width': '100%', 'src': m.group(3), 'alt': m.group(2), 'title': m.group(4) }) a.append(img) return a
terms = re.split(r"[+\-/*^()]+", cleanFunc)
m = os.stat('fooBar.txt').st_mode otherExec = bool(m & 0001) otherWrite = bool(m & 0002) otherRead = bool(m & 0004) groupExec = bool(m & 0010) groupWrite = bool(m & 0020) groupRead = bool(m & 0040) ...
match = re.search(r'(\w+)\s(?:D\.C\.), (\w\w)\W', location).groups()
while True: s = input('Enter something : ') if s == 'quit': # Do this check first break elif len(s) > 3: # Then see if the input is too long print('too big') continue print('something')
sed -i "/^class myClass2:/,/^class/s/f1 = '512kB'/f1 = '1MB'/" path/to/file.py
import dask.bag as bag import json b = bag.from_filenames('input.json.gz').map(json.loads).map(manipulate).concat() b.map(lambda t: ','.join(map(str, t)).to_textfiles('out.*.csv').compute()
event_audit=gdata.calendar.AttendeeStatus("http://schemas.google.com/g/2005#event.invited") event.who.append(gdata.calendar.Who(email="xyz@pqr.com",rel="http://schemas.google.com/g/2005#event.invited"))
self.assertEqual("An alert",selenium.get_alert());
shell = subprocess.Popen("/bin/bash -i".split(), stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
import commands for x in xrange(100): commands.getstatusoutput("/home/Example.R")
WORDLIST = "words.txt" def loadWords(): with open(WORDLIST, 'r') as inFile: wordTuple = tuple(word.lower() for word in inFile.read().split()) return wordTuple MYWORDS = loadWords()
chart = pygal.StackedLine(width=1000, height=800)
import urllib2 opener = urllib2.build_opener() opener.addheaders = [('User-agent', 'Mozilla/5.0')] opener.open('http://www.example.com/')
workers = [] for wid in range(nworkers): w = Thread(target = dowork, args = ...) w.start() workers.append(w) # join all of the workers for w in workers: w.join() print "All done!"
v = 8.836333333333339 s = str(v) print s[:s.find('.')+3] # prints 8.83
fd = open (data_file, 'w', 100 * size_of_line)
>>> import numpy as np >>> A = np.array([[1,2,3,4],[4,5,6,7],[7,8,9,10]]) >>> B = A[:2] >>> C = A[2:] >>> B array([[1, 2, 3, 4], [4, 5, 6, 7]]) >>> C array([[ 7, 8, 9, 10]])
>>> import HTMLParser >>> h = HTMLParser.HTMLParser() >>> print h.unescape('&pound;682m') £682m EDIT for Python 3: the HTMLParser module has been renamed to html.parser. >>> import html.parser >>> h = html.parser.HTMLParser() >>> print(h.unescape('&pound;682m')) £682m
#!/usr/bin/python import os.path def lvl_down(path): return os.path.split(path)[0] def lvl_up(path, up_dir): return os.path.join(path, updir) print(lvl_down('a/b/c')) # prints a/b print(lvl_up('a/b/c','d')) # prints a/b/c/d
sum(val for row in matrix for val in row)
import requests payload = 'v=1&t=event&tid=UA-XXXXXY&cid=555&ec=video&ea=play&el=holiday&ev=300' r = requests.post('http://www.google-analytics.com/collect', data=payload)
pure_rating = int(rating_as_num) decimal_part = rating_as_num - pure_rating final_score = "+" * pure_rating if decimal_part >= 0.75: final_score += "+" elif decimal_part >= 0.25: final_score += "-"
$HADOOP_HOME/bin/hadoop jar $HADOOP_HOME/contrib/streaming/hadoop-0.17.0-streaming.jar -mapper mapper.py -reducer reducer.py -input input/foo -output output -file /tmp/foo.py -file /tmp/lib.zip
from scrapyd_api import ScrapydAPI scrapyd = ScrapydAPI('http://localhost:6800') scrapyd.schedule('project_name', 'spider_name')
m = [] for i,(k, v) in enumerate(n): n[i] = (str(k)+'B', str(v) + 'B') m.append(n[i])
from collections import defaultdict from itertools import izip add = lambda (sum_, count), value: (sum_+value, count+1) unique = defaultdict(lambda:(0,0)) for ref, value in izip(reference_array.flat, given_array.flat): unique[ref] = add(unique[ref], float(value)) with open('file.out', 'w') as out: for ref, (sum_, count) in unique.iteritems(): out.write('%f,%f\n' % (ref, sum_ / count))
x=np.array([3,4,5]) y=np.array([2,50,-1]) z=np.array([30,0,3]) mya = [x,y,z] maximum = np.amax(mya, axis=0) # maximum will store a list as [maximumofx, maximumofy, maximumofz] -> [30,50,5]
>>> int('1001', 2) 9
try: from local_settings import * except ImportError: # if you require a local_settings to be present, # you could let this exception rise, or raise a # more specific exception here pass
a_objs = A.objects.filter(connect__b=b_model)
class NoFollowSpider(CrawlSpider): def __init__(self, crawl_pages=False, moreparams=None, *args, **kwargs): super(NoFollowSpider, self).__init__(*args, **kwargs) # Set the class member from here if (crawl_pages is True): NoFollowSpider.rules = ( Rule (SgmlLinkExtractor(allow=("", ),), callback="parse_items", follow= True),) # Then recompile the Rules super(NoFollowSpider, self)._compile_rules() # Keep going as before self.moreparams = moreparams
from random import sample sample(range(0, 100), 10)
font = cv.InitFont(cv.CV_FONT_HERSHEY_SIMPLEX, 1, 1, 0, 3, 8) #Creates a font x = 10 #position of text y = 20 #position of text cv.PutText(image,"Hello World!!!", (x,y),font, 255) #Draw the text
>>> class MyDefaultDict(dict): ... def __missing__(self, key): ... self[key] = key ... return key ... >>> d = MyDefaultDict() >>> d['joe'] 'joe' >>> d {'joe': 'joe'}
# env.py _src = '' _html = '' def set_path_srcfile(path_srcfile): global _src _src = path_srcfile def get_path_srcfile(): return _src ...
In [11]: t.sum() Out[11]: mean value1 17.5 dtype: float64 In [12]: t / t.sum() Out[12]: mean value1 gov a 0.428571 b 0.571429 In [13]: (t / t.sum()) * 100 Out[13]: mean value1 gov a 42.857143 b 57.142857
import urllib2 import json import time while True: citibikenycJson = json.loads(urllib2.urlopen('http://www.citibikenyc.com/stations/json').read()) # do something with the JSON time.sleep(5)
<%def name="if_statement(x)">if (${x})</%def> <%def name="sample_condition()">3 == 3</%def> ${if_statement(capture(sample_condition))}
client = zeep.Client( wsdl='http://www.webservicex.net/ConvertSpeed.asmx?WSDL') doc = client.get_port().binding.create_message( 'ConvertSpeed', 100, 'kilometersPerhour', 'milesPerhour') print(etree.tostring(doc, pretty_print=True))
def OnPress(self, sender): self.panel.remove(self.curPage) self.panel.add(self.spinner, DockPanel.CENTER) self.curPage=self.spinner Timer(5000, self.OnTimer) return CalculatePercentage() def OnTimer(self, target): self.panel.remove(self.curPage) self.panel.add(self.recommendation, DockPanel.CENTER) self.curPage=self.recommendation
class MyModelAdmin(admin.ModelAdmin): list_display = ['field_1', 'field_2', ...] admin.site.register(MyModel, MyModelAdmin)
while guessesMade < 6: guess = int(input('Take a guess')) if guess < number: print('Your guess is too low.') guessesMade += 1 elif guess > number: print('Your guess is too high.') guessesMade += 1 else: break
def draw(event): global history, canvas #when a tile gets painted on X=event.pos[0] Y=event.pos[1] history.append(X,Y,canvas[X][Y]) canvas[X][Y] = current_color def undo(): global history, canvas X = history[len(history)-1][0] Y = history[len(history)-1][1] color = history[len(history)-1][2] canvas[X][Y] = color history.pop(len(history)-1)
import subprocess, time s = subprocess.Popen(['foo', 'args']) timeout = 1 poll_period = 0.1 s.poll() while s.returncode is None and timeout > 0: time.sleep(poll_period) timeout -= poll_period s.poll() if timeout <= 0: s.kill() # timed out else: pass # completed
class Location(models.Model): location_name = models.CharField() def __unicode__(self): #or __str__ for python 3.x return u'%s' % self.location_name #Or whatever field class Person(models.Model): location = models.ForeignKey(Location) name = models.CharField() def __unicode__(self): #or __str__ for python 3.x return u'%s' % self.name #or whatever field
(r'^posts/tagged/(?P<tag>[-\w]+)/$', 'blog.view.posts_by_tag')
# reindex both to union of indices df_a = df_a.reindex(df_a.index | df_b.index) df_b = df_b.reindex(df_a.index | df_b.index) # replacement criteria can be put in this lambda function combiner = lambda: x, y: np.where(y < x, y, x) df_c = df_a.combine(df.b, combiner)
encode_history = {} def encode(str): """some calculations which lead to the code""" ... your calculations ... encode_history[code] = str return code def decode(code): """function to convert a code to string""" if code in encode_history: return encode_history[code] else: return None
thr = 0.95 # Is cumulative sum exceeds some threshold is_exceeds = np.cumsum(sklearn_pca.explained_variance_ratio_) >= thr # Which minimal index provides such variance # We need to add 1 to get minimum number of eigenvectors for saving this variance k = np.min(np.where(is_exceeds))+1 # Or you can just initialize your model with thr parameter sklearn_pca = PCA(n_components = thr)
# cols to select c = rpy2.robjects.IntVector((1,3)) # selection from df mydf.rx(True, c)
>>> import re >>> filterE = "x.y.prop1====1 and x.y.prop2>=2 and x.y.prop1<3 or x.y.prop4>9" >>> re.split(r'((?<!=)==(?!=)|<=|>=|!=|<|>)', filterE) ['x.y.prop1====1 and x.y.prop2', '>=', '2 and x.y.prop1', '<', '3 or x.y.prop4', '>', '9']
for w in xrange(workers): p = multiprocessing.Process(target=scrape_site, args=(q, )) p.start() processes.append(p)
import datetime date = datetime.datetime.strptime("111609", "%m%d%y") print date.strftime("%m/%d/%Y")
data = re.search(r"{.{4,9}b .*?[\r\n]*?.*? ((?:(?!\(| ..fs24).)*)", string, re.DOTALL) ^^^^^^^^^^^^^^^^^^^^
from multiprocessing import Pool p = Pool() #number of processes = number of CPUs keys, values= zip(*d.iteritems()) #ordered keys and values processed_values= p.map( f, values ) #apply the function f to each set and wait for result #then proceed to join the three sets
params = {'param1' : value1, 'param2' : value2, # ... etc } url = "http://example.com" # Referer must be correct # To determine correct Referer url, prepare a request without actually sending it req = requests.Request('POST', url, params=params) prepped = session.prepare_request(req) #r = session.send(prepped) # don't actually send it # add the Referer header by examining the prepared url headers = { 'Referer': prepped.url } # now send normally r = session.post(url, params=params, data=data, headers=headers)
if(propA->GetRenderDepth() == NULL || propB->GetRenderDepth() == NULL){ if(propA->GetRenderDepth() != NULL && propB->GetRenderDepth() == NULL){ propArray->ReplaceItem(i, propB); propArray->ReplaceItem(i+1, propA); isUnsorted = true; } }else if(propA->GetRenderDepth() < propB->GetRenderDepth()){ propArray->ReplaceItem(i, propB); propArray->ReplaceItem(i+1, propA); isUnsorted = true; } } //end for loop
pytest_plugins = ['module1', 'module2']
`for index, value in ndenumerate( self.cells ): do_something( value ) self.cells[index] = new_value`
ax = rawdat.plot(x='ts', y=['bid','ask'], marker='.', lw=0) plot.hold() rawdat.plot(x='lastTrade', y='last', marker='x', lw=0, ax=ax) plt.show()
bound_handler = handler.__get__(self, MyWidget)
def __rmul__(self, scalar): # self: right operand (Vector) v = Vector() v.x = self.x * scalar v.y = self.y * scalar return v
>>> [eval(i, {"__builtins__":None}) for i in ['6.2', '"Hello, world!"', '7']] [6.2, 'Hello, world!', 7]
def classifyInput(n): if n == "r": return 1 elif n == "s": return 2 elif n == "p": return 3 else: print "Wrong input!" # implicit: return None p1_inp = raw_input("Player 1 ?") p1 = classifyInput(p1_inp)
from PyZ3950 import zoom conn = zoom.Connection ('z3950.iacentre.com', 210,user='gaurishankar') conn.databaseName = 'itke' conn.preferredRecordSyntax = 'USMARC' query = zoom.Query ('CCL', 'mango') res = conn.search (query) for i in res: print i,i.data
import os.path, shutil def remove_ext(arg, dirname, fnames): argfiles = (os.path.join(dirname, f) for f in fnames if f.endswith(arg)) for f in argfiles: shutil.move(f, f[:-len(arg)]) os.path.walk('/some/path', remove_ext, '.tex')
x = pandas.Series([1, 2, 3], index=["A", "B", "C"]) x.index.name = "stuff" x.name = "cruddo" >>> print(x) stuff A 1 B 2 C 3 Name: cruddo, dtype: int64 >>> x.reset_index().to_json(orient='records') [{"stuff":"A","cruddo":1},{"stuff":"B","cruddo":2},{"stuff":"C","cruddo":3}]'
import numpy as np import matplotlib.pyplot as plt def sigmoid(x): return 1 / (1 + np.exp(-4*x)) x = np.linspace(-3, 3, 1000) y = np.array([(1 - n)**(-1) if n < 0 else 1 + n for n in x]) z = sigmoid(x) plt.ylim(0, 1.5) plt.plot(x, z, linewidth=2) plt.plot(x, y, linewidth=2) plt.show()
def blendShape(self, *args): blendshape_name = cmds.textField(self.widgets['bs'], q=True, text=True) cmds.blendShape(cmds.ls(sl=True)[1], cmds.ls(sl=True)[0], frontOfChain=True, n=blendshape_name)
object {} { members } members pair pair , members pair string : value # Keys *must* be strings.
>>> TupList = [('ABC D','235'),('EFG H','462')] >>> TupList.index((u'EFG H',u'462')) 1
direct_to_template(request, template, extra_context=None, mimetype=None, **kwargs)
>>> class Integer: ... def __init__(self, val=0): ... self.val = int(val) ... def __eq__(self, other): ... return self.val == other ... >>> Integer(1) == 1.1 False >>> Integer(1.2) == Integer(1.3) True >>> Integer(4) == Integer(7) False >>> Integer(2) == 2 True >>>
from Scripts import script1 map = {"One" : script1.function_one, "Two" : script1.function_two] def return_mapping(str): return map[str]
Sim = np.identity(n) # diagonal with ones (100 percent similarity) for i in range(n): for j in range(i+1, n): # +1 skips the diagonal Sim[i, j]= simfunction(list_doc[i], list_doc[j]) # Expand the matrix (copy triangle) tril = np.tril_indices_from(Sim, -1) # take lower & upper triangle's indices triu = np.triu_indices_from(Sim, 1) # (without diagonal) Sim[tril] = Sim[triu]
>>> string = {1,2,3} >>> [i for i in sample if string.intersection(i)] [[1, 5, 5, 5, 5, 5], [2, 5, 5, 5, 5, 5], [3, 5, 5, 5, 2]]
import io buf = io.BytesIO(b'Hello world!') buf.read(1) # Returns b'H' buf.tell() # Returns 1 buf.read(1) # Returns b'e' buf.tell() # Returns 2 # Set the pointer to 0. buf.seek(0) buf.read() # This will return b'H', like the first call.
from __future__ import absolute_import import json #this imports standard lib json import mypackage.json as my_json #import custom json module
import sqlalchemy.types as types class ChoiceType(types.TypeDecorator): impl = types.String def __init__(self, choices, **kw): self.choices = dict(choices) super(ChoiceType, self).__init__(**kw) def process_bind_param(self, value, dialect): return [k for k, v in self.choices.iteritems() if v == value][0] def process_result_value(self, value, dialect): return self.choices[value]
[e for e in emails if not any(pat in e for pat in pattern_list)]
#! /usr/bin/env python import sys import termios import copy from time import sleep fd = sys.stdin.fileno() old = termios.tcgetattr(fd) new = copy.deepcopy(old) new[3] = new[3] & ~termios.ECHO try: termios.tcsetattr(fd, termios.TCSADRAIN, new) sleep(5) except KeyboardInterrupt, ke: pass finally: termios.tcsetattr(fd, termios.TCSADRAIN, old) sys.exit(0)
example = [(1,2), (1,1,1), (1,1), (1,1), (2,1), (3,4), (2,3,1), (1,2,3)] RDD = sc.parallelize(example) result = RDD.map(lambda x: list(set(x)))\ .filter(lambda x: len(x)>1)\ .map(lambda(x):(tuple(x), 1))\ .reduceByKey(add)\ .collect() print result
from matplotlib.colors import LogNorm from matplotlib.pyplot import * x = np.random.normal(5,10,100000) y = np.random.normal(5,10,100000) counts,ybins,xbins,image = hist2d(x,y,bins=100,norm=LogNorm()) contour(counts,extent=[xbins.min(),xbins.max(),ybins.min(),ybins.max()],linewidths=3)
tree = ElementTree(fromstring(xml)) tree.findall('./{http://www.xyz.com}Message' '/{http://www.xyz.com}Body' '/{http://uri.xyz.com/Chorus/Message}CHMasterbook' '/{http://uri.xyz.com/Chorus/Message}event')
# there are no builtin avg function def avg(lst): return sum(lst)/len(lst) rows = list(avg(row) for row in a)
IS_DEV_APPSERVER = 'development' in os.environ.get('SERVER_SOFTWARE', '').lower()
"| {0: >2d} | | {1: >2d} |".format(Die1,Die2)
def decorator(func): def wrapped(a, b, c): return c + func(a, b) return wrapped @decorator def add(a, b): return (a+b)
from cryptography.fernet import Fernet key = Fernet.generate_key() cipher_suite = Fernet(key) cipher_text = cipher_suite.encrypt(b"A really secret message. Not for prying eyes.") plain_text = cipher_suite.decrypt(cipher_text)
import networkx as nx import matplotlib.pyplot as plt G = nx.path_graph(4) nx.draw_networkx(G) plt.grid('on') plt.show()
import functools def assert_index_datetime(f): @functools.wraps(f) def wrapper(df): assert df.index.dtype == pd.to_datetime(['2013']).dtype return f(df) return wrapper @assert_index_datetime def fn(df): pass df = pd.DataFrame({'a': [1]}, index=pd.to_datetime(['2013'])) fn(df)
In [14]: df.stack().value_counts() Out[14]: 192.248.8.183 3 192.168.2.85 3 66.249.74.52 2 192.168.2.161 2 124.43.113.22 1 dtype: int64
from ggplot import * p = ggplot(aes(x='C1', y='C2', color='Population'), data=mds)+ geom_point(alpha=0.6) + ggtitle('My plot') print p
current_url = request.resolver_match.url_name
x = [1, 2, 3, 4, 5, 6, 7, 8, 9] y = [125, 32, 54, 253, 67, 87, 233, 56, 67] color = [item / 255.0 for item in y] grayscale_map = plt.get_cmap('gray') plt.figure() plt.scatter(x, y, s = 500, c = color, cmap = grayscale_map) plt.colorbar() plt.show()
import subprocess subprocess.call(['python', 'your_script.py'])
Books.objects.all().only('title', 'author', 'date').extra(where=['library IS NOT NULL']).distinct()
elem = browser.find_elements_by_xpath("//div[contains(@id,'d')]/span")
>>> 'Vui lòng giúp đỡ tôi' 'Vui l\xc3\xb2ng gi\xc3\xbap \xc4\x91\xe1\xbb\xa1 t\xc3\xb4i' >>> 'Vui lòng giúp đỡ tôi'.decode('utf-8') u'Vui l\xf2ng gi\xfap \u0111\u1ee1 t\xf4i' >>> print 'Vui lòng giúp đỡ tôi'.decode('utf-8') Vui lòng giúp đỡ tôi
>>> 5 5 >>> 42 42 >>> 'hello' 'hello' >>> (lambda : 'hello')() 'hello' >>> def f(): ... print 'this is printed' ... return 'this is returned, and printed by the interpreter' ... >>> f() this is printed 'this is returned, and printed by the interpreter' >>> None >>>
// assumes input packet is [const char* data] unsigned char reg; char ext[6]; char user[51]; reg = data[0]; memcpy(ext, data + 1, 5); ext[5] = 0; // set null terminator memcpy(user, data + 6, 50); user[50] = 0; // set null terminator
while game==True: #your game code goes here charArray,collideArray = [],[]
class MakeItView(CreateView): model = myModel template_name = 'whatever.html' def get_context_data(self, **kwargs): context = super(MakeItView, self).get_context_data(**kwargs) if int(self.kwargs['user_id']) != self.request.user.id: raise PermissionDenied return context
CREATE TABLE FOO ( BAR TEXT DEFAULT "N/A" )
>>> import ntplib >>> c = ntplib.NTPClient() >>> response = c.request('europe.pool.ntp.org', version=3) >>> response.offset -0.143156766891
>>> import re >>> s1 = "thishasadigit4here" >>> m = re.search("\d", s1) >>> if m: ... print "Digit found at position %d" % m.start() ... else: ... print "No digit in that string" ... Digit found at position 13 >>>
testbutton.setStyleSheet('QPushButton {color: blue}')
<h1> Welcome </h1> <form method="POST" action="{% url 'register' %}"> {% csrf_token %} {{ user_form.as_p }} {{ user_profile_form.as_p }} <input type="submit" value="Register"/> </form>
import socket s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) s.connect(('8.8.8.8', 0)) s.setblocking(False) local_ip_address = s.getsockname()[0] print(local_ip_address) # prints 10.0.2.40
import os header='Name,Age' filename='sample.csv' filesize=0 if(os.path.exists(filename) and os.path.isfile(filename)): filesize=os.stat(filename).st_size f=open(filename,'a') if(filesize == 0): f.write('%s\n' % header) f.write('%s\n' % 'name1,25') f.close()
result = {k: d2.get(v) for k, v in d1.items()}
$ dname=mydirectory $ echo ${dname:4} rectory
>>> myList = ['foobar', 'footest', 'not', 'test', 'foothing'] >>> '<{}>'.format(', '.join(i for i in myList if i.startswith('foo'))) '<foobar, footest, foothing>'
EmployeeDetails.objects.filter(...).delete()
def TransButton(self): self.win1 = AddWindow() (another class) self.win1.show()
import StringIO pa.read_csv(StringIO.StringIO(lines.join('\n')))
with open('data.json', 'w') as outfile: outfile.write(out)
allranges = (range(1, lim+1) for lim in inputs) for prod in itertools.product(*allranges): print(prod)
if any(s.lower() == "ds" for s in x): print "Yes"
your_canvas_widget.create_line(x, y, x + 1, y)
import time def app(environ, start_response): start_response('200 OK', [('Content-Type', 'text/plain')]) def content(): yield ''.join(('First bit of content', '.' * 18000, '\n')) time.sleep(5) yield 'Second bit of content' return content() import waitress waitress.serve(app, host='0.0.0.0', port=8080)
tw0dList[0][0] = 'A'
# -*- coding: utf-8 -*- import win32clipboard def set_text(txt): win32clipboard.OpenClipboard() win32clipboard.EmptyClipboard() win32clipboard.SetClipboardText(txt, win32clipboard.CF_UNICODETEXT) win32clipboard.CloseClipboard() set_text(u"喵萌茶会字幕组][10月新番.exe")
if __name__ == "__main__": from optparse import OptionParser parser = OptionParser() parser.add_option("-g","--gui_mode", dest="guimode", help="start program in gui mode", action="store_true") (options,args) = parser.parse_args() if (options.guimode): print "start wx app" else: print "start cmd line app"
>>> import ast >>> mylist = ast.literal_eval("['foo', ['cat', ['ant', 'bee'], 'dog'], 'bar', 'baz']") >>> mylist ['foo', ['cat', ['ant', 'bee'], 'dog'], 'bar', 'baz']
df = pd.read_csv(fn, parse_dates=[[0, 1]], index_col=0) df.between_time("09:04:00", "09:25:00")
from django.conf import settings from myapp import myapp_defaults settings.configure(default_settings=myapp_defaults, DEBUG=True)
def repeated(f, count): callable = f for _ in range(count - 1): callable = compose(f, callable) return callable
import numpy as np from scipy.signal import argrelextrema a = np.array([1,2,3,4,5,4,3,2,1,2,3,2,1,2,3,4,5,6,5,4,3,2,1]) # determine the indices of the local maxima maxInd = argrelextrema(a, np.greater) # get the actual values using these indices r = a[maxInd] # array([5, 3, 6])
word[:2] # The first two characters word[2:] # Everything except the first two characters
main_dict = {} for item in json_data: values1_list = item['sub_values1'] values2_str = item['sub_values2'] vals = main_dict.setdefault('main_key', {'sub_key1': values1_list, 'sub_key2': values2_str}) vals['sub_key1'].append(values1_list)
perl -ane "print qq(@F[0..2]\n)" file.txt
$echo <password> | sudo -S <command>
for a in [1, 2, 3]: print(a)
def inputnumber(): numbers = input('Enter number(s): ').split(',') return [int(i) for i in numbers] x = inputnumber() y = set(x) print(y)
select min(clm0), clm1, clm2, group_concat(clm3) from yourtable group by clm1, clm2
import matplotlib.pyplot as plt x = [1, 4, 7] ylow = [0, 3, -2] yhigh = [1, 4, 2] width = [8, 15, 6] plt.vlines(x, ylow, yhigh, linewidth=width, antialiased=False) plt.axis([0, 8, -4, 5]) plt.show()
A = your_input for i in A.split('MS1'): i.count('MS2')
data = infile.read() infile.seek(0) lines = infile.readlines() numLines = len(lines) x = numLines * 50 y = numLines * 50
"r" - open text file for reading, starting from the beginning. "r+" - open text file for reading and writing, starting from the beginning. "a+" - create file if not exists; then open as a text file for reading and writing, starting from the end of file, plus you can only write to the end of the file.
payload = { 'username': 'your username', 'password': 'your password' } p = requests.post(myurl, data=payload)
import requests s = requests.Session() s.post(website_url, data = params)
with tf.variable_scope('h1') as h1_scope: # we save the scope object in h1_scope w = tf.get_variable('Weights', []) with tf.variable_scope('foo'): with tf.variable_scope(h1_scope, reuse=True): # get h1_scope back w2 = tf.get_variable('Weights') assert w == w2
import sys if len(sys.argv) > 1 and sys.argv[1] == 'script': setup(name='tvnamer', ...) else: setup(name='tvdb_api', ...)
from itertools import groupby from operator import itemgetter from collections import deque with open('/home/jon/testdata.txt') as fin: lines = (line.split() for line in fin) for k, g in groupby(lines, itemgetter(0)): fst = next(g) lst = next(iter(deque(g, 1)), fst) with open(k + '.txt', 'w') as fout: fout.write(fst[1] + ' ' + lst[2])
$ curl -i -u guest:guest http://localhost:15672/api/whoami
In [7]: str(decimal.Decimal('0.1')) Out[7]: '0.1' In [13]: "{0:0.6f}".format(decimal.Decimal('0.1')) Out[13]: '0.100000'
rowList = [column for column in [row for row in yourListStore]]
temp_pos = player.pos + (-1, -1) #move downleft one block if player.pos != enemy.pos: #if the position is not occupied player.pos = temp_pos # move the player there. else: #move player to another location and try again
win32api.LoadKeyboardLayout('00000409',1) # to switch to english win32api.LoadKeyboardLayout('00000401',1) # to switch to arabic
>>> df jim joe jolie 0 4 NaN 4 1 8 0 NaN >>> df.groupby('jim').count() joe jolie jim 4 0 1 8 1 0
def magic(func): def wrapper(*args): return func(' - '.join(map(str, args))) return wrapper
class Wrapper(object): def __init__(self): self.ws = [Wrapped(1),Wrapped(2),Wrapped(3)] def __getattr__(self, n): meth = getattr(Wrapped, n) def caller(): results = [meth(w) for w in self.ws] sum_ = sum(results,0.0) average = sum_/len(self.ws) return average return caller
lucky_number = 5 tries = 6 while tries: inp = raw_input("User input: ") if inp.isdigit() and int(inp) == lucky_number: return True elif inp.lower() == 'quit': break tries -= 1 return False
PORT=3000 MONGO_URL=mongodb://localhost:27017/myapp node bundle/main.js
def alpha_word(): word = list(input('Enter a word: ')) return word == sorted(word)
your_new_string = re.sub(r'\[subscript=(.+?)\]', r'<sub>\1</sub>', your_old_string)
print re.sub(r"(<table)",r"\1 border=1",test_Str)
from sqlalchemy import * metadata = MetaData() engine = create_engine('mysql+mysqldb://scott:tiger@localhost/foo') person_table = Table('person', metadata, autoload=True, autoload_with_engine=engine) q = person_table.insert().values(name='John', age=20) connection = engine.connect() connection.execute(q)
from subprocess import Popen, PIPE dd_process = Popen(['dd', 'if=/dev/sda'], stdout=PIPE) ssh_process = Popen(['ssh', 'root@example.com', 'dd','of=/dev/sda'],stdin=dd_process.stdout, stdout=PIPE) dd_process.stdout.close() # enable write error in dd if ssh dies out, err = ssh_process.communicate()
sns.heatmap(table2,annot=True,cmap='Blues', fmt='g')
from itertools import chain for paragraph in chain(doc.paragraphs, (paragraph for table in doc.tables for row in table.rows for cell in row.cells for paragraph in cell.paragraphs)): paragraph.replace("oldtext1","Something") paragraph.replace("oldtext2","Somethingelse")
import locale lang, encoding = locale.getdefaultlocale() mystring = u"blabla" print mystring.encode(encoding)
>>> t = SortedSet([(1, 3), (2, 4), (-2, 9)], updator = OverlappingIntervalsUpdator) >>> >>> print(t.overlap_point(-5)) [] >>> print(t.overlap_point(5)) [(-2, 9)] >>> print(t.overlap_point(3.5)) [(-2, 9), (2, 4)] >>> >>> print(t.overlap((-10, 10))) [(-2, 9), (1, 3), (2, 4)]
cache = {} biggest = 1 def fib(n): global biggest # <----- ....
from IPython.core.debugger import Pdb ipdb = Pdb() ipdb.runcall(my_imported_function, args...)
nums = [1, 2, 3] interp = [num + (dec / 10.) for num in nums for dec in range(10) if num + (dec / 10.) <= max(nums)]
import textwrap wrapper = textwrap.TextWrapper(width=20) for line in wrapper.wrap(text): print line, len(line)
with open(fname, "r") as fo: content_as_string = fo.read() match = re.search('Num_row_labels=(\d+)', content_as_string) # do want you want to the matchings
#! /usr/bin/env python import matplotlib.pyplot as plt x = [20, 21, 22, 23, 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18] y = [ 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1] x2,y2 = zip(*sorted(zip(x,y),key=lambda x: x[0])) plt.plot(x2,y2) plt.show()
{k: v for k, v in my_dict.items() if v['baz'] == 'abc'}
unichr(40960)
l = list(str) l[i] = 'e' str = ''.join(l)
# Textview with inverted colors import gtk tv = gtk.TextView() tv.modify_base(gtk.STATE_NORMAL, gtk.gdk.color_parse('black')) tv.modify_text(gtk.STATE_NORMAL, gtk.gdk.color_parse('white'))
for root, dirs, files in os.walk(path, '*.txt'): out = open(os.path.join(root, '..', '..'), 'a') out.write(...)
results = Path.objects.all() for s in search.split(): results = results.filter(path__icontains = s)
import threading import time def printit(): threading.Timer(n, printit).start() print "Hello, World!" threading.Timer(x, printit)
with open('info.txt', 'r') as f: data = [line.split(',') for line in f] print(sorted(data, key=lambda x: int(x[2])))
>>> buffer('foobar') <read-only buffer for 0x7fcdd7caa120, size -1, offset 0 at 0x7fcdd7ca82f0> >>> buffer('foobar')[3:5] 'ba' >>> for c in buffer('foobar'): ... print c ... f o o b a r
class CompanyAdmin(admin.ModelAdmin): def render_change_form(self, request, context, *args, **kwargs): context['adminform'].form.fields['theme'].queryset = Theme.objects.filter(name__iexact='company') return super(CompanyAdmin, self).render_change_form(request, context, args, kwargs)
df['ffil_col'] = df.groupby('LABEL').ffil_col.transform(lambda group: group.ffill()) >>> df LABEL Col1 ffil_col 0 1 N female 1 1 M female 2 2 A NaN 3 2 N male 4 2 M male
globals()['yourvariables'] = variable
import scipy X = scipy.rand(3,3) Y = scipy.rand(3,3) print X+Y print scipy.delete(X, 1, 0) print scipy.delete(X, 1, 1) X[1,:] = [1,2,3] print X
3>> [int(x, 16) for x in b'002151BF,FFFF9F86'.split(b',')] [2183615, 4294942598] 3>> [(int(x, 16) + 0x80000000) % 0x100000000 - 0x80000000 for x in b'002151BF,FFFF9F86'.split(b',')] [2183615, -24698]
In [47]: strs="4.500000+1 1.894719-3 4.600000+1 8.196721-3 4.700000+1 2.869539-3" In [48]: [float(x.replace("+","e+").replace("-","e-")) for x in strs.split()] Out[48]: [45.0, 0.001894719, 46.0, 0.008196721, 47.0, 0.002869539]
from datetime import datetime, timedelta now = datetime.utcnow() rounded = now - timedelta(minutes=now.minute % 5 + 5, seconds=now.second, microseconds=now.microsecond) print rounded # -> 2014-04-12 00:05:00
import pythoncom, pyHook def OnKeyboardEvent(event): print 'Ascii:', event.Ascii, chr(event.Ascii) print 'Key:', event.Key print 'KeyID:', event.KeyID print 'ScanCode:', event.ScanCode print 'Extended:', event.Extended return True #for pass through key events, False to eat Keys hm = pyHook.HookManager() hm.KeyDown = OnKeyboardEvent hm.HookKeyboard() pythoncom.PumpMessages()
import theano a=theano.tensor.matrix() idxs=(a<0).nonzero() new_a=theano.tensor.set_subtensor(a[idxs], 0)
'(\w+)\s*=\s*' re.findall('(\w+)\s*=\s*', 'I think Python=amazing') \\ return 'Python' re.findall('(\w+)\s*=\s*', 'I think Python = amazing') \\ return 'Python' re.findall('(\w+)\s*=\s*', 'I think Python =amazing') \\ return 'Python'
from numpy import float128 from sympy.abc import x from sympy.utilities import lambdify f = lambdify(x, x ** 2) result = f(float128(2)) result #>>> 4.0 type(result) #>>> <class 'numpy.float128'>
import seaborn as sns sns.set_style("whitegrid") sns.factorplot("month", "rainfall", row="temp", data=rain_record, size=2, aspect=5, kind="box", palette="PuBuGn_d") sns.despine(left=True)
# get matplotlib wget https://downloads.sourceforge.net/project/matplotlib/matplotlib/matplotlib-1.4.3/matplotlib-1.4.3.tar.gz #uncompress tar xvzf matplotlib-1.4.3.tar.gz # open build install # read INSTALL file for more instructions cd matplotlib-1.4.3 python setup.py build # actually installing needed superuser privileges sudo python setup.py install
T.switch(T.eq(self.squared_euclidean_distances, 0), 0, c / self.squared_euclidean_distances)
>>> date_div = "Blah blah blah, Updated: Aug. 23, 2012" >>> date_div.split('Updated: ') ['Blah blah blah, ', 'Aug. 23, 2012'] >>> date_div.split('Updated: ')[-1] 'Aug. 23, 2012'
import re, itertools car = ['skoda', 'audi', 'benz'] text = """ I have a car="mycar" My friend has a vehicle="myvehicle" My uncle have a car="mycar" Second verse same as the first I have a car="mycar" My friend has a vehicle="myvehicle" My uncle have a car="mycar" """ it = itertools.cycle(car) newtext = re.sub(r'mycar|myvehicle', lambda _: next(it), text)
In [38]: l = ((1L,),(2L,),(3L,)) In [39]: [x[0] for x in l] Out[39]: [1L, 2L, 3L]
with open('file.csv') as csvfile: reader = csv.DictReader(csvfile) for row in reader: time.append(row['Time']) energy.append(row['Energy']) ondeIG.append(row['OndeIG']) envelope.append(row['envelope'])
if request.method == 'POST': images = request.POST.getlist('images[]') other_field = request.POST.get('other_field') for i in range(len(images)): data = MyModel() data.images = images[i] data.other_field = other_field data.save()
im = Image.new('L', size) im.putdata([x1, x2, x3, ...])
g = lambda x: pd.Series(f_polyfit(x.y1, x.y2, x.y3, x.y5, x.y5, degree=1)) df[['slope', 'R2']] = df.apply(g, axis=1)
>>> np.array(0, ndmin=1) array([0]) >>> np.atleast_1d(np.array(0)) array([0])
df = pd.read_csv("short.csv") print df date 0 1368431150 1 1368431149 2 2015-05-18 print pd.to_numeric(df.date, errors='coerce').notnull() 0 True 1 True 2 False Name: date, dtype: bool
import subprocess p = subprocess.Popen("some_long_command",stdout=subprocess.PIPE) for line in iter(p.stdout.readline, ""): print line
>>> import datetime >>> strdate = '14:45:35:233 08.05.2016' >>> dt = datetime.datetime.strptime(strdate, '%H:%M:%S:233 %d.%m.%Y') >>> dt.strftime('%Y-%m-%d') '2016-05-08'
open('help-new.png', 'wb') as outfile: ^ | that's it, right there
In [31]: d = {'a':[1,2,3,4,5,6], 'b':[1,2,3,4,5,6]} In [32]: df = pd.DataFrame(d) In [33]: bad_df = df.index.isin([3,5]) In [34]: df[~bad_df] Out[34]: a b 0 1 1 1 2 2 2 3 3 4 5 5 In [35]:
def pause(time_to_wait): clock = pygame.time.Clock() total = 0 while True: total += clock.tick() if(total > time_to_wait): return for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() sys.exit()
reddit = praw.Reddit("Amos") submission = reddit.get_submission(submission_id="XYZ") print submission.permalink >>> www.reddit.com/r/subreddit/comments/XYZ
import cPickle as p # Sender data_str = p.dumps(array) sock.sendto(data_str, addr) # Receiver data,addr = sock.recvfrom(buf) data_origin = p.loads(data)
from pyramid.events import NewRequest from pyramid.events import subscriber @subscriber(NewRequest) def new_request_subscriber(event): validate_request(event.request)
f = zipfile.ZipFile('path/to/file') for attempt in attempts: try: f.extractall(pwd=attempt) except RuntimeError: continue else: return attempt
#Headers as rows for now df = pd.read_excel(xls_file,0, header=None, index_col=0) #fill in Null values in "Headers" df = df.fillna(method='ffill', axis=1) #create multiindex column names df.columns=pd.MultiIndex.from_arrays(df[:3].values, names=['top','mid','low']) #Just name of index df.index.name='Date' #remove 3 rows which are already used as column names df = df[pd.notnull(df.index)]
import re m = re.search('upc content=([0-9]*)', string) if m: upc = m.group(1) print upc
convolve (seconds, microseconds) 81 349969 scipy.signal.convolve (seconds, microseconds) 1 962599 convolve in C (seconds, microseconds) 0 87024
>>> import re >>> re.match('\w+', 'bob!') <_sre.SRE_Match object; span=(0, 3), match='bob'> >>> re.match('\w+', "there's") <_sre.SRE_Match object; span=(0, 5), match='there'>
def main(): print 'doing stuff' foo() bar() def foo(): print 'inside foo' def bar(): print 'inside bar' if __name__ == '__main__': main()
import itertools r = list(itertools.filterfalse(lambda x: x in data1, data2)) + list(itertools.filterfalse(lambda x: x in data2, data1)) assert r == [{'name': 'String 3'}]
menu = driver.find_element_by_css_selector("") hidden_submenu = driver.find_element_by_css_selector("") ActionChains(driver).move_to_element(menu).click(hidden_submenu).perform()
qsts_pks = QueryStringTag.objects.filter(tag__pk__in=['12', '14', '15']).values_list('id', flat=True) queries = QueryString.objects.filter(qsquerystring__pk__in=qsts_pks)
sqla_metadata = sqlalchemy.schema.MetaData() type_mapping = {'int': Integer, 'text': String} # etc. cols = [] for (col_name, col_type) in your_parsed_metadata.fields: cols.append(Column(col_name, type_mapping[col_type])) cols.append(Column('datafile_id', Integer, ForeignKey("datafile.datafile_id"), nullable=False),) new_table = Table(your_parsed_metadata.tablename, sqla_metadata, *cols) sqla_metadata.create_all(engine)
query = """ SELECT * FROM distributor_distributor d INNER JOIN user_user_profile up ON up.id = %(user_id)s INNER JOIN user_user_distributors_of_user udu ON udu.user_profile_id = %(user_id)s AND udu.distributor_id = d.id WHERE d.name || d.surname = %(query)s; """ dist_list = Distributor.objects.raw(query, {'user_id': request.user.pk, 'query': 'hello world'})
Open the file `Untitled9.ipynb` for reading. //f For each line in the file: // checkline Store the line.// youre adding the line to glb.l, which you will later iterate on to count the words in the file. Add one to the line count. For each space, add one to the word count. // counting the results of the split() on glb.l Print the line and the word count.
def display_player_image(canvas, player): canvas.create_rectangle(50, 50, 250, 100) tkImage = ImageTk.PhotoImage(Image.open(player.playerImg)) canvas.create_image(100, 100, image = tkImage, anchor = NE) player.playerImg = tkImage #Reference
RewriteCond %(REQUEST_URI) ^media RewriteCond %{REQUEST_FILENAME} !-f RewriteRule #Some rewrite rule to redirect from '/media/filename' to '/image_generator/filename'
import win32api win32api.PostMessage(handler, win32con.WM_KEYDOWN, win32con.VK_RETURN, 0)
objective = (price[channel_id] * is_channel_assigned[channel_id])
In [1]: from IPython.display import HTML In [2]: df = pd.DataFrame(range(5), columns=['a']) In [3]: df['a'] = df['a'].apply(lambda x: '<a href="http://example.com/{0}">link</a>'.format(x)) In [4]: HTML(df.to_html(escape=False))
print '\n'.join('\t'.join(x) for x in L)
def fn (**kw): arg = kw.get("foo") or kw.get("bar") or kw.get("baz") if arg==None: raise TypeError, "foo nor bar nor baz given az argument" print arg Here the order of precedence is: "if foo exists, arg is foo. if it doesn't but bar exists, arg is bar, if neither foo nor bar exists, the arg is baz. If baz doesn't, i.e. all 3 are missing, arg is None. Of course, you may check whether either one exists and force the mutual exclusion, but I don't see why would you need such a thing. You are clever and you will never pass them in together. Even if you do, some will be ignored.
^(?=.*?(?:flights|airfare))(?:(?!without|not includ(?:ing|ed)|doesn\'?t include|exclud(?:es|ing)).)*$
sns.factorplot(x='day', y='total_bill', hue='sex', data=tips, row='smoker', col='time', kind='violin')
from SimpleCV import Camera from SimpleCV import Image webcam_camera = Camera() webcam_image = webcam_camera.getImage() webcam_image.save("frame.jpg")
dict2 = {k: x[:i] + x[i+1:] for x in dict1.values() for i, k in enumerate(x)}
import os, shutil #Get the list of all folders present within the particular directory folder_list = os.walk('.').next()[1] #Start zipping the folders for each_folder in folder_list: shutil.make_archive(each_folder, 'zip', os.getcwd() + "\\" + each_folder)
x = s[1] - s[0] for i in range(2, len(s)): if s[i] - s[i-1] != x: break else: #do some work here...
329 pixels with value of R = 0, G = ?, B = ? and 145 pixels with value of R = 1, G = ?, B = ? and ... 460 pixels with value of R = ?, G = 1, B = ? and ... 3953 pixels with value of R = ?, G = ?, B = 256
b = models.CharField(max_length=7, default='0000000', editable=False)
# original queryset - where author is an FK queryset = MyModel.objects.values('id', 'author') # loop through the original queryset, and replace FK author_map = {a['id']: a for a in Author.objects.values('id', 'name')} for obj in queryset: obj['author'] = author_map[obj['author']]
>>> import base64 >>> print base64.b64encode("password") cGFzc3dvcmQ= >>> print base64.b64decode("cGFzc3dvcmQ=") password
ffffffff # big endian ffffffff # little endian
import pygame
def getCbFun(queue): # closure def cbFun(snmpEngine,stateReference, contextEngineId, contextName, varBinds, cbCtx): ... queue.add(varBinds) ... return cbFun ... # Shared queue object queue = Queue() # Register SNMP Application at the SNMP engine ntfrcv.NotificationReceiver(snmpEngine, getCbFun(queue)) ...
check = cells[1].get_text(strip=True)
def nohsps(input): count=0 for line in input: if line.startswith('AJ000012.1'): count=count+1 return count
from scipy.ndimage import median_filter filtered_array = median_filter(random_array, size=3)
import requests for i in range(101): payload = {'usn': i} response = requests.post("index.php", data=payload) # do something with response
def convertible(v): try: int(v) return True except (TypeError, ValueError): return False newlist = [i for i in mylist if convertible(i)]
ipython notebook --ip=localhost
select column_name from INFORMATION_SCHEMA.COLUMNS where table_schema='stackoverflow' and table_name='questions'
var ints = new[] { 1, 2, 3, 4, 5 }; var result = ints.Pairwise((first, second) => second - first); Console.WriteLine(result.Sum());
import csv with open(filename,"r") as fin: with open(outname,"w") as fout: writer=csv.writer(fout) for row in csv.reader(fin): writer.writerow(row[:-1])
im.save('/path/to/cover-2.jpg', format='JPEG', subsampling=0, quality=100)
for line in paragraphInput.splitlines(): print "This is " + line + " !"
$("#id_of_form").attr("action", "/builds/show/" + $("#id_postField").val())
>>> from getpass import getpass >>> getpass() Password: 'secret'
import json import requests url = 'http://groceries.asda.com/api/items/view?itemid=910000800509' r = requests.get(url) price = r.json()['items'][0]['price'] print price £13.00
>>> F = [] >>> F.extend(x) >>> F.extend(y) >>> F [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]
class Example(object): def __init__(self, table=None): self.__dict__['_fields'] = {} self.__dict__['_table'] = table ... def __setattr__(self, name, value): if name in self._fields: self._fields[name].value = value else: raise AttributeError
'OPTIONS': { 'read_default_file': '/path/to/my.cnf', },
from django.db.models import * # NOQA isort:skip from django.contrib.gis.db.models.aggregates import * # NOQA from django.contrib.gis.db.models.fields import ( # NOQA GeometryCollectionField, GeometryField, LineStringField, MultiLineStringField, MultiPointField, MultiPolygonField, PointField, PolygonField, RasterField, ) from django.contrib.gis.db.models.manager import GeoManager # NOQA
for i, n in enumerate(C): A[i] += n/2 B[i] += n/2 >>> A [11, 22, 33, 44, 55, 70] >>> B [23, 46, 69, 92, 17, 20]
>>> np.isclose(arr_f, a, atol=0.01).any() True
lst1 = ['a', 'b', 'c', 'd', 'e'] lst2 = ['q', 'r', 's'] mapping = [4, 0, 3] for lst2_n, lst1_n in enumerate(mapping): lst1[lst1_n] = lst2[lst2_n]
from datetime import datetime import pandas as pd import matplotlib.pyplot as plt import matplotlib.dates as dt df = pd.read_csv('data.csv') df.amin = pd.to_datetime(df.amin).astype(datetime) df.amax = pd.to_datetime(df.amax).astype(datetime) fig = plt.figure() ax = fig.add_subplot(111) ax = ax.xaxis_date() ax = plt.hlines(df.index, dt.date2num(df.amin), dt.date2num(df.amax))
>>> labels, uniques = df.A.factorize() >>> df.A = labels >>> df A B 0 0 4 1 1 4 2 0 4 3 2 4
import pandas as pd import numpy as np # some sample data ts = pd.Series(np.random.randn(1000), index=pd.date_range('1/1/2000', periods=1000)).cumsum() #plot the time series ts.plot(style='k--') # calculate a 60 day rolling mean and plot pd.rolling_mean(ts, 60).plot(style='k') # add the 20 day rolling variance: pd.rolling_std(ts, 20).plot(style='b')
foo = foo.replace(' ', '')[:-3].upper()
%matplotlib inline import pandas as pd StatePremiumAverages = pd.DataFrame({ 'index': [0, 1, 2, 3, 4], 'StateCode': ['AK', 'AK', 'AK', 'AK', 'AK'], 'PremiumAdultIndividualAge30' : [633, 755, 916, 803, 785], 'YearlyAverage' : [7596, 9060, 10992, 9636, 9420] }) StatePremiumAverages.plot(kind="barh",x=StatePremiumAverages["StateCode"], title="Average Yearly Health Premiums for Individuals, Age 30", legend=False)
# returns a df grouped by ArtistID and Tag tag_counts = artists_tags.groupby(['ArtistID', 'Tag']) # sum up tag counts and sort in descending order tag_counts = tag_counts.sum().sort('Count', ascending=False).reset_index() # keep only the top ranking tag per artist top_tags = tag_counts.groupby('ArtistID').first() # top_tags is now a dataframe which contains the top tag for every artist # We can simply lookup the top tag for Nirvana via it's index: top_tags.ix['5b11f4ce-a62d-471e-81fc-a69a8278c7da'][0] # 'Grunge'
from string import Formatter s="""<Text>Question ${PrimaryKey}:</Text> <Text>Cheat: ${orientation}</Text>""" print([ele[1] for ele in Formatter().parse(s) if ele[1]]) ['PrimaryKey', 'orientation']
@cache_page(60 * 15) def severity_wise(request): sev_chart=[["Severity","No. of Bugs"]] ......
import cv2 img = cv2.imread("lenna.png") crop_img = img[200:400, 100:300] # Crop from x, y, w, h -> 100, 200, 300, 400 # NOTE: its img[y: y + h, x: x + w] and *not* img[x: x + w, y: y + h] cv2.imshow("cropped", crop_img) cv2.waitKey(0)
webobj.find_elements_by_tag_name('a')[0].click()
import requests from bs4 import BeautifulSoup url = 'http://www.example.com' page_request = requests.get(url) page_source = page_request.text soup = BeautifulSoup(page_source)
>>> import re >>> s = "`...```.....``...`....`````...`" >>> re.sub(r'((?<!`)(``)*`(?!`))', r'\1\1', s) '``...``````.....``...``....``````````...``'
mongo = pymongo.MongoClient() mongo.DBNAME.command('convertToCapped', 'COLLNAME', size=SIZE)
import matplotlib.pyplot as plt from matplotlib.collections import LineCollection import pylab as p fig = plt.figure() pts1 = [] pts2 = [] for i in range(100): pts1.append([i,i]) pts2.append([-i-3,-i]) lines = LineCollection([pts1,pts2], linestyles='solid') subplt = fig.add_subplot(111,aspect='equal') subplt.add_collection(lines) subplt.autoscale_view(True,True,True) p.show()
parser = argparse.ArgumentParser() parser.add_argument('filename') args = parser.parse_args() with open(args.filename) as file: # do stuff here
>>> 'abc'.isalpha() True >>> '123'.isalpha() False >>> 'ab1c'.isalpha() False >>> '123'.isalnum() True >>>
from copy import deepcopy #snip templateclass = deepcopy(ListofClass[position])
res = User.query.filter(User.email.in_(('x1@dom1.com', 'x2@dom2.com')))
a = [random.randrange(-10, 11) / 10 for _ in range(100)]
self.GraphWidget.axes.hold(True) self.GraphWidget.axes.plot(self.x1,self.y1,label='plot1') self.GraphWidget.axes.plot(self.x2,self.y2,label='plot2')
videoDirectory = os.listdir("videos") f = open("videos.html", "w") f.write('<html><head></head><body><ul>' f.writelines(['<li><a href="videos/%s">%s</a></li>' % (f, f) for f in videoDirectory]) f.write('</ul></body></html>')
setup( ... dependency_links=[ 'git+https://example.com/spamneggs/foobar.git#egg=foobar-1.2.3' ] install_requires=[ 'foobar', ] )
Similarity1 = (1.0 + len(intersection1))/(1.0 + max(len(set_sentence1), len(set_sentence3))) Similarity2 = (1.0 + len(intersection2))/(1.0 + max(len(set_sentence2), len(set_sentence3)))
class MeasureBase(object):¬ STANDARD_UNIT = None¬ ALIAS = {}¬ UNITS = {}¬ LALIAS = {}¬
class LoginManager(object): def process_view(self, request, view_func, view_args, view_kwargs): user = users.get_current_user() if user is not None: marker = Session.get(user.user_id()) if marker is None: login_action() Session.set(user.user_id(), "true")
import wx class MyApp(wx.App): def __init__(self): #<-- runs when we create MyApp #stuff here self.nameField = wx.TextCtrl(frame) #<--scope is for all of MyApp #stuff def clickedAction(self, e): #stuff app = MyApp() app.MainLoop()
r = requests.put(url, data=json.dumps(payload), headers=headers)
public char change(char x) { final String dictionary = "abtr"; final String transform = "bart"; int loc= dictionary.indexOf(x); if (loc < 0) { return 'z'; } else { return transform.charAt(loc); } }
>>> a= 'href=\"http:\/\/' >>> a 'href="http:\\/\\/' # the str() method is called >>> repr(a) '\'href="http:\\\\/\\\\/\'' # repr() is meant to be how the object can be "read" back, or provide detailed information >>> str(a) 'href="http:\\/\\/' # see first example >>> print a href="http:\/\/ # any conversion etc... is not performed, ie, you get your original string printed
class PoolTable(tables.Table): class Meta: model = Simple attrs = {'class': 'paleblue','width':'200%'}
with open(ima) as file: file_list = f.readlines() # You will have a list with size/28=the number of digits # Divide file_list by size 28
>>> from glob import glob >>> glob('/home/*.txt') ['/home/c.txt', '/home/d.txt', '/home/b.txt'] >>> [glob(i) for i in ['/home/*.txt', '/home/*.jpeg']] [['/home/c.txt', '/home/d.txt', '/home/b.txt'], ['/home/e.jpeg']] >>>
def traverse(tree_of_lists): for item in tree_of_lists: if isinstance(item, list): for x in traverse(item): yield x else: yield item
d1 = {'a': 1, 'b': 2} d2 = {'a': 1} l = [d1, d2, d1, d2, d1, d2] for d in l: d.pop('b',None) print l
from lxml import html tree = html.fromstring('<html>Your HTML code</html>') rows = tree.xpath('//table/tr') #update your table XPath here records = [] for row in rows: cells = [c for c in row.xpath('./td/text()') if c.strip()] # do something with cells content
list_a = [[1.2, 0.5, 3.1,...], [7.3, 1.5, 3.9,...], [100, 200, 150, ...]] import numpy as np x = np.asarray(list_a[0]) y = np.asarray(list_a[1]) m = np.asarray(list_a[2]) mrk = {100:'o',150:'s',200:'^'} for key,value in mrk.items(): s1 = (m==key) plt.scatter(x[s1],y[s1],marker=value)
jobLocation = jobLocationUnclean for c in "!@#%&*()[]{}/?<>,.": jobLocation = jobLocation.replace(c, "") params.append(jobLocation) print(jobLocation)
>>> s = 'abbb' >>> [i[::-1] for i in reversed(re.findall(r'(?=(b*a))', s[::-1]))]
connect.execute(tobeexec, params); connect.commit() connect.close()
<node id="mynicelycrafteduniqueid"> <data>...</data> <leftChild>childuniqueId</leftChild> <rightChild/> <!-- no right child --> </node>
def none(*args): """Converts any arguments to None.""" return None
irofile = iter(rofile) for line in irofile: print line if(line == 'foo'): line = next(irofile) #BEWARE, This could raise StopIteration! print line
import anydbm def p(initial): d = anydbm.open('cache', 'c') d.update(initial) return d d1 = p({}) # create a persistent dictionary d1['k1'] = 'v1' # add # add another, maybe 1 billion more, entries on to the dictionary for i in xrange(100000): d1['k{}'.format(i)] = 'v{}'.format(i) print d1.has_key('k9999999999') # entry that is not in memory, prints False d1.close() # You have to close it yourself
from django.utils import translation def myview(...): ... lang = translation.get_language() ...
>>> import ast >>> items = ['1', 'hello', '524', '65.23'] >>> def convert(x): try: return ast.literal_eval(x) except: return x >>> [convert(x) for x in items] [1, 'hello', 524, 65.23]
attrs_list = Entity.objects.filter(**filters).distinct().values_list('someattr', flat=True) a = Character.objects.filter(someotherattr__in=attrs_list)
from BeautifulSoup import BeautifulSoup from markdown import markdown html = markdown(some_html_string) text = ''.join(BeautifulSoup(html).findAll(text=True))
import csv with open('minitest.csv', 'rb') as f: reader = csv.reader(f, delimiter='|') for row in reader:
pd.set_option('display.max_colwidth', -1)
widgets = { 'content': forms.Textarea(), 'post': forms.HiddenInput(), }
[x for i in np.arange(3) for x in [f1(i), f2(i)]]
In [21]: df['C'] = (df['A'] - df['B'])/(np.timedelta64(1,'D')) df Out[21]: index A B C 0 one 2014-01-01 2014-02-28 -58 1 two 2014-02-03 2014-03-01 -26
a, b, c = s + [0,9,1][len(s):]
import numpy as np import pylab as pl x = np.linspace(-1, 1, 100) y = np.zeros((5, 100)) for i in range(5): y[i] = x**i ax = [] kw = {} for i in range(5): if i > 0: kw ={'sharex': ax[0], 'sharey': ax[0]} ax.append(pl.subplot(3, 2, i+1, **kw)) ax[i].plot(x, y[i])
>>> results = [] >>> for no in j["response"]["result"]["Potentials"]["row"]: ... data = no["FL"] ... if isinstance(data, list) and len(data) > 1: ... results.append(int(data[1]["content"])) ... >>> results [694275295, 729545274, 903187021, 729416761]
for i in range(n): statement 1 statement 2 statement 3 statement 4
for part in message.walk(): if part.get_content_type() == "text/plain": do_stuff_with_text_parts(part)
In [85]: import numpy as np In [86]: y = [1,2,3,4,5] In [87]: f = [1.9, 3.7, 5.8, 8.0, 9.6] In [88]: SSres = sum(map(lambda x: (x[0]-x[1])**2, zip(y, f))) In [89]: SStot = sum([(x-np.mean(y))**2 for x in y]) In [90]: SSres, SStot Out[90]: (48.699999999999996, 10.0) In [91]: 1-(SSres/SStot) Out[91]: -3.8699999999999992
import numpy as np import pandas as pd x = pd.DataFrame(np.random.randn(3,3), index=[1,2,3], columns=['A', 'B', 'C']) locations = [(1, "A"), (1, "B"), (1, "A"), (3, "C")] print x.get_value(1, "A") row_labels, col_labels = zip(*locations) print x.lookup(row_labels, col_labels)
(rdd1 union rdd2).reduceByKey(_ ++ _)
myString += getattr(eachObject, everyElement)
import gc gc.get_objects() # returns a list of objects tracked by CPython's garbage collector
import numpy numpy.version.version
def __iter__(self): for start in self.start_nodes: for end in self.end_nodes: for path in self.find_path(self._graph, start, end): yield path
bulkloader.py --dump --app_id=<app-id> --url=http://<appname>.appspot.com/remote_api --filename=<data-filename>
def p_things(p): ''' things : things thing things : thing ''' if len(p) == 2: p[0] = [p[1]] else: p[0] = p[1] p[0].append(p[2])
from selenium import webdriver url = "http://fiddle.jshell.net/ebkXh/show/" driver = webdriver.Firefox() driver.get(url) button = driver.find_element_by_xpath('//button[@type="submit"]') # dismiss button.click() driver.switch_to.alert.dismiss() # accept button.click() driver.switch_to.alert.accept()
str='sdfsdfsdfdsfsdfcxvvdfvxcvsdcsdcs sdcsdcasd' I=int.from_bytes(bytes([ord (i)for i in str]),byteorder='big') print(I) print(I.to_bytes(len(str),byteorder='big'))
from multiprocessing import Pool def f(x): return x*x if __name__ == '__main__': pool = Pool(processes=4) # start 4 worker processes inputs = range(10) result = pool.map(f, inputs) print result
Tag.objects.annotate(prod_num=Count('product')).order_by('prod_num')
m_cluster = wx.MenuItem(menu, -1, "&Cluster\tAlt-C", "Cluster Options.") m_cluster.SetTextColour(colour) menu.AppendItem(m_cluster)
#!/bin/bash while : do python myscript.py echo "crashed" >> log end
def job_expired(self): time=self.time date=self.purchased end=date+timedelta(days=time) #now is defined globally if now > end: self.expired = True self.pending = False self.save() ex = self.expired else: ex=self.expired=False return ex
list1 = [ key for key in mydict1.keys() if key in mydict2.itervalues() ]
for i in range(0,10,2):
tableView.setIndexWidget(index, QProgressBar())
def output(*items, end="\n", file=sys.stdout): pass
from django.db import connection tables = connection.introspection.table_names() seen_models = connection.introspection.installed_models(tables)
import re teststrs = ["my_id", "Id_number", "my_id_rocks", "my_idea"] replace_with_upper = "id" def toUpper(match): return match.group(1).upper() for test_me in teststrs: test_me = re.sub("(?<![a-z])({})(?![a-z])".format(replace_with_upper), toUpper, test_me, flags=re.IGNORECASE) print(test_me)
if (x, y) in my_dict: # whatever
import csv csv_file = csv.reader(open("your_file_name.csv")) dist = 0 for row in csv_file: _dist = row[2] try: _dist = float(_dist) except ValueError: _dist = 0 dist += _dist
import xlrd import csv def xls_to_csv(): x = xlrd.open_workbook('data.xls') x1 = x.sheet_by_name('Sheet1') csvfile = open('data.csv', 'wb') writecsv = csv.writer(csvfile, quoting=csv.QUOTE_ALL) for rownum in xrange(sh.nrows): writecsv.writerow(x1.row_values(rownum)) csvfile.close()
import string def Coder(shift): alpha = string.ascii_lowercase ALPHA = string.ascii_uppercase if 0 <= shift < 26: unshifted_letters = ALPHA + alpha shifted_letters = ALPHA[shift:] + ALPHA[:shift] + alpha[shift:] + alpha[:shift] return dict(zip(unshifted_letters, shifted_letters))
if any(i.lower().startswith('cache-control:') for i in self.headers): #...
# add to your class def showCallback(self,record): """ returns a callback for self.show """ def callback(): # make a new function return self.show(record) # that shows the given record return callback # return this function for thisrecord in inFile: buttons.append(Button(self.frame,text='Name: %s' %i[5:10], command=self.showCallback(thisrecord))
from operator import attrgetter m1 = Model(name='Lamborghini Miura', price=910) m2 = Model(name='Ferrari 458 Italia', price=580) lst = [m1, m2] lst.sort(key=attrgetter('name', 'price'))
df = pd.read_csv(filename, dtype={'emotion':np.int32, 'pixels':str, 'Usage':str}) def makeArray(text): return np.fromstring(text,sep=' ') df['pixels'] = df['pixels'].apply(makeArray)
def __str__(self): return __name__ + "." + self.__class__.__name__ + "." + self._testMethodName
import seaborn as sns iris = sns.load_dataset("iris") g = sns.pairplot(iris) g.set(xticklabels=[])
if [[ -z "$VIRTUAL_ENV" ]]; then echo "No VIRTUAL_ENV set" else echo "VIRTUAL_ENV is set" fi
def start_requests(self, filename, columnname): with open(filename) as file: headers = file.readline().strip().split(',') for line in file.readlines(): zipcode = line.strip().split(',')[headers.index(columnname)] yield self.make_requests_from_url("http://www.example.com/zipcode/%05d/search.php" % zipcode)
import sched, time s = sched.scheduler(time.time, time.sleep) def do_something(sc): print "Doing stuff..." # do your stuff sc.enter(60, 1, do_something, (sc,)) s.enter(60, 1, do_something, (s,)) s.run()
df[np.in1d(df.index.month, [1, 2, 3, 10, 11, 12])]
from yourmodule.yourapp import celery celery.send_task("yourtasksmodule.yourtask", args=["Hello World"])
Options -> Configure IDLE -> Keys
import xml.etree.ElementTree as ET data = """<article> <MainText> <Big> HDhsdjdsd </Big> <Small> jdhdhksdj </Small> <Big><text> jsdhjsadh </text> <footnote> 1 </footnote> <text> hsdhsdh </text> </Big> </MainText> </article>""" tree = ET.fromstring(data) print tree.find('.//MainText//footnote').text.strip()
In [21]: np.repeat(np.array([1,5,2]), np.array([2,3,4])) Out[21]: array([1, 1, 5, 5, 5, 2, 2, 2, 2])
A = np.zeros((10,20)) y, x = np.ogrid[:A.shape[0], :A.shape[1]] mask = x > y A[mask] = 1
class Test: @staticmethod def call(method): getattr(Test, method)() @staticmethod def method1(): print('method1') @staticmethod def method2(): print('method2') Test.call("method1")
import numpy as np import matplotlib.pyplot as plt def sinespace(m=90, n=10): x = np.linspace(0, m, n) s = np.sin(np.deg2rad(x)) return (s/s[-1])*m s = sinespace() print(s) plt.plot(s, np.ones_like(s), 'ro') plt.show()
im = numpy.reshape(c, (32,32,3), order='F')
for rel in response.xpath('//div[@class="beschreibung"]'): item['title'] = rel.xpath(".//strong[contains(text(),"Release")]/following-sibling::*[1]/@value").extract() item['link'] = rel.xpath('.//span[@style="display:inline;"]//a[contains(text(),"Share")]/@href').extract() yield item
from urllib2 import urlopen f = urlopen('http://localhost:8000') for line in f: print line
>>> import collections.abc >>> import inspect >>> [v for k, v in vars(collections.abc).items() if inspect.isclass(v) and issubclass(list, v) ] [<class 'collections.abc.Container'>, <class 'collections.abc.Sequence'>, <class 'collections.abc.MutableSequence'>, <class 'collections.abc.Iterable'>, <class 'collections.abc.Sized'> ]
import os filename = os.path.basename(__file__) for f in os.listdir('/home/you/scripts'): if f != filename: print(f)
>>> a = etree.Element("a") >>> b = etree.SubElement(a, "b") >>> c = etree.SubElement(a, "c") >>> d1 = etree.SubElement(c, "d") >>> d2 = etree.SubElement(c, "d") >>> tree = etree.ElementTree(c) >>> print(tree.getpath(d2)) /c/d[2] >>> tree.xpath(tree.getpath(d2)) == [d2] True
print 'Word is', #Notice the trailing comma. This will not print a newline char faultyPrint()
>>> for i in range(3): ... print a[:-i or None] ... [0, 1, 2, 3, 4, 5] [0, 1, 2, 3, 4] [0, 1, 2, 3] >>> for i in [0, -1, -2]: ... print a[:i or None] ... [0, 1, 2, 3, 4, 5] [0, 1, 2, 3, 4] [0, 1, 2, 3]
if found.strftime('%I:%M:%S') == "05:29:00": print 'the same' else: print 'not the same'
import pandas as pd import pandas.core.common as com t = pd.DataFrame({'a':[1,2,3], 'b':[2,6,0.75], 'c':['foo','bar','beer']}) cols_to_check = ['a', 'b'] assert all(com.is_numeric_dtype(t[col]) for col in cols_to_check) # True
>>> 'hello'.isspace() False >>> ' \n\t '.isspace() True
>>> from datetime import datetime >>> t = datetime.strptime('07 Aug 2008, 16:25', '%d %b %Y, %H:%M') >>> t.strftime('%Y-%m-%d %H:%M:%S') '2008-08-07 16:25:00' >>>
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
from django.conf import settings def myview(request): settings.TEMPLATE_STRING_IF_INVALID = '%s' # '%s' will get expanded to the variable name that was not found ... template = render(request, 'myview.html', {}) settings.TEMPLATE_STRING_IF_INVALID = '' return template
from datetime import datetime, timedelta delta = datetime.now() - timedelta(hours=3) Model.objects.filter(date_time__gte=delta)
>>> def _func(): print "YOOOO" >>> globals()['Da func name!!1'] = _func >>> globals()['Da func name!!1']() YOOOO
import imp import os MODULE_EXTENSIONS = ('.py', '.pyc', '.pyo') def package_contents(package_name): file, pathname, description = imp.find_module(package_name) if file: raise ImportError('Not a package: %r', package_name) # Use a set because some may be both source and compiled. return set([os.path.splitext(module)[0] for module in os.listdir(pathname) if module.endswith(MODULE_EXTENSIONS)])
logging.Formatter.converter = time.gmtime
query(Article).filter(Article.focusid.in_(topic_ids)).order_by(desc(Article.datepublished)).limit(10)
content = """\ Date/Time Sep 12 11:13:42 Date/Time Sep 12 11:13:42 Date/Time Sep 12 11:13:42 Date/Time Sep 12 11:13:42""" import re re.findall("(?<=Date/Time\s)(\r*[\w :]+)", content) #>>> ['Sep 12 11:13:42', ' Sep 12 11:13:42', 'Sep 12 11:13:42']
A = np.array([[1,2,1,3], [2,5,2,1], [4,1,3,1]]) B = np.array([[2,1,5,1], [1,3,5,5], [4,2,1,2]]) C = np.maximum(A, B) # array([[2, 2, 5, 3], # [2, 5, 5, 5], # [4, 2, 3, 2]])
soup = BeautifulSoup(your_old_html) soup.body.insert(0, your_tag) print soup
>>> df = DataFrame(columns=('lib', 'qty1', 'qty2')) >>> for i in range(5): >>> df.loc[i] = [randint(-1,1) for n in range(3)] >>> >>> print(df) lib qty1 qty2 0 0 0 -1 1 -1 -1 1 2 1 -1 1 3 0 0 0 4 1 -1 -1 [5 rows x 3 columns]
import itertools df_results = list() orderings = itertools.permutations(df["b"].unique()) for ordering in orderings: df_2 = df.copy() df_2["b_key"] = pd.Categorical(df_2["b"], [i for i in ordering]) df_2.sort_values("b_key", inplace=True) df_2.drop(["b_key"], axis=1, inplace=True) df_results.append(df_2) for df in df_results: print(df)
def reverse(S, start, stop): if start < stop - 1: S[start], S[stop-1] = S[stop-1], S[start] return reverse(S, start+1, stop-1) # This should return as well else: return S if __name__ == "__main__": x = reverse([1, 2, 3], 0, 3) print x
>>> import platform >>> print platform.linux_distribution() ('Ubuntu', '12.04', 'precise')
latest_things = DataThingHistory.objects. order_by('datathing_id_id', '-timestamp'). distinct('datathing_id_id') lt_with_searchterm = DataThingHistory.objects. filter(id__in=latest_things, text_with_history__icontains=searchterm) search_results = DataThing.objects.filter(datathinghistory__in=lt_with_searchterm)
class rpartial(partial): def __init__(self, *args): self.result = args[-1] def __repr__(self): return self.result rpartial(function, arg1, arg2, undoredo)
$password = 'Pa55w0rd!'; $salt = '$6$x88yEvVg'; $handle = popen('python -c \'import crypt; print crypt.crypt("' . $password . '", "' . $salt . '")\'', 'r'); $text = fread($handle, 100); echo $text; pclose($handle);
def check_contain_chinese(check_str): for ch in check_str.decode('utf-8'): if u'\u4e00' <= ch <= u'\u9fff': return True return False
displayname = firstname + lastname or username
>>> df = df.convert_objects(convert_numeric=True) >>> df[:2] qid lang metric val 0 Q774 fr informativeness 1.350078 1 Q774 fr referencerate 0.002627 >>> df.dtypes qid object lang object metric object val float64
def allInRange(bst, left, right): if bst is EmptyValue: return if left <= bst.root <= right: print(bst.root) allInRange(bst.left, left, right) allInRange(bst.right, left, right)
t = tempfile.NamedTemporaryFile() tree.render(t.name, other_args...) t.file.seek(0) #reset the file pointer to the beginning svg_string = t.read() t.close()
self.buttons = [button1, button2, ..., button18] def updateButtonImage(self): for button in self.buttons: button.configure(image=self.newImage) updateButton = Button(root, text="Change button image", command=self.updateButton)
DOCK((?!DOCK).)+?onomatopoeia
user = authenticate(username=username, password=password) if user is not None: if user.is_active: login(request, user)
In [141]: df[df['value']!= df['value'].shift()] Out[141]: name value 0 Mark True 1 Anna False 2 Steven True 3 Karl False 5 Laure True
{% for item in mylst %} {% for a in item %} {{ a }} {% endfor %} {% endfor %}
data = [('uid=xxxxxx,ou=People,dc=xxxxxxx,dc=eu', {'departmentcode': ['xxxxx']})], [('uid=xxxxxx,ou=People,dc=xxxxxxx,dc=eu', {'departmentcode': ['xxxxx']})] departmentcode = [] for elem in data: departmentcode.append(elem[0][1]['departmentcode'])
sudo apt-get install python-pycurl cp /usr/lib/python2.7/dist-packages/pycurl* ~/.virtualenvs/myenv/lib/python2.7/site-packages/
my_menu_object.delete(index1, index2=None)
class A(object): def method(self): return "foo" try: import c_ext import types A.method = types.MethodType(c_ext.optimized_method, None, A) except ImportError: pass
def callback1(line, regex_match): #do what you want def callback2(line, regex_match): #do what you want... else regex_dict = { "first_regex" : callback1, "second_regex" : callback2, } file_to_check = open("the_file") for line in file_to_check: for regex, callback in regex_dict.iteritems(): result = re.match(regex, line) if result: callback(line, result) break
from unittest.mock import mock_open with patch('your_module.open', mock_open(read_data=JSON_TEST_DATA, create=True) as m: result = Channel().read() assert m.assert_called_once_with(expected_file_name)
import os if os.environ.has_key('REQUEST_METHOD'): # You're being run as a CGI script. else: # You're being run from the command line.
>>> matrix = [[1,2,3,4],[9,8,7,6],[4,8,2,6]] >>> dict(enumerate(zip(*matrix))) {0: (1, 5, 4), 3: (4, 8, 6), 2: (3, 7, 2), 1: (2, 6, 8)} >>> matrix = [] >>> dict(enumerate(zip(*matrix))) {}
gnome-terminal --tab -t django1 --working-directory="dir1" -e "python manage.py runserver 8000" \ --tab -t django2 --working-directory="dir2" -e "python manage.py runserver 8002"
import mcrypt import base64 KEY = 'xxx' IV = 'xxx' ALGORITHM = 'tripledes' MODE = 'ecb' def encrypt(data): cryptor = mcrypt.MCRYPT(ALGORITHM, MODE) cryptor.init(KEY, IV) return base64.b64encode(cryptor.encrypt(data)) def decrypt(data): cryptor = mcrypt.MCRYPT(ALGORITHM, MODE) cryptor.init(KEY, IV) return cryptor.decrypt(base64.b64decode(data))
import sys import pycuda.autoinit import pycuda.driver as cuda import numpy as np listToProcess = [] for i in range(0, 10): listToProcess.append(i) l2p = np.array(listToProcess, dtype=np.int32) listToProcess_gpu = cuda.mem_alloc(l2p.nbytes) cuda.memcpy_htod(listToProcess_gpu, l2p)
# end='\n' won't do anything since '\n' is already the default value for end print(listing['href']+","+ str(listing.string), end='\n\n')
from django.db import models from django.contrib.auth.models import User class MyUser(models.Model): user = models.OneToOneField(User) friends = models.ManyToManyField(User) # you can also define this relationship to MyUser
response.menu = [(T('Index'), False, 'http://www.google.com')]
import os, platform backup_filename = "output.back.json" filename = "output.json" serialised_str = json.dumps(...) with open(backup_filename, 'wb') as f: f.write(serialised_str) if platform.system() == 'Windows': os.unlink(filename) os.rename(backup_filename, filename)
>>> import ipaddress # IP is lowercase because this is a module >>> ipaddress.IPv4Address # IP is uppercase because this is a class <class 'ipaddress.IPv4Address'> >>> ipaddress.ip_network # IP is lowercase because this is a function <function ip_network at 0x0242C468> >>>
def your_view(request): if request.method == 'POST': num_results = request.POST.get('num_results') #rest of the code . . .
def plt_configure(xlabel='', ylabel='', legend=False): plt.xlabel(xlabel) plt.ylabel(ylabel) if legend: if isinstance(legend, dict): plt.legend(**legend) else: plt.legend()
while ... : currentEdge = next(e for e in userEdges if e.nodeTo == node) path.append(currentEdge.nodeFrom)
>>> len(open('cities5000.txt').read().splitlines()) 46957 >>> len(list(csv.reader(open('cities5000.txt'), delimiter='\t'))) Traceback (most recent call last): File "<stdin>", line 1, in <module> _csv.Error: field larger than field limit (131072) >>> len(list(csv.reader(open('cities5000.txt'), delimiter='\t', quotechar=None))) 46957
nstorms_good = [] for i in range(len(lowerBound)): if min37[i] >= lowerBound[i] and min37[i] < upperBound[i]: ... else: nstorms_good.append( i ) # process for nstorm in nstorms_good: ...
In [250]: np.isclose(a,b) Out[250]: array([[ True], [ True]], dtype=bool)
ctypes.c_char_p( liba.say_hi() )
conn = MySQLdb.connect(host='localhost') r = conn.cursor() r.execute('INSERT INTO users (hash) VALUES (%s)', m.digest()) conn.commit()
>>> import nltk >>> tokens = nltk.word_tokenize("People took to the streets and protested") >>> nltk.pos_tag(tokens) [('People', 'NNS'), ('took', 'VBD'), ('to', 'TO'), ('the', 'DT'), ('streets', 'NNS'), ('and', 'CC'), ('protested', 'VBD')]
def issorted(numlist): for i in range(1, len(numlist)): if numlist[i] < numlist[i-1]: #you want to return False and exit the function. #return is the best option here. return False #if the for loop succeeds, you want to return True by default return True
import numpy as np from matplotlib import pyplot as plt from mpl_toolkits.mplot3d import Axes3D X, Y, Z = np.mgrid[-1:1:10j, -1:1:10j, -1:1:10j] T = np.exp(-X**2 - Y**2 - Z**2) fig = plt.figure() ax = fig.add_subplot(111, projection='3d') scat = ax.scatter(X, Y, Z, c=T, cmap='jet') fig.colorbar(scat, shrink=0.5, aspect=5)
import pandas as pd df = pd.DataFrame(['循环经济', '3D打印', '再生经济'], columns=['block_name']) print df[df['block_name'].str.contains('经济')]
for tile in tiles: if camera.viewport.contains(tile.rect): tile.draw()
walker = iter(os.walk(IMAGE_DIRECTORY)) next(walker) for path, files, _ in walker: list_of_files.extend(os.path.join(path, f) in files)
In [14]: import numpy as np In [15]: list_of_lists=[[1,2,3],[4,5,2],[3,2,4]] In [16]: weights = [10, 2, 5.5] In [17]: (np.array(list_of_lists) * np.array(weights)[:, None]).tolist() Out[17]: [[10.0, 20.0, 30.0], [8.0, 10.0, 4.0], [16.5, 11.0, 22.0]]
if Number % Test == 0: Number = Number + 1 Test = 2 # you'll need to reset Test here else:
capitals = {"Alabama": "Montgomery", "Alaska": "Juneau", "Arizona": "Phoenix", "Arkansas": "Little Rock"} while True: x = str(raw_input('Please enter a state: ' )) if x in capitals: print capitals[x], "is the capital of", x
def call_this(): self.wpCpuUsage.display(cpu_percent(interval=1)) self.my_timer = QtCore.QTimer() self.my_timer.timeout.connect(call_this) self.my_timer.start(1000) #1 second interval
>>> a = [1, 2] >>> b = a >>> del a >>> a Traceback (most recent call last): File "<stdin>", line 1, in <module> NameError: name 'a' is not defined >>> b [1, 2]
>>> from igraph import * >>> g = Graph.Read_Ncol("stuff.csv", directed=True)
np.genfromtxt("file.txt", dtype=float, filling_values=99.99)
A,B,C = empty_matrices( 2, 3 ) # sets A, B, C as 3 2x2 matrices A, = empty_matrices( 2, 1 ) # sets A as a 2x2 matrix
import pprint pprint.pprint(globals()) pprint.pprint(locals())
from pywinauto import application from pywinauto import clipboard app = application.Application() app.start(r'C:\Program Files (x86)\sda 1.06\Steam Desktop Authenticator.exe', timeout=5) sda = app.window_(title_re="Steam Desktop Authenticator") time.sleep(2) sda.Copy.Click() code = clipboard.GetData() sda.Close()
import types class E(object): def __get__(self,obj,cls): def returned(*args): print(obj.__dict__) return types.MethodType(returned, obj, cls)
import atexit def stufftodowhenpythonquits(): # do some stuff atexit.register(stufftodowhenpythonquits)
def test_find_anagrams(): stringlist = [('aces'), ('sidebar'), ('adverb'), ('fuels'), ('hardset'), ('praised')] result = [] for str1 in stringlist: result.extend(word for word in get_dictionary_word_list() if anagram(word,str1)) return result
def iter_email(self): for k in sorted(self.fields.keys()): if k.startswith('email_'): yield self[k]
from selenium.webdriver.support.select import Select select = Select(driver.find_element_by_id('FCenter')) selected_option = select.first_selected_option print selected_option.text
from pyasn1.type import univ, namedtype, constraint class Pbkdf2params(univ.Sequence): componentType = namedtype.NamedTypes( namedtype.NamedType('salt', univ.OctetString()), namedtype.NamedType('iterationCount', univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1,MAX)), namedtype.NamedType('keyLength', univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, MAX)) )
import pickle pickle.dump(model, open('./output.bin', 'w'))
def Convert_toFullStop(text): return text.replace('_', '.')
class PlaylistViewSet(viewsets.ModelViewSet): serializer_class = PlaylistSerializer lookup_field = 'id' def perform_create(self, serializer): serializer.save(user=self.request.user) def perform_update(self, serializer): serializer.save(user=self.request.user)
def keyfunc(item): key, value = item if isinstance(key, str): return 1 else: return len(key) max(d.items(), key=keyfunc)[0]
sock.send(packed_data) sock.settimeout(3) try: received=sock.recv(61) except socket.timeout: ...
def get_exdate(self, id): return id and re.compile("Grid_exdate_").search(id) df = pd.DataFrame() exdate_list = [] for link in soup.find_all(id=self.get_exdate): exdate_list.append(link.string) df['Grid_exdate'] = exdate_list
>>> from sympy import symbols >>> x = symbols('x') >>> str(x**2) 'x**2'
import numpy as np def my_func(xs,param1,param2,param3): values = xs**param1 + xs*param2**2 + param3*xs return values xs = np.arange(0,10,0.1) params1 = np.arange(1,2,0.1) params2 = np.arange(1,2,0.1) params3 = np.arange(1,5,0.1) X, P1, P2, P3 = np.meshgrid(xs, params1, params2, params3, sparse=True, indexing='ij') my_func(X, P1, P2, P3)
import subprocess subprocess.check_output(['xdg-user-dir', 'DESKTOP'])
class StreamLogger(object): def __init__(self, input_stream, output_logger): self.input_stream = input_stream self.output_logger def run(self): while True: line = input_stream.readline() if not line: break output_logger.error(line)
def iter_new_list(old_list): for x in old_list: if needs_expanding(x): for y in expand(x): yield y else: yield x new_list = list(iter_new_list(old_list))
import os FILE = os.path.splitext(FILE)[0]
listen unix:/var/run/nginx.sock;
cur = g.db.query('select * from table_name where id=3') if cur.rowcount <= 0: * abort(404) ''Run delete command here''
>>> string = r"/\?%" >>> test = "This is my string % my string ?" >>> any(elem in test for elem in string) True >>> test2 = "Just a test string" >>> any(elem in test2 for elem in string) False
import nltk # Define the cfg grammar. grammar = nltk.parse_cfg(""" S -> NP VP NP -> 'DT' 'NN' VP -> 'VB' VP -> 'VB' 'NN' """) # Make your POS sentence into a list of tokens. sentence = "DT NN VB NN".split(" ") # Load the grammar into the ChartParser. cp = nltk.ChartParser(grammar) # Generate and print the nbest_parse from the grammar given the sentence tokens. for tree in cp.nbest_parse(sentence): print tree
ax = fig.add_subplot(111, aspect="equal")
import matplotlib.pyplot as plt fig1 = plt.figure() fig1.set_size_inches(5.5,4) fig1.set_dpi(300) ax = fig1.add_subplot(111) ax.grid(True,which='both') ax.hist(driveDistance,100) xlabel = ax.set_xlabel('Driven Distance in km') ax.set_ylabel('Frequency') fig1.savefig('figure1_distance.png', bbox_extra_artists=[xlabel], bbox_inches='tight')
ttk.Style().map("TEntry", foreground=[('disabled', 'black')], fieldbackground=[('disabled','white')] ) widget['state'] = 'disabled'
class Dog(models.Model): name = models.CharField() owner = models.ForeignKey( 'myapp.Owner', related_name="%(app_label)s_%(class)s_dogs") breeds = models.ManyToMany( 'myapp.Breed', help_text="Remember, animals can be mixed of multiple breeds.", related_name="%(app_label)s_%(class)s_dogs")
setA = set(listA) setB = set(listB) setA.intersection(setB)
import StringIO f = StringIO.StringIO() # create a file-like object book = xlwt.Workbook() sheet = book.add_sheet("XYZ") book.save(f) message = EmailMessage(subject="Subject", body="body", from_email="random@gmail.com", to=email_list) message.attach('filename.xlsx', f.getvalue(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") #get the stream and set the correct mimetype message.send()
Git.USE_SHELL=True
print [t.string for t in div.findAll(match_only_non_divs)] # [u'Navigate!', None, u'Main navigation', None, None, u'Home', None, u'About'] print [t.string for t in div.findAll(match_only_non_divs) if t.string] # [u'Navigate!', u'Main navigation', u'Home', u'About']
from datetime import date, timedelta def generate_month_days(year, month): start_date = date(year, month, 01) cur_date = start_date while cur_date.month == start_date.month: yield cur_date cur_date += timedelta(days=1) for d in generate_month_days(2015,11): print d
user_to_resource:i = user:j # key -> value forward map resources => (resource:i, created_timestamp) # sorted set count_resource:i = quantity # key -> value quantity map
import urllib def access_data(): f= urllib.urlopen('https://api.scraperwiki.com/api/1.0/datastore/sqlite?format=csv&name=example&query=select%20*%20from%20%60table%60') data=f.read() s = open('example.csv','w') s.write(data)
class Projet(object): def pathDirectory(self): print "- - in pathDirectory - -" self.pathDir= str(QFileDialog.getExistingDirectory(ui.pathTab1, 'Select Path','', QFileDialog.ShowDirsOnly)) def goFunc(self): print "- - In goFunc - -" print self.pathDir if __name__ == "__main__": p = Projet() p.pathDirectory() p.goFunc()
import urllib2 from lxml import etree url = 'http://www.nfl.com/stats/categorystats?archive=false&conference=null&role=OPP&offensiveStatisticCategory=null&defensiveStatisticCategory=INTERCEPTIONS&season=2014&seasonType=REG&tabSeq=2&qualified=false&Submit=Go' response = urllib2.urlopen(url) htmlparser = etree.HTMLParser() tree = etree.parse(response,htmlparser) text = tree.xpath('//a[contains(text(),"Miami Dolphins")]/parent::td/following-sibling::td[10]/text()') if text: print text[0].strip()
#!python3.4 import re for fn in ('a.txt','b.txt'): with open(fn) as fin: for line in fin.readlines(): title = re.search('^Title:(.*)$',line) if title: print(title.group(1))
^(?![ ])[0-9pqw+*# ().-]*(?<![ ])$
from threading import Timer def gameover(): print "Game Over" t = Timer(5.0, gameover) t.start()
.. include:: ./my_reusable_tip.txt
df=pd.read_excel(u"url/某物2008.xls", encoding=sys.getfilesystemencoding())
pythonbrew install --configure="--enable-shared" 2.7.2
For status, visit: http://localhost:12345/
In [85]: X = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) In [86]: np.random.choice(X, 3, replace=False) Out[86]: array([7, 5, 9])
def cmp(a, b): return (a["qty"] / (a["cost"] * a["ppl"])) - (b["qty"] / (b["cost"] * b["ppl"])) list = sorted(list, cmp)
for c in df.Code.unique(): (df[df.Code == c]).to_csv(c + '.csv', index=False) Writes these files: Code, DateTime, Value A1, 1/1/15 5:45,150 A1, 1/1/15 6:00,200 A1, 1/1/15 6:15,200 Etc...
import rpy2.robjects.lib.ggplot2 as ggplot2 class ThemeClassic(ggplot2.Theme): _constructor = ggplot2.ggplot2.theme_classic @classmethod def new(cls): res = cls(cls._constructor()) return res # Monkey patching ggplot2 ggplot2.theme_classic = ThemeClassic.new
with open("input1.txt") as f, open("input2.txt") as f2,open("output.txt","w") as f3: f2.next() # skip header to avoid writing A B C twice for line in f: f3.write(line) f3.write("\n") # separate last line from file 1 and first of file 2 for line in f2: f3.write(line)
fp = open('D://source.txt',"r+") fg = open('D://target.txt',"w") for line in fp: if line.find("banana") != -1: new_line = line.replace(line,"i like banana\n") fg.write(new_line) else: fg.write(line) fg.close() fp.close()
coll = {1:{'a','b'}, 2:{'b','e'}, 3:{'a','c'}, 4:{'b','f'}} print(coll) d=dict() for subs in coll.values(): for s in subs: d[s]=d.setdefault(s, 0)+1 m=max(d.values()) print(m)
all_results = x_results | y_results
new_list = [[element or '0.00' for element in sublist] for sublist in big_list]
In [14]: df Out[14]: A B 0 1 3 1 2 4 2 3 5 3 4 5 In [15]: df.loc[0] Out[15]: A 1 B 3 Name: 0, dtype: int64 In [16]: type(df.loc[0]) Out[16]: pandas.core.series.Series In [17]: df.loc[[0]] Out[17]: A B 0 1 3 In [18]: type(df.loc[[0]]) Out[18]: pandas.core.frame.DataFrame
from selenium import webdriver profile = webdriver.FirefoxProfile() profile.set_preference('network.http.phishy-userpass-length', 255) driver = webdriver.Firefox(firefox_profile=profile) driver.get("https://username:password@somewebsite.com/")
handlers: - url: /images static_dir: images - url: /.* script: myscript.py
mv server server.bk && mkdir server && awk -F, ' NR==FNR { map["server.bk/"$2".csv"]=$1; next } FNR==1 { close(out); out="server/"map[FILENAME]".csv"; print "date,"map[FILENAME] > out } { print > out } ' servers.csv server.bk/*.csv
class AlgoMixin(object): # Does not end in "Test"; not a subclass of unittest.TestCase. # You may prefer "AbstractBase" or something else. def test_empty(self): result = self.function(make_empty_graph()) self.assertTrue(result) class TestF(AlgoMixin, unittest.TestCase): function = staticmethod(f) # Doesn't need to be in setup, nor be an instance attribute. # But doesn't take either self or class parameter, so use staticmethod. def test_random(self): pass # Specific test for algorithm 'f'.
(apply 'make-comint-in-buffer "tool" buffer "/usr/bin/python3.3" nil "tool-name" "arg0")
>>> import bitarray >>> b = bitarray.bitarray() >>> b.fromstring('a') >>> b bitarray('01100001') >>> b.to01() '01100001' >>> b.fromstring('pples') >>> b.tostring() 'apples' >>> b.to01() '011000010111000001110000011011000110010101110011'
>>> array([[1, 2], [3, 4]]) array([[1, 2], [3, 4]])
curl.setopt(pycurl.USERAGENT, 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:8.0) Gecko/20100101 Firefox/8.0')
root = Tk() for row_number, row in enumerate(cursor): Label(root, text = "ID = " + str(row[0])).grid(column = 1, row = row_number) Label(root, text = "Forename = " + str(row[1])).grid(column = 2, row = row_number) print ("Surname = ", row[2]) # and so on. transform this too print ("DOB = ", row[3]) file.close() root.mainloop()
df.reset_index() df['date'] = df['date_timestamp'].dt.date del df['date_timestamp'] df2 = pd.pivot_table(df, index=['date', 'user'], columns=['ticket'], values='time', aggfunc=np.sum) df2.fillna(value=0, inplace=True) df2.plot(kind='bar', stacked=True)
>>> from scipy.spatial.distance import cdist >>> A = np.random.randn(540, 2) >>> B = np.random.randn(540, 2) >>> alpha = 1. >>> ind = np.all(cdist(A, B) > alpha, axis=0) >>> outliers = B[ind]
todo = [(0, 0)] while todo: i, j = todo.pop() print "processing ", i, j if i != 3 and j != 3: todo.append((i, j+1)) todo.append((i+1, j))
def fetchFuction(): QtGui.QApplication.setOverrideCursor(QtGui.QCursor(QtCore.Qt.WaitCursor)) # if incase function failed then restore it try: yourFetchFucn() QtGui.QApplication.restoreOverrideCursor() except: QtGui.QApplication.restoreOverrideCursor()
def session(request): return { 'session': request.session }
buttons = {} for x in range(gridx): buttons[x] = GridBtn(self,x,y,btn_id)
sum(len(x) for x in multilist)
import struct import random f = open('myfile','wb') for i in range(0,9): a = random.randint(0,255) f.write(struct.pack("=B", a)) f.close()
max(my_dict.items(), key=lambda x: x[1]['last_event'])[0]
fig = plt.figure() ax = fig.add_subplot(1, 1, 1, projection='3d') p_surf=ax.plot_surface(x,y,z,rstride=1,cstride=1,linewidth=0,antialiased=True,facecolors=cm.jet(np.sqrt(x*x + y*y + z*z))) m = cm.ScalarMappable(cmap=cm.jet) m.set_array(x*x + y*y + z*z) plt.colorbar(m) plt.show()
for _, maker in makes.iterrows(): contains_maker = models.models.str.contains(maker.makes) models.loc[contains_maker,('makes', )] = maker.makes
with open('/Users/d-sdf/test_erick/test/essays.csv') as csvfile: for i, line in enumerate(csvfile): with open("essay{}.txt".format(str(i+1)), "w") as txtfile: txtfile.write(line)
import os print "Test File 1" os.system("sudo python /home/ubuntu/MyFolder/TestFile2.py") #It will run TestFile2.py as Python Script
class TagListView(ListView): def get_queryset(self): startdate = timezone.now() - datetime.timedelta(days=7) enddate = timezone.now() return Tag.objects.filter(last_view__range=[startdate, enddate]).order_by('-views')[:10] context_object_name='most_viewed_list' template_name='tags/index.html' urlpatterns = patterns('', url(r'^$', TagListView.as_view(), name='index'), )
filename = "Foo.txt"; print 'Now, I will write a header to the original file to display copyright.' append_copy = open(filename, "r") original_text = append_copy.read() append_copy.close() append_copy = open(filename, "w") append_copy.write("Copyright -- Ryan -- 2014\n") append_copy.write(original_text) append_copy.close() print 'File closed and data written!'
cdef class A: cpdef foo(self, int i=*, x=*)
import random List_Of_Words = ["these","are","the","words"] random.shuffle(List_Of_Words)
Leaf (no children): a set {v} Introduce (exactly one child): a set S union {v} with child S (v not in S) Forget (exactly one child): a set S with child S union {v} (v not in S) Join (exactly two children): a set S with children S and S
dic = {m : my_function(m) for m in my_list}
payload = {'key1': 'value1', 'key2': 'value2'} >>> r = requests.post("http://www.example.com/webservice", data=payload) >>> print r.text
contents.insert(0, "import sys; sys.path.append('lib'); sys.path.append('device')")
i = 7*int(round(x/7))
RLIMIT_RSS Specifies the limit (in pages) of the process's resident set (the number of virtual pages resident in RAM). This limit only has effect in Linux 2.4.x, x < 30, and there only affects calls to madvise(2) specifying MADV_WILLNEED.
>>> dict={'000': 'A', '001': 'B', '010': 'C'} >>> >>> [int(ele, 2) for ele in dict] [2, 1, 0] >>> # getting this shuffled, since the `dict items` are `random` >>> >>> {int(k, 2): v for k, v in dict.items()} {0: 'A', 1: 'B', 2: 'C'}
class MyForm(forms.Form): def __init__(self, *args, **kwargs): super(MyForm, self).__init__(*args, **kwargs) for field in mylist: self.fields[field] = forms.CharField(max_length=100)
>>> s 'hello\nthere\r\nthis\n\ris a test' >>> r = '<br />' >>> s.replace('\r\n',r).replace('\n\r',r).replace('\r',r).replace('\n',r) 'hello<br />there<br />this<br />is a test' >>>
from urllib.request import urlretrieve for link in link_list: urlretrieve(link)
import re EXAMPLE_REGEX = re.compile("(.*):(.*)(?:e.?g.?|(?:for )?example)(.*)") print EXAMPLE_REGEX.findall('Foo: The companion of bar e.g. I have class called FooBar')
def grouper(n, iterable, fillvalue=None): "grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx" args = [iter(iterable)] * n return izip_longest(fillvalue=fillvalue, *args)
running = True while running: # This would start the event loop for event in pygame.event.get(): if event.type == pygame.QUIT: # This would be a quit event. running = False # So the user can close the program screen.fill(0,0,0) # This fills the screen with black colour. pygame.display.flip() # This "flips" the display so that it shows something pygame.quit()
for desc, val in data: if 'DAY' in desc: # do something with val elif 'WEEK' in desc: # do something else with val # etc...
import shlex testPopen = subprocess.Popen(shlex.split('bash -c "time {a}"'.format(a = app)), stdout=subprocess.PIPE,stderr=subprocess.PIPE, shell=False) out,err = testPopen.communicate() print(err)
$ touch empty.py $ time python3 empty.py real 0m0.158s user 0m0.033s sys 0m0.021s
import re text = ''' Started by upstream project "fcm-dummy-web" build number 99 originally caused by: Started by user Kaul, Kuber ''' m = re.search(r'Started by upstream project "([^"]+)" build number (\d+)', text) print("project = %s, build number %d" % (m.group(1), int(m.group(2))))
from sympy.printing import ccode from sympy.parsing.sympy_parser import parse_expr s = "8*pi**3*sin(x3)*sin(pi*z)**2" exp = parse_expr(s) In [55]: ccode(exp) Out[55]: '8*pow(M_PI, 3)*sin(x3)*pow(sin(M_PI*z), 2)'
from struct import * f = open('file', 'rb') print unpack('<i', f.read(4))[0] f.close()
from matplotlib.pyplot import show sns.set(style="darkgrid") titanic = sns.load_dataset("titanic") total = float(len(titanic)) # one person per row ax = sns.barplot(x="class", hue="who", data=titanic) for p in ax.patches: height = p.get_height() ax.text(p.get_x(), height+ 3, '%1.2f'%(height/total)) show()
>>> import ast >>> a = ast.literal_eval('(1, 2, 3)') >>> a (1, 2, 3) >>> b = ast.literal_eval('__import__("evil")') Traceback (most recent call last): File "<stdin>", line 1, in <module> File "/usr/lib/python2.6/ast.py", line 68, in literal_eval return _convert(node_or_string) File "/usr/lib/python2.6/ast.py", line 67, in _convert raise ValueError('malformed string') ValueError: malformed string
In [57]: df.groupby(df.sum(), axis=1).sum() Out[57]: 1 9 0 2 2 1 1 3 2 0 4 [3 rows x 2 columns]
sunrise = datetime.datetime.fromtimestamp(/*a timestamp*/) sunset = datetime.datetime.fromtimestamp(/*a timestamp*/) sunTime = sunset-sunrise ... print sunrise-datetime.timedelta(seconds=sunTime.total_seconds()*0.06)
env = db.DBEnv() env.open(None, db.DB_CREATE | db.DB_INIT_MPOOL) internal_db = db.DB(env) internal_db.open("the filename", "the internal db name", db.DB_BTREE, db.DB_RDONLY)
@asyncio.coroutine def async_gettter(): return (yield from http_client.get('http://example.com')) def sync_getter() return asyncio.get_event_loop().run_until_complete(async_getter())
import numpy as np probabilities = model.predict(image) classes = np.argmax(probabilities, axis=-1)
import signal,sys def signal_handling(signum,frame): print "you chose to end the program" sys.exit() signal.signal(signal.SIGINT,signal_handling) while True: pass
def index(): if request.vars.random: request.vars.itemId = generate_random_id() form = FORM(DIV(INPUT(_name='itemId', _type='text', _value=request.vars.itemId if request.vars else '', requires=[IS_NOT_EMPTY(), IS_LENGTH(maxsize=12)]), INPUT(_type='submit', _value='search', _name='search'), INPUT(_type='submit', _value="random_search", _name='random'))) return dict(message=form.process())
import glob import os for file_path in glob.glob('*9999.dbf'): os.unlink(file_path)
from bs4 import BeautifulSoup import urllib2 domain = 'http://www.renderx.com' url = 'http://www.renderx.com/demos/examples.html' page = urllib2.urlopen(url) soup = BeautifulSoup(page.read()) app = soup.find_all('a', text = "Applications") for aa in app: print domain + aa['href']
dict((k,v) for k,v in parent_dict.iteritems() if 2 < k < 4)
sys.path.append('/path/to/project')
>>> super(B, B).my_method <function my_method at 0x00D51738> >>> super(B, B).my_method is A.my_method True
def rt_iterator(depth, other-args): # store whatever info you need from this point in the tree if depth>= MAX_DEPTH: return # look at the nodes you want to expand from here for each node, in the order you want them expanded: rt_iterator(depth+1, other-args)
def decodeNumber(test): if not test: # check if test is empty return 1 count = 0 for i in mapping: if test.startswith(i): count += decodeNumber(test[len(i):]) return count for test in encodedCases: test = test.strip() print test, "==>" , decodeNumber(test)
sentence = [(4,'make'),(1,'sentence'),(0,'this'),(3,'now'),(5,'sense'),(2,'should')] print "[%s]" % ', '.join(word for _,word in sorted(sentence))
#!/usr/bin/env python import os, sys print(os.path.basename(sys.argv[0]))
SELECT * FROM table WHERE name LIKE '%smith%';
# ./manage.py help runserver Usage: manage.py runserver [options] [optional port number, or ipaddr:port] Starts a lightweight Web server for development. (...) # ./manage.py runserver my_private_ip:8000
import gobject gobject.threads_init()
class MyTestClass(unittest.TestCase): def setUp(self): self.my_obj = MyClass() self.my_obj_mock = flexmock(self.my_obj) def my_test_case(self): self.my_obj_mock.should_receive('other_method').and_return(1).and_return(2).and_return(3) self.my_obj.method_to_test()
class Customer(User): def __init__(self, name): super(Customer, self).__init__(name)
def findValue(list): result = [] i = 0 length = len(list) while i < length: x = list[i] if x < 0: result.append(i) i = i + 1 return result print(findValue([-3,7,-4,3,2,-6]))
with open('platenon.txt', 'w') as f: for platecode in range(100): f.write('KJA{0:03d}AA'.format(platecode))
for a in range(2, 3000): if all(a % k == 0 for k in range(1,11)): print a
def run_me(self): config_vars= self.get_properties('services','package_install','package_info') convig_vars_2 = self.get_properties('network','proxy_server','proxy_user')
if harris[0] > 10e-06
class Scrip_Master(models.Model): nse_markt_typ = models.ForeignKey(MDfile, blank=True, null=True) class Scrip_MasterAdmin(admin.ModelAdmin): ... search_fields = ['nse_markt_typ__mkt_type', ...]
request.get_full_path()
import urllib2 proxy_handler = urllib2.ProxyHandler({}) opener = urllib2.build_opener(proxy_handler) page = opener.open('http://www.google.com')
try: os.rename('/etc/foo', '/etc/bar') except IOError as e: if (e[0] == errno.EPERM): print >> sys.stderr, "You need root permissions to do this, laterz!" sys.exit(1)
<form id="my_form"> ... </form><button id="my_button">Clicky</button> <div id="info_div"></div> <script> $("#my_button").click(function(){ var data = $("#my_form").serialize() $("#info_div").load("/url/of/bit/to/load?"+data) })</script>
directions = ["up", "down", "left", "right"] start_dir = random.choice(directions) if start_dir == "left" or start_dir == "right": checkXstate(x) else: checkYstate(y)
words = [ "in", "india", "indian", "indian", "flag", "bull", "bully", "bullshit"] Result = sorted([ (sum([ w.startswith(prefix) for w in words ]) , prefix ) for prefix in words])[::-1]
orig = [start] for x in diff: orig.append(orig[-1] + x)
grouped = {} for event in list_of_events: key = tuple(event['date'].isocalendar()[:1]) grouped.setdefault(key, []).append(event)
from time import sleep class MyClass: def _my_func(self, x=sleep(1)): pass def my_func2(self): self._my_func() class MyClass2: def my_func2(self): def my_func(x=sleep(1)): pass my_func()
instances = MyModel.objects.only('name') data = [{'name': instance.name, 'favourite': instance.favouriteNumber()} for instance in instances]
import numpy as np import itertools with open('test.dat') as f_in: x = np.genfromtxt(itertools.islice(f_in, 1, 12, None), dtype=float) print x[0,:]
>>> from bs4 import BeautifulSoup >>> markup = '<font color="red">this text is red</font>' >>> soup = BeautifulSoup(markup) >>> soup.font <font color="red">this text is red</font> >>> new_tag = soup.new_tag('span') >>> new_tag['style'] = 'color: ' + soup.font['color'] >>> new_tag.string = soup.font.string >>> soup.font.replace_with(new_tag) <font color="red">this text is red</font> >>> soup <span style="color: red">this text is red</span>
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_subplot(111) rows = [] for x in range(0,14): rows.append(['a',14-x]) df = pd.DataFrame(rows) # df = df.set_index(0) df.plot(ax=ax) ax.set_xticks(df.index) ax.set_xticklabels(list(df[0]))
matrix = sparse.lil_matrix((len(ids), len(dict))) dict_from_dict = {word: ind for ind, word in enumerate(dict)} dict_from_id = {id: ind for ind, id in enumerate(id)} for i in words: matrix[dict_from_id[i['id']], dict_from_dict[i['word']] += 1.0
model = QtSql.QSqlTableModel(self, db) model.setTable("YourTable") model.select() tableview = QtGui.QTableView() tableview.setModel(model) tableview.show()
class C: x = 1 @classmethod def m(cls): return cls.x class D(C): x = 2 print(C.m()) # 1 print(D.m()) # 2
@register.assignment_tag(takes_context=True) def comment_metadata(context, parent): comments_queryset = parent.comments.visible() # Perform whatever analysis you want on the comments, # and return a variable that will be available in your template context.
start_time = start_time.replace(minute=ceil_to, second=0, microsecond=0)
b = type(a)(args)
matching = [string for string in words if string in op_text]
df.Age.replace(np.NaN, 'Is Null value', inplace=True) # Or, depending on your needs: df['Age'] = df.Age.replace(np.NaN, 'Is Null value') # Or without `replace` : df['Age'] = df.Age.apply(lambda x: x if not pd.isnull(x) else 'Is Null value')
>>> from pyquery import PyQuery as pq >>> d = pq("<html><p id="hello">Foo</p></html>") >>> d("#hello") [<p#hello.hello>] >>> d('p:first') [<p#hello.hello>]
tar = tarfile.TarFile.gzopen(os.path.join(backup_dir, directory+'.tar.gz'), mode='w', compresslevel=5)
users.objects.all().reverse()
>>> mylist = [1,2,3,2,3,5,6,3,7,8,6] >>> [i+1 for i in range(len(mylist)-1) if mylist[i]>mylist[i+1]] [3, 7, 10]
import numpy as np a = np.array([[ 7., 5.], [ 9., 3.], [ 7., 2.], [ 7., 8.], [ 6., 8.], [ 3., 2.]]) foo = 5*a[:,0] + a[:,1]**2
import requests bla = requests.head("https://t.co/0u0Jb2Pw7k", allow_redirects=True) print(bla) print(bla.url) >> <Response [404]> >> https://fr.wikipedia.org/wiki/Colonne_Vend%EF%BF%B4me
RosNetwork() { _chatter_pub = _n.advertise<std_msgs::String>(channel.c_str(),10); ros::Duration(1).sleep(); // optional, to make sure no message gets lost } void RosNetwork::sendMessage(string msg, string channel) { ... _chatter_pub.publish(msgToSend); ... }
from PIL import Image, ImageChops point_table = ([0] + ([255] * 255)) def black_or_b(a, b): diff = ImageChops.difference(a, b) diff = diff.convert('L') diff = diff.point(point_table) new = diff.convert('RGB') new.paste(b, mask=diff) return new a = Image.open('a.png') b = Image.open('b.png') c = black_or_b(a, b) c.save('c.png')
plt.figure() CS = plt.contour(X, Y,log_mu,levels = [-7,-8], colors=('k',),linestyles=('-',),linewidths=(2,)) CSF = plt.contourf(X, Y,log_mu) plt.clabel(CS, fmt = '%2.1d', colors = 'k', fontsize=14) #contour line labels CB = plt.colorbar(CSF, shrink=0.8, extend='both') plt.xscale('log') plt.yscale('log') plt.show()
import matplotlib.pyplot as plt import numpy as np from IPython import display %matplotlib inline for _ in range(3): x = np.random.randn(10) print(x) fig = plt.figure() ax = fig.add_subplot(111) ax.plot(x, x + 5, 'x') display.display(plt.gcf()) plt.close()
mask = 0b100100 for i in range(2, -1, -1): tmp = x & mask print(((tmp >> 3 + i) << 1) + ((tmp & (1 << i)) >> i)) mask >>= 1
import os yourfile = os.listdir("/home/user/Desktop/directory_which_only_contains_this_one_file")[0]
<p> {% for object in my_objects %} {{ object }}{% if not forloop.last %},{% endif %} {% endfor %} </p>
>>> r'\t\n\v\r'.decode('string-escape') '\t\n\x0b\r'
import sys encoding='utf-8' reload(sys) sys.setdefaultencoding(encoding)
>>> datetime.datetime.now().utcoffset() is None True
proc = subprocess.call(["C:\\absolute\\path\\some.exe ", fetched_data])
import subprocess task = subprocess.Popen("avconv -i video.mp4 2>&1 | grep Duration | cut -d ' ' -f 4 | sed -r 's/([^\.]*)\..*/\1/'", shell=True, stdout=subprocess.PIPE) time = task.communicate()[0] print time
def setMesaj(self): mesaj = unicode(self.toPlainText().toUtf8(), "utf-8") ascii = mesaj.encode("ascii", "ignore") if ascii != mesaj: self.setPlainText(ascii) if (len(mesaj)) > 159: QtGui.QMessageBox.warning(self, 'warning', "[WARN-1] Mesaj 160 karakterden fazla?") i = len(mesaj) - 159 mesaj = mesaj [:-i] self.setPlainText(mesaj)
g = 0 # index for age n = 0 # index for name st_names = [0] * 3 st_age = [0] * 3 for n in range(0, 3): # loop used in our book for loading arrays st_names[n] = raw_input("Enter Student name") st_age[n] = int(raw_input("Enter student age ")) # Change g to n, because that's the variable increment in the loop print st_names print st_age
data2014 = n.activate([0,1,0,1,0,1]) print 'data2014',data2014
[filename for path in dirs for filename in os.listdir(path)]
new_d = [] for x in d: if x not in new_d: new_d.append(x)
r".*([a-z])\1.*((?=(?!\1))[a-z])\2.*((?=(?!\1))(?=(?!\2))[a-z])\3.*"
mySet = {str(i) for i in {1010101, 20202030}} myList = ["1 1010101 20202030 15.3"] result = any(all(s in l for s in mySet) for l in myList) print(result)
a = int(100/3) # this will round down to 3 b = 100/3 # b = 33.333333333333336, a and b are not equal so we can generalize into the following def ceil(a, b): if (b == 0): raise Exception("Division By Zero Error!!") # throw an division by zero error if int(a/b) != a/b: return int(a/b) + 1 return int(a/b)
echo 'execfile("myFile.py")' | python manage.py shell
matches = filter(None, map(findit, out))
sample = [[["1"],"1"],["2",[["123",[[["23"]]],23],[12.3,"23"]]],[["5"],"1","1"]] def traverse(l, f): result = [] for item in l: if isinstance(item, list): result.append(traverse(item)) else: result.append(f(item)) return result
elsif ( $item =~ /leftclick/i ) { SendLButtonDown (); SendLButtonUp (); }
l1 = [[1,2,3,4], [10,11,12]] l2 = [[-1,-2,-3,-4], [-10,-11,-12]] print [zip(a,b) for a,b in zip(l1,l2)]
import urllib2 request = urllib2.Request("https://api.example.org/books/title", headers={"Accept" : "application/vnd.travis-ci.2+json"}) contents = urllib2.urlopen(request).read()
def trailing_zeros(longint): manipulandum = str(longint) return len(manipulandum)-len(manipulandum.rstrip('0'))
def checkio(array): listSum = 0 if array: for i in range(0, len(array), 2): listSum += array[i] finalValue = listSum * array[-1] return finalValue else: return 0
import spynner def content_ready(browser): if 'id="feedback-' in browser.html: return True br = spynner.Browser() br.load("http://www.venere.com/it/hotel/roma/hotel-ferrari/#reviews", wait_callback=content_ready) with open("test.html", "w") as hf: hf.write(br.html.encode("utf-8"))
https://myapp.appspot.com/_ah/api/.*
In [100]: x = ['a','b','c','d', 'e'] In [101]: y = [1 ,2 ,3 ,4, 2] In [102]: zip(x,y)).index(('b',2) Out[102]: 1 In [103]: zip(x,y) Out[103]: [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 2)]
# condition ? trueValue : falseValue trueValue if condition else falseValue
import requests url = "http://www.imdb.com/title/tt0089218/" headers = {"Accept-Language": "en-US,en;q=0.5"} r = requests.get(url, headers=headers)
>>> dic = {'voornaam': 'John', 'Achternaam': 'Davis', 'telephone': '123456', 'Mobielnummer': '234567'} >>> tr = {'voornaam':'first_name', 'Achternaam':'last_name', 'telephone':'phone', 'Mobielnummer':'mobile'} >>> dic = {tr[k]: v for k, v in dic.items()} {'mobile': '234567', 'phone': '123456', 'first_name': 'John', 'last_name': 'Davis'}
In [2]: import dateutil.parser as dparser In [3]: date = dparser.parse('5th November 2010') In [4]: date Out[4]: datetime.datetime(2010, 11, 5, 0, 0)
import random def myFunction(): n = random.randrange(10) if n==1: # do the stuff for the output being 1
request = 'GET {path} HTTP 1.1\r\nHost: {host}\r\nConnection: Close\r\n\r\n'.format(path=path, host=host)
converter= ( (0,) + 255*(255,) ).__getitem__ def black_or_white(img): return img.convert('L').point(converter)
import subprocess subprocess.Popen("C:\ThisIsTheFolderIWantToNavigateTo")
webapp2.Route(r'/products', handler='handlers.ProductsHandler', name='products-list', schemes=['https'])
return redirect('home')
FMDatabase *db = [FMDatabase databaseWithPath:@"/tmp/tmp.db"]; FMResultSet *s = [db executeQuery:@"SELECT * FROM myTable"]; while ([s next]) { //retrieve values for each record }
f = open(file_path, 'rb')
sed -i -e '$G' *.txt
>>> import os >>> import base64 >>> s = str(os.urandom(10000)) >>> encs=base64.b64encode(s) >>> s2 = base64.b64decode(encs) >>> cmp(s,s2) 0
def my_decorator(method): def redefined_method(*args, **kwargs): print('Starting decorator') method(args, **kwargs) # here ^, no star! return redefined_method
table_query = neo4j.CypherQuery(db, "merge (x: Table{name: 'table_param'}) return x") results = table_query.execute() for r in results: # get the node you return in your query my_node = r[0] # get the properties of your node props = my_node.get_properties()
In [5]: s = "Client: Company X" In [6]: print s.split(":")[-1] Company X In [7]: s = "Fund: ABCD" In [8]: print s.split(":")[-1] ABCD
to_translate = 'Hola como estas?' print("%s >> %s" % (to_translate, translate(to_translate))) print("%s >> %s" % (to_translate, translate(to_translate, 'fr')))
growth.clip(-maxg, maxg, out=growth)
import hashlib actually_random = hashlib.sha1(uuid).digest()
sample1 = pd.read_csv('sample_data.csv', dtype=str, error_bad_lines = False) sample2 = pd.read_csv('sample2.csv', dtype=str, error_bad_lines = False) sample_concat = pd.concat([sample1, sample2], keys = ['one', 'two'], ignore_index=True)
import itertools as it list1=['12aa','2a','c2'] list2=['2ac','c2a','1ac'] # First- Finding combinations of each two item from list1. first = list(it.combinations(list1, 2)) # Second- Finding combinations of each two item from list2. second = list(it.combinations(list2, 2)) # Third- Finding combinations of each two items from list1 and list2 third = list(it.product(list1, list2)) # Fourth- Calculating each combinations total length for combination in first: # first, second, third print combination, len(''.join(combination))
class Child(Parent): def __init__(self, *args, **kwargs): super(Child, self).__init__(*args, **kwargs)
import sys groups = {} for l in sys.stdin: group, value = l.split() s = groups.get(group, 0) groups[group] = s + int(value) print groups
import subprocess #code prog = subprocess.Popen(['python', filename, args]) #more code
from keras.models import Sequential def train(model): model.build() .... for iteration in range(1, 200): .... model.fit(X_train, y_train, ...) .... .... if __name__ == '__main__': try: model = Sequential() train(model) except KeyboardInterrupt: model.save_weights("weights.hdf5")
>>> from astroquery.simbad import Simbad >>> Simbad.add_votable_fields('measurements') >>> acen = Simbad.query_object('alpha centauri')
if isinstance(iterable, basestring): iterable = iterable.split(',')
a=[1,2,3] b=['a','b'] c=[1,2,3,4] d=[1,2,3] a==b #returns False a==c #returns False a==d #returns True
>>> [ord(c) for c in '\x0f\x07UUU'] [15, 7, 85, 85, 85]
#short hand: metals.xs('BI', level=0).xs('Arsenic, Dissolved', level=0).xs(1, level=1) # more verbose metals.xs('BI', level='bmp_category').xs('Arsenic, Dissolved', level='parameter').xs(1, level='storm') # two chained `ix` calls: metals.ix['BI', 'Arsenic, Dissolved'].ix[:, 1]
NAMESPACES = {'ns': 'http://www.starstandard.org/STAR/5', 'ns1': 'http://www.openapplications.org/oagis/9'} ro_xml = '{}.xml'.format(6001265) parser = etree.XMLParser(ns_clean=True) tree = etree.parse(ro_xml, parser) vehicle = {} vehicle_info = tree.xpath(twc.XML_VEHICLE_INFO, namespaces=NAMESPACES) for child in vehicle_info: vehicle.update({child.tag: child.text}) model = residence['{%s}Model' % NAMESPACES['ns']] print model
import pythoncom, pyHook def uMad(event): return False hm = pyHook.HookManager() hm.MouseAll = uMad hm.KeyAll = uMad hm.HookMouse() hm.HookKeyboard() pythoncom.PumpMessages()
search = Account.search() response = search[:1].execute() for hit in response: print hit
def callback(future): # here you want to do some stuff with the value future.result() EXECUTOR.submit( your_task_func ).add_done_callback( lambda future: tornado.ioloop.IOLoop.instance().add_callback( partial(callback, future)))
class MySignupView(SignupView): def get_context_data(self, **kwargs): ret = super(MySignupView, self).get_context_data(**kwargs) ret['all_tags'] = Tags.get_tags() return ret
>>> data = (0,1) , (0,2), (1,1), (1,2) >>> if [x for x in data if x[0] >= 1 and x[1] < 3 ]: ... print("ok") ... ok
<group> <field name="date_start" position="attributes"><!--removed / from the end--> <attribute name="invisible">True</attribute> </field> <field name="date_end" position="replace"/> <field name="warehouse_id" widget="selection" groups="stock.group_locations"/> <field name="company_id" groups="base.group_multi_company" widget="selection"/> </group>
>>> import re >>> r = r'^(\d+),?$' >>> re.match(r, '123,').group(1) '123'
class ValidationRule: def __init__(self, **kwargs): self.__dict__.update(kwargs)
$ python3 Python 3.2.5 (default, Jul 30 2013, 20:11:30) [GCC 4.8.1] on cygwin Type "help", "copyright", "credits" or "license" for more information. >>> import math >>> math.ceil(1.232323) 2 >>> math.ceil(5.12521369) 6 >>> math.ceil(7.12532656) 8
pid=subprocess.Popen(...)//invoke the shell command which creates a bunch of files pid.wait()//wait until terminates for f in a folder open f and write something commands..
~/google_appengine/appcfg.py update my/app/location
with open('file.text', 'r') as fp: for line in fp: match = re.search('string=([^,]+)', line) if match: print match.group(1)
end_time = time.time() + timeout index = child.expect([..], timeout=timeout) remaining_time = end_time - time.time()
for root, dirs, files in os.walk("."): if ".hg" in dirs: dirs.remove(".hg") for f in files: print os.path.join(root, f)
fig = plt.figure() ax = fig.add_subplot(111) # Need to do this so we don't have to worry about how many lines we have - # matplotlib doesn't like one x and multiple ys, so just repeat the x lines = [] for y in ys: lines.append(x) lines.append(y) ax.plot(*lines) fig.savefig("filename.png")
with open(filename, 'r') as f: # Do things with f # f is automatically closed
>>> arr = np.random.rand(1000, 1000) >>> %timeit [sum(i >= 0.5 for i in arr.T[c]) for c in xrange(len(arr))] 1 loops, best of 3: 1.58 s per loop >>> %timeit np.sum(arr >= 0.5, axis=0) 1000 loops, best of 3: 1.53 ms per loop
>>> ['a{}'.format(i) for i in range(1, 20)] ['a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'a10', 'a11', 'a12', 'a13', 'a14', 'a15', 'a16', 'a17', 'a18', 'a19'] >>> ','.join(['a{}'.format(i) for i in range(1, 20)]) 'a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19'
import struct import mmap with open('test.bin', 'wb') as f: f.truncate(100) with open('test.bin', 'r+b') as f: m = mmap.mmap(f.fileno(), 0) mv = memoryview(m) for ind in range(25): struct.pack_into('>l', mv, ind * 4, ind)
import requests from BeautifulSoup import BeautifulSoup as bs #grab HTML r = requests.get(r'http://www.amazon.com/s/ref=sr_pg_1?rh=n:172282,k%3adigital%20camera&keywords=digital%20camera&ie=UTF8&qid=1343600585') html = r.text #parse the HTML soup = bs(html) results= soup.findAll('div', attrs={'class': 'data'}) print results
class Task(models.Model): CANCELLED = -1 REQUIRES_ATTENTION = 0 WORK_IN_PROGRESS = 1 COMPLETE = 2 Status = ( (CANCELLED, 'Cancelled'), (REQUIRES_ATTENTION, 'Requires attention'), (WORK_IN_PROGRESS, 'Work in progress'), (COMPLETE, 'Complete'), ) status = models.IntegerField(choices=Status, default=REQUIRES_ATTENTION)
sorted(files, key=lambda d: d["name"].lower().replace("_", "}"))
''.join([ bin(int(x))[2:].rjust(8,'0') for x in '123.123.123.123'.split('.')])
pip install --install-option="--prefix=$PREFIX_PATH" package_name
def convert_type(cell, typ): try: return typ(cell) except TypeError: return "No_Data" # These lines go below 'tl = my_reader.next()' in your code col_types = [int, str, int, float, float, float, float, float, float, float, float, list] new_row = tuple(convert_type(cell, typ) for cell, typ in zip(tl, col_types)) per_table[tl[1]] = new_row
ageNode.xpath("./Tom") ageNode.xpath("Tom")
if ($fileString =~ m!^($perlCmt|$cCmt)?#\!\s*.*?/perl|^($perlCmt|$cCmt)?#\!\s*.*?/sh|^($perlCmt|$cCmt)?#\!\s*.*?/python!)
class MyFrame1 (wx.Frame): def __init__(self): super(MyFrame1, self).__init__() fluid_sizer = wx.BoxSizer(wx.HORIZONTAL) self.m_textCtrl1 = wx.TextCtrl(self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0) fluid_sizer.Add(self.m_textCtrl1, 0, wx.ALL, 5) self.SetSizer(fluid_sizer) self.Layout()
def g(x): return 2 * x ** 2 + x + 5
//tr/th[@scope="row"][.="Title"]/following-sibling::td[1]/text()
import subprocess subp = subprocess.Popen(["cmd"]) subp.wait() print 'process %d finished' % subp.pid
python manage.py makemessages -l th -l tl -l vi
(?<=name=")[a-zA-Z0-9]*
import numpy as np minval = np.min(a[np.nonzero(a)]) maxval = np.max(a[np.nonzero(a)])
class HexFile(object): def __init__(self, fp, wordsize=4): self.fp = fp self.ws = wordsize def __iter__(self): while True: data = self.fp.read(self.ws) if not data: break yield data.encode('hex')
This file is placed here by pip to indicate the source was put here by pip. Once this package is successfully installed this source code will be deleted (unless you remove this file).
>>> s = '2 - 3' >>> two, three = s.split(' - ') >>> two '2' >>> three '3'
class X(object): def get_i(self): return self._i def set_i(self, value): self._i= value i= property(get_i, set_i)
soup = BeautifulSoup("<html><body><span>This is my text</span></body></html>") span = soup.find('span') str(span) # Outputs '<span>This is my text</span>'
text = "He was carefully disguised but captured quickly by police." lines = [text, 't', 'l'] for line in lines: if re.findall(r"\w+ly", line): print line
def combined(name, value): foo(**{name:value})
import requests response = requests.get('http://your.graphite.host.com/render?target=queue.prod.high.total_queues&format=json') data = response.json()
D = { 'h' : 'hh' , 'e' : 'ee'} str = 'hello' returns = [] # create list for storing return value from function def myLambda(x): # function does lambda return D.get(x,x) for x in str: #map==> pass iterable returns.append(myLambda(x)) #for each element get equivalent string from dictionary and append to list print ''.join(returns) #join for showing result
from StringIO import StringIO import struct class BinaryIO(StringIO): def writepack(self, fmt, *values): self.write(struct.pack('<' + fmt, *values)) def to_binary_example(): data = BinaryIO() data.writepack('I', 42) data.writepack('II', 1, 2) return data.getvalue()
def compare(this, that, encoding="utf-8"): // convert this to str if isinstance(this, bytes): this = str(this, encoding) // convert that to str if isinstance(that, bytes): that = str(that, encoding) return this == that
>>> dir(x) ['__call__', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'args', 'func', 'keywords']
def tokenize(phrase, stop_words=()): stop_words = '|'.join(re.escape(x) + r'\b' for x in stop_words) other = '\s+|\w+|[^\s\w]+' regex = stop_words + '|' + other if stop_words else other return re.findall(regex, phrase)
test = ["80010","80030","80050"] newtest = [x[:-1] for x in test]
import cexapi api = cexapi.API(username, api_key, api_secret)
data = request.body.read()
import a import b
myvar = !some_command --option1 --option2 foo bar
x, x1, x3 = symbols('x x1 x3') L=Symbol("L") eqn=(x*(L**2))+(x1*(L*1))+(x3*(L**0)) s = solve(eqn,L) lambdify([x, x1, x3], s)(ufloat(10,0.2), ufloat(8,0.01), ufloat(25,2))
body.append(paragraph([('This is italic text', 'i')]))
for i in xrange(1, 100): subprocess.call(["./task.sh", arg1], cwd=("/some%d" % i))
In [126]: class myint(int): def __add__(self,a): print "{0} plus {1}".format(self,a) .....: In [127]: a=myint(5) In [128]: b=myint(6) In [129]: a+b 5 plus 6
print("UDP target IP:", UDP_IP) print("UDP target port:", UDP_PORT) print("message:", MESSAGE) sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP sock.sendto(bytes(MESSAGE, "utf-8"), (UDP_IP, UDP_PORT))
import networkx as nx import matplotlib.pyplot as plt G = nx.DiGraph() G.add_edges_from(\[(0,1), (0,2), (1,1), (1,2)\]) nx.write_dot(G,'graph.dot') # then run dot -Tpng graph.dot > graph.png
import inspect, re def varname(p): for line in inspect.getframeinfo(inspect.currentframe().f_back)[3]: m = re.search(r'\bvarname\s*\(\s*([A-Za-z_][A-Za-z0-9_]*)\s*\)', line) if m: return m.group(1) if __name__ == '__main__': spam = 42 print varname(spam)
execfile("myfuncs.py")
<%include file="post.mako" args="post=post" /> ... #post.mako <%page args="post"/> <h1>${post.title}</h1> ...
self.__dict__.update( variable1 = 1, variable2 = 2, variable3 = 'hello')
>>> generator_fn.__code__.co_flags >>> 99 >>> normal_fn.__code__.co_flags >>> 67
PyObject obj = interpreter.eval("True"); boolean i = ((PyInteger) obj).asInt() != 0;
df.drop_duplicates(['col1','col2'])
integral = integrate.simps(y*x*2*pi,x)
import re # Don't bother matching everything, just the bits that matter. pat = re.compile(r'AssemblyFileVersion.*\.(\d+)"') # ... lines omitted which set up read_file, write_file etc. for line in read_file: m = pat.search(line) if m: start, end = m.span(1) line = line[:start] + str(int(line[start:end]) + 1) + line[end:] write_file.write(line)
>>> strings = ["one two", "three four", "five six"] >>> [value for s in strings for value in s.split()] ['one', 'two', 'three', 'four', 'five', 'six']
>>> re.sub(r'^\s+|\s+$', '', ' hello world ') 'hello world'
capture = cv.CaptureFromCAM(0) frame = cv.QueryFrame(capture) #some code ... del(capture)
from Tkinter import * def dummy(root): root.after(1000, dummy, root) print '', def main(): root = Tk() root.withdraw() dummy(root) mainloop() if __name__ == "__main__": main()
gdk_pointer_ungrab(GDK_CURRENT_TIME); gdk_keyboard_ungrab(GDK_CURRENT_TIME); gtk_grab_remove(menu);
from selenium import webdriver from selenium.webdriver.common.keys import Keys from BeautifulSoup import BeautifulSoup import time browser = webdriver.Firefox() baseURL="http://www.codechef.com/users/peeyushy95" browser.get(baseURL) time.sleep(5) soup=BeautifulSoup(browser.page_source) L=str(soup) f_out=open("/home/adi/experi/data_up.txt","w") f_out.write(L) f_out.close()
with self.canvas: rect = Rectangle(pos=(0, 0), size=(10, 10)) rect.pos = (50, 50)
>>> re.findall(r"(?<![\$\d])(\d+)", "I spent $100 on 10 12-inch subs") ['10', '12']
import os import tempfile import subprocess def ocr(path): temp = tempfile.NamedTemporaryFile(delete=False) process = subprocess.Popen(['tesseract', path, temp.name], stdout=subprocess.PIPE, stderr=subprocess.STDOUT) process.communicate() with open(temp.name + '.txt', 'r') as handle: contents = handle.read() os.remove(temp.name + '.txt') os.remove(temp.name) return contents
import re fin = open('snp.txt','r').readlines() l = [ re.match('.*(\(.*?\))',line).group(1) for line in fin] l = [ '%d %f\n'%eval(i) for i in l] with open('o.txt','w') as fout: fout.writelines(l) fout.close()
def override(p, methods): oldType = type(p) newType = type(oldType.__name__ + "_Override", (oldType,), methods) p.__class__ = newType class Test(object): def __str__(self): return "Test" def p(self): print(str(self)) def monkey(x): override(x, {"__del__": p}) a=Test() b=Test() monkey(a) print "Deleting a:" del a print "Deleting b:" del b
#!/usr/bin/python from datetime import datetime import time your_time = 1.28946608161e+12 print time.strftime("%a, %d %b %Y %H:%M:%S +0000", datetime.fromtimestamp(your_time/1000).timetuple() )
h2_details = soup.find('h2', text='Case details') table = h2_details.find_next_sibling('table') details = {} for row in table.find_all('tr'): cells = row.find_all('td', limit=2) details[cells[0].string] = cells[1].string
ghost = Ghost() ghost.frame('<your frame name>') g.content # Your frame content g.frame() # ascent back to root frame
db.users.aggregate([ { "$match": { "name": { "$in": [ "John", "Peter" ] } }}, { "$unwind": "$users" }, { "$group": { "_id": "$users", "count": { "$sum": 1 } }}, { "$match": { "count": { "$gt": 1 } }}, { "$group": { "_id": null, "count": { "$sum": 1 } }} ])
In [72]: df = pd.DataFrame({'accredited': ['10/10/2011', 'is not accredited']}) In [73]: df Out[73]: accredited 0 10/10/2011 1 is not accredited In [74]: df['accredited'] = df['accredited'].str.replace(r'(?i).*not.*', 'not accredited') In [75]: df Out[75]: accredited 0 10/10/2011 1 not accredited
class BigWidget(QWidget): def __init__(self, parent=None, **kwargs): QWidget.__init__(self, parent, **kwargs) ... def DrawManyWidgets(self, parent): self.setVisible(False) ... self.setVisible(True)
import subprocess subprocess.call('nircmd.exe win close class "CabinetWClass"' , shell=True)
Class MyTable: def __init__(self): self.dates = [] // where dates[i] might be something like {date: [P, A, ...]} // you will have to figure out how and what do you want to represent self.data = [] // where data[i] is something like {ab:[P, A, B, None]} // define different methods to fill dates and data fields
import os, sys filename = os.path.splitext(os.path.basename(sys.argv[0]))[0] if not os.path.exists(filename): # filename does not exists, we will emulate cmd behaviour sys.stderr.write("'%s' is not recognized as an internal or external command,\noperable program or batch file." % filename) sys.exit(9009) ret = os.system("python %s %s" % ( filename, " ".join(sys.argv[1:]) )) exit(ret)
PyObject *function = PyObject_GetAttrString(add_module, "add"); PyObject *args = PyTuple_New(0); PyObject *kwargs = Py_BuildValue("{s:i}", "b", 5) result = PyObject_Call(function, args, kwargs); Py_DECREF(kwargs); Py_DECREF(args); Py_DECREF(function);
python manage.py my_cool_command
import os import shutil srcfile = 'a/long/long/path/to/file.py' dstroot = '/home/myhome/new_folder' assert not os.path.isabs(srcfile) dstdir = os.path.join(dstroot, os.path.dirname(srcfile)) os.makedirs(dstdir) # create all directories, raise an error if it already exists shutil.copy(srcfile, dstdir)
return HttpResponse("<script>alert('hello world');</script>")
class CustomImage(Image): """ Override - to use inline image instead; inexplicable bug with non inline images """ def draw(self): lazy = self._lazy if lazy>=2: self._lazy = 1 self.canv.drawInlineImage(self.filename, getattr(self,'_offs_x',0), getattr(self,'_offs_y',0), self.drawWidth, self.drawHeight ) if lazy>=2: self._img = None self._lazy = lazy
>>> a = ('helloWorld', 20) >>> a[1] 20 >>>
class LiveServerTestCase(TransactionTestCase): static_handler = _StaticFilesHandler @property def live_server_url(self): return 'http://%s:%s' % ( self.server_thread.host, self.server_thread.port)
a = "0343523" a.isdigit() True b = "934sjsspam" b.isdigit() False
n = int(input("Enter a positive integer value: ")) for i in range(n, 0, -1): if i == 1 or i == n: print("*" * i) else: print("*" + (" " * (i - 2)) + "*")
def run_process(record): result = ping(record) pool = Pool(processes=10) results = pool.map_async(run_process, [records]) for r in results.get(): write_to_database(r)
@app.route('/callback/<address>') def callback(address): sid = get_sid_from_address(address) socketio.send('payment seen on blockchain', room=sid) @socketio.on('address') def socketlisten(address): associate_address_with_sid(address, request.sid)
import csv from glob import iglob unique_headers = set() for filename in iglob('*.csv'): with open(filename, 'rb') as fin: csvin = csv.reader(fin) unique_headers.update(next(csvin, []))
def get(*keys): ret = mydict for key in keys: ret = ret[key] return ret
persons = [] for human in world: attributes = {} attributes['name'] = human['name'] attributes['eye_color'] = human['eyes'] persons.append(attributes)
import os for root,dirs,files in os.walk(path): for fname in files: if fname.endswith('.html'): fq = os.path.join(root, fname) for line in open(fq): if 'sub_middle_1col' in line: ...
>>> import urllib >>> response = urllib.urlopen( 'http://api.hostip.info/get_html.php?ip=12.215.42.19&position=true').read() >>> print response Country: UNITED STATES (US) City: Aurora, TX Latitude: 33.0582 Longitude: -97.5159 IP: 12.215.42.19
import heapq elements = heapq.nsmallest(4, my_list, key=f) foo = choice(elements)
from __future__ import print_function # remove the above line if you're using Python 3.x with open('color.txt') as f: colors = ', '.join(f.read().splitlines()).split(', ') with open('car.txt') as f: for i in f: for car in i.strip().split(', '): for color in colors: print(car, color)
> x = df.ix[[0]] > y = df.ix[[1]] > type(x) pandas.core.frame.DataFrame > type(y) pandas.core.frame.DataFrame
def sum(a,b): if a>0 and b>0: return str(a*b) + "\n" + str(sum(a,b-1)) else: return ""
In [18]: df['labels'] = df['labels'].apply(lambda x: [w.lower() for w in x]) df Out[18]: labels 0 [cat, dog, horse] 1 [pig, fish, giraffe]
import re u_id = input("Input User ID: ") #DECLARE u_id : string rex = re.compile("^[A-Z][a-z]{2}[0-9]{3}$") if rex.match(u_id): print("Correct format") else: print("Incorrect")
import re ... pattern = re.compile("|".join(searchlist)) with open("your_file") as f: for line in f: if not re.search(pattern, line): print(line)
time_a = time.time() # ... some operations ... ten_minutes = 10 * 60 time_span = time.time() - time_a if time_span > ten_minutes: # time span is larger than 10 minutes.
from Tkinter import * root = Tk() var = IntVar() # instantiate the IntVar variable class var.set(0) # set it to 0 as the initial value # the button command is a lambda expression that calls the set method on the var, # with the var value (var.get) increased by 1 as the argument Button(root, text="Next Customer", command=lambda: var.set(var.get() + 1)).pack() # the label's textvariable is set to the variable class instance Label(root, textvariable=var).pack() mainloop()
if success: # On Success - Mark message as processed. ch.basic_ack(delivery_tag=method.delivery_tag) else: # Else - Mark message as rejected and move it back to the queue. ch.basic_reject(delivery_tag=method.delivery_tag, requeue=True)
>>> [any(i in j for i in a) for j in b] [True, False, True, False]
# emails is a set of emails for line in fileinput.input("csvfile.csv",inplace =1): parts = line.split(',') if parts[3] not in emails: print line
import time class something(object): def __init__(self,c): self.c=c def inc(self): new = self.c+1 # if the thread is interrupted by another inc() call its result is wrong time.sleep(0.001) # sleep makes the os continue another thread self.c = new x = something(0) import threading for _ in range(10000): threading.Thread(target=x.inc).start() print x.c # ~900 here, instead of 10000
def getcol(cols, index, default=None): try: return cols[index].findAll(text=True)[0] except IndexError: return default
from itertools import ifilter, islice def ello_bruce(limit=None): for i in islice(ifilter(predicate, xrange(10**5)), limit): # do whatever you want with i here
from collections import defaultdict words_seen = defaultdict(list) for word,filedate in get_words(): words_seen[word].append(filedate)
@app.context_processor def inject_test(): return {'test': 'Available to all'}
brew install python brew install sdl sdl_image sdl_mixer sdl_ttf smpeg portmidi /usr/local/share/python/pip install hg+http://bitbucket.org/pygame/pygame
In [13]: with open("filelists.txt") as f: for line in f: data=re.findall(r"_H\d+_M\d+_S\d+",line) if data: print [x.strip("HMS") for x in data[0].split("_")[1:]] ....: ['1', '1', '1'] ['1', '1', '2'] ['2', '1', '1'] ['2', '1', '2']
class A(object): pass class A: pass
import gc def foo(): code = """ class DummyA(object): pass """ context = {} exec code in context exec code in context gc.collect() print len(gc.garbage), len(gc.get_objects()) gc.enable() foo(); foo() # amount of objects doesn't increase gc.set_debug(gc.DEBUG_LEAK) foo() # leaks
dict((vert, i) for (i, cl) in enumerate(clusters) for vert in cl.vertices)
set_script_timeout(time_to_wait) Set the amount of time that the script should wait during an execute_async_script call before throwing an error. Args : time_to_wait: The amount of time to wait (in seconds) Usage : driver.set_script_timeout(30)
fetcher_dict = {'X':XDataFetcher,'Y':YDataFetcher} data_source = ... fetcher = fetcher_dict[data_source]()
query = "SELECT *, ((ACOS(SIN(%s * PI() / 180) * SIN(lat * PI() / 180) + COS(%s * PI() / 180) * COS(lat * PI() / 180) * COS((%s - lon) * PI() / 180)) * 180 / PI()) * 60 * 1.1515) AS distance FROM app_car WHERE price BETWEEN %s AND %s HAVING distance<=%s ORDER BY distance ASC" cars = Car.objects.raw(query, [lat, lat, lon, min_price, max_price, miles]) return HttpResponse(len(list(cars))
def pythagorus(a: int, b: int) -> int: """ calculate a**2 + b**2 ... usage example, etc ... """ return math.sqrt(a**2 + b**2)
>>> import win32file >>> win32file.GetVolumeNameForVolumeMountPoint("C:\\") '\\\\?\\Volume{50c800a9-c62e-11df-b5bb-806e6f6e6963}\\' >>> win32file.GetVolumeNameForVolumeMountPoint("K:\\") Traceback (most recent call last): File "<stdin>", line 1, in <module> pywintypes.error: (87, 'GetVolumeNameForVolumeMountPoint', 'The parameter is incorrect.')
import pylab as plt import numpy as np x=np.arange(1,1e5) # Normal plot #plt.plot(x,x,'o-') # Log plot idx=np.logspace(0,np.log10(len(x)),10).astype('int')-1 plt.plot(x[idx],x[idx],'o-') plt.xscale('log') plt.yscale('log') plt.show()
print('Let\'s print "Happiness" out') print("Let's print \"Happiness\" out") print('''Let's print "Happiness" out''') print("""Let's print "Happiness" out""")
[i for (i,e) in enumerate(list) if e==1][5]
alldata = impdat.root.data datastruct = {} for names in impdat.rood.data.__members___: datastruct[names] = eval('alldata.' + names + '[0][:]')
let numbers = [ 10000, 10303, 30913, 50000, 100000, 101039, 1000000 ] let evenNumbers = numbers.filter { $0 % 2 == 0 } // [ 10000, 50000, 100000, 1000000 ]
from django.core import exceptions class DocumentWizard(SessionWizardView): # ... def get_form_initial(self, step): # ... determine document_id document = Document.objects.get(id=document_id) if self.request.user == document.owner: document_dict = model_to_dict(document) return document_dict else: raise exceptions.PermissionDenied
event = gtk.gdk.Event(gtk.gdk.FOCUS_CHANGE) event.window = entry.get_window() # the gtk.gdk.Window of the widget event.send_event = True # this means you sent the event explicitly event.in_ = False # False for focus out, True for focus in
root@trelte:/ # . /sdcard/qpyenv.sh root@trelte:/ # python Python 2.7.2 (default, Oct 25 2014, 20:52:15) [GCC 4.9 20140827 (prerelease)] on linux2 Type "help", "copyright", "credits" or "license" for more information. >>> import os >>>
for key, d1_list in dict_1.iteritems(): for element in d1_list: for ind, d2_list in enumerate(dict_2[key]): if element in d2_list: print element, key, ind
from collections import defaultdict my_dict = defaultdict(int) >>> lst = [1,2,2,2,3] >>> for i in lst: ... my_dict[i]+=1 ... >>> >>> my_dict defaultdict(<type 'int'>, {1: 1, 2: 3, 3: 1}) >>> my_dict = defaultdict(list) >>> >>> for i,j in enumerate(lst): ... my_dict[j].append(i) ... >>> my_dict defaultdict(<type 'list'>, {1: [0], 2: [1, 2, 3], 3: [4]})
#!/usr/bin/env python import re buffer = ''' \tNow is the time\t for all good men\r\tto come to the aid\t\r of their party. ''' nlinePat = re.compile(r'\r\n?|\n') bufferPos = 0 nlineCounter = 0 bl = nlinePat.split (buffer) for line in bl: print(line.strip ()) nlineCounter += 1 print nlineCounter
socket.getaddrinfo("example.com", None, socket.AF_INET6)
max_dict = {} def keep_row(row): if row.calls > max_dict.get((row.ID, row.SerialNo), 0): max_dict[(row.ID, row.SerialNo)] = row.calls return True else: return False Table1_mod = Table1[Table1.apply(keep_row, axis=1)]
import json from odftoarray import ODSReader # renamed the file to odftoarray.py r = ODSReader("your_file.ods") arrays = r.getSheet("your_data_sheet_name") json.dumps(arrays)
In [1]: class data: ...: def __init__(self, **kwargs): ...: self.__dict__.update(kwargs) ...: In [2]: d = data(foo=1, bar=2) In [3]: d.foo Out[3]: 1 In [4]: d.bar Out[4]: 2
tweet=re.sub('|'.join(lst), 'DELETESENTENCE', tweet)
User post save signal which adds 'change_profile' permission to new user objects @receiver(post_save, sender=User, dispatch_uid='user.created') def user_created(sender, instance, created, raw, using, **kwargs): """ Adds 'change_profile' permission to created user objects """ if created: from guardian.shortcuts import assign assign('change_profile', instance, instance.get_profile())
ares = (a.transpose(0,1,3,2) * v).transpose(0,1,3,2)
for i in ReadOnlyCollection: i.doSomething()
import numpy as np # a 10GB memory-mapped array x = np.memmap('/tmp/x.mm', mode='w+', dtype=np.ubyte, shape=(int(1E10),)) # create a memory-mapped .npy file with the same dimensions and dtype y = open_memmap('/tmp/y.npy', mode='w+', dtype=x.dtype, shape=x.shape) # copy the array contents y[:] = x[:]
(r'^(?P<chararg>\w+)/(?P<arg>[\w\+%_& ]+)/(?P<intarg>\d+)', 'dest')
fixed_angle = np.where(z > 0, angle, -angle)
from configobj import ConfigObj conf = ConfigObj('filename.ini') section = conf['section'] value = section['value']
data = client_sock.recv(1024) with open('textfile.txt', 'a') as f: for ch in data: f.write('{}\n'.format(ord(ch)))
from django.utils.html import escape def create_markup(event): output = ... return escape(output)
>>> from ast import literal_eval >>> >>> s = r'''[{'text': 'This is my legit "test" \'message\' with "lots" of \'quotation marks\'', 'type': 'message', 'user': '<userID>', 'channel': '<channelID>', 'ts': '1450501889.000074', 'team': '<teamID'}]''' >>> print(literal_eval(s)[0]["text"]) This is my legit "test" 'message' with "lots" of 'quotation marks'
from collections import defaultdict lists = defaultdict(list) def time_price_pair(a, b): if 32400 <= a < 53460: i = (a-32400)/540 lists[i].append(b)
df1 = (df.groupby('CloneID').filter(lambda x: (x.ID.str.startswith("H").any()))) df1.groupby('CloneID').apply(lambda x: x.to_csv('CloneID{}.txt'.format(x.name), index=False))
globals()[string1 + string2]() locals()[string1 + string2]()
mystring = "a1234f" data = list(mystring)
from django.contrib.auth.signals import user_logged_in, user_logged_out def record_user_logged_in(sender, user, request, **kwargs): # Record the user logged in def record_user_logged_out(sender, user, request, **kwargs): # Record the user logged out user_logged_in.connect(record_user_logged_in) user_logged_out.connect(record_user_logged_out)
f = int(raw_input("Enter height: ")) s = '' for i in xrange(f): for j in xrange(f-i-1): s += ' ' for j in xrange(2*i+1): s += '*' s += '\n' print s
>>> from datetime import datetime >>> datetime.strptime("2012-11-09-165420", "%Y-%m-%d-%H%M%S") datetime.datetime(2012, 11, 9, 16, 54, 20)
>>> x = raw_input("Int array") Int array>? 1 2 3 >>> map(int, x.split()) [1, 2, 3]
# Create the dict for the movies object. id_movies = dict([(m.id, m) for m in movies]) # Get the data in order. order_movies = [id_movies[i] for i in movie_ids]
if player_a in reward_dict: reward_dict[player] += money else: reward_dict[player] = money
(require 'cl) (setq mylist '("foo" "bar" "baz" "qux" "frobnitz")) (subseq mylist 1 4) ;; ("bar" "baz" "qux")
- (void)applicationWillResignActive:(UIApplication *)application - (void)applicationDidBecomeActive:(UIApplication *)application
from models import Name from datetime import datetime # create a new model name = Name(city='New York', state='NY') # fields can also be set this way name.zipcode = '10027' # save the model to the database name.save() # find a model by zipcode name = Name.objects.filter(zipcode='10027') # modify it name.curr_time = datetime.now() # save it name.save()
from django.utils.html import strip_tags template_values = { 'company_id': company.id } template_file = os.path.join(os.path.dirname(__file__), 'templates/email.html') html = template.render(template_file, template_values) plain_text = strip_tags(html)
while running: rect = pygame.Rect(10, 20, 30, 30) pygame.draw.rect(screen, (255,0,0), rect) pygame.display.flip() for event in pygame.event.get(): if event.type == pygame.MOUSEBUTTONDOWN: mouse_pressed = True if event.type == pygame.QUIT: running = False while mouse_pressed: # do your stuff mouse_pressed = False
import wave start_time = 5.43 stop_time = 5.81 time_period = stop_time - start_time wav = wave.open('test.wav') time_period_frames = time_period * wav.getnframes()
import sys def is_kernel(): if 'IPython' not in sys.modules: # IPython hasn't been imported, definitely not return False from IPython import get_ipython # check for `kernel` attribute on the IPython instance return getattr(get_ipython(), 'kernel', None) is not None
t=np.linspace(0, np.pi, num=x) p=np.linspace(-np.pi,np.pi,num=x) [T,P]=np.meshgrid(t,p) F_c=0.0 F_s=0.0 for i in xrange(n): F_c+=F_c_F_s.F_c(theta[i],phi[i],T,P) F_s+=F_c_F_s.F_s(theta[i],phi[i],T,P) mod_F=(np.log10((np.power(F_c,2)+np.power(F_s,2))))
col_idx = -1 for idx, mt in enumerate(sheet.row_values(0)): print mt if mt=='MT': col_idx = idx break
import heapq return heapq.nlargest(n, l)
print open(__file__).read()
pos = text.index(INSERT)
In [1]: from jupyter_client import find_connection_file In [2]: find_connection_file() Out[2]: 'C:\\Users\\me\\AppData\\Roaming\\jupyter\\runtime\\kernel-1234.json'
@property def output(self): return self... #not sure how you are tracking output on/off @output.setter def output(self, state): if state: self.set_output_on() else: self.set_output_off()
>>> ids = set(' '.join(item.split()[:2]) ... for item in blabla['Condition'].unique())) # set(['no2 med1', 'no1 med1', 'no1 med2']) >>> len(ids) 3
n=3 N=2 df_list=[] for i in range(n): df_list.append(pd.concat([df.apply(np.random.choice, axis=1) for i in range(N)], ignore_index=True)) new_df = pd.concat(df_list, axis=1, ignore_index=True).T
for i in range(10): filename = "C:\\%d.txt" % i with open(filename, 'a') as f: ....
for i,line in enumerate(input): line = clean2(line) if i in (1, 4): outfile.write(line)
def get_decorator(arg1): def my_decorator(function): print "get_decorator argument: %s" % arg1 return function return my_decorator class Foo(object): def __init__(self, arg1): self.var1 = arg1 self.method1 = get_decorator(self.var1)(self.method1) def method1(self): print "method1" foo = Foo("abc") foo.method1()
import glob import pandas as pd combined = [] for filepath in glob.glob('path/to/your/files/*.exp'): combined.append(pd.read_table(filepath, sep='\t', header=None)) combined = pd.concat(combined, ignore_index=True)
>>> foo = type('Foo', (), {})() >>> foo <__main__.Foo object at 0x100499f50>
visited = set() queue = ['www.google.com', 'www.yahoo.com', 'www.microsfot.com'] def crawl_the_page(link): # ...crawling... visited.add(link) return # you just for through the queue list # no need to pop the list, use the set() to compare instead for url in queue: if url not in visited: #... do your stuff ... #... crawl your pages ... crawl_the_page(url)
X = np.random.rand(5, 3) a = np.random.randint(0, 3, 5) In [12]: X[np.arange(a.size), a] Out[12]: array([ 0.99653335, 0.30275346, 0.92844957, 0.54728781, 0.43535668]) In [13]: for i, ind in enumerate(a): print X[i][ind] # ....: #0.996533345844 #0.30275345582 #0.92844956619 #0.54728781105 #0.435356681672
post_data = [('name','Gladys'),] # a sequence of two element tuples result = urllib2.urlopen('http://example.com', urllib.urlencode(post_data)) content = result.read()
>>> def multisplit(s, delims): ... pos = 0 ... for i, c in enumerate(s): ... if c in delims: ... yield s[pos:i] ... pos = i + 1 ... yield s[pos:] ... >>> list(multisplit('hello there[my]friend', ' []')) ['hello', 'there', 'my', 'friend']
# steps not shown where you set up api u = api.get_user(783214) print u.screen_name
def parse(self, response): hxs = HtmlXPathSelector(response) for tb in hxs.xpath('//table'): heading = tb.xpath('.//thead/tr/th/a/text()').extract()[0] for td in tb.xpath('.//tbody/tr'): il = WebsiteLoader(response=response, selector=td) ... il.add_value('heading', heading) yield il.load_item()
ax1[:set_yticks]([0.2,0.4,0.6,0.8,1.0]) ax1[:set_yticklabels](["-40dB","-30dB","-20dB","-10dB","0dB"])
from xml.etree.ElementTree import Element, SubElement, Comment, tostring # Configure one attribute with set() root = Element('opml') root.set('version', '1.0') root.append(Comment('Generated by ElementTree_csv_to_xml.py for PyMOTW'))
foo = '"MARY","PATRICIA","LINDA","BARBARA","ELIZABETH","JENNIFER","MARIA","SUSAN","MARGARET","DOROTHY","LISA","NANCY","KAREN","BETTY","HELEN","SANDRA","DONNA","CAROL"' output = foo.replace('"','').split(",")
def enterPiece(aBoard, aColour, aPoint): c = aBoard if 0 < aPoint <= aBoard.size: for j in range(aPoint): c.removePieceFromPoint(aColour, 0) c.addPieceToPoint(aColour, aPoint) return True else: return False
import ast original_ast = ast.parse(""" import sys for a in range(0,10): print(a) sys.exit(0)""") altered_ast = ast.parse(""" import sys for a in range(0,10): print(a + 1) sys.exit(0)""") ast.dump(original_ast) == ast.dump(altered_ast)
liPos = [(2,5),(8,9),(18,22)] s = "I hope that I will find an answer to my question!" exclusions = set().union(* (set(range(t[0], t[1]+1)) for t in liPos) ) pruned = ''.join(c for i,c in enumerate(s) if i not in exclusions) print pruned
class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter): pass parser = argparse.ArgumentParser(description='test\ntest\ntest.', epilog='test\ntest\ntest.', formatter_class=CustomFormatter)
import web urls = ( '/(.*)', 'hello' ) app = web.application(urls, globals()) class hello: def GET(self, name): if not name: name = 'World' return 'Hello, ' + name + '!' if __name__ == "__main__": app.run()
>>> import hashlib >>> import numpy >>> a = numpy.random.rand(10, 100) >>> b = a.view(numpy.uint8) >>> hashlib.sha1(b).hexdigest() '15c61fba5c969e5ed12cee619551881be908f11b' >>> t=timeit.Timer("hashlib.sha1(a.view(numpy.uint8)).hexdigest()", "import hashlib;import numpy;a=numpy.random.rand(10,10)") >>> t.timeit(number=10000)/10000 2.5790500640869139e-05
import xlwt as xl doc = xl.Workbook() #Create document #Add a worksheet sheet = doc.add_sheet("Some Sheet") for i in range(100): #Write 2 columns sheet.write(i, 0, i+1) sheet.write(i, 1, i*2) #Write result (SUM for example) sheet.write(i, 2, xl.Formula("SUM(A%d:B%d)" % (i+1, i+1))) doc.save("my_table.xls")
from django.db.models import Sum, F qs = Leg.objects.filter(timetrial__leg__order__lte=F('order')) qs = qs.annotate(duration_prefix_sum=Sum('timetrial__leg__duration'))
def _generate_row (row_number, prev_row): if row_number == 1: return [1] row_data = [0] + prev_row + [0] return [sum(row_data[a:a+2]) for a in xrange(0, len(row_data)-1)] def generate(num_rows): prev_row = None for i in xrange(1, num_rows+1): prev_row = _generate_row(i, prev_row) yield prev_row print list(generate(5))
import fileinput import glob import sys for line in fileinput.input(glob.glob('*.mod'), inplace=True): sys.stdout.write(line.replace('sit', 'SIT')) if fileinput.filelineno() == 32: #adds new line and text to line 32 sys.stdout.write('TextToInsertIntoLine32' '\n')
f = open('namesonly.txt', 'w') ... for line in reader: if "new" in line[2]: #line = line.split(',') #<- you don't need this line because you are reading the input as a delimitd string already f.write(line[0] + '\n') # write the first thing before the first comma (your names) f.close()
import numpy as np from sklearn.metrics.pairwise import pairwise_distances mat_1 = np.matrix([[1,2,3],[3,4,5]]) vec_1 = (2, 3, 5) # Make sure the dimensions of the vector and matrix are equal >>>print pairwise_distances(mat_1, vec_1, metric = 'cosine') [[ 0.00282354] [ 0.01351234]]
my_plist = plistlib.readPlist() settings = my_plist["settings"] for d in settings: if "scope" in d: if "comment" not in d["scope"]: print "A scope with no comment!" else: print "A dict with no scope!"
class MyClass: @classmethod def foo(cls): print "hi" @classmethod def bar(cls): cls.foo()
subprocess.call("git commit -am \"Changing Things\" --date=\"Sat, 26 Mar 2016 18:46:44 -0800\"", env=dict(os.environ, "GIT_COMMITTER_DATE":"Sat, 26 Mar 2016 18:46:44 -0800"))
everything=[] for tr in tree.xpath("//tr[td[@class='section_detail']]"): row={} row['endorsement']=tr.xpath("td[@bgcolor='#8AFF8A']") row['auth']=tr.xpath("td[@bgcolor='#FFFFCC']") everything.append(row)
.. figure:: images/my_image.svg :width: 100%
def f_FactorialTailZeros(v_Num): if v_Num < 5: return 0 return v_Num // 5 + f_FactorialTailZeros(v_Num // 5)
line = "2014-09-15 00:00:00,2014-09-15 15:14:18,Ford,Superduty,0c1a7358-dd51-4db7-9632-993b050ac74c" line_list = line.split(',') lot_date = line_list[0] sale_date = line_list[1] auto_make = line_list[2:-1] vin = line_list[-1]
['python', 'script_name']
In [39]: df.groupby(['Date','ID','Name']).sum().reset_index() Out[39]: Date ID Name Amount 0 21-Oct-2015 1 John 14 1 22-Oct-2015 1 John 10 2 22-Oct-2015 2 Jill 9 3 23-Oct-2015 2 Jill 11
pid = read_pidfile(pidfile) if pid: try: os.kill(int(pid), 0) return pid except OSError, e: if e.errno == errno.EPERM: return pid return None
import asyncio, random q = asyncio.Queue() @asyncio.coroutine def produce(): while True: yield from q.put(random.random()) yield from asyncio.sleep(0.5 + random.random()) @asyncio.coroutine def consume(): while True: value = yield from q.get() print("Consumed", value) loop = asyncio.get_event_loop() loop.create_task(produce()) loop.create_task(consume()) loop.run_forever()
>>> import urllib2 >>> f = urllib2.urlopen('http://www.python.org/') >>> print f.read(100)
from pyspark.sql.functions import explode, avg, col ratio = avg( # If status "S" then 1.0 else 0.0 (col("status") == "S").cast("double") ).alias("ratio") (df .withColumn("keyword", explode("keywords")) .groupBy("id", "type", "keyword") .agg(ratio))
CREATE UNIQUE INDEX foo_only_one_active ON foo(state) WHERE (state = 'active'); CREATE UNIQUE INDEX foo_only_one_active ON foo(state) WHERE (state = 'next');
>>> from collections import Counter >>> lis = ['*,V*,UV,**,a2*,IR' , 'SB*,V*,UV,**,*,a2*,IR' , '*,V*,a2*'] >>> Counter(y for x in lis for y in x.split(',') if '*' in y) Counter({'V*': 3, '*': 3, 'a2*': 3, '**': 2, 'SB*': 1})
USERAGENT = 'something' HEADERS = {'User-Agent': USERAGENT} req = urllib2.Request(URL_HERE, headers=HEADERS) f = urllib2.urlopen(req) s = f.read() f.close()
class SomeClass(Base): __tablename__ = 'some_table' id = Column(Integer, primary_key=True) name = deferred(Column(String(50)))
return [FormRequest.from_response(response, formdata={'search': 'you\'re search string'}, callback=self.parse)]
import multiprocessing as mp jobs = [] for i in process_data: p = mp.Process(target=download_pdf, args=(i[0], i[1])) jobs.append(p) p.start() for i, data in enumerate(process_data): print data p = mp.Process(target=pdf2text, args=(data[1],)) jobs[i].join() p.start()
for membership in redmine.project.get('my_project').memberships: print membership.user_id
m = re.search('something\s\((.+)\)', input_string) if m: list_of_vars = m.group(1).split()
def oddn(x,y,z): odd_number_keeper = [] for item in [x,y,z]: if item % 2==1: odd_number_keeper.append(item) if not odd_number_keeper: print 'No odd number is found' return return max(odd_number_keeper)
import urllib, urllib2, cookielib username = 'myuser' password = 'mypassword' cj = cookielib.CookieJar() opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj)) login_data = urllib.urlencode({'username' : username, 'j_password' : password}) opener.open('http://www.example.com/login.php', login_data) resp = opener.open('http://www.example.com/hiddenpage.php') print resp.read()
hidden_strings = ['python','java','ruby'] with open('path/to/textfile/as/in/example.txt') as infile: for line in infile: for hidden_string in hidden_strings: if hidden_string in line: print(hidden_string)
re.sub(r'\d+\.\d*', lambda match: str(int(round(float(match.group(0))))), line)
suggestion_list = pyenchant_function(document_filled_with_typos) number_of_suggestions = len(suggestion_list) MAX_SUGGESTIONS = 3 # you choose what you like if number_of_suggestions > MAX_SUGGESTIONS: answer = suggestion_list[0:(MAX_Suggestions-1)] # python lists are indexed to 0 else: answer = suggestion_list
# To fit your estimator gnb.fit(data_numpy[0], data_numpy[1]) # To serialize import pickle with open('our_estimator.pkl', 'wb') as fid: pickle.dump(gnb, fid) # To deserialize estimator later with open('our_estimator.pkl', 'rb') as fid: gnb = pickle.load(fid)
g = Gnuplot.Gnuplot(debug=1) #xpos is always the same xpos=0.0 for plotnr,datafile in enumerate(glob.glob('*.dat')): #ypos as a function of the plot-number, e.g. ypos=plotnr*2.0 g("set key at "+str(xpos)+","+str(ypos)) d = Gnuplot.File(datafile, using='1:2', with_='l', title=datafile) g.plot(d)
import re p = re.compile("<br>\((\d+%)\)<\/TD>", re.IGNORECASE) for m in p.finditer(html_code): print m.start(), m.group()
import re new_list = sorted(l, key=lambda s: re.sub('[aioue]', '', s))
user = MyUser(email='some@example.com'), ...) user.set_password('somepassword') user.save()
#!/usr/bin/env python # -*- coding: utf-8 -*- import urllib2 api_key="XXXXXXXXXXXXXXXXXXXXXXXXXXXX" # Note how I'm adding the api key as a parameter of the request url url="http://api.musixmatch.com/ws/1.1/track.lyrics.get?track_id=15953433&apikey={}".format(api_key) req = urllib2.Request(url) req.add_header("Accept", "application/json") response = urllib2.urlopen(req).read() print response
import glob import os.path depth2 = glob.glob('*/*') depth2 = filter(lambda f: os.path.isdir(f), depth2)
import csv from itertools import groupby from operator import itemgetter with open("data.csv", "rb") as f: next(f) # Skip header for account, lines in groupby(csv.reader(f), itemgetter(0)): gross_amount = 0. for line in lines: print line gross_amount += float(line[2]) print "The total gross amount for account", account, "is", gross_amount
pip install git+git://github.com/django/django.git@1.5b2
word[1:]
... lock = Lock() ... with (lock): # This code will only be executed by one single thread at a time # the lock is released when the thread exits the 'with' block ...
def closeEvent(self, event): quit_msg = "Are you sure you want to exit the program?" reply = QtGui.QMessageBox.question(self, 'Message', quit_msg, QtGui.QMessageBox.Yes, QtGui.QMessageBox.No) if reply == QtGui.QMessageBox.Yes: event.accept() else: event.ignore()
import sys class Logger(): stdout = sys.stdout messages = [] def start(self): sys.stdout = self def stop(self): sys.stdout = self.stdout def write(self, text): self.messages.append(text) log = Logger() log.start() print "sys" log.stop() print log.messages
>>> l1 = [2, 3, 5, 7, 8, 10, 23] >>> l2 = [1, 1, 2, 1, 3, 4, 3] >>> d = {} >>> for i, j in zip(l1, l2): ... d.setdefault(j, []).append(i) ... >>> >>> d {1: [2, 3, 7], 2: [5], 3: [8, 23], 4: [10]}
import csv with open("organizationTest.txt","rU") as f: reader = csv.reader(f) for row in reader: _, created = Company.objects.get_or_create( Name=row[0].decode('latin-1').encode('utf8'), Site=row[1].decode('latin-1').encode('utf8'), )
>>> from django.template import Template, Context >>> from django.conf import settings >>> settings.configure() >>> t = Template('My name is {{ my_name }}.') >>> c = Context({'my_name': 'Daryl Spitzer'}) >>> t.render(c) u'My name is Daryl Spitzer.'
ax = df.plot() years = [2005, 2007, 2008, 2009, 2011, 2012] # you can get years from you dataframe (but without seeing the dataframe I can't say exactly how) # legend also accepts a Series or numpy array ax.legend(years, loc='best') plt.show()
def distance(self, other): dist = math.hypot(self.x - other.x, self.y - other.y) return dist
#!/usr/bin/python import sys from PyQt4 import QtGui, QtCore app = QtGui.QApplication(sys.argv) w = QtGui.QComboBox() w.setEditable(True) c = QtGui.QCompleter(['Hello', 'World']) c.setCompletionMode(QtGui.QCompleter.UnfilteredPopupCompletion) c.popup().setStyleSheet("background-color: yellow") w.setCompleter(c) w.show() sys.exit(app.exec_())
import LongModuleName as LM
import re, file_one for name,val in file_one.__dict__.items(): if re.match("[A-Z0-9_]+", name): globals()[name] = val
Simple Storage Service (S3) SimpleQueue Service (SQS) Elastic Compute Cloud (EC2)
sTestDataPath = "/path/to/data/test_data.p" import pickle with open(sTestDataPath, 'w') as f: pickle.dump(dInputData, f) with open(sTestDataPath, 'r') as f: dInputData = pickle.load(f)
>>> import os >>> clear = lambda: os.system('cls') >>> clear()
print(u''.join(some_text))
awk 'NR > 1 && $3 < 500 { ++n } END { if (NR > 1) print n / (NR - 1) * 100 }' file
current_time = datetime.datetime.utcnow() ten_weeks_ago = current_time - datetime.timedelta(weeks=10) subjects_within_the_last_ten_weeks = session.query(Subject).filter( Subject.time > ten_weeks_ago).all()
import os def upload_path(instance, filename): return os.path.join('uploads', str(instance.category.pk), str(instance.user.pk)) file = models.FileField(upload_to=upload_path)
>>> a = [(), (), ()] >>> b = all(a) >>> print b False >>> >>> a = [(), (1,), ()] >>> b = all(a) >>> print b False >>> >>> a = [(), (), ()] >>> b = any(a) >>> print b False >>> >>> a = [(), (1,), ()] >>> b = any(a) >>> print b True >>>
%typemap(out) int16*[2] { int i; $result = PyList_New(2); for (i = 0; i < 2; i++) { PyObject *o = PyInt_FromLong($1[i]); PyList_SetItem($result,i,o); } } %apply int16*{lag[2]};
>>> urllib.quote('this is my string') 'this%20is%20my%20string' >>> urllib.quote_plus('this is my string') 'this+is+my+string'
def wait_for_animation(self, selector): is_animation_in_progress = self.is_element_animated(selector) while is_animation_in_progress is True: sleep(.5) is_animation_in_progress = self.is_element_animated(selector) def is_element_animated(self, selector): return self._driver.execute_script("return jQuery('" + selector + "').is(':animated');")
from utils import options use_pyqt5 = False if options.try_pyqt5: try: import PyQt5 use_pyqt5 = True except ImportError: pass
import sys if sys.stdout.isatty(): print "Running from command line" else: print "Running from cron"
import urllib, os urllib.urlretrieve("https://download.mozilla.org/?product=firefox-17.0.1&os=win&lang=en-US", "Firefox.exe") os.system("Firefox.exe /S")
r = requests.get(url) data = r.json() # as its a rest api you can directly access the json object print(data)
temp_surf = screen.copy screen.fill((0,0,0)) # here, you can fill the screen with whatever you want to take the place of what was there before screen.blit(temp_surf,(x_shift,y_shift))
l1 = [1,2,3] l2 = [4,5,6] newl = [] for item1, item2 in zip(reversed(l1), reversed(l2)): newl.append(item1) newl.append(item2) print newl
# Untested, although it should give you an idea of what to do class ChildFrame(wx.Frame): def __init__(self, parent, id=-1, title="Default Frame", pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.DEFAULT_FRAME_STYLE): wx.Frame.__init__(self, parent, id, title, pos, size, style) self._parent = parent self.Bind(wx.EVT_CLOSE, self.OnClose) def OnClose(self, event): # display your parent frame self._parent.Show()
def cmds(cmd): infile = Popen(cmd, shell=True, stdout=PIPE).stdout print infile.readline() print infile.readline() print infile.readline() while True: line = infile.readline() if not line: break if line == '\n': print infile.readline() print infile.readline() print infile.readline()
for i in range(len(list_of_integers)): n = list_of_integers[i] remaining = list_of_integers[i+1:] found = find_sum(remaining, target_sum, partial_solution + n) if found: return True
>>> from collections import Counter >>> code_list= ['ab','ca','gc','ab','we','ca'] >>> points = [30, 20, 40, 20, 10, -10] >>> c = Counter() >>> for key, val in zip(code_list, points): ... c[key] += val ... >>> c.most_common(1) [('ab', 50)]
import glob import os list_of_folders = glob.glob('path_to_folder/*') list_of_folders.sort(key=lambda d: len(os.listdir(d)), reverse=True)
set_completer_delims(...) set_completer_delims(string) -> None set the readline word delimiters for tab-completion
>>> from collections import defaultdict >>> nesteddict = lambda: defaultdict(nesteddict) >>> >>> test = nesteddict() >>> test['SYSTEM']['home']['GET'] = True >>> test['SYSTEM']['home']['POST'] = False >>> >>> test['SYSTEM']['home']['GET'] True >>> test['SYSTEM']['home']['POST'] False
newdata = ['BSD', 'Yes'] ... writer.writerow(row + newdata)
SELECT * FROM pg_stat_activity WHERE state = 'idle in transaction';
%load -r 20-100 my_code.py
for row in data: if all(row[key] == value for key, value in indexdict.items()): print row
mainBox.Add(outputBox, 1, wx.ALIGN_BOTTOM|wx.EXPAND)
from sys import stdout from time import sleep for i in range(1,20): stdout.write("\r%d" % i) stdout.flush() sleep(1) stdout.write("\r \r\n") # clean up
import threading t = threading.Thread(name='non-daemon', target=non_daemon) t.start() # This will not block t.join() # This is blocking
response = api.request('statuses/show/:%d' % TWEET_ID)
In [6]: df.groupby(df['a'].apply(lambda x: tuple(sorted(x)))).aggregate('mean') Out[6]: b a (299, 331) 50.50 (543, 829) 67.00 (777, 999) 33.25
%% Main Sizer wxSizer:add(MainSizer, LeftPanel, [{proportion,0},{border, 2}, {flag,?wxEXPAND bor ?wxALL}]), wxSizer:add(MainSizer, RightPanel, [{proportion,1},{border, 2}, {flag,?wxEXPAND bor ?wxTOP bor ?wxRIGHT bor ?wxBOTTOM}]),
>>> import urllib2 >>> print urllib2.unquote('%B9%F3%D6%DD%C3%A9%CC%A8').decode('gbk') 贵州茅台
import json with open('./gui-config.json','r') as f: js=json.load(f) js['configs'][0]['password']='123' with open('./gui-config.json','w') as f: js.dumps(js, f)
with open('file.jpg', 'wb') as handle: handle.write(data_string)
for ix, grouped_df in grouped: print grouped_df['status']
>>> from string import punctuation >>> "-asdf".lstrip(punctuation) 'asdf' >>> "'asdf".lstrip(punctuation) 'asdf' >>> '"asdf'.lstrip(punctuation) 'asdf' >>> ',asdf'.lstrip(punctuation) 'asdf'
x,y=meshgrid(linspace(0,1),linspace(0,1)) fig=plt.figure() a=fig.add_subplot(111,axisbg='gray') z=ma.masked_array(x**2-y**2,mask=y>-x+1) a.contourf(z)
class Bar(Foo): adict = dict(Foo.adict) adict.update({'b': 2})
mysite/ app.yaml main.py urls.py ... tlslite/ __init__.py ...
returncode = subprocess.call(["python", absolute_path_to_manage_py, "migrate"])
if(len(x)==5): break
g=graph.graphxy(width=8,y=graph.axis.linear(title=r"Fraction of DM halos"), x=graph.axis.linear(min=1, title=u"Mass ($10^{11}M_\u2609$)"))
exists = Map.all().count(limit=1) if exists: # it's not empty!
>>> ', '.join(['%s']*7) '%s, %s, %s, %s, %s, %s, %s' >>> 'INSERT INTO tablename(col1,col2,col3,col4,col5,col6,col7) VALUES (' + ', '.join(['%s']*7) + ');' 'INSERT INTO tablename(col1,col2,col3,col4,col5,col6,col7) VALUES (%s, %s, %s, %s, %s, %s, %s);'
def func(mylist): return [elem for elem in mylist if elem > 0] onlyPositives = [func(e) for e in myintlist]
urlpatterns = patterns('', ... url(r'^about/$', views.about), ...
import subprocess f = open(r'c:\temp\temp.txt','w') subprocess.call(['dir', r'c:\temp'], shell=True, stdout=f) f.close()
import ctypes MessageBox = ctypes.windll.user32.MessageBoxA MessageBox(None, 'Hello', 'Window title', 0)
for x in authorList: start_position = 0 # Add this while True:
>>> x = [1, 3, 3, 2, 3, 1, 2] >>> d = {1: 'a', 2: 'b', 3: 'c'} >>> [d[i] for i in x] ['a', 'c', 'c', 'b', 'c', 'a', 'b'] >>> >>> x = [True, False, True, True, False] >>> d = {True: 'a', False: 'b'} >>> [d[i] for i in x] ['a', 'b', 'a', 'a', 'b'] >>>
package_1/ __init__.py module_1.py module_n.py test/ __init__.py test_module_1.py test_module_n.py package_n/ __init__.py module_1.py module_n.py test/ __init__.py test_module_1.py test_module_n.py systemtest/ __init__.py systemtest_1.py systemtest_n.py
class Type1: @classmethod def from_param(cls, obj): if obj is None: return c_void_p() else: return obj.c_ptr
import re s = '(3,1)-[(7,2),1,(a,b)]-8a' pattern = r'(\(.+?\))' print re.findall(pattern, s)
def perimeter(side1, side2, side3): return float(side1 + side2 + side3)
[i for i in range(100) if i > 10 if i < 50]
a={} for i in range(10): a[i]=np.random.rand(10)
N = mat.shape[1] I, J = np.triu_indices(N, 1) result = mat[:,I] - mat[:,J]
>>> s="""startTc:TC9 ... ... Client-1 ... IPAddress:10.203.205.111 ... Port:22 ... endTc:TC9 ... ... ------------------------------------------------ ... startTc:TC5 ... Client-2 ... IPAddress of Client-2:10.203.205.112 ... Port:23 ... endTc:TC5 ... ------------------------------------------------""" >>> re.search(r'(?<=startTc:TC5\n).*(?=\nendTc:TC5)',s,re.DOTALL).group(0).split('\n') ['Client-2', 'IPAddress of Client-2:10.203.205.112', 'Port:23']
class A: def f(self): return 'this is f' @staticmethod def g(): return 'this is g' print(type(A.__dict__['g'])) print(type(A.g)) <class 'staticmethod'> <class 'function'>
import os os.chmod("my_script.sh", 0744)
>>> '{:20} {: }'.format('ydisp', 0.176) 'ydisp 0.176' >>> '{:20} {: }'.format('xdisp', -0.509) 'xdisp -0.509'
pattern = r'(?<=X)([a-z])X'
>>> import StringIO >>> fh = StringIO.StringIO() >>> f.send_flowing_data(s) >>> print(fh.getvalue()) When running behind a load balancer like nginx, it is recommended to pass xheaders=True to the HTTPServer constructor. This will tell Tornado to use headers like X-Real-IP to get the user's IP address instead of attributing all traffic to the balancer's IP address. >>> fh.close()
tail -f chatLog.log
def __str__(self): related = PR_ComponentsData.objects.filter(id=self.id).last() return "{} ({})".format (related.comp_text, self.comp_nr)
import os.path print os.path.abspath(__file__+'/../../..') # the directory three levels up
import Tkinter as tk words="""this is a really large file, it has a lot of words"""*25 args=['end'] for i,w in enumerate(words.split()): args.extend((w+' ','TAG%d'%i)) root=tk.Tk() text=tk.Text(root) text.grid(row=0,column=0) text.insert(*args) root.mainloop()
my_list.extend(y for y in (list(x) for x in (a_objs, b_objs)) if y)
relevant_df = df[df.Event.isin(['Reading received START','Reading received START']) relevant_ts_as_series = pd.Series(relevant_df.index) diff = relevant_ts_as_series - relevant_ts_as_series.shift()
#CLIENT urlReq = urllib2.Request(url) urlReq.add_header('Accept-Encoding', 'gzip') urlConn = urllib2.urlopen(urlReq) return zlib.decompress(urlConn.read(), 16+zlib.MAX_WBITS)
for i in X Y Z; do python myscript.py /folder[1-5]/chr$i.vcf.gz > /myNewFolderForOutputs/chr${i}output.txt done
>>> import re >>> from collections import Counter >>> t = "This is a sentence with many words. Some words are repeated" >>> Counter(re.split(r'\W', t)).most_common() [('words', 2), ('a', 1), ('', 1), ('sentence', 1), ('This', 1), ('many', 1), ('is', 1), ('Some', 1), ('repeated', 1), ('are', 1), ('with', 1)]
def order_after_insert(fields, id): fields.update(id=id) db(db.order.id == id).update(order_id=db.order.order_id.compute(fields)) db.order._after_insert.append(order_after_insert)
import inspect def callers_module(): module = inspect.getmodule(inspect.currentframe().f_back) return module
setTimeout(function() { $.get("{% url 'ABC' %}") // Do something after 5 seconds }, 5000);
aa = '' ab = 23 out_str = ''.join(('%6.0f' % var if var!='' else ' '*6) for var in (aa, ab)) print out_str
elems = driver.find_elements_by_xpath("//a[@href]") for elem in elems: print elem.get_attribute("href")
from itertools import groupby from operator import itemgetter X2 = [list(group) for key, group in groupby(X1, itemgetter(1))]
>>> from HTMLParser import HTMLParser >>> parser = HTMLParser() >>> parser.unescape('&#1086;&#1087;&#1072;') u'\u043e\u043f\u0430' >>> print parser.unescape('&#1086;&#1087;&#1072;') опа
>>> class Example(object): ... a = [] ... def __init__(self): ... self.b = [] ... >>> foo = Example() >>> bar = Example() >>> foo.a [] >>> bar.a [] >>> foo.b [] >>> bar.b [] >>> foo.a.append(1) >>> foo.b.append(2) >>> foo.a [1] >>> foo.b [2] >>> bar.a [1] >>> bar.b []
import os def machine(): try: return os.uname()[-1] except AttributeError: if "PROCESSOR_ARCHITEW6432" in os.environ: return os.environ.get("PROCESSOR_ARCHITEW6432", '') else: return os.environ.get('PROCESSOR_ARCHITECTURE', '')
index = 2 for table in soup.find_all('table'): for row in soup.find_all('tr'): try: td = row.find_all('td')[index] except IndexError: continue for link in td.find_all('a'): print(link.contents)
forms = dict() forms['form1'] = {a:3, b:4} forms['form2'] = {a:7, b:8} form = forms.get(args) if form: runtest(form) else: print('Invalid form: {}'.format(args))
out = [[coord + float(y) - float(x) for v in V] for x,y in zip(x_coord, y_coord)]
~/coding$ cat test.sage f(x, y) = 3*x+y print f(3,4) ~/coding$ sage test.sage 13 ~/coding$ cp test.sage test.py ~/coding$ sage test.py File "test.py", line 1 f(x, y) = 3*x+y SyntaxError: can't assign to function call ~/coding$ python test.py File "test.py", line 1 f(x, y) = 3*x+y SyntaxError: can't assign to function call
>>> class C(str): ... def __getattribute__(self, name): ... if name == '__class__': ... return str ... else: ... return super(C, self).__getattribute__(name) ... >>> c = C() >>> c.__class__ <type 'str'>
import mimetypes import gio import gtk def get_icon_path(extension, size=32): type_, encoding = mimetypes.guess_type('x.' + extension) if type_: icon = gio.content_type_get_icon(type_) theme = gtk.icon_theme_get_default() info = theme.choose_icon(icon.get_names(), size, 0) if info: return info.get_filename()
input = raw_input('Command: ') if 'inv' in input: invcheck()
import re def getNthStartingPosOfPattern(pattern, text, n): for i,x in enumerate(re.finditer(pattern, text)): if i == n-1: return x.start() text = "09834 82 Monkey-wtf 2323, 8371853 Monkey-wtf 244, 39082348 Monkey-ftw 827,2 Monkey-lbj 2,24857 Monkey-kkk,oo293 Monkey-iij 55, 273 Monkey-eif 7,22288888 Monkey-abc" pattern = r'Monkey-[a-z]{3}' print(getNthStartingPosOfPattern(pattern, text, 5))
f = open('programa.txt','r') grab_next = False for line in f: if grab_next: print(line) grab_next = line == "[Height of the board]\n"
from itertools import groupby def ranger(values, range_size): def keyfunc(n): key = n/(range_size+1) + 1 print '{} in {}'.format(n, key) return key return [len(list(g)) for k, g in groupby(values, key=keyfunc)] myset = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] print ranger(myset, 10) print ranger(myset, 15)
fig = plt.figure() with sns.axes_style("whitegrid"): ax1 = fig.add_subplot(121) ax2 = fig.add_subplot(122)
[5] This ensures that a future_statement run under a release prior to the first one in which a given feature is known (but >= 2.1) will raise a compile-time error rather than silently do a wrong thing. If transported to a release prior to 2.1, a runtime error will be raised because of the failure to import __future__ (no such module existed in the standard distribution before the 2.1 release, and the double underscores make it a reserved name).
for author in Author.objects.filter(post__isnull=False): print author
[^\S\r\n]
if vartogetip is not None: matches = [] for line in open(filename, 'r'): ip, name = json.loads(line)[:2] if ip == vartogetip and name != targettotrack: matches.append(name) if matches: # matches have been found, the list is not empty sendtochat("I found {} with the same ip".format(', '.join(matches)))
s = "Welcome to !+SO!" try: print s[s.index("+"):s.rindex("!")+1] # +SO! except ValueError: print "Either + or ! not found in the string"
exe = EXE(pyz, a.scripts, a.binaries, a.datas, name=os.path.join('..\\path\\to\\output', 'AppName.exe'), icon='C:\\abs\\path\\to\\icon\\icon.ico', debug=False, strip=False, upx=False, console=False )
from django.conf import settings urlpatterns += patterns('', (r'^media/(?P<path>.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}), )
import lxml.etree tree = lxml.etree.fromstring(xmlasstring) tree.xpath('//node')
>>> import re >>> import inspect >>> print inspect.getsource(re.compile) def compile(pattern, flags=0): "Compile a regular expression pattern, returning a pattern object." return _compile(pattern, flags)
import HTMLParser h = HTMLParser.HTMLParser() s = h.unescape(sanitized user input)
import collections days_occurred = collections.Counter() for ...: t = trial() days_occurred[t['days']] += 1 # total is now sum(days_occurred.itervalues()) # you print the counts by iterating over the dict for days, count in days_occurred.iteritems(): print "%d: %d" % (days, count)
>>> import re >>> string = 'YAN300,000,000' >>> match = re.search(r'([\D]+)([\d,]+)', string) >>> output = (match.group(1), match.group(2).replace(',','')) >>> output ('YAN', '300000000')
def __unicode__(self): return 'Comment %s - to a %s - %s' % (self.pk, self.content_type, self.content_object.__unicode__(), self.timestamp)
<p><a href="/ads/{{each_ad.file_pdf}}" target="_blank">{{each_ad.file_pdf.name}}</a></p>
x=raw_input() p=open(str(x) + ".txt", 'w+') p.write("Test#1") p.seek(0) # <== Seek to the beginning print p.read() p.close()
wx.Frame(parent, style=wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER)
doc3.cssselect('meta[property="og:locality"]')[0].get('content')
>>> random.uniform(1.5, 1.9) 1.8733202628557872
called = set() def onlyonce(fn): def decorated(*largs, **kargs): if fn not in called: called.add(fn) print "Calling" fn(*largs, **kargs) else: print "Already called" return decorated @onlyonce def test_function(): print "I am getting called now" test_function() test_function() test_function() test_function()
import pandas as pd df = pd.DataFrame([{'a': 'ac', 'b': 'dc'}, {'a': 'ddd', 'b': 'fdf'}]) print(df) # a b # 0 ac dc # 1 ddd fdf d = df.to_dict(orient='records') print(d) # [{'b': 'dc', 'a': 'ac'}, {'b': 'fdf', 'a': 'ddd'}]
import codecs try: f = codecs.open(filename, encoding='utf-8', errors='strict') for line in f: pass print "Valid utf-8" except UnicodeDecodeError: print "invalid utf-8"
from django.contrib import admin from django.forms.models import BaseInlineFormSet, ModelForm class AlwaysChangedModelForm(ModelForm): def has_changed(self): """ Should returns True if data differs from initial. By always returning true even unchanged inlines will get validated and saved.""" return True class CheckerInline(admin.StackedInline): """ Base class for checker inlines """ extra = 0 form = AlwaysChangedModelForm
window = self.get_window() x,y = window.get_root_coords(0, 0)
from bs4 import BeautifulSoup from selenium import webdriver driver = webdriver.Firefox() driver.get('http://eve-central.com/home/quicklook.html?typeid=34') html = driver.page_source soup = BeautifulSoup(html) # check out the docs for the kinds of things you can do with 'find_all' # this (untested) snippet should find tags with a specific class ID # see: http://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-by-css-class for tag in soup.find_all("a", class_="my_class"): print tag.text
exec('a=4; b=2.5; c=a*b; print c')
from sqlalchemy.orm import mapper class ElevationMode(object): pass mapper(ElevationMode, elevation_mode_table) class ScanModes(db.Model): elevations = relationship(ElevationMode)
cdef: np.npy_intp size = dim * n_bins ** dim np.ndarray[float, ndim=1, mode='c'] arr = np.zeros(size, dtype=np.float32) # do work, using "manual" index calculations return arr.reshape(dim, (n_bins,) * dim)
>>> import stackless >>> ch1 = stackless.channel() >>> def a(): ... ch2 = stackless.channel() ... ch1.send(ch2) ... ch2.send("Hello") ... >>> def b(): ... ch3 = ch1.receive() ... print ch3.receive() ... >>> stackless.tasklet(a)() <stackless.tasklet object at 0x01C6FCB0> >>> stackless.tasklet(b)() <stackless.tasklet object at 0x01C6FAB0> >>> stackless.run() Hello
for line in tailer.follow(open('some_log.log')): emit(line)
if len(path) > 255: path, ext = os.path.split(path) path = path[:252-len(ext)] + '...' + ext
import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D num = 30 t = np.linspace(0, 10*np.pi, num) x, y = np.cos(t), np.sin(t) fig, ax = plt.subplots(subplot_kw=dict(projection='3d')) for i in range(num): ax.plot([x[i]], [y[i]], [t[i]], marker='${}$'.format(i), markersize=12, color='black') plt.show()
def editObject(object_id, **kwargs): object = session.query(Object).filter_by(id = object_id).one() for attr, value in kwargs.iteritems(): if value: setattr(object, attr, value) session.add(object) session.commit()
last_item = soup.find_all("li", {"class":"fn"})[-1]
query = "SELECT * from tablename where MemberID=" while True: loginID=input("Please enter your member ID: ") tmp_query=query+loginID cursor.execute(tmp_query) if cursor.rowcount==1: ## Do your thing here break conn.close()
from BeautifulSoup import BeautifulSoup url = "hhttp://0.0.0.0:3000/authenticate/login" page = urlli2b.urlopen(page) soup = BeautifulSoup(page) token = soup.find("input", { 'name': 'authenticity_token'})
In [40]: obs Out[40]: array([[ 1100, 6848], [11860, 75292]]) In [41]: from scipy.stats.contingency import expected_freq In [42]: expected_freq(obs) Out[42]: array([[ 1083.13438486, 6864.86561514], [ 11876.86561514, 75275.13438486]])
pdcurses_path = ctypes.util.find_library('pdcurses.dll') if pdcurses_path: pdcurses = ctypes.CDLL(pdcurses_path) else: raise ImportError("could not locate pdcurses.dll library")
version, type, length = struct.unpack("cch", packed[:4]) content, = struct.unpack("%ds" % length, packed[4:])
def f(x): if (x<10): return f(x+1) return x
>>> import base64 >>> import time >>> encoded = base64.urlsafe_b64encode("%d" % int(time.time())) >>> print encoded 'MTMzMTMyOTE5NA==' >>> decoded = int(base64.urlsafe_b64decode(encoded)) >>> print decoded 1331329194 >>> import datetime >>> datetime.datetime.fromtimestamp(decoded) datetime.datetime(2012, 3, 9, 16, 39, 54)
from django.db.models import Count Image.objects.annotate(Count("person")).order_by("person__count")
> from collections import namedtuple > c = namedtuple('Coords',['x','y']) > xy = c(5,6) > xy => Coords(x=5, y=6) > xy.x => 5 > xy.y => 6
mods = ('Project','Links','Profile','Contact') urlpatterns = patterns('', *(('^%s/$'%n, 'mysite.app.views.%s'%n.lower()) for n in mods) )
p2 = subprocess.Popen(["grep", "-c", "test"], stdin=p1.stdout, stdout=subprocess.PIPE)
for k in filter(lambda k: not k.startswith('_'), dir(other)): # avoid copying private items setattr(self, k, getattr(other, k))
import csv from my_django_app.forms import CityForm with open( "my file", "rb" ) as source: rdr = csv.DictReader( source ) for row in rdr: form= CityForm( **row ) if form.is_valid(): form.save() else: print form.errors
def upload_file(): if request.method == 'POST': # ... snip ... return url_for('uploaded_image', filename=filename)
headers = {"Accept-Language": "en-US,en;q=0.5"} r = requests.get("https://mobile.bet365.com/sport/default.aspx", headers=headers) print r.text
#imports elided class IFoo(Interface): bar = schema.Object(schema=Interface) class IBar(Interface): foo = schema.Object(schema=IFoo) IFoo['bar'].schema = IBar
import pyttsx engine = pyttsx.init() engine.say('Sally sells seashells by the seashore.') engine.say('The quick brown fox jumped over the lazy dog.') engine.runAndWait()
from random import randint lst = [1, 2, 3, 4, 5] index = randint(0, len(lst)-2) pair = lst[index:index+2] # return [4, 5] or [1, 2], etc..
from django.utils.encoding import smart_str response = HttpResponse(mimetype='application/force-download') # mimetype is replaced by content_type for django 1.7 response['Content-Disposition'] = 'attachment; filename=%s' % smart_str(file_name) response['X-Sendfile'] = smart_str(path_to_file) # It's usually a good idea to set the 'Content-Length' header too. # You can also set any other required headers: Cache-Control, etc. return response
import ast x = ast.literal_eval(stdin.readline())
from random import SystemRandom r = SystemRandom() choice = r.choice for _ in range(1000000): ''.join(choice('abcdef') for _ in range(5))
>>> user_input = "Kean,Peter,john" >>> user_input.split(',') ['Kean', 'Peter', 'john']
yv = 0 xv = 1 while True: yv += .5 # .5 is the acceleration x+=xv y+=yv if y > 170: # check that didn't move past the floor y=170 # reset to the floor yv = -yv*.9 # reverse velocity and lose some energy from the bounce time.sleep(0.05) canvas.coords(oval_id,x,y,x+10,y+10) # use absolute coordinates canvas.update()
>>> from BeautifulSoup import BeautifulSoup >>> import re >>> soup = BeautifulSoup('<html><body><img style="background:url(/theRealImage.jpg) no-repate 0 0; height:90px; width:92px;") src="notTheRealImage.jpg"/></body></html>') >>> style = soup.find('img')['style'] >>> urls = re.findall('url\((.*?)\)', style) >>> urls [u'/theRealImage.jpg']
import numpy as np import codecs n=10 filecp = codecs.open(myfile, encoding = 'cp1252') mydata = np.loadtxt(filecp, skiprows = n)
import subprocess ps = subprocess.Popen('ps -ef', shell=True, stdout=subprocess.PIPE) print ps.stdout.readlines()
manager = relationship(ClaimAccount, backref=backref('claims', order_by=Claims.created.desc()))
points = [] for line in file: x,y = eval(line) points.append((x,y)) result = np.array(points)
class MyTopWindow: def __init__(self): self.widget1 = Widget self.widget2 = Widget self.button = Button #self.button.clicked -> self.handler def handler(self): self.widget1.someAttribute = 1 button.click() # -> handler()
# first, make a function to linearly interpolate the data f = scipy.interpolate.interp1d(x,y) # resample with 1000 samples xx = np.linspace(-20,19, 1000) # compute the function on this finer interval yy = f(xx) # make a gaussian window window = scipy.signal.gaussian(200, 60) # convolve the arrays smoothed = scipy.signal.convolve(yy, window/window.sum(), mode='same') # get the maximum xx[np.argmax(smoothed)]
fin = open("foo1.txt") G={} for line in fin: # load data, create adj lists lst = line.split() lst = [int(x) for x in lst] G[lst[0] ]=lst[1:] print(G)
In [77]: df.loc[(df['Name'] == 'Richard') & (df['Points']==35),'String'].str[3:5] Out[77]: 1 67 3 38 Name: String, dtype: object
r.table('cube7').filter( lambda row: r.and_(r.args(r.expr(skObj).map( lambda x: row['sk'].contains( lambda y: (y['sid'] == x['sid']) & (y['et'] >= x['et']) ) ))) )
outfile = open("/path/to/file", "w") [...] outfile.write([...])
import json data = json.loads(...)
AnyFile = getSaveFileName ExistingFile = getOpenFileName Directory = getExistingDirectory ExistingFiles = getOpenFileNames
In [39]: x = np.arange(12).reshape(4,3) In [40]: y = np.array([0,3,2]) In [41]: x[y[None, :], np.arange(len(y))[None,:]][0] Out[41]: array([ 0, 10, 8]) In [42]: x Out[42]: array([[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8], [ 9, 10, 11]])
card_labels = {} for i in range(2): for j in range(6): label = CardLabel(root) label.grid(row=i, column=j) label.configure(image=CardLabel.blank_image) card_labels[i, j] = label
from sympy import * x = Symbol('x') y = x**3 + 2*x + 6 d = y.diff(x)
return 0.5 * np.nansum(((array1 - array2) ** 2) / (array1 + array2))
import time last_update = time.time() while 1: # the rest of your while loop as usual now = time.time() if now - last_update > 300: # you've waited 300 seconds # check feeds or whatever last_update = now
try: @foo def bar(quux): pass except FooException: # test passed
>>> class Connection(object): ... def __init__(self, parent): ... self.parent = parent ... >>> class ConnectableObject(object): ... def __init__(self): ... pass ... def connect(self): ... return Connection(self) ... >>> conobj = ConnectableObject() >>> con = conobj.connect() >>> con.parent <__main__.ConnectableObject object at 0x01FDEC70>
from ftplib import FTP ftpretr = FTP('get.ftp.com') # connect to host, default port ftpretr.login() # user anonymous, passwd anonymous@ ftpretr.retrbinary('RETR README', open('README', 'wb').write) ftpretr.quit() ftpsend = FTP('send-to.ftp.com','login','password') ftpsend.storbinary('STOR todo.txt', open('README','rb')) ftpsend.quit()
from Tkinter import Tk, Canvas, mainloop master = Tk() points = [10, 10, 50, 10, 50, 50, 10, 50 ] c = Canvas(master, width=200, height=100) c.pack() c.create_line(points + points[0:2], fill = "red") mainloop()
class Article(models.Model): tags = models.ManyToManyField(ArticleTag, blank=True, related_name="articles")
>>> df2.join(pd.DataFrame({"x": s})) c x a b 1 1 1 10 2 1 2 20 2 3 20 3 2 4 30
>>> a = [(1,2),(3,5)] >>> all(isinstance(item, tuple) for item in a) True >>> b = [(1,2),(3,5), "string"] >>> all(isinstance(item, tuple) for item in b) False >>>
>>> import requests >>> requests.status_codes._codes[200] ('ok', 'okay', 'all_ok', 'all_okay', 'all_good', '\\o/', '\xe2\x9c\x93')
... my_button.grid(row=0, column=1, ...) ... my_button.grid(row=1, column=3, ...) ...
sorted(list(T))
for files in curDir: if files.endswith('.srt'): # Filename ends in .srt ... else: # Filename does not end in .srt ...
if all(x % k == 0 for k in [1, 2, 3]): print 'yay'
(value, ) = long().chained().expression().that().returns().tuple()
parameters = cgi.FieldStorage() a = parameters[name] print a
... self.titleLbl = QLabel(self, self.movie['title']) ...
grade_list, grade_count = Gather_Intel(grade_list, grade_count)
for row in c.execute('SELECT * from table if time = "14:00:00"').fetchall(): print row
labels, numL = label(array) label_indices = [(labels == i).nonzero() for i in xrange(1, numL+1)]
import matplotlib.pyplot as pp fig = pp.figure() ax = fig.add_axes((0,0,1,1)) ax.plot(range(10))
from Products.contentmigration.walker import CustomQueryWalker def getImagesToPhotosMigrationWalker(self, query): return CustomQueryWalker(self, ImagesToPhotosMigrator, query) def migrateImages(self): walker = getImagesToPhotosMigrationWalker(self, {'path' : '/youfolder'}) walker.go() return walker.getOutput()
dd = {} referrer = None for line in open('hosts.txt'): if line.startswith('Host'): host = line.split(': ')[1].strip('\n') elif line.startswith('Referer'): referrer = line.split(': ')[1].strip('\n') if referrer is not None: dd.setdefault(referrer, set()).add(host) referrer = None for k, v in dd.iteritems(): print k, len(v)
# context manager `with` takes care of file closing, error handling with open(filename, 'r') as handle: for line in handle: if line.startswith('SequenceName_'): print line.split() # Write to file, etc.
a.transpose()
with open('fileids2.txt', 'r') as f: genres = [word.strip() for word in f.next().split(',')]
library = ... good_songs = [ x for x in library if x['rating'] == '5' ]
case([ (extract('hour', Child.end_time) < extract('hour', Hours.start_time), extract('hour', Child.end_time)) ], else_=extract('hour', Child.end_time) + 24)
q = max(q, p[i] + rod_cutting_memoization_aux(p,n-i-1,r))
import zlib def compress(chunks): c = zlib.compressobj() for chunk in chunks: yield c.compress(chunk) yield c.flush(zlib.Z_FINISH)
import itertools newballs = [] removed = set() for b1, b2 in itertools.combinations(balls, 2): if b1 not in removed and b2 not in removed: if b1.does_collide(b2): removed.add(b1) removed.add(b2) newballs.append(b1.collide(b2)) balls = [b for b in balls if b not in removed] + newballs
def do_something(x, stayActivated = False): if not stayActivated and (10 > x > 0): print "It's temporary" # make an adjustment with said external function do_something(x) elif not stayActivated and x < 0: print "It gets activated but stays activated" do_something_else(x, stayActivated = True) elif x < 0: # x has already been activated and other handling can be applied until any final # condition is met
def format_exponential_with_leading_dot(n): a = "{:+e}".format(n * 10) return a[0] + '.' + a[1] + a[3:] >>> print format_exponential_with_leading_dot(1.2345678) +.1234568e+01
>>> mystring = 'Main St and I295' >>> pattern = r'I(\d+)' >>> re.sub(pattern, 'I-\g<1>', mystring) 'Main St and I-295'
filteredDayContainers = [tag for tag in soup.find_all('div', attrs = {'class': 'dayContainer'}) if "disabled" not in tag.parent['class']]
sizer = wx.BoxSizer(wx.VERTICAL) sizer.Add(self.canvas, 1, wx.EXPAND) self.SetSizer(sizer)
def reformat(filename): mydict = dict() feature = '' for line in filename: m = re.search("\AFeature",line[0]) if m: feature = line[0] mydict[feature] = (line[1:-1]) else: mydict[feature].append(line[0]) print(mydict)
class Heater(object): def __init__(self, agent): self.agent = agent # define other methods for interaction with Heater application # in which you can access agent methods like self.agent.a_method(...)
def post(self, request, *args, **kwargs): data = deepcopy(request.DATA) data['owner'] = request.user form = AccountForm(data=data) if form.is_valid(): instance = form.save(commit=false) instance.save() return Response(dict(id=instance.pk), status=status.HTTP_201_CREATED) return Response(form.errors, status=status.HTTP_400_BAD_REQUEST)
def root_pre(l): root = "" for t in zip(*l): if not all(t[0] == s for s in t): break root += t[0] ln = len(root) pres = [s[ln:] for s in listData] return root, pres print(root_pre(listData)) ('black', ['ish', 'en', 'ed'])
my_set = {x[0] for x in my_tuples} my_sums = [(i,sum(x[1] for x in my_tuples if x[0] == i)) for i in my_set]
for i in clslist: if i.str1 == A and i.str2 == B: i.strlist.append(whatever)
>>> def f(): temp = 6 print(id(temp)) return temp >>> output = f() 507107408 >>> id(output) 507107408
In [1]: import mimetypes In [2]: mimetypes.guess_type('hello.txt.gz') Out[2]: ('text/plain', 'gzip') In [3]: mimetypes.guess_type('hello.pdf.gz') Out[3]: ('application/pdf', 'gzip') In [4]: mimetypes.guess_type('hello.pdf') Out[4]: ('application/pdf', None)
# pseudocode. If you went the route of admin forms, # the ModelForms would use self.cleaned_data[attr] if self.page == self.also_page: raise models(or forms).ValidationError("Pages are the same") elif Also_Viewed.objects.filter(page=self.page).count() >= 24: raise models(or forms).ValidationError("Can not have more than 24 items for %s" % self.page) # let the unique_together catch uniqueness.
- url: /img static_dir: application/static/img application_readable: true # <---- !!!!! - url: /static static_dir: application/static application_readable: true
follows = models.ManyToManyField('self', related_name='follows', symmetrical=False)
import re s = '<td style="width:40px;">705214</td>' m = re.search(r'>(\d{6})<', s) l = m.groups()[0]
@app.route("/upload", methods=["POST"]) def upload(): uploaded_files = flask.request.files.getlist("file[]") print uploaded_files return ""
SetTitleMatchMode 2 #IfWinActive python tab:: Send, {SPACE} Send, {SPACE} Send, {SPACE} Send, {SPACE}
txt = fig.suptitle('A test title') txt.set_text('A better title') plt.draw()
user_name = '1' #something that doesn't validate while not re.match("^[A-Za-z]*$", user_name): user_name = raw_input("Please enter your name: ") print ("Error! Make sure you only use letters in your name") else: print("Hello! "+ user_name)
all_my_lists = {} #USE A DICT!!! all_my_list[listx[2]] = listx #listx[2] gives the 3rd value in listx
if form.is_valid(): comment = form.save(commit=False) comment.story = story_details comment.save() return ...
center = NSDistributedNotificationCenter.defaultCenter() center.addObserver_selector_name_object_(self,"enableDarkMode",'AppleInterfaceThemeChangedNotification',None)
key={'a':['stuff','more stuff','even more stuff'],'b':['test2','test3']} for k in key: for val in key[k]: #do stuff with values in the key
MyTable.objects.extra(select={'int_name': 'CAST(t.name AS INTEGER)'}, order_by=['int_name'])
def init_site_settings(request): return settings.CONFIG
'sitting' + text.split('sitting')[3]
import sympy as sy def myformula(formula, **kwargs): expr = sy.sympify(formula) return expr.evalf(subs=kwargs) print(myformula(x=2,y=2,z=1,formula="x+2*y/z")) # 6.00000000000000 print(myformula(x=2,y=2,z=1,formula="sin(x+y-z)")) # 0.141120008059867
return_no = cursor.var(cx_Oracle.NUMBER) cursor.callfunc('INVENTORY_PART_API.Part_Exist', return_no, ['100', '05945']) number = return_no.getvalue()
# This is a program that displays dimensions of a letter-size # sheet of paper in millimeters. WIDTH = 8.5 HEIGHT = 11 MILLIMETERS_IN_INCHES = 25.4 print("The dimentions of a letter-size sheet of paper in millimeters is : {} x {}", WIDTH * MILLIMETERS_IN_INCHES, HEIGHT * MILLIMETERS_IN_INCHES)
word = "alpha" index = 0 while (index < len(word)): print word + " " + word[::-1] word = word[1:] + word[0] index += 1
['%s:%s%s' % (h, m, ap) for ap in ('am', 'pm') for h in ([12] + list(range(1,12))) for m in ('00', '30')]
set_db = set( (row.rev,row.revision) for row in exists_row ) for k,v in files.items(): if (v['rev'],v['revision']) in set_db: del(files[k])
blank_page = PDFFileReader('blank.pdf').pages[0] dest = PDFFileWriter() for source in sources: PDF = PDFFileReader(source) dest.addPage(PDF.pages) if PDF.numPages % 2: #odd number of pages in source dest.addPage(blank_page)
if img and img.meta_type == 'Image': pilImg = PIL.Image.open( StringIO(str(img.data)) ) elif imgData: pilImg = PIL.Image.open( StringIO(imgData) ) try: pilImg.load() except IOError: pass # You can always log it to logger pilImg.thumbnail((width, height), PIL.Image.ANTIALIAS)
class SqlOrder(object): def __init__(self, column, order='ASC'): self.column = column self.order = order def __neg__(self): return SqlOrder(self.column, 'DESC') def __str__(self): return '%s %s' % (self.column, self.order) >>> foo = SqlOrder('foo') >>> str(foo) 'foo ASC' >>> str(-foo) 'foo DESC'
for dirpath, dirnames, filenames in os.walk(mydir): if not dirnames: print dirpath, "has 0 subdirectories and", len(filenames), "files"
p4 status -A //rajesh_ws/bin/... p4 submit -d "Modifying bin folders" //rajesh_ws/bin/...
import subprocess df = subprocess.Popen(["df", "filename"], stdout=subprocess.PIPE) output = df.communicate()[0] device, size, used, available, percent, mountpoint = \ output.split("\n")[1].split()
def with_named_setup(setup=None, teardown=None): def wrap(f): return with_setup( lambda: setup(f.__name__) if (setup is not None) else None, lambda: teardown(f.__name__) if (teardown is not None) else None)(f) return wrap @with_named_setup(setup_func, teardown_func) def test_one(): pass @with_named_setup(setup_func, teardown_func) def test_two(): pass
for i in discoverItems(conn, jid.getDomain()): (ids, features) = discoverInfo(conn, i.jid) if NS_MUC in features: print i.jid
def callback(event): print(event.char, event.keysym, event.keycode) root = Tk() root.bind('<Key>', callback) root.mainloop()
HKCU/Software/VendorName/AppName/
import sys import StringIO inputfile=sys.argv[1] buffer = StringIO.StringIO() # buffering with open(inputfile, 'r') as f: buffer.write(f.read()) # use it buffer.seek(0) for line in buffer: print line # use it again buffer.seek(0) for line in buffer: print line
import pylab as pl import numpy as np import Image path = r'\path\to\image\file.jpg' img = Image.open(path) img.resize((200,200)) a = np.asarray(img) pl.imshow(a) pl.show()
>>> steps = {1:"val1", 5:"val2", 2:"val3"} >>> >>> for key in sorted(steps): ... print steps[key] ... val1 val3 val2
function doStuff() { if(condition == true) { ... } else { Invoke('doStuff', 1); } }
import lxml from lxml import etree source_xml = " path to your xml file" et = etree.parse(source_xml) value = et.xpath("//document/request/pair[name='q']/value/text()") print " ".join(value)
pip install --target=/target/dir/name mkdocs
def getKey (x): keys = x.split()[0:6] keys[4] = float(keys[4]) return tuple(keys) rows_of_fileB = dict( [ getKey(r), r] for r in fileB) for row in fileA: print( rows_of_fileB[getKey(row)] )
def index(): test1result = test1(request.form['data']) test2result = test2(request.form['data']) test3result = test3(request.form['data']) if not test1result: message = 'Failed test 1' elif not test2result: message = 'Failed test 2' elif not test3result: message = 'Failed test 3' return render_template('index.html', message = message)
def __contains__(self, e): return e in self.segments or any(e in x for x in self.segments)
class MyHandler(tornado.web.RequestHandler): def get(self, *args, **kwargs): components = [x for x in self.request.path.split("/") if x] # results in ['myroute', 'something']
'iterator' if obj is iter(obj) else 'iterable'
import datetime import pytest FAKE_TIME = datetime.datetime(2020, 12, 25, 17, 05, 55) @pytest.fixture def patch_datetime_now(monkeypatch): class mydatetime: @classmethod def now(cls): return FAKE_TIME monkeypatch.setattr(datetime, 'datetime', mydatetime) def test_patch_datetime(patch_datetime_now): assert datetime.datetime.now() == FAKE_TIME
mappings = [ {'ext': '193', 'value': 'Name1'}, {'ext': '194', 'value': 'Name 2'}, {'ext': '192', 'value': 'Name3'}, {'ext': '195', 'value': 'Name4'}, ] {d['ext']: d['value'] for d in mappings} # => {'195': 'Name4', '194': 'Name 2', '193': 'Name1', '192': 'Name3'}
class Node(object): def __getstate__(self): state = self.__dict__.copy() state.pop("neighbours") return state
$ awk '{$6="."; if ($5==1){$5="-"} else $5="+"}1' file chr10 100008748 100010821 2 + . chr10 100011459 100012109 2 + . chr10 100015496 100016536 2 + . chr10 100017921 100018765 2 + . chr10 100018985 100019147 2 + . chr10 100022808 100027387 2 + . chr10 100143625 100144703 2 + . chr10 100144824 100146957 2 + . chr10 100144941 100146957 2 + . chr10 100147064 100148110 2 + .
d = con[db][col].find_one()
[(s1,l1,l2) for (l1,s1),(l2,s2) in zip(data1,data2)]
dots = [[1,2,73,4],[5,36,7,18]] pos = {1:(0,6), 2:(4,3),3:(7,5),4:(9,0), 5:(0,28), 6:(4,3),7:(7,5),8:(9,0)} dot_pos = list() for k in dots: list_temp = list() for item in k: if item in pos: list_temp.append(pos[item]) dot_pos.append(list_temp) print dot_pos
screen = gtk.gdk.screen_get_default() root = screen.get_root_window() root.set_events(gtk.gdk.SUBSTRUCTURE_MASK) root.add_filter(event_filter) def event_filter(event, user_data): # process event return gtk.gdk.FILTER_CONTINUE
txt_list = [] with open("filename.txt", "r") as x: for line in x: line = line.rstrip() txt_list.append(line) i = 0 while i < len(txt_list): if txt_list[i] == "62": txt_list[i+1] = "256" i += 1
pip install sphinxcontrib-httpdomain
>>> from datetime import timedelta >>> str(timedelta(microseconds=49503757)) '0:00:49.503757'
key = raw_input("which key you want to update? : ") value = raw_input("Which value you want to update? : ")
require 'base64' require 'openssl' key = '' text = "GET\n\n\nSat, 22 Mar 2014 13:49:42 +0000\n" # hex = Digest::HMAC.hexdigest(text, key, Digest::SHA1) # <-- discouraged hex = OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha1'), key, text) p Base64.urlsafe_encode64(hex) # => "ZmUxN2YxMDQxMTdlODg3MDljMTRjYjY0ZGU1NDk1MjgwNzI2Yjk1Zg=="
depth = glReadPixels(self.mouseX, self.height()-self.mouseY, 1, 1, GL_DEPTH_COMPONENT, GL_FLOAT) z = 2*depth -1 mouseWorld = (self.viewport*self.matProj*self.matView*self.matModel).I*np.matrix([[self.mouseX, self.mouseY, z, 1]]).T
In [15]: import scipy.stats as stats In [20]: stats.ttest_rel(a, b) Out[20]: (array(0.9677712267394081), 0.35844406902161985)
import email e = """Sender: test@test.dk From: test@test.dk HelloWorld: test test email """ a = email.message_from_string(e) print a.keys()
s3 = boto3.resource('s3') bucket = s3.Bucket('my-bucket') objs = bucket.objects.filter(Prefix='/myprefix') for obj in objs: pass
L = [{'x':11}, {'y':2}, {'z':3}] def addItem(L, key, value): for index, element in enumerate(L): if key in element: L.remove(element) L.insert(index, {key, element[key] + value}) return L L[:] = addItem(L, 'x', 4) print(L)
from contextlib import nested with nested(settings(warn_only=True), hide('stdout'), cd('/tmp/')): # do something really cool
data = [[G1],[G2], ... ,[GX]] [GX] = [[Nodes][Edges]] [Nodes] = [[N1],[N2], ... ,[NX]] [N1] = [1.2 4.57851 47.1245 ...] data[data.index('GX')][O][:]
from django.contrib.admin.widgets import AdminDateWidget class MyForm(ModelForm): class Meta: widgets = { 'date': AdminDateWidget(), }
import string # Lists os components chars = [' '] + list(string.ascii_lowercase) + ['.',',','?','!'] # Your target target = 'hello world!' # Your array array = [chars.index(target[t]) for t in range(len(target))]
# get an iterable context = iterparse(source, events=("start", "end")) # turn it into an iterator context = iter(context) # get the root element event, root = context.next() for event, elem in context: if event == "end" and elem.tag == "record": ... process record elements ... root.clear()
for curdir, dirs, files in os.walk('/home/n00b'): print 'searching', files if 'program1.py' in files: print 'found' break
start = len(entry.get()) - 1 entry.delete(start, END)
login_required( active_required( my_view ) ) first checks if you are logged in, then first(second) checks if you are active, then runs my_vew
@mock.patch('mymodule.getFileAsJson', autospec=True) def test_appendRole(self, mock_getFileAsJson) mock_getFileAsJson.side_effect = [m_data, m_data1,m_data2,...] # where m_data, m_data1,m_data2, ... is what is supposed # getFileAsJson return in your test # Invoke appendRole() to test it appendRole(bla, bla) # Now you can use mock_getFileAsJson.assert* family methods to # check how your appendRole call it. # Moreover add what you need to test in appendRole()
class GenericTools: @property def name(self): c = None for i in self._get_decoded_info(): if i[0] == "Name": c = i[1] return c def _get_decoded_info(self): raise NotImplementedError("You must implement this method in subclasses")
queryset.annotate(tag_to_show=Case( When(my_tag__iregex=pattern, then=F('my_tag')), output_field=CharField(), default=Value("Not matched")))
DocA.objects(id=someid, user=logged_in_user).update_one(push__strings="New String")
from werkzeug.wrappers import Request req = Request(environ, shallow=True)
import numpy as np my_array = np.zeros((int(sp)-i,5),dtype=int) for ii in range(i,int(sp)): body=(np.bincount(un[i].ravel().astype('int'), weights=step_periods[i].ravel())) my_array[ii,:len(body)]=body
>>> keys = ["a", "b", "c"] >>> agg_d = {k:[] for k in keys} >>> agg_d["a"].append(1) >>> agg_d {'a': [1], 'c': [], 'b': []}
parser.addoption ('--count', default=1, type='int', metavar='count', help='Run each test the specified number of times') def pytest_generate_tests (metafunc): for i in range (metafunc.config.option.count): metafunc.addcall()
def get_session(customer_id): sqlite_url = 'sqlite:////path/customer%s.db' % customer_id engine = create_engine(sqlite_url) # initialize the db if it hasn't yet been initialized Base.metadata.create_all(engine) Session = sessionmaker(bind=engine) session = Session() return session
import subprocess; retcode = subprocess.call(["ls","-l"])
users_with_apple = list(User.objects.filter(fruit=apple)) users_with_pear = list(User.objects.filter(fruit=pear)) for user in users_with_apple: user.fruit = pear user.save() for user in users_with_pear: user.fruit = apple user.save()
class RaceTelemetryData(models.Model): user = models.ForeignKey(..., index_db=True) race = models.ForeignKey(YourRaceModel, index_db=True) time = models.IntegerField() gas = models.IntegerField() speed = models.SmallIntegerField() # and so on...
filter(str.isupper, list)
I_FILE="input.txt" O_FILE="output.txt" old=$(wc -l <"$I_FILE") while python Joiner.py "$I_FILE" "$O_FILE" new=$(wc -l < "$O_FILE") mv "$O_FILE" "$I_FILE" [ $new != $old ] do old=$new done
sorted(..., key=lambda x: (x[0], -x[1]))
from django.db.models import signals def check_for_url(sender, instance, created, kwargs**): for value in instance.__dict__.values(): if 'http://' in value: # do want you want post_save.connect(check_for_url)
>>> import numpy as np >>> a = np.random.rand(3,3) >>> a array([[ 0.43852835, 0.07928864, 0.33829191], [ 0.60776121, 0.02688291, 0.67274362], [ 0.2188034 , 0.58202254, 0.44704166]]) >>> a.max(axis=1) array([ 0.43852835, 0.67274362, 0.58202254])
import re re.findall(r'\\bibitem\{(.*?)\}', latex_text) # ['item1', 'item2']
conn = MySQLdb.connect (host = "localhost", user = "testuser", passwd = "testpass", db = "test") cursor = conn.cursor() cursor.execute(...) conn.commit()
counter = 0 while True: #your main loop smoke = digital_read() #assume 0 = no alarm, 1 = alarm if smoke: counter += 1 else: counter = 0 if counter >= 4: #there was smoke for the last 4 seconds call_the_fire_brigade() time.sleep(1) #wait one second
location.replace('/reports/csv_list_report/');
r[0, :8] = array
out = [] buff = [] for c in your_str: if c == '\n': out.append(''.join(buff)) buff = [] else: buff.append(c) else: if buff: out.append(''.join(buff)) print out
import json string_for_printing = json.dumps(original_string).strip('"')
from xlrd import open_workbook wb = open_workbook('spreadsheet.xlsx') for s in wb.sheets(): print('Sheet:',s.name) # you can check for the sheet name here if you want for row in range(2): #the first 2 rows (A and B) (use s.nrows for all) values = [] for col in range(3): #the first 3 columns (use s.ncols for all) values.append(str(s.cell(row,col).value)) print(','.join(values))
session.query(Person).filter(extract('day', Person.birthdate) == 24).all()
$result = system("ENV/bin/python test.py");
void loop() { char rxdata[14]; if (Serial2.available() > 0){ Serial2.readBytes(rxdata, 14); Serial3.write(rxdata); } }
initSelection: function (e, c) { return c({id: '\t', text: _t("Tab")});
>>> np.array([[[[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12], [13, 14, 15, 16]]]]).reshape((4,4)) array([[ 1, 2, 3, 4], [ 5, 6, 7, 8], [ 9, 10, 11, 12], [13, 14, 15, 16]])
option = Select(self.driver.find_element_by_id("offer.sections.edit.jobHighlights.permanentLocationId")).first_selected_option
<file_field_instance>.file
class Subnet(models.Model): network_address = models.IPAddressField() subnet_prefix = models.ForeignKey(SubnetPrefix) def save(self, *args, **kwargs): created = not self.pk super(Subnet, self).save(*args, **kwargs) if created: create_ip_addresses(self)
np.where(x<0, -x / x.min(axis=0), x / x.max(axis=0)) Out[6]: array([[ 0.5 , 0.42857143, 0.5 ], [-0.66666667, -1. , -1. ], [-1. , -0.2 , 0.75 ], [ 1. , 1. , 1. ]])
Installing with the zip file The available locations for the zip files are: Sourceforge download After downloading the zip file: Eclipse 3.4 onwards Extract the contents of the zip file in the eclipse/dropins folder and restart Eclipse. Before Eclipse 3.4 Extract the contents of the zip file on top of Eclipse, making sure the plugins folder is extracted on top of the eclipse/plugins folder and the features is on top of the eclipse/features folder. After that, restart Eclipse with the '-clean' flag, so that Eclipse finds out about it.
ar = np.array([0, 1]) for _ in range(10): print ar np.random.shuffle(ar)
"".join((char if char.isalpha() else " ") for char in test).split()
... def get(self): self.write("Hello, world") light_the_leds() ...
from nltk import FreqDist from nltk.classify.naivebayes import NaiveBayesClassifier def make_training_data(rdr): for c in rdr.categories(): for f in rdr.fileids(c): yield FreqDist(rdr.words(fileids=[f])), c clf = NaiveBayesClassifier.train(list(make_training_data(reader)))
import hashlib sh = hashlib.sha1() sh.update('password') hash_value = sh.hexdigest() # write hash_value to file/db...
csv.reader(f, quoting=csv.QUOTE_ALL, quotechar='|')
soup.find(text=u'Prévu')
[x for x in values if x % 2 == 1] + [x for x in values if x % 2 == 0] == values
document.body.innerHTML += '<form id="dynForm" action="/delete" method="post"><input type="hidden" name="for_deletion" value=' + urlsafe + '></form>'; document.getElementById("dynForm").submit();
from django.core.urlresolvers import reverse_lazy class EditarUsuario(UpdateView): model=User form_class=EditUserForm template_name = "editarUsuario.html" def get_success_url(self): return reverse_lazy('editar_perfil', args = (self.object.id,))
select 'id' from topic order by 'id desc' limit 2
>>> import struct >>> struct.unpack("<h", "\x00\x05") (1280,) >>> struct.unpack("<h", "\x00\x06") (1536,) >>> struct.unpack("<h", "\x01\x06") (1537,)
<input type="hidden" name="postset_id" value="{{ postset.id }}">
import some_module data = some_module.__loader__.get_data("path/in/archive/file.txt")
def expanded(widget, padding=0): sizer = wx.BoxSizer(wx.VERTICAL) sizer.Add(widget, 1, wx.EXPAND|wx.ALL, padding) return sizer class Panel(wx.Panel): def __init__(self, parent): wx.Panel.__init__(self, parent) self.text = wx.StaticText(self, label='Panel 1') self.SetSizer(expanded(self.text))
import matplotlib.pyplot as plt x = y = [1,2,3,4,5] fig, ax = plt.subplots() ax.plot(x,y) leg = ax.legend(['line 1'], loc=6, frameon=False) fig.canvas.draw() p = leg.get_window_extent().inverse_transformed(ax.transAxes) ax.annotate('Annotation Text', (p.p0[0], p.p1[1]), xycoords='axes fraction')
import numpy as np import matplotlib.pyplot as plt z = -np.linspace(9,15,100) x = np.linspace(-26,26,1000) x,z = np.meshgrid(x,z) Z = -np.exp(-0.05*z) +4*(z+10)**2 X = x**2 plt.contour(x,z,(X+Z),[0]) plt.xlim([-1.5,1.5]) plt.ylim([-11.5,-8.5])
dates = { 'date1': yesterday, 'date2': today, 'date3': tomorrow, } times = { 'time1': morning, 'time2': afternoon, 'time3': evening, }
>>> a = [1, 2, 3, 4, 5, 6] >>> [n > 3 for n in a] [False, False, False, True, True, True]
import cv2 cam = cv2.VideoCapture(0) w = cam.get(cv2.CV_CAP_PROP_FRAME_WIDTH) h = cam.get(cv2.CV_CAP_PROP_FRAME_HEIGHT) print w,h while cam.isOpened(): err,img = cam.read() cv2.imshow("lalala", img) k = cv2.waitKey(10) & 0xff if k==27: break
id = None title_set = True f = open("test.txt",'r') while True: text = f.readline() if text.startswith("ID: "): id = text[4:].strip() # The strip() is to remove the newline if text == "End": title_set = False if text == "Title": title_set = True if title_set and id is not None: print(id + " " + text.strip())
import re password = raw_input("Enter string to test: ") if re.match(r'[A-Za-z0-9@#$%^&+=]{8,}', password): # match else: # no match
nums = [4., 9., 13., 25] N = 10 while len(nums) < N: pos = np.argmax(np.diff(nums)) # where maximum difference is nums.insert(pos+1, (nums[pos+1] + nums[pos]) / 2.) #introduce value
import csv reader = csv.reader(open('IN.csv', 'r')) writer = csv.writer(open('OUT.csv', 'w') for row in reader: # do stuff to the row here # row is just a list of items writer.writerow(row)
tags_to_be_removed = Tags.objects.filter(pk__gte=5) # use your filter restaurant.tags.remove(*tags_to_be_removed)
p = 0.0000000000000000000001 s = str(p) print(format(p, "." + s.split("e")[-1][1:]+"f")) if "e" in s else print(p)
def get_object(self, *args, **kwargs): obj = super(EditarEvento, self).get_object(*args, **kwargs) if obj.user != self.request.user: raise PermissionDenied() #or Http404 return obj
pd.concat((pd.read_json(d) for d in data), axis=0)
class Genres(models.Model): genre = models.CharField(max_length = 128, unique = True) def __str__(self): return '%s'%self.genre
static void newFunction() { if (current->name.left(2)=="__" && current->name.right(2)=="__") { // special method name, see // http://docs.python.org/ref/specialnames.html current->protection=Public; } else if (current->name.left(2)=="__") { current->protection=Private; } else if (current->name.at(0)=='_') { current->protection=Protected; } }
for s in mystrings: open_window_for_string(s)
>>> import ast >>> ast.literal_eval("[(1,2),(3,4)]") [(1, 2), (3, 4)]
import re my_str = '123hello 456world' output = re.sub(r'\d+', '', my_str) print output # 'hello world'
V = [[map(int, j.split()) for j in i.split(',')] for i in s.split(';')]
from django.core.management import setup_environ from django.core.mail import EmailMultiAlternatives, send_mail from django.contrib.auth.models import User import settings from my.app.models import * setup_environ(settings)
from PythonMagick import Image Image("img.png").write("clipboard:")
for root, dir, files in os.walk(path): for name in files: subprocess.call(["path_to_your_programm/myprogram.exe", os.path.join(root, name)]
requests.get("https://api.spotify.com/v1/audio-features/06AKEBrKUckW0KREUWRnvT", headers={"Authorization": "Bearer {your access token}"})
STGN:([0-9A-F]+)(?=(?:[^S]|S(?!TGN))*IRV)
>>> import select >>> f = open('/sys/bus/clockevents/devices/clockevent0/uevent', 'r') >>> p = select.poll() >>> p.register(f, select.POLLPRI | select.POLLERR) >>> result = p.poll(10) >>> result [(3, 10)]
ps = set() for x, y in hull: ps.add(x) ps.add(y) ps = numpy.array(list(ps)) center = vecs[ps].mean(axis=0) A = vecs[ps] - center h = vecs[ps[numpy.argsort(numpy.arctan2(A[:,1], A[:,0]))]]
from tkinter import * root = Tk() def showGrid(): row = btn.grid_info()['row'] # Row of the button column = btn.grid_info()['column'] # grid_info will return dictionary with all grid elements (row, column, ipadx, ipday, sticky, rowspan and columnspan) print("Grid position of 'btn': {} {}".format(row, column)) btn = Button(root, text = 'Click me!', command = showGrid) btn.grid(row = 0, column = 0) root.mainloop()
def f1(): x = { 'value': 5 } def f2(): x['value'] += 1
import time, twitter api = twitter.Api(consumer_key='CONSUMER_KEY_HERE', consumer_secret='CONSUMER_SECRET_HERE', access_token_key='ACCESS_TOKEN_HERE', access_token_secret='ACCESS_TOKEN_SECRET_HERE') i = 0 while True: api.UpdateProfile(name=str(i)) i += 1 time.sleep(60 * 60 * 24) # 1 day
def display(self,**kwargs): head = kwargs.get("head", self.head) if not head: return print head, self.display(head=head.link) # you should always name an optional argument, # and you must name it if **kwargs is used.
self.bind_all("<B1-Motion>", self.on_motion) ... def on_motion(self, event): widget = self.winfo_containing(event.x_root, event.y_root) ...
In [633]: A['D'] = pd.Series(B) In [634]: A Out[634]: A B C D 1a 1 5 2 0.500 2a 2 4 4 0.750 3a 3 3 1 0.625 4a 4 2 2 0.550 5a 5 1 4 1.000
import pandas as pd from datetime import datetime df = pd.DataFrame([datetime(2014, 9, 18, 12, 30, 5, 60000)]) writer = pd.ExcelWriter("time.xlsx", datetime_format='hh:mm:ss.000') df.to_excel(writer, "Sheet1") writer.close()
from numpy.lib.stride_tricks import as_strided def subsequences(arr, m): n = arr.size - m + 1 s = arr.itemsize return as_strided(arr, shape=(m,n), strides=(s,s))
import re text = 'blhpxxxx [SCRIPT MODE]> show syslog server 1 Retrieving syslog server (s) ... <EVENT SEVERITY = "Repaired" /> ' print(re.search("\<.*\>", text).group())
$('#myButton').one('click', function(){ ... });
def diff(v): result = [] for i in range(1, len(v)): result.append(v[i] - v[i-1]) return result def ismonotone(v, tol=0): b = 0 dv = diff(v) if min(dv) >= -tol: b = b | 1 if max(dv) <= tol: b = b | 2 return b
import struct struct.pack('qii', # Format string here. 100, # Your 64-bit integer 50, # Your first 32-bit integer 25) # Your second 32-bit integer # This will return the following: 'd\x00\x00\x00\x00\x00\x00\x002\x00\x00\x00\x19\x00\x00\x00'
import numpy as np import scipy as sp import scipy.stats def mean_confidence_interval(data, confidence=0.95): a = 1.0*np.array(data) n = len(a) m, se = np.mean(a), scipy.stats.sem(a) h = se * sp.stats.t._ppf((1+confidence)/2., n-1) return m, m-h, m+h
import operator operations = [operator.add, operator.sub] # add two numbers s = operations[0](1, 2)
{% load humanize %} {{ my_num|intcomma }}
import json def extend_json(obj): if isinstance(obj, date): return str(obj) elif isinstance(obj, datetime): return obj.strftime("%Y-%m-%d %H:%M:%S") elif isinstance(obj, Decimal): return float(obj) data = json.dumps(obj, indent=4, sort_keys=True, default=extend_json)
In [1]: a = ['Peter', '1982', '2000', 'Homeland', '10.34'] In [2]: b = ['Peter', '1982', '2000', 'Homelnad', '10.32'] In [3]: [be if ae != be else '' for ae, be in zip(a, b)] Out[3]: ['', '', '', 'Homelnad', '10.32']
(?s) " [^"\\]* # Double quoted text (?: \\ . [^"\\]* )* "
import itertools list_1 = [1,5,4] list_2 = [2,3,4] # using list comprehensions comparisons = [a == b for (a, b) in itertools.product(list_1, list_2)] sums = [a + b for (a, b) in itertools.product(list_1, list_2)] # using map and lambda comparisons = map(lambda (a, b): a == b, itertools.product(list_1, list_2)) sums = map(lambda (a, b): a + b, itertools.product(list_1, list_2))
from django.db.models import Value from django.db.models.functions import Coalesce companies = Company.objects.values('name', 'id', 'logo_image').annotate( recommendations_score=Coalesce(Avg('companyinternshipreview__recommendation'), Value(0.0)) ).annotate( apply_skills_score=Coalesce(Avg('companyinternshipreview__apply_skills'), Value(0.0)) ).annotate( learn_new_score=Coalesce(Avg('companyinternshipreview__learn_new'), Value(0.0)) ).order_by('-recommendations_score', '-apply_skills_score', '-learn_new_score')
class MyFormatter(string.Formatter): """This is my formatter which is better than the standard one.""" # customization here ... MyFormatter().format(format_string, *args, **kwargs)
print json_data['data']['data'][0]['info']['cid']
type somefile.txt | python wordcount.py
<form action="{% url auth:login %}" method="post">{% csrf_token %} {{ form.as_p }} <input type="submit" value="Submit" /> </form>
x = parentWgdt.winfo_rootx() y = parentWgdt.winfo_rooty() height = parentWgdt.winfo_height() geom = "+%d+%d" % (x,y+height)
numbers = [192829, 88288, 912, 1992, 2828, 38] for number in numbers: print("{0:{1}d}".format(number,len(str(max(numbers)))))
setattr(obj, attr_name, getattr(obj, attr_name) + 1)
import argparse def do_things(args): print args # Do your stuff mainparser = argparse.ArgumentParser() submainadder = mainparser.add_subparsers(title='subcommands') parser_ut = submainadder.add_parser('unittest') parser_ut.set_defaults(func=do_things) if __name__ == "__main__": stuff = mainparser.parse_args() stuff.func(stuff)
cols_retained = ['column_a','column_e','column_wa'] _ = [df.drop([c for c in df if c not in cols_retained], axis='columns', inplace=True) for df in df_list]
goldah = [] i=0 while i< len(titles): titles = map(float, titles) goldahtemp = titles[i] * exchange goldahtemp = "%.2f" % goldahtemp print goldahtemp goldah.append(goldahtemp) i+=1
matrix.pop(0)
sig = add.s(1, 2) task = sig.apply_async() task.revoke(terminate=True) # ... task = sig.apply_async() # Will relaunch a task with the same parameters.
print row [1] + " has been checked " + ('in' if row[3] else 'out')
for line in shivas_file: print('\t'.join(line.split(",")))
x = csr_matrix(np.random.rand(1000) > 0.99).T print x.shape # (1000, 1)
>>> from textwrap import dedent >>> def print_help(): ... help = """\ ... Specify the hostname or service/hostname you want to connect to ... If specified -f/--hostfile will be ignored ... Some more multiline text here ... and more to demonstrate""" ... print dedent(help) ... >>> print_help() Specify the hostname or service/hostname you want to connect to If specified -f/--hostfile will be ignored Some more multiline text here and more to demonstrate >>>
testdf = pd.DataFrame({"happy": [1, 2, 1, 3], "sad": [4, 5, 6, 7], "cool":[1, 99, 0, -5]}) testgb = testdf.groupby(["happy"]).agg({'sad': lambda x: max(x)})
list_items = [ListItem(item=thing) for thing in list_of_things]
result = [dic[i] for i in tup] print tuple(result) ("alpha", "bad", "change")
df.groupby(['UserID', 'DeviceID', 'TicketID']).agg({ 'TicketStatus': 'last', 'TicketStartTime': 'first', 'TicketEndTime': 'last' }).reset_index()
def make_ext(modname, pyxfilename): from distutils.extension import Extension return Extension(name=modname, sources=[pyxfilename], extra_compile_args=['-O3', '-march=native'])
from email.mime.text import MIMEText from subprocess import Popen, PIPE msg = MIMEText("Here is the body of my message") msg["From"] = "me@example.com" msg["To"] = "you@example.com" msg["Subject"] = "This is the subject." p = Popen(["/usr/sbin/sendmail", "-t", "-oi"], stdin=PIPE) p.communicate(msg.as_string())
import xmlrpclib, httplib class TimeoutTransport(xmlrpclib.Transport): timeout = 10.0 def set_timeout(self, timeout): self.timeout = timeout def make_connection(self, host): h = httplib.HTTPConnection(host, timeout=self.timeout) return h t = TimeoutTransport() t.set_timeout(20.0) server = xmlrpclib.Server('http://time.xmlrpc.com/RPC2', transport=t)
THREE_CHOICES = 'ABC' FOUR_CHOICES = 'ABCD' FIVE_CHOICES = 'ABCDE' import random def generate_answers(n): '''Generates random answers from number inputted ''' answerList = "" for i in range(0,n): answerList += random.choice(FOUR_CHOICES) return answerList
num_digets(N, base) = 1 + floor(log(N) / log(base))
class Modifiedabcd(abcd): def test1(self, list_of_ids): ###some other statements temp = super(Modifiedabcd, self).test1(list_of_ids) return list(set(temp))
pip freeze > requirements.txt
dispatcher.push_handlers(window)
SELECT wiki_title.title FROM (SELECT title FROM publicdata:samples.wikipedia WHERE timestamp > 1262304000) AS wiki_title JOIN (SELECT REGEXP_REPLACE(word, r'\W', '') word, COUNT(*) FROM publicdata:samples.shakespeare WHERE LENGTH(word) > 15 GROUP BY word IGNORE CASE) AS shakespeare_word ON wiki_title.title = shakespeare_word.word GROUP BY wiki_title.title LIMIT 10;"
tmpvalue[mask] = value
import multiprocessing pool = multiprocessing.Pool() pool.map(function_x, list_of_files)
ind = ~(isnan(x1)|isnan(x2)); x1 = x1(ind); x2 = x2(ind);
In [11]: d1 = {'A': 1} In [12]: d2 = {'A': 4, 'B': 5} In [13]: d3 = {'C': 9} In [14]: pd.DataFrame([d1, d2, d3]) Out[14]: A B C 0 1 NaN NaN 1 4 5 NaN 2 NaN NaN 9
with open('input_file', 'r') as input_file: with open('output_file', 'w') as output_file: for line in input_file: if should_delete(line): pass else: output_file.write(line)
.. fancyimage:: img/exit_jam.jpg :fitwidth: 100 :fitheight: 100 :alt: cool :rel: tst
$ java -jar jython-standalone-2.7-b1.jar Jython 2.7b1 (default:ac42d59644e9, Feb 9 2013, 15:24:52) [Java HotSpot(TM) Client VM (Oracle Corporation)] on java1.7.0_03 Type "help", "copyright", "credits" or "license" for more information. >>> print "hello" hello >>>
>>> 'hello'[::] # here the value of stride is 1, means take a step of one between two indexes 'hello' >>> 'hello'[::2] #take a step of 2 so starting from h -->l --> o 'hlo' >>> 'abcdef'[::-1] #negative step actually means 'abcdef'[-1:-len('abcdef')-1:-1] 'fedcba'
somevar = 3 expression = lambda: somevar < 5 while expression(): ... if continue_if_even: expression = lambda: (somevar % 2) == 0 ...
class Friendship(models.Model): person1 = models.ForeignKey(Person, related_name='person1') person2 = models.ForeignKey(Person, related_name='person2') def clean(self): direct = FriendShip.objects.filter(person1 = self.person1, person2 = self.person2) reverse = FriendShip.objects.filter(person1 = self.person2, person2 = self.person1) if direct.exists() or reverse.exists(): raise ValidationError({'key':'Message')})
from os.path import expanduser import os.path.join SaveDirectory = expanduser(os.path.join('Desktop', 'office_docs'))
for item in list2: if any(item == c.name for c in list): print 'it is a member'
[{key: ["a"], id: 1, value: null} {key: ["a", "b"], id: 1, value: null} {key: ["a", "x"], id: 1, value: null} {key: ["a", "b", "x"], id: 1, value: null} {key: ["b"], id: 1, value: null} {key: ["b", "x"], id: 1, value: null} {key: ["x"], id: 1, value: null}]
# reading from file: with open('cities.txt') as f: lines = f.readlines() # pre-processing indices = {line.split()[0]: i for i, line in enumerate(lines)} distances = [line.split()[1:] for line in lines] #user input: start = input("Please enter starting point: ") end = input("Now please enter ending point: ") # evaluation: distance = distances[indices[start]][indices[end]] # output: print("Distance between {start} and {end} is {distance} km.".format(**locals()))
def capital(n): for word in n: if word==word.upper(): return n.upper() return n n=raw_input() print capital(n)
import numpy as np import pylab as plt imageArray2Dmesh = np.mean(mesh_reshape, axis=2); plt.figure() plt.pcolor(imageArray2Dmesh, cmap = ,cmap=plt.cm.pink) plt.colorbar() plt.show()
def remove_accents(data): return ''.join(x for x in unicodedata.normalize('NFKD', data) if x in string.ascii_letters).lower()
'//a[contains(., "{}")]'.format(text)
import random def shuffle(): aList = [] i = 0 for i in range(0, 5): elements = input(": ") aList.append(elements) random.shuffle(aList) return aList
(\d+(?:\.\d{1,2})?)\D*(\d+)
class PermissiveDict(dict): default = None def __getitem__(self, item): try: return dict.__getitem__(self, item) except KeyError: return self.default def exec_with_default(code, default=None): ns = PermissiveDict() ns.default = default exec code in ns return ns
use_pgdb = 0 try: import pgdb use_pgdb = 1 except: try: import psycopg2 except: raise exceptions.ImportError('No PostgreSQL library, install psycopg2 or PyGres!') if use_pgdb: _CONN = pgdb.connect(connect_string) else: _CONN = psycopg2.connect(dsn)
{{ item["directory_name"] }}
def post(self): #[...] if isvalid(username) == False: print "Invalid Username" self.redirect("/badusername") return print "User Is OK"
def FindLabel([Chloride], [Cl_txt]): if long([Chloride])==-99: L= [Cl_txt] else: L = str([Chloride]) return L
for k in d.keys(): if k.startswith('Prefix'): d.pop(k)
{% comment %} add your comment here :-) {% endcomment %}
printstr = "" if re.search... ... printstr += "Label for first item " + split[1] + ", " if re.search... ... printstr += "Label for second item " + ip[2] print printstr
with open("results.txt", "w") as results: p1 = subprocess.Popen(["command1"], stdout=results) p2 = subprocess.Popen(["command2"], stdout=results) p1.wait() p2.wait()
from IPython.lib.pretty import pprint pprint(your_big_ugly_data_structure)
def fn(*args): fn2(['foo', 'bar'] + list(args))
def code_points(text): import struct utf32 = text.encode('UTF-32LE') return struct.unpack('<{}I'.format(len(utf32) // 4), utf32) >>> len(utest) 4 >>> len(code_points(utest)) 3
#!/bin/bash unzip $1 -d $2 exit_code=$? # we catch exit_codes < 2 as the zipfiles are malformed if [ $exit_code -lt 2 ] then exit 0 else exit $exit_code fi
>>> args = [u'Everything', u'okay?', u':)'] >>> message = ' '.join(args) >>> print message Everything okay? :)
class SomeContainer(object): def __iter__(self): for elem in self._datastructure: if elem.visible: yield elem.value
import time run = raw_input("Start? > ") mins = 0 # Only run if the user types in "start" if run == "start": # Loop until we reach 20 minutes running while mins != 20: print ">>>>>>>>>>>>>>>>>>>>>", mins # Sleep for a minute time.sleep(60) # Increment the minute total mins += 1 # Bring up the dialog box here
class GoDown(dict): """Dictionary with an additional attribute recording the initial key.""" def __init__(self, **kwargs): if len(kwargs) != 1: raise TypeError("Exacly one keyword argument required.") super(GoDown, self).__init__(**kwargs) self.key = kwargs.keys()[0]
>>> dict(set.intersection(*(set(d.iteritems()) for d in dicts))) {'a': 3}
def half_list(l): return l[:len(l)/2]
words = [open('text.txt').read().split()]
C T :INOUT Value of the independent variable. On return it C will be the current value of t (normally TOUT). C C TOUT :IN Next point where output is desired (.NE. T).
text = BeautifulSoup(f).get_text()
[jinja2: **.tex] encoding = utf-8 block_start_string = <!! block_end_string = !!> variable_start_string = <! variable_end_string = !> comment_start_string = <!!! comment_end_string = !!!> extensions= jinja2.ext.i18n, jinja2.ext.do
net.addLink( s2, s3 ) net.start() net.configLinkStatus( 's2', 's3', 'down' )
from werkzeug.test import Client from werkzeug.wrappers import Response client = Client(current_app, response_wrapper=Response) res = client.open( method='GET', path='/api/v1/device/' )
import compiler eq= "sin(x)*x**2" ast= compiler.parse( eq )
import numpy as np df["new_col"] = df["col1"] - np.minimum(0,df["col2"])
f.write('some text\n')
Atemp = A[A != 0]
import datetime **** timestamp = datetime.datetime.utcnow().isoformat() isoDate = datetime.datetime.strptime( timestamp, "%Y-%m-%dT%H:%M:%S.%f" ) print (timestamp)
from pyPdf import PdfFileWriter, PdfFileReader output = PdfFileWriter() input1 = PdfFileReader(file("document1.pdf", "rb")) watermark = PdfFileReader(file("watermark.pdf", "rb")) page4.mergePage(watermark.getPage(0)) # finally, write "output" to document-output.pdf outputStream = file("document-output.pdf", "wb") output.write(outputStream) outputStream.close()
encoded = clipboard.encode('utf8').replace("\n","\r\n")
>>> import numpy as np >>> a = np.zeros((2, 2)) >>> a array([[ 0., 0.], [ 0., 0.]]) # In the following line 1 is the index before which to insert, 0 is the axis. >>> np.insert(a, 1, np.array((1, 1)), 0) array([[ 0., 0.], [ 1., 1.], [ 0., 0.]]) >>> np.insert(a, 1, np.array((1, 1)), 1) array([[ 0., 1., 0.], [ 0., 1., 0.]])
strings = ['abc', 'abcde', 'abcd', 'abcdefgh'] outputs = map(lambda x: "%d %s" % (len(x), x), strings) # ['3 abc', '5 abcde', '4 abcd', '8 abcdefgh'] f = open("file.out", 'w') data = '\n'.join(outputs) # Concat all strings in list, separated by line break f.write(data) f.close()
class OneToThreeInline(admin.StackedInline): fk_name = 'three' model = One class TwoToThreeInline(admin.StackedInline): fk_name = 'three' model = Two
import re data = """ fault-filtertime 5 foo bar baz ! TH """ regex_str = "fault-filtertime 5(.*?)! TH" regex = re.compile(regex_str, re.DOTALL) result = re.search(regex, data) print result.group(1)
from django.conf import settings ... class NFLTeam(models.Model): ... def save(self, *args, **kwargs): if settings.NFL_NO_SAVE is True: return
class MyModelClass(Base): ... event.listen( MyModelClass, "mapper_configured", setup_schema)
assertEqual([test.value for test in test_instance_objects], [1, 2, 3, 4, 5])
import random ops = ['+', '-', '*', '/'] num1 = random.randint(0,12) num2 = random.randint(0,10) operation = random.choice(ops) print(num1) print(num2) print(operation) maths = eval(str(num1) + operation + str(num2)) print(maths)
def getnewestfile(NetworkPath): DestFolder = os.getcwd() os.chdir(NetworkPath) filelist = os.listdir(os.getcwd()) filelist = filter(lambda x: not os.path.isdir(x), filelist) newest = max(filelist, key=lambda x: os.stat(x).st_mtime) os.chdir(DestFolder) return newest
for x in range(0, len(aminoacid)): if x != "-": print nucleotide[3x:3x+3] else: print "---"
#!/bin/bash ~/.pythonbrew/pythons/Python-2.7.7/bin/python my_program.py
import subprocess p = subprocess.Popen(["tee", "out"], stdin=subprocess.PIPE, stdout=subprocess.PIPE) p.communicate("abc") # This will end up in the process's stdin.
>>> import re >>> s = '''Sector: id1 Name: name1 Data: data1 Sector: id2 Name: name2 Data: data2''' >>> re.findall(r'\bName: (.*)', s) ['name1', 'name2']
import main_code class COMInterface: _public_methods_ = [ 'method1' ] _reg_progid_ = "My.Test" _reg_clsid_ = "{D6AA2A12-A5CE-4B6C-8603-7952B711728B}" def methods(self, input1,input2,input3): # force python to reload the code that does the actual work reload(main_code) return main_code.Runner().go(input1,input2,input3)
def in_dictionary(word): for line in open('words', 'r').readlines(): if word == line.strip(): return True return False
python -m run
infoObject = pygame.display.Info() pygame.display.set_mode((infoObject.current_w, infoObject.current_h))
from random import choice for key in total_values: total_values[key] = (total_values[key], choice((True, False)))
>>> df = pd.DataFrame([[10000000000000001, 1.5], [10000000000000002, 2.5]], columns=['id', 'prc']) >>> [t[1] for t in df.itertuples()] >>> [10000000000000001, 10000000000000002]
#!/usr/bin/env python from django.core.management import execute_manager import imp try: import settings_local except ImportError: import sys sys.stderr.write("Error: Can't find the file 'settings_local.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__) sys.exit(1) if __name__ == "__main__": execute_manager(settings_local)
c_float_p = ctypes.POINTER(ctypes.c_float) data = numpy.array([[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]]) data = data.astype(numpy.float32) data_p = data.ctypes.data_as(c_float_p)
plt.xticks(range(25))
b = [sum(a[current: current+5]) for current in xrange(0, len(a), 5)]
# Demo to add rotated text to an image using PIL import Image import ImageFont, ImageDraw, ImageOps im=Image.open("stormy100.jpg") f = ImageFont.load_default() txt=Image.new('L', (500,50)) d = ImageDraw.Draw(txt) d.text( (0, 0), "Someplace Near Boulder", font=f, fill=255) w=txt.rotate(17.5, expand=1) im.paste( ImageOps.colorize(w, (0,0,0), (255,255,84)), (242,60), w)
>>> s = '{0:08b}'.format(42) >>> s '00101010' >>> int(s, 2) 42
if form_1.is_valid() and form_2.is_valid(): review = form_1.save() photo = form_2.save(commit=False) photo.review_comments = review photo.save()
text = 'caramelosticosis' print(text[::-1])
os.environ["APPDATA"] # returns "c:\\Users\\<username>\\AppData\\Roaming"
sorted((k, v) for (k, v) in somedict, key=lambda (k, v): (-v.dollarsSpent, -(v.itemsPurchased - v.itemsSold), -v.itemsPurchased, v.position))
def __init__(self, *args, **kwargs): super(MyForm, self).__init__(*args, **kwargs) self.fields['year'].choices = self.get_years()
>>> import inspect >>> import my_module >>> [m[0] for m in inspect.getmembers(my_module, inspect.isclass) if m[1].__module__ == 'my_module']
class Foo: def __init__(self): self.bars = [] def append_bar(self, *args, **kwargs): self.bars.append(Bar(*args, **kwargs)) class Bar: def __init__(self, a, b, c, d): self.a = a self.b = b self.c = c self.d = d f=Foo() f.append_bar(1,2,3,4)
if form.is_valid(): story = form.save() return HttpResponseRedirect(reverse('story_detail', args=(story.user, story.id)))
def before_cursor_execute(conn, cursor, statement, parameters, context, executemany): schema_name = <Logic to resolve schema name> statement = "SET search_path TO '%s'; %s" % (schema_name, statement) return statement, parameters ...... (later in the code) listen(Engine, 'before_cursor_execute', before_cursor_execute, retval=True)
getattr(temp_text, 'a')
def searchBegin (searchChar): regex = searchChar regex += '.{2,7}' pattern = re.compile(regex) for (offset, line) in enumerate(lines): if re.match(pattern, line): return line break else: print "no match" return 'none'
pc.setfilter('not ip6')
In [11]: stats.t.sf(-11, df=10) Out[11]: 0.99999967038443183 In [12]: stats.t.sf(-11, df=-10) Out[12]: nan
def nextId_page1(self): if radio_button.isChecked(): return self.currentId()+1 return self.currentId()+2
insert into table2 (users_count, number) select users_count, ((row_number() over (order by ORDER BY users_count DESC) - 1) / 1000) + 1 from table1
while not done: for level in range(1,13): Code... # add "not done" as a condition to get out of this loop: while running and not done: Code..... #10 - Win/Lose check if healthvalue<=0: done=True # break out of the for loop if done == True: break
# extract ID column from CSV file 2 into a set Ids = { row[1] for row in smartee } # pick only rows whose ID is in Ids filtered_rows = [item for item in aeries if item[1] in Ids]
import dask.dataframe as dd dfs = [dd.read_hdf(fn, '/data') for fn in sorted(glob('myfiles.*.hdf5')] df = dd.concat(dfs)
>>> l = [{'a':'aa', 'b':'bb', 'quality':5},{'c':'cc', 'd':'dd', 'quality':5},{'e':'ee', 'f':'ff', 'quality':5}] >>> for item in l: ... item['quality'] -= 1 ... >>> l [{'a': 'aa', 'b': 'bb', 'quality': 4}, {'c': 'cc', 'quality': 4, 'd': 'dd'}, {'quality': 4, 'e': 'ee', 'f': 'ff'}]
def unique_items(L): found = set() for item in L: key = (item[1], item[3]) # use tuple as key if key not in found: yield item found.add(key)
from django.forms.fields import FilePathField a = FilePathField(path='/path') print a.choices
sys.path.append(os.path.dirname(__file__))
from matplotlib import pyplot as plt f = plt.figure() ax = f.add_subplot(111) ax.yaxis.tick_right() plt.plot([2,3,4,5]) plt.show()
e = ttk.Entry(master, ..., justify='center')
return getattr(sample_namespace,keyword,None)
company, was_created = Company.objects.get_or_create(name=info) setattr(self,key, [company,])
class MainWindow(QtGui.QMainWindow): def __init__(self, parent=None): super(MainWindow, self).__init__(parent) self.widget = Widget() def closeEvent(self, event): self.widget.close()
import re, decimal r= re.compile('([^ =]+) *= *("[^"]*"|[^ ]*)') d= {} for k, v in r.findall(line): if v[:1]=='"': d[k]= v[1:-1] else: d[k]= decimal.Decimal(v) >>> d {'account': 'TEST1', 'subject': 'some value', 'values': '3=this, 4=that', 'price': Decimal('20.11'), 'Qty': Decimal('100.0')}
field_vals = [[1, 89.99999999446867, 90.3567070001462], [2, 88.99999999460778, 89.83622323918551], [3, 87.99999999448423, 89.1722770229037]] for field in field_vals: _, b, c = field print '{:.2f} {:.2f}'.format(b, c) 90.00 90.36 89.00 89.84 88.00 89.17
items = re.split(" and |[^a-zA-Z ]+",text)
<tal:block tal:define="our_url context/@@plone_context_state/canonical_object_url; home_url context/@@plone_portal_state/portal_url;" tal:condition="python:our_url == home_url"> HERE GOES YOUR STUFF </tal:block>
C:\Windows\system32>fsutil.exe objectid query "myfile.txt" Object ID : 18fa1c836b95e31188eb002564e9e3cf BirthVolume ID : 684d8863dd92cf4aa82fcf79ccd993e3 BirthObjectId ID : 18fa1c836b95e31188eb002564e9e3cf Domain ID : 00000000000000000000000000000000
userSubset = set([user for user in users for record in user.records if dt < record.datetime < dt + timedelta(days=7)])
def f(a,b): print(a,b) f("Hello", "World!") args = ["Hello", "World!"] f(*args)
viewport_rect = QRect(QPoint(0, 0), self.view.viewport().size()) for row in range(0, self.model.rowCount()): rect = self.view.visualRect(self.model.index(row, 0)) is_visible = viewport_rect.intersects(rect)
ALLOWED_IP = ['173.47.xx.xx1', '173.47.xx.xx2'] class PostHandler(webapp2.RequestHandler): def post(self): # Read the IP of the incoming request ip = self.request.remote_addr # If the IP is allowed, execute our code if ip in ALLOWED_IP: # Execute some awesome code # Otherwise, slam the door! else: self.error(403)
from boto.sqs.message import RawMessage queue = SQS_CONNECTION.get_queue(QUEUE_NAME) queue.set_message_class(RawMessage) messages = queue.get_messages()
with open("input.txt") as f: lastmarkedline = None for line in f: if line.startswith('>'): lastmarkedline = line elif lastmarkedline is not None: field1 = lastmarkedline.split()[1] field2 = line.split()[1] print "{0}\t{1}".format(field1, field2)
def set_user(user): #Make into context manager env.custom_user = user def bar(): with set_user("foo"): execute("sometask") def sometask(): sudo("command", user=env.custom_user)
>>> xlabels = [1, 2, 3, 4] >>> [xlabels[i] if i % 2 != 0 else '' for i in range(len(xlabels))] ['', 2, '', 4]
import cStringIO import base64 pixBuf = gtkImage.get_pixbuf() fH = cStringIO.StringIO() pixBuf.save_to_callback(fH.write, "png") encodedBuffer = base64.b64encode(fH.getvalue()) #base64 encoded png
class Nameable(HasTraits) def __repr__(self): return "Some String Representation" def __getitem__(self,key): if key==0: return self elif key==1: return self.__repr__() else: raise KeyError
lists = [a, b] # add more lists here if need be... for idx, items in enumerate(zip(*lists)): unique = set(items) if len(unique) == 1: # idx = position, unique.pop() == the value print idx, unique.pop()
def list_subdirs(in_path): subdirs = [] for x in os.walk(in_path): subdirs.append(x[0]) return subdirs
for f in /var/log/wtmp*; do last -f $f reboot;done
from azure.servicebus import ServiceBusService import json; sbs = ServiceBusService("your_namespace", shared_access_key_name="your_policy_name", shared_access_key_value="your_policy_secret") # build dictionary and send value temp = {'DeviceId': 'dev-01', 'Temperature': str(i)} sbs.send_event('woodstove2', json.dumps(temp))
import xml.dom.minidom xml = xml.dom.minidom.parse(xml_fname) # or xml.dom.minidom.parseString(xml_string) pretty_xml_as_string = xml.toprettyxml()
>>> lst = [1, 2] >>> lst.append(3) >>> lst.append(4) >>> lst [1, 2, 3, 4] >>> lst.extend([5, 6, 7]) >>> lst.extend((8, 9, 10)) >>> lst [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] >>> lst.extend(range(11, 14)) >>> lst [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
fp = open("data.txt", "r") data = fp.read(); data = data.split(">"); i = 0; while True: filename = data[i].split('" ')[1].split('"')[1] text = data[i+1].split('<')[0].strip() fp1 = open(filename + ".txt", "w") fp1.write(text) fp1.close() i += 2 if i >= (len(data) - 1): break;
>>> t = [1, 2, 3] >>> (i*2 for i in t) <generator object <genexpr> at 0x7f1f72dbfdc0>
x=[4.0,7.0,4.5] y=[3.0,1.0,5.5] u=[0,0,0] v=[1,1,1] fig, ax = subplots() ax.quiver(x,y,u,v) ax.scatter(x,y,color='k') ax.axis([0,10,0,10])
SHFILEINFO sfi; SHGetFileInfo(L"c:\file.txt", 0, &sfi, sizeof(sfi), SHGFI_SYSICONINDEX); HIMAGELIST hil; SHGetImageList(SHIL_JUMBO, IID_IImageList, &hil); ImageList_DrawEx(hil, sfi.iIcon, hdc, x, y, 0, 0, CLR_NONE, CLR_NONE, ILD_NORMAL);
"0x%02X" % 42 # the old way "0x{:02X}".format(42) == "0x2A" # the new way
pip search bdd
def h(user_function, parameters=()): for a in range(4): for b in range(3): if (user_function(a, b, *parameters)): print "it's True" else: print "it's False"
asrock = Brand(name='Asrock') asus = Brand(name='Asus') mobo = Category(name='Motherboard') proc = Category(name='Processor') session.commit() p1 = Product(name='N98', cost=2100.50, price=2500.50, order_quantity=5, unit='unit', category=mobo, brand=asrock) p2 = Product(name='M-N98', cost=2300.50, price=2500.50, order_quantity=5, unit='unit', category=mobo, brand=asus) session.commit()
d = {} with open("input") as f: for line in f: key, dummy, dummy, value, dummy = line.split() d[key] = float(value)
>>> col_fam.get_indexed_slices(clause) <generator object get_indexed_slices at 0x1fdcf00>
num = '12345' let = 'abcde' keys = [n+l for n,l in zip(num, let)]
$ for filename in $(seq 20020101 20090726); do wget http://www.ctrlaltdel-online.com/comics/"$filename".jpg; done
def worker(self, queue): while True: tweet = queue.get() self.append(tweet)
import numpy import glob for f in glob.glob("*.csv"): print f r = numpy.recfromcsv(f) print numpy.interp(5, r.depth, r.temp)
tuple([10*x for x in img.size])
import subprocess as sub def write_data(filename, data): cmd = ('exiftool', '-Comment=%s' % data, filename) sub.check_call(cmd) def get_data(filename): cmd = ('exiftool', '-Comment', filename) return sub.check_output(cmd).split(':', 1)[-1].strip() write_data('IMG_0001.jpg', 'a'*2048) assert get_data('IMG_0001.jpg') == 'a'*2048
from django import forms.Field class MyCustomFormField(forms.Field): clean(self): if self.instance.is_disabled return self.instance.field else: return self.cleaned_data.get('field')
from datetime import date import random start_date = date.today().replace(day=1, month=1).toordinal() end_date = date.today().toordinal() random_day = date.fromordinal(random.randint(start_date, end_date))
import os import sys args = sys.argv path = "\\".join(args[1].split('\\')[:-1]) file_name = args[1].split("\\")[-1] file_name = file_name.lower() file_name = file_name.replace(' ','_') file_name = path+'\\'+file_name os.rename(args[1],file_name)
>>> string = '$20 - $40' #'$20' will also work >>> x = re.findall(r'\$(\d+)', string) >>> 1. * sum(map(int, x)) / len(x) 30.0 #convert to int if you want
>>> args = { ... 'name1': "Alice", ... 'name2': "Bob", ... 'date': datetime.datetime.now() ... } >>> print "Hi, my name is {name1}. Today is {date}".format(**args) Hi, my name is Alice. Today is 2015-10-20 01:21:36.020427
my_list_of_dicts.sort(key=lambda x: (x['day'], priority_list.index(x['job'])))
>>> import nltk >>> nltk.word_tokenize("Hello! Hi, I am debating this predicament called life. Can you help me?") ['Hello', '!', 'Hi', ',', 'I', 'am', 'debating', 'this', 'predicament', 'called', 'life.', 'Can', 'you', 'help', 'me', '?']
def get_counts(sequence): # Defines the function. counts = {} # Creates an empty dictionary. for x in sequence: # Loops through each item in sequence if x in counts: # If item already exists in dictionary counts[x] += 1 # Add one to the current item in dictionary else: # Otherwise... counts[x] = 1 # Add item to dictionary, give it a count of 1 return counts # Returns the resulting dictionary.
class MyForm(forms.Form): def __init__(self, request, *args, **kwargs) self.request = request super(MyForm, self).__init__(*args, **kwargs) def clean(self): if not self.request.session.get('file_downloaded', False): raise ValidationError('File not downloaded!') def my_view(request): form = MyForm(request, data=request.POST)
[lst[1] for lst in data]
def evaluate(l, max_depth, cur_depth=0, counter=0): if cur_depth > max_depth: return counter for x in l: counter += 1 l2 = [x * 2 for x in l] print cur_depth, l2, counter counter = evaluate(l2, max_depth, cur_depth + 1, counter) return counter
from collections import Counter counts = Counter(d.check(word) for (word,pos) in tokenizer(text)) good, bad = counts[True], counts[False]
df['zscore'] = (df.a - df.a.mean())/df.a.std(ddof=0) print df a zscore 0 NaN NaN 1 0.0767 -1.148329 2 0.4383 0.071478 3 0.7866 1.246419 4 0.8091 1.322320 5 0.1954 -0.747912 6 0.6307 0.720512 7 0.6599 0.819014 8 0.1065 -1.047803 9 0.0508 -1.235699
llvmlite.binding.load_library_permanently("runtime.so")
for c in colors[:]: if c == 'green': colors.remove(c)
if lst[0] == 1 and lst[1] == 0: return 0 if lst[len(lst)-1] == 1 and lst[len(lst)-2] == 0: return 1 for i in range(1,len(lst)-1): if lst[i] == 1 and lst[i-1] == 0 and lst[i+1] == 0: return i
python pygettext.py argparse.py
>>> {(i, j) for i, j in diof if i > 0 and j > 0} set([(5, 20), (40, 10), (95, 5), (121, 4), (248, 2), (499, 1)])
#!/usr/bin/perl open(FI,"file.txt"); read(FI,$_,10000000); close(FI); @arr = split('--###--'); $cnt=0; for $c (@arr) { open(FO,">$cnt.txt"); print FO $c; close(FO); $cnt++; }
from google.appengine.ext import webapp import json class Handler(webapp.RequestHandler): def post(self): # Convert JSON from the request to Python objects. data = json.loads(self.request.body) # For your sample input, data will be a list of dicts. for person in data: name = person['name'] value = person['value']
>>> print(repr(text["hablar"])) u'reden' >>> print(text["hablar"]) reden
... 29337248 29337272 29337248 29337272 ...
letters = [('a', 'A'), ('b', 'B')] for i, (lowercase, uppercase) in enumerate(letters): print "Letter #%d is %s/%s" % (i, lowercase, uppercase)
subprocess.Popen('find / -name "hello.txt" -exec echo {} \;', shell=True)
def is_idle(lat1, lat2): if lat1 - lat2 < 0.1: return 'idle' elif lat1 - lat2 > 0.1: return 'active' else: return 'error' lats = [1,2,3,4,5,6,7,8,9] for i in range(len(lats)-1): lat1= lats[i] lat2 = lats[i+1] is_idle(lat1,lat2)
print val1 / (val2 + 0.0) print (val1 + 0.0) / val2 print float(val1) / val2 print val1 / float(val2)
renderer_dict = {} # dictionary of values to pass to the renderer new_comment = render('new_comment.pt', renderer_dict, request)
def queryURI(self,e): global outDir valueYouWant = "" with queryURIDlg() as dlg: dlg.ShowModal() valueYouWant = dlg.getYourValue() self.ProgressBox.AppendText('Querying ' + valueYouWant)
def alternate(i): i = iter(i) while True: yield(i.next(), i.next()) >>> list(alternate(range(10))) [(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)]
from sympy.interactive import printing printing.init_printing(use_latex=True)
from scipy.spatial.distance import cosine from pandas import DataFrame df = DataFrame({"col1": [158, 25, 180, 152, 96], "col2": [173, 191, 33, 165, 108]}) print(1 - cosine(df["col1"], df["col2"]))
import socket HOST = '' PORT = 50007 s = socket.socket() s.bind((HOST, PORT)) s.listen(1) conn, addr = s.accept() f = open("client.txt", "rb") while 1: data = f.read(1024) if not data: break conn.send(data) conn.close()
with open(file, 'r') as indata: lines = indata.readlines() menu = dict() for i in xrange(0, len(lines), 3): name = lines[i].rstrip('\n') ingredients = lines[i+1].rstrip('\n').split('/') f = Foodset(name) f.setIngredients(ingredients) menu[name] = f
In [1]: import pandas In [2]: df = pandas.DataFrame({"col1":["A", "A", "B"], "col2":[1,2,3]}) In [3]: df.groupby("col1").sum() Out[3]: col2 col1 A 3 B 3 In [4]: df.groupby("col1").sum().reset_index() Out[4]: col1 col2 0 A 3 1 B 3 [2 rows x 2 columns]
drive_filename = r'\\.\PhysicalDrive1' log_filename = r'C:\ohMyPy\mft.txt' with open(drive_filename, 'rb') as drive, open(log_filename, 'wb') as logfile: logfile.write(drive.read(1024*10000))
args2 = (AsIs(schema), AsIs(table_name[0]), AsIs(new_owner))
SELECT * WHERE { VALUES ?input { <http://myConstant> } ?input rdf:type InputVar. ?input property1 ?value1. ?input property2 ?value2. ?input property3 ?value3. # etc. }
import pyodbc pyodbc.pooling = False conn = pyodbc.connect(db_connection_string) conn.close()
class attributeSetter(object): ''' Makes functions appear as attributes. Takes care of autologging.''' def __init__(self, func): self.func = func def __get__(self, instance, owner): return self.func.__get__(instance, owner) def __set__(self, obj, value): return self.func(obj, value)
>>> a1 = np.ma.array([1, 2, 3], mask = [0,1,1]) >>> a2 = np.ma.array([7, 8, 9], mask = [1,1,0]) >>> arr = np.ma.array(np.dstack((a1, a2)), mask=np.dstack((a1.mask, a2.mask))) >>> np.prod(arr[0], axis=1) masked_array(data = [1 -- 9], mask = [False True False], fill_value = 999999)
for index,tag in enumerate(globalTagnames): if tag in tobesearched: print values[index]
import igraph g = igraph.Graph([(0,1), (0,2), (2,1)]) igraph.plot(g, vertex_frame_color='red')
UPDATED: from bs4 import BeautifulSoup result = '''<div class="test"> <a href="example">Result 1</a> </div> <div class="test"> <a href="example2">Result 2</a> </div>''' soup = BeautifulSoup(result) for div in soup.findAll('div', attrs={'class':'test'}): print div.find('a').text Result 1 Result 2
import numpy as np import matplotlib.pyplot as plt x = np.linspace(0, 10) y = np.sin(x) plt.plot(x, y, dashes=[10, 5, 20, 5], linewidth=2, color='black')
plot(range(80)) xlabel('foo') ylabel('bar') legend(['myline']) axis([0, 80, 0, 120]) savefig('sample.pdf')
import logging import sys root = logging.getLogger() root.setLevel(logging.DEBUG) ch = logging.StreamHandler(sys.stdout) ch.setLevel(logging.DEBUG) formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s') ch.setFormatter(formatter) root.addHandler(ch)
fig = mlab.figure(figure='ICVM', bgcolor=(1,1,1), fgcolor=(0,0,0), size=(1024,786)) mlab.clf() topo = mlab.surf(lat1d[::-1], lon1d, elev[::-1], colormap='gist_earth', warp_scale=-1e-4) mlab.axes(xlabel='lat.', ylabel='lon.') mlab.outline()
>>> a = [[5,5,5,4,6],[3,2,6,6,5],[7,2,2,5,6]] >>> minn = min(min(x) for x in a) #find the min value >>> [(i,j) for i,x in enumerate(a) for j,y in enumerate(x) if y==minn] [(1, 1), (2, 1), (2, 2)]
open('foo.txt', 'w').write(repr(foo))
var = {} for set, list in records.iteritems(): var[set] = [i['Time Stamp'] for i in list]
from selenium import webdriver driver = webdriver.Firefox() driver.get("http://test.com") driver.save_screenshot("screenshot.png") driver.close()
with open('the.csv') as f: next(f) list_of_rows = list(csv.reader(f)) listA = [row[0] for row in list_of_rows] listB = [int(row[1]) for row in list_of_rows]
$.get('/get_dataset.json', function(dataset) { React.renderComponent( <App data={dataset}/>, document.getElementById( "App" ) ); });
d = { k:None for k in ('a:b','c:d','e:f','d:c','b:a','f:e') } for k in d.keys(): if '{}:{}'.format(k[2],k[0]) in d: d.pop(k)
numbers[slice(*prange_py(1))]
sample = [5, 1, 3, 9, 7, 13, 12, 5] class_boundaries = [(1, 4), (4, 7), (7, 10), (10, 14)] classified = [[X for X in sample if LO <= X <= HI] for LO,HI in class_boundaries] counts = [sum(LO <= X <= HI for X in sample) for LO,HI in class_boundaries]
re.sub(r'(Item)', r'- \1', 'A list of things: \nItem1, \nItem2')
title0 = '{:#^{width}}'.format(' USA ', width=19) title1 = '{:#^{width}}'.format(' Canada ', width=19)
def decorator(fnc): def test(): print "test" return test @decorator def foo(): print "foo" foo() # will print test
from xmpp import * cl=Client('example.com') cl.connect() cl.auth('sender', 'sender_pass') ibb = filetransfer.IBB() ibb.PlugIn(cl) f = open('/tmp/foo') ibb.OpenStream('123', 'receiver@example.com/resource', f)
def vprod(x): y = np.atleast_2d(x) return np.dot(y.T, y)
df=pd.DataFrame(['11-Dec','10-Dec','09-Dec'],columns=['issue_day']) df['issue_day']=pd.to_datetime(df['issue_day'],format="%y-%b") print df[df['issue_day']<'2011']
>>> import ctypes >>> _ = lambda i: int(ctypes.c_uint32(i).value) >>> hex(_(0xF0 + 0xAA)) '0x19a'
for line in open(filename): row = line[:-1].split(",") arg = {'date': date, 'store_id': row[0].strip(), 'price': row[1].strip(), 'description': row[2].strip()} if not arg['store_id'] and not arg['description']: continue # cur.execute bit here...
import json # package a python dict as json dict0 = {'spam': 'data', 'eggs': 'more data'} pack = json.dumps(dict0) # turn it back to a dict dict1 = json.loads(pack) >>> print dict1['spam'] data
x[['f0','f1']]
def walk(self,_root='/'): result=[] for child in self.children: path="%s%s/"%(_root,child.name) if child.children else "%s%s"%(_root,child.name) result.append((path,child)) result.extend(child.walk(_root=path)) return result #result if _root != '/' else zip(*result)
# Server code import xmlrpclib from SimpleXMLRPCServer import SimpleXMLRPCServer def is_even(n): return n%2 == 0 server = SimpleXMLRPCServer(("localhost", 8000)) print "Listening on port 8000..." server.register_function(is_even, "is_even") server.serve_forever() # Client code import xmlrpclib proxy = xmlrpclib.ServerProxy("http://localhost:8000/") print "3 is even: %s" % str(proxy.is_even(3)) print "100 is even: %s" % str(proxy.is_even(100))
def list_avg(str_list): int_list = [float(i.strip('[]')) for i in str_list.split(',')] return sum(int_list) / len(int_list)
cdf = np.cumsum([0, 0.02, 0.08, 0.16, 0.29, 0.45]) # leftmost bin edge = 0 counts, edges = np.histogram(np.random.rand(100), bins=cdf) print(counts) # [ 4, 8, 16, 30, 42]
import random print([random.random()*90, random.random()*90]) #[34.050498339418986, 5.622759330528135]
import active_directory user = active_directory.find_user("jimboface") destination_ou = active_directory.find_ou("happyland") destination_ou.com_object.MoveHere(str(user.as_string()), str(user.Name)) #Thats it!
>>> s = "11 (1)" >>> import re >>> >>> re.escape(s) '11\\ \\(1\\)'
import os def accessible(dir): try: os.listdir(dir) except OSError: return False return True print(accessible('/root'))
obj.update(add_obj)
import os with open(os.path.join(os.path.dirname(__file__), 'package.txt'), 'w'): pass
import sys def run(filename): with open(filename) as f: for line in f: print ">>> ", line exec line if __name__ == "__main__": try: run(sys.argv[1]) except KeyError: print "You should pass one filename as parameter."
from rpy2.robjects.packages import importr base = importr('base') base.eval(expr)
[compile_catalog] directory = YOURPROJECT/locale domain = YOURPROJECT statistics = true [extract_messages] add_comments = TRANSLATORS: output_file = YOURPROJECT/locale/YOURPROJECT.pot width = 80 [init_catalog] domain = YOURPROJECT input_file = YOURPROJECT/locale/YOURPROJECT.pot output_dir = YOURPROJECT/locale [update_catalog] domain = YOURPROJECT input_file = YOURPROJECT/locale/YOURPROJECT.pot output_dir = YOURPROJECT/locale previous = true
coverage help run ... --rcfile=RCFILE Specify configuration file. Defaults to '.coveragerc'
urlpatterns = [ url(r'^(?P<content_type_name>comics|articles|videos)$', views.content_type, name='content_type'), ]
import random functions = [f1, f2, f3] random.shuffle(functions) for function in functions: function(mydict)
return TemplateResponse(request, "profiles_view.html", results)
from inspect import getsource class NumberStore(object): def __init__(self, num): self.num = num def get(self): return self.num @classmethod def print_class_definition(cls): return getsource(cls)
$ sudo pkill -f camera.py
def parse(self, response): # check response for rule criteria ... if rule: # create new request to pass to second callback req = Request("http://www.example.com/follow", callback=self.parse2) return req def parse2(self, response): hxs = HtmlXPathSelector(response) # do stuff with the successful response
def check(sub, full): full_list = list(full) for char in sub: if char in full_list: full_list.remove(char) else: return False return True
df = pd.read_sql('SELECT * FROM table_name', con=db_connection)
>>> "{1:,.{0}f}$".format(2, 1000 + 1/float(3)) '1,000.33$' >>>
using (var tcp = new TcpClient("localhost", 12345)) { byte[] image = File.ReadAllBytes("image.png"); tcp.GetStream().Write(image, 0, image.Length); }
def make_list(d): def append_children(parent, d): children = [[x['Child']] for x in d if x['Parent'] == parent[0]] if children: parent.append(children) for child in children: append_children(child, d) results = [[x['Child']] for x in d if x['Parent'] == 'top'] for parent in results: append_children(parent, d) return results
import bs4 soup = bs4.BeautifulSoup(html_string) href = soup.find('h3').find('a').get('href') print(href)
static PyGetSetDef point_getset[] = { {"x", (getter)point_get_x, (setter)point_set_x, "", NULL}, {NULL} }; static PyObject* point_get_x(struct PointObject *self, void *closure) { return Py_BuildValue("i", self->my_point->x); } static int point_set_x(struct PointObject *self, PyObject *value, void *closure) { PyErr_SetString(PyExc_TypeError, "Attribute is read-only!"); return -1; }
def walk_list(list_of_g): to_idx = 0 for g_current in list_of_g: if not subtle_condition(g_current): list_of_g[to_idx] = g_current to_idx += 1 del list_of_g[to_idx:]
class Class0(object): ... class Class1(Class0, CommonMethodsMixin): def class1_specific_method (self): common_method() class Class2(Class0, CommonMethodsMixin): def class2_specific_method (self): common_method() class CommonMethodsMixin(object): def common_method(): ...
class WebSite(models.Model): ... maintenance_page = ForeignKey('app_name.Page') class Page(models.Model): ... website = ForeignKey('app_name.WebSite')
process=subprocess.Popen(['command','--option','foo'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) inputdata="This is the string I will send to the process" stdoutdata,stderrdata=process.communicate(input=inputdata)
''.join(list_fields[list_fields.index("Overview:") + 1:])
list1= [{'outside_key1': [ { 'key1': 'one', 'key2': 'xyz','key3':'three'}]} , {'outside_key2': [ { 'key1': 'one', 'key2': 'abc','key3':'three'}]}] sort_on = "key2" decorated = [(dict_.values()[0][0][sort_on], dict_) for dict_ in list1] decorated.sort() result = [dict_ for (key, dict_) in decorated] print result
from boto.s3.key import Key k = Key(bucket) k.key = 'yourkey' k.set_contents_from_string(request.POST['data'])
>>> from sympy import Symbol >>> np.diag([Symbol(x) for x in ['a','b','c','d','e']]) array([[a, 0, 0, 0, 0], [0, b, 0, 0, 0], [0, 0, c, 0, 0], [0, 0, 0, d, 0], [0, 0, 0, 0, e]], dtype=object)
>>> int_string = '1558662:10306104:11038113:7883355' >>> hex_string = ':'.join(format(int(i), 'X') for i in int_string.split(':')) >>> hex_string '17C886:9D4238:A86DA1:784A5B'
from datetime import date, timedelta d = date.today() - timedelta(days=days_to_subtract)
entries = Entry.live.filter(categories__title=slug)
import numpy as np x = np.random.randn(10) x1= x+10 np.var(x), np.std(x)/np.mean(x) (2.0571740850649021, -2.2697110381499224) np.var(x1), np.std(x1)/np.mean(x1) (2.0571740850649016, 0.1531035017615747)
import os.path as osp osp.join(osp.dirname(__file__), 'config.ini')
var = 5 def printit(): global var threading.Timer(5.0, printit).start() print "Hello, World!", var printit() import time for i in range(1000000): time.sleep(2) var = i
def choose_sets(l, k): if k == 0: return [[]] if len(l) == 0: return [] l2 = l[1:] subsets = choose_sets(l2, k-1) for s in subsets: s.append(l[0]) return subsets+ choose_sets(l2, k)
>>> import re >>> re.sub(r"x(?=[^']*'([^']|'[^']*')*$)", "P", "axbx'cxdxe'fxgh'ixj'k") "axbx'cPdPe'fxgh'iPj'k"
if n > 0: return srs_print(S, n-1, rules) else: return S
t1 = [L.pop(random.randrange(len(L))) for _ in xrange(2)]
#!/usr/bin/python import ftplib import os filename = "filename" ftp = ftplib.FTP("xx.xxx.xxx.xxx") ftp.login("uid", "psw") ftp.cwd("/my/location") os.chdir(r"c:\somewhere") print filename ftp.retrbinary('RETR %s' % filename, open(filename, 'w').write)
WSGIPassAuthorization On
df = pd.read_csv('file.txt', sep=" ", header = None) df.columns = columns = ["A", "B", "C", "D", "E", "F", "G"] df = df.apply(numpy.random.permutation) for row in df.iterrows(): #process row here
url(r'^', include('frontpage.urls', namespace="frontpage")), urlpatterns = patterns('frontpage.views', url(r'^$', 'index', name='index'), )
df['count'] = df.apply(lambda x: 1 if x.category in x.category_pred else 0, axis = 1)
for file in files: mod = __import__(file) mod.report()
import os for root, dirs, files in os.walk('path/to/local/dir'): for fname in files: full_fname = os.path.join(root, fname) ftp.storbinary('STOR remote/dir' + fname, open(full_fname, 'rb'))
import sys def __main__(): with open("parameters.log", "ab") as f: f.write(str(sys.argv))
list_dicts = sorted(list_dicts, key=lambda x:int(x['key3'])-int(x['key2'])-int(x['key1']))
myformatter.format('{user!u} did la-dee-dah on {date}, and {pronoun!l} liked it. ', user=x, date=y, pronoun=z)
with open(infile,'r') as r: start = set([line.strip().split()[3] for line in r]) r.seek(0, 0) genes = set([line.split('"')[1] for line in r]) print len(start) print len(genes)
myInteger += 1 myString += "more text"
def asarray(a, dtype=None, order=None): return array(a, dtype, copy=False, order=order)
def model(position, width, height): return height * sqrt(2*pi) * width * scipy.stats.norm.pdf(x, position, width)
celery multi start worker1 \ --pidfile="$HOME/run/celery/%n.pid" \ --logfile="$HOME/log/celery/%n.log"
who = raw_input("Give a name") for name, number in zip(a, b): if name == who: print name, number
import pygraphviz as pgv from PIL import Image d={'1': {'2': None}, '2': {'1': None, '3': None}, '3': {'2': None}} A=pgv.AGraph(d) A.node_attr['style']='filled' n = A.get_node('1') n.attr['fillcolor']="#CCCCFF" n.attr['label'] = 'MY LOVELY LABEL' A.layout() # default to neato A.layout(prog='dot') # use dot A.draw('file.png') img = Image.open('file.png') img.show()
from django.db import models class MyField(models.CharField): def to_python(self, value): if value in ('Y', '1'): return True if value in ('N', '0'): return False raise ValueError
#!/usr/bin/env python2.7 def chan_values(num): """parses int into an array of True/False values for the channels""" channels = [] while num > 0: channels.append(num%10==1) num /= 10 channels += [False]*(8-len(channels)) return channels print chan_values(111) print chan_values(10001000)
themutex.acquire() try: print('Do some stuff') finally: themutex.release()
def run(): match_this = raw_input('Please enter string to match > ') for dirpath, _, filenames in os.walk('H:\\'): for filename in filenames: if match_this in filename: print os.path.join(dirpath, filename)
lines = cv2.HoughLinesP(edge_image, rho=1.0, theta=math.pi/180.0, threshold=thresholdVal, minLineLength=minlinelengthVal, maxLineGap=maxlinegapVal)
class MyDefaultDict(dict): def __init__(self, word_iterable, translate): self.word_set = frozenset(word_iterable) self.translate = translate def __missing__(self, key): if key in self.word_set: translated = translate(key) self[key] = translated return translated raise KeyError(key)
numInversions = 0 for i in range(16): for j in range(i): if state.index(START[j]) > state.index(START[i]): numInversions += 1
from itertools import chain pd.DataFrame(list(chain.from_iterable( ((k, v) for v in vals) for (k, vals) in dct.items())), columns=('Column1', 'Column2'))
import os,os.path curfilePath = os.path.abspath(__file__) curDir = os.path.abspath(os.path.join(curfilePath,os.pardir)) # this will return current directory in which python file resides. parentDir = os.path.abspath(os.path.join(curDir,os.pardir)) # this will return parent directory.
def rotate(tf, points, theta): rotation_matrix = tf.pack([tf.cos(theta), -tf.sin(theta), tf.sin(theta), tf.cos(theta)]) rotation_matrix = tf.reshape(rotation_matrix, (2,2)) return tf.matmul(points, rotation_matrix)
>>> import matplotlib >>> matplotlib.get_backend() 'TkAgg'
import random x = random.randint(0,10) y = 7 while x != y: print(x) #Print old (non-7) random number x = random.randint(0,10) #pick a new number. I hope it's 7 so we can end this madness print("You found {0}. Congrats. Go have a beer.".format(y))
from sys import version_info if version_info.major == 2: # pragma: no cover from httplib import ACCEPTED, NO_CONTENT # pylint:disable=import-error else: # pragma: no cover from http.client import ACCEPTED, NO_CONTENT # pylint:disable=import-error
from collections import defaultdict sums = defaultdict(float) for c, a, b in regions: sums[a, b] += c result = [(csum, a, b) for (a, b), csum in sums.iteritems()]
try: import readline except: pass #readline not available
>>> import nltk >>> sentence = """At eight o'clock on Thursday morning ... Arthur didn't feel very good.""" >>> tokens = nltk.word_tokenize(sentence) >>> tokens ['At', 'eight', "o'clock", 'on', 'Thursday', 'morning', 'Arthur', 'did', "n't", 'feel', 'very', 'good', '.']
def main(): # Start the scheduler filename = os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..', 'tmp')) + '\\' + 'spider.log' logging.basicConfig(filename=filename, level=logging.DEBUG,format='%(levelname)s[%(asctime)s]: %(message)s') sched = Scheduler() sched.start() sched.add_interval_job(run_job, minutes=30)
... unittest.main(testRunner=runner, exit=False) ...
import wmi c = wmi.WMI() for service in c.Win32_Service(): print(service.DisplayName)
def backup_to_csv(request): output = StringIO.StringIO() ## temp output file writer = csv.writer(output, dialect='excel') #code for writing csv file go here... response = HttpResponse(mimetype='application/zip') response['Content-Disposition'] = 'attachment; filename=backup.csv.zip' z = zipfile.ZipFile(response,'w') ## write zip to response z.writestr("filename.csv", output.getvalue()) ## write csv file to zip return response
>>> v="This is a string" >>> v.split() ['This', 'is', 'a', 'string']
from django.forms.fields import DateField fld = DateField() dt = request.GET.get('date', '') formatted_datetime = fld.to_python(dt)
def middle(L): return L[len(L)//2] >>> middle([8, 0, 100, 12, 1]) 100
def f(): return [1, 2, 3], ["a", "b", "c"] list1, list2 = f()
pdf = pyPdf.PdfFileReader(file(path, "rb")) content = pdf.getPage(1).extractText()
In [9]: seq2 = 'ggggugcccQgcuagagaZgacagu' In [10]: re.findall(r'[^GaAgUuCc]',seq2) Out[10]: ['Q', 'Z']
def signup(self, request, user): user.first_name = self.cleaned_data['first_name'] user.last_name = self.cleaned_data['last_name'] user.save()
with contextlib.nested(open(...), open(...), ...) as (in_1, in_2, ...): ....
>>> child.__bases__ (<class __main__.A at 0x10052f0b8>,)
$meta_arr = array( 'array1' => $array_number_one, 'array2' => $array_number_two ); echo json_encode($meta_arr);
def perform_bubble_sort(blist): cmpcount, swapcount = 0, 0 for j in range(len(blist)): for i in range(1, len(blist)-j): cmpcount += 1 if blist[i-1] > blist[i]: swapcount += 1 blist[i-1], blist[i] = blist[i], blist[i-1] return cmpcount, swapcount
import os os.system("abq6131 job=Fish1")
def removeDuplicateArtist(stringInput): if "," in stringInput: names = stringInput.split(" ") artist = names[1][int(len(names[1])/2):] + " " names.remove(names[0]) names.remove(names[0]) for i in names: artist += str(i) + " " return artist
import ast l = [['dir/path', 'other/path'],['path/path', 'blah/xyz']] with open('a.txt', 'a') as f: f.write(str(l)) with open('a.txt') as fread: s = fread.read() l2 = ast.literal_eval(s) print type(l2) for i in l2: print i
referrer = self.request.headers.get('referer') if referrer: return self.redirect(referrer) return self.redirect_to('home')
import pandas as pd df = pd.DataFrame({'dates': pd.date_range('2015-01-01', '2015-01-10', freq='12H')}) df.dates.dt.strftime('%H:%S')
self.assertFalse(sendEmails_mock.called)
def start(times=5): t.insert(END, 'Hello\n') if times > 1: root.after(1000, lambda: start(times-1))
import matplotlib.pyplot as plt subplotsize=[5.,5.] figuresize=[10.,10.] left = 0.5*(1.-subplotsize[0]/figuresize[0]) right = 1.-left bottom = 0.5*(1.-subplotsize[1]/figuresize[1]) top = 1.-bottom fig=plt.figure(figsize=(figuresize[0],figuresize[1])) fig.subplots_adjust(left=left,right=right,bottom=bottom,top=top) ax=fig.add_subplot(111) plt.show()
lines = 4 cols = 4 a = [[['H',' '] for j in range(cols)] for i in range(lines)]
import re re.sub(pattern, '', s)
import re text = file('filename').read() numbers = re.findall(r'([0-9.]+) hrs ([0-9]+) miles', text) hours = sum(float(x[0]) for x in numbers) miles = sum(int(x[1]) for x in numbers)
db = MongoClient() users = db.test.users for u in users.find({}, {"_id": 1}).limit(10): print "!!!", u
import win32com.client as win32 excel = win32.gencache.EnsureDispatch('Excel.Application') wb = excel.Workbooks.Open('your excel file.xlsx') print(len(wb.Worksheets)) # tells you how many worksheets
query = None for tag in F: if query is None: query = Q(tags=tag) else: query &= Q(tags=tag) PhotoSet.objects.filter(query)
from ast import literal_eval newlist = [[literal_eval(el) for el in item] for item in mylist]
>>> ord(u"ć") 263 >>> u"café"[2] u'f' >>> u"café"[3] u'\xe9' >>> for c in u"café": ... print repr(c), ord(c) ... u'c' 99 u'a' 97 u'f' 102 u'\xe9' 233
import urllib # outputs "foo%2Fbar" print urllib.quote('foo/bar', '')
def rolldice(): while True: num_sides = input("Enter number of sides for die: ") num_rolls = input("Enter number of rolls for die: ") try: int(num_sides) int(num_rolls) break except ValueError: print("Enter an integer")
import urllib f = urllib.urlopen("http://tycho.usno.navy.mil/cgi-bin/timer.pl") time_page = f.readlines() for line in time_page: if line.find("Eastern Time") != -1: ny_time = line[4:24] break print ny_time
array = ['foo', 'bar', 'foobar'] for index, item in enumerate(array): print item array[index] = None # at the end of the loop, `item` still points to the final item # so you might want to do the same to make sure it gets released item = None
with open('infile.txt', 'r') as f: lines = f.readlines() with open('outfile.txt', 'w') as f: f.write('\\data\\\n') f.write('n-grams = {}\n'.format(len(lines))) f.write('\\1-grams:\n') for l in lines: f.write(l)
for searchterm in searchterms: counter = 0 try: while counter <10: #do some other stuff here with searchterm counter=counter+10 except IOError: print "No result found!"+""
def storefront(request): if request.GET.get('enki') == '0011': request.session['from_main_site'] = True return redirect('storefront') elif not request.session.get('from_main_site'): return redirect('http://main-site.com/') # at this point the user has come from the main site # and doesn't have "enki" in the url return render(request, 'storefront.html')
result = SomeModel.query.with_entities(SomeModel.col1, SomeModel.col2)
dd if=/dev/urandom of=myrandom bs=100 count=10 conv=notrunc
from ldap3 import Server, Connection, SEARCH_SCOPE_SINGLE_LEVEL s = Server('your_server') c = connection(s, user='your_user_dn', password='your_password', auto_bind=True) c.search('', '(objectClass=*)', search_scope=SEARCH_SCOPE_SINGLE_LEVEL) print(c.response) you should get all the objects in the first level of the tree, if you want you can specify a filter with the object classes you need: c.search('', '(!(objectClass=organization)(objectClass=organizationalUnit))', search_scope=SEARCH_SCOPE_SINGLE_LEVEL)
with open(r'G:\number.csv', 'r') as f: # read content = f.read() with open(r'G:\number-post.csv', 'wb') as fh: # write fh.write(content.replace('-1','O,O').replace('0','A,A').replace('1','A,B').replace('2','B,B').replace('O','0'))
def element_count(p): q = p[:] count = 0 while q: entry = q.pop() if isinstance(entry, list): q += entry count += 1 return count print element_count([1, [], 3]) print element_count([1, [1, 2, [3, 4]]]) print element_count([[[[[[[[1, 2, 3]]]]]]]])
a[tuple(sorted(dct.items()))] = b
import requests URL = 'https://www.yourlibrary.ca/account/index.cfm' payload = { 'barcode': 'your user name/login', 'telephone_primary': 'your password', 'persistent': '1' # remember me } session = requests.session() r = requests.post(URL, data=payload) print r.cookies
class SharedItems(db.Model): user = db.ReferenceProperty(User, required=True) # logged-in user from = db.ReferenceProperty(User, required=True) # who shared it item = db.ReferenceProperty(Item, required=True) # the item itself posted = db.DateTimeProperty() # when it was shared
class InstalledModel(models.Model): @property def another_model_choices(self): if isinstance(self, MyModel): return {'some_condition': True} return None base_field = models.ForeignKey(AnotherModel, limit_choices_to=another_model_choices)
document.getElementsByTagName("textarea")
import glob list_of_files = glob.glob('./*.txt') with open("stripD.xls", "w") as fout: for fileName in list_of_files: data_list = open( fileName, "r" ).readlines() fout.write(data_list[17]) fout.writelines(data_list[44:])
zip(list_of_strings, result[0])
grid = [[0 for col in xrange(w)] for row in xrange(h)]
import os.path from flask import Flask from flask.ext.autoindex import AutoIndex app = Flask(__name__) AutoIndex(app, browse_root=os.path.curdir) if __name__ == '__main__': app.run()
import numpy as np import matplotlib.pyplot as pl # you can do this in one line, that's what 'unpack' is for: timepoints, intensity = np.loadtxt('dataset', usecols=(0,1), unpack=True, delimiter=",") interd = timepoints[1] - timepoints[0] # if this is 1, it can be ignored sp = np.fft.fft(intensity) freq = np.fft.fftfreq(len(intensity), d=interd) pl.plot(np.fft.fftshift(freq), np.fft.fftshift(np.abs(sp))) pl.xlabel("frequency(Hz)") pl.show()
class SimClass(object): def run(self): self.results = ... self.plot = SimPlot(self) class SimPlot(object): def __init__(self, simclass): self.simclass = simclass def plot1(self): # access simclass' attribute(s) self.simclass.results sim = SimClass() sim.run() sim.plot.plot1()
word = Word.objects.get(...) setattr(word, fieldName, True)
>>> import collections >>> sorted_event_types = collections.OrderedDict(sorted(event_types.items())) >>> print sorted_event_types OrderedDict([('ah', 0), ('as', 1), ('ch', 1), ('cs', 0), ('eh', 2), ('es', 9), ('oh', 3), ('os', 5)])
def form_valid(self, form): messages.success(self.request, "Success", extra_tags='msg') return super(UserCreateView, self).form_valid(form) # ModelFormMixin will now save # FormMixin will now redirect to success_url() # override above behavior if you need to do something with the object
stack = [(my_list, -1)] while stack: item, level = stack.pop() if isinstance(item, list): for i in reversed(item): stack.append((i, level+1)) else: print "\t" * level, item
>>> from unittest import signals >>> signals.__file__ '/usr/lib/python2.7/unittest/signals.pyc'
from StringIO import StringIO from fabric.api import get fd = StringIO() get(remote_path, fd) content=fd.getvalue()
def split_and_convert(s): bits = s[1:-1].split(',') return ( int(bits[0]), bits[1], float(bits[2]), float(bits[3]), float(bits[4]), float(bits[5]) ) data_to_dump = [split_and_convert(s) for s in data] json.dumps(data_to_dump)
namesAge = [] while True: mess=input("Enter name and age: ") if mess == "": print(namesAge) print ("We have {} names".format(len(namesAge))) print ("average age is {}".format(sum(namesAge)/len(namesAge)))) break elif "," in mess: name, age = mess.split(',') namesAge.append(int(age)) else: print("invalid input")
class OutputTestCase(unittest.TestCase): def get_output(self, input): ... # You haven't mentioned how "input" is taken or how output is taken. def test_script(self): input = ... expected = ... output = self.get_output(input) self.assertEqual(output, expected)
from sys import argv
import pandas as pd selectColumns = ['h1','h2','h3'] table = pd.read_csv('test.csv') tableNew = table[selectColumns] pd.to_csv('tableNew')
import matplotlib.pyplot as plt fig = plt.figure(figsize=(5,2)) ax = fig.add_subplot(111, position=[0.01, 0.01, 0.98, 0.98])
#!/bin/sh ssh -t "$*"
import string trans = string.maketrans('ae', 'bx') # a->b and e->x text = 'abcdef' print text.translate(trans) # bbcdxf
class Order(): .... @property def total(self): return self.articles.aggregate(Sum('price'))['price__sum']
import mod_wsgi process_group = mod_wsgi.process_group
s = urllib2.urlopen("http://www.bing.com/search?" + urllib.urlencode({ 'q' : u'我爸是李刚' .encode('utf8') } )
import numpy as np from scipy.interpolate import interp1d ntime, nheight_in, nlat, nlon = (10, 20, 30, 40) heights = np.linspace(0, 1, nheight_in) t_in = np.random.normal(size=(ntime, nheight_in, nlat, nlon)) f_out = interp1d(heights, t_in, axis=1) nheight_out = 50 new_heights = np.linspace(0, 1, nheight_out) t_out = f_out(new_heights)
@classmethod def function_b(cls): cls.function_a()
print >>f, "Hello world" # Python 2.x print("Hello world", file=f) # Python 3.x
from unittest.runner import TextTestResult TextTestResult.getDescription = lambda _, test: test.shortDescription()
if your_list[0] == 'MATE555': print your_list[1] else: print 'no key'
with h5py.File('the_filename', 'r') as f: my_array = f['array_name'][()]
if (condition1 or condition2 or condition3): do something
for ele in l[:]: if ele < minus or ele > plus: l.remove(ele)
accepted_strings = {'auth', 'authpriv', 'daemon'} if facility in accepted_strings: do_stuff()
data=simplejson.loads( request.raw_post_data )
from collections import defaultdict d = defaultdict(dict) phonemes = ["T", "UH", "T"] graphemes = ["t", "oo", "t"] # Create offset list for dict key graphemes_offset = ['^'] + graphemes[:len(graphemes)-1] for ph, g, g_o in zip(phonemes, graphemes, graphemes_offset): d[(ph,g_o)][g] = d[(ph, g_o)].setdefault(g,0) + 1
In [395]: def tester(): ...: print "Tester Called!" ...: return [1,2,3] In [396]: for i in tester(): ...: pass Tester Called!
i = 1 fout = open("output0.txt","wb") for line in fileinput.FileInput(filename): fout.write(line) i+=1 if i%40000 == 0: fout.close() fout = open("output%d.txt"%(i/40000),"wb") fout.close()
return num + math.copysign(1, num)
from shutil import rmtree from django.conf import settings from django.test import TestCase class MyTests(TestCase): def setUp(self): rmtree(settings.MEDIA_ROOT, ignore_errors=True) def tearDown(self): rmtree(settings.MEDIA_ROOT, ignore_errors=True)
import requests data = requests.get('https://mobile.admiral.at/;apiVer=json;api=main;jsonType=object;apiRw=1/en/api/event/get-event?id=15a822ab-84a1-e511-90a2-000c297013a7').json()
In [1324]: from __future__ import print_function In [1325]: f = lambda x: print(x) In [1326]: f("HI") HI
for object in list_of_objects: object.method()
try: utxt = txt.decode('ascii') except: # txt contains non "english" characters ...
client = mqtt.Client() client.connect(address) #runs a thread in background to call loop function internally. #In addition, this also reconnects to broker on a lost connection. client.loop_start() while True: data = getdata() client.publish("$ahmed",data) client.loop_stop()
base = '/Users/paganotti/Documents/Project/simple/work/paga/' rel = '../test.txt' print os.path.normpath(os.path.join(base, rel))
def foo(s): ret = "" i = True # capitalize for char in s: if i: ret += char.upper() else: ret += char.lower() if char != ' ': i = not i return ret >>> print foo("hello world") HeLlO wOrLd'
>>> a [[(1L,)], [(2L,)], [(3L,)], [(4L,)], [(5L,)]] >>> a = [[x[0][0]] for x in a] >>> a [[1L], [2L], [3L], [4L], [5L]]
for x,y,z in os.walk('path'): # z is the directory # y is subdirectories # x is the files
#!/usr/bin/python import time import sys i = 0 hello = "hello world, goodbye universe " while 1: print("\r"), cur = hello[i:] + hello[0:i] print("%s" % cur), sys.stdout.flush() i += 1 if (i >= len(hello)): i = 0 time.sleep(0.3)
import sys ' '.join(sys.argv[1:])
import numpy as np def f(*args, **kwargs): length = kwargs.get("length", 1) ret = [] for arg in args: if isinstance(arg, (float, int)): ret.append(np.repeat(arg, length)) else: ret.append(arg) return tuple(ret) print f(1, 2, length=4)
time python yourprogram.py
from mock import patch ... unittest boiler plate stuff ... @patch("matplotlib.pyplot.show") def testMyCode(self, mock_show): mock_show.return_value = None #probably not necessary here in your case ... rest of test code ...
>>> x, y = zip(*sorted((xVal, np.mean([yVal for a, yVal in zip(x, y) if xVal==a])) for xVal in set(x))) >>> x (3, 4, 5, 6, 7, 8, 9) >>> y (6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 1.5)
import os def content_file_name(instance, filename): ext = filename.split('.')[-1] filename = "%s_%s.%s" % (instance.user.id, instance.questid.id, ext) return os.path.join('uploads', filename)
from gdata.gauth import AuthSubToken from gdata.spreadsheets.client import SpreadsheetsClient atok = AuthSubToken(token_string=get_access_token()) # acess token via protocol data = SpreadsheetsClient().get_worksheets(key, auth_token=atok)
In [4]: L = [1,2,3,4,5] In [5]: zip(L, L[1:]) Out[5]: [(1, 2), (2, 3), (3, 4), (4, 5)]
browser.find_element_by_xpath('//input[contains(@name, "user")]') browser.find_element_by_xpath('//input[@name="user" or @name="username"]')
a[(b % 20 == 0) & np.r_[True, np.diff(b) > 0]]
def setdefaultattr(obj, name, value): if not hasattr(obj, name): setattr(obj, name, value) return getattr(obj, name)
import io with io.open(r'c:\path\to\output.txt', 'w', encoding='utf-8-sig') as file: file.write(u"abc\n") file.write(u"\u2744\n")
data = numpy.loadtxt('position.txt')
>>> str <class 'str'> >>> str(42) '42' >>> import string >>> string <module 'string' from '/usr/lib/python3.1/string.py'> >>> string.digits '0123456789'
import argparse parser = argparse.ArgumentParser(description='your description') parser.add_argument('-entry', dest="entry") args = parser.parse_args() print (args.entry)
import fcntl import sys import termios with open(sys.argv[1], 'w') as fd: for c in "ls\n": fcntl.ioctl(fd, termios.TIOCSTI, c)
import glob l = [pd.read_csv(filename) for filename in glob.glob("/path/*.txt")] df = pd.concat(l, axis=0)
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax = fig.add_subplot(111) x = np.linspace(0, 2*np.pi, 100) y = np.sin(x) ax.plot(x,y) ax.set_yticklabels([str(abs(x)) for x in ax.get_yticks()]) ax.show()
class A { my_method() { return "I am a return value."; } get my_property() { return "I am also a return value."; } }
>>> from bulbs.neo4jserver import Graph, FulltextIndex >>> from bulbs.element import Vertex >>> index_name="fulltext_vertex" >>> g = Graph() >>> g.vertices.fulltext = g.factory.get_index(Vertex, FulltextIndex, index_name) >>> james = g.vertices.create(name="James Thornton", city="Dallas") >>> g.vertices.fulltext.put(james.eid, name=james.name) >>> vertices = g.vertices.fulltext.query(name="James") >>> vertices.next()
from mercurial import error, lock try: l = lock.lock("/path/to/lock", timeout=600) # wait at most 10 minutes # do something except error.LockHeld: # couldn't take the lock else: l.release()
$python -c 'import sys for i in range(10): print(i) '
from pptx.dml.color import RGBColor line = pic.line line.color.rgb = RGBColor(0xFF, 0x00, 0x00) line.width = Inches(0.1)
from rest_framework import status,viewsets from rest_framework.response import Response from django.http import Http404 class ExampleDestoryViewset(viewset.ModelViewSet): def destroy(self, request, *args, **kwargs): try: instance = self.get_object() self.perform_destroy(instance) except Http404: pass return Response(status=status.HTTP_204_NO_CONTENT)
>>> dicts = [d1, d2, d3] >>> allkeys = set(x for d in dicts for x in d.keys()) >>> super_dic = {k:[d.get(k, 0) for d in dicts] for k in allkeys} >>> super_dic {'a': [2, 3, 0], 'c': [3, 3, 0], 'b': [5, 0, 4], 'd': [6, 0, 4]}
In [376]: dict1 = {'B':'q'} df.loc[df['col1'].isin(dict1.keys()), 'col2'] = df['col1'].map(dict1) df Out[376]: col1 col2 0 A z 1 B q 2 C x 3 B q
from bs4.builder import HTMLParserTreeBuilder class MyBuilder(HTMLParserTreeBuilder): def __init__(self): super(MyBuilder, self).__init__() # BeautifulSoup, please don't treat "class" as a list self.cdata_list_attributes["*"].remove("class") soup = BeautifulSoup(data, "html.parser", builder=MyBuilder())
>>> from collections import defaultdict >>> d = defaultdict(dict) >>> d1 = {1:2,3:4} >>> d['id1'].update(d1) >>> d defaultdict(<class 'dict'>, {'id1': {1: 2, 3: 4}})
q = db.session.query(Phrase.content, Meaning.content).join(Meaning).all()
df['NewCol'] = df.apply(lambda x: segmentMatch(x['TimeCol'], x['ResponseCol']), axis=1)
AllItems = [QComboBoxName.itemText(i) for i in range(QComboBoxName.count())]
[datetime.datetime.strptime(d, '%Y-%m-%d').strftime("%B %Y") for d in my_list]
from Tkinter import Tk, Canvas, PhotoImage, mainloop from math import sin WIDTH, HEIGHT = 640, 480 window = Tk() canvas = Canvas(window, width=WIDTH, height=HEIGHT, bg="#000000") canvas.pack() img = PhotoImage(width=WIDTH, height=HEIGHT) canvas.create_image((WIDTH/2, HEIGHT/2), image=img, state="normal") for x in range(4 * WIDTH): y = int(HEIGHT/2 + HEIGHT/4 * sin(x/80.0)) img.put("#ffffff", (x//4,y)) mainloop()
def proposal_create_view2(request): if request.method == 'POST': form = ProposalForm(data=request.POST) if form.is_valid(): mysaved_model = form.save() response = {} response['proposalID'] = mysaved_model.id #or .pk return render(request , 'my_template_file.html' , response) #return response statement is NOT valid as you need to return an HttpResponse not a dict
import numpy as np mymatrix = np.matrix([[11,12,13], [21,22,23], [31,32,33]]) def myfunction( x ): return sum(x) print np.apply_along_axis( myfunction, axis=1, arr=mymatrix ) #[36 66 96]
def my_print(num=1): print num my_print() >> 1 my_print(7) >> 7
>>> s = "A &amp; B" >>> import re >>> matched = re.search(r'&\w+;', s) >>> if matched: ... print "escape char '{0}' found in string '{1}'".format(matched.group(), s) ... escape char '&amp;' found in string 'A &amp; B'
In [5]: dt Out[5]: datetime.datetime(2010, 7, 1, 0, 0) In [6]: dt.date() Out[6]: datetime.date(2010, 7, 1)
#Fibonacci number calculator function def fib(n): if n==0: return 1 elif n==1: return 1 else: return fib(n-1)+fib(n-2)
bar = {5:'10/10', # 10 4:'message1', # 9 or 8 3:'message2', # 7 or 6 2:'message3', # 5 or 4 1:'message4', # 3 or 2 0:'message5'} # 1 or 0 >>> foo = 7 >>> bar[foo // 2] 'message2'
class MyTable(Base): __tablename__ = 'my_table' id = Column(Integer, primary_key=True) code = Column(String(4)) name = Column(String(10)) @validates('code', 'name') def validate_code(self, key, value): max_len = getattr(self.__class__, key).prop.columns[0].type.length if value and len(value) > max_len: return value[:max_len] return value
def iter_sublists(l): n = len(l)+1 for i in xrange(n): for j in xrange(i+1, n): yield l[i:j] >>> print list(iter_sublists([1,2,3])) [[1], [1, 2], [1, 2, 3], [2], [2, 3], [3]]
class Example(model.Model): #... def clean(self): if self.parent.id == self.id: raise ValidationError("no self referential models")
resultbox = QtGui.QTextEdit() text = 'example' if condition1: resultbox.insertText(text) '''Append text to resultbox in default color.''' elif condition2: resultbox.insertHtml(QString("<font color=\"red\">%1</font>").arg(text)) '''Append the text in say, red and not the default black. How?'''
self[:] = list(set(self))
next_scene_name = current_scene.text() if next_scene_name in self.map_scenes.scenes: current_scene = self.map_scenes.next_scene(next_scene_name)
import pylab as plt a = [[1,0,1],[1,1,1]] plt.matshow(a) plt.show()
>>> def x(a, b, c): ... print(a, b, c) ... >>> l = [1, 2, 3] >>> x(*l) (1, 2, 3)
final_winner = None while not final_winner: winner_index = random.randint(0, participant_count-1) winner = player_list[winner_index] if (date.today() - timedelta(days= 4*365/12)) > next_check.win_date.date(): final_winner = winner
$ curl http://localhost:6800/schedule.json -d project=myproject -d spider=somespider
for n in itertools.product(*pool): print(n)
def nested_getter(d, keys): return reduce(dict.get, keys, d)
class Agent(models.Model): ... regions = models.ManyToManyField(Region, through='ARM2M')
from wsgiref.simple_server import demo_app from wsgiref.simple_server import make_server httpd = make_server('0.0.0.0', 8000, demo_app) print "Serving on port 8000..." httpd.serve_forever()
[easy_install] allow_hosts = local.mirror
#! /usr/bin/env python2 from SimpleHTTPServer import SimpleHTTPRequestHandler import BaseHTTPServer class CORSRequestHandler (SimpleHTTPRequestHandler): def end_headers (self): self.send_header('Access-Control-Allow-Origin', '*') SimpleHTTPRequestHandler.end_headers(self) if __name__ == '__main__': BaseHTTPServer.test(CORSRequestHandler, BaseHTTPServer.HTTPServer)
def test_foo(): new_account = account()
import math def myRounding(x): return math.ceil(x*100) / 100.0
>>> re.split('(\W+)', '...words, words...') ['', '...', 'words', ', ', 'words', '...', '']
frames = [pd.read_csv('f1.csv'), pd.read_csv('f2.csv')] result = concat(frames,ignore_index=True)
Content-Type: multipart/encrypted; boundary=whatever; protocol="application/pgp-encrypted"
def printMatrix(matrix): return "\n".join((("{:<10}"*len(row)).format(*row))for row in matrix) In [19]: arr=[[1,332,3,44,5],[6,7,8,9,100]] In [20]: print(printMatrix(arr)) 1 332 3 44 5 6 7 8 9 100
In [9]: a = np.random.rand(1000,1000) In [10]: %timeit a[123][456] 1000000 loops, best of 3: 586 ns per loop In [11]: %timeit a[123,456] 1000000 loops, best of 3: 234 ns per loop
from itertools import starmap from collections import deque exhaust_iterable = deque(maxlen=0).extend exhaust_iterable(starmap(function, dictionary.items()))
thread_queues = [] for i in range(4): thread_queues = Queue() for user in user_list: user_hash=hash(user.user_id) #hash in here is just shortcut to some standard hash utility thread_id = user_hash % 4 thread_queues[thread_id].put(user) # From here ... your pool of threads access thread_queues but each thread ONLY accesses # one queue based on a numeric id given to each of them.
import datetime dd = datetime.datetime.strptime(date,'%y%m%d') if dd.year > 2005: dd = dd.replace(year=dd.year-100)
import re regex = re.compile(r"[;>](?P<description>[^\n]*)\n(?P<sequence>[^;>]+)") with open("datafile.txt","r") as f: sequences = regex.findall(f.read()) for i, info in enumerate(sequences): description, sequence = info print("sequence%d: %s" % (i, sequence.replace("\n","")))
import subprocess FileName = "/Users/fis/Desktop/installation_guide.txt" subprocess.call(['open', FileName])
ps -p <YOUR PID> -o cmd h
from django.template.defaultfilters import truncatechars_html html = """<p>Look, I&#8217;m some HTML. You can truncate me with Django template filters</p>""" truncated_value = truncatechars_html(html, 30)
import requests import bs4 proxy = {"http": "115.227.195.213"} response = requests.get('http://www.whatsmyip.de/', proxies=proxy) soup = bs4.BeautifulSoup(response.text) print soup.h3.text
import sys import re regex = re.compile(r'(\S+\s+){2,3}P\s.*') with open(sys.argv[1]) as file: for line in file: line = line.strip() #Consider striping the line if it's necessary if regex.search(line): print(line)
with open ('sampleID.txt', 'r') as inF: for line in inF: if 'Sample ID:' in line: SID = line.split(':')[1].strip()
(?P<comment>/\*\*(?:(?!/\*\*).)*?\*/)(?:(?:(?!\*/).)*?)(?=public boolean methodX)
p = subprocess.Popen(['sed', '-l', 's/a/x/g'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
from collections import Counter def getRecipe(name, quantity=1): if not name in recipes: return Counter({name: quantity}) subitems = recipes[name]["ingredients"]["input"] return sum((getRecipe(item, quantity) for item in subitems), Counter()) print repr(dict(getRecipe("solar_panel"))) # => {'copper': 39, 'refined_iron': 10, 'glass': 3, # 'rubber': 78, 'cobblestone': 8, 'tin': 4, # 'coal_dust': 3, 'nothing': 10, 'redstone': 6}
parser.add_argument('-b', '--blacklist', nargs='+', type=str) ... args = parser.parse_args() main(**vars(args))
venv=venv currentvenv="" if [[ $VIRTUAL_ENV != "" ]] then # Strip out the path and just leave the env name currentvenv="${VIRTUAL_ENV##*/}" fi if [[ "$currentvenv" != "$venv" ]] then echo "Switching to environment: $venv" workon $venv #else # echo "Already on environment $venv" fi
class main(object): # use new-style classes! def __init__(self): self.params = {} class a(main): def __init__(self): super(a, self).__init__() self.params['test'] = "111aa" print self.params class b(main): def __init__(self): super(b, self).__init__() self.params['be'] = "222bbb" print self.params
In [17]: import pandas as pd df=pd.DataFrame({'data1':data1, 'data2':data2, 'data3':data3}) df.plot(kind='bar', stacked=True) Out[17]: <matplotlib.axes.AxesSubplot at 0x108f2b050>
new_dict = {} >>> db = open("/home/ak/Desktop/python_files/smalltext.txt", 'r') for line in db: if '>' in line: key = line.strip() #Strips the newline characters new_dict[key]='' else: new_dict[key] += line.strip()
@app.route('/') def show_entries(): entries = get_all_entries() for entry in entries: entry['text'] = markdown.markdown(entry['text'], extensions=['codehilite']) return render_template('list_entries.html', entries=entries)
data = [1,2,3,4,5,6] out = open("output.txt", "w") for i in data: out.write(str(i) + "\n") out.close()
ax = gca() ax.set_aspect(2) plt.draw()
class UploadImageForm(forms.ModelForm): class Meta: model = GallryImage ... # Sample view def upload_file(request): if request.method == 'POST': form = UploadImageForm(request.POST, request.FILES) if form.is_valid(): form.save() return HttpResponseRedirect('/success/url/') else: form = UploadImageForm() return render_to_response('upload.html', {'form': form})
DATABASE_ROUTERS = ['map.models.MapRouter']
import numpy as np def in1d_tol(a,b,tol): d=np.abs(a-b[:,np.newaxis]) return np.any(d<=tol, axis=0) a = np.array([1.011, 2.000, 3.001]) b = np.array([1.01, 3.00]) c = in1d_tol(a,b,0.01) print c
class VideoForm(forms.ModelForm): ... def __init__(self, *args, **kwargs): super(VideoForm, self).__init__(*args, **kwargs) self.fields['tags'].widget.attrs['maxlength'] = 5
for key, vals in temp_dict.items(): if re.search('|'.join(vals)): #do stuff here
>>> import re >>> >>> pattern = re.compile( ... "(?<=\:)" # Look for : ... " " # Match space ... "([0-9]+)" # Number to keep \1 ... "(?:\.0)?") # Optional .0 >>> pattern.sub("\\1", "Name: 33 KG: 5.0 Name: 19 KG: 424.0 Name: 93 KG: 17.0") 'Name:33 KG:5 Name:19 KG:424 Name:93 KG:17'
{{ my_string_with_n|linebreaksbr }}
@app.route("/uploads", methods=["GET", "POST"]) def upload_handler(): # Handle the upload here pass
>>> import inspect >>> x = [f for n, f in inspect.getmembers({}) if n == 'keys'][0] >>> x <built-in method keys of dict object at 0x7fd9c3027710> >>> inspect.isbuiltin(x) True >>> inspect.isroutine(x) True
def num(entry): number = Decimal(0.00) if not entry else Decimal(entry) return number
docs_to_dump = Document.objects.all().order_by('court').iterator()
def loopInLabel(self, newsfeedData): lines = [] for item in newsfeedData: try: a = ("Name: " + item['name'] + '\n' + "Message: " + item['message'] + '\n' + "Description: " + item['description'] + '\n') lines.append(a) except KeyError: pass return " | ".join(lines)
with open('file.txt', 'r') as f: print(len(f.readlines()))
import motor from bson.objectid import ObjectId cursor = collection.find({ "_id": ObjectId('54b89db31d41c8159742d65a') })
with open("StaffData.txt", "wt") as file: for contacts in staffList : file.write("\n".join(str(contacts).split(' - ')) + "\n")
price = models.DecimalField(_(u'Price'), decimal_places=2, max_digits=12, validators=[MinValueValidator(Decimal('0.01'))])
# Import required alphabet from Bio.Alphabet import IUPAC # Pass imported alphabet as an argument for `SeqIO.parse`: records = list(SeqIO.parse(handle, 'fasta', IUPAC.extended_protein))
import os // ... data_dir = os.path.join(os.path.dirname(__file__), 'data')
minimize(func, [-1.0,1.0], args=(-1.0,), jac=func_deriv, constraints=cons, method='SLSQP', options={'disp': True})
>>> rows = [ ' '.join(map(str, range(n, n * n + 1, n))) for n in range(1, 8) ] >>> print('\n' + '\n'.join(rows)) 1 2 4 3 6 9 4 8 12 16 5 10 15 20 25 6 12 18 24 30 36 7 14 21 28 35 42 49 >>>
procedure Walk(node, route) if node = nil then //leaf node is reached output(route) else Walk(node.left, route + node.name) Walk(node.right, route + node.name) Walk(root, empty)
import re re.sub(r'\d+?', lambda m: str(int(m.group(0))+resline), YOUR_STR)
b = [[-1, 2], [-2, 1], [0, 4], [3, 5], [-3, 1], [-10, -7], [6, 8]] b.sort() result = [] current = b[0] for interval in b[1:]: if current[1] >= interval[0]: current[1] = interval[1] else: result.append(current) current = interval result.append(current) print(result) # [[-10, -7], [-3, 5], [6, 8]]
import pandas as pd import re index=[1609,1610,1611,1612,1613,1700] data = {'season':[2010,2010,2010,2010,2010,2010], 'seed':['W01','W02','W03','W04','W05','L16a'], 'team':[1246,1452,1307,1458,1396,0000]} df = pd.DataFrame(data,index=index) df['frequency'] = df['seed'].apply(lambda x: int(re.sub('\D', '', x))) df2 = df[['team','frequency']].set_index('team')
import sys import threading last_line = '' new_line_event = threading.Event() def keep_last_line(): global last_line, new_line_event for line in sys.stdin: last_line = line new_line_event.set() keep_last_line_thread = threading.Thread(target=keep_last_line) keep_last_line_thread.daemon = True keep_last_line_thread.start()
actual_clients_emails, actual_client_names = zip( *[(partner.email, partner.name) for partner in op_client.ResPartner.browse([])])
>>> urllib.quote('https://dl.dropbox.com/u/94943007/file.kml', '') 'https%3A%2F%2Fdl.dropbox.com%2Fu%2F94943007%2Ffile.kml'
import sys import re def ordnaText(text): text = text.lower() text = re.sub(u'\W', '', text, flags=re.UNICODE) if text.isalnum() == True: return text userinput = raw_input('....') userinput = userinput.decode(sys.stdin.encoding) something = ordnaText(userinput)
>>> from collections import Counter >>> l = [2L, 14L, 14L, 14L, 11L, 2L, 2L, 11L, 14L, 11L, 14L, 2L, 2L, 14L] >>> c = Counter(l) >>> c Counter({14L: 6, 2L: 5, 11L: 3}) >>> c[14L] 6
chapters = filter(None,map(str.strip,text.split("\n\n")))
appstats_TZOFFSET = 0
from distutils import setup import os for path in [my_package_directories]: filename = os.path.join(pagh, '__init__.py') if not os.path.exists(filename): init = open(filename, 'w') init.close() setup( ... )
class A(QObject): def __init__(self): self.counter = 0 Timer.singleShot(100, self.domath()) Slot() def domath(self): # do the computation self.counter += 1 if self.counter != 10: Timer.singleShot(100, self.domath()) else: self.counter = 0;
df[(df.change_date <= df.post_start)] .sort_values( by=['person_ref','post_number','post_start','change_date'], ascending=[1,1,1,0]) .groupby(['person_ref','post_number']) .first().reset_index()
In [32]: import string In [33]: string.punctuation Out[33]: '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
In[891]: %timeit df.fillna(df2) 1000 loops, best of 3: 333 µs per loop In[892]: %timeit df.combine_first(df2) 100 loops, best of 3: 2.15 ms per loop In[894]: (df.fillna(df2) == df.combine_first(df2)).all().all() Out[890]: True
import pandas as pd #open files as pandas datasets file1 = pd.read_csv(filepath1, sep = '\t') file2 = pd.read_csv(filepath2, sep = '\t') #merge files by column 'Gene' using 'inner', so it comes up #with the intersection of both datasets file3 = pd.merge(file1, file2, how = 'inner', on = ['Gene'], suffixes = ['1','2']) file3.to_csv(filepath3, sep = ',')
from sqlalchemy.ext.hybrid import hybrid_property class Person(Base): # ... @hybrid_property def name(self): return '{0} {1}'.format(self.first_name, self.last_name) @name.setter def name(self, value): self.first_name, self.last_name = value.split(' ', 1) @name.expression def name(cls): return db.func.concat(cls.first_name, ' ', cls.last_name)
>>> count = 148833 >>> print(str(count)[0:2]) 14
$ python >>> _ = 3 >>> _ 3 >>> 5 5 >>> _ 3 >>> del _ >>> 6 6 >>> _ 6
import numpy as np l = np.array([[1, 3], [5, 6], [7, 2], [9, 9]]) ind = np.lexsort((l[:,0], l.sum(axis=1))) sorted_l = l[ind]
{ "display_name": "Python 2", "language": "python", "argv": [ "/Users/sonium/anaconda/envs/python2/bin/python2.7", "-m", "IPython.kernel", "-f", "{connection_file}" ], "env":{"PYTHONHOME":"/Users/sonium/anaconda/envs/python2"} }
In [52]: import pandas as pd In [53]: dates = pd.DatetimeIndex(['2010-10-17', '2011-05-13', "2012-01-15"]) In [54]: dates.year Out[54]: array([2010, 2011, 2012], dtype=int32)
class classprop(object): def __init__(self, f): self.f = classmethod(f) def __get__(self, *a): return self.f.__get__(*a)() class buh(object): @classprop def bah(cls): return 23 print buh.bah
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax = fig.add_subplot(111) ax.plot(np.arange(300)) # Get current tick locations and append 271 to this array x_ticks = np.append(ax.get_xticks(), 271) # Set xtick locations to the values of the array `x_ticks` ax.set_xticks(x_ticks) plt.show()
print ", ".join([entry['name'] + " is " + str(entry['age']) + " years old" for entry in mylist])
env = jinja2.Environment( loader=jinja2.FileSystemLoader(template_path)) env.filters['default_if_none'] = default_if_none # a function tmpl = env.get_template(filename) tmpl.render(**context)
>>> import ctypes >>> import ctypes.wintypes >>> >>> ctypes.windll.kernel32.GetLargestConsoleWindowSize.restype = ctypes.wintypes._COORD >>> coord = ctypes.windll.kernel32.GetLargestConsoleWindowSize(ctypes.windll.kernel32.GetStdHandle(-11)) >>> print(type(coord)) <class 'ctypes.wintypes._COORD'> >>> print(coord.X, coord.Y) 160 81
>>> def sort(list): ... return sorted(list, key=(lambda (a, b): ((a - b), a)), reverse=True) ... >>> sort([(75, 10), (88, 4), (93, 9), (80, 5), (94, 10)]) [(94, 10), (93, 9), (88, 4), (80, 5), (75, 10)]
with open(filename, 'a') as out: out.write(var + '\n')
import itertools def perm(n, seq): for p in itertools.product(seq, repeat=n): file.write("".join(p)) file.write("\n") perm(4, "0123")
from collections import defaultdict votes = defaultdict(int) vote = raw_input("Enter who you vote for: ") votes[vote] += 1
from collections import defaultdict adj_list = defaultdict( set ) for filename in os.listdir( <dir> ): with open( filename ) as theFile: for line in theFile: # parse line into filename, say 'target' adj_list[ filename ].add( target )
def resource_path(relative): return os.path.join( os.environ.get( "_MEIPASS2", os.path.abspath(".") ), relative ) # in development >>> resource_path("gui.glade") "/home/shish/src/my_app/gui.glade" # in deployment >>> resource_path("gui.glade") "/tmp/_MEI34121/gui.glade"
>>> np.all(df['series1'] == df['series5']) True >>> np.all(df['series1'] == df['series3']) True >>> np.all(df['series2'] == df['series4']) True
StreamHub hub = new StreamHub(); hub.connect("http://myserver.com/"); hub.subscribe("newsfeed", function(sTopic, oData) { alert("new news item: " + oData.Title); });
numbers = '0123456789' next = raw_input('> ') isanumber = True for character in next: if character not in numbers: isanumber = False break
MIDDLEWARE_CLASSES = ( # Make sure djangosecure.middleware.SecurityMiddleware is listed first 'djangosecure.middleware.SecurityMiddleware', ) + MIDDLEWARE_CLASSES
for ele in itertools.product("0123456789abcdefghijklmnopqrstuvwxyz",repeat=6): print("".join(ele)) 000000 000001 000002 000003 000004 000005 000006 000007 000008 000009 00000a 00000b 00000c 00000d 00000e 00000f 00000g 00000h 00000i 00000j 00000k 00000l 00000m 00000n 00000o 00000p 00000q 00000r 00000s 00000t 00000u 00000v 00000w 00000x 00000y ...............
import collections with open('topics.txt') as f: d = collections.defaultdict(list) for line in f: value, *keys = line.strip().split('~') for key in filter(None, keys): d[key].append(value)
import re def RemoveBannedWords(toPrint,database): statement = toPrint pattern = re.compile("\\b(Good|Bad|Ugly)\\W", re.I) return pattern.sub("", toPrint) toPrint = 'Hello Ugly Guy, Good To See You.' print RemoveBannedWords(toPrint,bannedWord)
BATCH_SIZE = 10 INSERT_STMT = 'INSERT INTO T (id, fld1) VALUES (?, ?)'; BATCH_STMT = 'BEGIN BATCH' for i in range(BATCH_SIZE): BATCH_STMT += INSERT_STMT BATCH_STMT += 'APPLY BATCH;' prep_batch = session.prepare(BATCH_STMT)
f = lambda x: f1(f2(x))
@task def do_job(path, task_id=None): cache.set(task_id, operation_results)
(?<=##)[^#]*(?=##)
after = "" food_choice=input("Would you like to eat a burrito or a pizza? ") if food_choice=='burrito': print('You should go to a Mexican restaurant!') if food_choice=='pizza': print('You should go to an Italian restaurant!') after = 'Don't forget to save me a slice of pizza!' print('Everyone loves to eat!') print('Have a good time at your restaurant!') if after: print(after)
import random def rand_with_parity(start, end): return 2*random.randint(0, (end-start)//2)+start myfile = open('numbers.txt', 'w') for count in range(3,8,1): file_size = rand_with_parity(5,19) myfile.write(str(file_size) + '\n') myfile.close()
function strip_punctuation(s) { return s.replace(/[,.":;!%$]/g, ""); }
import matplotlib.pyplot as plt linestyle = dict(color='red', marker='^', linestyle='--', linewidth=2) fig, ax = plt.subplots() line, = ax.plot(range(10)) plt.setp(ax, xlim=[-1, 12], ylim=[-5, 12], xlabel='X-axis') plt.setp(line, **linestyle) plt.show()
pattern = r"\w.\d{3}\-\w+.(jpg|Jpg|JPG)" for filename in FileList: if displaymatch(re.match(pattern, filename)) is None: os.rename(filename, "P." + str("{0:0=3d}".format(num)) + "-" + filename) num+= 1
with open('products.csv',newline='') as f: reader = csv.reader(f, delimiter='\t') found = False for line in f: if code in line: print(line) found = True break if not found: f = open("reciepts","a") f.write(code) f.write("Product Not Found") f.close()
from copy import deepcopy company_ids = [1,2,3] seller_ids = [[0, False, { u'company_id': 4}]] result = [] for company in company_ids: for i in xrange(0, len(seller_ids)): mycopy = deepcopy(seller_ids[i]) mycopy[2]['company_id'] = company result.append(mycopy) print result
text = re.sub(r'james', str(x), text, count=1)
import json with open('yourfile') as infile: for user, intlist in json.load(infile).iteritems(): for item in intlist:
class Name(object): def __init__(self, *params): self.__dict__.update(DEFAULT_PARAMS) self.__dict__.update(params) b = Name(position=[1,2]) print b.position
>>> for i, season in enumerate(['Spring', 'Summer', 'Fall', 'Winter']): ... print i, season 0 Spring 1 Summer 2 Fall 3 Winter
def addToList(self, str_to_add): if str_to_add not in self.list_of_strings: self.list_of_strings.append(str_to_add)
root.findall('.//en-todo')
Input text : "She is working at facebook" Received by tagger using tag_text function : "She is working at <B-company>facebook</B-company>"
def oddsquare(numbers): for n in numbers: if n % 2 == 1: print n**2 else: return "" while True: startingnumber1 = int(raw_input('Enter your starting number:')) endingnumber = int(raw_input('Enter your ending number:')) + 1 list1 = range(startingnumber1, endingnumber) oddsquare(list1)
from bs4 import BeautifulSoup xml2 = """ <helloWorld> :-) </helloWorld> """ soup = BeautifulSoup(xml2, "xml") for x in soup.find_all("helloWorld"): print x
def mysend(self, msg): totalsent = 0 while totalsent < MSGLEN: sent = self.sock.send(msg[totalsent:]) if sent == 0: raise RuntimeError("socket connection broken") totalsent = totalsent + sent
x = x1 + (x2-x1) * t y = y1 + (y2-y1) * t
def selectFile(): lineEdit.setText(QFileDialog.getOpenFileName()) pushButton.clicked.connect(selectFile)
from collections import Counter def find_duplicates(master): cn = Counter(feature for organism in master for feature in set(organism)) with open("duplicates_list.txt", "wt") as t: for k,v in cn.items(): if v >= 10: t.write("{}\n".format(k))
result = word.replace('abc','').replace('xyz','')
[a[i] for i in (1,2,5)] # [11, 12, 15]
SELECT B.NO, B.v1 AS V1, A.a2 AS V2 FROM A INNER JOIN B WHERE A.a1 = B.v1;
>>> texts = [text1, text2] >>> counts = [Counter(text) for text in texts] >>> all_words = sorted(set().union(*counts)) >>> vecs = [[count.get(word, 0) for word in all_words] for count in counts] >>> vecs[0] [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1] >>> vecs[1] [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1]
x = np.linspace(0, 100, 10)[:, np.newaxis]
if n >= 720 and n < 1000: gt = 2*(( n - 720 ) / 20) + 41 elif n >= 1000 and n < 2000: gt = 3*(( n - 1000 ) / 20) + 67
;; (define-key map (kbd "TAB") 'py-indent-or-complete) (define-key map (kbd "TAB") 'py-indent-line)
>>> import datetime >>> s = "Apr 18 17:19:42" >>> t = datetime.datetime.strptime(s, "%b %d %H:%M:%S") >>> t datetime.datetime(1900, 4, 18, 17, 19, 42) >>> t = t.replace(year = 2012) >>> n = datetime.datetime.now() >>> n datetime.datetime(2012, 4, 20, 10, 21, 42, 165657) >>> d = n-t >>> d.total_seconds() 147720.165657
In [66]: cols = df.columns In [67]: num_cols = df._get_numeric_data().columns In [68]: num_cols Out[68]: Index([u'0', u'1', u'2'], dtype='object') In [69]: list(set(cols) - set(num_cols)) Out[69]: ['3', '4']
REUSE_DB=1 ./manage.py test
itr = iter(biglist) while True: lists = itertools.islice(((i, i/5*2, i/5) for i in itr if 7 < i/5 < 69), S) x_smallist, y_smallist, z_smallist = zip(*lists) if len(x_smallist) == 0: break # reached the end of biglist # do stuff with your small lists
from kivy.app import App from kivy.uix.widget import Widget from kivy.uix.textinput import TextInput from kivy.properties import VariableListProperty class MyTextInput(TextInput): padding = VariableListProperty(['24dp', '48dp']) class MyApp(App): def build(self): return MyTextInput(text='This is an example text', multiline=False) if __name__ == '__main__': MyApp().run()
def checkNeighbours(x,y,matrix): neighbourValues = [matrix[x_][y_] for x_ in range(x-1,x+2) for y_ in range(y-1,y+2) if (0 <= x_ < len(matrix) and 0 <= y_ < len(matrix) and (x_ != x or y_ != y))] return neighbourValues.count('O')
re.findall("((?<=^\[)[^[\]]+(?=\]$)|^[INTEXT]{3}\. .+?$)", text)
class User(db.Model): name = db.StringProperty() class ServiceOAuthAccess(db.Model): user = db.ReferenceProperty(User) service_name = db.StringProperty(choices=('Dropbox', 'Box', 'Drive')) ....
perl -ne 'if (/#region/../#endregion/) {print if /#(?:end)?region/;next};print' file
>>> [i[1] for i in sorted(zip(L, range(4)))] [1, 0, 2, 3]
x1 = [] x2 = [] x3 = [] for y in range(1, 4): x = globals()['x' + str(y)] x.append("string")
>>> from itertools import compress >>> l = ['a', 'b', 'c'] >>> b = [True, False, False] >>> list(compress(l, b)) ['a']
self.actionAbout.triggered.connect(self.openAbout)
employees_output_list = [] for emp in emp_list: name_rank_str = "%s (%s)" % (emp.first_name, emp.rank) emp_dict = { "id": emp.pk, "label": name_rank_str, "value": name_rank_str, } employees_output_list.append(emp_dict) return HttpResponse(json.dumps(employees_output_list))
lets go running command running command ^C Attempting to cancel pending commands.. One command was already running, couldn't cancel One command was already running, couldn't cancel One command was already running, couldn't cancel One command was already running, couldn't cancel One command was already running, couldn't cancel Cancelled one command Cancelled one command Cancelled one command Cancelled one command Cancelled one command Waiting for running processes to finish.. running command running command finished command finished command running command finished command Shutdown complete
def get_dangerous_query(): # do some database access # For a demo, just return what we know the table contains return "SELECT * FROM TABLE WHERE COL1 = '%s' and COL2 = '%s'" qry = get_dangerous_query() % (var1, var2)
>>> d = {'x': 1, 'y': 2, 'z': 3} >>> max(d, key=d.get) 'z'
mylist = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'] i = 0 while i <= 27: print mylist[i % len(mylist)] i +=1
[ [{"test": "test"}], [{"test":"test"}] ]
np.argwhere(a1!=a2) np.where(a1!=a2)
gc.collect() oldcounts = gc.get_counts() del last_reference_to_list gc.collect() newcounts = gc.get_counts() print(oldcounts, newcounts)
... if cursor and table_name_converter(model._meta.db_table) in table_names: # Drop the table now output.append('%s %s %s;' % (style.SQL_KEYWORD('DROP TABLE IF EXISTS'), #<-! style.SQL_TABLE(qn(model._meta.db_table)), style.SQL_KEYWORD('CASCADE'))) #<-! ...
awk 'BEGIN{FS=OFS=";"} {for (i=7;i<=NF;i++) gsub(/Sof_|_%yyyy%mm%dd%/, "", $i) } 1' file 92520536843;Sof_voya_Faible_Email_am;EMAIL;28/01/2015;1;0;0;voya_Faible_Email_am;30/01/2015;voya_Faible_Email_Relance_am 92515196529;Sof_trav_Fort_Email_pm_%yyyy%mm%dd%;EMAIL;05/02/2015;1;0;0;trav_Fort_Email_pm;09/02/2015;Export Trav_Fort Postal
func = getattr(_tmp, func_name)
import numpy as np from scipy.spatial import cKDTree n_voronoi, n_test = 100, 1000 voronoi_points = np.random.rand(n_voronoi, 2) test_points = np.random.rand(n_test, 2) voronoi_kdtree = cKDTree(voronoi_points) test_point_dist, test_point_regions = voronoi_kdtree.query(test_points, k=1)
def merge(key, l1, l2): k1 = { d[key] for d in l1 } k2 = { d[key] for d in l2 } keys = k1.intersection(k2) f1 = [ d for d in l1 if d[key] in keys ] f2 = [ d for d in l2 if d[key] in keys ] return f1, f2
def calc_length(start, end, step): return (end - start - 1) // step + 1 for i in range(start, end): calculated = calc_length(start, i, step) empirical = len(range(start, i, step)) assert calculated == empirical, "{} {}".format(calculated, empirical)
from flask import Flask app = Flask(__name__) @app.route("/") def hello(): return "Hello World!" if __name__ == "__main__": app.run()
def wrapper(func): @functools.wraps def wrap(*args, **kwargs): # do stuff to update call graph return func(*args, **kwargs) return wrap g = globals() for name, value in g.items(): if callable(value): g[name] = wrapper(value)
>>> from datetime import datetime # the function datetime from module datetime >>> sum(datetime(year, month, 13).weekday() == 4 for year in range(1950, 2051) for month in range(1,13)) 174
import socket import BaseHTTPServer from oauth2client.tools import ClientRedirectServer, ClientRedirectHandler port_number = 0 host_name = 'localhost' try: httpd = ClientRedirectServer((host_name, port_number), ClientRedirectHandler) except socket.error, e: print "socket error: " + str(e) else: print "The server is running on: port " + str(httpd.socket.getsockname()[1]) print "and host_name " + host_name httpd.serve_forever()
>>> class Foo(int): ... def __init__(self, value=0): ... print self, type(self) ... self = 'foobar' ... print type(self) ... >>> foo = Foo(10) 10 <class '__main__.Foo'> <type 'str'> >>> print foo, type(foo) 10 <class '__main__.Foo'>
from .utilities import function_name
cur = g.db.execute('''' SELECT * from Recipe_tbl ORDER BY some_column DESC LIMIT 30 ''')
z = zipfile.ZipFile(file_name) z.extractall()
import numpy as np #here y2 is the new extrapolated array y2 = np.interp(x2,x1,y1)
os.makedirs(log_dir, 0o664)
import codecs f = codecs.open('unicode.rst', encoding='utf-8') for line in f: print repr(line)
class Foo(float): def __new__(self, value, extra): return float.__new__(self, value) def __init__(self, value, extra): float.__init__(value) self.extra = extra foo = Foo(1,2) print(str(foo)) 1.0 print(str(foo.extra)) 2
def _tot_get_deposit(self, cr, uid, ids, name, arg, context=None): res = {} results = [] for deposit in self.browse(cr, uid, ids, context=context): sum = 0.0 sum = A - B results.append( sum ) return (res,results)
def in_both(s1, s2): s1 = s1.lower() s2 = s2.lower() s1_chars = set(s1) s2_chars = set(s2) result = sorted(s1_chars.intersection(s2_chars)) return result
1 / (2 * n_samples) * ||y - Xw||^2_2 + alpha * l1_ratio * ||w||_1 + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2
import glob import os for f in glob.glob("*.obj"): os.remove(f)
wrapped_list = np.empty((3,),dtype=object) wrapped_list[:] = my_list2
d = math.sqrt(mouse_x * mouse_x + mouse_y * mouse_y) self.slope_x = mouse_x / d - 300 self.slope_y = mouse_y / d - 400
for power in range(n): amt=(math.pow(2,power)) print('*'*int(amt)) for power in range(n-1)[::-1]: amt=(math.pow(2,power)) print('*'*int(amt))
class Language(forms.Form): language = forms.ModelChoiceField(queryset=Category.objects.all(), widget=forms.Select(attrs={'onchange':'ajaxfunction()'}))
from django.core.cache import cache def get_user(request): user_id = request.GET.get("user_id") user = cache.get("user_id_%s"%user_id) if user is None: user = User.objects.get(pk=user_id) cache.set("user_id_%s"%user_id, user, 10*60) # 10 minutes ... .. .
>>> (1 == 1) is True True >>> (1 == 0) is False True
def __init__(self, *args, **kwargs): super(FormClass, self).__init__(*args, **kwargs) if self.object: # in case of ModelForm self.fields['extra_field'] = forms.CharField(required=False) self.fields['other_field'].required = True del(self.fields['non_editable_field'])
This shall help you make it happen as you wish: for tick in ax.xaxis.get_major_ticks(): tick.tick1line.set_markersize( 0 ) tick.tick2line.set_markersize( 0 ) # ------------------------------------------------ # a demonstrator code, not a production one # ------------------- tick.label1.set_horizontalalignment( 'center' ) tick.set_pad( 2.5 * tick.get_pad() )
while done: quit = str(raw_input ("Do you want to quit? ")) if quit == 'y' : done=False else: attack = str(raw_input("Does your elf attack the dragon? ")) if attack=='y': print "Bad choice, you died." done=False
try: import cPickle as pickle # Improve speed except ValueError: import pickle file_temp = open('temp', 'w') pickle.dump(scenes, file_temp) file_temp.close()
>>> print s close 187.56 high 187.73 low 187.54 open 187.70 volume 1922600.00 Name: 2014-05-09 00:00:00, dtype: float64 >>> print s.to_frame().T close high low open volume 2014-05-09 187.56 187.73 187.54 187.7 1922600
soup = BeautifulSoup(source, 'xml')
import numpy as np # requires NumPy 1.7 (!) def select_random(object_dict, n): keys = object_dict.keys() rate = np.array([x.rate for x in keys]) prob = rate / rate.sum() return np.random.choice(keys, size=n, replace=True, p=prob)
>>> d = {'snap-c8': '2015/12/02', ..., 'snap-b9': '2015/12/08'} >>> min(d, key=d.get) 'snap-c8'
acceptableInput = re.compile(r"\d{3}[A-Z]") paddedInput = i.upper().zfill(4) if acceptableInput.match(paddedInput): # do something else: # reject
class Foo(object): def bar(self, name): return name def bar2(self, attr, value): print attr, value def __getattr__(self, attr): return self.bar(attr) def __setattr__(self, attr, value): self.bar2(attr, value) foo = Foo() print foo.name foo.name = 'not name'
np.array(coefs[:8]+[1]).reshape((3,3))
def timer(m): i = 0 while True: sys.stdout.write('\r%s\b%d' % (m,i)) sys.stdout.flush() sleep(1) sys.stdout.write('\r \b') i = i + 1
from threading import Thread class Worker(Thread): def __init__(self): Thread.__init__(self) #Runs the thread's constructor #Method that is run when the new thread starts def run(self): #Whatever data processing you have to do can go here while True: print "Hello from Worker" w = Worker() w.start() #Starts a new thread which executes the object's run function
import numpy as np import matplotlib.pyplot as plt x = np.arange(100) y = np.arange(100) # Colors whether or not x+y is a multiple of 5 c = (x + y)%5 == 0 # Use 'jet' colormap for red/blue. plt.scatter(x, y, c=c, cmap='jet')
new Buffer( (uid+'A==') .replace(/\+/g, '[') .replace(/\//g, ']') , 'base64').toString('ascii')
class ConvertingDateTimeFeild(models.DateTimeField): def get_prep_value(self, value): return str(datetime.strptime(value, FORMAT_STRING))
import time time.sleep(5) #wait 5 seconds
def func(row): if row['mobile'] == 'mobile': return 'mobile' elif row['tablet'] =='tablet': return 'tablet' else: return 'other' df['combo'] = df.apply(func, axis=1)
import re try: print int(re.compile("(\d+)").match('12//').group(1)) except: print "there was no number"
newChaps = sorted(chaps, key=lambda obj: obj.version)
other_function(callback=functools.partial(the_other_function, param1='foo', param2='bar'))
def row_top(): print("|--|--|--|--|--|--|--|--|") def cell_left(): print("| ", end='') def cell_data(isQ): if isQ: print("X", end='') else: print(" ", end='') def row(c): row_top() row_data(c) print("|")
for i in range(1,len(word)+1): print(word[:i]) for i in range(len(word)-1,0,-1): #the third argument of range is step, and -1 causes range to step backwards print(word[:i])
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(self.br._ua_handlers["_cookies"].cookiejar)) opener.open(imgurl)
from PIL import ImageGrab import win32gui toplist, winlist = [], [] def enum_cb(hwnd, results): winlist.append((hwnd, win32gui.GetWindowText(hwnd))) win32gui.EnumWindows(enum_cb, toplist) firefox = [(hwnd, title) for hwnd, title in winlist if 'firefox' in title.lower()] # just grab the hwnd for first window matching firefox firefox = firefox[0] hwnd = firefox[0] win32gui.SetForegroundWindow(hwnd) bbox = win32gui.GetWindowRect(hwnd) img = ImageGrab.grab(bbox) img.show()
import os pid = os.getppid() with open("/proc/%s/cmdline" % pid) as f: print f.readline()
>>> class A: ... def a(self): ... print "Hello" ... >>> B = [A() for i in xrange(10)] >>> map(lambda a: a.a(), B) Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello [None, None, None, None, None, None, None, None, None, None]
void* PyArray_GETPTR3(PyObject* obj, <npy_intp> i, <npy_intp> j, <npy_intp> k)
avg_img = Image.new('L', img.size, 'black')
var callbacks = { 'output': $.proxy(output_area.handle_output, output_area) };
from pyramid.traversal import ResourceTreeTraverser as BaseResourceTreeTraverser class ResourceTreeTraverser(BaseResourceTreeTraverser): VIEW_SELECTOR = "++" from pyramid.config import Configurator from pyramid.interfaces import ITraverser from zope.interface import Interface config = Configurator() config.registry.registerAdapter(ResourceTreeTraverser, (Interface,), ITraverser)
text = "You don't have enough funds, please click -><a href='%s'> here </a><- go to your account to add funds." % reverse('add_funds') raise forms.ValidationError(mark_safe(_(text)), code='insufficent_funds', )
"Example","Line\nWith A","Line Break"\n
for i in range(len(matrix)): for j in range(len(matrix[i])):
select statements from X where length (statements) < 13
xidx = (raw[:,0]-xrange[0]).astype(int) yidx = (raw[:,1]-yrange[0]).astype(int) Z[xidx, yidx] = raw[:,2]
array = [1,2,3,4,5] number = 10 if all(number % x == 0 for x in array): print "%s is dividable by %s" % (str(number), str(array))
data = [ ('1', ['45', '55', '56', '57']), ('2', ['200', '202', '202']), ('3', ['500', '501', '502']), ] for dataset_name, dataset in data: with open('{}.csv'.format(dataset_name), 'w') as outfile: for item in dataset: outfile.write('{}\n'.format(item))
plt.show()
a[5] + a[4] >> 2 + a[3] >> 4 + a[2] >> 6 + a[1] >> 8 + a[0] >> 10
from django.db.models import Count Games.objects.filter(owned=0).annotate(vote=Count('votes')).order_by('-vote')
import time, sys time.sleep(float(sys.argv[1]))
>>> x = [(1, 'al', 10), (2, 'bob', 20), (3, 'cam', 30)] >>> dict([(a, (b, c)) for a, b, c in x]) {1: ('al', 10), 2: ('bob', 20), 3: ('cam', 30)}
from selenium import webdriver browser = webdriver.Firefox() a = "hello" browser.execute_script("alert('"+a+"');")
from django.db.models.functions import Lower qs = Language.objects.annotate(code_lower=Lower('code')) # annotate each item in the queryset with the code_lower values = qs.values_list('code_lower', 'language') dictionary = dict(values)
for i in range(0,a.shape[0]): if (a[i,0] in b and a[i,1] in b and a[i,2] in b): print a[i]
L_Count = [0]*26
setup( # other arguments here... entry_points = { 'console_scripts': [ 'foo = my_package.some_module:main_func', 'bar = other_module:some_func', ], 'gui_scripts': [ 'baz = my_package_gui.start_func', ] } )
f1 = open("file1.txt","r") f2 = open("file2.txt","r") lines1 = f1.readlines() lines2 = f2.readlines() for i in lines2: inboth = False for x in lines1: if i == x: inboth = True if inboth != True: print("The line: \n",i,"\nis in file 2 but not file 1\n")
x = data['list_price'].astype('int64')
>>> m = max(a) >>> max_pos = [i for i, j in enumerate(a) if j == m] >>> random.choice(max_pos)
A classic usecase: class A(dict): def __getattr__(self, name): return self[name] a = A() # Now a.somekey will give a['somekey']
threads = [] for dev in run_list: proc = threading.Thread(target=go, args=[dev]) proc.start() threads.append(proc) for proc in threads: proc.join()
class SomeResource(Resource): class Meta(...): ... field_list_to_remove = [ 'field1', 'field2' ] ... def alter_list_data_to_serialize(request, to_be_serialized): for obj in to_be_serialized['objects']: for field_name in self._meta.field_list_to_remove: del obj[field_name] return to_be_serialized
foo = db.collection.find({ "data": { "$nin": [504, 400] }, })
distances = [[euclidean(points[a], points[b]), a, b] for a, b in itertools.combinations(range(len(points)), 2)] distances.sort() # distance is already first element, so no key function required
@app.route('/<path:path>') def catch_all(path): if path.endswith('/'): return handle_folder(path) else: return handle_file(path)
_('%(inviter)s invited %(invitee)s.') % {'inviter': 'Cathy', 'invitee': 'Thomas'} ↓↓↓↓↓↓↓ u'%(invitee)s 被 %(inviter)s 邀請了.'
>>> full_person = ia.get_person(actor[0].getID(), info=["filmography"]) >>> full_person.keys() ['name', u'producer', u'archive footage', u'self', u'writer', u'actor', u'soundtrack', 'in development', 'birth notes', u'thanks', 'akas', 'birth date', 'canonical name', 'long imdb name', 'long imdb canonical name'] >>> full_person["actor"] [<Movie id:1663202[http] title: ...]
>>> {key:x[key] for x in categories for key in x} # {'Travel': 5, 'Restaurant': 4, 'Movies': 2, 'Banking': 3, 'Housing': 1}
report.summary=render_template_string(r'<p>This is a report for {{ user.first_name }}.</p>', user)
def lcm(numbers): return map(__lcm, combinations( numbers, 2 ) )
import os open(os.path.join(os.path.abspath(__file__),'..','scraping.txt'),'w')
results = [] database = [] for line in open("database/db.hdb"): line = line.split(':') #You could then manage database in chunks? database.append(line) if len(database) > MAX: #dosomething with database list so far to get result results.append(process_database(database)) database = [] #do something now with individual results to make one result combine_results(results)
from matplotlib import pyplot as plt plt.boxplot([[1,4],[2,5],[3,6]], positions=[2,4,5.5])
br.select_form(nr=0) for control in br.form.controls: if control.type == "submit": control.disabled = True resp=br.submit()
finalValue = monteCarloPerf[arrayValue][0]
sections = db.relationship("NoteSection", secondary=NoteTypeToSectionMap.__table__, order_by=NoteTypeToSectionMap.__table__.c.position)
import file1
In [38]: a.levels Out[38]: Index([mixed, read, write], dtype=object) In [39]: a.labels Out[39]: array([1, 0, 2])
def __init__(self): ... QObject.connect(self.cbLayer, SIGNAL("currentIndexChanged(int)"), self.warn) def warn(index): QMessageBox.warning(self, "items: ", do_stuff(cbLayer.itemData(index)) ) def do_stuff(self, item): QMessageBox.warning(self, str(item))
marfoo = self.frobnoz.marfoos[0] marfoo.rotate(CLOCKWISE, degrees=90) if marfoo.is_cloudy(): self.purge_clouds(marfoo)
offline.replace(" ", " ")
index = "1-1 2-1 4-1 8-1 16-1 32-1 1-2 2-2 4-2 8-2" do for [i in index] { set output "qd-dPZ-z".i."nn.ps" plot "qd-dPZ-z".i."nn.ps" using 1:2 with lines }
import win32api drives = win32api.GetLogicalDriveStrings() drives = drives.split('\000')[:-1] print drives
date_realization_for_articles = Article.objects.values_list('date_realization', flat=True).distinct()
self.sizerTopRight.Hide(self.grid) self.sizerTopRight.Add(self.new_grid, 1) self.sizerTopRight.Show(self.new_grid) self.Layout()
>>> bisect.bisect_right(li, 0.3) - 1 3 >>> bisect.bisect_right(li, 0.05) - 1 0 >>> bisect.bisect_right(li, 0.9) - 1 6
firstline = next(infile) if testLogType1(firstline): print "appears to be log 1" # etc. for inputLine in infile: # process the rest of the lines
>>> import BeautifulSoup >>> html = '<b><a href="http://foo.com/">foo</a></b><img src="http://foo.com/bar.jpg" />' >>> bs = BeautifulSoup.BeautifulSoup(html) >>> bs.findAll(text=True) [u'foo']
>>>>type(r.text) <type 'unicode'>
import matplotlib.pyplot as plt from matplotlib.patches import Circle, Rectangle rect = Rectangle((-2,-2),4,2, facecolor="none", edgecolor="none") circle = Circle((0,0),1) plt.axes().add_artist(rect) plt.axes().add_artist(circle) circle.set_clip_path(rect) plt.axis('equal') plt.axis((-2,2,-2,2)) plt.show()
class Whatever(object): def __getstate__(self): state = self.__dict__.copy() del state['view'] return state
a = [(1, 'Pencil', '99', 25.0, 30.0, 5.0), (2, 'Marker', '40', 30.0, 20.0, -10.0)] a_new = [tuple(map(str, i)) for i in a] >>> print(a_new) [('1', 'Pencil', '99', '25.0', '30.0', '5.0'), ('2', 'Marker', '40', '30.0', '20.0', '-10.0')]
inAC.seek(0, 0)
from django import db db.reset_queries()
import cherrypy from cherrypy.lib.static import serve_file import os class Hello(object): @cherrypy.expose def index(self): return "Hello World" @cherrypy.expose def static(self, page): return serve_file(os.path.join(current_dir, 'static', page), content_type='text/html') if __name__ == '__main__': current_dir = os.path.dirname(os.path.abspath(__file__)) cherrypy.quickstart(Hello())
import datetime # standard python datetime module from django.db import models # Djangos time-zone-related utilities from django.utils import timezone class Name(models.Model): name = models.CharField(max_length=200) def __unicode__(self): # Python 3: def __str__(self): return str(self.name)
Returns a tuple of all items that overlap the given rectangle, or that are
SELECT ai_fld, name FROM MyTable ORDER BY ai_fld LIMIT 16 OFFSET 4
>>> q = u'\U00010000' >>> len(q) 2 >>> q[0] u'\ud800' >>> q[1] u'\udc00' >>> q u'\U00010000'
BEGIN TRANSACTION; select * from testtable; insert into testtable (age, name) values (90, 'George'); select * from testtable; ROLLBACK TRANSACTION;
import unittest from tempfile import mkdtemp class Test(unittest.TestCase): def setUp(self): self.tempdir = mkdtemp() os.chdir(self.tempdir) def tearDown(self): os.rmdir(self.tempdir) def testName(self): #Do the actual testing pass if __name__ == "__main__": unittest.main()
def product(*args, **kwds): # product('ABCD', 'xy') --> Ax Ay Bx By Cx Cy Dx Dy # product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111 pools = map(tuple, args) * kwds.get('repeat', 1) result = [[]] for pool in pools: result = [x+[y] for x in result for y in pool] for prod in result: yield tuple(prod)
>>> ll = ['listA_5_val','listB_15_val','listC_25_val'] >>> [int(x[6:-4]) for x in ll] [5, 15, 25] >>> [int(x.split('_')[1]) for x in ll] [5, 15, 25]
c = b.copy() c[...,0] += a
>>> dt = datetime.datetime(2015, 1, 28, 13, 53, 36) >>> format(dt, '%A, %B %d, %Y %H:%M:%S') 'Wednesday, January 28, 2015 13:53:36'
import Image import matplotlib.pyplot as plt import cStringIO from reportlab.pdfgen import canvas from reportlab.lib.units import inch, cm from reportlab.lib.utils import ImageReader fig = plt.figure(figsize=(4, 3)) plt.plot([1,2,3,4]) plt.ylabel('some numbers') imgdata = cStringIO.StringIO() fig.savefig(imgdata, format='png') imgdata.seek(0) # rewind the data Image = ImageReader(imgdata) c = canvas.Canvas('test.pdf') c.drawImage(Image, cm, cm, inch, inch) c.save()
import os path = '~/backup/backup_20121216.log' path = os.path.expanduser(path) with open(path, 'rb') as fp: text = fp.read() print text
from ctypes import * liblibrary = cdll.LoadLibrary('liblibrary.so') def py_library_hook(strings, n): return 0 # First argument to CFUNCTYPE is the return type: LIBRARY_HOOK_FUNC = CFUNCTYPE(c_int, POINTER(c_char_p), c_int) hook = LIBRARY_HOOK_FUNC(py_library_Hook) ptr = c_void_p.in_dll(liblibrary, 'library_hook') ptr.value = cast(hook, c_void_p).value
In [13]: "+".join(random.sample(sentences,3)) Out[13]: 'a+b+c'
sns.distplot(iris.petal_length, axlabel = 'Petal Length', hist_kws=dict(alpha=1))
:g/./norm! 2Wi^M
import glob import shutil dest = 'testfiles/' files = glob.glob('*/*test.csv') for file in files: shutil.move(file, dest)
x=[] y=[] for i in range(len(LIST)): for j in LIST[i]: x.append(j[0]) y.append(j[1])
import csv matrix_file = open('data1.csv') matrix_reader = csv.reader(matrix_file, delimiter="\t") header=matrix_reader.next()[0].split() #now header is ['WHO', 'THING1', 'THING2'] for i in matrix_reader: line=i[0].split() print line[0], "\t",header[1], "\t",line[1] print line[0], "\t",header[2], "\t",line[2]
[main_list[x] for x in indexes]
import re BAD_WORDS = ["spam", "ham"] BAD_WORDS_RE = re.compile(r"\b(%s)\b" % "|".join(BAD_WORDS)) for i, line in enumerate(open("file.txt").readlines()): words = set(BAD_WORDS_RE.findall(line)) if words: print "Found the following words on line %i: %s" % (i + 1, ", ".join(words)) print line
import re strength = 0 password = str(input("Please enter the password you wish to test the strength of.\n")) if re.search(r'[0-9]', password): strength += 1 if re.search(r'[A-Z]', password): strength += 1 if re.search(r'[a-z]', password): strength += 1 if strength == 3 print("Your password strength is STRONG.") if strength == 2: print("Your password strength is MEDIUM.") if strength == 1: print("Your password strength is WEAK.")
def setUp(self): # Assume test will fail self.test_failed = True def tearDown(self): if self.test_failed: self.save_screenshot() def test_something(self): # do some tests # Last line of the test: self.test_failed = False
In [28]: df.loc[(df['A'] == 1) & (df['B'] == 2),'C']=0 df Out[28]: A B C 0 1 1 200 1 1 1 433 2 1 1 67 3 1 1 23 4 1 2 0 5 1 2 0 6 1 2 0 7 1 3 30 [8 rows x 3 columns]
delim = len(keys) dict([(key, values[index*delim:index*delim + delim]) if index < len(keys) -1 else (key, values[index*delim:]) for index, key in enumerate(keys)])
def evalBooleans(value): """Assumes we're getting either booleans or strings!""" return (value if isinstance(value, bool) else value.lower() == "true") cb2 = evalBooleans(config.StartValues['Checkbox2']) self.Checkbox2.SetValue(cb2) self.Checkbox2TextCtrl.Enable(cb2) self.Checkbox2StaticText.Enable(cb2)
noc = int(input('Enter number of courses: ')) for i in range(1, noc+1): grade = input('Enter grade for course no. {}: '.format(i)) weight = input('Enter weight for course no. {}: '.format(i)) #do something with grade and weight here.
In [1]: import numpy as np In [2]: s = np.array([1, 2] * 3) In [3]: b = np.zeros(2 * s.size) In [4]: b[2::4] = s[::2] In [5]: b[3::4] = s[1::2] In [6]: b Out[6]: array([ 0., 0., 1., 2., 0., 0., 1., 2., 0., 0., 1., 2.])
(?P<browser>Android) (?P<major_version>\d*)\.(?P<minor_version>\d*);[^;]*;(?P<device>[ \w]+) Build\/
import readline defaultText = 'I am the default value' readline.set_startup_hook(lambda: readline.insert_text(defaultText)) res = raw_input('Edit this:') print res
import urllib # After you get the code response = salesforce_oauth_2.get_token(code) print urllib.urlopen(response['id'])
C = sorted(list(set(B) - set(A)))
img2 = img.copy() # Copy the image. img2[img2 < 128] = 0 # Set all values less than 128 to 0 (black). img2[img2 >= 128] = 255 # Set all values equal or greater than 128 to 255 (white). lbl, n = label(img2)
import math def str_with_err(value, error): digits = -int(math.floor(math.log10(error))) return "{0:.{2}f}({1:.0f})".format(value, error*10**digits, digits) print str_with_err(17.969860, 5.966e-05) # 17.96986(6) print str_with_err(0.01202, 0.001749) # 0.012(2)
import os all_files = os.listdir('.') # gets all files in current directory
query.filter("strftime('%w', access_date) = :dow").params(dow=0).all()
search_phrase = "Escherichia coli[organism]) AND (complete genome[keyword])" handle = Entrez.esearch(db="nuccore", term=search_phrase, retmax=100) result = Entrez.read(handle) handle.close() fetch_handle = Entrez.efetch(db="nuccore", id=results["IdList"], rettype="acc", retmode="text") acc_ids = [id.strip() for id in fetch_handle] fetch_handle.close() print(acc_ids)
news_item_obj.getImageCaption()
import socket s = socket.socket() s.bind(('192.168.1.100', 12345)) s = socket.socket() s.bind(('localhost', 12345)) s = socket.socket() s.bind(('0.0.0.0', 12345))
sudo apt-get install gdebi-core sudo gdebi python-tesseract_0.9-0.5ubuntu2_i386.deb
users_grpd_flattened = (pairs.groupByKey(). map(lambda (k, vals): "{0}, {1}".format(k, ' '.join(str(x) for x in vals))))
one_dir_up_path = os.path.abspath(os.path.join(os.getcwd(),'..'))
def find_two_closest(numbers): # most distant points: delta = max(numbers), min(numbers) for i, element in enumerate(numbers): for j, sec_element in enumerate(numbers): if i == j: continue if abs(sec_element - element) < abs(delta[0] - delta[1]): delta = sec_element, element return delta
headshape = (2,3,4) headdata = rand(2*3*4) head_shaped_short = headdata.reshape(headshape[::-1]).swapaxes(0,2)
for i in range(10000): chi1 = chisqg(y1,mod1,sd=0.1) chi.append(chi1)
In [8]: ar = np.array([[1,2,3], [4,5,6]]) In [9]: ar Out[9]: array([[1, 2, 3], [4, 5, 6]]) In [11]: ar[:, 1:] Out[11]: array([[2, 3], [5, 6]])
from django.db import connection with transaction.atomic(): cursor = connection.cursor() cursor.execute('SET TRANSACTION ISOLATION LEVEL REPEATABLE READ') # logic
resultquery = (Q(field1='val11') | Q(field1='val12')) & ... result = SomeModel.objects.filter(resultquery)
list_com_and_url = [] with open('my_file') as f: for line in f: name, url = line, next(f) list_com_and_url.append(zip(name, url))
from PIL import Image png_image = Image.open('input.png') saved_mode = png_image.mode saved_size = png_image.size # write string containing pixel data to file with open('output.data', 'wb') as outf: outf.write(png_image.tostring()) # read that pixel data string back in from the file with open('output.data', 'rb') as inf: data = inf.read() # convert string back into Image and display it im = Image.fromstring(saved_mode, saved_size, data) im.show()
import os partition = input("Which drive do you want to search? ") dirname = "XXX" subdirname = "YYY" for root, dirs, _fnames in os.walk(partition): if os.path.basename(root) != dirname: continue if not os.path.isdir(os.path.join(root, subdirname)): continue print("Found required folder:", root) break
MT = client.factory.create('MoneyTransfer') MT.transferDate = '01/01/01' MT.debitAccount = '01234567' MT.creditAccount = '87654321' MT.transferAmount = 1000000.00 TB = client.factory.create('TransferBalance') TB.transDetails = MT
from Tkinter import * # from tkinter import * (In Python 3.x) root = Tk() root.geometry('3000x3000+-100+-100') root.mainloop()
z = zip(x,y) #z = [(x[0],y[0]), ...] smaller = [(xval,yval) for (xval,yval) in z if xval<= 5] #those with x<=5 larger = [(xval,yval) for (xval,yval) in z if xval>=6] #those with x>=6 x1,y1 = map(list,zip(*smaller)) #break them apart and make the results lists, not tuples. x2,y2 = map(list,zip(*larger))
from poster.encode import MultipartParam iter_encode = MultipartParam.iter_encode.im_func # function object iter_encode.func_defaults = (8192,) # set new defaults, a 1-element tuple
with open('lyrics.conf') as f: data = file.read() verses = data.split('/') def build_blender_object(verse): # Put meaningful code here pass blender_objects = [build_blender_object(v) for v in verses]
import numpy as np import pandas as pd # set seed np.random.seed(42) df = pd.DataFrame(np.random.random(12).reshape(-1,3)) print('Original') print(df) df['log'] = df[1].apply(np.log) print('Modified') print df
mylist = ['BMW', 'Lamborghini', 'Porsche'] cars = Car.objects.filter(name__in=mylist) self.fields['possible_cars'].queryset = cars
class MyModel(models.Model): created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True)
arr2 = arr[[1, 0]] arr[...] = arr2[...]
s = s.replace("\\", "\\\\")
# for python 3.x from unittest.mock import patch # for python 2.x # from mock import patch import pandas as pd class test(unittest.TestCase): @patch('foo.pd.read_csv') def test(self, mock_read_csv): mock_read_csv.return_value = pd.DataFrame({'column1': Series([1., 2., 3.]),'column2': Series([4., 5., 6.])}) assert foo().getData()
QSpacerItem* verticalSpacer1 = new QSpacerItem(20, 40, QSizePolicy::Minimum, QSizePolicy::Expanding); label = new QLabel(Form); label->setAlignment(Qt::AlignCenter); QSpacerItem* verticalSpacer2 = new QSpacerItem(20, 40, QSizePolicy::Minimum, QSizePolicy::Expanding); verticalLayout->addItem(verticalSpacer1); verticalLayout->addWidget(label); verticalLayout->addItem(verticalSpacer2);
>python -m timeit -s "s='q w e r t y u i o p a s d f g h j k l'" "s.count(' ')+1" 1000000 loops, best of 3: 0.272 usec per loop >python -m timeit -s "s='q w e r t y u i o p a s d f g h j k l'" "len(s.split())" 1000000 loops, best of 3: 0.653 usec per loop
#To write to a file: with open("file.txt", "w") as f: f.write("Data!") #To read from a file: with open("file.txt", "r") as f: print(f.read())
txheaders = { "User-Agent": UA, "Host": nohttp_url } robots = urllib2.Request("http://" + ip + "/robots.txt", txdata, txheaders)
if any(tokens[1].endswith(domain) for domain in domainlist):
Example import random r = random.SystemRandom() s = "some string" print(r.choice(s)) # print random character from the string print(s[r.randrange(len(s))]) # same
print df.to_string(index=False)
import fields def metaclass__call__(cls, *args, **kw): instance = super(FieldModelMetaclass, cls).__call__(*args, **kw) # do something to the instance return instance FieldModelMetaclass.__call__ = metaclass__call__
MyClass() # and __del__ is called here MyClass() # f is closed ValueError: I/O operation on closed file
f1 = File.readlines('file1.txt') f2 = File.readlines('file2.txt') File.open('file3.txt','w') do |output_file| f1.zip(f2) do |a,b| output_file.puts a.sub('/article/','/article/'+b) end end
import ctypes # get the module handle and create a ctypes library object libHandle = ctypes.windll.kernel32.LoadLibraryA('mydll.dll') lib = ctypes.WinDLL(None, handle=libHandle) # do stuff with lib in the usual way lib.Foo(42, 666) # clean up by removing reference to the ctypes library object del lib # unload the DLL ctypes.windll.kernel32.FreeLibrary(libHandle)
import numpy as np uf = np.frompyfunc(f, 2, 1) # f has 2 inputs, 1 outputs pd.DataFrame(uf.outer(rows, columns), index=rows, columns=columns)
class User(object): def __init__(): self.first_name = 'Mr' self.last_name = 'Anderson' @property def name(): return self.first_name + ' ' + self.last_name
url = "http://host:8080/job/myproject/config.xml" auth = ('user','pass') headers = {"Content-Type" : "application/xml"} with open('new_config.xml', 'rb') as payload: r = requests.post(url, auth=auth, data=payload, headers=headers)
from struct import * # Two integers to a floating point i1 = 0xC3F5 i2 = 0x4840 f = unpack('f',pack('>HH',i1,i2))[0] # Floating point to two integers i1, i2 = unpack('>HH',pack('f',3.14))
cursor.fetchall() Fetch all (remaining) rows of a query result, returning them as a sequence of sequences (e.g. a list of tuples). Note that the cursor's arraysize attribute can affect the performance of this operation. cursor.fetchone() Fetch the next row of a query result set, returning a single sequence, or None when no more data is available. [6]
def find_word_vertical(crosswords,word): z=[list(i) for i in zip(*crosswords)] for rows in z: row_index = z.index(rows) single_row = ''.join(rows) column_index = single_row.find(word) if column_index >= 0: return([column_index, row_index])
PREFIX = settings.PREFIXES['THIS'] def get_id(): return make_id(PREFIX) class MyModel(models.Model): id = models.CharField(primary_key=True,unique=True, default=get_id,)
Include /Library/Server/Web/Config/apache2/httpd_wsgi.conf
def messageCB(sess,mess): print 'MESSAGE'*100 nick=mess.getFrom().getResource() text=mess.getBody() #print mess,nick print text client.RegisterHandler('message',messageCB) while 1: client.Process(1)
>>> y = 2,4,6 (2,4,6) >>> print (y.__class__) <class 'tuple'>
def func1(): return 10, 20 def func2(x, y): return x + y results = func2(*func1()) print results --output:-- 30
Getting access to a scanner device: from imagescanner import ImageScanner # instantiate the imagescanner obj iscanner = ImageScanner() # get all available devices scanners = iscanner.list_scanners() # choose one of the devices scanner = scanners[0] # scan your file (returns a PIL object) scanner.scan()
In [159]: df.index = pd.DatetimeIndex(df.index) In [160]: df.index Out[160]: <class 'pandas.tseries.index.DatetimeIndex'> [2013-01-01, ..., 2013-01-03] Length: 3, Freq: None, Timezone: None
def randstat(level): points = randint(10,max(20,5*level)) # set all our minimums to zero stats = [0, 0, 0, 0, 0] for i in range(points): stat = randint(0, len(stats)-1); # pick a random stat to increment stats[stat] = stats[stat] + 1 # extract the stats back out of our array agility = stats[0] stamina = stats[1] strength = stats[2] vitality = stats[3] intelligence = stats[4]
pvv_news = df[(df['desc'].str.contains("pvv"), case = True) & ((df['desc'].str.contains("nederland"), case = True) | (df['desc'].str.contains("overheid"), case = True)) ]
import urllib2 urllib2.urlopen('http://stackoverflow.com').read()
import warnings import traceback _formatwarning = warnings.formatwarning def formatwarning_tb(*args, **kwargs): s = _formatwarning(*args, **kwargs) tb = traceback.format_stack() s += ''.join(tb[:-1]) return s warnings.formatwarning = formatwarning_tb logging.captureWarnings(True)
sudo('python manage.py collectstatic --noinput', user='www-data')
class Test(object): def __new__(*args): return False
#Get the repository from the event and show its git clone URL repository = event['Records'][0]['eventSourceARN'].split(':')[5]
import subprocess ... # When you click the button in your PyQT GUI, # Create a new process: myMatProcess = subprocess.Popen(['python', 'myGraph.py'], shell=True)
numChanges = sum(i != j for i, j in zip(x, y))
def find_all(target, substring): current_pos = target.find(substring) while current_pos != -1: yield current_pos current_pos += len(substring) current_pos = target.find(substring, current_pos)
>>>import datetime >>>yesterday = datetime.date.today() - datetime.timedelta(1) >>>unix_time= yesterday.strftime("%s") #Second as a decimal number [00,61] (or Unix Timestamp) >>>print unix_time '1372737600'
sudo apt-get install python-scipy
im = plt.imshow(np.flipud(plt.imread('tas.png')), origin='lower', extent=[35, 75, 0, 16])
List<int> listA = new List<int> { 1, 2, 3 }; List<int> listB = listA; listA.Add(4); bool equal = object.ReferenceEquals(listA, listB);
NestedList = [["BLAHBLAH\Desktop","BLAHBLAH\Documents","BLAHBLAH\Vids"],["BLAHBLAH\Pics","BLAHBLAH\Folder","BLAHBLAH\Music"]] output = [[os.path.basename(path) for path in li] for li in NestedList]
[x for x in attributes if x['id']=='29'][0] {'attribute': 's', 'group': 'taille_textile', 'id': '29'}
fileNameTemplate = r'C:\documents\Plot{0:02d}.png' for subdir,dirs,files in os.walk(rootdir): for count, file in enumerate(files): # Generate a plot in `pl` pl.savefig(fileNameTemplate.format(count), format='png') pl.clf() # Clear the figure for the next loop
>>> def my_coroutine(): ... yield (yield (yield 1)) >>> from cotoolz import comap >>> cm = comap(lambda a: a + 1, my_coroutine()) >>> next(cm) 2 >>> cm.send(2) 3 >>> cm.send(3) 4 >>> cm.send(4) Traceback (most recent call last): ... StopIteration
word_list = [] word_list2 = open('romeo.txt').read().split() for item in word_list2: if item in word_list: continue else: word_list.append(item) word_list.sort() print word_list
import pandas as pd import numpy as np df = pd.DataFrame(np.random.randint(0, 2, (50, 4)), columns=["id1", "id2", "count1", "count2"]) df["compare"] = ((df.id1==df.id2) & (df.count1==df.count2)).astype(int)
class A(object): def test(self): print("I am A") class B(object): def test(self, a1, a2): a1.test() a2.test() a1 = A() a2 = A() b = B() b.test(a1, a2)
<script> window.appParams = { view1Url: {% url app.views.something %}, ... } </script>
class MyClass(object): classattrs = {'numbers': [1,2,3,4,5]} MyClass.classattrs['letters'] = ['a','b','c']
test = ['he', 'she', 'them'] string = 'hello' if any(test_item in string for test_item in test): print 'yes'
result = [(x+dx, y+dy) for x,y in points for dx,dy in offsets]
import pandas as pd df = pd.read_csv('path/to/csv') if df.iloc[5, 6]: # do stuff else # do some other stuff
import os print os.environ['BUILD_NUMBER']
import numpy as np import pandas as pd import matplotlib.pyplot as plt df = pd.DataFrame(np.random.randn(1000, 4), columns=['A','B','C','D']) axes = pd.tools.plotting.scatter_matrix(df, alpha=0.2) plt.tight_layout() plt.savefig('scatter_matrix.png')
padx = 10 pady = 10 Button(...).pack(padx=padx, pady=pady)
>>> [m.group(0) for m, _ in zip(re.finditer(r"\w", "abcdef"), range(3))] ['a', 'b', 'c']
return ':'.join(x.encode('hex') for x in fvalue)
def admin(handler_method): """ This decorator requires admin, 403 if not. """ def auth_required(self, *args, **kwargs): if users.is_current_user_admin(): handler_method(self, *args, **kwargs) else: self.error(403) return auth_required ... @admin def crudmethod_update(self, *args, **kwargs): ...
def copy_relations(self, oldinstance): for image in oldinstance.image_set.all(): image.pk = None image.plugin = self image.save()
>>> vals[ind] = new_vals >>> vals array([ 0, -1, 2, -2, 4])
In [47]: df['C'] = np.where(df.A.str.isnumeric(), 1, df.index) print df A B C 0 3 4 1 1 3 4 1 2 3 5 1 3 yes 8 3 4 no 8 4 5 yes 8 5 In [48]: print df.drop_duplicates()[['A', 'B']] #reset index if needed A B 0 3 4 2 3 5 3 yes 8 4 no 8 5 yes 8
chmod +x example-bash.sh
from itertools import groupby import csv, operator, itertools with open('trial.csv', 'rb') as f: reader = csv.reader(f) sortedlist = list(reader) things= sorted(sortedlist, key=operator.itemgetter(0), reverse=True) things.sort() things = list(k for k,_ in itertools.groupby(things)) for key, group in groupby(things, lambda x: x[0]): listOfThings = len(",".join([thing[1] for thing in group if not thing in things[1]]).split(",")) print key + "," + str(listOfThings)
ALLOWED_ARGS = {"repr", "str", "unicode"} funcs = {f: getattr(__builtins__, f) for f in ALLOWED_ARGS} # funcs.update({"custom": custom_func}) # I'd also assert on all functions having the same arity, # but this is tricky with builtins... func = funcs[sys.argv[1]]
--> import abc --> class Test(object): ... __metaclass__ = abc.ABCMeta ... @classmethod ... def __subclasshook__(cls, C): ... return True ... --> isinstance(dict(), Test) True --> isinstance(42, Test) True --> isinstance(0.59, Test) True --> class old_style: ... pass ... --> isinstance(old_style(), Test) True
import collections class Foo(object): handlers = None def __init__(self): self.handlers = collections.defaultdict(set) def register(self, event, callback): self.handlers[event].add(callback) def fire(self, event, **kwargs): for handler in self.handlers.get(event, []): handler(**kwargs) foo = Foo() foo.register('one', mycallback) foo.fire('one')
import numpy as np signal = np.random.rand(1000000) th = signal > 0.5 th[1:][th[:-1] & th[1:]] = False
class URIString(str): _default_namespace = "default" def __init__(self, value, namespace=_default_namespace): self.namespace = namespace def __new__(cls, value, namespace=_default_namespace): return super().__new__(cls, value) @property def local_name(self): return self[(self.find(self.namespace)+len(self.namespace)):]
total_campaigns = {} for day in days: total_campaigns[day] = Email.objects.filter(day_of_week=day).count()
from tarfile import TarFile tar = TarFile("the_tar.tar") tar.extractall()
import datetime, re reg = re.compile(r'//\s*Copyright\s*\(c\)\s*([0-9]{4})(?:\s*\-\s*%d)?\.' % datetime.date.today().year, re.I) reg.match('// copyright (c) 1997 - 2015').group(1) # 1997
import csv if __name__ == '__main__': file_path = r"/your/file/path/here.csv" file_handle = open(file_path, "r") csv_handle = csv.reader(file_handle) # Now you can work with the *values* in the csv file.
import sys from optparse import OptionParser as OP cmdLine = sys.argv i = cmdLine.index('-u') if (i+1) == len(cmdLine) or cmdLine[i+1] not in users: cmdLine.insert(i+1,userName) p = OP() p.add_option('-u',action='append') p.parse_args(cmdLine[1:])
class prediction_history(Callback): def __init__(self): self.predhis = [] def on_epoch_end(self, epoch, logs={}): self.predhis.append(model.predict(predictor_train))
sys.stdout.flush()
def edit(request): initial = { 0: {'subject': 'Hello', 'sender': 'user@example.com'}, 1: {'message': 'Hi there!'} } wiz = FormWizard([form1,form2,form3],initial_dict = initial) return wiz(request)
def getwrap(my_dict, my_key, default=None): if default is None: return my_dict[my_key] else: return my_dict.get(my_key, default)
relx, rely = ev.pos[x] - mx, ev.pos[y] - my number = rely//boxsize*numboxsx + relx//boxsize
# Run script on local machine. def run_local_script(self, path, script): print("Path:"+path) with lcd(path): local('.' + script)
secsAfterADEpoch = float(your_weird_time) / 10000000.0 # seconds since jan 1st 1601 ADToUnixConvertor = ((1970-1601) * 365.242190) * 86400 # unix epoch - AD epoch * number of tropical days * seconds in a day unixified = (secsAfterADEpoch-ADToUnixConvertor)+31800 # unix Timestamp version of AD timestamp + correction time
import math nd = 100. N = 4 n = int(math.sqrt(N)) d = nd / n c = [i*d+d/2 for i in range(n)] [[(x,y) for x in c] for y in c] === Output: === [[(25, 25), (75, 25)], [(25, 75), (75, 75)]]
# UPDATE mydb.test1 SET Cnt=5 WHERE Id=1 hs.update('mydb', 'test1', '=', ['Id', 'Cnt'], ['1'], ['1', '5'])
class YourView(DetailView): queryset = YourModel.objects.all() def get_object(self): object = super(YourView, self).get_object() object.views = object.views + 1 object.save() return object
import math def is_number(s): try: float(s) return True except ValueError: return False filename = "123 3.34 9.91 p" val = filename.split(" ") for items in val: if is_number(items): if float(items) != math.floor(float(items)): print items
server{ listen 80; server_name example.com; location /deluge/ { proxy_pass http://0.0.0.0:8112; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } }
data=dataset.map(lambda word: (word,len(word))).filter(lambda t : t[1] >=6)
for team in teams: for event in team.client.rtm_read(): # process the event for that team
# Python's datetime strftime doesn't handle dates before 1900. # These classes override date and datetime to support the formatting of a date # through its full "proleptic Gregorian" date range.
query = prefetch(Dungeon.select(), Monster.select()) for dungeon in query: print dungeon.name for monster in dungeon.monsters_prefetch: # This is a list of monsters print ' *', monster.name
bag_sword = [] def equip(x): global bag_sword if x == "iron sword": if "iron sword" in bag_sword: print "You can't have 2 weapons equipped!" else: bag_sword.append("iron sword") print bag_sword # Prints "[]". equip("iron sword") # Prints nothing. Puts the string "iron sword" in bag_sword. print bag_sword # Prints "['iron sword']". equip("iron sword") # Prints "You can't have 2 weapons equipped!". bag_sword is unchanged.
import numpy e = [(Pa, Pb) for Pa in a for Pb in b] e[numpy.argmin([math.sqrt(math.pow(Pa[0]-Pb[0],2) + math.pow(Pa[1]-Pb[1],2)) for (Pa, Pb) in e])]
from bs4 import BeautifulSoup html = '''<ul><li><b>Hey, sexy!</b>Hello</li></ul>''' soup = BeautifulSoup(html) print soup.find('li').find(text=True, recursive=False)
from eve import Eve def on_fetched_resource(resource, response): del(response['_links']) del(response['_meta']) # would result in an empty JSON document # del(response['_items']) app = Eve() app.on_fetched_resource += on_fetched_resource if __name__ == '__main__': app.run()
>>> from collections import Counter >>> commonctr = Counter(a) & Counter(b) # multiset intersection >>> common = list(commonctr.elements()) # convert back to list >>> print(common) [4, 4]
import subprocess params = ['convert', 'pdf_file', 'jpg:-'] image_data = subprocess.check_output(params)
....... # loops berekenen de chaotische nummers voor de input for i in range(c): a_temp = 3.9 * a_temp * (1 - a_temp) b_temp = 3.9 * b_temp * (1 - b_temp) z = z + 1 #Print resultaten naar tabel print('%10s %20s %20s' % (c, a_temp, b_temp))
class BlogPostResource(ModelResource): comments = fields.ToManyField("resources.CommentResource", attribute=lambda bundle: bundle.obj.comments.all().order_by("published"))
for p in pkts: if TCP in p: print len(p[TCP].payload)
i = ['title', 'email', 'password2', 'password1', 'first_name', 'last_name', 'next', 'newsletter'] a, b = i.index('password2'), i.index('password1') i[b], i[a] = i[a], i[b]
time python foo.py
1. Have 2 more fields in each node numLeftChildren and numRightChildren. 2. Initialize both of them to 0 when you create a new node. 3. At the time of insertion, you make a comparison if the newly added node's key is less than root's key than you increment, root's numLeftChildren and call recursion on root's left child with the new node. 4. Do Same thing if new node's key is greater than root's key.
fig, ax = plt.subplots() fig.subplots_adjust(left=0.2) #Adjust 0.2 to find the right margin for your plot
HttpURLConnection urlConnection = (HttpURLConnection)new URL(url).openConnection(); urlConnection.setDoOutput(true); urlConnection.setDoInput(true); urlConnection.setRequestMethod("POST"); urlConnection.setConnectTimeout(5000); urlConnection.setReadTimeout(60000); urlConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
# The Pylons WSGI app app = PylonsApp() #Profile the app app = AccumulatingProfileMiddleware( app, log_filename='/profiling.log', cachegrind_filename='/cachegrind.out', discard_first_request=True, flush_at_shutdown=True, path='/__profile__' )
>>> import datetime >>> today = datetime.datetime.today() >>> today datetime.datetime(2010, 3, 9, 18, 25, 19, 474362) >>> today + datetime.timedelta(days=1) datetime.datetime(2010, 3, 10, 18, 25, 19, 474362)
>>> l = ['a', 'b', 'c', 'A', 'B', 'C', 'a', 'b', 'c'] >>> new_list = list(set(elem.lower() for elem in l)) >>> new_list ['a', 'c', 'b']
import numpy as np W1 = np.arange(25*64).reshape(25, 64) W2 = np.arange(25*64).reshape(64, 25) b1 = np.arange(25) b2 = np.arange(64) theta = np.concatenate([W1.flat, W2.flat, b1, b2]) print(theta.shape) # (3289,)
from lxml import etree doc = etree.parse('thisxmlfile.xml') # There is only one "season" element season = doc.find('season').get('season') # XPath query relative to root node for conference in doc.xpath('conference'): # XPath query relative to "conference" node for team in conference.xpath('division/team'): print season, conference.get('label'), print team.get('city'), team.get('name'), team.get('alias')
>>> from itertools import compress >>> sum(compress(list1, list2)) 17
>>> alist = [1,4,1,2,1] >>> blist = [6,7,8,9,5] >>> d = {} >>> for a,b in zip(alist, blist): ... d[a] = d.get(a, 0) + b ... >>> [d[x] for x in sorted(d)] [19, 9, 7]
def setup(self): self.proc = subprocess.Popen("test_process") def cleanup(self): self.proc.kill()
from django.http import HttpResponse import xlwt def my_view(request): response = HttpResponse(mimetype="application/ms-excel") response['Content-Disposition'] = 'attachment; filename="foo.xls"' wb = xlwt.Workbook() wb.save(response) return response
data = data.reshape(81, 201, 3) x = data[...,0] y = data[...,1] z = data[...,2] CS = plt.contourf(x,y,z,200,cmap=plt.cm.jet,rasterized=True) plt.colorbar() plt.show()
import board import heuristic import validation ... class CNurikabe: # the explicit (object) base class is not needed in Python 3 def someFunc(self): for i in range(board.dimensionx): heuristics.doSomeStuff() validation.doSomeMore()
driver.find_element_by_partial_link_text(u'评论')
def post(self): ... # This code is after the code above if data.is_valid(): entity=data.save(commit=False) entity.company_lat=lat entity.company_lng=lng entity.put()
def save(self, *args, **kwargs): # New objects have no `pk` if self.pk is None and self.is_it_question: self.number = TypeFourChoice.objects.filter(is_it_question=True) \ .count() + 1 super(TypeFourChoice, self).save(*args, **kwargs)
In [1]: x = range(9) In [2]: x Out[2]: [0, 1, 2, 3, 4, 5, 6, 7, 8] In [5]: print numpy.random.shuffle(x) None In [6]: x Out[6]: [8, 7, 3, 4, 6, 0, 5, 1, 2]
>>> import numpy as np >>> r1 = np.array([1, 2, 3, 4, 5, 6, 0, 3, 3, 0, 0, 0, 1, 1]) >>> r2 = np.array([4, 0, 3, 0, 0, 0, 1, 2, 3, 5, 6, 7, 8, 9]) >>> 1 - np.linalg.norm(r1-r2) / np.linalg.norm(r1+r2) 0.20227596478253429
# Store a hash. import bcrypt hashed = bcrypt.hashpw(password, bcrypt.gensalt()) store_in_db(user, hashed) #Where user is the user to load the hash for, and store_in_db does what it says on the tin. # Check against an existing hash import bcrypt hashed = load_from_db(user) # (get the password of the user from database) Where user is the user to load the hash for, and load_from_db does what it says on the tin. if bcrypt.hashpw(password, hashed) == hashed: # Where password is a plaintext password attempt. print "It matches" else: print "It does not match"
thingys = [] for y in l: for x in y: thingys.append(x)
import logging logging.debug('Debug Message') if some_error: logging.error('Error Message')
>>> type(u'hello world') <type 'unicode'> >>> type('hello world') <type 'str'>
import os print os.stat('somefile.ext').st_size
df = df * MultFactor
N = len(allspec) numspec = [0] * N for i in xrange(N): for x_rel in xrange(-1, +1): for y_rel in xrange(-1, +1): x_idx = (x + xrel) % N y_idx = (y + yrel) % N if x_idx != x or y_idx != y: numspec[hab[x_idx][y_idx]] += 1
from functools import partial def distance_squared(x, y): return (x[0] - y[0])**2 + (x[1] - y[1])**2 print min(big_list, key=partial(distance_squared, list_a))
def message(): num = str(random.randint(137849013724,934234850490)) print(num) if num[3] == "5" and num[6] == "7": print("access granted") else: threading.Timer(0.125, message).start() # <== moved
class SoftwareHelp(Help): about_software = models.ForeignKey('Software') def save(self, *args, **kwargs): self.about_software = 'Help for %s' % self.title return super(SoftwareHelp, self).save(*args, **kwargs)
import os import glob import collections dirpath = r"C:\Python32\test" os.chdir(dirpath) cnt = collections.Counter() for filename in glob.glob("*"): name, ext = os.path.splitext(filename) cnt[ext] += 1 print(cnt)
import ast resp, content = h.request("http://www.ratemyprofessors.com/solr/interim.jsp?select?facet=true&q=Christopher+Callam&facet.field=schoolname_s&facet.field=teacherdepartment_s&facet.field=schoolcountry_s&facet.field=schoolstate_s&facet.limit=50&rows=20&facet.mincount=1&json.nl=map&fq=content_type_s%3ATEACHER&wt=json") data = ast.literal_eval(content) results = data['response']['docs']
import rdflib from rdflib.Graph import Graph g = Graph() g.parse("http://www.w3.org/2000/10/rdf-tests/rdfcore/ntriples/test.nt", format="nt") g.serialize("test.rdf", format="rdf/xml")
root.createcommand('tkAboutDialog', about_dialog)
ioff()
volume(eval('lambda x: %s' % args.equation), args.a, args.b)
>>> gray = img[:,:,0]
'where': 'properties["$property_name"]!="" and properties["$second_property_name"]=="value"'
import tkinter.messagebox tkinter.Tk().withdraw() a=tkinter.messagebox.askquestion('','hi')
class GameResource(ModelResource): activities = fields.ToManyField(ActivityResource, 'activities', full=True)
def writeYaml(data, filename): sections = data.keys() dump = yaml.dump(data, default_flow_style=False) # set 2 indent spaces in every line out = dump.replace('\n', '\n ') # re-set indentation for sections only for i in sections: out = out.replace('\n %s' % i, '\n%s' % i) with open(filename, 'w') as yaml_file: yaml_file.write(out)
A child created via fork(2) inherits a copy of its parent's signal dis‐ positions. During an execve(2), the dispositions of handled signals are reset to the default; the dispositions of ignored signals are left unchanged.
all(func(input) for func in filters)
"(.+?)Value_*|(.+?)Value2_*"
for num in range(5): # Do Something
from __future__ import division import math height = int(raw_input('Height: ')) weight = int(raw_input('Weight: ')) v = math.sqrt(2)*height*weight mass = int(raw_input('mass: ')) K_E = 1/2*(mass*v**2) print K_E
im = cv2.imread('c:\\diff.jpg') im1 = cv2.imread('c:\\Edited.jpg') imgray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY) ret,thresh = cv2.threshold(imgray,127,255,0) contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE) cv2.drawContours(im1, contours, -1, (0,255,0), 1) cv2.imwrite("c:\\see_this.jpg", im1)
ProcessBuilder pb = new ProcessBuilder("C:\\Python34\\python", "C:\\Users\\Raga\\Documents\\"+rollno+"\\"+file+".py"); pb.redirectInput(Redirect.fromFile("C:\\Users\\Raga\\Documents\\"+rollno+"\\input.txt")); Process p = pb.start();
- wget http://repo.continuum.io/miniconda/Miniconda-3.7.3-Linux-x86_64.sh -O miniconda.sh - bash miniconda.sh -b -p $HOME/miniconda - export PATH="$HOME/miniconda/bin:$PATH" - conda config --set always_yes yes --set changeps1 no - conda update -q conda # Useful for debugging any issues with conda - conda info -a # USE YOUR PYTHON VERSION HERE - conda create -q -n py276 python=2.7.6 - source activate py276
from itertools import izip_longest new_cols = DataFrame(list(izip_longest(*df[9].apply(lambda x:x.split(",")), fillvalue=""))).T
for i in range(0,len(list1),2): name = list1[i] tag = list1[i+1] print '<tag name="%s">%s</tag>' % (name, tag)
dirpath = '/Users/Desktop/Xfiles' for filename in os.listdir(dirpath): os.system('/sw/bin/python2.7 pythonCode.py {}/{}'.format(dirpath, filename))
>>> v ['/my/file.py', 'parallel=2', 'parts=4'] >>> for thing in v: if 'parallel' in thing: print thing.split('='), thing.split('=')[-1] print thing.partition('='), thing.partition('=')[-1] ['parallel', '2'] 2 ('parallel', '=', '2') 2
In [275]: DataFrame.from_items([('A', [1, 2, 3]), ('B', [4, 5, 6])], .....: orient='index', columns=['one', 'two', 'three']) Out[275]: one two three A 1 2 3 B 4 5 6
collection.find({"$and": [{"foo": {'$ne': 'bar'}}, {"foo": {'$exists': True}}]})
primelist=[2] for m in range (2,12): for k in primelist: if m%k == 0 : break else: primelist.append(m) print (primelist)
>>> class MyList(list): ... def __iter__(self): ... return (x for x in list.__iter__(self) if x is not None) ... >>> >>> ml = MyList(["cat", "dog", None, "fox"]) >>> for item in ml: ... print item ... cat dog fox >>> [x for x in ml] ['cat', 'dog', 'fox'] >>> list(ml) ['cat', 'dog', 'fox']
import subprocess output = subprocess.check_output(['git', 'status'], cwd='/path/to/git/workingdir')
import matplotlib.pyplot as plt x = [1,2,3,4] y = [10,20,30,40] Temp = [100,200,300,400] plt.scatter(x,y,c=Temp) plt.colorbar() plt.show()
from itertools import groupby from functools import partial key = partial(re.match, r'Clutch\d\d\d') with open('foo.txt') as f: groups = (', '.join(map(str.strip, g)) for k, g in groupby(f, key=key)) pprint(dict(zip(*[iter(groups)]*2))) {'Clutch001': 'Albino X Pastel, Bumble Bee X Albino Lesser', 'Clutch002': 'Bee X Fire Bee, Albino Cinnamon X Albino, Mojave X Bumble Bee', 'Clutch003': 'Black Pastel X Banana Ghost Lesser'}
class Address(Document): street_address = StringField() city = StringField() state_province = StringField() country = StringField() class User(Document): name = StringField() email = StringField() address = DocumentField(Address) user = User() user.name = "tony" user.address = Address() user.address.city = "London"
>>> if '': ... print 'empty' ... >>> if 'I entered something': ... print 'not empty' ... not empty >>> raw_input('just hit enter: ') # just hinting 'enter' results in the empty string just hit enter: ''
sudo port install py26-mysql
#!/usr/bin/env python2.7 import re RE_WORD = re.compile(r'\b[a-zA-Z]+\b') keywords = frozenset(['foo', 'bar', 'joe', 'mauer']) listOfStrings = ['I am frustrated', 'this task is foobar', 'mauer is awesome'] for i in listOfStrings: for word in RE_WORD.findall(i): if word in keywords: print i continue
>>> a.transpose(1, 2, 0).ravel() array([ 0, 9, 18, 1, 10, 19, 2, 11, 20, 3, 12, 21, 4, 13, 22, 5, 14, 23, 6, 15, 24, 7, 16, 25, 8, 17, 26])
array1,array2,array3,array4 = [np.ma.zeros(np.shape(array0)) for _ in range(4)]
xyz.T[np.argmax(density)]
import sys, inspect def is_mod_function(mod, func): return inspect.isfunction(func) and inspect.getmodule(func) == mod def list_functions(mod): return [func.__name__ for func in mod.__dict__.itervalues() if is_mod_function(mod, func)] print 'functions in current module:\n', list_functions(sys.modules[__name__]) print 'functions in inspect module:\n', list_functions(inspect)
gconftool-2 --type boolean --set /desktop/gnome/interface/menus_have_icons true
>>> l = [1,2,3] >>> m = l[:] >>> n = l >>> l.append(4) >>> m [1, 2, 3] >>> n [1, 2, 3, 4] >>> n is l True >>> m is l False
class classy: def __init__(self): self.a = 1 self.b = 2 x = classy() y = classy() x.a = 100 >>> print y.a 1
[item for index, item in enumerate(lst) if index not in plist]
def reduce_ws(txt): ntxt = txt.strip() return ' '+ ntxt + ' ' j = ' Hello World ' print(reduce_ws(j))
class FindableModel(db.Model): def __getattr__(self, name): if not name.startswith("find_by_"): raise AttributeError(name) field = name[len("find_by_"):] return lambda value: self.all().filter(field, value)
% python -mtimeit "l=[]" 10000000 loops, best of 3: 0.0711 usec per loop % python -mtimeit "l=list()" 1000000 loops, best of 3: 0.297 usec per loop
import clr clr.AddReference("MyAssembly") import MyGlobalClass
from itertools import groupby ... for g_z, group in groupby(zip(zip(x, y), z), lambda p: p[1]): g_x, g_y = [], [] for i in group: g_x.append(i[0][0]) g_y.append(i[0][1]) if g_z: plt.plot(g_x, g_y, linestyle='-') else: plt.plot(g_x, g_y, linestyle='--') ...
keys = ['lastname', 'firstname', 'email', 'id', 'phone'] dicts = [] with open("oldFile.txt") as f: for line in f: # Split each line. line = line.strip().split() # Create dict for each row. d = dict(zip(keys, line)) # Print the row dict print d # Store for future use dicts.append(d)
import random _memomask = {} def hash_function(n): mask = _memomask.get(n) if mask is None: random.seed(n) mask = _memomask[n] = random.getrandbits(32) def myhash(x): return hash(x) ^ mask return myhash
pitch_list.append(pitch_dest[i] - thr_tip_init[i]) crest_list.append(crest_dest[i] - thr_tip_init[i]) pitchM_pos = Pitch * pitch_list[i] + thr_tip_init[i] crestM_pos = Crest * crest_list[i] + pitchM_pos thr_tip.SetPoint(i,crestM_pos) thr_tip.Message(c4d.MSG_UPDATE)
pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
import ConfigParser config = ConfigParser.RawConfigParser() config.read('example.url') try: url = config.get('InternetShortcut', 'URL') # Classic URL Format except ConfigParser.NoOptionError: url = config.get('DEFAULT', 'BASEURL') # Extended URL Format
import numpy as np import matplotlib.pyplot as plt import pandas %matplotlib inline data = pandas.Series(np.random.normal(size=37)) full_std = np.std(data) expand_std = pandas.expanding_std(data, min_periods=1) fig, ax = plt.subplots() expand_std.plot(ax=ax, color='k', linewidth=1.5, label='Expanded Std. Dev.') ax.axhline(y=full_std, color='g', label='Full Value') ax.legend()
ref_by_number = dict( (row.number, row) for row in db.session.query(reference).filter(reference.parent == 1) )
round(round(1.265, 3) + 0.0005, 2)
>>> datetime(*strptime(s, "%Y-%m-%dT%H:%M:%S+0000")[0:6]).strftime("%B %d, %Y %I:%M %p") 'July 16, 2013 04:14 PM'
def not_zeroes(arr): return any([x!=0 for x in arr]) vectors = [] for line in open('myfile.txt'): numbers = list(map(float,line.split())) for i in range(0, len(numbers), 10): vector = numbers[i:i+10] if not_zeroes(vector): vectors.append(vector) print vectors
# create an empty list a = []; # take limt as input lim = raw_input("Enter limit") # this is python style of for loop # here i will start from 0 and will go upto limit for i in range (0, int(lim)): # take input from user one by one and append to list elem = raw_input("") a.append(int(elem))
if n % 2 != 0: for l in axs[i/2-1,1].get_xaxis().get_majorticklabels(): l.set_visible(True) f.delaxes(axs[i/2, 1]) f.show()
.. image:: example.png
def getText(nodelist): rc = [] for outer in nodelist: for node in outer.childNodes: if node.nodeType == node.TEXT_NODE: rc.append(node.data) else: print "not text: "+ node.toxml() return ''.join(rc)
>>> from operator import itemgetter >>> lst = [["fileA",7],["fileB",4],["fileC",17],["fileD",15]] >>> min(lst, key=itemgetter(1)) ['fileB', 4] >>> min(lst, key=itemgetter(1))[0] 'fileB' >>>
>>> from svglib.svglib import svg2rlg >>> from reportlab.graphics import renderPDF >>> >>> drawing = svg2rlg("file.svg") >>> renderPDF.drawToFile(drawing, "file.pdf")
#include<boost/python.hpp> namespace py=boost::python; BOOST_PYTHON_MODULE(modA){ py::object modB=py::object(py::handle<>(PyModule_New("modA.modB"))); modB.attr("__file__")="<synthetic>"; py::scope().attr("modB")=modB; // this was the missing piece: sys.modules['modA.modB']=modB py::extract<py::dict>(py::getattr(py::import("sys"),"modules"))()["modA.modB"]=modB; };
cdef class SquareErrorDistance: cdef double _norm def __init__(self, dataSample): variance = round(sum(dataSample)/len(dataSample)) if variance == 0: self._norm = 1.0 else: self._norm = 1.0 / (2 * variance) def __call__(self, double u, double v): # u and v are floats return (u - v) ** 2 * self._norm
R = numpy.arctan2(A[...,1],A[...,0])
output = sorted([1] * k + [0] * (n - k), key=lambda k: random.random())
offset = dz + np.abs(dz.min()) fracs = offset.astype(float)/offset.max() norm = colors.normalize(fracs.min(), fracs.max()) colors = cm.jet(norm(fracs)) ax.bar3d(xpos,ypos,zpos,1,1,dz, color=colors)
class ChildFrame(wx.Frame): def __init__(self): wx.Frame.__init__(self, None) self.Bind(wx.EVT_CLOSE, self.on_close) def on_close(self, evt): process_whatever_you_want() self.Destroy()
>>> lst = ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr'] >>> s1, s2 = map("".join, zip(lst[::3], lst[1::3], lst[2::3])) >>> s1 'abcdefghi' >>> s2 'jklmnopqr' >>>
import pdb; pdb.set_trace()
ax.xaxis.set_minor_locator( xLocator ) ax.xaxis.set_minor_formatter( xminorFormatter )
idTracker = {} idCounter = 1 for id, movie in movies.iteritems(): corpus.append(movie) idTracker[idCounter] = id idCounter +=1
def get_queryset(self): queryset = Post.objects.all() if self.request.GET.get('price'): queryset = queryset.filter(price=self.request.GET.get('price')) return queryset
>>> s1 = "abc" >>> s2 = "bc" >>> "".join(i if i in s2 else '+' for i in s1) '+bc'
hashout = gethash(body+str(i).encode('utf-8'))
// call for the first time (initialization) std::random_device rd; std::mt19937 e2(rd()); std::normal_distribution<float> dist(m, s); // bind the distribution generator and uniform generator auto gen_gaussian = std::bind(dist, e2); // call when you need to generate a random number float gaussian = gen_gaussian();
data = [line.split(', ') for line in fptr]
for item, other_items in pick_item(items): yield from _permutations_rec(current+item, other_items, n)
numpy.concatenate( LIST, axis=0 )
the_widget.see(index)
from git import Repo, InvalidGitRepositoryError try: Repo(path_to_repo) print 'is git repo' except InvalidGitRepositoryError: print 'isn`t git repo'
return Projekt.objects.all().extra( select={ "date_reached_state_checked": "SELECT created_at FROM tracking_statechange WHERE tracking_statechange.projekt_id = projekt_projekt.id AND tracking_statechange.state = 20", "date_reached_state_construction_ordered": "SELECT created_at FROM tracking_statechange WHERE tracking_statechange.projekt_id = projekt_projekt.id AND tracking_statewechsel.state = 50" })
>>> q = Queue() >>> q.put(1) >>> q.queue deque([1])
>>> a array([2, 5, 4, 4, 4, 2, 1, 1, 2, 2, 5, 4, 1, 4, 0, 0, 5, 1, 4, 1]) >>> np.nonzero(a == a.max())[0] array([ 1, 10, 16]) >>> a[_] array([5, 5, 5])
BOOST_PYTHON_MODULE(_foo) { scope().attr("__name__") = "foo"; ... }
f = open('house.html','w') f.write(this_dwelling.prettify()) f.close()
import zipfile fh = open(targetzip, 'rb') z = zipfile.ZipFile(fh) for name in z.namelist(): z.extract(name, extractto) fh.close()
def glist(path): global nlist for idx, name in enumerate(listdir(path)): print '{} {}'.format(idx, name) nlist.append(name)
#!/usr/bin/env python import subprocess cmd = 'adb shell ls' s = subprocess.check_output(cmd.split()) print s.split('\r\n')
path=[1,2,3,4,5] return str(path)
>>> import numpy as np >>> a = np.arange(12).reshape((3,4)) >>> a array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]]) >>> np.diff(a,axis = 1) # row-wise array([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) >>> np.diff(a, axis = 0) # column-wise array([[4, 4, 4, 4], [4, 4, 4, 4]])
os.system("example.py arg")
import os os.environ['JAVA_HOME']
import MySQLdb db = mdb.connect(ip, login, pword) query = "insert into tbname (entity, attribute) VALUES('foo', 'bar')" cursor = db.cursor() cursor.execute(query) db.commit()
treeItem.EnsureVisible()
#!/usr/bin/python
>>> d ={('a','b'):100,('a','c'):200,('a','d'):500,('b','c'):1000,('b','e'):100} >>> def func(d, k0): ... return min((k for k in d if k[0] == k0), key=d.get)[1] ... >>> func(d, 'a') 'b' >>> func(d, 'b') 'e'
String[] cmds = { "/bin/bash", "-c", "python scriptName.py" }; ProcessBuilder pb = new ProcessBuilder(cmds); Process p = pb.start(); p.waitFor();
def findLine(line, fileName): file = open(fileName, 'rb').readlines() #open File and create list of each line i = file[line-1] #get the line you need, note that python lists start at 0 i = i.replace('\r', '').replace('\n', '') #strip out all the unnecessary stuff del file return i def findLineSmall(line, fileName): return open(fileName, 'rb').readlines()[line-1].replace('\r', '').replace('\n', '') #Everything compressed to one line data = [] data.append(findLineSmall(6, 'data'))
from ggplot import * qplot(meat.beef)
Rating.objects.filter(von_location=1).order_by('-id')[0]
from django.contrib.admin import AdminSite class TenantSitesAdminSite(AdminSite): def has_permission(self, request): user = request.user return ( user.is_active and user.is_staff and (user.is_superuser or user.site == get_current_site())) site = TenantSitesAdminSite()
>>> a = np.empty((5,), dtype=object) >>> a array([None, None, None, None, None], dtype=object) >>> a[0] = [] >>> a array([[], None, None, None, None], dtype=object) >>> a[0].append(4) >>> a array([[4], None, None, None, None], dtype=object)
>>> from collections import Counter >>> >>> lst = [(12, 0), (10, 1), (11, 777), (11, 0) ,(10, 1)] >>> [key + (cnt,) for key, cnt in Counter(lst).items()] [(11, 0, 1), (11, 777, 1), (10, 1, 2), (12, 0, 1)]
p4 = map(float, searchlines[i+1].split()[1:3])
plt.pcolormesh(xedges, yedges, Z, cmap=CM.RdBu_r, vmin=-7, vmax=7)
import os from random import choice from flask import url_for, render_template @app.route('/random_image') def random_image(): names = os.listdir(os.path.join(app.static_folder, 'imgs')) img_url = url_for('static', filename=os.path.join('imgs', choice(names))) return render_template('random_image.html', img_url=img_url)
import numpy as np features = [] # list of lists of the feature vairables. classes = [] # list of the target variables for line in f: line = line.strip().split() # will split the line into pieces on any white spaces features.append(line[1:-1]) # or whatever indices your features are in classes.append(line[-1]) # or whatever index your target variable is in classes = np.array(classes) features = np.array(features,dtype=np.float)
>>> import sys >>> sys.path.insert(0, r'C:\Modules\Module1') >>> import module
class UserTest(Base): ... @orm.reconstructor def init_on_load(self): self.foo = "bar"
import os import sys sys.path.append(os.path.realpath(os.getcwd()))
def move(obj, goal): obj.x = ((obj.x - goal.x) * 15.0 / 16) + goal.x obj.y = ((obj.y - goal.y) * 15.0 / 16) + goal.y
def removeT(b): s1 = "" while True: s2 = raw_input("Enter a word/sentence you want to process: ") if s2 == "quit": return s1 s2 = s2.replace("T", "") if b: s2 = s2.replace("t", "") s1 += s2
import numpy as np def read_file(file_path, input_format="xyzb", desired_format="bxyz", delimiter=" "): usecols = [input_format.index(col) for col in desired_format] with open(file_path, "r") as inf: return np.loadtxt(inf, usecols=usecols, delimiter=delimiter)
import win32com.shell.shell as shell commands = 'echo hi' shell.ShellExecuteEx(lpVerb='runas', lpFile='cmd.exe', lpParameters='/c '+commands)
_output_all_children = None @property def output_all_children(self): if self._output_all_children is None: lh = ListHolder() traverse_directories(self.start_directory, lh) self._output_all_children = lh.internal_list return self._output_all_children
def process_build_finished(app, exception): if exception is not None: return target_files = [] for doc in app.env.found_docs: target_filename = app.builder.get_target_uri(doc) target_filename = os.path.join(app.outdir, target_filename) target_filename = os.path.abspath(target_filename) target_files.append(target_filename) ...
Dlg = wx.TextEntryDialog(panel, 'Enter your word:',"New word","", style=wx.OK|wx.CANCEL|wx.CENTRE,pos=(100,200)) if Dlg.ShowModal() == wx.OK: test = Dlg.GetValue() del Dlg
>>> import re >>> aa = "QDDDDQDTDQTD" >>> bb = "QDT" >>> cc = "TDQDQQDTQDQ" >>> print(*(re.findall(r'Q[^T]*[DQ]', st) for st in (aa,bb,cc)), sep='\n') ['QDDDDQD'] ['QD'] ['QDQQD', 'QDQ']
dbNavigator = frmDua['TDBNavigator'] dbNavigator.SetFocus() SendKeys.SendKeys("""{LEFT 10}""") #Move Cursor To Most LeftButton SendKeys.SendKeys("""{RIGHT 4}""") #Move Cursor To InsertButton SendKeys.SendKeys("""{SPACE}""") #Perform Click On Insert Button
Login normally in browser export cookies to file use that file in script
class A: def __init__(self): self.a = 1 self.b = 2 self.c = 3 def seta(self): def afunction(): # no self here self.a = 4 afunction() # have to call the function def geta(self): return self.a
from scipy import misc image_name = 'Birds.jpg' calc_mean = misc.imread(image_name) print calc_mean.mean()
text = (text + '\n')*1000 fw.write(text)
text = row if row.find('=') > 0: data = row.split('=') var, val = data[0], data[1] text = "{0:<15} = {1:<15}\n".format(var, val.strip())
label = Gtk.Label() label.set_use_markup(True) label.set_markup("<big>This is bigger text</big>")
key = None def start(): global key # and so on...
class Annotate(object): def __init__(self): print "Annotate is runing" # rest of your code root = Tk() my_object = Annotate() root.mainloop()
[QT Frontend] [CLIs] <=======> [Dispatcher] <=> [API] <==> [Core/Model] [SOAP/XMPRPC/Json] [API Test Suite]
print repr(mystringobject)
def get_default(self): """ Returns the default value for this field. """ if self.has_default(): if callable(self.default): return self.default() return self.default if (not self.empty_strings_allowed or (self.null and not connection.features.interprets_empty_strings_as_nulls)): return None return ""
import re results = re.findall(r'\bhttp://www\.someDomainName\.com/\d+\b', long_string)
$ sudo docker run -p 5023:5023 -p 8050:8050 -p 8051:8051 scrapinghub/splash --disable-private-mode
import os f = open('/root/names.txt') line = f.readline() f.close() words= line.split() for word in words: cmd1 = 'svn up ' +word if os.system(cmd1) == 0: print('All files updated')
attrs = ('Levels', 'MaxX', 'MaxY', 'BW') assert len(tup) == len(attrs) for attr, val in zip(attrs, tup): if val is not None: # don't use != setattr(self, attr, val)
#!/usr/bin/env python from subprocess import check_call check_call(['mocha-phantomjs', 'static/js/tests/headless.html'])
''.join(chr(int(x)) for x in oldString)
>>> bankBalance = 1000000 >>> format(bankBalance, ",") '1,000,000' >>>
from functools import partial with open('sample.txt', 'rb') as inputfile, open(outputfilename, 'wb') as output: for chunk in iter(partial(inputfile.read, 23), ''): # chunk is 23 bytes small output.write(chunk + '\n')
accountlist = [] with open('mydatafile.txt', 'r') as infile: for line in infile: if "has been granted access." in line: if line.strip().split('|')[1].strip(" ") not in accountlist: accountlist.append(line.strip().split('|')[1].strip(" ")) print accountlist with open('output.txt', 'w') as outfile: for account in accountlist: outfile.write("%s\n" % account)
import class import pymock import unittest class TestMyClass(pymock.PyMockTestCase): def setUp(self): self.classTest = class.MyClass() def test_CheckConfiguration(self): self.override(self.classTest, 'getDictionary') pymock.expectAndReturn(self.classTest.getDictionary(), {'a':123, 'b':22}) self.replay() checkValue = self.classTest.checkConfiguration() self.verify()
secret_word = "python" correct_word = "yo" count = 0 while count < len(secret_word): print(secret_word[count] if secret_word[count] in correct_word else '_', end=" ") count += 1
def addNameToDictionary(d, tup): if tup[0] not in d: d[tup[0]] = {} d[tup[0]][tup[1]] = [tup[2]]
SOUTH_TESTS_MIGRATE = False
# bot.py class BotStreamListener(StreamListener): def __init__(api, bot): super(self.__class__, self).__init__(api) # Do your stuff self.bot = bot # Do more of your stuff mybot = bot.bot(api) bsl = BotStreamListener(api, mybot)
>>> d = dict(pairs) >>> import re >>> pattern = re.compile('|'.join(re.escape(k) for k in d)) >>> pattern.sub(lambda k:d[k.group()], s)) frsfsdBBsdfvsdfvrtdsff
k = db.Key.from_path(FbUser.kind(), 131) room = Room.all().filter('fb_user =', k).get() db.delete(room)
class_weight : {dict, 'auto'}, optional Set the parameter C of class i to class_weight[i]*C for SVC. If not given, all classes are supposed to have weight one. The 'auto' mode uses the values of y to automatically adjust weights inversely proportional to class frequencies.
#bot answers module greetings = ["hello {0}", "what's up {0}"] farewells = ["see you soon {0}", "nos vemos {0}"] ...
set data { A1 1 2 a1 B1 3 4 b1 C1 5 6 c1 } set ns {} foreach {- a b -} $data { lappend ns $a $b } set a 0 set xs 1 foreach n [lrange $ns 1 end] { lappend xs [incr a $n] } foreach {a b} $xs r {a b c} { puts "[string toupper $r]1\t$a\t$b\t${r}1" }
left_sorted_list = [1, 2, 3, 4, 5] right_sorted_list = [[2, 21], [4, 45]] right_dict = dict(right_sorted_list) left_outer_join = [[l, right_dict.get(l)] for l in left_sorted_list]
>>>someDict = {'One': 1, 'Two': 2, 'Three': 3} >>>someList = list(someDict.keys()) >>>print(someList) ['One', 'Two', 'Three']
>>> from tasks import add >>> add.delay(2, 2) >>> from celery import current_app >>> conn = current_app.broker_connection() >>> consumer = current_app.amqp.get_task_consumer(conn) >>> messages = [] >>> def callback(body, message): ... messages.append(message) >>> consumer.register_callback(callback) >>> consumer.consume() >>> conn.drain_events(timeout=1) >>> messages[0].properties >>> messages[0].properties {'application_headers': {}, 'delivery_mode': 2, 'content_encoding': u'binary', 'content_type': u'application/x-python-serialize'}
>>> print("True" if 1 else "False") True >>> print("True" if 0 else "False") False >>> print("True" if 0.0 else "False") False >>> print("True" if 123.456 else "False") True >>> print("True" if "hello" else "False") True >>> print("True" if "" else "False") False >>> print("True" if [1,2,3] else "False") True >>> print("True" if [] else "False") False >>> print("True" if [[]] else "False") True
class Post(models.Model): title = models.CharField(max_length=100) pub_date = models.DateTimeField() cover_photo = models.ImageField(upload_to='coverphotos/') text = models.TextField() summary = models.CharField(max_length=200) slug = models.SlugField(max_length=40, unique=True) def save(self, *args, **kwargs): if self.text: self.summary = self.text[:100] super(Post, self).save(*args, **kwargs)
struct.pack("=H??LLLLH", socket.ntohs(v1), v2, v3, socket.ntohl(v5), socket.ntohl(v6), socket.ntohl(v7), socket.ntohl(v8), socket.ntohs(v9))
hash(tup)
>>> '{:.2f}'.format(0.4) '0.40'
import os import time date1 = time.strftime('%Y%m%d%H%M%S') cmd1= "cp logfile logfile{0}".format(date1) cmd2= "cat /dev/null > logfile" os.system(cmd1) os.system(cmd2)
In [66]: import datetime In [67]: import numpy as np In [68]: n = np.array([5,7,3]) In [69]: d = np.array([datetime.datetime(2013, 1, 1, 12, 0), datetime.datetime(2013, 9, 1, 12, 0), datetime.datetime(2013, 5, 1, 12, 0)]) In [72]: n[np.argsort(d)] Out[72]: array([5, 3, 7])
>>> class FullTime(object): ... def __init__(self, name): ... self.name = name ... def __repr__(self): ... return "FullTime(%r)" % self.name ... >>> staffList = ["Alice", "Bob", "Eve"] >>> staffClassDict = {employee: FullTime(employee) for employee in staffList} >>> staffClassDict {'Bob': FullTime('Bob'), 'Alice': FullTime('Alice'), 'Eve': FullTime('Eve')}
<div id="{{ id }}"></div> {{ layer_html|join:"" }} <script type="text/javascript"> var map = new olwidget.Map("{{ id }}", [ {{ layer_js|join:"," }} ], {{ map_opts|safe }} ); // got the ref now :) // do your customization here </script>
>>> [l[1] for l in DICT['XYZ']] [1.82, 1.5, 1.21, 1.28] >>> min(l[1] for l in DICT['ABC']) 1.22 >>> sorted(DICT, key=lambda k: min(l[1] for l in DICT[k])) ['XYZ', 'ABC']
class FootnoteNumbers(object): def __init__(self, start=1): self.count = start - 1 def __call__(self, match): self.count += 1 return "<sup>{}</sup>".format(self.count) new_body_text = re.sub(pattern, FootnoteNumbers(), text)
numTimes = dict() target = (len(a)//2)+1 for ele in a: if ele not in numTimes: numTimes[ele] = 1 else: numTimes[ele] +=1 if numTimes[ele] == target: return ele
In [6]: df Out[6]: A B C Idx 0 1 2 3 1 3 4 5 2 2 3 8 In [7]: df.max() Out[7]: A 3 B 4 C 8 dtype: int64 In [10]: df['B'].max() Out[10]: 4 In [8]: df.idxmax() Out[8]: A 1 B 1 C 2 dtype: int64
subprocess.Popen(['PATH=/where/ever/bin:$PATH coffee'], shell=True)
class TreeNode(object): def __init__(self, data, children=[]): self.data = data self.children = list(children) def add(self, child): self.children.append(child) ...
effect = QtGui.QGraphicsDropShadowEffect(button) effect.setOffset(0, 0) effect.setBlurRadius(20) button.setGraphicsEffect(effect)
pip install virtualenv virtualenv ~/.virtualenvs/science source ~/.virtualenvs/science/bin/activate pip install numpy scipy matplotlib ... # work on your project deactivate
>>> d = {'a': set([1,2,3]), 'b': set([3,4,5])} >>> set([j for i in d.values() for j in i]) {1, 2, 3, 4, 5}
>>> b = [1,2,3] >>> id(b) 36586568L >>> b.append(4) >>> id(b) 36586568L
def index(request): from ipware.ip import get_ip ip = get_ip(request) .... if ip not in LIST (save to table)
import csv import itertools import operator import sys def main(): reader = csv.reader(sys.stdin) for key, bloc in itertools.groupby(reader, key=operator.itemgetter(0)): print '-----' + key print list(bloc) if __name__ == '__main__': main()
def handle_response(self, r): reply = f.response.reply f.response.reply = controller.DummyReply() if hasattr(reply, "q"): f.response.reply.q = reply.q def run(): pass threading.Thread(target=run)
import fractions fractions.gcd(100, fractions.gcd(10, 20)) 10
people = models.UserRelationships.query.filter_by(user_id=user_id, active=ACTIVE_RECORD) friends = people.filter_by(friends=YES) return jsonify(friends.first().as_dict())
""" Create your webdriver as 'driver' and then begin here """ parent_el = driver.find_element_by_class_name('question_text_edit') children = parent_el.find_elements_by_css_selector('*') html_string = ''.join([child.get_attribute('outerHTML') for child in children])
document = search.Document( doc_id = files[file_index], fields = [ search.TextField(name='name', value=my_name) ] + [ search.AtomField(name='category', value=c) for c in categories ] )
import pyqtgraph as pg w = pg.GraphicsWindow() for i in range(4): w.addPlot(0, i) def onClick(event): items = w.scene().items(event.scenePos()) print "Plots:", [x for x in items if isinstance(x, pg.PlotItem)] w.scene().sigMouseClicked.connect(onClick)
>>> math.ceil(1e23) 1e+23 >>> int(math.ceil(1e23)) 99999999999999991611392L
class Visitor { Stack<Node> stack = new Stack<Node>(); // . . . void visitPlus(PlusExp pe) { pe.left.accept(this); pe.right.accept(this); Node b = stack.pop(); Node a = stack.pop(); stack.push(new BinOp(BinOp.PLUS, a, b)); }
import easygui import inspect import functools funcs = [f for f in easygui.__dict__.values() if callable(f)] for func in funcs: sig = inspect.signature(func) if 'title' in sig.parameters: newf = functools.partial(func, title='mytitle') setattr(easygui, func.__name__, newf)
import re >>> s = "Business -- way's" >>> s = re.sub(r'[^\w\s]', '', s) >>> s "Business ways"
CACHES = ... if 'test' in sys.argv: CACHES['default'] = {'BACKEND': 'django.core.cache.backends.dummy.DummyCache',}}
def format_for_user(self, user): body = self.body soup = BeautifulSoup(body) user_msg = False if not user is None: user_tags = soup.findAll('note', {"class": "%s" % user.nickname}) for tag in user_tags: tag.name = 'span' all_tags = soup.findAll('note') for tag in all_tags: tag.decompose() soup = soup.prettify() return (soup, user_msg)
In [106]: some_series = pd.Series([1, 2]) other_series = pd.Series([None]) some_series.loc[other_series.index] = other_series some_series Out[106]: 0 NaN 1 2 dtype: float64
>>> s_id=11 >>> [i for i in d['school'] if i['s_id'] == str(s_id)] [{'s_id': '11', 'city': 'yy'}]
{% if user.get_username == "user1" %} <link href="{% static 'myapp/css/user1_stle.css' %}" rel="stylesheet" media="screen"> {% endif %}
SELECT * FROM employee_leave WHERE '2014-11-7' BETWEEN leave_start_date AND leave_end_date;
>>> a = {'a': (1, 2, 3), 'b': (3, 2, 1)} >>> b = a.items() >>> b [('a', (1, 2, 3)), ('b', (3, 2, 1))] >>> b.sort(key=lambda x:x[1][2]) # sorting by the third item in the tuple >>> b [('b', (3, 2, 1)), ('a', (1, 2, 3))]
import string #fixed typo was using rot13 = string.maketrans( "ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz", "NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm") string.translate("Hello World!", rot13) # 'Uryyb Jbeyq!'
>>> l = ['US', 20, 'en', 'UK', 21, 'en', 'Fra', 23, 'fr'] >>> lists = [[l[3*i+j] for i in range(0, int(len(l)/3))] for j in range(0, 3)] >>> lists [['US', 'UK', 'Fra'], [20, 21, 23], ['en', 'en', 'fr']]
class X: def __getitem__(self, i): return str(i) x = X() print x[2, 3]
for i in range(6): # do stuff
for i in commands: if "PUSH" in i: for n in i: if n.isdigit(): stack.append(int(n)) return stack # move outside the loop
def is_duplicate(a,b): if a['name'] == b['name'] and a['cost'] == b['cost'] and abs(int(a['cost']-b['cost'])) < 2: return True return False newlist = [] for a in oldlist: isdupe = False for b in newlist: if is_duplicate(a,b): isdupe = True break if not isdupe: newlist.append(a)
soup.find_all(lambda tag: tag.name == 'p' and not tag.attrs)
while True: eventlet.sleep(dispatcher.getTimerResolution()) try: dispatcher.handleTimerTick(time.time()) except Exception: print 'Error while handling dispatcher tick!' raise
class Station(Base): __tablename__ = 'stations' ... station_logo_url = Column('STATION_LOGO_URL', NVARCHAR) ... ... stations = session.query(Station).all() for station in stations: logo_url = get_logo_url(station) station.station_logo_url = logo_url session.commit()
result = [each[2] for each in people] print(result)
username = name.split("_")[0] description = name.split("_")[1]
data = { 'test1': 10, 'test2': 20, 'testx': 40, 'foo': 50, } items = data.items() pd.DataFrame({'keys': [i[0] for i in items], 'values': [i[1] for i in items]})
>>> (''.join(s) for s in itertools.product(*['TO', 'G', 'ZDO', 'DEO', 'SGT', 'D', 'Z', 'FT', 'OV'])) <generator object <genexpr> at 0x7f2a46468f00> >>> # to demonstrate: ... >>> list(itertools.islice((''.join(s) for s in itertools.product(*['TO', 'G', 'ZDO', 'DEO', 'SGT', 'D', 'Z', 'FT', 'OV'])), 3)) ['TGZDSDZFO', 'TGZDSDZFV', 'TGZDSDZTO']
template_search_list = [ "comments/%s/%s/form.html" % (ctype.app_label, ctype.model), "comments/%s/form.html" % ctype.app_label, "comments/form.html" ]
"".join(str(int(x) + int(y))[-1] for x, y in zip(_id, uid[4:]))
$("#button533e24e4d7c79").trigger("click"); // This will mimic the clicking of the button (programmatically) -- requires Jquery
>>> type(None.__str__) <type 'method-wrapper'> >>> None.__str__.__class__ <type 'method-wrapper'> >>> type(None.__str__.__call__) <type 'method-wrapper'>
x = [True, False, True, True, False] all(x)
import re t = 'a b c 100 200' f = lambda x: str(int(x.group(0)) / 10) re.sub('\d+', f, t) # returns 'a b c 10 20'
' ' * n
output = "<html><body><table>" for key in your_dict: output += "<tr><td>%s</td><td>%s</td></tr>" % (key, your_dict[key]) output += "</table></body></html> print output
foo = [] found = False for i, tag in enumerate(content): if content[i].text == 'Example': found = True foo.append('Example') break else: continue if not found: foo.append('Not Example')
<body> <p>Hello! Here is a message: <?php echo exec('python hello.py'); ?></p> </body>
class Int(object): def __init__(self, init_val=0): self.val = init_val obj = Int(42) print Int, type(Int), obj, type(obj)
def searchWord(letters, word): count = 0 for l in letters: count += word.count(l) return count words = ['hello', 'world']; letters = ['l', 'o'] currentWord = None currentCount = 0 for w in words: n = searchWord(letters, w) print "word:\t", w, " count:\t", n if n > currentCount: currentWord = w currentCount = n print "highest word count:", currentWord
(setq py-which-bufname "My-Custom-Bufname")
LogOnline.query().filter(LogOnline.user == user)
columns = [tree.columnWidth(index) for index in range(tree.columnCount())]
with open(file) as inf: if inf.read(15) == "//StackOverflow": inf.seek(0) matches.append(inf.readlines())
xp = '//*[contains(@id, "_p_ctl17_ctl04_ctl01_ctl00_dlProps")]/tr[1]/td[1]/text()' item["Details_H1"] = hxs.select(xp).extract()
conn = MySQLdb.connect(host="localhost",user="root",passwd="",db="mydb") cursor = conn.cursor(MySQLdb.cursors.DictCursor) cursor.execute("SELECT * FROM books") result_set = cursor.fetchall() field_names = [val[0] for val in cursor.description] with open('yourfile.txt', 'a') as f: for row in result_set: line = ','.join(row[field_name] for field_name in field_names) f.write(line)
nrows, ncols = img.shape sigma = (14 * nrows / 100.0, 14 * ncols / 100.0) img = ndimage.gaussian_filter(img, sigma=sigma)
import numpy as np a = np.random.rand(1024, 1024) # create array of random values b = array.tobytes() np.fromstring(b).reshape(1024,1024)
b_li = set() output_list = [] b_li_add = b_li.add output_list_append = output_list.append for x in li: s = (x[0], x[2]) if s not in b_li: b_li_add(s) output_list_append(x)
import collections def revert_dict(d): rd = collections.defaultdict(list) for key, value in d.iteritems(): rd[value].append(key) return rd
counts = {} for each in column_names: count = {} print each + ':' for row in columns[each]: count[row] = count.get(row,0) + 1 counts[each] = count
>>> import os >>> os.path.basename(file) 'go.py'
a, b, c = ('foo,bar'.split(',', 2) + [None] * 3)[:3]
2. To get a Python 3 open() style file handler which streams bytestrings: open(filename, 'rb')
def longtask(self): def step_generator(step): for x in self.perform_step(step): ... yield x.id yield step_length_1, step_one_generator(1) yield step_length_2, step_one_generator(2) generators = self.longtask() for counter, (steplength, stepgen) in enumerate(generators): ProgressBar('Step %d' % counter, steplength) for index, value in enumerate(stepgen): # ....
@baker.command def test(start, end=None, sortby="time"): print "start=", start, "end=", end, "sort=", sortby $ script.py --sortby name 1 start= 1 end= sortby= name
>>> import string >>> >>> line = "Hello, world!" >>> >>> punctuation = set(string.punctuation) >>> print([c for c in line if c in punctuation]) [',', '!']
//use socket to construct a QDataStream object, like before QDataStream in(&socket); //in.setVersion(QDataStream::Qt_4_0); char buffer[1024] = {0}; //readRawData takes a char to dump to and the length, //so I'm sure there is a better way to do this. It worked for my example. in.readRawData(buffer, socket.bytesAvailable()); QString result; result = buffer; ui->resultLabel->setText(result);
class Skill(models.Model): name = models.CharField(max_length=255) value = IntegerRangeField(min_value=1, max_value=10) class Character(models.Model): name = models.CharField(max_length=255) skill = models.ManyToManyField(Skill)
class BigDictLookup(object): def __init__(self): self.bigdict = build_big_dict() # or some other means of generating it def lookup(self): # do something with self.bigdict def main(): my_bigdict = BigDictLookup() # ... my_bigdict.lookup() # ... my_bigdict.lookup()
MY_SETTING = os.environ.get('MY_ENV_VAR', 'my_default')
static void Main(string[] args) { string s = "Interpret: | 0 " + "Example".PadLeft(14) + "|".PadLeft(9); Console.WriteLine(s); }
class ApplicationRoot(object): def __getitem__(self, name): if name == "rest": return RestAPIRoot(parent=self, name=name) ...
from PIL import Image, ImageDraw img = Image.new('RGBA',(100, 100)) draw = ImageDraw.Draw(img) draw.ellipse((25, 25, 75, 75), fill=(255, 0, 0)) img.save('test.gif', 'GIF', transparency=0)
def factorial_cap(num): n = 1 i = 1 while n < num: i += 1 n *= i return i >>> factorial_cap(20) 4 >>> factorial_cap(24) 4 >>> factorial_cap(25) 5 >>> factorial_cap(1) 1 >>> factorial_cap(3628800) 10
# use range() in Python 3 l = [{'open': False, 'serve': False} for i in xrange(150)]
def shutdown_hook(): print "Trying to shut down server" httpd.shutdown() rospy.on_shutdown(shutdown_hook)
from django.contrib.staticfiles.urls import staticfiles_urlpatterns urlpatterns = patterns('', url(r'^static/blueprints/(?P<blueprint>[\w-]+)/(?P<path>.+)', 'my_view_name'), ... ) if settings.DEBUG: urlpatterns += staticfiles_urlpatterns()
globvar = 0 def set_globvar_to_one(): global globvar # Needed to modify global copy of globvar globvar = 1 def print_globvar(): print globvar # No need for global declaration to read value of globvar set_globvar_to_one() print_globvar() # Prints 1
>>> from urllib.parse import urlparse >>> urlparse('http://www.cwi.nl:80/%7Eguido/Python.html').hostname 'www.cwi.nl'
>>> df.groupby("Dept")["User"].nunique() Dept Cook 2 Home 1 Sports 1 Travel 1 Name: User, dtype: int64 >>> df.groupby("Dept")["User"].nunique().reset_index() Dept User 0 Cook 2 1 Home 1 2 Sports 1 3 Travel 1
grepResults = subprocess.check_output([grepCmd], shell=true).split() for i in range(1, len(grepResults), 9): pid = grepResults[i] killPidCmd = "kill -9 " + pid subprocess.call([killPidCmd], shell=true)
from __future__ import with_statement from fabric.api import * from contextlib import contextmanager as _contextmanager env.activate = '. ./.env/bin/activate' @_contextmanager def virtualenv(): with prefix(env.activate): yield def deploy(): with virtualenv(): local('echo hello world!')
>>> Integers=map(int,raw_input().split()) 1 >>> Integers [1]
for key_val, group in itertools.groupby(curs.fetchall(), lambda r: r[2]): print key_val for item in group: print "\t", item
import numpy as np a, b = 1, 1 n = 7 r = 3 y,x = np.ogrid[-a:n-a, -b:n-b] mask = x*x + y*y <= r*r array = np.ones((n, n)) array[mask] = 255
found_keys = numpy.where((my_array[:, 0] > start_time)*(my_array[:, 0] < end_time))[0]
import os while True: os.system('python run.py')
ipcluster engines -n 4
import json mark = '"values":' lists = json.JSONDecoder().raw_decode(text, text.index(mark)+len(mark))[0]
import requests from bs4 import BeautifulSoup word = "scrape" r = requests.get("http://www.urbandictionary.com/define.php?term={}".format(word)) soup = BeautifulSoup(r.content) print(soup.find("div",attrs={"class":"meaning"}).text) Gassing and breaking your car repeatedly really fast so that the front and rear bumpers "scrape" the pavement; while going hyphy
$ pip install django Requirement already satisfied (use --upgrade to upgrade): django in ... Cleaning up... $ python Python 2.7.5 (default, Aug 25 2013, 00:04:04) [GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin Type "help", "copyright", "credits" or "license" for more information. >>> import Django Traceback (most recent call last): File "<stdin>", line 1, in <module> ImportError: No module named Django >>> import django >>>
[word for word in the_text.split() if word in set_list]
def _cdf(self, x, min, max): k = floor(x) return (k-min+1)*1.0/(max-min) def _ppf(self, q, min, max): vals = ceil(q*(max-min)+min)-1 vals1 = (vals-1).clip(min, max) temp = self._cdf(vals1, min, max) return where(temp >= q, vals1, vals)
import sys import chilkat compress = chilkat.CkCompression() # Any string argument automatically begins a 30-day trial. success = compress.UnlockComponent("30-day trial") if (success != True): print "Compression component unlock failed" sys.exit() compress.put_Algorithm("ppmd") # Decompress back to the original: success = compress.DecompressFile("t.zipx", "t") if (success != True): print compress.lastErrorText() sys.exit() print "Success!"
data = [[1,2,3,4],[4,5,6,7,8]] data_arr = np.array(data) data_arr array([[1,2,3,4], [5,6,7,8]])
class parent_class: def __init__(self): self.title = multilang("hello world"); class multilang: def __init__(self, text): pass def __getitem__(self, key): if key == 'en': return "hello world";
ModelClass.objects.latest(timestamp_field)
from GoogleScraper import basic_usage def view_fun(request): basic_usage() return Response
>>> stri = "text123123text:[852],[456465],[1]" >>> array = ["one", "two", "three"] >>> d = {i:j for i,j in zip(re.findall(r'\[[^\]]*\]', stri), array)} # create a dict with values inside square brackets as keys and array list values as values. >>> d {'[852]': 'one', '[456465]': 'two', '[1]': 'three'} >>> re.sub(r'\[[^\]]*\]', lambda m: "'" + d[m.group()] + "'", stri) # replaces the key with the corresponding dict value. "text123123text:'one','two','three'"
MyAdmin(admin.ModelAdmin): def get_list_filter(self, request): if request.user.has_perm('some_perm'): return ['filter_1', 'filter_2', ......] else: return []
>>> class Device: def __init__(self): self._channels = [None]*6 self._outputs = [None]*4 @property def channels(self): print("inside @property") return self._channels @channels.setter def channels(self,value): print("inside:",self.channels, value) self._channels = value >>> device = Device() >>> device.channels[1] = "try" inside @property
def show_other(evt): f2 = wx.Frame(None,-1) c = wx.Choice(f2,-1,choices=['red','blue','green']) f2.Show() a = wx.App(redirect = False) f = wx.Frame(None,-1) b = wx.Button(f,wx.ID_OK) b.Bind(wx.EVT_BUTTON,show_other) f.Show() a.MainLoop()
{% thumbnail img.image "600" upscale=False as im %} <img src="{{ im.url }}" width="{{ im.width }}" alt="{{ object.name }}" /> {% endthumbnail %}
import requests def my_django_view(request): if request.method == 'POST': r = requests.post('https://www.somedomain.com/some/url/save', params=request.POST) else: r = requests.get('https://www.somedomain.com/some/url/save', params=request.GET) if r.status_code == 200: return HttpResponse('Yay, it worked') return HttpResponse('Could not save data')
<html> <title> @Title@ </title> <body> Welcome to my website - @Websitecontent@ </body> </html>
class MyResource(Resource): # ... def render(self, request): session = request.getSession() if not hasattr(session, 'count'): session.count = itertools.count() request.write(u"Count is %s" % (session.count.next(),))
import logging selenium_logger = logging.getLogger('selenium.webdriver.remote.remote_connection') # Only display possible problems selenium_logger.setLevel(logging.WARNING)
import pandas from collections import Counter a = ['a', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'c', 'd', 'e', 'e', 'e', 'e', 'e'] letter_counts = Counter(a) df = pandas.DataFrame.from_dict(letter_counts, orient='index') df.plot(kind='bar')
__all__ = ['myfunction']
$ python setup.py develop
a = doc.getElementsByTagName('string') for i in range(len(a)): if i == 0: a[i].firstChild.nodeValue = myvalue1 if i == 7: a[i].firstChild.nodeValue = myvalue2 if i == 9: a[i].firstChild.nodeValue = myvalue3
>>> class LenDict(dict): ... @property ... def len(self): ... return len(self) ... >>> d=LenDict() >>> d.len 0 >>> d[1]=2 >>> d.len 1 >>>
import itertools users = df.user_id.unique() df_indexed = df.set_index(['user_id', 'day']) index = pd.MultiIndex.from_tuples(list(itertools.product(users, range(365)))) reindexed = df_indexed.reindex(index, fill_value=0)
>>> s = scatter(X,Y, s=75, c=T, alpha=.5) >>> colorbar(s) >>> show()
@receiver(pre_save, sender=Country) def country_presave_callback(sender, instance, *args, **kwargs): ...
# step 1 club_types = ClubTypes.objects.distinct() # step 2 & #3 club_sets = [] for current_club_type in club_types: cset = Clubs.objects.filter(club_type__id=current_club_type.pk).order_by('name') club_sets.append((current_club_type, cset))
import matplotlib.pyplot as plt f, axes = plt.subplots(4, 1, figsize=(10, 4)) f.subplots_adjust(hspace=0)
room1IsLoaded = False while gameLoop == 1: if not room1IsLoaded: spritegroup.add(coin) room1IsLoaded = True
from commands import getoutput response = getoutput('php myscript.php')
import inspect all_functions = inspect.getmembers(module, inspect.isfunction)
import numpy as np a = np.array(range(5, 10)) b = np.array(range(2, 6)) res = a[np.newaxis, :] - b[:, np.newaxis] print(res) # [[3 4 5 6 7] # [2 3 4 5 6] # [1 2 3 4 5] # [0 1 2 3 4]]
np.diag(np.exp(np.diag(a)))
if button.CanSetTransparent(): button.SetTransparent(100)
n=5 for ((i=0;i<=$n;i++)); do printf -v file_name "%0.4d.png" $i echo $file_name done
Button: text: 'next screen' on_release: app.root.transition = SlideTransition(direction='right') app.root.current = '2ndScreen' ...
value_when_true if condition else value_when_false
code <<-EOH import boto f = open('test.txt','r') f.write('adfadf') f.close() EOH
>>> foo = ['106,1,1,43009', '106,1,2,43179', '106,1,3,43189', '106,1,4,43619', '106,1,5,43629'] >>> [tuple(f.split(",")) for f in foo] [('106', '1', '1', '43009'), ('106', '1', '2', '43179'), ('106', '1', '3', '43189'), ('106', '1', '4', '43619'), ('106', '1', '5', '43629')]
SWIG_POINTER_OWN SWIG_POINTER_NOSHADOW
>>> import re >>> re.split('[ .]', 'a b.c') ['a', 'b', 'c']
import numpy as np x = np.random.normal(size=(206,11,11)) y = np.random.normal(size=(206,11,11)) complx = x + 1j*y # takes only the diagonal part of all the 11x11 matrices complx_diag = np.diagonal(complx,0,1,2) # do the calc zn = np.abs(complx_diag)**(-0.5) for n in xrange(a): z = zn[n] # do your stuff
>>> def externalCode(two, first=1, second=2): ... print two, first, second ... >>> params = {'two': 9, 'first': 8, 'second': 7} >>> externalCode(**params) 9 8 7
class BAdmin(admin.TabularInline): ... def get_queryset(self, request): qs = super(BAdmin, self).get_queryset(request) return qs.filter(user=request.user)
def fetch(url): return (url, urllib2.urlopen(url).read())
//this program assumes the creation of a class and method// HashMap<String, Boolean> mydic = new HashMap<String, Boolean>(); mydic.put("item1", false); mydic.put("item2", false); mydic.put("item3", false);
proc = subprocess.Popen([executable, arg1, arg2], stdout=subprocess.PIPE, stderr=subprocess.PIPE) out, err = proc.communicate() status_code = proc.returncode
x, y = pygame.mouse.get_pos()
PyObject* (*fpFunc)(PyObject*,PyObject*) = someFunction; PyMethodDef methd = {"methd",fpFunc,METH_VARARGS,"A new function"}; PyObject* name = PyString_FromString(methd.ml_name); PyObject* pyfoo = PyCFunction_NewEx(&methd,NULL,name); Py_DECREF(name);
cb = plt.colorbar(im, ticks=[], label="Values (0-1)") cb.ax.text(0.5, -0.01, '0', transform=cb.ax.transAxes, va='top', ha='center') cb.ax.text(0.5, 1.0, '1', transform=cb.ax.transAxes, va='bottom', ha='center')
for small_entry in small_list: for big_entry in big_list: if small_entry[1] == big_entry[1] : print(small_entry[0] + "matches" + big_entry[0])
json.dumps(separators=(',', ':'))
$ ipython --pylab >>> dictionary = {'a': [1,2,3,4,5], 'b': [5,2,3,4,1], 'c': [1,3,5,4,6]} >>> map(mean, np.array(dictionary.values()).transpose()) [2.3333333333333335, 2.3333333333333335, 3.6666666666666665, 4.0, 4.0]
from twisted.internet import reactor from twisted.web import static, server, twcgi root = static.File("/root") root.putChild("cgi-bin", twcgi.CGIDirectory("/var/www/cgi-bin")) reactor.listenTCP(80, server.Site(root)) reactor.run()
lst = foo.split("|") lst[0] lst[1] ...
>>> print df.drop('Total', axis=1).divide(df.Total, axis=0) Group1 Group2 0 0.600 0.400 1 0.950 0.050
>>> def function(x, y): ... """A simple function, but 'y' will be a tuple. ... """ ... a,b = y ... return (a*b) + x ... >>> print function(3,(4, 5)) 23
os.system("start application-name")
import time target_time = time.clock() + 0.025 while time.clock() < target_time: pass
def maketransformer(file): #contains arbitrary stuff that takes too long data = gdal.Open(file) output_wkt = data.GetProjection() srs_out = osr.SpatialReference() srs_out.ImportFromWkt(output_wkt) transformer = osr.CoordinateTransformation(srs_out) return transformer transformer = maketransformer('data/w001001.adf') for tuple in shapefilepoints: getelevation(transformer.Transform(tuple))
>>> import urllib.request as urllib2 >>> result = json.loads(urllib2.urlopen('...').read().decode('utf8')) >>> with open('example.txt', 'w', encoding='utf8') as f: ... print(result['captions'][0]['content'], file=f)
`[^\n]*(.*)`
import json tables = ["a", "b", "c", "d"] data = {} for t in tables: results = sf.query("select id from %s" % t)["records"] data[t] = [r["id"] for r in results] with open("Dataset.json", "w") as f: json.dump(data, f)
import sys reload(sys) sys.setdefaultencoding('UTF8')
def play_songs(file_list): random.shuffle(file_list) pygame.mixer.music.load(file_list[songNumber]) pygame.mixer.music.play(1) for num, song in enumerate(file_list): if num == songNumber: continue # already playing pygame.mixer.music.queue(song)
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax1 = fig.add_subplot(2, 1, 1) ax2 = fig.add_subplot(2, 1, 2, sharex=ax1) t = np.linspace(0, 1, 1000) ax1.plot(t, np.sin(2 * np.pi * t)) ax2.plot(t, np.cos(2 * np.pi * t)) plt.show()
re.findall(r'\b\d{4}\b', ....)
from __future__ import print_function import os import sys def some_function_with_cached_sys_stdout(stdout=sys.stdout): print('cached stdout', file=stdout) with stdout_redirected(to=os.devnull), merged_stderr_stdout(): print('stdout goes to devnull') some_function_with_cached_sys_stdout() print('stderr also goes to stdout that goes to devnull', file=sys.stderr) print('stdout is back') some_function_with_cached_sys_stdout() print('stderr is back', file=sys.stderr)
file_p = open(file_path, "ab")
>>> import re >>> s = 'I like this as much as that' >>> re.sub('and|as|like', '', s) 'I this much that'
text = """hello what is your name my name is david""" print text.split() #output: ['hello', 'what', 'is', 'your', 'name', 'my', 'name', 'is', 'david']
from scrapy.loader import ItemLoader from scrapy.loader.processors import TakeFirst, MapCompose, Join class MyItemLoader(ItemLoader): default_output_processor = TakeFirst() message_in = MapCompose(unicode, unicode.strip) message_out = Join()
session.query(Product).join(User.addresses)\ .options(subqueryload(Product.orders),\ subqueryload(Product.tags)).all()
from twisted.internet import reactor from twisted.web import proxy, server site = server.Site(proxy.ReverseProxyResource('www.yahoo.com', 80, '')) reactor.listenTCP(8080, site) reactor.run()
import sys myFile=sys.stdout myFile.write("Hello!\n")
import json from django.http import HttpResponse from django.core import serializers def get_object(request, name): name = request.GET.get('name', '') if name is not None: obj = Company.objects.get(name=name) company = serializers.serialize('json', [obj,]) struct = json.loads(company) data = json.dumps(struct[0]) return HttpResponse(data, content_type='json')
item != 'None'
HAYSTACK_CONNECTIONS = { 'default': { 'ENGINE': 'project1.search_backends.CustomElasticSearchEngine', 'URL': '123.123.123.123:9200', 'INDEX_NAME': 'haystack', }, }
x = '0.57 10 0' #separate the space delimited string into a list containing substrings y = x.split(' ') #you can access an element from your list print y[0] #or all of the elements for i in y: print i
import sympy M = sympy.Matrix(3, 2, lambda i,j:sympy.var('M_%d%d' % (i+1,j+1)))
In [1]: l=[['a1','a2','a3'],['a4','a5','a6'],['a7','a8','a9']] In [2]: from __future__ import print_function In [3]: print(*l,sep='\n') ['a1', 'a2', 'a3'] ['a4', 'a5', 'a6'] ['a7', 'a8', 'a9']
>>> import struct >>> >>> struct.unpack('<BBBB', struct.pack('<I', 4278298816)) (192, 168, 1, 255) >>> >>> '{}.{}.{}.{}'.format(*_) '192.168.1.255' >>>
bin_width = int(round(duration / bins)) followers = [sum(followersList[i:i+bin_width]) for i in xrange(0, duration, bin_width)]
for td in soup_result: print td.getText()
In[4]: from collections import namedtuple In[5]: coords = namedtuple("Coords", ['x', 'y']) In[6]: coords Out[6]: __main__.Coords In[7]: coords(1,2) Out[7]: Coords(x=1, y=2) In[8]: coords(1.235445,2.2345345) Out[8]: Coords(x=1.235445, y=2.2345345) In[9]: coords(1.2354451241234214,2.234534512412414134) Out[9]: Coords(x=1.2354451241234214, y=2.2345345124124143)
dataframe1.rename(columns=dataframe2.set_index('Old_Names')['New_Names'], inplace=True)
base_url = "http://www.example.com/dir1/dir2" next = "/index.html"
In [7]: for i in Averages: print(" ".join([str(i)]*3)+"\n") ...: ...: 200 200 200 300 300 300
@classmethod def save_params(cls, obj, filename): with open(filename, "w") as f: yaml.dump(obj, f, default_flow_style=False) @classmethod def load_params(cls, obj, filename): with open(filename, "r") as f: obj = yaml.load(f) print obj.aero_soot return obj
Y.io('/savedata', { method: 'POST', data: Y.JSON.stringify(jData), headers: { 'Content-Type': 'application/json' }, on: { success: function (id, response) { // do something with the response from the server, for example Y.one('#some-node').set('text', response.responseText); } } });
var1 = var2 = var3 = None # code that might change the value of three variables mentioned above myvar = var1 or var2 or var3
In [193]: df Out[193]: A B C D a 1 8 9 1 b 5 4 3 6 c 4 6 1 3 d 1 0 2 9 In [194]: df.divide(df.ix[0] / 100) Out[194]: A B C D a 100 100 100.000000 100 b 500 50 33.333333 600 c 400 75 11.111111 300 d 100 0 22.222222 900
data = [('1998-01-20',8) , ('1998-01-22',4) , ('1998-06-18',8 ) , ('1999-07-15' , 7), ('1999-07-21',1)] dictionary = dict() for (mydate, val) in data: # ym = mydate[0:7] # the key is only the year month combination (i.e. '1998-01' for example) dictionary[ym] = dictionary.get(ym, 0) + val # return the value for that key or return default 0 (and create key) data_aggregated = [(key, val) for (key, val) in dictionary.iteritems()] # if you need it back in old format
>>> 0b110 * 0b11 18 >>> bin(0b110 * 0b11) '0b10010'
class Blurb(models.Model): ident = models.CharField(..., db_index=True) blurb = models.TextField(...) PK ident text 1 main Hey! Do you like this template? This... {% load blurb %} ... {% blurb main %}
def save(self, **kwargs): super(Publisher, self).save(**kwargs) for item in self.item_set.all(): item.code = "%s - whatever" % item.code
with open('rules_test1Fold0w4_sample00ll1.dat') as fileobj: lines = fileobj.readlines() actualrules='' for index in sortrule: print lines[index]
class Unit(): def __init__(self): self.last = pygame.time.get_ticks() self.cooldown = 300 def fire(self): # fire gun, only if cooldown has been 0.3 seconds since last now = pygame.time.get_ticks() if now - self.last >= self.cooldown: self.last = now spawn_bullet()
for company in companies: company_html = requests.get(company['href']) company_bs = BeautifulSoup(company_html) company_page_links = company_bs('a') for link in company_page_links: if link['href'].startswith('mailto:'): #You found the e-mail address! break#Exits the loop, as you already found the address
text.insert(END, "spam\n") text.see(END)
from subprocess import call acrobat = "C:\Program Files\Adobe\Acrobat 7.0\Acrobat.exe" ## Acrobat reader would also work, apparently file = "C:\path\to\my\file.pdf" printer = "Printer Name Goes Here" call([acrobat, "/T", file, printer])
class MyDict(dict): def __setitem__(self, key, val): #Test for proper interface if val.pass_the_test: dict.__setitem__(self, key, val) else: raise SomeKindOfException()
This is a string --> VGhpcyBpcyBhIHN0cmluZw== StackOverflow --> U3RhY2tPdmVyZmxvdw== foobar --> Zm9vYmFy
vars = {} for i in range(10): vars["Ilock"+str(i)] = something() vars["Ilock4"] = 42
from django.conf.settings import BASE_DIR # won't work from django.conf import settings # correct way base_dir = settings.BASE_DIR
def get_monthly_totals(year, attr): queryset = Widget.objects.filter(**{attr + "__year": year}) totals = [0] * 12 for widget in queryset: totals[getattr(widget, attr).month -1] += 1 return totals totals_manufactured = gtotalset_monthly_totals(year, "manufactured") totals_sold = get_monthly_totals(year, "sold")
import httplib2 from oauth2client.file import Storage from oauth2client.client import flow_from_clientsecrets from oauth2client.tools import run from apiclient.discovery import build storage = Storage("saved_user_creds.dat") credentials = storage.get() if credentials is None or credentials.invalid: credentials = run(flow_from_clientsecrets("client_secrets2.json", scope=["https://www.googleapis.com/auth/drive"]), storage) http = credentials.authorize(httplib2.Http()) service = build("drive", "v2", http) print service.files().list().execute()
def index(number_list, start=0): if start >= len(number_list): return -1 elif number_list[start] == start: return start else: return index(number_list, start+1)
class mywords: def __init__(self, a): self.words = a self.length = map(lambda w: len(w), a) def append(self, string): self.words.append(string) self.length.append(len(string)) a = mywords(['A', 'list', 'of', 'words']) a.append("this") print a.words print a.length
(defadvice py-execute-buffer (after advice-delete-output-window activate) (delete-windows-on "*Python Output*"))
def to_complete(request): if request.session.has_key("complete_pending"): return HttpResponseForbidden() request.session["complete_pending"] = True return MobileResponseRedirect('/battle/complete/') def complete(request): if not request.session.get("complete_pending", False): return HttpResponseForbidden() request.session["complete_pending"] = False do_something() return MobileResponse(html)
prefixed_bits = "extract this double:\xc2\x8eET\xfb!\t@" pos = prefixed_bits.index(":") + 1 print "That looks like the value %f" % struct.unpack("d", prefixed_bits[pos:pos+8])
* * * * * python /your/path/to/manage.py csvsync
datetimes = [ ... ] # subtracting datetimes gives timedeltas timedeltas = [datetimes[i-1]-datetimes[i] for i in range(1, len(datetimes))] # giving datetime.timedelta(0) as the start value makes sum work on tds average_timedelta = sum(timedeltas, datetime.timedelta(0)) / len(timedeltas)
def search_file(filename, target, start_at = 0): with open(filename) as infile: for line_no, line in enumerate(infile): if line_no < start_at: continue if line.find(target) >= 0: return line_no return None
In [55]: data = (0.25, 0.25) In [56]: 'and'.join([str(item).replace('.','') for item in data]) Out[56]: '025and025'
import array import numpy as np a = array.array("d") a.extend([0,1,2]) a.extend([3,4,5]) b = np.frombuffer(a, np.float).reshape(-1, 3)
final_string = ''.join(substring for substring in my_generator())
sched.add_job(job_function, trigger='interval', hours=2, end_date='2016-10-10 09:30')
class PersonnelManager(models.Manager): def create(self, username, email, phone, address, **kwargs): user = User.objects.get_or_create(username=username, email=email) return super(PersonnelManager, self).create(user=user, phone=phone, address=address, **kwargs) class Personnel(models.Model): ... objects = PersonnelManager()
>>> import pytz, datetime >>> pytz.country_timezones['de'] ['Europe/Berlin'] >>> matching_tzs = [t for t in pytz.country_timezones['de'] if pytz.timezone(t)._utcoffset.total_seconds() == 3600] >>> datetime.datetime.now(tz=pytz.timezone(matching_tzs[0])) datetime.datetime(2011, 5, 6, 17, 5, 26, 174828, tzinfo=<DstTzInfo 'Europe/Berlin' CEST+2:00:00 DST>)
my_list = ListFlowable([ ListItem(Paragraph("Line 1", styles['Normal']), leftIndent=35, value='circle', bulletColor=CMYKColor(0.81, 0.45, 0.53, 0.23) ), ListItem(Paragraph("Line 2", styles['Normal']), leftIndent=35, value='circle', bulletColor=CMYKColor(0.81, 0.45, 0.53, 0.23)) ], bulletType='bullet', start='circle', leftIndent=10 )
from sqlalchemy import case from sqlalchemy.ext.hybrid import hybrid_property @hybrid_property def type(self): return 'special' if self.order_type else 'regular' @type.expression def type(cls): return case({True: 'special', False: 'regular'}, cls.order_type)
condition = [] while not condition: ... self.mock_module['time'].sleep.side_effect = [lambda:condition.append(1)]
class car(object): db_read = False def read_spec_and_populate_db(): if not car.db_read: spec = read_from_file(spec.yaml) populate_db(spec) car.db_read = True
def _func(): c0 = np.array([1,2,3]) c1 = np.array([1,2,3]) c2 = np.array([1,2,3]) c3 = np.array([1,2,3]) def actual_func(x, y, z): # do stuff # return stuff return actual_func _func_closure = _func() def func(x, y, z): return _func_closure(x, y, z)
>>> soup.find('li', attrs={'id':'SalesRank'}).find('b', text="Sellers Rank:") <b>Sellers Rank:</b> >>> soup.find('li', attrs={'id':'SalesRank'}).find('b', text="Sellers Rank:").next_sibling u' \n #81 in Fun\n ('
>>> filter(bool, map(str.strip, s.replace('+--', '|').split('Parse:')[1].split('|'))) ['book VB ROOT', 'Can MD aux', 'we PRP nsubj', 'hotel NN dobj', 'an DT det', 'in IN prep', 'Lagos NNP pobj', '? . punct']
browser = spynner.Browser() browser.debug_level = spynner.DEBUG browser.create_webview() browser.show() # now maximize the webview browser.webview.showMaximized()
{ "version": "0.1.0", "command": "c:\\Python34\\python", "args": ["app.py"], "problemMatcher": { "fileLocation": ["relative", "${workspaceRoot}"], "pattern": { "regexp": "^(.*)+s$", "message": 1 } } }
goods1 = {'coal': 1, 'boxes': 2} Newcastle = ['Newcastle' , dict(goods1)] Wylam = ['Wylam' , dict(goods1)] print Newcastle print Wylam Newcastle[1]['coal'] = 4; print Newcastle print Wylam
In [4]: idx = indexes[:, None] + np.arange(-1, 3) In [5]: values[idx] Out[5]: array([[ 0.83609961, 0.47534985, 0.17330516, 0.15152753], [ 0.10245308, 0.70428183, 0.36804107, 0.13074141], [ 0.36804107, 0.13074141, 0.77377332, 0.11368238]])
>>> for x in ('3.605', '29342398479823.605', '3.604', '3.606'): print x, repr(Decimal(x).quantize(Decimal('.01'), decimal.ROUND_HALF_UP)) 3.605 Decimal('3.61') 29342398479823.605 Decimal('29342398479823.61') 3.604 Decimal('3.60') 3.606 Decimal('3.61')
input_file = open("namesandnumbers.txt", "r") the_dict = {} for line in input_file: initial = line.replace("\n","").split(" ") key = initial[0] number = int(initial[1]) value = tuple([int(x) for x in initial[2: number + 2]]) the_dict[key] = value
>>> '%.30f' % math.cos(60./180.*math.pi) '0.500000000000000111022302462516' >>> '%.30f' % np.cos(60./180.*np.pi) '0.500000000000000111022302462516'
>>> name = 'Mr.Ed' >>> ''.join(c.lower() if c.isupper() else c.upper() for c in name) 'mR.eD'
import requests import eventlet eventlet.monkey_patch() with eventlet.Timeout(10): requests.get("http://ipv4.download.thinkbroadband.com/1GB.zip", verify=False)
import itertools for combination in itertools.product(*[(True, False)]*5): assertEqual(foo(*combination), 10)
import signal RUN = True def handle(a, b): global RUN print "handled" RUN = False signal.signal(signal.SIGTERM, handle) while RUN: signal.pause() print "Stopping"
.rpartition('<report>')[-1]
from decimal import Decimal r1 = Decimal("5.57") * Decimal("2.92") r2 = Decimal("3.25") * Decimal("5") epsilon = Decimal("0.01") if abs(r1 - r2) <= epsilon: print "Almost equal!"
array( [ [ i*j for j in xrange(5)] for i in xrange(5)] )
height = input("Please enter the tree height : ") height1 = height trunk = height/3 spacevar = str(" ") for i in range(0,height): print spacevar*(height-1)+"*"*(((i+1)*2)-1) height = height-1 for p in range (0,trunk): print spacevar*(height1-1)+"*"
if re.search('^>[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]', line): try: seqFile.close() except NameError: # Assuming you haven't set seqFile else where before the first time through the loop pass seqFile = open('%s.fasta' % line, 'a+') # Do everything else you were going to do
>>> from itertools import groupby, count >>> nums = [1, 2, 3, 4, 8, 10, 11, 12, 17] >>> [list(g) for k, g in groupby(nums, key=lambda n, c=count(): n - next(c))] [[1, 2, 3, 4], [8], [10, 11, 12], [17]]
>>> np.argmax(a.dot(b)) 1
from itertools import product chars = '0123456789' # chars to look for for length in range(1, 3): # only do lengths of 1 + 2 to_attempt = product(chars, repeat=length) for attempt in to_attempt: print(''.join(attempt))
class Dicty(models.Model): name = models.CharField(max_length=50) class KeyVal(models.Model): container = models.ForeignKey(Dicty, db_index=True) key = models.CharField(max_length=240, db_index=True) value = models.CharField(max_length=240, db_index=True)
- url: /assets static_dir: templates/assets
for val in data: if val is not None and (val.end() - val.start()) == 11: result.append(val.groupdict())
from flask import Flask, jsonify app = Flask(__name__) @app.route("/data") def data_route(): collected_data = [] # Your data return jsonify(results=collected_data) if __name__ == "__main__": app.run()
operator.neg(obj) operator.__neg__(obj) Return obj negated (-obj).
class A(object): def __init__(self): self.logger = logging.LoggerAdapter(log, {'session_id': random(1024)}) def process(self): self.logger.info('hello')
import re pat = "^[A-Za-z][0-9]*_" myStringA = 'c17898_some other characters and symbols' output = re.sub(pat, "", myStringA) print output
import shutil import subprocess proc = subprocess.Popen([...], stdin=subprocess.PIPE) my_input = get_filelike_object('from a place not given in the question') shutil.copyfileobj(my_input, proc.stdin)
mytext = """Some text Some more text etc... """
plt.ylabel('Intensity $(10^{' + str(int(orderMagnitude)) + '})$')
from wsgiref.simple_server import make_server import datetime def application(environ, start_response): start_response('200 OK', [('Content-type', 'text/plain')]) retval = [ str(environ), "\n", "Hello world!\n", str(datetime.datetime.now()) ] return retval make_server('localhost', 6548, application).serve_forever()
from PIL import Image from math import * import numpy list1 = [] im = Image.open("313.JPG") im.show() list1 = list(im.getdata()) length = len(list1) # generate random noise data with mean 0 and sd 10 list2 = numpy.random.normal(0, 10, length) # Add this to the image data list3 = list1+list2 im.putdata(list3) im.show()
vals = {'A': ['B','C'], 'D':['F','G'], 'H':['I','J']} if 'Z' in vals: print 'found Z' else: vals['Z'] = ['aa','bb']
class DeudaForm(forms.ModelForm): class Meta: model = Deuda exclude = ('propietario',) def __init__(self, propietario): forms.ModelForm.__init__(self) self.fields['adeudado'].queryset = User.objects.exclude(pk=d.propietario.pk)
>>> from datetime import datetime >>> s = '2014-12-11T20:46:12Z' >>> datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ') datetime.datetime(2014, 12, 11, 20, 46, 12) >>>
df.groupby(['FIRST_NM', 'LAST_NM']).apply(lambda group: ','.join(group['PAGE_NUM'])) Out[23]: FIRST_NM LAST_NM Eric Adams 9 Jane Doe 14,16 John Smith 1,7,19 dtype: object
# reset the `totalintron` for the current `exonnumber` totalintron = 0 # only iterate `exonnumber - 1` (which is guaranteed to be len(y) - 1 at max) for index in range(exonnumber - 1): first_max = max(y[index]) second_min = min(y[index + 1]) intron = second_min - first_max # don’t print `intron`, we only care about the total totalintron = totalintron + intron print totalintron
#!/usr/bin/env python2 from itertools import groupby data = [1441831770.0, 1441831780.0, 1441831790.0, ...] longest = [] for k, g in groupby(enumerate(data), lambda (i,x): i*10 - int(x)): longest = max(longest, [x for _, x in g], key=len) print longest
dsn_tns = cx_Oracle.makedsn(ip, port, service_name=SID)
% Keep a copy of the original notice environment \let\origbeginnotice\notice \let\origendnotice\endnotice % Redefine the notice environment so we can add our own code to it \renewenvironment{notice}[2]{% \origbeginnotice{#1}{#2}% equivalent to original \begin{notice}{#1}{#2} % load graphics \ifthenelse{\equal{#1}{warning}}{\includegraphics{warning}}{} \ifthenelse{\equal{#1}{notice}}{\includegraphics{notice}}{} % etc. }{% \origendnotice% equivalent to original \end{notice} }
from itertools import product def knight_moves(position): x, y = position moves = list(product([x-1, x+1],[y-1, y+1])) + list(product([x-2,x+2],[y-1,y+1])) moves = [(x,y) for x,y in moves if x >= 0 and y >= 0 and x < 8 and y < 8] return moves
table_name = "TABLE 1" table = soup.find(text=lambda x: x and table_name in x).find_parent('table')
>>> import argparse >>> parser = argparse.ArgumentParser( ... description='This is my utility description.', ... epilog='The exit status will be 0 if everything is fine, ' ... 'and 1 if an input-file or an output-directory does not exist') >>> >>> parser.print_help() usage: [-h] This is my utility description. optional arguments: -h, --help show this help message and exit The exit status will be 0 if everything is fine, and 1 when an input-file or an output-directory does not exist
def starting_with(arr, start_index): # use xrange instead of range in python 2 for i in range(start_index, len(arr)): yield arr[i] for i in range(start_index): yield arr[i] for value in starting_with(my_list, 3): ...
c_list = a_list.values_list('c', flat=True)
import requests f = open('C:\\Users\\Amir\\Desktop\\snow.jpg', 'rb') urls='http://127.0.0.1:8000/upper' r=requests.post(urls, files= {'uploads':f}) print(r.status_code)
import pygtk pygtk.require('2.0') import gtk import wnck import re import sys import time screen = wnck.screen_get_default() while gtk.events_pending(): gtk.main_iteration() titlePattern = re.compile('.*Geany.*') windows = screen.get_windows() for w in windows: if titlePattern.match(w.get_name()): print w.get_name() w.activate(int(time.time()))
from openpyxl import Workbook, load_workbook wb = Workbook() ws = wb.create_sheet() ws.title = 'Pi' ws.cell('F5').value = 3.14156265 wb.save(filename=r'C:\book2.xls') # Re-opening the file: wb_re_read = load_workbook(filename=r'C:\book2.xls') sheet = wb_re_read.get_sheet_by_name('Pi') print sheet.cell('F5').value
if __name__ == '__main__': # Pyinstaller fix multiprocessing.freeze_support() main()
>>> from igraph import Graph, mean >>> g = Graph.GRG(100, 0.2) >>> mean(g.degree()) 10.8
loc = {} for x in range(N): for y in range(M): loc.setdefault(matrix[x][y], []).append((x,y))
import urllib2 def ranker(host): api_key = 'xxxxxxxxxxxxxxxxx' url = 'http://pagerank.my-addr.com/external_fakepr_api/%s/%s'%(api_key, host) link = urllib2.urlopen(url) data = link.readline() return data.split('|')[0] print 'www.example.com', ranker('www.example.com')
>>> data = [1,2,3,4,5,6] >>> zip(data[0::2], data[1::2]) [(1, 2), (3, 4), (5, 6)]
regex = re.compile(r'\b(?:%s)\b' % '|'.join(words))
import win32clipboard # set clipboard data win32clipboard.OpenClipboard() win32clipboard.EmptyClipboard() win32clipboard.SetClipboardText('testing 123') win32clipboard.CloseClipboard() # get clipboard data win32clipboard.OpenClipboard() data = win32clipboard.GetClipboardData() win32clipboard.CloseClipboard() print data
class pattern_class(object): generic_attr = "bla" def declare(classname): return type(classname, (pattern_class,), {'__tablename__' : classname+"_daily_history"}) class_list_names = ['rak', 'bak', 'sak', 'mak'] for name in class_list_names: cls = declare(name) globals()[name + '_entry'] = cls() print rak_entry.__tablename__, bak_entry.__tablename__, sak_entry.__tablename__, mak_entry.__tablename__
import os # if file does not exist write header if not os.path.isfile('filename.csv'): df.to_csv('filename.csv',header ='column_names') else: # else it exists so append without writing the header df.to_csv('filename.csv',mode = 'a',header=False)
father_name = raw_input("Please enter your Father's Name: ") mother_name = raw_input("Please enter your Mother's Name: ")
emails = re.findall('[^@ ]+@[^@ ]+\.[^@ ]+', stringWithEmails)
python ./manage.py collectstatic
In [17]: import lxml.html as LH In [18]: content = '<root><div id="pgbrk" ......>....Page Break....</div></root>' In [19]: root = LH.fromstring(content) In [20]: tree = root.getroottree() In [21]: tree.getpath(root[0]) Out[21]: '/html/body/root/div'
entity.compressed_value = entity.compressed_value entity.put()
for iframe in iframexx: response = urllib2.urlopen(iframe.attrs['src']) iframe_soup = BeautifulSoup(response)
from socket import * s = socket(AF_INET, SOCK_DGRAM) s.bind(("", 1234)) print(s.getsockname()) # prints ("0.0.0.0", 1234) sq = socket(AF_INET, SOCK_DGRAM) sq.connect(("10.0.0.3", 1234)) print(sq.getsockname()[0]) sq.close() s.sendto("hello", ("10.0.0.3", 1234)) # sends from 10.0.0.2
>>> a = np.array([0,2,3,0]) >>> b = np.array([1,0,3,0]) >>> a[b!=0] = 0 >>> a array([0, 2, 0, 0])
t = Team.objects.get(pk=168) for x in t.teamplayer_set.all(): if x.captain: print "%s (Captain)" % (x.player.name) else: print x.player.name
url_for('secure_thingy', _external=True, _scheme='https', viewarg1=1, ...)
>>> import urllib.parse >>> import webbrowser >>> def google(x): webbrowser.open("https://encrypted.google.com/search?hl=en&q=" + urllib.parse.quote(x)) >>> google("new hampshire")
#%% df = pd.DataFrame() df['A'] = pd.Series([430,0,190], index=['ALB2008081610', 'ALB200808167', 'ALB200808168']) print(df) #%% df['B'] = None print(df) #%% df.loc[(df.A==0), 'B'] = 'x' print(df) #%% df.loc[(df.A!=0) & (df.A<=200), 'B'] = 'y' print(df)
import Tkinter as tk def quit(event): print("You pressed Control-Key-1") root.quit() root = tk.Tk() root.bind('<Control-Key-1>', quit) root.mainloop()
service_states = s.read().splitlines()
>>> s = "***(((((hi abc ***&&&&" >>> re.sub("\W{3,}", "", s) 'hi abc' >>> s = "(((((hi abc )))))))" >>> re.sub("\W{3,}", "", s) 'hi abc'
def sandwich(bread, meat='turkey', cheese=None): if cheese: print bread,"bread sandwich with",meat,"and",cheese,"cheese" else: print bread,"bread sandwich with",meat
import shutil response=urllib2.urlopen('http://www.diffbot.com/api/article?token='+token+'&url='+url).read() with open(file_out,'w') as outfile: shutil.copyfileobj(response, outfile)
import os def doc_to_text_catdoc(filename): (fi, fo, fe) = os.popen3('catdoc -w "%s"' % filename) fi.close() retval = fo.read() erroroutput = fe.read() fo.close() fe.close() if not erroroutput: return retval else: raise OSError("Executing the command caused an error: %s" % erroroutput) # similar doc_to_text_antiword()
<% operations = { 'one': operationOneBody, 'two': operationTwoBody } %> %for operation in operation_list: ${operation['name']} ${operations[operation['name']]()} %endfor <%def name="operationOneBody()"> some stuff </%def> <%def name="operationTwoBody()"> some other stuff </%def>
mydecorator.function_to_be_mocked = mydecorator.my_decorator(mock_function)
# generic feature class list feature_classes = ['landuse_a', 'landuse_b', 'misc_fc'] # create a value table value_table = arcpy.ValueTable(1) for feature in feature_classes: # iterate over feature class list if feature.startswith('landuse'): # if feature starts with 'landuse' value_table.addRow(feature) # add it to the value table as a row print(value_table) >>> landuse_a;landuse_b
import ctypes print ctypes.windll.shell32.IsUserAnAdmin()
import threading response = None def user_input(): global response response = raw_input("Do you wish to reconnect? ") user = threading.Thread(target=user_input) user.daemon = True user.start() user.join(2) if response is None: print print 'Exiting' else: print 'As you wish'
path_definition = { '00:00:00:00:00:01':'00:00:00:00:00:04', '00:00:00:00:00:02':'00:00:00:00:00:05', '00:00:00:00:00:03':'00:00:00:00:00:06' #comma not required } #Semicolon not required for key in path_definition.keys(): #semicolon missing print('value {}'.format(path_definition[key])) #extra parentheses missing
packet = StringIO.StringIO() can = canvas.Canvas(packet, pagesize=letter) <do something with canvas> can.save() packet.seek(0) input = PdfFileReader(packet)
class MainGUI(HasTraits): GUIWidgetsForMainGUI = Any user_window = Instance(UserInput) button = Button('Get User Input') traits_view=View(Item('GUIWidgetsForMainGUI'), Item('button')) def _button_fired(self): self.user_window.edit_traits() @on_trait_change('button') def or_alternately_you_can_use_listeners(self): self.user_window.edit_traits() MainGUI().configure_traits()
dataset.rename(columns={typo: 'Address' for typo in AddressCol}, inplace=True)
s = raw_input() # input() in Python 3 try: numbers = map(int, s.split()) except ValueError: print('Invalid format')
def nearby_grid_points(x, y, r=1): res = [] for dy in xrange(-r, r+1): res.append([(x+dx, y+dy) for dx in xrange(-r, r+1)]) return res
os.path.join(*mylist)
df.iloc[np.random.randint(0, len(df), size=k)]
def func(args): for item in loop: do something try: # note indentation something else
class Bank(models.Model): ... def __unicode__(self): return unicode(self.name)
for x in range(0, 10, 2): print str(x)
# automatically closes file when done with open('access.txt', 'r') as f: for line in f.readlines(): s = line.split() print(s),
dat = np.linspace(0.1, 0.9, 4) * np.ones((4,1)) fig, ax = plt.subplots() cax = ax.imshow(dat, interpolation='none', vmin=0, vmax=0) cbar = fig.colorbar(cax) plt.show()
with open('/etc/hosts', 'rt') as f: s = f.read() + '\n' + '127.0.0.1\t\t\thome_sweet_home\n' with open('/tmp/etc_hosts.tmp', 'wt') as outf: outf.write(s) os.system('sudo mv /tmp/etc_hosts.tmp /etc/hosts')
In [25]: n = 0.12345 In [26]: '{:.3f}'.format(n).lstrip('0') Out[26]: '.123'
#!/usr/bin/env python3 import subprocess try: file = subprocess.check_output(["zenity", "--file-selection"]).decode("utf-8").strip() print(file) except subprocess.CalledProcessError: pass
{{ user.username|e }}
THIS_VAR = {} for i in range(n): THIS_VAR[i] = 2 ** i
for link in soup.find_all('a'): if link.find('img'): print link
optionParse.add_argument('-n', result='store', required=True, dest='num_locs', type=int, help='Number of locations') results = optionParse.parse_args() num_locs = results.num_locs
ind = [uberdata.index(i) for i in order]
import vlc def setup_player(filename): vlc_instance = vlc.Instance() media = vlc_instance.media_new(filename) player = vlc_instance.media_player_new() player.set_media(media) player.play()# Start the player print player.get_state()# Print player's state player.stop()# Stop the player print player.get_state()# Print player's state setup_player('filename')#Put media file name/location here
s = load_up_users_dictionary() for word in text_to_check: if word not in s: new_words = s.suggest( word ) replace_incorrect_word( word, new_words[0] )#Pick the first word from the returned list.
import re blockOfText = 'two thousand may be represented as 2000 2000.00 2,000 and 2k' ' '.join([ ''.join(x[0]) for x in re.findall(r'(\$?\d+([,\.]\d+)?k?)', blockOfText) ])
>>> from PyQt5.QtCore import QDate, QDateTime >>> QDate.currentDate().toPyDate() datetime.date(2014, 3, 17) >>> QDateTime.currentDateTime().toPyDateTime() datetime.datetime(2014, 3, 17, 19, 9, 45, 974000)
def month(n): lst = ['Months','Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'] return lst[n]
put('C:\Users\UserN\Downloads\test_celsius.out', '/mnt/Reado/RoTempValC')
{% for char in s %}*{% endfor %}
col_index=1 i=0 while i<4: start_cell = worksheetworksheet.get_addr_int(10, col_index) end_cell = worksheetworksheet.get_addr_int(20, col_index+2) cell_values_list=worksheetworksheet.range('%s:%s' % (start_cell, end_cell)) ... ... col_index=col_index+3 i=i+1
In [266]: x['r1'] - x['r2'].shift(-1) Out[266]: 0 -1.517905 1 1.003529 2 0.181406 3 1.744022 4 1.293801 5 -1.232398 6 -1.816062 7 NaN dtype: float64
def remove_last(x): return x[...,:-1]
class MainWindow(wx.Frame): def __init__(self, title): wx.Frame.__init__(self, None, title=title, pos=(150,150), size=(350,200)) self.Bind(wx.EVT_CLOSE, self.OnClose) def OnClose(self, event): self.Destroy() # or simply do sys.exit(1) here if __name__ == "__main__": app = wx.App(False) frame = MainWindow("MyApp") frame.Show() app.MainLoop() sys.exit(1)
>>> pattern = r'((?:January|February|March|April|May|June|July|August|September|October|November|December) \d\d?)' >>> re.findall(pattern, text)[-1] 'September 29'
prob_y = [] prob_x = [] for line in open(data_file_name): line = line.split(None, 1) # In case an instance with all zero features if len(line) == 1: line += [''] label, features = line xi = {} for e in features.split(): ind, val = e.split(":") xi[int(ind)] = float(val) prob_y += [float(label)] prob_x += [xi] return (prob_y, prob_x)
ignore = {'the','a','if','in','it','of','or'} result = collections.Counter(x for x in f if x not in ignore).most_common(1)
>>> x = sympy.Symbol("x") >>> f = sympy.Function("f") >>> y = x * f(x) >>> y x*f(x) >>> y.diff(x) x*Derivative(f(x), x) + f(x)
price = purchase_group['Column_name'].values[0]
p = Popen(["command", "args"], stdout=PIPE, universal_newlines=True) tmp = "" delims = {"#", "!"} for ch in iter(lambda: p.stdout.read(1), ""): if ch in delims: print(tmp) tmp = "" else: tmp += ch
con.execute_query('UPDATE tableA SET done=1 OUTPUT INSERTED.ID WHERE ID=(SELECT TOP(1) ID FROM tableA WHERE done=0)') for row in con: #row['ID'] is exactly one ID where the done bit wasn't set, but now is. start_function(row['ID'])
class MainClass: def __init__(self, ..., otherclass=OtherClass): self.otherclassobj = otherclass() ... ...
image.blit(spritesheet, (0,0), rect)
for x in reads_array: alignments =pairwise2.align.globalms(str(refseq.seq).upper(),str(x.seq),2,-1,-5,-0.05) sorted_alignments = sorted(alignments, key=operator.itemgetter(2)) result.write(format_alignment(*sorted_alignments[0])) aligned_reads.append(x)
l.append({key:value for key, value in zip(['A', 'B'], t)})
o = subprocess.popen(['cmd','/c',r'programThatRuns.exe']) o.wait() subprocess.popen(['cmd','/c',r'otherProgramThatRuns.exe'])
$ cd env32 $ echo "alias python='arch -i386 python'" >> bin/activate $ source bin/activate $ python myscript.py
Support more locale-specific formatting options for the money data type (Tom Lane) Specifically, honor all the POSIX options for ordering of the value, sign, and currency symbol in monetary output. Also, make sure that the thousands separator is only inserted to the left of the decimal point, as required by POSIX.
class Program(): def run(self): while 1: try: self.do_something() except KeyboardInterrupt: break def do_something(self): print("Doing something") # usage: a = Program() a.run() # will print a lot of statements # if you hit CTRL+C it will stop # then you can run it again with a.run()
corpus = [] for i in range(len(data) -1): corpus.append(data[i]['body'] + data[i+1]['body']) print(corpus)
import os os.system('/usr/bin/ssh localhost ls -la /')
a, b, c, d = 1, 2, 3, 4.44 my_tup = (a, b, c, d) my_tup = tuple([float("{0:.1f}".format(n)) for n in my_tup])
>>> def myfunc(): ... exec 'myvar="boooh!"' in globals() ... >>> myfunc() >>> myvar 'boooh!'
from lxml import etree foo = StringIO('<foo><bar></bar></foo>') tree = etree.parse(foo) result = tree.xpath('//processing-instruction()')
C:> D: D:> cd PythonProjects D:\PythonProjects> python [Something about Python interpreter] >>>
>>> my_array = np.arange(20.) >>> my_array[4::5] = np.nan >>> my_array array([ 0., 1., 2., 3., nan, 5., 6., 7., 8., nan, 10., 11., 12., 13., nan, 15., 16., 17., 18., nan])
class Foo(object): @property def x(self): return self._x @x.setter def x(self, value): self._x = accuracy(value) foo = Foo() f = 1.5 foo.x = f # set foo._x to accuracy(f) print(foo.x) # prints foo._x
if not line.startswith('#'): data.append(line.rstrip().split(';')) elif line.startswith("# Headers:") # remove the "Headers: " part after = line.rstrip().split(": ")[1] # split around the commas to create the header list header = after.split(", ")
#!/bin/bash export PYTHONPATH=lib64/python/side-packages ./command.py "$@"
class TestYourLib(unittest.TestCase): def setUp(self): self.my_lib = MyLib() def test_my_first_test(self): self.my_lib.my_function = Mock(return_value=True) self.assertTrue(self.run_my_function(), 'my function failed') def test_my_second_test(self): # Some other test that calls self.my_lib.my_function...
EntryResult = dataentry.py.Ui_DataEntry() #considering that the UI class in dataentry.py is Ui_DataEntry
cmd = [ 'mysql', '--database=%s' % self._database, '--password=%s' % self._password, '--execute=%s' % query ] (...) p = subprocess.Popen(cmd, shell = False, stdout = subprocess.PIPE, stderr = subprocess.PIPE) out, err = p.communicate() errcode = p.returncode
>>> import random >>> random.getrandbits(10) 688L
import numpy as np import pandas as pd window = 30 df = pd.DataFrame(np.random.randn(100), columns=['Data']) counts = pd.rolling_apply(df, window+1, lambda s: s[s < s[-1]].shape[0])
list1 = ["python", "java", "perl", "sql"] list2 = [ "scala", "python", "perl"] d1 = dict.fromkeys(list1) d2 = dict.fromkeys(list2) difference = [i for i in d1 if i not in d2] + [i for i in d2 if i not in d1] print difference
countries = [ "us", "fr", "de", "ca", "nl" ] for co in countries: controller.set_conf("ExitNodes", "{" + co + "}") # make request using Tor socks proxy for site here # some check to determine if site is blocking country or not
reduce(lambda x,y: x * factorial(y), lst, 1)
urlpatterns = [ url(r'^map/$', geov.map_view, name = "map_view"), url(r'^map/(?P<search_place>[\w-]+)/$', geov.map_view, name = "map_view_accurate"), url(r'^map/(?P<search_place>[\w-]+)/(?P<digit>\d+)/$', geov.map_view), ]
battery = ''.join(c for c in battery if not c.isdigit() and not c.isspace())
@timed(2.1) def test(): func_with_timeout(timeout=2)
int next; while ((next=fgetc(file_ptr)) != EOF && (next != '\n')) ; // <<== Do nothing // At this point your file_ptr is either at the next line or at EOF
(head -n -1 .htaccess echo 'Deny from 127.0.0.1' tail -n 1 .htaccess) > .htaccess.tmp mv -b .htaccess.tmp .htaccess # cat .htaccess <Directives here> Order Deny,Allow Deny from 255.255.255.255 Deny from 0.0.0.0 Deny from 1.2.3.4 Deny from 127.0.0.1 <Other Directives here as well as ending Directive>
print('Hello world!') input()
import base64 import binascii print binascii.hexlify(base64.urlsafe_b64decode(md5_base64))
consumer.register('kind', callback_func) consumer.wait() # more code goes here...
>>> line = r"""enabled='false' script='var name=\'Bob\'\\n ' index='0' value=''""" >>> re.findall(r"([a-zA-Z]*)='((?:[^'\\]|\\.)*)'\s*", line) [('enabled', 'false'), ('script', "var name=\\'Bob\\'\\\\n "), ('index', '0'), ('value', '')]
from collections import defaultdict try: from io import StringIO # 2.6+, 3.x except ImportError: from StringIO import StringIO # 2.5 data = defaultdict(int) #with open("filename", "r") as f: # if a real file with StringIO("10\n5\n-1\n-1\n-1\n1\n1\n0\n2") as f: for line in f: data[int(line)] += 1 for number, count in data.iteritems(): print number, "was found", count, "times"
tuples = re.findall(r"^\s*static[ \t]*const[ \t]*PropertyID[ \t]*(\w+)[ \t]*=[ \t]*(\d+).*",fileContents)
>>> print 425 / (469 / float(100)) 90.618336887
>>> '''\ This is the first line. This is the second line. ''' 'This is the first line.\nThis is the second line.\n' >>> ''' ... This is the first line. ... This is the second line. ... ''' '\nThis is the first line.\nThis is the second line.\n'
OrderDetail.objects.filter(state__name="in process").exclude(order__name="Finished")
wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz # Download tar xvfz Python-2.7.3.tgz # unzip cd Python-2.7.3 # go into directory ./configure make # build su # or 'sudo su' if there is no root user make altinstall
def func( *files ): for f in files: doSomethingWithFile( f ) func( *['file1','file2','file3'] ) #Is treated like func('file1','file2','file3') func( 'file1' )
python -c $'import subprocess\nwhile True: subprocess.call(["ls"])'
from flask import Flask app = Flask(__name__) @app.route("/") def hello(): return "Hello World!" if __name__ == "__main__": app.run()
a = [1,2,3,4] b = [] for i in range(len(a)): b.append(a[-1]) a.pop() print a,b
def extract_function_from_string(content): exec(content) start = 4 end = content.find("(") function_name = content[start:end] return eval(function_name) my_function = extract_function_from_string("def my_function(x):\n return x**2") print my_function(5)
class Master(object): def __new__(klass, *args, **kwargs): self = object.__new__(klass) self.attribute1 = ... self.attribute2 = ... return self
list = entry.split('.'); print list[0], list[2]
from suds.sax.element import Element ns_mod = ('mod', 'http://models.ws.common.abc.com') header = Element('adtwsHeader', ns=ns_mod) container = Element('adtwss', parent=header) username = Element('userName', parent=container) username.setText('usernameGoesHere') password = Element('password', parent=container) password.setText('myPassword123') client.set_options(soapheaders=header)
txt = None def onclick(event): global txt txt = plt.text(event.xdata, event.ydata, 'TESTTEST', fontsize=8) fig.canvas.draw() def offclick(event): txt.remove() fig.canvas.draw() fig.canvas.mpl_connect('button_press_event', onclick) fig.canvas.mpl_connect('button_release_event', offclick) plt.show()
result = [] seen = set() for obj in objects: if obj.field1 not in seen: seen.add(obj.field1) result.append(obj)
from twill import commands commands.go("http://www.thepiratebay.se/login") commands.form("loginform", "username", "blah") commands.form("loginform", "password", "blah") commands.submit()
@property def number(self): # do extra logic if necessary return self.count
array = [['string', '2.0', 'string'], ['string', '3.0', 'string']] y = [ [float(x) if i%2 == 1 else x for i,x in enumerate(row)] for row in array] print(y)
def checkboxes (self, state): suffix = self.sender().objectName()[-2:] enable = state == QtCore.Qt.Checked for prefix in 'mod', 'min', 'max': getattr(self, prefix + suffix).setEnabled(enable)
>>> import pprint >>> import urllib.request >>> u = urllib.request.urlopen('http://www.python.org') >>> pprint.pprint(dict(u.getheaders())) {'Accept-Ranges': 'bytes', 'Connection': 'close', 'Content-Length': '18882', 'Content-Type': 'text/html', 'Date': 'Sat, 24 Dec 2011 23:51:27 GMT', 'ETag': '"105800d-49c2-4b4ab1ba443c0"', 'Last-Modified': 'Thu, 22 Dec 2011 09:41:43 GMT', 'Server': 'Apache/2.2.16 (Debian)', 'X-Pad': 'avoid browser bug'}
UPDATE tableB SET column2 = tableA.column2 WHERE tableB.column1 = tableA.column1
import numpy as np ind = np.where( df.col1.isnull() & df.col1.shift(-1).notnull() ) df.loc[df.index[ind], "col1"] = df.loc[df.index[ind], "col2"]
def prod(L): p = 1 for i in range(len(L)): p *= L[i] return p print(prod([1,2,3,4])) # prints 24
>>> from bs4 import BeautifulSoup >>> import urllib2 >>> import re >>> url = "http://www.dailypress.com" >>> soup = BeautifulSoup(urllib2.urlopen(url)) >>> most_viewed = soup.find('div', class_=re.compile('mostViewed')) >>> for item in most_viewed.find_all('a'): ... print item.text.strip() ... Body of driver recovered from Chesapeake Bay Bridge-Tunnel wreck Hampton police looking for man linked to Friday's fatal apartment shooting Police identify suspect in Saturday's fatal shooting in Hampton Teen spice user: 'It's the new crack' When spice came to Gloucester
class Parent: def do_thing(self): self.do_something_delegated() def do_something_delegated(self): pass class Child1(Parent): def do_something_delegated(self): # do child1 specific things class Child2(Parent) def do_something_delegated(self): # do child2 specific things
threads = [] for url in URLs: t = Thread(target = thread_func, args = (url, )) t.start() threads.append(t) # All threads started, now wait for them to finish for t in threads: t.join()
with open('text.txt', 'wb') as fp: fp.write(binascii.unhexlify('59006500730020007300690072002100'))
conn.execute("""PRAGMA cache_size = 4000""") # 4 Mb
def opt_arguments(func): def meta_wrapper(*args, **kwargs): if len(args) == 1 and callable(args[0]): return func(args[0]) else: def meta_func(inner_func): return func(inner_func, *args, **kwargs) return meta_func return meta_wrapper
@register.filter def asrepr(value): return repr(value)
groupId = soup.project.find('groupid', recursive=False).text
email =('email') pwd = ('pwd') data = urllib.parse.urlencode({'email': email, 'pwd':pwd, 'service': 'nudge'}) data = data.encode('utf-8') request = urllib.request.Request("https://jawbone.com/user/signin/login") # adding charset parameter to the Content-Type header. request.add_header("Content-Type","application/x-www-form-urlencoded;charset=utf-8") f = urllib.request.urlopen(request, data) #print(f.read().decode('utf-8')) j=(f.read().decode('utf-8')) b=json.loads(j)
>>> open("/etc/passwd","r") #Oops I forgot to assign it <open file '/etc/passwd', mode 'r' at 0x7f12c58fbdb0> >>> f = _ # Not to worry. It's stored as _ >>> f <open file '/etc/passwd', mode 'r' at 0x7f12c58fbdb0> >>>
import dbus bus = dbus.SystemBus() manager = dbus.Interface(bus.get_object('org.bluez', '/'), 'org.bluez.Manager') adapterPath = manager.DefaultAdapter() adapter = dbus.Interface(bus.get_object('org.bluez', adapterPath), 'org.bluez.Adapter') for devicePath in adapter.ListDevices(): device = dbus.Interface(bus.get_object('org.bluez', devicePath),'org.bluez.Device') deviceProperties = device.GetProperties() print deviceProperties["Address"]
@mock.patch.object(os, 'remove') @mock.patch('%s.sorted' % __name__, create=True) @mock.patch('%s.open' % __name__, create=True) def test_compile(mock_open, mock_sort, mock_os_remove): mock_sort.return_value = ['parts'] compile() mock_open.assert_any_call('output.file', 'wb') mock_sorted.assert_called_with(['parts']) mock_os_remove.assert_called_with('parts','rb')
numpy.apply_along_axis(lambda a: a.searchsorted(950), axis = 1, arr = air_pr)
import webbrowser webbrowser.open('/path/to/help/file.html')
>>> import numpy as np >>> A, B, C = np.polyfit([1,2,3],[4,7,12],2) >>> print A, B, C 1.0 -4.2727620148e-15 3.0 >>> print A, 'x^2 +', B, 'x +', C 1.0 x^2 + -4.2727620148e-15 x + 3.0 >>>
import itertools x = ['a','b'] print [p for p in itertools.product(x, repeat=5)]
left = QtGui.QVBoxLayout() # This makes the label take as little space as possible # since QLabel's sizeHint is Minimum. left.addWidget(label1, 0) left.addWidget(self.mainList, 1) right = QtGui.QVBoxLayout() right.addWidget(label2, 0) right.addWidget(self.descList, 1) main = QtGui.QHBoxLayout() main.addLayout(left, 1) # Both sides take the same amount of space. main.addLayout(right, 1)
from itertools import groupby day_set = store.schedule_set.all()[0].day_set.all() schedule = dict() for k, v in groupby(day_set, lambda x: x.day): schedule[k] = list(v)
import re with open('myfile.txt', 'r') as file: content = file.read() with open('myfile.txt', 'w') as file: file.write(re.sub(r'\d+[\dO]+|[\dO]+\d+', lambda m: m.group().replace('O', '0'), content))
s = "aabbccdd" i = 2 print("-".join([s[j:j+i] for j in range(0,len(s),i)])) aa-bb-cc-dd
from skimage import img_as_uint # ... io.imsave("./testout/" + img_name, img_as_uint(binary))
first, delimiter, second = line.partition('_') a, s, b = second.partition(' ') print first + delimiter + 'Normal' + s + b
>>> "{0:.6f}".format(123455.12345678) '123455.123457'
>>> import ast >>> s = "['[0,0,0]','[0,0,0]']" >>> s = ast.literal_eval(s) >>> s ['[0,0,0]', '[0,0,0]'] >>> s = [ast.literal_eval(sub) for sub in s] >>> s [[0, 0, 0], [0, 0, 0]]
In [1]: a = "switchport port-security mac-address 000a.1111.2222 vlan 43" In [2]: splitted = a.split() In [3]: [x for i,x in enumerate(splitted) if i > 0 and splitted[i-1] in ["mac-address", "vlan"]] Out[3]: ['000a.1111.2222', '43']
for x in range(10): print '{0}\r'.format(x), print
from google.appengine.api import memcache class MainHandler(webapp2.RequestHandler): def get (self, q): if q is None: q = 'index.html' rendered = memcache.get('static_%s' % q) if rendered is None: path = os.path.join (os.path.dirname (__file__), q) rendered = template.render (path, {}) self.response.headers['Content-Type'] = 'text/html' self.response.write(rendered)
def evaluate_result(): print 'evaluate_result' return 1 class Foo: @staticmethod def compute_result(): if not hasattr(Foo, '__compute_result'): Foo.__compute_result = evaluate_result() return Foo.__compute_result Foo.compute_result() Foo.compute_result()
import pyqtgraph as pg plot = pg.plot() e1 = pg.QtGui.QGraphicsEllipseItem(0, 0, 4, 4) # MUST have width=0 here, or use a non-cosmetic pen: e1.setPen(pg.mkPen('r', width=0)) e1.setFlag(e1.ItemClipsChildrenToShape) plot.addItem(e1) e2 = pg.QtGui.QGraphicsEllipseItem(2, 2, 4, 4) e2.setPen(pg.mkPen('g')) e2.setParentItem(e1)
In [50]: class Foo: def __init__(self): self.a = 4 def somefunc(self, x, y): self.a = x+y ....: In [51]: type(getattr(Foo, 'somefunc')) Out[51]: function In [52]: getattr(Foo, 'somefunc').__code__.co_argcount Out[52]: 3
>>> y = 1 + 1 >>> list1 = [] >>> list1.append(y) >>> print list1 [2] >>> print l None >>>
powers = {'B': 10 ** 9, 'M': 10 ** 6, 'T': 10 ** 12} # add some more to powers as necessary def f(s): try: power = s[-1] return int(s[:-1]) * powers[power] except TypeError: return s df.applymap(f)
>>> import os, time >>> path = os.path.expanduser('~/Desktop') >>> fname = time.ctime().replace(':', '-') + '.txt' >>> with open(os.path.join(path, fname), 'w') as f: ... pass
lw = self.tabWidget.widget(0) # get the 0th widget lw.addItem(...)
results = [".".join(map(str,r)) for r in result] print ".".join(results)
df['HardwareId_list'] = df['HardwareId'].str.split(' ') df['hardware_updated'] = df['HardwareId_list'].apply(lambda x: x[0] if type(x) == list else x)
from itertools import imap max(imap(lamdba r: r['col'], tab.where('col != np.inf')))
os.path.dirname(os.path.realpath(__file__))
persons={} for row in results: persons[row[0]] = { 'personId' : row[0], 'personName' : row[1], 'personEmail' : row[2] } print json.dumps(persons)
from collections import defaultdict def group_by(iterable, f): results = defaultdict(list) for x in iterable: results[f(x)].append(x) return results
blog.comment_set.all()
>>> ns=[2, 2, 2, 0, 2, 1, 3, 3] >>> {x: ns.count(x) for x in set(ns) if ns.count(x) > 1} {2: 4, 3: 2}
def correct(word: String) = { val sets = List[String => Set[String]]( x => known(Set(x)), x => known(edits1(x)), known_edits2 ).elements.map(_(word)) sets find { !_.isEmpty } match { case Some(candidates: Set[String]) => candidates.reduceLeft { (res, n) => if (NWORDS(res) > NWORDS(n)) res else n } case None => word } }
>>> import itertools >>> word = 'toy' >>> [''.join(w) for w in itertools.product(*zip(word.lower(), word.upper()))] ['toy', 'toY', 'tOy', 'tOY', 'Toy', 'ToY', 'TOy', 'TOY']
users = client.get('/users', g ='keyword')
from enthought.chaco.scales.formatters import TimeFormatter TimeFormatter._formats['days'] = ('%d/%m', '%d%a',)
In [15]: a=[1,2,3] In [16]: np.outer(a,a) Out[16]: array([[1, 2, 3], [2, 4, 6], [3, 6, 9]])
from django.db.models.query import CollectedObjects u = User.objects.get(id=1) instances_to_be_deleted = CollectedObjects() u._collect_sub_objects(instances_to_be_deleted) for k in instances_to_be_deleted.ordered_keys(): inst_dict = instances_to_be_deleted.data[k] for i in inst_dict.values(): i.sender = None # You will need a more generic way for this i.save() u.delete()
for blob in blobs: a=blob.meanColor() mc=(int(a[0]), int(a[1]), int(a[2])) rect=blob.boundingBox() img.drawRectangle(rect[0], rect[1], rect[2], rect[3], mc, 3) img.show()
from PIL import Image im = Image.open("C:\Users\Public\Pictures\Sample Pictures\Jellyfish.jpg") im.save("C:\Users\Public\Pictures\Sample Pictures\Jellyfish_compressed.jpg", quality=10)
style = Style(…) for col in 'ABCD': ws._styles['A'] = style
client = MongoClient(w=0) collection = client.database.collection w1_collection = collection.with_options(write_concern=WriteConcern(w=1)) w1_collection.update_one({'_id': 1}, {'$inc': {'x': 3}})
>>> datetime.datetime.strptime('2015 June 1','%Y %B %d') datetime.datetime(2015, 6, 1, 0, 0) >>> datetime.datetime.strptime('2015 June 1','%Y %B %d').date() datetime.date(2015, 6, 1)
import numpy as np a = np.array(a) np.random.shuffle(a[1::2])
$([IPython.events]).on("app_initialized.NotebookApp", function () { $('div#header').hide();});
>>> print '"Hello,\\nworld!"'.decode('string_escape') "Hello, world!"
import sys log_file = open("newc.txt","a") this_no, prev_no = 0, 0 with open("newfileinput.txt",'r') as f: for line in f: row = line.split() this_no = int(row[1]) log_file.write(line.replace(str(this_no), str(this_no - prev_no))) prev_no = this_no log_file.close()
def my_preexec_fn(): os.setuid(10033) process = subprocess.Popen(cmdstr,stdout=subprocess.PIPE, stderr=subprocess.STDOUT, preexec_fn=my_preexec_fn)
numpy.random.seed(42)
for ax in [ax1,ax3]: for label in ax.get_yticklabels(): label.set_visible(False) for ax in [ax2,ax4]: # Change the labelling only ax.yaxis.set_tick_params(labelright='on', labelleft='off')
def bar(x): def f(y): f.x=f.x+1 return (f.x, y) f.x=x return f
def save(self, **kwargs): slug_str = "%s %s %s %s" % (self.user, self.year, self.model, self.series) unique_slugify(self, slug_str) super(Phone, self).save()
(setq python-command "C:/Program Files/IronPython 2.6/ipy.exe")
subprocess.call(['/usr/bin/php', 'script.php', json.dumps(dict(item))])
ln -s ~/.virtualenvs/myvenv/local/lib/python2.7/site-packages/app app mkdir locale python manage.py makemessages -l cz -s
def null(x): return x longlist = range(100000) shortlist = range(1) longerlist = range(1000000) %timeit null(shortlist) 10000000 loops, best of 3: 124 ns per loop %timeit null(longlist) 10000000 loops, best of 3: 137 ns per loop %timeit null(longerlist) 10000000 loops, best of 3: 125 ns per loop
import threading #... def playSound(): global start start = time.clock() def func(): winsound.PlaySound('SystemAsterisk', winsound.SND_ALIAS) threading.Thread(target=func).start()
$ python3.3 >>> dir() ['__builtins__', '__doc__', '__loader__', '__name__', '__package__'] >>> import sys >>> i = 2+3 >>> dir() ['__builtins__', '__doc__', '__loader__', '__name__', '__package__', 'i', 'sys']
from mymodule import somefunc class TestingFunctionsTest(unittest.TestCase): def test_somefunc(self): self.assertEqual(somefunc(), [1, 2, 3])
def OnShowPopup(self, event): """ Obtain right-click selection """ pos = event.GetPosition() pos = self.panel.ScreenToClient(pos) self.rightClickSelected = event.GetEventObject() self.panel.PopupMenu(self.rightClickMenu, pos) def OnPaste(self, event = None): """ Paste content from clipboard """ self.rightClickSelected.SetFocus() if isinstance(self.rightClickSelected, wx.TextCtrl): self.rightClickSelected.Paste()
Send a single "command line", ending with <CRLF>. The command line: Systems may differ in their interpretations of this line. However, the basic scheme is straightforward: if the line is null (i.e. just a <CRLF> is sent) then the server should return a "default" report which lists all people using the system at that moment. If on the other hand a user name is specified (e.g. FOO<CRLF>) then the response should concern only that particular user, whether logged in or not.
import pandas as pd df = pd.read_stata('my_data_in.dta') df.to_stata('my_data_out.dta')
[x[0] for x in sorted(enumerate(a), key=lambda x: x[1])[-5:]]
import os dir='e:\www\files\delivery' for root, dirs, files in os.walk(dir): for name in files: if name.endswith(("_thumb.jpg")): os.remove(os.path.join(root, name))
>>> l = ['1\t2,3\t4,5', '61\t7,8\t9,0'] >>> [[i[0]]+[e.split(',') for e in i[1:]] for i in [x.split() for x in l]] [['1', ['2', '3'], ['4', '5']], ['61', ['7', '8'], ['9', '0']]]
def OnDropFiles(self, x, y, filenames): mouse = wx.GetMouseState() if mouse.CmdDown(): self.frame.paths += filenames else: self.frame.paths = filenames self.frame.draw_figure()
def worker(stop, jobs): for j in jobs: if stop: break j.do() stop = [] d = deferToThread(worker) # This will make the list eval to true and break out of the loop. stop.append(None)
x = numpy.random.rand(10,10) numpy.savetxt('test.out', x, delimiter=',') dataa = numpy.genfromtxt('test.out',delimiter=",", dtype=None) if dataa.dtype.names is None:#then dataa is homogenous? l1 = map(lambda z:('f%d'%(z),dataa.dtype),range(0,dataa.shape[1])) dataa.dtype = dtype(l1) dataa.dtype dataa.dtype.names
In [25]: d = {L[0]:list(L[1:]) for L in second} In [26]: answer = [[k]+d[k] for k in first] In [27]: answer Out[27]: [['apple', 'a1', 'a2', 'a3', 'a4'], ['durian', 'd1', 'd2', 'd3', 'd4'], ['cherry', 'c1', 'c2', 'c3', 'c4'], ['egg', 'e1', 'e2', 'e3', 'e4'], ['banana', 'b1', 'b2', 'b3', 'b4']]
df.plot(figsize=(20,4))
books = None def getRandomBook(): global books if books is None: books = list(getBookSet()) return random.choice(books)
import httplib images = ['img1.png', 'img2.png', 'img3.png'] conn = httplib.HTTPConnection('www.example.com') for image in images: conn.request('GET', '/images/%s' % image) resp = conn.getresponse() data = resp.read() with open(image, 'wb') as f: f.write(data) conn.close()
def read_zipfile(path): with open(path, 'rb') as f: return f.read()
In [1]: symbols('a0:3') Out[1]: (a₀, a₁, a₂) In [2]: numEquations = 15 In [3]: symbols('a0:%d'%numEquations) Out[3]: (a₀, a₁, a₂, a₃, a₄, a₅, a₆, a₇, a₈, a₉, a₁₀, a₁₁, a₁₂, a₁₃, a₁₄)
>>> import regex >>> s = 'cuacducucibcl' >>> regex.sub(r'((?:a|(?<!^)\G)[^abc\n]*)c', r'\1x', s) 'cuaxduxuxibcl'
>>> from django.db import transaction >>> transaction.get_connection().in_atomic_block False >>> with transaction.atomic(): ... print transaction.get_connection().in_atomic_block ... True >>> transaction.get_connection().in_atomic_block False >>>
import requests from subprocess import Popen, PIPE message = ... cmd = '/usr/bin/lpr -P {}'.format(self.printer_name) proc = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True) response = requests.get(html.unescape(message['body']), stream=True) for block in response.iter_content(1024): proc.stdin.write(block) stdout, stderr = proc.communicate() exit_code = proc.wait() print exit_code
import json import urllib2 search_line = 'http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=hello' response = urllib2.urlopen(search_line) search_results = json.loads(response.read()) print(search_results['responseData']['results'])
adict = dict(cp.items('foo'))
>>> list(izip_longest(*b,fillvalue=0)) [(1, 4), (2, 5), (3, 0)]
import csv inp = csv.reader(open("/tmp/HSN.csv", "r"), delimiter = ',') for line in inp: a = (line[0]) #street name column b = int(line[1]) #first house number column c = int(line[2]) #last house number column for d in range(b, c+1): print a, d
call(["command", "argument", raw_input("enter file name: ")])
while playOn != "Yes": playOn = easygui.buttonbox ("Do you want to play again?", choices = ["Yes", "No"]) if playOn == "Yes": Score = 0 #resets score count, if player wants to play again elif playOn == "No": easygui.msgbox ("Bye for now. Hope you'll play the game again soon!")
x = list(range(1, 101)) # python 3 x = range(1, 101) # python 2
import numpy as np import sg_filter import matplotlib.pyplot as plt # Generate some sample data similar to your post X = np.arange(1,1000,1) Y = np.log(X**3) + 10*np.random.random(X.shape) Y2 = sg_filter.savitzky_golay(Y, 101, 3) plt.plot(X,Y,linestyle='-', linewidth=2,alpha=.5) plt.plot(X,Y2,color='r') plt.show()
from io import BytesIO from xml.etree import ElementTree as ET document = ET.Element('outer') node = ET.SubElement(document, 'inner') et = ET.ElementTree(document) f = BytesIO() et.write(f, encoding='utf-8', xml_declaration=True) print(f.getvalue()) # your XML file, encoded as UTF-8
from lxml import etree a = os.path.join(localPath,file) element = etree.parse(a) cars = element.xpath('//Root/Foo/Bar/Car') for car in cars: colors = car.xpath('./Color') makes = car.xpath('./Make') models = car.xpath('./Model')
class MyAdmin(admin.ModelAdmin): def has_add_permission(self, request): return False
./manage.py update_index
def two_vertical_lines (height, width): for x in range (0, height): if width > 2: new_width = width - 2 mult2 = " " * new_width print ("*", mult2, "*", sep='') # <-- change else: print ("**", "\n", end='') return
import pygame from ConfigParser import SafeConfigParser action2function = { "up": player.move_up, "down": player.move_down, "left": player.move_left, "right": player.move_right } config = SafeConfigParser() config.read(CONFIG_DIRS) key2action = config.items() ... for event in pygame.event.get(): if event.type == KEYDOWN: action2function[key2action[pygame.key.name(event.key)]]() ...
def max_value(inputlist): return max([sublist[-1] for sublist in inputlist]) print max_value(resultlist) # 9.1931
return HttpResponse(json.dumps(response_data), mimetype="application/json")
from sqlalchemy import and_ variants = variants.filter_by(and_(cond_1,cond_2....cond_n)).distinct()
>>> from operator import mul >>> ''.join(map(mul, seq, rep)) 'ATCGGGA'
area = int(size_result.split('.')[0])
import numpy as np DictVectorizer(dtype=np.float32, sparse=False)
if any(x in answer for x in array1): print("yes") else: print("fail")
elt1, elt2 = random.sample(foo, 2)
>> r1 = r_original(x, y) >> r1.prop_a.prop_b.prop_c 'fish' >> returner = mock.MagicMock() >> returner.prop_a.prop_b.prop_c = 'fish' >> r_mocked = mock.MagicMock(spec_set=r_original, return_value=returner) >> r2 = r_mocked(x, y) >> r2.prop_a.prop_b MagicMock name='returner.prop_a.prop_b' id='87412560'> >> r2.prop_a.prop_b.prop_c 'fish'
import numpy as np import matplotlib.pyplot as plt data = np.genfromtxt('peak.txt', dtype = float) fig = plt.figure(figsize=(6,8)) ax = fig.add_subplot(111) for i in range(1, data.shape[1]): y = data[..., i] + 0.1*i ax.plot(data[..., 0], y) plt.show()
> m = [[random.randint(1,10) for _ in xrange(5)] for _ in xrange(5)] > m [[9, 4, 4, 10, 10], [1, 2, 4, 3, 5], [3, 4, 8, 9, 10], [5, 9, 4, 3, 3], [3, 3, 8, 6, 7]]
>>> x = [1, 2, 3, 4, 1] >>> y = [ i for i in xrange(len(x)) if x[i] == 1 ] >>> y [0, 4] >>> len(y) 2
from selenium.webdriver.common.keys import Keys driver.find_element_by_tag_name('body').send_keys(Keys.CONTROL + Keys.SHIFT + 'k')
from datetime import datetime from pytz import timezone server_timezone = timezone('Europe/Moscow') server_timezone.localize(datetime(2011, 1, 1)).isoformat() >>> '2011-01-01T00:00:00+03:00' server_timezone.localize(datetime(2011, 7, 1)).isoformat() >>> '2011-07-01T00:00:00+04:00'
.. list-table:: Frozen Delights! :widths: 15 10 30 :header-rows: 1 * - Treat - Quantity - Description * - Albatross - 2.99 - On a stick! * - Crunchy Frog - 1.49 - If we took the bones out, it wouldn't be crunchy, now would it? * - Gannet Ripple - 1.99 - On a stick!
client.get('/tracks', tags = "rock, jazz")
>>> class User(object): ... def __init__(self, username): ... self.username = username ... >>> def object_hook(name, d): ... cls = {'WP_User': User}[name] ... # The following was added by me -Antti ... d = convert_member_dict(d) ... return cls(**d) ... >>> user = loads(data, object_hook=object_hook) >>> user.username 'admin'
grep -Pv ^,*$ input_file.csv > output_file.csv
>>> isinstance([0, 10, 20, 30], list) True >>> isinstance(50, list) False
import psutil iocnt1 = psutil.disk_io_counters(perdisk=True)['sda1'] # do something IO intensive iocnt2 = psutil.disk_io_counters(perdisk=True)['sda1'] print 'Blocks written {0}'.format(iocnt2.write_count - iocnt1.write_count) print 'Blocks read {0}'.format(iocnt2.read_count - iocnt1.read_count)
User.set(mail = "User1@testmail.com")
(ur'^company/(?P<key>.*)/doclist/$','CompanyHub.views.docList')
def better_run(observer): try: observer.start() while True: # instead of this infinite loop, you can do pass # whatever processing you wanted except KeyboardInterrupt: observer.stop()
import ast class StrModelMultipleChoiceField(forms.ModelMultipleChoiceField): def to_python(self, value): value = ast.literal_eval(value) return super(StrModelMultipleChoiceField, self).to_python(value) def prepare_value(self, value): value = (super(StrModelMultipleChoiceField, self).prepare_value(value) return unicode(value)
def kolorigu(): text2.delete('1.0', END) for sonsilabo in teksto: text2.insert(INSERT,sonsilabo,"silabo") ######################## text2.update_idletasks() ######################## time.sleep(2)
for row in zip(file1, file2, file3, file4): # output the 4 column values in row
mutations=0 for i,j in zip(aln1,aln2): if i != j and i != '-' and j != '-': mutations+=1
urlpatterns = patterns('', url('^tasks/', include('djcelery.urls')), )
h = plt.hist2d(x, y) mn, mx = h[-1].get_clim() mn = 60 * np.floor(mn / 60.) mx = 60 * np.ceil(mx / 60.) h[-1].set_clim(mn, mx) cbar = plt.colorbar(h[-1], ticks=np.arange(mn, mx + 1, 60), )
from distutils.core import setup from pkgutil import walk_packages import mypackage def find_packages(path=__path__, prefix=""): yield prefix prefix = prefix + "." for _, name, ispkg in walk_packages(path, prefix): if ispkg: yield name setup( # ... snip ... packages = list(find_packages(mypackage.__path__, mypackage.__name__)), # ... snip ... )
def dragEnterEvent(self, event): if event.mimeData().hasUrls(): event.accept() else: event.ignore() def dropEvent(self, event): for url in event.mimeData().urls(): path = url.toLocalFile().toLocal8Bit().data() if os.path.isfile(path): print path # do other stuff with path...
>>> class letter_generator: ... def __init__(self, prefix, places): ... self.prefix = prefix ... self.places = places ... current = 0 ... def get_unique_id(self): ... self.current+=1 ... return "%s%s" % (self.prefix, str(self.current).zfill(self.places)) ... >>> >>> l = letter_generator('TM',5) >>> l.get_unique_id() 'TM00001' >>> l.get_unique_id() 'TM00002' >>> l.get_unique_id() 'TM00003' >>> l.get_unique_id() 'TM00004' >>>
glob:*.c any name ending in ".c" in the current directory *.c any name ending in ".c" in the current directory **.c any name ending in ".c" in any subdirectory of the current directory including itself.
a, b, c = 1, 1, 1 # sides of a triangle if a + b >= c and b + c >= a and c + a >= b: # calculate area and height here else: print('Not a valid triangle')
>>> tuple([{"a":"vala", "a1":"vala1"},{"b":"valb", "b1":"valb1"}]) ({'a': 'vala', 'a1': 'vala1'}, {'b1': 'valb1', 'b': 'valb'})
... def setup(app): """Establish sphinx hooks""" app.connect('build-finished', my_extension) def setup_module(): pass
Episode.objects.filter(series=some_series,number__gte=epnum-2, number__lte=epnum+2)
df.groupby(df['Time'].dt.day).plot(x='Value1', y='Value2')
raw_input("press enter")
>>> mpa = dict.fromkeys(range(32)) >>> 'abc\02de'.translate(mpa) 'abcde'
with open(filename, "rt") as f: a = eval(f.read())
file2=list(csv.reader(open(table2,'r'))) for row in file1: print row for prow in file2: print prow
assert_equal(mock.call.method_to_be_mocked.call_count, 2)
placeholder= '?' # For SQLite. See DBAPI paramstyle. placeholders= ', '.join(placeholder for unused in l) query= 'SELECT name FROM students WHERE id IN (%s)' % placeholders cursor.execute(query, l)
def foo1(): print "hello" def foo2(): print "world" def foo3(): print "goodbye" def foo4(): print "world" GO = [foo1, foo2, foo3, foo4] import random def Foo(): func = random.choice(GO) return func() In [30]: Foo() world In [31]: Foo() goodbye In [32]: Foo() hello In [33]: Foo() goodbye
import re lst=['beak','back','bear','kill','keel'] regex=re.compile('k..l') locs, matches = zip(*[(idx, string) for idx, string in enumerate(lst) if re.match(regex, string)]) print(matches) print(locs)
import gc import gevent from greenlet import greenlet gevent.killall([obj for obj in gc.get_objects() if isinstance(obj, greenlet)])
import csv myarr = [[10.3,11.2,10.7],[13.4,12.6,12.7],[12.56,14.21,11.33]] with open("myarray.csv", "wb") as f: writer = csv.writer(f) writer.writerows(myarr)
mymodule = __import__('mymodule') reload(mymodule)
LIGHT_MESSAGES = { 'English': "There are %(number_of_lights)s lights.", 'Pirate': "Arr! Thar be %(number_of_lights)s lights." } def lights_message(language, number_of_lights): """Return a language-appropriate string reporting the light count.""" return LIGHT_MESSAGES[language] % locals() def is_pirate(message): """Return True if the given message sounds piratical.""" return re.search(r"(?i)(arr|avast|yohoho)!", message) is not None
def put(self, request, *args, **kwargs): request.PUT = QueryDict(request.body) form = self.form_class(request.PUT) if form.is_valid(): logging.warning("This form is VALID") else: logging.warning("This form is INVALID")
p = img.getPixel(col/factor,row/factor) newImage.setPixel(col,row,p)
>>> import inspect >>> inspect.isclass(inspect) False >>> inspect.isclass(inspect.ArgInfo) True >>>
env = dict(os.environ) env['http_proxy'] = proxies[random.randrange(0, len(proxies))] env['https_proxy'] = proxies[random.randrange(0, len(proxies))]
In [3]: pandas.DataFrame(list(ts.values), index=ts.index) Out[3]: 0 1 2 3 4 a 1 2 3 4 5 b 6 7 8 9 10
release = '' latex_elements = { 'releasename': '' }
worksheetObject.portrait = False
import re html_file_content = u"asdf 1234 this should contain the source code of a html page that you downloaded" pattern = u"http://the-url-from-which-you-downloaded-the-html-file.com" path = u"d:/whatever/path/where/you/downloaded/the/html/file" new_file_content = re.sub(pattern, path, a)
class Customer(models.Model): name = models.CharField(max_length=64) myid = models.CharField(primary_key=True, max_length=64)
foo.phone_numbers.create(phone='123456789')
def chkint(msg): while 1: try: n = input(msg) return(int(n)) except ValueError: print("Please enter an integer.") number1 = chkint("Please enter first value:") number2 = chkint("Please enter second value:") results = [number1, number2] print ("I have accepted: " + str (results))
class TestClass: def __init__(self, adir=None, alist=None, avar=None): if alist is None: alist = [] if adir is None: adir = {}
link = inputElement.find_element_by_xpath('./preceding-sibling::span/a')
import sys def my_print(text): sys.stdout.write(str(text)) sys.stdout.flush()
with open('inputfile.txt') as inf, open('wordsonly.txt', 'w') as outf: for line in inf: line = line.rstrip() if line: word, wordtype = line.split()[2:4] if wordtype in ('a', 'n', 'v', 'adv'): print(word, file=outf)
urls = ( '/(.+)', 'your_handler_class' ) class your_handler_class: def GET(self, page): print web.template.render('%s.html' % page)
exclude = ['label_1','label_2','label_3']
def combinations(S,K): return S**K;
>>> a="hello | my friends| in | stack | over | flow" >>> a.split('|')[1].strip() 'my friends'
import random result = [] with open("data.txt") as f: for line in f: if random.random() < 0.05: result.append(line)
from PIL import Image img = Image.new('RGB', (width, height)) img.putdata(my_list) img.save('image.png')
import os, glob files = glob.glob('*.jpg') files = [os.path.join("C:\\data", file) for file in files] result = "( " + " ".join(files) + " )" print result # Prints ( C:\data\a.jpg C:\data\b.jpg C:\data\c.jpg )
for x in 'bcdef': t = array.array('B', map( operator.xor, mydict['a'], mydict[x] ) ) f1 = open(''.join('a',x),'wb') t.tofile(f1) f1.close()
setup( ... requires=['otherpackage'], )
class Test: i = 3 y = 3 * i def testF(self): print Test.y v = Test() v.testF() # >> 9
# Work out the current function or method func_name = code.co_name + func_hash = hash(code.co_code)
tree = etree.parse("./test.xml") num_elems = tree.xpath("count(//Product)") # note: returns a float
import re string=""" ####1 ttteest ####1 ttttteeeestt ####2 ttest ####2 """ end='.*\n' line=[] for m in re.finditer(end, string): line.append(m.end()) pattern = '.*?####(.*?)####' match=re.compile(pattern, re.MULTILINE|re.DOTALL) for m in re.finditer(match, string): print 'lineno :%d, %s' %(next(i for i in range(len(line)) if line[i]>m.start(1)), m.group(1))
x = PageObject.getPage(x).extractText()) if (x == ""): #Or whatever exactly you get when it fails. raise ValueError("The PDF file can not be imported")
In [403]: for idx, row in pivotTable.iterrows(): .....: sectorName = idx .....: sectorCount = row['sector'] .....: print(sectorName, sectorCount) .....: Communications 2 Utilities 3 Media 3
df = pandas.DataFrame({"x" : ["foo", "bar"], "y": [2000,1500]}) plot = ggplot(aes(x="x",y="y"), data=df) +\ # y NOT weight geom_bar(stat='identity') +\ # stat='bin' by default print plot
for fieldname in a.dtype.names: ind = a[fieldname] == '' a[fieldname][ind] = '54321'
from bs4 import BeautifulSoup from bs4 import NavigableString s = """your HTML here""" soup = BeautifulSoup(s) headers = soup.find_all("h2") for h in headers: print h.text for s in h.next_siblings: if s.name == "h2": break elif isinstance(s, NavigableString): print s.string
class MyClass: def __int__(self, a, b, c=None): self.a = a self.b = b self.c = c one = MyClass(1,2) one.c # None two = MyClass(1,2,3) two.c # 3
import subprocess the_name = 'the_name' myproc = subprocess.Popen(['echo %s | bash Hello.sh' % the_name], stdin = subprocess.PIPE, stdout = subprocess.PIPE, shell=True) out, err = myproc.communicate() print out
class Category(models.Model): ... @property def image(self): return self.photo or u'DEFAULT_PIC' # usage category.image
import struct data = [123,45,67,89] # Show hex values of data. print(list('%2x'%b for b in data)) # -> ['7b', '2d', '43', '59'] # Convert to 4 byte unsigned integer. values = struct.unpack("I", bytearray(data)) print(hex(values[0])) # -> 0x59432d7b
import one import two import three if __name__ == '__main__': one.foo() two.bar() three.baz()
index = np.argmin(A, axis=1) A_mins[:,0] = A[np.arange(len(A)), index] A_mins[:,1:] = B[np.arange(len(A)), index]
def isqrt(n): x = n y = (x + 1) // 2 while y < x: x = y y = (x + n // x) // 2 return x
import httpagentparser >>> s = "Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/532.9 (KHTML, like Gecko) Chrome/5.0.307.11 Safari/532.9" >>> print httpagentparser.simple_detect(s) ('Linux', 'Chrome 5.0.307.11') >>> print httpagentparser.detect(s) {'os': {'name': 'Linux'}, 'browser': {'version': '5.0.307.11', 'name': 'Chrome'}}
line =[X,Y]# a list of all variables w = OptionMenu(root, (#not important), *line)
x = np.array([1,2,3,4,5]) index = np.argwhere(x==3) y = np.delete(x, index) print(x, y)
class HouseForm(forms.ModelForm): address = forms.CharField(widget=forms.Textarea) class Meta: model = House
# First open the file # Then read the entire contents into memory >>> policy_document = open("/absolute/path/to/policy_document", "r").read() # Then base64 encode the contents. >>> policy = base64.b64encode(policy_document) # If you are using Python 2.7 you can use the with statement # to ensure files are cleaned up # (See @Niklas' comment) >>> with open("/absolute/path/to/policy_document", "r") as fp: ... policy_document = fp.read() ... policy = base64.b64encode(policy_document) # fp will be properly closed
In [1]: a = 42 In [2]: def f(): ...: a = 23 ...: In [3]: f() In [4]: a Out[4]: 42 In [5]: def g(): ...: global a ...: a = 23 ...: In [6]: g() In [7]: a Out[7]: 23
import boto.ec2 conn = boto.ec2.connect_to_region('us-west-2') conn.copy_snapshot(source_region='us-east-1', source_snap_id='snap-12345678', description='My new copy')
from django.db.models.signals import pre_save from django.contrib.auth import User # method for updating def update_primary_user(sender, instance, **kwargs): if instance.pk: return if instance.is_superuser and not instance.userprofile.is_primary_user: instance.userprofile.is_primary_user = True instance.userprofile.save() # register the signal pre_save.connect(update_primary_user, sender=User)
def __unicode__(self): return self.name
from zope.schema import Text, List, Object from zope.interface import Interface class IChildInterface(Interface): someField = Text() class IParentInterface(Interface): mycollection = List(value_type=Object(title=u'Child', schema=IChildInterface))
QuestionBox = vizinfo.add("") #Add the vizinfo object #Create an invisible Radio button to be the default selected one, so that one of the visible ones must be chosen by the user invisibleRadio = QuestionBox.add(viz.RADIO, 0, "") invisibleRadio.visible(0) #invisible
page = self.ui.tabWidget.widget(index) tablewidget = page.findChild(QTableWidget)
>>> just_before_midnight = datetime(2014, 7, 16, 23, 59, 59) >>> just_after_midnight_the_next_day = just_before_midnight + timedelta(seconds=2) >>> print just_before_midnight, just_after_midnight_the_next_day 2014-07-16 23:59:59 2014-07-17 00:00:01
n = 100 numbers = range(2,100) results = [] while len(numbers) > 0: results.append(numbers[0]) numbers = [number for number in numbers if number % results[-1] != 0] print len(results)
class Example(list): def sum(self): return sum(self) x = Example((1,2,3)) print(x.sum())
{% for partName, partType in product.parts.iteritems %} <p>{{ partName }}</p> {% for part in partType %} <p>{{ part }}</p> {% endfor %} ....
# 3.4.0 >>> object().__eq__(object()) NotImplemented # 2.7.6 >>> object().__eq__(object()) Traceback (most recent call last): File "<pyshell#60>", line 1, in <module> object().__eq__(object()) AttributeError: 'object' object has no attribute '__eq__'
def generate_filename(self, instance, filename): directory_name = os.path.normpath(force_unicode(datetime.datetime.now().strftime(smart_str(self.app.name)))) return os.path.join(directory_name, self.get_filename(filename)) class Page(models.Model): title = models.CharField(max_length=20) app = models.ForeignKey(App) file = model.FileField(upload_to=generate_filename)
>>> import re >>> s = """Promo (11.50 USD) Tier 1 Titles Only Promo (11.50 USD) (10.50 USD, 11.50 USD) Tier 5 Promo Tier 77 (4.89 USD)""" >>> filter(None, re.findall(r'\([^)]*\)|(\d+)', s)) ['1', '5', '77']
import csv with open('test.csv', 'rb') as f, open('test1.csv', 'wb') as o: reader = csv.reader(f) writer = csv.writer(o) # skip the header next(reader, None) # print the new header writer.writerow(['inches']) for row in reader: newVal = float(row[0]) * 0.393701 writer.writerow([newVal])
class Patient(models.Model): primary_physician = models.ForeignKey('Physician', related_name='primary_patients') attending_physicial = models.ForeignKey('Physician', related_name='attending_patients')
import audiolab import scipy x = scipy.cos((2*scipy.pi*f/fs)*scipy.arange(fs*T)) audiolab.play(x, fs)
try: command_string = 'my_virusscanner -parameters ' + uploaded_file result = subprocess.check_output(command_string,stderr=subprocess.STDOUT,shell=True) #if needed, do something with "result" except subprocess.CalledProcessError as e: #if your scanner gives an error code when detecting a virus, you'll end up here pass except: #something else went wrong #check sys.exc_info() for info pass
from ctypes import * msvcrt = CDLL('msvcrt') message_string = b"Hello World!\n" msvcrt.printf(b"Testing: %s\n", message_string)
import random import time name = input("whats your name? ") numOfNums = int(input("ok " + name + " how many numbers do you want to randomize? ")) def randomGenerator(): randomFinal = random.randint(1, numOfNums) print (randomFinal) rerun = input("Do you want to pick another random number? ") if rerun == "yes": time.sleep(0.05) randomGenerator() else: print("you may now close this windows") randomGenerator()
class YourView(CreateView): form = YourFormClass # no arguments here def get_form_kwargs(self): kwargs = super(YourViewName, self).get_form_kwargs() kwargs['initial'] = {} # your initial data here return kwargs
word_dic = {} for i in top_25: word_dic[i] = random.choice(o)+random.choice(q) print(word_dic)
>>> df.groupby('time').apply( lambda g: pd.Series(g['data'].values) ).rename(columns=lambda x: 'data%s' % x) data0 data1 time 1 2 2.1 2 3 3.1 3 4 4.1
char* hello(char* name) { char hello[] = "Hello "; char excla[] = "!\n"; char *greeting = malloc ( sizeof(char) * ( strlen(name) + strlen(hello) + strlen(excla) + 1 ) ); if( greeting == NULL) exit(1); strcpy( greeting , hello); strcat(greeting, name); strcat(greeting, excla); return greeting; }
@app.route(...) @load_survey def do_something(....): ...
class MyClass: def __init__(self): self.my_list = [] def add_to_list(self, var): self.my_list.append(var)
from StringIO import StringIO # for python 2.7; import from io for python 3 import pandas as pd import matplotlib.pyplot as plt # get data data = """,sample1, sample2 300, 1, 0 400, 5, 4 500, 6, 0 600, 0, 8""" df = pd.read_csv(StringIO(data), header=0, index_col=0, skipinitialspace=True) # and plot df.plot() plt.gca().invert_xaxis() plt.show()
from sympy import lambdify g_func = lambdify( (x), g )
{% blocktrans count flowers|length as counter %} There is one flower in the vase. {% plural %} There are {{ counter }} flowers in the vase. {% endblocktrans %}
import win32com.client speaker = win32com.client.Dispatch("SAPI.SpVoice") speaker.Speak("Hello, it works!")
def print_style(widget): style = widget.get_style() for i in range(5): print i, gdkColorToRgb(style.bg[i]) gdkColorToRgb = lambda gc: (gc.red//257, gc.green//257, gc.blue//257) widget = gtk.HBox() ## for example widget.connect('realize', print_style)
products = (OrderProduct.objects .filter(order_id=order.id) .values('product_id')) Product.objects.filter(id__in=products)
def coins(num): lst = [random.randrange(2) for i in range(num)] lst = [(i, len(list(j))) for i, j in itertools.groupby(lst)] tails = max(j for i, j in lst if i) heads = max(j for i, j in lst if not i) return {1: tails, 0: heads}
>>> import re >>> strings = 'abc534loif tvd645kgjf tv96fjbd_gfgf'.split() >>> for s in strings: ... for match in re.finditer(r'\b([a-z]+)(\d+)(.+?)\b', s): ... print match.groups() ... ('abc', '534', 'loif') ('tvd', '645', 'kgjf') ('tv', '96', 'fjbd_gfgf')
from main.__init__ import classname
>>> result = [('a', 1), ('b', 2), ('c', 3)] >>> r1, r2 = zip(*result) >>> r1 ('a', 'b', 'c') >>> r2 (1, 2, 3)
import pandas as pd import numpy as np import matplotlib.pylab as pl df1 = pd.DataFrame(np.random.random(10)) df2 = pd.DataFrame(np.random.random(10)) pl.figure() ax=pl.subplot(121) df1.plot(kind='bar', ax=ax) ax=pl.subplot(122) df2.plot(kind='bar', ax=ax)
import pdb pdb.set_trace()
from pandas import * idx = Int64Index([171, 174, 173]) df = DataFrame(index = idx, data =([1,2,3])) print df gives me, 0 171 1 174 2 173 3
from myapp.models import MyModel import urllib2 with open("sourceListOfURLs.txt", "r" ) as source: for aLine in source: for this, the, the_other in someGenerator( aLine ): object= MyModel.objects.create( field1=this, field2=that, field3=the_other ) object.save() def someGenerator( url ): # open the URL with urllib2 # parse the data with BeautifulSoup yield this, that, the_other
np.savetxt("foo.csv", x, delimiter=",", header="ID,AMOUNT", fmt="%i", comments='')
w = [uim.get_widget('/MainMenu/MenuFile/MenuSave')]
def renderId(celllayout, cell, model, iter): if model.get_value(iter,1) == 3: cell.set_property('visible',True) else: cell.set_property('visible',False) treeviewcolumn = gtk.TreeViewColumn() renderer = gtk.CellRendererText() treeviewcolumn.add_attribute(renderer,'text',0) treeviewcolumn.set_cell_data_func(renderer,renderId)
def commentHandler(t): result = [] if "fixed" in t[0]: result.append("fixed") if "TODO: " in t[0]: try: message = t[0].split("TODO: ")[1].strip() result.append(message) except Exception as e: result.append(t[0]) return result comment.setParseAction(commentHandler)
alpha1Order = {token: i for i, token in enumerate(alpha1Order)} alpha2Order = {token: i for i, token in enumerate(alpha2Order)} def keyfunction(filename): num, alpha1, alpha2 = tokenize(filename) return int(num), alpha1Order[alpha1], alpha2Order[alpha2]
<button onclick="window.location = 'timer2.html?time=' + sec">Click Here</button>
import pathlib pathlib.Path(absolute_path_string).as_uri()
In [195]: def func(x): return -x.sort(inplace=False, ascending=False)[:2].diff()[1] df['diff'] = df.loc[:,'Time_1':].apply(func, axis=1) df Out[195]: gene_id Time_1 Time_2 Time_3 diff 0 a 0.014893 8.002460 8.164309 0.161849 1 b 6.679432 0.883211 1.048761 5.630671
>>> from itertools import product >>> from string import ascii_lowercase >>> [''.join(p) for p in product(ascii_lowercase, repeat=3)] ['aaa', 'aab', 'aac', 'aad', 'aae', ..., 'zzv', 'zzw', 'zzx', 'zzy', 'zzz']
import xlsxwriter workbook = xlsxwriter.Workbook('file.xlsx') worksheet = workbook.add_worksheet() data = [13, 24, 15] for row_num, value in enumerate(data): worksheet.write(row_num, 0, value) row_num += 1 worksheet.write(row_num, 0, '=SUM(A1:A{})'.format(row_num)) workbook.close()
import requests from bs4 import BeautifulSoup soup = BeautifulSoup(requests.get(url).text) tables = soup.find_all('table') # this returns 8 tables print len(tables) for table in tables: for tr in table.find_all('tr'): print tr.text print
>>> b'd\0a\0t\0a\0'.decode('utf-16le') u'data'
df = pd.DataFrame({'ticker': ['RCG','RCG'], 'date': ['2015-01-02','2015-01-05'], 'dateValue':[10,8]}, index=[549, 692]) df.set_index('date', inplace=True) print(df) dateValue ticker date 2015-01-02 10 RCG 2015-01-05 8 RCG
import os, re filenames = os.listdir('/path/to/your/files') filenames.sort(key=lambda L: map(int, re.findall('\d+', L)))
Mat img = imread("desk.jpg", 0); Mat img2, dst; pyrDown(img, img2); adaptiveThreshold(255-img2, dst, 255, ADAPTIVE_THRESH_MEAN_C, THRESH_BINARY, 9, 10); imwrite("adaptiveT.png", dst); imshow("dst", dst); waitKey(-1);
for i, question_dict in enumerate(questions): print(i, question_dict['question'])
from collections import defaultdict test_classes = { 'test1': test1, 'test2': test2 } test_instances = defaultdict(list) test_instances[testvariable].append(test_classes[testvariable])
import numpy as np array = np.random.random((5,5)) print array density = np.histogram(array, density=True) print(density)
import py_compile py_compile.compile(r'/path/to/your/file.py')
import re if re.search('mandy', 'Mandy Pande', re.IGNORECASE): # is True
obj=SomePythonObject() list_of_methods=dir(obj) for i in list_of_methods: try: item = getattr(obj, i, None) if callable(item): item() except: print i,'failed'
auth_token_key = request.get('auth_token_key')
>>> random.choice([1, 2, 3]) 2 >>> random.choice([1, 2, 3]) 1 >>> random.choice([1, 2, 3]) 2 >>> random.choice([1, 2, 3]) 3
>>> (df * 0 + 1) * arr A B C 0 NaN 2 3 1 1 NaN 3 2 1 2 NaN 3 1 2 NaN 4 NaN 2 3 5 1 NaN 3
re.findall('^([A-Z]*\s?[0-9]*)[\s_-]*([1-9][1-9]*$)?', str)
obj = ctypes.py_object(buf) address = ctypes.c_void_p() length = ctypes.c_ssize_t() ctypes.pythonapi.PyObject_AsReadBuffer(obj, ctypes.byref(address), ctypes.byref(length)) int_pointer = address.value
#!/usr/bin/env python import os import signal import subprocess p = subprocess.Popen(['gnome-terminal', '--disable-factory', '-e', 'bash'], preexec_fn=os.setpgrp) # do something here... os.killpg(p.pid, signal.SIGINT)
super(SubClass, self).__init__(...)
import re def natural_sort(l): convert = lambda text: int(text) if text.isdigit() else text.lower() alphanum_key = lambda key: [convert(c) for c in re.split('([0-9]+)', key)] return sorted(l, key=alphanum_key)
if "name" in request.session: result = request.session["name"] else: result = False if result: # Do something
from hashlib import sha256 from random import random random_key = random() sha256('%s%s%s'%('YOUR SECRET KEY',random_key,password))
def __setattr__(self, name, value): if name == "x": super(Test, self).__setattr__(name, value) else: print "setting attr %s" % name
plt.legend(loc = 'best', prop={'size':11}) # 'best' automatically decides which is the best position for the legend
# Minute Hour Day of Month Month Day of Week Command # (0-59) (0-23) (1-31) (1-12 or Jan-Dec) (0-6 or Sun-Sat) 0 1 * * * /usr/bin/python manage.py loaddata fixturename.json
import sys class _Sneaky(object): def __init__(self): self.download = None @property def DOWNLOAD_PATH(self): if not self.download: self.download = heavyComputations() return self.download def __getattr__(self, name): return globals()[name] # other parts of itun that you WANT to code in # module-ish ways sys.modules[__name__] = _Sneaky()
class testone(object): def __init__(self): self.attone = None self.atttwo = None self.attthree = None class testtwo(testone): def __init__(self): self.attfour = None super(testtwo, self).__init__() # on python3 just use super()
# content of setup.cfg # can also be defined in in tox.ini or pytest.ini file [pytest] python_files=check_*.py python_functions=*_spec
'^[work|accus*|planet]'
import csv dict1 = {} with open("test.csv", "rb") as infile: reader = csv.reader(infile) headers = next(reader)[1:] for row in reader: dict1[row[0]] = {key: int(value) for key, value in zip(headers, row[1:])}
newpoints = numpy.array([x.split(',') for x in points], dtype=numpy.float)
from django.contrib.auth.models import AbstractUser class MyUser(AbstractUser): black_coffee = models.IntegerField(default=0) coffee_with_milk = models.IntegerField(default=0) coffee_cut = models.IntegerField(default=0)
viewmodel = MyViewModel() Messenger.Default.Send[ViewModelBase](viewmodel)
A = np.ones((4,3)) B = np.zeros_like(A) C = np.empty((A.shape[0]+B.shape[0],A.shape[1])) C[::2,:] = A C[1::2,:] = B
sys.path.extend(map(os.path.abspath, ['other1/', 'other2/', 'yourlib/']))
>>> s = 'one two three' >>> s.split() ['one', 'two', 'three'] >>> lst = s.split() >>> len(lst) 3
import signal from tornado.ioloop import IOLoop def on_shutdown(): print('Shutting down') IOLoop.instance().stop() if __name__ == '__main__': ioloop = IOLoop.instance() signal.signal(signal.SIGINT, lambda sig, frame: ioloop.add_callback_from_signal(on_shutdown)) ioloop.start()
>>> from string import ascii_letters >>> for element in chars: >>> if element in ascii_letters: >>> print(element)
>>> int(2.467 * 10) / 10.0 2.4 >>> int(2.47 * 10) / 10.0 2.4
for name, obj in self.__dict__.iteritems(): if isinstance(obj, QtCore.QObject) and not obj.objectName(): # QObject without a name obj.setObjectName(name)
http = httplib2.Http() # get cookie_value here headers = {'Cookie':cookie_value} response, content = http.request("http://www.theURL.com", 'GET', headers=headers)
def __init__(self, data): for name, func in data.items(): setattr(self, name, func)
#!/usr/bin/python import sys def main(): f = open("a",'r') lines = f.readlines() # lines is actually a list f.close() print lines # You'll see your issue, here! try: for line in lines: sys.stdout.write(line) # Works now except: print "?" if __name__ == "__main__": main()
import Tkinter as tk ... entry1 = tk.Entry(...) entry1.focus_set()
f = open('file.html', 'w') f.write(div) f.close()
from HTMLParser import HTMLParser class MyHTMLParser(HTMLParser): def handle_starttag(self, tag, attrs): print "Found Start Tag", attrs s = "noivos, convites de casamento <a href=\"http://www.olharcaricato.com.br\"> http://www.olharcaricato.com.br</a> more entries here" parser = MyHTMLParser() parser.feed(s)
class TCPProtocol(Protocol): def connectionMade(self): #add to list of connected clients factory.clients.append(self) self.transport.setTcpNoDelay(True)
with env.begin() as txn: length = txn.stat()['entries']
import re import sys with open('somefile.csv', 'r') as filehandle: for text in filehandle: b = re.search("([a-zA-Z]+);([a-z\sA-Z]+);([a-zA-Z]*);([0-9^-]+)\n?",text) print (b.group(2),b.group(1),b.group(3),b.group(4))
import numpy as np output = np.einsum("ijk, ij -> ik", A, B)
for prev, curr, next in neighborhood(list): if (prev == desired_value): print(prev+" "+next) desired_value = __builtins__.next(value_iterator)
widget = QWidget() layout = QVBoxLayout() btn = QPushButton("To be removed") layout.addWidget(btn) widget.setLayout(layout) # later btn.setParent(None)
<Location "/mysite/"> SetHandler python-program PythonHandler django.core.handlers.modpython SetEnv DJANGO_SETTINGS_MODULE mysite.settings PythonOption django.root /mysite PythonPath "['/home/djangotest', '/home/djangotest/mysite'] + sys.path" PythonDebug On </Location>
>>> l = ['yahoo', 'wikipedia', 'freebase'] >>> import itertools >>> for i in range(1, len(l) +1): print(list(itertools.combinations(l, r=i))) [('yahoo',), ('wikipedia',), ('freebase',)] [('yahoo', 'wikipedia'), ('yahoo', 'freebase'), ('wikipedia', 'freebase')] [('yahoo', 'wikipedia', 'freebase')]
>>> def current_quarter(input_date): return (input_date.month - 1) // 3 + 1 >>> >>> from datetime import datetime >>> [(m, current_quarter(datetime(2014, m, 1))) for m in range(1,13)] [(1, 1), (2, 1), (3, 1), (4, 2), (5, 2), (6, 2), (7, 3), (8, 3), (9, 3), (10, 4), (11, 4), (12, 4)]
>>> from numpy import linspace >>> linspace(-7.5, 0.1, 6) array([-7.5 , -5.98, -4.46, -2.94, -1.42, 0.1]) >>> linspace(-7.5, 0.1, 6).tolist() [-7.5, -5.9800000000000004, -4.46, -2.9399999999999995, -1.4199999999999999, 0.10000000000000001]
country = self.request.headers.get('X-AppEngine-Country')
for r in res: r.update(r.pop('some_key', {}))
from itertools import ifilter c = np.array([ e for e in ifilter(lambda x: x[1] in b, a) ]) >> array([[3,4], [5,6], [7,4]])
movieTit = [] movieLink = [] for title in soup.findAll("div", {"class" : "title"}): movieTit.append(title.getText()) for a in soup.findAll('a'): if 'ploaded' in a.getText(): movieLink.append(a['href']) for i in range(0,len(movieTit)/2,2): print movieTit[i] print movieTit[i+1] print movieLink[i] print movieLink[i+1]
{% for article in all_articles reversed %} <h3>{{article.header}}</h3> <p>{{article.content}}</p> {% endfor %}
>>>keys = [list(t) for t in zip(range(10), range(10))] >>>keys [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]]
{{ request.user.date_joined|date:"Y-m-d H:i:s" }}
>>> docu = '<a href="http" alt=":)"></a>' >>> dom = xml.dom.minidom.parseString(docu) >>> a = dom.getElementsByTagName("a")[0] >>> a.attributes.items() [(u'alt', u':)'), (u'href', u'http')]
class EligibilityForm(forms.Form): def __init__(self, *args, **kwargs): super(EligibilityForm, self).__init__(*args, **kwargs) # dynamic fields here ... self.fields['plan_id'] = CharField() # normal fields here ... date_requested = DateField()
from dbconnect import connection def propertyCount(): c, conn = connection() c.execute("SELECT COUNT(*) FROM properties") property_count = c.fetchone()[0] return property_count
DF['COL3'] = np.where((DF['COL1'].isin(['b'])) &(DF['COL2'].notnull()), 2, 0) print DF COL1 COL2 COL3 0 a 0 0 1 b NaN 0 2 b 1 2
{% autoescape false %}...{% endautoescape %}
import admin_notifications from models import Contacts def notification(): count = Contacts.objects.filter(status=Contacts.STATUS_NEW).count() if count: return 'You have {} new contacts <a href="/admin/contacts/">message</a>'.format(count) else: return '' admin_notifications.register(notification)
>>> string_data[~string_data.isnull()] 0 aardvark 1 artichoke 3 avocado dtype: object
$ sudo apt-get install vim-gnome
var=!R_script arguments....
>>> import dateutil.parser >>> dateutil.parser.parse('2013-03-23T04:00:00.000-05:00') >>> dt = dateutil.parser.parse('2013-03-23T04:00:00.000-05:00') >>> dt.strftime('%I:%M') '04:00'
NSString *str = [NSString stringWithFormat:@"%@ %@ %@", @"Hello", @"World", @"Yay!"];
class Rectangle(object): def __init__(self, w, h): self.w = w self.h = h @property def area(self): return self.w * self.h
>>> root = lst = [] >>> levels = 0 >>> while True: ... lst.append([]) ... lst = lst[-1] ... levels += 1 ... if levels % 1000000 == 0: # every 1 million ... print levels ... 1000000 2000000 3000000 4000000 5000000 6000000 7000000 8000000 9000000 10000000 11000000 # .... # [ slower and slower as the system starts to swap ] # .... Traceback (most recent call last): File "<stdin>", line 1, in <module> MemoryError
def free_cells(table): free_cells = set([(x,y) for x in range(table.props.n_columns) for y in range(table.props.n_rows)]) def func(child): (l,r,t,b) = table.child_get(child, 'left-attach','right-attach','top-attach','bottom-attach') used_cells = set([(x,y) for x in range(l,r) for y in range(t,b)]) free_cells.difference_update(used_cells) table.foreach(func) return free_cells
import os.path pid = os.getpid() # Replace your PID here - writing to your own process is boring with open(os.path.join('/proc', str(pid), 'fd', '1'), 'a') as stdin: stdin.write('Hello there\n')
Xtrain_set = np.concatenate([X_train[:i*subset_size], X_train[(i+1)*subset_size:]])
re.sub(r'!(.*?!)', '!_\g<1>', 'str(!test!).strip()')
import os os.system('listdlls PID_OR_PROCESS_NAME_HERE')
class CounterNode(template.Node): def __init__(self): self.count = 0 def render(self, context): self.count += 1 return self.count @register.tag def counter(parser, token): return CounterNode()
class Intervals(dict): def __init__(self, *_): self.update({'P5': 7}) Intervals = Intervals()
apsched = BlockingScheduler() def doSomethingRecurring(): pass # Do something really interesting here.. apsched.add_job(doSomethingRecurring, trigger='interval', seconds=2) apsched.start() # will block
In [2]: a = np.array([[1,2], [3,4], [5,6]]) In [5]: np.shape(a) Out[5]: (3, 2) In [6]: a_trans = a.transpose() In [8]: np.shape(a_trans) Out[8]: (2, 3) In [7]: a_trans Out[7]: array([[1, 3, 5], [2, 4, 6]])
import local_django.conf import django.conf django.conf.settings = local_django.conf.settings
show = db.relationship('Show', backref=db.backref('episodes', cascade="all, delete-orphan"), lazy='joined')
set([a, b, c, a])
class Scores(base): __tablename__ = 'center_master' id = Column(Integer(), primary_key=True) email = Column(String(255), index=True)
In [201]: df.loc[df.groupby('String').filter(lambda x: len(x) > 1)['value'].idxmax(), 'motif'] = 1 df Out[201]: String N value motif 0 EXAM 10 250 NaN 1 EXAMP 20 350 NaN 2 EXAMPLE 30 450 1 3 EXAMPLE 40 400 NaN 4 EXA 50 300 NaN 5 EX 60 100 NaN
import mylib class Hello(object): _query = mylib.Query() # class attribute def say_hello(self): print self._query.hello() def say_goodbye(self): print self._query.goodbye()
try: from BeautifulSoup import BeautifulSoup except ImportError: from bs4 import BeautifulSoup html = #the HTML code you've written above parsed_html = BeautifulSoup(html) print parsed_html.body.find('div', attrs={'class':'container'}).text
prevLine = "" for line in file: # do some work here prevLine = line
ind = something() for field in ['id', 'name']: print getattr(ind, field)
import StringIO ... base64FileData = attachmentObj.data['data'] fileData = base64.urlsafe_b64decode(base64FileData.encode('UTF-8')) memoryFile = StringIO.StringIO(fileData) someFunctionThatOperatesOnFileObjects(memoryFile)
try: response = raw_input("Select a monitoring plot from the list: ") if response == 'q': break selected = dataList[int(plotSelect) + 1] print 'You selected : ', selected[1] break except ValueError: print "Error: Please enter a number between 0 and 9"
# sqlite (filename) CELERY_RESULT_BACKEND = ‘db+sqlite:///results.sqlite’ # mysql CELERY_RESULT_BACKEND = ‘db+mysql://scott:tiger@localhost/foo’ # postgresql CELERY_RESULT_BACKEND = ‘db+postgresql://scott:tiger@localhost/mydatabase’ # oracle CELERY_RESULT_BACKEND = ‘db+oracle://scott:tiger@127.0.0.1:1521/sidname’
$ python Python 2.7.6 (default, Jun 22 2015, 17:58:13) [GCC 4.8.2] on linux2 Type "help", "copyright", "credits" or "license" for more information. >>> import logging >>> getattr(logging, 'INFO') 20 >>> getattr(logging, 'DEBUG') 10 >>> getattr(logging, 'ERROR') 40 >>>
table = [] for each_line in homefile: ##doesn't include first line arr1 = each_line.strip("\n").split('\t') table.append(arr1) ##created a list of lists(matrix); each row as one entry in table(list) cols = zip(*table) ##this switches rows and columns
def runCommand(cj): return cj.runCommand() l = executor.map(runCommand, self.parent_job.child_jobs)
r = re.compile(r'(<li>.*?</li>\n(?!\s*<li>))', re.DOTALL) r.sub('<ul>\\1</ul>', string_with_li_tags)
kafka[:] = [x for x in kafka if x not in stop]
<?php $vowels ='/[\x{064B}-\x{0652}]/u'; $newstr = preg_replace($vowels,"",$str);
funcdict = { 'echo': echocmd, 'var': varcmd, ... } ... funcdict.get(arr[0], invalidcmd)(arr)
from A1.models import M1
[u['word'] for u in x['tokens'] for x in d]
def rect_to_polar_input(x, y): hypotenuse = math.hypot(x, y) angle = round(math.degrees(math.atan2(y, x))) if angle<0: angle += 360 return hypotenuse, angle
doc = { 'script' : 'ctx._source.age = 30' } es.update(index="panavstream", doc_type='panav', id="123", body=doc)
Result = Z[:,None,:,None,None] + Y[:,:,None,:,None] + X[:,:,:,None,:]
def run(func): for line in sys.stdin: print func(line)
def nrofleadingchars(stringtotest, testchar='\t'): count = 0 for c in stringtotest: if c != testchar: break count += 1 return count
from Tkinter import * master=Tk() w=Canvas(master, width=200, height=100) ######## w.pack() ######## w.create_line(0,0,200,100) w.create_line(0,100,200,0, fill="red", dash=(4,4)) w.create_rectangle(50,25,150,75, fill="blue") mainloop()
msg = EmailMessage(subject, html_content, from_email, [to]) msg.content_subtype = "html" # Main content is now text/html msg.send()
result = set() # {} literal syntax works in 2.x while len(result) < 1000: result.add(''.join(random.choice(chars) for i in range(length)))
>>> def rreplace(s, old, new, occurrence): ... li = s.rsplit(old, occurrence) ... return new.join(li) ... >>> s '1232425' >>> rreplace(s, '2', ' ', 2) '123 4 5' >>> rreplace(s, '2', ' ', 3) '1 3 4 5' >>> rreplace(s, '2', ' ', 4) '1 3 4 5' >>> rreplace(s, '2', ' ', 0) '1232425'
row,col=3,5 i=0 while i <= row : j=0 while j <= col: if i+j==0 : print('{:4s}'.format(''),end='') #corner elif i*j==0 : print('{:4d}'.format(i+j),end='') # border else : print('{:4d}'.format(i*j),end='') # table j=j+1 print() i=i+1
wheel_dX, wheel_dY = myMouse.getWheelRel()*4 if any([wheel_dX, wheel_dY]): lastTime = clock.getTime()
class Parent(object): def bar(self): print "bar" class MetaFoo(type): def __new__(cls, name, bases, dict): return type(name, (Parent,) + bases, dict) class Foo(object): __metaclass__ = MetaFoo if __name__ == "__main__": f = Foo() f.bar() print f.bar.func_name
>>> for k,v in z.items(): ... print '%s, %s' % (k.n(3, chop=True), v) ... 0.178 + 1.13*I, 1 0.178 - 1.13*I, 1 2.64, 1
>>> import imp >>> imp.find_module('test') # A file I created at my current dir (<open file 'test.py', mode 'U' at 0x8d84e90>, 'test.py', ('.py', 'U', 1)) >>> imp.find_module('sys') # A system module (None, 'sys', ('', '', 6)) >>> imp.find_module('lxml') # lxml, which I installed with pip (None, '/usr/lib/python2.7/dist-packages/lxml', ('', '', 5)) >>> imp.find_module('lxml')[1] '/usr/lib/python2.7/dist-packages/lxml'
def get_previous_backups(backup_dir, extension, full=""):
import pandas as pd import numpy as np data = pd.DataFrame(np.random.randn(2000,784)) panel = pd.Panel(data.values.reshape(2000, 28, 28)) # In [49]: q.panel[42].shape # Out[49]: (28, 28) # In [51]: q.panel # Out[51]: # <class 'pandas.core.panel.Panel'> # Dimensions: 2000 (items) x 28 (major_axis) x 28 (minor_axis) # Items axis: 0 to 1999 # Major_axis axis: 0 to 27 # Minor_axis axis: 0 to 27
import subprocess, time p = subprocess.Popen(['mplayer', 'http://173.239.76.147:8090']) time.sleep(5) p.terminate() p.wait() # important! subprocess.Popen(['reset']).wait() print('Hello, World!')
from datetime import date from dateutil.rrule import rrule, DAILY iterdates=iter(rrule(DAILY, dtstart=date(2012, 9, 1), until=date(2012, 9, 30)))
matrix = [[1,0,1],[1,0,1],[1,0,1]] print '\t' + '\t'.join('col{}'.format(i) for i in xrange(len(matrix[0]))) for i,row in enumerate(matrix): print 'row{}\t'.format(i) + '\t'.join(str(x) for x in row)
for col in ['parks', 'playgrounds', 'sports', 'roading']: public[col] = public[col].astype('category')
import random results = {} for _ in range(1000): d1 = random.randint(1,6) d2 = random.randint(1,6) results[d1+d2] = results.setdefault(d1+d2, 1) + 1 for roll, count in results.iteritems(): print('Rolled %d %d times, or %.2f %%' % (roll, count, count/1000.))
for name, url in zip(names, urls): urllib.request.urlretrieve(url, name)
import random import struct main_list = range(100) random.shuffle(main_list) # 'I' meaning unsigned int of 4 bytes bytes = struct.pack("{}I".format(len(main_list)), *main_list) for send_50 in zip(*[iter(bytes)]*50): print len(send_50)
lst = [1,2,8,20,11] for i in xrange(len(lst)): print lst[:i]+lst[i+1:] >>> [2, 8, 20, 11] [1, 8, 20, 11] [1, 2, 20, 11] [1, 2, 8, 11] [1, 2, 8, 20]
variety = each.get('action', {}).get('hacking', {}).get('variety', {})
class StatusCode(object): codes = { 0: { 'flag': "QEX_OK", 'message': "job successful" }, 1: { 'flag': "QEX_CMDLINE", 'message': "general cmd line syntax or semantic error"}, } @classmethod def get_code(cls, code): return cls.codes[code]
valgrind --tool=massif python my_script.py
note_nodes=re.split(r'\{(.*?)\}',details['text']) # ['', 'Code', ' - ', 'Text', ''] note_nodes=[n if i%2==0 else XSL('value-of',select=n) for i,n in enumerate(note_nodes)]
with open('myfile', 'r') as f: data = [line.split() for line in f]
from dateutil import parser import pytz FR = pytz.timezone('Europe/Paris') # there is the summer offset changing in this zone date = parser.parse("2013-08-23T23:37:38+0000") datefr = date.astimezone(FR)
import re a = 'foo 123 blah 234 xxx 655' for m in re.finditer(r'(\d+)', a): print m.group(1)
>>> df.reset_index().groupby(['index','aggregating indicator'])['val'].sum().reset_index() index aggregating indicator val 0 1-Jan set_a 4 1 1-Jan set_b 5 2 2-Jan set_a 6 3 2-Jan set_b 6
OPTIONS = {'argv_emulation': True, 'includes': ['EXTERNAL LIBRARY'],}
fig = plt.figure() ax = fig.add_subplot(111) ax.plot([1],[1]) ax.tick_params(axis=u'both', which=u'both',length=0) plt.show()
df.T
user.set_password(form.cleaned_data['password'])
d = {1: [1]} for v in d.itervalues(): v[0] += 1
bt_retval = bt(x, y, carries, n) if bt_retval is not None: return bt_retval del bt_retval # optional (it really isn't wasting much memory) # otherwise carry on
import urllib from BeautifulSoup import * url = "http://www.domain.com/page/path?page=" count_of_pages = 10 for page in xrange(1, count_of_pages): response = urllib.urlopen("%s%d" % (url, page)) webPage = BeautifulSoup(webFile.read()) # Parse page with great module BeaurifulSoap
plt.annotate('', xy = (0.6, 0.33), xycoords = 'axes fraction', \ xytext = (0.8, 0.33), textcoords = 'axes fraction', fontsize = 7, \ color = '#303030', arrowprops=dict(edgecolor='black', arrowstyle = '<->', shrinkA = 0, shrinkB = 0))
import pylab as pl pl.Artist.get_rasterized = lambda self:True fig, ax = pl.subplots() ax.plot([1,2,3,2]) fig.savefig("test.pdf")
get_ipython().magic('%history -l 1 -t -f history.txt /') with open('history.txt', 'r') as history: lastinput = history.readline() with open('ilog_'+str(today)+'.py', 'a') as log: log.write(lastinput) os.remove('history.txt')
from datetime import timedelta date = datetime.datetime.now() - datetime.timedelta(minutes=10) docs = db.collection.find( { 'processed': 0, '$or': [ {'process_lock_date': {'$lt': date}}, {'process_lock_date': null} ] }).sort({'date_added': 1}).limit(50) for doc in docs: print(doc)
>>> random.randint(1,123456789012345678901234567890) 113144971884331658209492153398L
class EditedAddress(models.Model): class Meta: verbose_name = 'Edited Address' verbose_name_plural = 'Edited Addresses'
d = {} i = 0 while i < your_users_quantity: // generate your username (e.g.: user = "user_"+i that could result in user_1 for example) key = user // generate your value (e.g.: net_percent = whatever THIS user net_percent is) value = net_percent d[key] = value i += 1
import lxml.html htmltree = lxml.html.parse('http://www.google.com/intl/en/about/corporate/index.html') print htmltree.xpath('//p/text()')
for g, p in zip(g_data, p_data): print(g.text, p.text)
cherrypy.request.onloadalert="Warning!"
>>> import re >>> >>> s = 'Total: 192.5ms +/- 4.3%' >>> >>> re.search(r'Total:\s+([0-9.]+)', s).group(1) '192.5'
source bin/activate
# Given the posts, fetches all the data the template will need # with just 2 key-only loads from the datastore. posts = get_the_posts() author_keys = [Post.author.get_value_for_datastore(x) for x in posts] authors = db.get(author_keys) city_keys = [Author.city.get_value_for_datastore(x) for x in authors] cities = db.get(city_keys) for post, author, city in zip(posts, authors, cities): post.author = author author.city = city
import os for i in "abc": os.system ("mkdir "+i) for j in range (5): os.system ("touch "+str(i)+"/"+str(j)+".txt")
for match in matches: first_names.append(match[0]) last_names.append(match[1])
keep = lambda x: not isinstance(x, mpl.patches.FancyArrowPatch) ax.patches = [patch for patch in ax.patches if keep(patch)]
class Category(models.Model): instrumentCategory=models.CharField(max_length=50,blank=True,null=True) def __unicode__(self): return self.instrumentCategory
>>> zip(dev, phone, carrier) [('Alex', 'iPhone', 'ATT'), ('Ashley', 'Nexus', 'T-Mobile'), ('Colin', 'Nokia', 'MegaFon')]
import h5py import numpy as np f = h5py.File('yourfile.hdf', 'r') dataset = f['/M/data'] # Load the entire array into memory, like you're doing for matlab... data = np.empty(dataset.shape, dataset.dtype) dataset.read_direct(data) print data.sum() #Or alternately, "np.sum(data)"
import codecs with codecs.open(file, "r", "utf-8-sig") as f: a, b, c= map(int, f.readline().split(","))
x = zip(*args)
Avoid extraneous whitespace in the following situations: - Immediately inside parentheses, brackets or braces. Yes: spam(ham[1], {eggs: 2}) No: spam( ham[ 1 ], { eggs: 2 } )
>>> import re >>> non_decimal = re.compile(r'[^\d.]+') >>> non_decimal.sub('', '12.34fe4e') '12.344'
import jupyter_core import os,glob,json jrd = jupyter_core.paths.jupyter_runtime_dir() with open(glob.glob(jrd+'/nbserver-*.json')[0]) as json_file: root_dir = json.load(json_file)['notebook_dir']
import os try: user_paths = os.environ['PYTHONPATH'].split(os.pathsep) except KeyError: user_paths = []
encoded = HEX_STRING.decode("hex").encode("base64")
>>> re.findall('\((?P<content>.*?)\)', r'(It\'s something)') ["It\\'s something"] >>> ["It\\'s something"] == [r"It\'s something"] True
stringvar = [] while type(tuplevar) is tuple: stringvar.append(tuplevar[0]) tuplevar=tuplevar[1] stringvar.append(tuplevar) # to get the last element.
import logging logger = logging.getLogger('weasyprint') logger.handlers = [] # Remove the default stderr handler logger.addHandler(logging.FileHandler('/path/to/weasyprint.log'))
strpos("aloha", "a") !== false
def __dir__(self): base = dir(self.data) base.extend(('_try_attr', 'data')) return base
mask[~mask].iloc[np.random.randint(2)] = True
Python 2.7 -- Python version (r27:82525, Jul 4 2010, 07:43:08) -- The build date and revision from src trunk that was used to build this. [MSC v.1500 64 bit (AMD64)] -- Compiled with MSVC compiler targeting 64-bit on win32 -- Obviously for windows platform
from random import* def f(): b=[0]*101 for i in range(0, 1000): b[randrange(0,101)]+=1 return b print f()
>>> dictionary1 = {'1':'one', '2':'two', '3':'three'} >>> dictionary2 = {'1':'uno', '2':'dos', '3':'tres'} >>> combined = {key:[dictionary1[key], dictionary2[key]] for key in dictionary1} >>> combined {'3': ['three', 'tres'], '2': ['two', 'dos'], '1': ['one', 'uno']}
ax3.annotate('Test', (df5.index[1], df5['SOLD_PRICE'][1]), xytext=(15, 15), textcoords='offset points', arrowprops=dict(arrowstyle='-|>'))
def Map(L): ret = 0; for i in range(5000): ret += len(L) ret %= 50 return ret def Main(): pool = Pool() lst = [random.sample(range(1, 100), random.randint(1, 50)) for i in repeat(None, 100000)] print("Start") start_time = time.time() #...
In [2]: factor(x**2 + 1, extension=[I]) Out[2]: (x - ⅈ)⋅(x + ⅈ)
>>>import ast >>>To=ast.literal_eval(To) >>>print To >>>('abc@hcl.com', 'xyz@hcl.com', 'accc@infy.com', 'satya@lab.com', 'ach@lab.com') >>>len(To) >>>5
class jsonEncoder(simplejson.JSONEncoder): def default(self, obj): if isinstance(obj, db.GeoPt): return {'lat': obj.lat, 'lon': obj.lon} else: return simplejson.JSONEncoder.default(self, obj)
result = tables.Column(verbose_name='The Result', empty_values=())
import urllib import urllib2 from bs4 import BeautifulSoup as bs url = raw_input('enter - ') req = urllib2.Request(url, headers={'User-Agent': 'Mozilla/5.0'}) # <-- html = urllib2.urlopen(req).read() soup = bs(html) tags = soup('a') for tag in tags: print tag.get('href', None)
@pymc.stochastic(dtype=int) def switchpoint(value=1900, t_l=1851, t_h=1962): """The switchpoint for the rate of disaster occurrence.""" if value > t_h or value < t_l: # Invalid values return -np.inf else: # Uniform log-likelihood return -np.log(t_h - t_l + 1)
from itertools import permutations permutations([1,2,3])
# a string that is unicode+raw (escapes \) path = ur"E:\pub\private\desktop" print os.listdir(path) # [u'\xa6.txt', u'\u2560.txt']
categories = [item.category for item in my_list] my_list.sort(key = lambda item: categories.index(item.category))
while p < num_drivers: f = open("Driver"+str(p)+".txt","w") for x in driver_routes[p]: to_write = ','.join(map(str, lat_long[x])) print to_write # for testing f.write(to_write) f.write("\n") f.close() p += 1
u_1 , ... , u_i , v_0 , u_i+1 , ... , u_n
def get_context_data(self, **kwargs): articles = Article.objects.order_by("-published_date")[:5] videos = Video.objects.order_by("-published_date")[:5] items = list(articles) + list(videos) items.sort(key=lambda i: i.published_date, reverse=True) return {"items": items[:5]}
x = np.concatenate((line1_x, line2_x)) y = np.concatenate((line1_y, line2_y)) order = np.argsort(y) spline_fit = interp.UnivariateSpline(y[order], x[order]) y_points = np.linspace(515, 1000, 20) plt.plot(spline_fit(y_points), y_points, 'k--', label='Fit')
for i, s in enumerate(lst_times): #print(s) f.write( str() + " " + str(s)+ " " + "\n" )
>>> import urllib >>> resp = urllib.urlopen('http://bit.ly/bcFOko') >>> resp.getcode() 200 >>> resp.url 'http://mrdoob.com/lab/javascript/harmony/'
myQue.clear()
import pyPdf pdf = pyPdf.PdfFileReader(open(filename, "rb")) data = '' for page in pdf.pages: data += page.extractText() data2 = data.split('\n')
import time, datetime d = datetime.datetime.now() print time.mktime(d.timetuple())
>>> hash("Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:27.0) Gecko/20100101 Firefox/27.0") 1892010093
$a = '1'; $c = array('2', '3'); function iterate($temp) { foreach($temp as $a) echo $a ; } iterate($c) echo $a;
for dohicky_id in dohicky['dohicky']: stuff = dohicky['dohicky'][dohicky_id]['Stuff']
def main_menu(): print ("\nMain Menu ") print ("\n1. Alphabetical Order (Highest Score only) = 'alpha'") return input ("\nEnter your Option: ") option = main_menu()
list1 = [] list2 = [] howmany = int(input("How many words will you write?")) n = int(input("What will the n number be?")) for i in range(0, howmany, 1): word = raw_input("Write the word ") list1 = list1 + [word] if len(word) > n: list2 = list2 + [word] print list2
options = { 'margin-bottom': '0.75in', 'footer-right': '[page]' } pdfkit.from_string('Hello World', 'out.pdf', options=options)
from collections import defaultdict list1 = [6, 1, 8, 1, 2] list2 = ["Mail Opened", "Mail Not Opened", "Mail Opened", "Mail Not Opened", "Mail Not Opened"] added = defaultdict(int) for i, k in enumerate(list2): added[k] += list1[i]
In [9]: for inner_list in my_list: ...: inner_list[1] = 0 ...: In [10]: my_list Out[10]: [[2, 0, 2, 2], [3, 0, 3, 3], [4, 0, 4, 4]]
'tec_esp': fields.related('product_id', 'tec_esp', type='char', size=64, string='Especificaciones tecnicas', store=True, readonly=True)
wind.set_default_size(200,200) wind.set_hexpand(False)
zip_safe=False
import sys sys.path.insert(0, 'your_path_here') import custom_module
class Foo(object): def blah(self): print("Blah!") def __getitem__(self, attr): return getattr(self, attr) f = Foo() exec('blah()', globals(), f)
>>> mysentence = ('i have a dog and a cat', 'i have a cat and a dog', 'i have a cat', 'i have a dog') >>> import re >>> pattern = re.compile("(dog|cat) ") >>> [x for x in mysentence if not pattern.search(x)] ['i have a cat', 'i have a dog']
min_value = np.iinfo(im.dtype).min max_value = np.iinfo(im.dtype).max
vars = {"var": 5} array = [] array.append("var") vars[array[0]] = 1 print(vars[array[0]]) # prints "1" print(vars["var"]) # ditto
import threading import time def sleeper(): print 'Starting to sleep' time.sleep(10) print 'Just waking up..' print 'snooze' print 'oh no. I have to get up.' def worker(): print 'Starting to work' time.sleep(1) # this also a work. :) print 'Done with Work' t = threading.Thread(name='sleeper', target=sleeper) w = threading.Thread(name='worker', target=worker) w.start() t.start()
import itertools def partition(items, predicate=bool): a, b = itertools.tee((predicate(item), item) for item in items) return ((item for pred, item in a if not pred), (item for pred, item in b if pred)) odd, even = partition(numbers, lambda n: n % 2 == 0)
import os for dirpath, dirsInDirpath, filesInDirPath in os.walk("yourFolderContainingTxtFiles"): for myfile in filesInDirPath: sqlQuery = "LOAD DATA INFILE %s INTO TABLE xxxx (col1,col2,...);" % os.path.join(dirpath, myfile) # execute the query here using your mysql connector. # I used string formatting to build the query, but you should use the safe placeholders provided by the mysql api instead of %s, to protect against SQL injections
vect= CountVectorizer(ngram_range=(1,2), binary =True, min_df = 500)
set editing-mode vi set keymap vi set convert-meta on
import matplotlib.pyplot as plt from matplotlib.ticker import MultipleLocator import numpy as np fig, ax = plt.subplots() fig.set_facecolor('white') yticks = np.arange(1,3,0.2) x = [1,2,3] plt.subplot(211) plt.plot([1,2,3], label="test1") plt.plot([3,2,1], label="test2") plt.xticks() plt.yticks(yticks) ax.yaxis.set_minor_locator(MultipleLocator(5)) plt.show()
grep -vP "[\x80-\xFF]" data.tsv > data-ASCII-only.tsv
{% regroup employees by skill_level as employees_by_level %} {% for level in employees_by_level %} <tr> <td class="level">{{ level.grouper.skill }}</td> <td class="count">{{ level.list|length }}</td> {% for e in level.list %} <td class="race">{{ forloop.counter0 }}</td> {% endfor %} </tr> {% endfor %}
# Code that defines the prior: p(a,b)∝(a+b)^(−5/2) @pm.stochastic def ab(power=-2.5, value=[1,1]): if np.any(value <= 0): return -np.Inf return power * np.log(value[0]+value[1]) a = ab[0] b = ab[1]
Npoints = 100 t = np.linspace(0,np.pi,Npoints) r = 1 a = 20 phi = a*t X = r*np.sin(t)*np.cos(phi) Y = r*np.sin(t)*np.sin(phi) Z = r*np.cos(t)
collections.defaultdict - fastest original proposal - next fastest (if duplicates) your single loop proposal - slower, if there are duplicates collections.counter - slowest
In [7]: df Out[7]: Field 1 a 2 b 3 c 5 d 6 e 8 f [6 rows x 1 columns] In [8]: df.reset_index(drop=True) Out[8]: Field 0 a 1 b 2 c 3 d 4 e 5 f [6 rows x 1 columns]
words = ['a', 'b', 'c', 'd'] code = ['3' , '2', '4', '9'] while words != code: number = raw_input("Enter a number: ") letter = raw_input("Enter the letter: ") code = list(map(lambda x: str.replace(x, number, letter), code)) print('You finally got it!')
def perms(word): stack = list(word) results = [stack.pop()] while len(stack) != 0: c = stack.pop() new_results = [] for w in results: for i in range(len(w)+1): new_results.append(w[:i] + c + w[i:]) results = new_results return results
clients = {} with open('clientdata.csv') as csvfile: reader = csv.DictReader(csvfile) numbers = [] for row in reader: name = row['Client Name'] earnings = float(row['Earnings']) if name in clients: clients[name] += earnings else: clients[name] = earnings for client in sorted(clients): print("%s:%.2f" % (client, clients[client]))
re.findall(r'#\w+', data)
# coding: utf-8 from nose.plugins.attrib import attr @attr("foo", "bar", "baz") def test1(): print "I'm test1" @attr("foo") def test_2(): print "I'm test2"
In [146]: "input"[::-1] # from back to the begining. Equivalent to: "input"[len("input")::-1] Out[146]: 'tupni' In [147]: "input"[0::-1] # from back to the 0'th (i.e. first) element from back Out[147]: 'i' In [148]: "input"[1::-1] # from back to the 2ed element from back Out[148]: 'ni' In [151]: "input"[len("input")::-1] # from back to the last element from back (alterantive way) Out[151]: 'tupni'
.. automodule:: mymodule :members: :exclude-members: MyClass .. autoclass:: MyClass(first, second, third)
y = "N( :id " + self.nid + \ # ^
dateInput = raw_input("Date? (MM/DD/YYYY) ").strip() amount_re = re.compile(r"(^%s)" % (dateInput,)) cell_list = wks.findall(amount_re)
from functools import partial def zero(number): return number == "zero" def one(): return "one" def numbers_to_functions_to_strings(argument): switcher = { 0: partial(zero, argument), 1: one, 2: lambda: "two", } func = switcher.get(argument, lambda: "nothing") return func()
>>> to_exclude = {1, 2} >>> vector = ['a', 'b', 'c', 'd'] >>> vector2 = [element for i, element in enumerate(vector) if i not in to_exclude]
numOfRooms = int(input("num of rooms:")) tsa = 0 for n in range(numOfRooms): input("name of room:") numOfWalls = int(input("num of walls:")) sa = 0 for wall in range(numOfWalls): height = int(input("height of wall:")) width = int(input("width of wall:")) sa = sa + (height * width) tsa = tsa + sa
current_vcodec = subprocess.check_output("mediainfo --Inform='Video;%%CodecID%%' %s" % source, shell=True) current_acodec = subprocess.check_output("mediainfo --Inform='Audio;%%CodecID%%' %s" % source, shell=True) duration = subprocess.check_output("mediainfo --Inform='Video;%%Duration%%' %s" % source, shell=True)
from django.contrib.auth import update_session_auth_hash def password_change(request): if request.method == 'POST': form = PasswordChangeForm(user=request.user, data=request.POST) if form.is_valid(): form.save() update_session_auth_hash(request, form.user) else: ...
import xml.etree.ElementTree as ET tree = ET.parse('hi.xml') root = tree.getroot() count = 0 for changetexts in root.findall('log'): temp = changetexts.text lines = temp.splitlines() tenlines = lines[0:10] print (len(tenlines)) # Should be 10, use tenlines variable as you wish !!
condition = 'Symbol == "abcd"' indices = table.getWhereList(condition) # get indices rows_array = table[indices] # get values new_rows = compute(rows_array) # compute new values table[indices] = new_rows # update the indices with new values
import re s='{{ <wr> test.name1 <wr> }} <wr><wr> {{ <wr> test.name2 <wr> }}' re.sub(r'({{[^{}]+}})', lambda x: re.sub(r'<[a-zA-Z0-9:-]+>', '', x.group(0)), s) '{{ test.name1 }} <wr><wr> {{ test.name2 }}'
import numpy as np m = np.array([0,1,2,3]).reshape(2,2) indices_r90 = np.array([[0,1], [0,0], [1,1], [1,0]]) indices_r90_t = indices_r90.T ravel_ind = indices_r90_t[0] + indices_r90_t[1]*m.shape[0] print m.ravel()[ravel_ind].reshape(2,2) >>> [[2 0] >>> [3 1]]
stdin,stdout,stderr = ssh.exec_command("PATH='path' && cd/mnt/soft; ls -LR > contents.txt; cat VERSION")
next((i for i, v in enumerate(a) if i == 666), None)
result = p.parseDateText("March 5th, 1980") result = p.parseDate("4/4/80")
s = 'select :param1, :param2 from my_table' d = {'param1': 'val1', 'param2': 'val2'} for k, v in d.items(): s = s.replace(':'+k, v)
ids = title.select('//meta/@content').extract() print [id for id in ids if id.isdigit()]
import gtk tv = gtk.TextView() def keyPress(widget, event): if event.keyval == 65293: ## do something return True return False tv.connect('key-press-event', keyPress) win = gtk.Dialog() win.vbox.pack_start(tv) win.vbox.show_all() win.run()
from py2neo import Graph, Relationship from py2neo.cypher import CreateStatement graph = Graph() tx = graph.cypher.begin() statement = CreateStatement(graph) statement.create(Relationship(node1, "LINKS_TO", node2)) tx.append(statement) tx.commit()
select t1.* from your_table t1 inner join ( select ref, max(set) as mset from your_table where user_id = 1 group by ref ) t2 on t2.mset = t1.set and t2.ref = t1.ref
seen = {} # Key prefixes already processed while True: k0 = None # Current prefix for L in all_the_data: k = L[0][:2] if k not in seen: if k0 is None: k0 = k if k0 == k: store_into_database(L) if k0 is None: break seen.append(k0)
required = ".".join(s.split(".")[0:2]) // only one split // using regular expressions import re required = re.sub(r"\.[^\.]$", "", s)
This is <b>bold</b> text. This is <u>underlined</u>.
import sys import os sys.stdout = open(os.devnull, "w") my_nasty_function() sys.stdout = sys.__stdout__
In [79]: df Out[79]: Date, Open, High, Low, Close 0 01-01-2015, 565, 600, 400, 450 In [80]: df['Name'] = 'abc' df Out[80]: Date, Open, High, Low, Close Name 0 01-01-2015, 565, 600, 400, 450 abc
x = input("Enter x:") y = input("Enter y:") xv = input("Enter xv:") yv = input("Enter yv:") s = input("Enter s:") DrawGraph(x, y, xv, yv, s)
def e6(x): return '%fe-6' % (1e6 * x,)
_list1_ = sorted(_list1_) _list2_ = sorted(_list2_)
import os os.startfile('C:/folder/sound.mp3')
echo -e "2\n3" | python test.py | grep -q "The sum is 5" && echo "Success"
key = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, "Software\\R-core\\R") value = _winreg.QueryValueEx(key, "InstallPath")[0]
random.normalvariate(25, 4.87340)
import re for line in open('logfile.log'): match = re.search(r'-(.*):', line) if match: print match.group(1) else: match = re.search(r'-(.*)', line) if match: print match.group(1) else: print 'No match in line', line.strip()
import win32com.client xlApp = win32com.client.Dispatch("Excel.Application") workBook = xlApp.Workbooks.Open("spreadsheet.xls") xlApp.ExecuteExcel4Macro("FDSFORCERECALC(False)") workBook.Save() workBook.Close() xlApp.Quit()
for win32gui.GetCursorInfo()[1] == 65567:
df = xl.parse("Sheet1", header=None)
db_connection = MySQLdb.connect( host = settings['dbHost'], user = settings['dbUser'], passwd = settings['dbPass'], db = settings['dbName'], client_flag = MySQLdb.constants.CLIENT.FOUND_ROWS )
self.session.mount('https://', adapter)
>>> now = datetime.datetime.now().replace(microsecond=0) >>> print now 2013-04-29 12:47:28
buffpkt = pkt[:]
import subprocess p = subprocess.Popen(["commandHere", "usernameHere"], shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE) p.stdin.write(b"yourPassword\n") # What you need to input result = p.stdout.read() # The program's output print(result)
with open("textfile.txt", "r") as f: searchInLines = f.readlines() for i, line in enumerate(searchInLines): if "VIRGINIA" in line: print searchInLines[i-3]
l = ['_'.join(s.split('_')[:2]) for s in l]
def is_list(p): return isinstance(p, list) def deep_reverse(a): a.reverse() for i in a: if is_list(i): deep_reverse(i) # <=== This is what changed print a
userinp = raw_input("Please type a sentence: ") words = userinp.split(' ') search = raw_input("Search for a word: ") for idx, word in enumerate(words): if search == word: print("Word found at index:", idx)
arr = numpy.random.binomial(1, p, count)
from multiprocessing import Pool pool = Pool(processes=6) # run no more than 6 at a time pool.map(run_assignments_parallel, project_list) # pass full list (12 items)
sorted(set(y))
>>> int('0xd3b2178c', 16) 3551664012
>>> [(g[0], len(list(g[1]))) for g in itertools.groupby(['a', 'a', 'b', 'b', 'b'])] [('a', 2), ('b', 3)]
with open('test.txt') as infile, open('test_2.txt', 'w') as outfile: for line in infile: if not line.startswith("I want"): outfile.write(line.strip())
import sys import subprocess subprocess.call([sys.executable, 'testprint.py'])
>>> StringIO.StringIO().write(u'\u0080') >>> cStringIO.StringIO().write(u'\u0080') Traceback (most recent call last): File "<stdin>", line 1, in <module> UnicodeEncodeError: 'ascii' codec can't encode character u'\x80' in position 0: ordinal not in range(128)
from Tkinter import * fen =Tk() class test_Tk_class: def __init__(self): self.make_title() # <------------ def make_title(self): fen.title("Test") a = test_Tk_class() fen.mainloop()
import random, string key = "".join([random.choice(string.letters + string.digits + string.punctuation) for _ in xrange(64)])
for pattern in ("".join(seq) for seq in itertools.product("01", repeat=3)): ...
public static void RaiseOnTimeout(Socket sock, TimeSpan timeout) { List<PollItem> pollItemsList = new List<PollItem>(); PollItem pollItem = sock.CreatePollItem(IOMultiPlex.POLLIN); pollItemsList.Add(pollItem); int numReplies = Context.Poller(pollItemsList.ToArray(), timeout.Value.Ticks * 10); if (numReplies == 0) { throw new TimeoutException(); } }
def f(path): if os.path.isdir(path): d = {} for name in os.listdir(path): d[name] = f(os.path.join(path, name)) else: d = os.path.getsize(path) return d
# copied from # http://matplotlib.sourceforge.net/mpl_examples/mplot3d/wire3d_demo.py from mpl_toolkits.mplot3d import axes3d import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax = fig.add_subplot(111, projection='3d') X, Y, Z = axes3d.get_test_data(0.05) ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10) plt.show()
def dataReceived(self, data): username = self._parseAndExtractUsername(data) if username is not None: self.factory.users[username] = self
while True: poz=input("Give the position:") try: val=int(poz) if val>=0: break else: print ("The position has to be bigger then 0") except ValueError: print ("invalid number")
>>> mylist = [[1,2,3,4], [] , [1,2,3,4] , []] >>> [i for i,x in enumerate(mylist) if not x] [1, 3]
from selenium.common.exceptions import NoSuchElementException while True: try: form = driver.find_element_by_name("move") break except NoSuchElementException: continue button = form.find_element_by_xpath("following-sibling::button") button.click()
from PIL import Image def get_num_pixels(filepath): width, height = Image.open(open(filepath)).size return width*height print get_num_pixels("/path/to/my/file.jpg")
class SpecialDictionary(dict): def __missing__(self, k): return 0 words = ['a', 'b', 'c', 'a', 'b'] special_dict = SpecialDictionary() for w in words: special_dict[w] += 1 print special_dict #{'c': 1, 'a': 2, 'b': 2}
df = pd.DataFrame(np.random.randint(0, 10, size=(10, 4)), columns=list("ABCD")) df.ix[(df.A > 5) & (df.B < 8), ["A", "B"]] = -10, -10
adding = input("Enter Name: ") with open("settings.txt", "a") as f: f.write(adding) with open("settings.txt", "r") as fp: print(fp.readlines())
from itertools import zip_longest a_dict = {"a":1,"b":3,"c":4} b_dict = {"d":44,"e":23} for a_pair,b_pair in zip_longest(a_dict.items(),b_dict.items()): if a_pair: print(a_pair[0],a_pair[1]) if b_pair: print(b_pair[0],b_pair[1]);
import pylab import numpy as np import multiprocessing as mp import os def display(): os.setsid() pylab.show() mu, sigma = 2, 0.5 v = np.random.normal(mu,sigma,10000) (n, bins) = np.histogram(v, bins=50, normed=True) pylab.plot(bins[:-1], n) p=mp.Process(target=display) p.start()
a = np.arange(10) b = a[1:] c = b[1:]
import nose2 test_run = nose2.discover(argv = ['-s', 'path-to-tests'], exit = False) if test_run.result.wasSuccessful(): do_something() else: do_something_else()
$.post("/AjaxRequest/get_data_for_users_country_city", { selected_country_name: $('#id_country_name').val(), selected_city_name: $('#id_city_name').val() }, function(data) { alert("hello"); });
def create_action(*args, **kwargs): action = Action(*args, **kwargs)
>>> X = np.random.randn(3, 4) >>> lr = LogisticRegression() >>> X = np.random.randn(3, 4) >>> y = [1, 0, 0] >>> lr.fit(X, y) LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, penalty='l2', random_state=None, tol=0.0001) >>> lr.predict_proba(X[0]) array([[ 0.49197272, 0.50802728]])
import threading sem = threading.Semaphore(0) hostThread = threading.Thread(target=uploadToHost, args=(sem,)) backupThread = threading.Thread(target=uploadToBackup, args=(sem,)) sem.acquire() # Wait for one of them to finish sem.acquire() # Wait for the other to finish
from sqlalchemy import literal from sqlalchemy.dialects.mysql import SET class MyTable(Model): letters = Column(SET('a', 'b', 'c', 'd', 'e'), server_default=literal('a,b'))
In [1]: import networkx as nx In [2]: G=nx.path_graph(4) In [3]: pos=nx.spring_layout(G) In [4]: nx.set_node_attributes(G,'pos',pos) In [5]: G.node Out[5]: {0: {'pos': array([ 0., 0.])}, 1: {'pos': array([ 0.32267963, 0.03340727])}, 2: {'pos': array([ 0.67729057, 0.07011044])}, 3: {'pos': array([ 1. , 0.10350174])}}
from wsgiref import simple_server from SocketServer import ThreadingMixIn class ThreadingWSGIServer (ThreadingMixIn, simple_server.WSGIServer): pass server = ThreadingWSGIServer(...) server.set_app(app) server.serve_forever()
auth.define_tables(username=True, signature=False) auth_table = auth.settings.table_user auth_table.username.requires = IS_NOT_IN_DB(db, auth_table.username)
#include <vector> using namespace std; vector<vector<int>> test = { {1, 2, 3}, {4, 5, 6} };
if name in cls.__dict__: # ... your code here ... pass
dict(zip(col_names, p))
- url: /page.html static_files: page.html upload: /page.html - url: /page.css static_files: page.css upload: /page.css
def on_cellrenderertoggle_toggled(self, cellrenderertoggle, path): # self.liststore is the tree modal of that treeview self.liststore[path][1] = not self.liststore[path][1]
import sys import os import comtypes.client in_file = os.path.abspath('') out_file = os.path.abspath('yesblue') #name of output file added to the current working directory word = comtypes.client.CreateObject('Word.Application') doc = word.Documents.Open('yesblue.doc') #name of input file doc.SaveAs(out_file, FileFormat=16) # output file format to Office word Xml default (code=16) doc.Close() word.Quit()
from collections import Counter def post_to_words(raw_pos, st): HTML_text = BeautifulSoup(raw_post).get_text() letters_only = re.sub("[^a-zA-Z]", " ", HTML_text) words = letters_only.lower().split() return (w for w in words if w not in st) cn = Counter() st = set(stopwords.words("english")) for post in fiance_forum["Post_Text"]: cn.update(post_to_words(post, st)
trait = self.trait if self.trait == self.spouse.trait else defaultTrait
with open("file.txt") as f: allLines = f.readlines() for lineNumber in range(len(allLines)): if "word" in allLines[lineNumber]: print("Match in line {0}".format(lineNumber))
class Edge(EdgeBase): def __new__(cls, left, right): self = super(Edge, cls).__new__(cls, left, right) self._hash = hash(self.left) * hash(self.right) return self def __hash__(self): return self._hash
class SomeClass: @classmethod def some_class_method(cls): pass @staticmethod def some_static_method(): pass SomeClass.some_class_method() SomeClass.some_static_method()
def render(self, notification, my_subtask): """ @type notification: full.path.to.Notification @type my_subtask: celery.canvas.subtask """ return NotificationRepresentation(notification).to_dict() # some irrelevant code
def max_and_min(*arg): return (max(arg), min(arg))
>>> x = 'http://www.example.com:8080/abcd/dir/file1.html?query1=value1&query2=value2' >>> query_pattern='(query\d+)=(\w+)' >>> # query_pattern='(\w+)=(\w+)' a more general pattern >>> re.findall(query_pattern,x) [('query1', 'value1'), ('query2', 'value2')]
enpkg numpy enpkg scipy
collective.civicrm.civicrmpfgadaptor/ collective.documentpfgadapter/ collective.pfg.creditcardfields/ collective.pfg.downloadfield/ collective.pfg.masterselect/ collective.pfg.silverpop/ collective.pfg.sslfield/ collective.pfg.verkkomaksut/ pfg.donationform/ pfg.drafts/ raptus.multilanguagepfg/ sc.pfg.brazilianfields/ uwosh.pfg.d2c/
stringbuffer=ctypes.create_string_buffer(1000) bufferpointer=ctypes.POINTER(ctypes.c_int8)(stringbuffer)
self.appExeCB=QtGui.QComboBox() self.appExeCB.addItems(self.items.keys()) self.appExeCB.setCurrentIndex(self.items.keys().index('Maya Executable'))
import re mystr = "This house is small. That house is big." for token in re.findall(r"([\w]+|[^\s])", mystr): print (token) if re.match(r"[.!?]", token): print()
g = re.match("(.*) ([0-9]+) ?- ?([0-9]+) (.*)", user_input) if g: team1 = g.group(1) team1_score = g.group(2) team2_score = g.group(3) team2 = g.group(4)
from kombu import Exchange, Queue, binding exchange = Exchange('experiment', type='topic') q = Queue(exchange=exchange, bindings=[ binding(exchange, routing_key='foo.#'), binding(exchange, routing_key='bar.#') ], exclusive=True)
x=[1,3,5,9,2] alphabet = "abcdefghijklmnopqrstuvwxyz" #the string r = "" # The string to print out at the end for i in x: r += alphabet[i] print r
SELECT m.*, p1.*, p2.* FROM msgs m INNER JOIN profiles p1 ON m.src = p1.login_hash INNER JOIN profiles p2 ON m.dest = p2.login_hash
>>> import feedparser >>> d = feedparser.parse("http://feedparser.org/docs/examples/atom10.xml") >>> d['feed']['title'] # feed data is a dictionary u'Sample Feed'
if logger.isEnabledFor(logging.DEBUG): logger.debug("Message with %s, %s", expensive_func1(), expensive_func2())
>>> value = [0, 1, 1, 1, -1, -1, -1, -1, 1] >>> n_day = 5 >>> [sum(value[i:max(i-n_day, 0):-1]) for i in range(len(value))] [0, 1, 2, 3, 2, 1, -1, -3, -3]
def testfun(x,y): return x*y def listfun(X): return testfun(*X) >>> testlist = [3,5] >>> listfun(testlist) 15 >>> testfun(*testlist) 15
language= environ['SCRIPT_NAME'][1:].split('/', 1)[0] if language not in ('english', 'italiano'): language= 'english'
value.setParseAction(lambda t : ' '.join(t))
SELECT TagID,COUNT(*) FROM YourTable GROUP BY TagID
print df.ix[d1:d2].swaplevel(0,1).ix[['AAPL', 'MSFT']] f1 f2 c1 sym date AAPL 2012-01-01 5 2 3 MSFT 2012-01-01 4 2 3 AAPL 2012-01-02 8 2 3 MSFT 2012-01-02 7 2 3 import pandas; pandas.__version__ '0.7.2'
ftp = ftplib.FTP(timeout=100)
br.open(url) # forms = [f for f in br.forms()] # print forms[1] # print forms[1].controls[0] br.select_form(nr = 1) br.form.set_all_readonly(False) br.form.set_value(firstname, nr=0) br.form.set_value(lastname, nr=1) br.form.set_value(email, nr=2) br.form.set_value(zip, nr=3) br.submit()
class LoggingProxyHandler(urllib2.ProxyHandler): def proxy_open(self, req, proxy, type): had_proxy = req.has_proxy() response = super(LoggingProxyHandler, self).proxy_open(req, proxy, type) if not had_proxy and req.has_proxy(): # log stuff here return response
values = ["this", "is", "your", "array"] result = " ".join(values)
module_list = ['module_a','module_b'] # Import our modules for name in module_list: try: __import__(name) if name in sys.modules: setattr(__main__, name, sys.modules[name]) except: print "FYI we failed importing {0}. It will not be available for you to use".format(name)
class Poi(object): ... @classmethod def load_from_txt(cls, source_file, source_dir): res = [] while (still more to find): # find level, coords, and points res.append(cls(level, coords, points)) return res
current_window = driver.current_window_handle for handle in driver.window_handles: if handle != current_window: driver.switch_to_window(handle) // perform actions // close window driver.switch_to_window(current_window)
import shutil shutil.copyfile('c:\\test_file.txt', 'c:\\test_file1.txt')
3>> bytes(int(x, 16) for x in '0xDE 0xAD 0xBE 0xEF'.split()) b'\xde\xad\xbe\xef'
import numpy as np array = [1, 20, 55, 33, 4555555, 1] arrayCompare = zip(array, array[1:] + [0], [0] + array) weights = [.7 * x + .15 * (y + z) for x, y, z in arrayCompare] avg = np.average(array, weights=weights)
a = last_epoch #last epoch recorded b = time.time() #current epoch time c = b - a #returns seconds days = c // 86400 hours = c // 3600 % 24 minutes = c // 60 % 60 seconds = c % 60
from BeautifullSoup import BeautifullSoup #... soup = BeautifulSoup(bufTwo) imgTags = soup.findAll('img') img = [tag['src'] for tag in imgTags]
>>> def f(a,b): ... """Adds a and b.""" ... return a+b ... >>> f.__doc__ 'Adds a and b.'
x = np.random.random_integers(0, 10, 20) print(x) # [10 10 5 4 2 10 8 9 10 2 2 0 7 3 8 6 4 1 3 10] dx = np.diff(x) print(dx) # [ 0 -5 -1 -2 8 -2 1 1 -8 0 -2 7 -4 5 -2 -2 -3 2 7] increases = dx[dx > 0] print(increases) # [8 1 1 7 5 2 7] print(increases.mean()) # 4.42857142857 print(increases.max()) # 8
from BeautifulSoup import BeautifulSoup #div1 is to be wrapped with div2 def wrap(doc,div1_id,div2_id) pool = BeautifulSoup(doc) for div in pool.findAll('div', attrs={'id':div1_id}): div.replaceWith('<div id='+div2_id+'>' + div.prettify() + '</div>' ) return pool.prettify() wrap(doc,'a2','wrapped')
>>> d = [{'type_id': 6, 'type_name': 'Type 1'}, {'type_id': 12, 'type_name': 'Type 2'}] >>> print [{'type':x['type_id'],'name':x['type_name']} for x in d] [{'type': 6, 'name': 'Type 1'}, {'type': 12, 'name': 'Type 2'}] >>>
s1 = 'AB\xfc' s2 = u'æ'.encode('cp1252')
<li>{{ cur_goal.description|safe }}</li>
import sys sys.setrecursionlimit(10000)
>>> date = "2013-03-15 05:14:51.327" >>> newdate = date.rpartition(':')[0] >>> print newdate 2013-03-15 05:14
\definecolor{VerbatimBorderColor}{rgb}{1,1,1}
In [71]: x = np.array([0.6, 0.4, 0.2, 0.0]) In [72]: y = np.array([-0.3, -0.1, 0.1, 0.3]) In [73]: order = np.argsort(x) In [74]: spline = UnivariateSpline(x[order], y[order], w=None, bbox=[None, None], k=1, s=0) In [75]: spline([0.15]) Out[75]: array([ 0.15])
with open("filename") as f: cols = [float(row.split("-")[-2]) for row in f.readlines()] print min(cols), max(cols), sum(cols) / len(cols)
with open('myfile.txt') as fin: lines = [line.split() for line in fin] lines.sort(key=lambda s: s[2:3]) # will give empty list if there is no 3rd word
def gradient(img, dx, dy, ksize): deriv_filter = cv2.getDerivKernels(dx=dx, dy=dy, ksize=ksize, normalize=True) return cv2.sepFilter2D(img, -1, deriv_filter[0], deriv_filter[1])
output = StringIO.StringIO(r.content)
from decimal import * getcontext().prec = 160 summan = 0 lista = ['1/4','1/3','1/5','1/6','1/7','1/9','1/10','1/11'] for x in lista: den, num = x.split('/') print Decimal(den) / Decimal(num)
import numpy as np from scipy.spatial import distance A = np.array([[1,23,2,5,6,2,2,6,2],[12,4,5,5],[1,2,4],[1],[2],[2]], dtype=object ) B = np.array([[1,23,2,5,6,2,2,6,2],[12,4,5,5],[1,2,4],[1],[2],[2]], dtype=object ) Aflat = np.hstack( A ) Bflat = np.hstack( B ) dist = distance.cosine( Aflat, Bflat )
>>> import subprocess >>> s = subprocess.Popen(['cowsay', 'hello'], \ stderr=subprocess.STDOUT, stdout=subprocess.PIPE).communicate()[0] >>> print s _______ < hello > ------- \ ^__^ \ (oo)\_______ (__)\ )\/\ ||----w | || ||
id_int = re.findall('r\d+',newstr) # ^ # should be: id_int = re.findall(r'\d+',newstr)
import Levenshtein Levenshtein.distance(songC, songA) # 0 Levenshtein.distance(songC, songB) # 11
from django.contrib import admin from django.db import models from django import forms from .models import Log class LogAdmin(admin.ModelAdmin): formfield_overrides = { models.DateTimeField: {'widget': forms.DateTimeInput(format='%Y-%m-%d %H:%M:%S.%f')}, } admin.site.register(Log, LogAdmin)
root = Tk() ... root.after(2000, callback) # call `callback` function in 2000 ms.
from turtle import * .... xpos = input("Enter the x position:") ypos = input("Enter the y position:") radius = input("Enter the radius:") shrink = input("Enter the shrink value") #convert above to int's, or turn into a function. ....
pip_install_save() { package_name=$1 requirements_file=$2 if [[ -z $requirements_file ]] then requirements_file='./requirements.txt' fi pip install $package_name && pip freeze | grep -i $package_name >> $requirements_file }
def report(self, year, month='default_value'): print year, month emptylist = []
>>> from collections import defaultdict >>> items = {'chai':1, 'apple':1, 'dom banana':1} >>> d = defaultdict(list) >>> for k,v in items.iteritems(): d[v].append(k) >>> {k:sorted(v) for k,v in d.iteritems()} {1: ['apple', 'chai', 'dom banana']}
{% if image.width > 100 %} {% thumbnail image 100x100 as thumb %} <img src="{{ thumb.url }}"/> {% endthumbnail %} {% else %} <img src="{{ image.url }}"/> {% endif %}
from distutils.core import setup setup( name='somemodule', scripts=['mymodule'] )
def rreverse(s): if s == "": return s else: return rreverse(s[1:]) + s[0]
import xlsxwriter workbook = xlsxwriter.Workbook('sample.xlsx') worksheet = workbook.add_worksheet() worksheet.write('A1', 2) worksheet.write('B1', '=A1*4') workbook.close()
sess.run("concat_0:0")
def f(a: str) -> Optional[str]: ...
# your plot code here def wrap_rcparams(f, params): def _f(*args, **kw): backup = {key:plt.rcParams[key] for key in params} plt.rcParams.update(params) f(*args, **kw) plt.rcParams.update(backup) return _f plt.rcParams['mathtext.default'] = 'it' ax1.draw = wrap_rcparams(ax1.draw, {"mathtext.default":'regular'}) # save the figure here
<field name="DOB" attrs="{'readonly':[('groups_id.category_id.name','=','Human Resource')]}"/>
Note 3: Avoid using properties for computationally expensive operations; the attribute notation makes the caller believe that access is (relatively) cheap.
import pdb; pdb.set_trace()
import theano import theano.tensor as T a = T.vector('X', dtype='int64') b = T.vector('Y', dtype='int64') c = a[b.nonzero()] g = function([a,b],c) x = np.array([5,3,2,3,4,6], dtype=int) y = np.array([0,0,1,0,0,1], dtype=int) print g(x,y)
from collections import OrderedDict diction ={'z': {'golf': 3, 'bowling': 9}, 'a': {'fed': 5, 'alvin': 10}, 'r': {'yell': 7, 'shout': 11}} a = OrderedDict(sorted(diction.items())) for key, subdict in a.items(): a[key] = OrderedDict(sorted(subdict.items()))
def vdir(obj): return [x for x in dir(obj) if not x.startswith('__')] >>> vdir(a) ['foo']
{<id>:<mac>,<id>:<mac>}
age = .01 print 'test%s' % str(age)[1:] if 0<age<1 else str(age)
sendPacket('\x5f\x00\x00\x00\x01\x00\x07\x01\xcc\x00\x00\x00\x1f\x8b')
from django.db import connection # ... cursor = connection.cursor() out_arg1 = "" args = [in_arg1, in_arg2, out_arg1] result = cursor.callproc('some_procedure', args) cursor.execute('SELECT @some_procedure_2') print(cursor.fetchall()) #print(args[2], result[2]) cursor.close() # ...
df.drop(set(drop_list) & set(df.columns), axis=1)
s = ["a1","a2","a1","a3","a2"] duplicates = [x for x in s if s.count(x) > 1] myl = list(set(duplicates)) print myl
>>> import pprint >>> x = [[[0]*3 for _ in range(3)] for _ in range(3)] >>> pprint.pprint(x) [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]
@app.task def determine_bmi(person_id): person = Person.objects.get(pk=person_id) person.compute_bmi()
from collections import deque def item_with_context(predicate, seq, before=0, after=0): q = deque(maxlen=before) it = iter(seq) for s in it: if predicate(s): return list(q) + [s] + [x for _,x in zip(range(after), it)] q.append(s)
self.factory.clients[24].transport.write("You are client 24!")
Alias /documentation /location/of/sphinx/html <Directory /location/of/sphinx/html> Order deny,allow Allow from all </Directory>
import threading q = 0 def f(): global q q += 1 print q threading.Timer(10, f).start() f()
Person.objects.exclude(id__in=Person.objects.filter(project=p, status__is_red=True).values(id))
p = subprocess.Popen("echo 'foo' && sleep 60 && echo 'bar'", shell=True) p.kill()
def handle_one(): do_stuff def handle_two(): do_stuff def handle_three(): do_stuff {'one': handle_one, 'two': handle_two, 'three': handle_three}[option]()
>>> import re >>> re.search(r'^Stream\:\s([^\n]+)', f.read(), re.MULTILINE).group(1) '//MainStream/testing_branch'
server.sendmail(email_from, email_to_list + email_cc_list, msg.as_string())
import re vals = { x:float(y) if '.' in y else int(y) for (x,y) in (re.findall(r'([^\d.]+)(\d[\d.e+-]*)',string2))} {'width_top': 100.0, 'Height_A': 132, 'lengthsimple': 1340.0}
import django from django.conf import settings settings.configure(INSTALLED_APPS=['mathfilters']) django.setup()
found_f = False try: opts, args = getopt.getopt(sys.argv[1:], "ho:v", ["help", "output="]) except getopt.GetoptError, err: print str(err) usage() sys.exit(2) for o, a in opts: if o == '-f': process_f() found_f = True elif ... if not found_f: print "-f was not given" usage() sys.exit(2)
class MyGroup(models.Model): name = models.CharField(max_length=100) class Membership(models.Model): group = models.ForeignKey(MyGroup) member = models.ForeignKey(User) invited_by = models.ForeignKey(User, related_name='invited_set')
array = (ctypes.c_ubyte * frameInfo.lHeight * frameInfo.lWidth * 1 ).from_address(ctypes.addressof(pBuffer.contents)) pBufY = np.ndarray(buffer=array, dtype=np.uint8, shape=(frameInfo.lHeight, frameInfo.lWidth, 1))
role, created = UserToUserRole.objects.get_or_create( from_user=current_user, to_user=user, role='follow')
from shapely.geometry import MultiPoint print MultiPoint(points).bounds
import matplotlib as mpl import matplotlib.pylab as plt import numpy as np np.random.seed(42) # create some toy data n, m = 2, 2 data = [] for i in range(n*m): data.append(np.random.rand(30)) # and do the plotting with mpl.rc_context(): mpl.rc("axes", color_cycle="red") fig, axes = plt.subplots(n, m, figsize=(8,8)) for ax, d in zip(axes.flat, data): ax.hist(d)
def perm_given_index(alist, apermindex): alist = alist[:] for i in range(len(alist)-1): apermindex, j = divmod(apermindex, len(alist)-i) alist[i], alist[i+j] = alist[i+j], alist[i] return alist
~ $ python Python 2.7 [...] >>> from IPython.Shell import IPShellEmbed >>> ipshell = IPShellEmbed() >>> ipshell() In [1]:
public class Dog { protected String whatISay = "Woof!"; public void speak(){ System.out.println(whatISay); } } public class Poodle extends Dog { public Poodle(){ whatISay = "Yap!"; } } public class Main { public static void main(String[] args){ Poodle fluffy = new Poodle(); fluffy.speak(); Dog dog = new Dog(); dog.speak(); } }
soupByEmail = soup.find(title="Email") if soupByEmail: profile['email'] = soupByEmail.a.string
>>> def search(d, baz): ... if baz in d: ... return d[baz] ... for value in d.values(): ... if isinstance(value, dict): ... ret = search(value, baz) ... if ret: ... return ret ... >>> >>> foo = {"foo" : {"bar": {"baz": "some value"}}} >>> search(foo, 'baz') 'some value' >>> search(foo, 'spam') >>>
def branch(list_): if len(list_) == 1: return list_[0] else: return { 0: branch(list_[:1]), 1: branch(list_[1:])}
alpha = list("bcdfghjklmnpqrstvwxyz") def cow_latinify_word(word): if word[0].lower() in alpha: lista = (word.lower()) return lista[1:] + lista[0] + "oo" else: return word + "moo" def cow_latinify_sentence(sentence): words = sentence.split(); return ' '.join([cow_latinify_word(word) for word in words])
>>> from itertools import combinations >>> L = ["one", "two", "three", "four"] >>> for R in combinations(L, len(L) - 1): ... print " and ".join(R) ... one and two and three one and two and four one and three and four two and three and four
from Tkinter import * from PIL import Image, ImageTk root = Tk() canvas = Canvas(root, width=500, height=500) canvas.pack() im = Image.open("image.png") cropped = im.crop((0, 0, 200, 200)) tk_im = ImageTk.PhotoImage(cropped) canvas.create_image(250, 250, image=tk_im) root.mainloop()
import lxml.etree as le import cStringIO content='''\ <font face="verdana" color="#ffffff" size="2"><a href="url">inside</a> something</font> ''' doc=le.parse(cStringIO.StringIO(content)) xpath='//font[@face="verdana" and @color="#ffffff" and @size="2"]/child::*' x=doc.xpath(xpath) print(map(le.tostring,x)) # ['<a href="url">inside</a> something']
In [21]: pd.set_option('display.precision',20) df[4] Out[21]: 0 0.0000003312355 1 0.0000003321525 2 0.0000003285718 3 0.0000003262279 4 0.0000003241068 5 0.0000003212358 6 0.0000003185517 7 0.0000003209795 8 0.0000003184297 9 0.0000003151493 Name: 4, dtype: float64
_console_out = ConsoleHandler()
>>> from collections import OrderedDict >>> d1 = OrderedDict((('a',1), ('b',2), ('c', 3))) >>> d2 = OrderedDict((('x',4), ('y',5), ('z', 6))) >>> d3 = OrderedDict(zip(d1.keys(), d2.values())) >>> d3 OrderedDict([('a', 4), ('b', 5), ('c', 6)])
dic=[{'a':1,'b':2,'c':3},{'a':9,'b':2,'c':2},{'a':5,'b':1,'c':2}] filt_dic = [] for d in dic: if not any(d[k] in seen[k] for k in d): filt_dic.append(d) for k in d: seen[k].add(d[k]) print(filt_dic)
>>> from datetime import datetime >>> x = datetime.now() >>> print x 2012-06-25 12:03:15.835467 >>> x.date() datetime.date(2012, 6, 25) >>> >>> print x.date() 2012-06-25 >>>
raw_matches = re.finditer('(([0-9a-f]{2}[:-]){5}[0-9a-f]{2})', line) if raw_matches: matches = [] for match in raw_matches: matches.append(match)
for k, v in inventory.items(): item_total = item_total + v print(v + ' ' + k)
from sqlalchemy import func items = session.query(Model, func.count().over().label('full_count')).all() obj = items[0].Model count = items[0].full_count
def my_filter(iterable): result=[] for i in iterable: result.append(i) if i==5: continue yield result result=[] idx = iter(range(0, 10)) for i in my_filter(idx): print i
[x[i:i+k] for i in range(0,n,k)]
data = (1,2,(3,4,(5,(6,4),2),1,2)) a=[] def getNumbers(t, depth): for i,item in enumerate(t): if type(item) is int: if i > 0: a.append(item) else: getNumbers(item, depth + 1) # call passing initial depth of 0. getNumbers(data, 0)
(?<=(?<!\d)\d{3})[^\d]+(?=\d{3}(?!\d))
nodetool getendpoints <keyspace> <table> <key value>
for filename in glob.glob(*.ext): asset_tag = filename.split(" ")[0]
np.savetxt('output.txt', array, header=str(dimension), comments='')
for page in pages: new_page= Page.objects.create( this= page.this, that=page.that, ... status= Page.DRAFT )
import itertools max_length = 10 result = (''.join(word) for word in itertools.chain.from_iterable( itertools.product(alphabet, repeat = i) for i in range(1, max_length + 1)))
[Text(i) for i in range(0, 5)]
address = 'Anthony Street 35' address_elem = driver.find_element_by_id("Address") for letter in address: time.sleep(random.randint(1, 3)) # sleep between 1 and 3 seconds address_elem.send_keys(letter)
>>> print (" ".join([strlist[2]] + [strlist[0]] + strlist[4:])) c a f g h i j
string = 'strings' new_D = {'r': 1, 's': 1, 't': 1, 'r' : 3, 'i' : 4 } sum_of_chars = 0 for character in string: if character in new_D: sum_of_chars += new_D[character] else: sum_of_chars += 1 # Default? print(sum_of_chars)
uvals, uidx = np.unique(w, return_inverse=True) output = np.zeros_like(uvals) np.add.at(output, uidx, z.ravel()) print uvals # [-4. -3. -2. -1. 0. 1. 2. 3. 4.] print output # [ 5. 14. 26. 40. 55. 40. 26. 14. 5.]
print('Progress: {}%'.format(solutions),flush=True,end="\r")
for gridY in range(0,4): print gridY for gridX in range(0,4): print gridX
clib = ctypes.cdll.LoadLibrary('some.so') c_foo = clib.c_foo c_foo.restype = ctypes.py_object
#passing in Webdriver instance and the command we want to execute into our helper method webdriverHelper(driver, command): #this 2 second sleep will get run each time time.sleep(2) if command == "click": driver.getElement.click() elif command== "getText": driver.getElement.getText() etc...............
def move (l, from_, to = 2): return l.insert (to, l.pop (from_) )
from django.shortcuts import redirect urlpatterns = patterns('', url(r'^$', views.main, name='main'), url(r'^login/$', views.login, name='login'), url(r'^app/$',views.app, name='app'), url(r'^.*$', redirect('/')), # <------------ )
form.post_body.data = page_content['body']
from collections import defaultdict my_word="apple" d = defaultdict(list) for a,b in zip(my_word,my_word[1:]): d[a].append(b)
import pandas as pd df = pd.read_excel(FILENAME)
def _build_structure(self, item) if item in list_of_nodes: return item else: return [self._build_structure(child) for child in item.children]
>>> if 1: ... print 1 ... 1
def _FindByTyping(self, searchColumn, prefix): pass
class Post(db.Document): demo = db.DateTimeField(default=datetime.date.today()) slug = db.StringFieldField(default=datetime.date.today())
import sys sys.path.append("/path/to/my/directory") import hello_world
cur = db.cursor() cur.execute(sql) timestamps = [] for rec in cur: timestamps.append(rec[0])
rows = list(myreader) totalrows = len(rows) for i, row in enumerate(rows): print("Row %d/%d" % (i+1, totalrows))
>>> from bs4 import BeautifulSoup >>> data = '<td rowspan="2" style="text-align: center;"><a href="/wiki/Glenn_Miller" title="Glenn Miller">Glenn Miller</a> &amp; His Orchestra</td>' >>> soup = BeautifulSoup(data, "html.parser") >>> tag = soup.td >>> tag.get_text() 'Glenn Miller & His Orchestra'
result = [' '.join(zip(*row)[0]) for row in data]
In [1]: import networkx as nx In [2]: G = nx.Graph() In [3]: G.add_edge(1,2,weight=7) In [4]: G.add_edge(2,3,weight=10) In [5]: for u,v,a in G.edges(data=True): print u,v,a ...: 1 2 {'weight': 7} 2 3 {'weight': 10}
>>> D1 = {'A':1,'B':2,'C':3,'D':4} >>> D2 = {'A':10,'B':20,'X':3} >>> {a:[b, c] for a, b in D1.items() for a1, c in D2.items() if a == a1} {'B': [2, 20], 'A': [1, 10]} >>>
def CarQueue(list): def __len__(self): return something_dubious() # if you're going to override len, make sure to overide `__iter__` # and `__getitem__` class CarWash(object): def __init__(self): self._queue = CarQueue([1, 2, 3]) @property def queue(self): return self._queue
def f(x): return 2*x+1 a = [ 1 ] while len(a) < 8: x = a[-1] y = f(x) a.append(y) a => [1, 3, 7, 15, 31, 63, 127, 255]
aj@localhost:~/so/python# cat date2.py from datetime import date class Year(date): def __new__(cls, year): return super(Year, cls).__new__(cls, year, 1, 1) def __str__(self): return self.strftime('%Y') y=Year(2011) print str(y) aj@localhost:~/so/python# python date2.py 2011
mystops = HashSet(Arrays.asList(['a','b','c'])) result = StopFilter(True, result, mystops)
def remove_last_odd(numbers): rnumbers = numbers[::-1] for n in rnumbers: if n % 2 != 0: rnumbers.remove(n) break return rnumbers[::-1]
In [1]: def foo(x): ...: x += 3 ...: x += 4 ...: return x ...: In [2]: import inspect In [3]: inspect.getsourcelines(foo) Out[3]: (['def foo(x):\n', ' x += 3\n', ' x += 4\n', ' return x\n'], 1) In [4]: source_code = _ In [6]: print(''.join(source_code[0])) def foo(x): x += 3 x += 4 return x
pos1 = np.array([[0,0,0],[2,2,2]]) pos2 = np.array([[1,1,1],[3,3,3]]) for point_pairs in zip(pos1, pos2): xs, ys, zs = zip(*point_pairs) ax.plot(xs, ys, zs)
seen = {} for x in my_objects: if x.id in seen: seen[x.id].score += x.score else: seen[x.id] = x my_objects[:] = seen.values()
est = timezone('US/Eastern') cst = timezone('US/Central') curtime = cst.localize(datetime.datetime.now()) est_curtime = curtime.astimezone(est).strftime("%a %b %d %H:%M:%S %Z %Y")) def run(self): print "%s says Hello World at time: %s" % (self.getName(), est_curtime)
def getTables(self, db=None): db = db or self._db
def override_setup(exp, args): opts = vars(args) for param in ['param1', 'param2']: if opts[param] is None: continue try: setattr(exp, param, opts[param]) except Exception as e: print e
[S+str(i) for i in range(1,11) for S in "ABCD"]
class C(object): def __new__(cls, val): if val == 5: return 'five' else: return super(C, cls).__new__(cls) c1 = C(3) print c1 c2 = C(5) print c2
from PIL import Image from numpy import eye arr = (eye(200)*255).astype('uint8') # sample array im = Image.fromarray(arr) # monochromatic image imrgb = Image.merge('RGB', (im,im,im)) # color image imrgb.show()
df['v_6'] = df['v_6'].replace(-77, np.NaN)
[(key1, key2) for key1, value1 in dicKeyEnc.items() for key2, value2 in dicKeyDec.items() if value1 == value2]
<input name="username" id="sender-email" type="text" placeholder="Username" class="form-control email"> <input name="password" type="password" class="form-control" placeholder="Password" id="user-pass" >
In [8]: course_name Out[8]: 'Post Graduate Certificate Programme in Retail Management (PGCPRM) (Online)' In [9]: print re.sub('\([A-Z]+\)\s*', '', course_name) Post Graduate Certificate Programme in Retail Management (Online) In [17]: print re.search('\(([A-Z]+)\)\s*', course_name).groups()[0] PGCPRM
pygame.draw.polygon(window, (0, 0, 0), ((0, 100), (0, 200), (200, 200), (200, 300), (300, 150), (200, 0), (200, 100)))
if FormSet.IsEmpty(CurrentForm, "ADD_COMP1_ADDRESS") and \ FormSet.IsEmpty(CurrentForm, "ADD_COMP2_ADDRESS") and \ FormSet.IsEmpty(CurrentForm, "ADD_COMP3_ADDRESS") and \ FormSet.IsEmpty(CurrentForm, "ADD_COMP4_ADDRESS") and \ FormSet.IsEmpty(CurrentForm, "ADD_COMP5_ADDRESS") and \ FormSet.IsEmpty(CurrentForm, "ADD_COMP6_ADDRESS"): Rule.Violated = True else: Rule.Violated = False
>>> [i for i in l if 'Delta' in i] ['Delta-Espilon Phi', 'Delta&Epsilon Ny', 'Delta Gamma Xeta Theta 53422']
$ curl https://remote.path/script.py | python - arg1 arg2 arg3
from calendar import monthrange
def askIP(): TheIP = raw_input('Okay, what is it? E.X 112.13.141.9: ') if AskYesNo('Are you sure '+TheIP+' is the correct IP? You will not be able to change this later!!') != True: print('Ok, get it right this time!'); return askIP() else: return TheIP
def fib(): a, b = 0,1 #initially a=0 and b=1 while True: #infinite loop term. yield b #generate b and use it again. a,b = b, a + b #a and b are now own their new values. for i in fib(): #generate i using fib() function. i equals to b also thanks to yield term. print(i) #i think you known this if i>100: break #we have to stop loop because of yield.
for model, category in self.current_session.query(Model, Category).join(Category).distinct(): print model.category_id, category.name
to = [] p3 = email.split(',') p4 = rname.split(',') for i,em in enumerate(p3): recipient = {'email': em, 'name': None, 'type': to} if len(p4) > i: recipient = p4[i] to.append(recipient)
import rpy2.robjects as ro ro.globalenv['res'] = res_frompy ro.globalenv['log2FoldChang'] = log2FoldChang_frompy ro.globalenv['padj'] = padj_frompy ro.r('with(res, plot(log2FoldChange, padj))')
from django.db.models import Count Device.objects.values('build').annotate(count=Count('pk')) # -> [{'build': '1', 'count': 3}, {'build': '2', 'count': 4}]
import StringIO import sys sys.stdout = StringIO.StringIO() print "foo", "bar", "baz" s = sys.stdout.getvalue()
cursor.execute("""INSERT INTO `User`(`UID`, `IP`) VALUES(%s,%s);""", params) print("affected rows = {}".format(cursor.rowcount))
# php -r 'echo utf8_decode("test \xc3\xb6");' test ö
>>> tokens = [[y for y in (re.sub(r'[^A-Za-z0-9]+', '', x) for x in sublst) if y] for sublst in texts] >>> pprint.pprint(tokens) [['comfortable', 'questions', 'menu', 'items', 'time', 'lived', 'there', 'could', 'easily', 'direct', 'people', 'appropriate', 'menu', 'choices', 'given', 'allergies'], ['sure', 'giving', 'wheat', 'fiction', 'free', 'foodthis', 'place', 'clean']]
def write(self, file, encoding="us-ascii"): assert self._root is not None if not hasattr(file, "write"): file = open(file, "wb") if not encoding: encoding = "us-ascii" elif encoding != "utf-8" and encoding != "us-ascii": file.write("<?xml version='1.0' encoding='%s'?>\n" % encoding) self._write(file, self._root, encoding, {})
for doc in coll.find(): # .find() returns cursor which is meant for iteration print(doc["oxigeno"]) # doc is a python dictionary representing the returned BSON document
import lxml.etree tree = lxml.etree.parse("http://someurl.com") sites = tree.xpath("//site") for site in sites: siteid = site.find("siteid").text print siteid
from selenium import webdriver from selenium.webdriver.common.keys import Keys driver = webdriver.Firefox() driver.get("http://www.python.org") assert "Python" in driver.title elem = driver.find_element_by_name("q") elem.send_keys("pycon") elem.send_keys(Keys.RETURN) assert "No results found." not in driver.page_source driver.close()
d = datetime.datetime.strptime("2011-10-13", "%Y-%m-%d") print d.date() >> 2011-10-13
def customresize(array, new_size): return (array._type_*new_size).from_address(addressof(array))
[x for x in xrange(First_Number, Last_Number+1) for y in xrange(Repeat_Count)]
someList = [8, 9, 7, 3, 1] someDict = {1:2, 2:3, 3:4, 4:5, 5:6} intersection = [i for i in someList if i in someDict] print(intersection)
count = 0 one_hour = 60 * 60 file = open('logFile.log', 'r') while 1: where = file.tell() line = file.readline() if not line: count = count + 1 if count >= one_hour: break time.sleep(1) file.seek(where) else: print line count = 0 # Here needs to reset the time couter!
from itertools import izip, product def find_continuous_items(data): for p in product(*data): if all(b-a==1 for a, b in izip(p, p[1:])): yield p nested = [[1,7,13], [2,5,8], [3, 6, 9]] print list(find_continuous_items(nested)) #[(1, 2, 3), (7, 8, 9)]
class ListAction(argparse.Action): def __call__(parser, namespace, values, option_string=None): setattr(namespace, 'list', values[0]) do_something_completely_different()
description "watch folder service" author "Jonathan Topf" start on startup stop on shutdown # Automatically Respawn: respawn respawn limit 99 5 script HOST=`hostname` chdir /home/ubuntu/Dropbox/Render\ Farm\ 1/appleseed/bin exec /usr/bin/python ./watchfolder.py -t ./appleseed.cli -u $HOST ../../data/ >> /home/ubuntu/bin/ec2_server.log 2>&1 echo "watch_folder started" end script
<script type="text/javascript"> var CONFIG = {}; CONFIG.GRID_NAME = "{{ your name }}"; </script>
>>> list_ = ['a','b','c','d','e','f','g','h'] >>> n = 3 # group size >>> m = 1 # overlap size >>> [list_[i:i+n-m+1] for i in xrange(0,len(list_), n-m)] [['a', 'b', 'c'], ['c', 'd', 'e'], ['e', 'f', 'g'], ['g', 'h']]
from decimal import Decimal # second derivative of a function def diff2(f, x, h=1E-6): x, h = Decimal(x), Decimal(h) r = (f(x - h) - 2 * f(x) + f(x + h)) / Decimal(h * h) return r
>>> x,y = 4,2 >>> (' '*y).join('@'*x) '@ @ @ @' >>> >>> x,y = 2,4 >>> (' '*y).join('@'*x) '@ @'
k = 0 for i in s: if k == n-1: print i + '\n' k = 0 else: print i k += 1
from threading import Thread from time import sleep def t_func(): print "Sleeping" sleep(5) print "Done Sleeping" def test(): t = Thread(target=t_func) t.start() >>> test() Sleeping Done Sleeping
from django.views.generic.base import RedirectView url(r'^$', RedirectView.as_view(url='/home/')),
for myid in ids_high: getgeom = FloodHazard.objects.get(id=myid).geom response_high = list(BuildingStructure.objects.filter(geom__intersects=getgeom).values( 'brgy_locat','bldg_type','bldg_name').annotate(counthigh=Count('brgy_locat'))) for entry in response_high: entry['type'] = 'high' to_json.append(response_high)
>>> print json.dumps('růže', ensure_ascii=False) "růže"
http://nbviewer.ipython.org/gist/rsignell-usgs/aa12c2b5e8a448bda780?flush_cache=true
[[s, c] for s, c in this_amino if s == min_score]
array = [5,2,3,12,1,6] highest_pos = 0 i=0 for i in range(len(array)): if array[i] > array[highest_pos]: highest_pos = i i+=1 print(array[highest_pos]) temp = array[-1] array[-1] = array[highest_pos] array[highest_pos] = temp print(array)
>>> from decimal import * >>> getcontext().prec = 50 >>> Decimal(1)/Decimal(7) Decimal('0.14285714285714285714285714285714285714285714285714')
>>> print "\x11" � >>> print ["\x11"] ['\x11'] >>> print repr("\x11") '\x11'
out_file = open(outp, "w") sub = subprocess.call(['sed', 's/\"//g', inp], stdout=out_file )
from itertools import groupby result = [max(group) for r, group in groupby(your_list, lambda x: x == 1) if not r]
new_df = my_df[my_df['Column'].isin(selected_items)]
if M=UDV*: then: M^-1 = (UDV*)^-1 = (V*^-1)(D^-1)(U^-1)
mousebeingpressed = False While True: for event in pygame.event.get(): if event.type == MOUSEBUTTONDOWN: mousebeingpressed = True if event.type == MOUSEBUTTONUP: mousebeingpressed = False if event.type == MOUSEMOTION and mousebeingpressed == True: #do stuff
"""S.O. 12766628 Usage: script.py voucher add <code> <credits> [<points>] script.py voucher del <code> """ from docopt import docopt if __name__ == '__main__': arguments = docopt(__doc__, version='S.O. 12766628') print(arguments)
>>> import platform >>> platform.system() 'Windows'
def initUI(self): self.outputBox = Text(self.parent, bg='black', height= 10, fg='green', relief=SUNKEN, yscrollcommand='TRUE') self.outputBox.pack(fill='both', expand=True) path = "../img/Stalin.jpeg" self.img = ImageTk.PhotoImage(Image.open(path)) panel = Label(self.parent, image = self.img) panel.pack(side = "bottom", fill = "both", expand = "yes")
from jinja2.nodes import Extends env = Environment(loader = FileSystemLoader(['_templates'])) template_source = env.loader.get_source(env, 'test.html')[0] parsed_template = env.parse(template_source) extends_node = parsed_template.find(Extends) parent_name = extends_node.template.value parent_template = env.get_template(parent_name)
Ask pip to directly provide the list of distributions Script myfreeze.py import pip with open("requirements.txt", "w") as f: for dist in pip.get_installed_distributions(): req = dist.as_requirement() f.write(str(req) + "\n")
{ keyName1 : value1, keyName2: value2, keyName3: [val1, val2, val3] }
[1, 2, 3]
new_dict = { k: len(v) for k, v in old_dict.iteritems()}
x.__enter__() try: ... finally: x.__exit__()
env_variables: APPLICATION_SECRET: 'secret_goes_here'
outdf = [] for myfile in myfiles: tdf = read_csv(myfile) #Do some annotations tdf['Class'] = os.path.basename(myfile).split[0] .............. #----------------- outdf.append(tdf) outdf = concat(outdf)
def show_most_informative_features(vectorizer, clf, n=20): feature_names = vectorizer.get_feature_names() coefs_with_fns = sorted(zip(clf.coef_[0], feature_names)) top = zip(coefs_with_fns[:n], coefs_with_fns[:-(n + 1):-1]) for (coef_1, fn_1), (coef_2, fn_2) in top: print "\t%.4f\t%-15s\t\t%.4f\t%-15s" % (coef_1, fn_1, coef_2, fn_2)
df.to_csv(path, mode='a')
x = [1, 2, 3, 4, 5] foo(*x) # calls foo(1, 2, 3, 4, 5)
import numpy as np b='191.250\t0.00\t0\t1\n191.251\t0.00\t0\t1\n191.252\t0.00\t0\t1\n' a = np.array([[float(j) for j in i.split('\t')] for i in b.splitlines()])
from decimal import * print(Decimal(8.0) / Decimal(3.0))
def playAudioFile(request): fname="C:\\test\\audio\\audio.mp3" f = open(fname,"rb") response = HttpResponse() response.write(f.read()) response['Content-Type'] ='audio/mp3' response['Content-Length'] =os.path.getsize(fname ) return response
_list = range(50,101,2) print _list #[50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]
${var} Set Variable x: 647, y: 1174 ${x} Fetch From Left ${var} , # now x should be "x: 674" ${x} Fetch From Right ${x} ${SPACE} # and now it should be "674" ${y} Fetch From Right ${var} y:${SPACE}
int(3.87 / 2)
df = pd.read_csv('temp.csv') df['DATE'] = pd.to_datetime(df['DATE'], format='%m%d%Y') df['EPOCH'] = pd.to_timedelta((df['EPOCH'].astype(int) * 5).astype('timedelta64[m]')) df['DATE_TIME'] = df['DATE'] + df['EPOCH']
set PATH=%PATH%;C:\Python34
for (String s: System.getProperty("java.library.path").split(";")) { String pydName = s + "/mypythonlib.pyd"; File pydFile = new File(pydName); if (pydFile.exists()) { System.load(pydName); break; } }
class Ball: def spawn(self): self.sinceSpawn = 0 def update(self, dt): if not gamePaused: self.sinceSpawn += dt if self.sinceSpawn >= BALL_WAIT_TIME: pass #Do something here
>>> f = lambda s: re.sub(r'([^a-zA-Z])', lambda x: '&#{};'.format(ord(x.group(0))), s) >>> f("<hi>") '&#60;hi&#62;' >>> f("<*>") '&#60;&#42;&#62;'
>>> import re >>> sample = "[xy][abc]" >>> re.findall(r'\[([^]]*)\]',sample) ['xy', 'abc']
In [76]: df[~df['curv_typ'].isin(['PYC_RT', 'YCIF_RT'])] Out[76]: Empty DataFrame Columns: [curv_typ, maturity, bonds, 2015M06D19, 2015M06D18, 2015M06D17] Index: []
@app.route('/') def aws_api_route_puppet_apply(ip=None): def generate(): for row in somemethod(var1,var2,var3): yield row + '\n' return Response(generate(), mimetype='application/json')
import re def findall(string, chars) m = re.search("[%s]" % chars, string, re.DOTALL) if m: return m.start() return -1
boost::python::class_<MyClass>("MyClass") .setattr("__hash__", boost::python::object());
def __init__(self, corpus=None, num_topics=100, id2word=None, distributed=False, chunksize=2000, passes=1, update_every=1, alpha='symmetric', eta=None, decay=0.5, offset=1.0, eval_every=10, iterations=50, gamma_threshold=0.001)
with open('test_file.txt') as fin: csvin = csv.reader(fin, delimiter='\t') has_fantastic = (row for row in csvin if any('fantastic' in col.lower() for col in row[1:])) ids = [row[0] for row in has_fantastic]
class Title(ndb.Model): title = ndb.StringProperty() lang = ndb.StringProperty() class Article(ndb.Model): titles = ndb.StructuredProperty(Title, repeated=True)
iter = 0 for line in file: itermatch = re.search('Iteration \d+',line) if itermatch: iter = itermatch.group() else: scorematch = re.search(': [0-9.]+',line) if scorematch: dict[iter]= scorematch.group()
In [25]: print str(x).decode('raw_unicode_escape') (u'abc/αβγ',)
file_list = os.listdir('.') for each in file_list: if each[-4:] != '.exe': file_list.pop(file_list.index(each)) for each in file_list: name = each.split('_')[0] name += '.exe' os.rename(each, name)
def special_strings_count(strings): return len([x for x in strings if len(x) > 1 and x[0] == x[-1]]) strings = [] # your list of strings print special_strings_count(strings)
### test_nested.py ### import timeit def foo(): def bar(): pass pass print(timeit.timeit("foo()", setup="from __main__ import foo")) ### test_flat.py ### import timeit def foo(): pass def bar(): pass print(timeit.timeit("foo()", setup="from __main__ import foo, bar")) ### Shell ### ✗ python3 ./test_flat.py 0.42562198638916016 ✗ python3 ./test_nested.py 0.5836758613586426
import matplotlib.pyplot as plt h = plt.plot([0, 0, 1, 1], [0, 1, 1, 0], 'bo') h[0].set_clip_on(False) plt.show()
input_file = open('f1', 'rb') contents = input_file.read() #.... data = contents[offset+8:size+offset] #for example output_file = open('f2', 'wb') output_file.write(data)
open(file, mode='r', buffering=-1 ....)
for key in bucket.list(prefix='/your/directory/'): key.delete()
def get_fun(fn): return '.'.join([fn.__module__, fn.__name__])
try: module = __import__("actions.%s" % a, globals(), locals(), fromlist=["*"]) # What goes here? # let's try to grab and instanciate objects for item_name in dir(module): try: new_action = getattr(module, item_name)() # here we have a new_action that is the instanciated class, do what you want with ;) except: pass except ImportError: pass
def work(arg): i, n = arg mask = var1['halo_id'] == n newtbdata = tbdata1[mask] hdu = pyfits.BinTableHDU(newtbdata) hdu.writeto(('/home/Documments/file_{0}.fits').format(i)) if __name__ == '__main__': pool = Pool(processes=4) pool.map(work, enumerate(halo_param.strip())) pool.close() pool.join()
variables = {'VarX': 700}
import IPython # lots of code # even more code IPython.embed()
class People: def __init__(self, personName, personAge): self.personName = personName self.personAge = personAge def displayPerson(self): print "Name : ", self.personName, ", Age: ", self.personAge personName = input('Enter your name: ') personAge = input('Enter your age: ') person1 = People(personName, personAge) person1.displayPerson()
from django.db import connections, transaction from django.core.cache import cache # This is the memcache cache. def flush(): # This works as advertised on the memcached cache: cache.clear() # This manually purges the SQLite cache: cursor = connections['cache_database'].cursor() cursor.execute('DELETE FROM cache_table') transaction.commit_unless_managed(using='cache_database')
myFakeFile = StringIO.StringIO() wtr = csv.DictWriter( myFakeFile, headings ) ... myFakeFile.getvalue()
from tkinter import * def func(value): print(value) root = Tk() options = ["1", "2", "3"] var = StringVar() drop = OptionMenu(root, var, *options, command=func) drop.place(x=10, y=10)
article.find_all(lambda x: x.name == 'ul' and x.find_parent("ul") is None)
educ_list = [] data = {x : [y, z] for x,y,z in zip(inst, degree, major)} for i in itertools.izip_longest(inst, degree, major): educ_list.append(i) print educ_list
with open("font.txt") as fi: lines = fi.readlines() for character in tx: var1 = int(cd[character]) ra1 = (var1 * int(hi)) ra1n = (ra1 + int(hi)) print(''.join(lines[ra1:ra1n]), end='')
In [53]: strs="# Nmap done at Tue Nov 27 10:09:18 2012 -- 512 IP addresses (17 hosts up) scanned in 143.58 seconds" In [55]: re.findall("(\d+)\s+IP address",strs) Out[55]: ['512'] In [56]: re.findall("(\d+)\s+hosts up",strs) Out[56]: ['17']
tableView.closePersistentEditor(model.index(0, 0))
import csv D = {'Jim': ['1', '9', '5'], 'kim': ['8', '6', '0'], 'lim': ['10', '6', '1'], 'slim': ['8', '8', '2'], 'pimp': ['9', '9', '1'], 'sim': ['8', '7', '1']} with open('file.csv', 'w', newline='') as csvfile: writer = csv.writer(csvfile) for name, items in D.items(): writer.writerow([name] + items)
def detail(request, some_param): # [...]
class SomeClass: def __init__(self): from Smith import John self.imp=John def run(self, args): self.imp.dosmth()
def edit_notification(request): foo = request.GET.get('foo') ...
y[i+1] = y[i] + 1.0/6.0 * ( k1 + 4.0*k2 + k3 ) k1 = h * f(x[i], y[i]) k2 = h * f(x[i] + h / 2, y[i] + k1 / 2 ) k3 = h * f(x[i] + h, y[i] - k1 + 2 * k2 )
for line in codecs.open("filename", "rt", "utf32"): print line
from gi.repository import Gtk, GLib class MyWindow(Gtk.Window): def __init__(self): Gtk.Window.__init__(self) self.set_default_size(50, 20) label = Gtk.Label("test") self.add(label) GLib.timeout_add_seconds(3, label.destroy) win = MyWindow() win.connect("delete-event", Gtk.main_quit) win.show_all() Gtk.main()
my_list = [y for y in my_list if not any(meets_requirement(x,y) for x in my_list)]
In [40]: df.index = df.index.to_datetime() In [41]: df.index Out[41]: <class 'pandas.tseries.index.DatetimeIndex'> [2013-04-02 19:42:00.474000, ..., 2013-04-02 19:42:58.225000] Length: 13, Freq: None, Timezone: None
import ggplot as gg mtcars = gg.mtcars gg.qplot(mtcars.wt, mtcars.mpg) + gg.geom_smooth(color="blue")
pip install configobj
import os import json from azure import * from azure.storage import * from azure.storage.table import TableService, Entity table_service = TableService(account_name='[account-name]', sas_token='[sas-token]') list = table_service.query_entities('[table-name]', top=100)
>>> sentence = "The fat cat sat on the mat" >>> words = sentence.lower().split() >>> word_to_find = "the" >>> [pos for pos, word in enumerate(words, start=1) if word == word_to_find] [1, 6]
with open('trash.txt', 'r') as fin: for line in sorted(fin, key=lambda x:x.split(',')[1]): print line
import re a = 'hi foo hi bar hi ho' old_stuff = "hi" new_stuff = "yo" [a[:m.start()] + new_stuff + a[m.end():] for m in re.finditer(old_stuff, a)]
In [2]: df = DataFrame(np.random.rand(5,3), index=[0, 1, 2, 4, 5]) In [3]: df.index.to_series() Out[3]: 0 0 1 1 2 2 4 4 5 5 dtype: int64 In [4]: s = df.index.to_series() In [5]: 1./s.diff().mean() Out[5]: 0.80000000000000004
In [4]: for i in p.finditer(s1): ...: i.group(1) ...: ...: Out[4]: '[CC] '
NAMES = 'value ref pre'.split() for key, values in x.iteritems(): valstrs = ['%s:%s' % (name, value) for name, value in zip(NAMES, values) if value] print ' '.join(valstrs)
import warnings def fxn(): warnings.warn("deprecated", DeprecationWarning) with warnings.catch_warnings(record=True) as w: # Cause all warnings to always be triggered. warnings.simplefilter("always") # Trigger a warning. fxn() # Verify some things assert len(w) == 1 assert issubclass(w[-1].category, DeprecationWarning) assert "deprecated" in str(w[-1].message)
>>> import pickle >>> import ast >>> pickle.loads(ast.literal_eval("'''" + cookies.values()[0] + "'''")[1:-1]) {'pid': u'NTA2NjU0OTU4MDc5MTgwOA==', 'type': 'video/mp2t', 'variant': 'corrected', 'mode': u'live', 'format': 'm3u8'}
data2['merged'] = data2['dashcoin'] # LEAVE OUT FIRST ELEMENT for coin in coins[1:]: data2['merged'] = data2['merged'].merge(data2[coin], on='timestamp')
c.coords(x)
import itertools c1 = [10, 45, 50, 75, 90] c2 = [15, 25, 30, 65, 80] print c1, c2 for i in range(1, 5): for c in itertools.combinations(c1, i): mc1 = sorted(list(set(c1).difference(set(c)))) mc2 = sorted(list(set(c2).union(c))) print mc1, mc2
import matplotlib.pyplot as plt import networkx as nx G = nx.Graph() G.add_edge(1,2,weight=7) G.add_edge(2,3,weight=42) labels = {} for u,v,data in G.edges(data=True): labels[(u,v)] = data['weight'] pos = nx.spring_layout(G) nx.draw(G,pos) nx.draw_networkx_edge_labels(G, pos, edge_labels=labels) plt.show()
t = Tkinter.Text(root) while some_condition: s = p.readline() # get subprocess output t.insert(END, s)
>>> humanTime = '2012/06/10T16:36:20.509Z' >>> datetime.datetime.strptime(humanTime[:19], "%Y/%m/%dT%H:%M:%S") datetime.datetime(2012, 6, 10, 16, 36, 20)
select el.DATE, w.wORKER, e.EVENT, r.REGISTRATION from EVENTS_LIST as el join WORKERS as w on el.WORKER=w.ID join EVENTS as e on el.EVENT=e.ID join REGISTRATION as r on el.REGISTRATION_METHOD=r.ID
Open url in a new page (“tab”) of the default browser, if possible, otherwise equivalent to open_new().
int keyToPress = ...; int timeToPress = ...; Robot r = new Robot(); r.keyPress(keyToPress); Thread.sleep(timeToPress); r.keyRelease(keyToPress);
from sqlalchemy import event from sqlalchemy import DDL event.listen( Article.__table__, "after_create", DDL("ALTER TABLE %(table)s AUTO_INCREMENT = 1001;") )
from collections import OrderedDict import urllib urllib.urlencode(OrderedDict([('k1', 'v1'), ('k2', 'v2'), ('k3', 'v3')])) # Out: 'k1=v1&k2=v2&k3=v3'
["not " * (1 - x) + y.obj_dict['self'].get_topic() for x,y in zip(comb, self.parents)]
import time # Repeat forever while True: post_to_twitter() # Call your function # Sleep for 60 seconds / minute * 30 minutes time.sleep(60 * 30)
while not q.empty(): sleep(1)
from subprocess import Popen p = Popen(['/full/path/to/ppshelper', '-sms', '15062929382','warning']) p.terminate()
>>> bin_avg[index] = np.average(items_in_bin, weights=my_weights)
sum1, sum2 = sum(x[1] for x in my_list), sum(x[2] for x in my_list)
import time endTime = time.time() + 60 for t in threads: t.join(endTime - time.time()) t.event.set()
def limited_cumsum(x, limit): y = [] sm = 0 for item in x: sm += item if sm > limit: return y y.append(sm) return y
def open_spider(self, spider): self.file = codecs.open('%s_outputchiness.json' % spider.name, 'w', encoding='utf-8') def process_item(self, item, spider): line = json.dumps(dict(item)) + "\n" self.file.write(line.encode('utf-8').decode("unicode_escape")) def spider_closed(self, spider): self.file.close()
plt.plot(data0.x, data0.y) for target in [data1, data2]: dx = np.mean(np.diff(data0.x.values)) shift = (np.argmax(signal.correlate(data0.y, target.y)) - len(target.y)) * dx plt.plot(target.x + shift, target.y)
import winsound import Tkinter import threading def create_frame(): MessFrame = Tkinter.Tk() MessFrame.geometry('800x400+200+200') MessFrame.title('Main Frame') Framelabel = Tkinter.Label(MessFrame, text='Text Here', fg= 'red') Framelabel.place(x=10,y=10) MessFrame.mainloop() t1 = threading.Thread(target=create_frame) t1.start() winsound.Beep(500,1000)
df.loc[:, 'new_col'] = df.A.map(lambda x: x[0])
states = [gtk.STATE_NORMAL, gtk.STATE_ACTIVE, gtk.STATE_PRELIGHT, gtk.STATE_SELECTED, gtk.STATE_INSENSITIVE] for state in states: button.modify_bg(state, gtk.gdk.color_parse("Green"))
from subprocess import Popen, PIPE sh = Popen("sudo %s" % bf_path, shell=True, stdout=PIPE, stderr=PIPE)
unicodeCheckBox = QCheckBox( u'A \u2295 B' )
l = ["My", "turtle", "is", "old"] l.sort(key=len, reverse=True) # -> ['turtle', 'old', 'My', 'is']
if start <= x <= end:
import os, stat info = os.stat(dirpath) uid, gid = info[stat.ST_UID], info[stat.ST_GID]
if [ -z "$VIRTUAL_ENV_DISABLE_PROMPT" ] ; then # ... fi
open(filename, 'w').close()
with open('data.txt') as inf: for line in inf: num = line.strip() if num: fn = '%s.txt' %num with open(fn, 'w') as outf: outf.write('contains one line of text "%s"\n' %num)
(\d+(st|nd|rd|th)) \w+\b
In [44]: cols = ['a', 'b', 'b', 'a', 'c'] df[cols] Out[44]: a b b a c 0 1 4 4 1 6 1 3 2 2 3 4 2 4 1 1 4 5 [3 rows x 5 columns]
>>> import operator >>> coco = operator.attrgetter('co_code', 'co_consts') >>> coco((lambda x: x+2).__code__) == coco((lambda x: x+2).__code__) True >>> coco((lambda x: x+2).__code__) == coco((lambda x: x+1).__code__) False >>> def foo(y): ... return y + 2 ... >>> coco((lambda x: x+2).__code__) == coco(foo.__code__) True
for row in readstream: row[0] = i outwriter.writerow(row) i += 1 if i % 2 == 0: outwriter.writerow([]) i += 1
data = [2.34, 3.45, 4.56, 1.23, 2.34, 7.89] print [(a + b) / 2 for a, b in zip(data[::2], data[1::2])]
legend.SetHorizontalAlignment(vtk.vtkChartLegend.CUSTOM) legend.SetVerticalAlignment(vtk.vtkChartLegend.CUSTOM) legend.SetPoint(200, 200) # position in window coordinates
from django.contrib.comments.signals import comment_was_posted def thank_user(sender, comment=None, request=None, **kwargs): messages.add_message( request, messages.SUCCESS, 'You comment has been posted!' ) comment_was_posted.connect(thank_user)
mylist = ['XXX' if v == 'abc' else v for v in mylist]
cv.acquire() while not an_item_is_available(): cv.wait() get_an_available_item() cv.release()
template = '<input name="#key#" value="#value#">' html = template data = {key:value,key:value} for key in data.keys(): html = html.replace("#key#", key).replace("#value#", data[value]) + "\n" html = html + template #there's an extra template line here that you'll have to get rid of. html = "\n".join(html.split("\n")[0:-1])
import numpy as np df['Dcount'] = np.where(df['A']=='foo', sum((df.A=='foo') & (df.D==2)), np.NaN) #In [34]: df #Out[34]: # A D Dcount #0 foo 2 2 #1 foo 4 2 #2 foo 4 2 #3 foo 2 2 #4 bar 5 NaN #5 bar 4 NaN #6 bar 3 NaN #7 bar 2 NaN
from copy import deepcopy y = deepcopy(x)
client.get('/tracks', q='Harry Connick Jr', tags!='Rock and Roll')
url(r'^api/(?P<url>[:\/\.\w]+)/$', 'qlu_app.views.api', name='api'),
class MyClass(object): """ Documentation for MyClass goes here. """ def __init__(self): """ doc string """ i = MyClass() print i.__doc__ # same as MyClass.__doc__
def save(self, *args, **kwargs): serializer = ChatMessageSerializer(self) message_endpoint = ''.join(self.firebase_key) client.patch(message_endpoint, serializer.data)
with concurrent.futures.ProcessPoolExecutor() as e: @functools.lru_cache def work(*args, **kwargs): return e.submit(slow_work, *args, **kwargs)
import random num = int(input('Your number: ')) numC = random.randint(1, 100) tries = 1 lowerLimit=1 upperLimit=100 while numC != num: if numC > num: print(numC, 'Less') upperLimit = numC+1 else: print(numC, 'More') lowerLimit = numC-1 tries += 1 numC = random.randint(lowerLimit, upperLimit) print(numC, 'Computer guessed your number with', tries, 'tries')
warp = db.warps.find('player' : query).sort(u'player', 1)
>>> from java.lang import System >>> from java.io import PrintStream, OutputStream >>> oldOut = System.out >>> class NoOutputStream(OutputStream): ... def write(self, b, off, len): pass ... >>> System.setOut(PrintStream(NoOutputStream())) >>> System.out.println('foo') >>> System.setOut(oldOut) >>> System.out.println('foo') foo
relevant_widget.update_idletasks()
self.proxies = get_proxies() #list of proxies proxy_address = random.choice(self.proxies) request.meta['proxy'] = proxy_address request.meta['download_slot'] = hash(proxy_address) % MAX_CONCURRENT_REQUESTS
import itertools a = [1, 2, 3] for element in itertools.cycle(a): print element # -> 1 2 3 1 2 3 1 2 3 1 2 3 ...
import numpy as np arr = np.random.randint(1, 200000, (180000, 47)) np.save('test.npy', arr) # 250 milisec on my system loaded_arr = np.load('test.npy') # 55 milisec on my system # alternatively using text based files: np.savetxt('test.txt', arr) # 19 seconds loaded_arr = np.loadtxt('test.txt', dtype=np.int) # 32 seconds
from selenium import webdriver fp = webdriver.FirefoxProfile() fp.set_preference("browser.download.folderList",2) fp.set_preference("javascript.enabled", False) browser = webdriver.Firefox(firefox_profile=fp)
def zero_value(x): if x is None: return None return type(x)()
>>> d = unit_d.reset_index() >>> {k: v.tolist() for k, v in d.groupby("store_nbr")["item_nbr"]} {1: [9, 28, 40, 47, 51, 89, 93, 99], 2: [5, 11, 44, 85, 93]}
from itertools import product, repeat given = [1, 2] with_nones = zip(given, repeat(None)) print(list(product(*with_nones)))
$ WORKON_HOME=/where/you/want mkvirtualenv virtualenv_name
from csv import reader nan_counts = {} with open('/path/to/file') as file: file_reader = reader(file) next(file_reader) # Skip the first row of headers for row in file_reader: year, data = row[1], row[4:] nan_counts[year] = data.count('NaN') + nan_counts.get(year, 0)
# Assume you are using the source code I posted conn = Connection(HOST, USERNAME, PW) banner = conn.execute('\n') # Fetch banner content dateResult = conn.execute('date') # Target command result # since banner is always a subset of dataResult, you can do the following ret = dataResult.replace(banner, '') print ret # ret is the answer you want
array=[BoundName1, BoundName2, BoundName3] ReprioritizeBoundaries(["NAME:NewOrder"] + array)
setattr(widget, k, v)
{'first-name':lambda x: validate-str( x, 64 ), ...
def initialize_one(seq, n): if not seq: seq[:] = [1] * n
parser = argparse.ArgumentParser() parser.add_argument('input', type=argparse.FileType(), nargs='?', default=sys.stdin) args = parser.parse_args() G = defaultdict(list) for line in args.input: ...
from string import digits s = "He123llo Wor456ld!" s_ = s.translate(None, digits) s = s.translate(None, s_) print s >>> 123456
class SomeModelAdmin(admin.ModelAdmin): def save_model(self, request, obj, form, change): #Encript fields values super(SomeModelAdmin, self).save_model(request, obj, form, change)
api.add_resource(File, '/<path:fname>')
x = np.array( [0,1,2] ) y = np.array( [3,4,5] ) z = np.dstack( (np.repeat(x,3), np.tile(y,3) ) ) >>> print z array([[[0, 3], [0, 4], [0, 5], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5]]])
>>> bin(102) '0b1100110' >>> 102 ^ 255 153 >>> bin(102 ^ 255) '0b10011001'
>>> from itertools import chain >>> l = [{'x': 42}, {'x': 23, 'y': 5}] >>> all_keys = set(chain.from_iterable(l)) >>> for d in l: d.update((k,None) for k in all_keys-d.viewkeys()) >>> l [{'y': None, 'x': 42}, {'y': 5, 'x': 23}]
import csv mylist = [1.11, 2.22, 3.33, 4.44] with open('myfile.csv', "wb") as f: writer = csv.writer(f, delimiter=',') for elem in mylist: writer.writerow([elem])
from django.db import models field_names = ["fieldA", "fieldB", "fieldC"] instance = MyModel.objects.get(pk=ID) values = [] for field_name in field_names: value = getattr(instance, field_name) if isinstance(value, models.Manager): values.append(value.all()) else: values.append(value) ['valueA', 'valueB', [<RelatedModel pk=1>, <RelatedModel pk=3>]]
from google.appengine.ext import webapp import os class PrintEnvironmentHandler(webapp.RequestHandler): def get(self): for name in os.environ.keys(): self.response.out.write("%s = %s<br />\n" % (name, os.environ[name])) [1]: http://code.google.com/appengine/docs/python/theenvironment.html
samples = [1 if i in (1, 2, 3) else i for i in samples]
add file /full/path/to/mapper.py; select transform(s.year, s.month, s.day, s.hour) using ' python mapper.py' --<--- This line changed from my_table s limit 10;
def find_pairs(numbers, k): seen = set() for n in numbers: if k - n in seen: print n, k - n seen.add(n) a = [1,4,45,6,10,12,3] find_pairs(a, 16) # 10 6 # 12 4
\g<1>0
cons = [str(context[i]) for i in range(365)] days = [con[0:10].replace("-", "") for con in cons] exclude = [' "/{}/{}*"'.format(year0, day) for day in days] w0 = "\n".join(" " + day for for day in days)
class Docs : def __init__ (self, inTitle, inFormats): self.title = inTitle self.nameFormats = inFormats self.title = [] self.nameFormats = [] self.fileMatches = [] self.dirMatches = []
import pygame.font font = pygame.font.Font(None, 36) # None can be a font file instead text = font.render("Welcome to Earth", 1, (0, 0, 0)) # Determine the location that should be allocated for the text text_box = text.get_rect(centerx=DISPLAYSURF.get_width()/2) # Draw the text onto the background background.blit(text, text_box)
from django.db import models class MyModel(models.Model): date = models.DateField(auto_now_add=True)
pyrax.cloudservers.servers.delete_meta(server, list_of_keys) pyrax.cloudservers.servers.set_meta(server, key_value_dict)
max(piece.get('id', 0) for row in self.board for cell in row for piece in cell['b'])
def save(self, *args, **kwargs): if self.park.featureteimage_set.exclude(pk=self.pk).count() >= 3: raise ValidationError('too much featuretes') super(FeatureteImage, self).save(*args, **kwargs)
class UploadPhoto(APIView): #authentication_classes = (TokenAuthentication,) permission_classes = ()#(IsAuthenticated,) def put(self, request, username): user = User.objects.get(username = username) userprofile = UserProfile.objects.get(user= user) photo = PhotoSerializer(userprofile,data = request.data) photo.is_valid(raise_exception=True) photo.save() return Response(status= status.HTTP_200_OK)
temp.union(name_to_hour).reduceByKey(max)
def getValue(line): '''Lookup value in pivot table "data" given the contents of the line passed in from df''' value = lambda line: '% Male Survived' if line.Sex == 'male' else '% Female Survived' result = data.ix[line.Embarked][value(line)].get(line.Pclass) return result df['Chance of Survival'] = df.apply(getValue, axis=1)
def main(): sss = 0 oa = 0 sss, oa = calc (sss ,oa) print ("value = ",sss ,oa) def calc (sss ,oa): sss = sss + 1 oa = oa + 1 return sss, oa main()
{-# LANGUAGE OverloadedStrings #-} import Data.Text (Text) import qualified Data.Aeson as Aeson import qualified Data.Map as Map import Network.HTTP.Conduit main :: IO () main = do request <- parseUrl "http://example.com" res <- withManager $ httpLbs $ configureRequest request print res where configureRequest r = r { method = methodPost, requestHeaders = ("content-type", "application/json") : requestHeaders r, requestBody = RequestBodyLBS (Aeson.encode $ Map.fromList [("aaa" :: Text, "BBBCCSDDD" :: Text)]) }
df['press'].astype('float') df['temp'].astype('float') df['proc'] = np.where((df['press'] > 1100) & (df['temp'] < 40),'dilute', "pressurized")
for obj1 in some_list: dict1['key'] = value for obj2 in some_other_list: ... dict1['key'] = list2 list2 = [] # create new list to fill next time list1.append(dict1)
for line in content: if line.startswith('some_identifier'): line.strip('\n') #put the line into an unused 'name' value field for dict in mylist: if dict['name'] == None: dict['name'] = line break
def x_in_y(query, base): try: l = len(query) except TypeError: l = 1 query = type(base)((query,)) for i in range(len(base)): if base[i:i+l] == query: return True return False
import random n = 3 data = zip(fantasies, damages) total = 0 for i in range(n): myChoice = random.choice(data) print myChoice[0] total += myChoice[1]
[x**2 for x in range(20)]
>>> sys1 = __import__("sys") >>> import imp >>> sys2 = imp.load_module("sys2", *imp.find_module("sys")) >>> import sys >>> sys is sys1 is sys2 True
nav = soup.find( 'nav' ) child_li = nav.ul.find_all("li", recursive=False) for c in child_li: print c.text
with open('pic1.jpg', 'wb') as handle: response = requests.get(pic_url, stream=True) if not response.ok: print response for block in response.iter_content(1024): if not block: break handle.write(block)
>>> import types >>> help(types.ModuleType) >>> mymod = types.ModuleType("MyMod") >>> mymod <module 'MyMod' (built-in)> >>>
db_conn = mdb.connect( host="localhost", user="username", passwd="password", db="db_name", charset='utf8', cursorclass=mdb.cursors.DictCursor)
x_indexes, _ = numpy.ogrid[:len(I), :0] numpy.vectorize(f)(A, I, B[x_indexes, I])
response = HttpResponseRedirect(next) # Do whatever else you need to do here with the response object return response
import clr import System clr.AddReference("Microsoft.VisualBasic") from Microsoft.VisualBasic import Financial values = System.Array[float]([ -70000.0, 22000.0, 25000.0, 28000.0, 31000.0 ]) fixedRetRate = 0.0625 (netPVal, refValues) = Financial.NPV(fixedRetRate, values) print netPVal
from math import sqrt def get_ordered_list(points, x, y): points.sort(key = lambda p: sqrt((p.x - x)**2 + (p.y - y)**2)) return points
{% mytag "/sms/"|add:phone.number %}
# first convert Series to DataFrame df_segmenti_t0 = DataFrame(segmenti_t0) # save as excel spreadsheet df_segmenti_t0.to_excel('prova.xls')
album_urls = [album.GetHtmlLink().href for album in albums.entry]
from StringIO import StringIO txt = """a b c d eggs ham 1.0 0.0 eggs ham 0.0 0.5 spam eggs 0.0 1.0 spam eggs 0.0 1.0""" df = pd.read_csv(StringIO(txt), sep="\\s+") df.groupby(["a","b"], as_index=False).mean()
env = DJANGO_SETTINGS_MODULE=mysite.settings # set an environment variable pidfile = /tmp/project-master.pid # create a pidfile harakiri = 20 # respawn processes taking more than 20 seconds limit-as = 128 # limit the project to 128 MB max-requests = 5000 # respawn processes after serving 5000 requests "uwsgi --ini uwsgi.ini --daemonize=/var/log/yourproject.log # background the
class GUIApp(tk.Tk): ... app = GUIApp() app.mainloop()
Help on built-in function all in module builtins: all(...) all(iterable) -> bool Return True if bool(x) is True for all values x in the iterable. If the iterable is empty, return True. >>> all((('t2',), ('t3',), ('t4',), ('t5', 't6'))) True >>> all((('t2',), (), ('t3',), ('t4',))) False
import sys import ctypes def zerome(string): location = id(string) + 20 size = sys.getsizeof(string) - 20 memset = ctypes.cdll.msvcrt.memset # For Linux, use the following. Change the 6 to whatever it is on your computer. # memset = ctypes.CDLL("libc.so.6").memset print "Clearing 0x%08x size %i bytes" % (location, size) memset(location, 0, size)
cde = form.save(commit=True)
import csv .... with open('userinfo.csv', 'wb') as csvfile: csvwriter= csv.writer(csvfile, delimiter=',') # write the csv header csvwriter.writerow('firstname', 'lastname', 'age', 'postcode', 'jobtitle') # write the data row (often a loop here writing rows of data) csvwriter.writerow([firstname, lastname, age, postcode, jobtitle])
df.T.set_index('utcdt') Out[133]: impressions campaign_id utcdt 2013-10-29 18:00:00 105 cid2504649263
z = np.zeros([N, N, 3]) z[:,:,0] = x.reshape(-1,1) z[:,:,1] = x fast_grid = z.reshape(N*N, 3) print np.all( grid == fast_grid ) True
def is_even(number): if number % 2 == 0: return True else: return False $ is_even(6) True $ answer = is_even(6) $ print(answer) True
>>> values = [76, 76, 74, 2, 9, 30, 30, 29, 66, 93] >>> sum_odd = sum(x for x in values if x%2) >>> sum_even = sum(values) - sum_odd >>> print sum_odd,sum_even 131 354
# Encoding: UTF-8 japanese = u"桜の花びらたち" print japanese print len(japanese)
>>> authList = ('jennifer', 35, 20), ('john', 20, 34), ('fred', 34, 89) >>> rtAuthors = ('larry', 57, 24, 'simon'), ('jeremy', 24, 15, 'john'), ('sandra', 39, 24, 'fred') >>> authDict = {t[0]: t[1:] for t in authList} >>> rtAuthList = [t + authDict[t[-1]] for t in rtAuthors if t[-1] in authDict] >>> print rtAuthList [('jeremy', 24, 15, 'john', 20, 34), ('sandra', 39, 24, 'fred', 34, 89)]
from subprocess import Popen, PIPE sp = Popen(my_cmd.split(), stdin=PIPE) sp.stdin.write('\n') sp.wait()
import os def assert_no_umd(): mod = __file__ if os.environ.get("UMD_ENABLED", "").lower() == "true": namelist = os.environ.get("UMD_NAMELIST", None) if namelist is not None: namelist = namelist.split(',') if mod not in namelist: raise ValueError('UMD active!!')
from bs4 import BeautifulSoup import requests r = requests.get("http://www.mediafire.com/download/alv8dq6k35n4m2k/For+You.zip") soup = BeautifulSoup(r.content) link = soup.find("div",{"class":"download_link"}) import re url = re.findall("http.*.zip?",link.text)[0]
$ deactivate
with requests.Session() as s: r = s.get(URL1) r = s.post(URL2, data="username and password data payload")
def quick_sort(list): if not list: return list pivot = list[0] lesser = quick_sort([x for x in list[1:] if float(x[1]) < float(pivot[1])], 1) greater = quick_sort([x for x in list[1:] if float(x[1]) >= float(pivot[1])], 1) return lesser + [pivot] + greater
from datetime import datetime dt = datetime.fromtimestamp(int(stats_dict["db_update"])) print("DB Updated: " + dt.strftime('%a %b %d %H:%M:%S %Y'))
>>> # Note this is for Python 2.x. >>> def func(lst): ... return map(range, xrange(len(lst)+1)) ... >>> L = range(5) >>> func(L) [[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 3], [0, 1, 2, 3, 4]] >>>
class sqlalchemy.pool.Pool(creator, recycle=-1, echo=None, use_threadlocal=False, logging_name=None, reset_on_return=True, listeners=None, events=None, _dispatch=None)
from email.utils import parsedate_tz print parsedate_tz('Fri, 15 May 2009 17:58:28 +0700')
Service.objects.order_by('-num_views')
from collections import namedtuple Point = namedtuple("Point", "x y") p1 = Point(x=11, y=22)
dict_read = dict((map(float,x) for x in reader)
from win32api import GenerateConsoleCtrlEvent GenerateConsoleCtrlEvent(CTRL_C_EVENT, 0)
from sklearn.preprocessing import LabelBinarizer # your data # =========================== continent = [1, 2, 3, 2] continent_dict = {1:'is_europe', 2:'is_asia', 3:'is_america'} print(continent_dict) {1: 'is_europe', 2: 'is_asia', 3: 'is_america'} # processing # ============================= binarizer = LabelBinarizer() # fit on the categorical feature continent_dummy = binarizer.fit_transform(continent) print(continent_dummy) [[1 0 0] [0 1 0] [0 0 1] [0 1 0]]
>>> import re >>> r = re.compile(r'\d+$') >>> [int(m.group()) for m in (r.search(item) for item in mylist) if m] [2, 20, 244, 288888]
maxvalues = heapq.nlargest(20, lst)
businesses = Business.objects.extra( select={ "lat": "SELECT latitude FROM property_table WHERE business_table.address = property_table.address", "lon": "SELECT longitude FROM property_table WHERE business_table.address = property_table.address" } )
group = parser.add_mutually_exclusive_group(required=True) group.add_argument('--foo',action=.....) group.add_argument('--bar',action=.....) args = parser.parse_args()
def score(s, d): included = [d[word][0] for word in d if word in s] return sum(included) / float(len(included))
list_of_objects = db.get(list_of_keys)
import RPi.GPIO as GPIO GPIO.setwarnings(False) GPIO.setmode(GPIO.BCM) GPIO.setup(4,GPIO.OUT) GPIO.setup(17,GPIO.OUT) GPIO.setup(22,GPIO.OUT) GPIO.setup(23,GPIO.OUT) GPIO.output(4,1) GPIO.output(17,0) GPIO.output(22,1) GPIO.output(23,0) i=GPIO.input(4) j=GPIO.input(17) k=GPIO.input(22) l=GPIO.input(23) data=[i,j,k,l] ser.write(data)
import datetime d1 = datetime.datetime.strptime('2011:10:01:10:30:00', '%Y:%m:%d:%H:%M:%S') d2 = datetime.datetime.strptime('2011:10:01:11:15:00', '%Y:%m:%d:%H:%M:%S') diff = (d2 - d1).total_seconds() / 60
ctypes.string_at(ctypes.addressof(hdr), ctypes.sizeof(hdr))
import os import sys directory = os.path.dirname(os.path.abspath(__file__)) sys.stdout = open(os.path.join(directory, "demo-logfiles", "log_file_template.txt"), "a")
>>> my_string = "12 21 3 9 21 19" >>> a_new_list = my_string.split() >>> print(a_new_list) >>> ["12", "21", "3", "9", "21", "19"]
import os import os.path for (dirpath, dirnames, filenames) in os.walk('C:/My Music/'): for idx in range(len(dirnames)): newname = dirnames[idx].replace('_', ' ') os.rename(os.path.join(dirpath, dirnames[idx]), os.path.join(dirpath, newname)) dirnames[idx] = newname
>>> s = pd.Series(['one','two','three','four']) >>> recodes = {'one':'A', 'two':'B', 'three':'C'} >>> s.map(recodes) 0 A 1 B 2 C 3 NaN dtype: object >>> s.replace(recodes) 0 A 1 B 2 C 3 four dtype: object
u='\x87\x0e)\xb9\xb0\x0f\t"c\xc7\xf1\x97B\xc6\x17\xee\xab\x1d\xbf\xc0\xd0\x06j\xc3'.decode('UTF16') print type(u)
egrep "^\w{6}$" /usr/share/dict/words | egrep "(.)(.)(.)\3\2\1"
import re import string h = 0 r = re.compile(r'(\d+)\s*(\w+)\b') def incr( m ): h+=m.group(1)*({'in':1,'inches':1,'inch':1,'foot':12,'feet':12,'cm':0.3937,'centimeter':0.3937,'centimeters':0.3937}[string.lower(m.group(2))]||1) # etc. etc. return '' re.sub(r, incr, input) print h
In [50]: ser = pd.Series([5,6,7,5,4], index=[3,2,1,4,5]) In [51]: ser Out[51]: 3 5 2 6 1 7 4 5 5 4 dtype: int64 In [52]: ser._update_inplace(ser.sort_index()) In [53]: ser Out[53]: 1 7 2 6 3 5 4 5 5 4 dtype: int64
exts.append( Extension('_socket', ['socketmodule.c'], depends = ['socketmodule.h']) )
if not operandList: raise ValueError('Empty operand list') # or whatever result = operandList[0] for operand in operandList[1:] result = opFunc(result, operand)
res_list_1 = [item for object in my_list for item in (object*2, object*3)]
>>> import os >>> path = os.path.join(os.path.expanduser('~'), '.myfolder') # save the value >>> print(path) # print it C:\Users\falsetru\.myfolder
from django.db import models class CommonInfo(models.Model): # ... class Meta: abstract = True ordering = ['name'] class Student(CommonInfo): # ... class Meta(CommonInfo.Meta): db_table = 'student_info'
def practice(request): world = get_world_too() for entry in world: post = Post() post.title = entry['text'] post.image_url = entry['src'] post.save() template = "blog/post/noindex.html" context = {} # not in the loop anymore return render(request, template, context)
cols = ['col1', 'col2'] df[cols]
# Ancient versions of Django created plain MD5 passwords and accepted # MD5 passwords with an empty salt. if ((len(encoded) == 32 and '$' not in encoded) or (len(encoded) == 37 and encoded.startswith('md5$$'))): algorithm = 'unsalted_md5'
import time strings = ["Hello","My name is blahblah","This is blah blah","blah blah","What's your name?"] for txt in strings: print txt time.sleep(1)
$ python >>> import sqlite3 >>> conn = sqlite3.connect('/tmp/test.db') >>> c = conn.cursor() >>> c.execute("CREATE TABLE IF NOT EXISTS t(x)") >>> c.execute("INSERT INTO t VALUES(42)") >>> c.execute("SELECT * FROM t") >>> c.fetchall() [(42,)]
import bokeh from bokeh.charts import Scatter, output_file, show from bokeh.models import HoverTool p = Scatter(df, x='colA', y='colB', title="Foo", color="navy", xlabel="A", ylabel="B", tools="hover") hover = p.select(dict(type=HoverTool)) hover.tooltips = [("C", "@colC")] hover.mode = 'mouse' output_file("scatter.html") show(p)
import matplotlib.pyplot as plt plt.pcolor(data, cmap=plt.cm.OrRd) plt.yticks(np.arange(0.5,10.5),range(0,10)) plt.xticks(np.arange(0.5,10.5),range(0,10)) plt.colorbar() plt.gca().invert_yaxis() plt.gca().set_aspect('equal') plt.show()
child = subprocess.Popen(whatever, stdout=subprocess.PIPE) for line in child.stdout: print "One more line:", line
from rpy2.robjects.packages import importr MASS = importr('MASS') # the function is now at MASS.fitdistr
def copytotemp(logfile, fromline, toline): with open(logfile) as origfile: with open("templog.log", "w") as tempfile: for num, line in enumerate(origfile, 1): if num >= fromline and num <= toline: tempfile.write(line)
import timeit start = timeit.default_timer()
editor = QsciScintilla() editor.insertAt(text, line, index)
import numpy as np x = np.arange(5) data = [x, array([8, 4, 9, 6, 2]), x, array([5, 4, 4, 1, 2]), x, array([4, 3, 1, 5, 6]), x, array([8, 3, 5, 6, 4])] plt.plot(*data)
class ExampleForm(ModelForm): displayed_fields = MultipleChoiceField(choices=ExamplePlugin.COLUMN_CHOICES, help_text="Select columns that you would like to appear.", initial=['name', 'office', 'phone']) def __init__(self, *args, **kwargs): super(ExampleForm, self).__init__(*args, **kwargs) class Meta: model = ExamplePlugin
box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL) # image and label are defined elsewhere box.add(image) box.add(label) button = Gtk.Button(use_underline=True, always_show_image=True) button.add(box) button.show_all()
In [4]: a[a < 0] = 0 In [5]: a Out[5]: array([1, 2, 3, 0, 5])
import numpy as np test=np.asarray([[10,15,20,50],[30,40,nan,70],[nan,10,nan,25],[100,50,nan,60]]) test=np.ma.masked_invalid(test) xi = np.arange(-66,-70,-1) yi = np.arange(40.5,44.5,1) xxb,yyb = np.meshgrid(xi, yi) c=pcolor(xxb,yyb,test) colorbar(c)
>>> mock = MagicMock(return_value=sentinel.file_handle) >>> with patch('builtins.open', mock): ... import the_broken_module ... # do your testing here
if (len(set(lst)) <= 1): ....
def createtxt(number): filename = "test" + str(number) + ".txt" open(filename, "w") print(number) def createtxt_Launch(): global txtfile_number createtxt(txtfile_number) txtfile_number += 1
df.groupby('buyer_id').apply(lambda x: True if (x.time < '01-06-2016').any() and not (x.time > '01-06-2016').any() else False) buyer_id 64 False 79 False 191 True 251 True 261 False 309 False dtype: bool
:py:meth:`module.class.mymethodname`
>>> strs = ".foo bar (foo) bar foo-bar foo_bar foo'bar bar-foo bar, foo." >>> re.findall('[^\w+]foo[^\w+]', strs) ['.foo ', '(foo)', ' foo-', " foo'", '-foo ', ' foo.']
variable = core_func(arguments) func2(variable) func3(variable)
self.rfile.readline().decode("utf_16_be").strip()
>>> doc["session"]["docInfo"]["field"][0] OrderedDict([(u'@name', u'Employee'), (u'@isMandotory', u'True'), ('#text', u'Jake Roberts')])
>>> print datetime.date.today()-datetime.timedelta(1) >>> 2010-06-19
import re def stripComments(code): code = str(code) return re.sub(r'(?m)^ *#.*\n?', '', code) print(stripComments("""#foo bar bar foo # buz"""))
>>> from decimal import getcontext, Decimal >>> getcontext().prec = 6 >>> Decimal(1) / Decimal(7) Decimal('0.142857') >>> getcontext().prec = 28 >>> Decimal(1) / Decimal(7) Decimal('0.1428571428571428571428571429')
for col_name in ['col2','col3']: plt = figure() #This gives you a new figure to plot in x_min = min(df['col1'].min(), df[col_name].min()) x_max = max(df['col1'].max(), df[col_name].max()) plt.xlim([x_min,x_max]) plt.ylim([x_min,x_max]) plt.axes().set_aspect('equal') plt.scatter(df['col1'], df[col_name])
>>> sentence = ['this','is','a','sentence'] >>> '-'.join(sentence) 'this-is-a-sentence'
df.groupby(pd.TimeGrouper('B'))
def fib(n, r): if n < 2: r[0] = n else: r1 = [None] r2 = [None] # Start fib() threads that use r1 and r2 for results. ... # Sum the results of the threads. r[0] = r1[0] + r2[0] def FibonacciThreads(n): r = [None] fib(n, r) return r[0]
r'https://www\.facebook\.com/.*browser'
>>> from ctypes.util import find_library >>> >>> find_library('pthread') 'libpthread.so.0' >>> >>> find_library('ssl') 'libssl.so.0.9.8' >>> >>> find_library('png') 'libpng12.so.0' >>>
from tornado.web import RequestHandler db = SqliteDatabase('my_db.db') class PeeweeRequestHandler(RequestHandler): def prepare(self): db.connect() return super(PeeweeRequestHandler, self).prepare() def on_finish(self): if not db.is_closed(): db.close() return super(PeeweeRequestHandler, self).on_finish()
class B(A): def f(self,num): return 7 * A.f(self,num)
from winreg import* a=OpenKey(HKEY_CURRENT_USER,"Software\\Microsoft\\Command Processor",0,KEY_WRITE) SetValueEx(a,"Autorun",0,REG_SZ,"cd\\The path that I wantsss.") CloseKey(a)
import re #the regular express .*? means match any characters, #util it comes up with string "bad" print re.sub('not (.*?) bad', 'good', s)
>>> Test.__dict__['test'] 'Test'
import itertools perms = itertools.permutations([1,2,3]) for perm in perms: print perm >>>(1, 2, 3) >>>(1, 3, 2) >>>(2, 1, 3) >>>(2, 3, 1) >>>(3, 1, 2) >>>(3, 2, 1)
/** \brief * To prevent subclasses of PyTypeObject to be subclassed in Python we should remove * the Py_TPFLAGS_BASETYPE flag. For example, the classes App::VectorPy and App::MatrixPy * have removed this flag and its Python proxies App.Vector and App.Matrix cannot be subclassed. * In case we want to allow to derive from subclasses of PyTypeObject in Python * we must either reimplment tp_new, tp_dealloc, tp_getattr, tp_setattr, tp_repr or set them to * 0 and define tp_base as 0. */
python manage.py celery worker -B --concurrency=1
from pyramid.view import notfound_view_config @notfound_view_config(request_method='GET') def notfound_get(request): return Response('Not Found during GET, dude', status='404 Not Found') @notfound_view_config(request_method='POST') def notfound_post(request): return Response('Not Found during POST, dude', status='404 Not Found') @notfound_view_config(context='.your_package.api_class') def notfound_post(request): """matches only when traversal returns an object of API class""" return Response('Not Found during POST request on API endpoint, dude', status='404 Not Found')
redis 127.0.0.1:6379> incr next_id:user (integer) 1 redis 127.0.0.1:6379> incr next_id:user (integer) 2
{{ emp.get_names.names.a }} will get you 1 in the template {{ emp.get_names.names }} will get you {'A':1} in the template {{ emp.get_names }} will get you {'names_desc': {'b': 2}, 'names': {'a': 1}} in the template
for i in itertools.product(string.ascii_letters + string.digits, repeat=8): print(''.join(i))
import socket sock = socket.socket() sock.connect((address, port))
tags = fields.ToManyField('django_app.api.TagsResource', attribute=lambda bundle: bundle.obj.tags.filter(tags__deleted=0))
input_textarea.click() self.assertEqual(input_textarea.get_attribute('value'), '')
if Gtk.events_pending(): Gtk.main_iteration()
import thread, threading def longjob(): try: # do your job while True: print '*', except KeyboardInterrupt: # do your cleanup print 'ok, giving up' def terminate(): print 'sorry, pal' thread.interrupt_main() time_limit = 5 # terminate in 5 seconds threading.Timer(time_limit, terminate).start() longjob()
import collections lines = [[0.2, 'A'], [0.1, 'A'], [0.3, 'A'], [0.3, 'B'], [0.2, 'C'], [0.5, 'C']] amounts = collections.defaultdict(float) for amount, letter in lines: amounts[letter] += amount for letter, amount in sorted(amounts.iteritems()): print amount, letter
[~] |11> from scipy import stats [~] |12> times = poisson_simul(1.0, 100.0) [~] |13> stats.kstest(times, stats.uniform(loc=0.0, scale=100.0).cdf) (0.047464592615975507, 0.98954417186125665)
print { k:v for k, v in d.items() if v['end qty'] == 0 }
w = open('<filename>','w+b') w.write(f.read())
from django.conf import settings from django.template.loaders.app_directories import app_template_dirs import os template_files = [] for template_dir in (settings.TEMPLATE_DIRS + app_template_dirs): for dir, dirnames, filenames in os.walk(template_dir): for filename in filenames: template_files.append(os.path.join(dir, filename))
with open('file_name.txt','w') as f: res = itertools.permutations('abcdefghijklmnopqrstuvwxyz',5) # 5 is the length of the result. for i in res: f.write(''.join(i)+'\n')
newstr = oldstr[:oldstr.find("\t")]
i = 0 while not lcd.is_pressed(LCD.SELECT): i = (i + 1) % 400 if i == 0: lcd.message("Press Select") elif i == 200: lcd.clear() sleep(0.01)
# python startup file import readline import rlcompleter import atexit import os # tab completion readline.parse_and_bind('tab: complete') # history file histfile = os.path.join(os.environ['HOME'], '.pythonhistory') try: readline.read_history_file(histfile) except IOError: pass atexit.register(readline.write_history_file, histfile) del os, histfile, readline, rlcompleter
widget_name.focus()
str = "WooHoo" str = str[:-len(str)/2]
def proxy_alive(proxy): test = _get_data('http://m.naukri.com', proxy=proxy, silent=True) if test is not None: insert_in_alives(proxy)
sequence = [('item 1',150),('item 2',340),('item 3',794),('item 4',1205,),('item 5',1869),('item 2',3412)] d = {} for i,tup in enumerate(sequence): item,val = tup if d.get(item): print("I've seen {} before, it was {} at index {}".format(item,*d.get(item))) d[item] = (val, i) #I've seen item 2 before, it was 340 at index 1
folder = "path/folder/to/read/" file_names = [fn for fn in listdir(folder) if isfile(join(folder,fn))] count = -1 for f in file_names: count = count + 1 print "[%s] " % count + f while True: ans_file = input("Select file: ") if ans_file > count: print "Wrong selection." continue path = folder + file_names[ans_file] print "Selected file: %s " % path break
df = pd.DataFrame([[1,2,3],[4,5,6]], columns=['a','b','c']) df Out[23]: a b c 0 1 2 3 1 4 5 6 df['new'] = df[['a','b']].apply(lambda x : (-0.5)+x[1] if x[0] ==1 else x[1],axis=1) df Out[42]: a b c new 0 1 2 3 1.5 1 4 5 6 5.0
>>> url.find(lambda tag: tag.name == 'span' and tag.get('class', []) == ['bday']) <span class="bday">1899-08-04</span>
if laser.y == past_edge_of_window: self.game.itemlist.remove(laser) self.label.destroy()
#!/usr/bin/python # Filename : hello.py from sqlite3 import * conn = connect('database') c = conn.cursor() c.execute('select * from table limit 2') result = c.fetchall() for row in result: newname = row[1] newname = newname[:-3]+"hello" newdata = "UPDATE table SET name = '" + newname + "', originalPath = '' WHERE id = '" + str(row[0]) + "'" print row c.execute(newdata) conn.commit() c.close() conn.close()
>>> to_find = 'MG' >>> old_list = ['ADMISSION' ,'Colace','100','mg', 'b.i.d.' , 'insulin','Lente','12'] >>> new_list = [item.lower() for item in old_list] >>> new_list.index(to_find.lower()) 3
In [1]: foo = r"\frac{}{}" In [2]: foo Out[2]: '\\frac{}{}'
try: query = [sys.argv[1]] except IndexError: query = data for q in query: # do something with q
from scipy import stats class your_distribution(stats.rv_continuous): def _pdf(self, x): return ( sin(x) ** (-0.75) ) / (4.32141 * (x ** (1/5))) distribution = your_distribution() distribution.rvs()
while True: statement 1 statement 2 for i in range(1,11): statement 3 statement 4 if a >= 5: break
#!/usr/bin/python x={'123':[[1,3,2015],[2,5,2014],[1,5,2015]],'987':[[3,55,2014]],'456':[[1,37,2015]]} #Set query dates query_month = 1 #jan query_year = 2015 #year #Set a counter jan_counts = 0 for list_of_dates in x.values(): for date in list_of_dates: if (date[0] == query_month) and (date[2] == query_year): jan_counts += 1 print jan_counts #3
query_args = { 'origins':'2097 Honeysuckle Lane Southwest, Atlanta, GA 30311, USA', 'destinations':'67 Fitzgerald Street Southeast, Atlanta, GA 30312, USA', 'client':client_id, 'departure_time':calendar.timegm(time.gmtime()) }
source /opt/python/run/venv/bin/activate source /opt/python/current/env
import win32file import win32api win32file.MoveFileEx("/path/to/lockedfile.ext", None , win32file.MOVEFILE_DELAY_UNTIL_REBOOT)
dirName = 'seq%03d0' % 1
def parse(self, response): keys = response.xpath('//div[2]/p/strong') for key in keys: yield { key.extract(): key.xpath('following-sibling::node()').extract() }
w, v = linalg.eig(L) seen = {} unique_eigenvalues = [] for (x, y) in zip(w, v): if x in seen: continue seen[x] = 1 unique_eigenvalues.append((x, y)) fiedler = sorted(unique_eigenvalues)[1][1]
finder = BigramCollocationFinder.from_words(fw_2) # only bigrams that appear 3+ times finder.apply_freq_filter(2) scored = finder.score_ngrams(bgm.likelihood_ratio) fw_2 = [i for i in scored[0:20] if i[1] > 15]
>>> def f(x): x.append('u') ... >>> mylist = [] >>> f(mylist) >>> mylist ['u']
import random d = {"xtest": "yblob", "xtest1": "yblob1", "xtest2": "yblob2", "xtest3": "yblob3", "xtest4": "yblob4", "None": "None"} #choose a random x x = random.choice(d.keys()) if x == "None": proxy = None else: y = d[x] proxy = {"http": "%s:%s" % (x, y)}
>>> from collections import Counter >>> >>> Counter(map(tuple,data)) Counter({(0, 1): 2, (2, 3): 1, (0, 2): 1}) >>> Counter(map(tuple,data)).items() [((0, 1), 2), ((2, 3), 1), ((0, 2), 1)]
class A(object): bar = 1 a = A() b = A() b.bar = 2 print a.bar # outputs 1 A.bar = 3 print a.bar # outputs 3 print b.bar # outputs 2
# min85data and min37data from your file dx = xedges[1] - xedges[0] dy = yedges[1] - yedges[0] min85inds = np.floor((min85data - yedges[1]) / dx).astype(np.int) min37inds = np.floor((min37data - yedges[0]) / dy).astype(np.int) # Pretend you didn't do all that flipping of H, or make a copy of it first hvals = h_orig[min85inds, min37ends]
# given an iterable of pairs return the key corresponding to the greatest value def argmax(pairs): return max(pairs, key=lambda x: x[1])[0] # given an iterable of values return the index of the greatest value def argmax_index(values): return argmax(enumerate(values)) # given an iterable of keys and a function f, return the key with largest f(key) def argmax_f(keys, f): return max(keys, key=f)
a,b,c = [ 1 if i>1 else i for i in [ a, b, c ] ] a,b,c = map( lambda x: 1 if x>1 else x, [a,b,c] ) #lambda or name of some function
>>> (fine / np.repeat(coarse, 2)).reshape(-1, 2)
In [12]: pd.tseries.frequencies.to_offset('4Min') Out[12]: <4 * Minutes> In [13]: pd.tseries.frequencies.to_offset('W-SUN') Out[13]: <Week: weekday=6>
>>> import ast >>> ast.literal_eval('1') 1 >>> ast.literal_eval('1.0') 1.0 >>> ast.literal_eval('1e10') 10000000000.0
Popen('command1 | command2 | command3',shell=True)
from itertools import groupby print " ".join([k for k, group in groupby(d['key']) if len(list(group)) == 1]) # -> a b d
$> easy_install pip $> pip install BeautifulSoup $> python >>> from BeautifulSoup import BeautifulSoup as BS >>> import urllib2 >>> html = urllib2.urlopen(your_site_here) >>> soup = BS(html) >>> elem = soup.findAll('a', {'title': 'title here'}) >>> elem[0].text
c:\python27\python.exe "c:\Program Files\pyinstaller-2.0\pyinstaller.py" --help
def sanity_check( test, name='undefined', ontrue=None, onfalse=None ): if test: log.debug(name) if ontrue is not None: ontrue() else: log.warn( name ) if onfalse is not None: onfalse() def sanity_checks(): sanity_check(sanity_access(PATH['userhome'], os.F_OK), 'test home', onfalse=sys.exit)
query = """ select * from users where (%(age)s is null or %(age)s = age) and (%(name)s is null or %(name)s = name) """ parameters = dict(name = None, age = 35) cursor.execute(query, parameters)
for item_due in ItemDue.objects.filter(some_criteria).select_related(): print item_due.item.ref_id
class MyClass(object): ... def __add__(self, other): if isinstance(other, str): return str(self) + other ... def __radd__(self, other): if isinstance(other, str): return other + str(self) ...
b = open(a, 'r+') for line in b: if line.startswith("E PRAM") and "OOPS: 1" in line: next_line = next(b) # do whatever you need
lst = [1,2,3,10] dictionary = {} def test(x): for xx in range(100): for xxx in range(100): dictionary[x]=xx*xxx for x in lst: test(x)
{% for entry in latest_entries %} <li class="list-item"> <button class="button button-circle"><span class="list-index">{{ forloop.counter }}</span></button> <a class="SidebarLatestTitle" href="{{ entry.get_absolute_url }}">{{ entry.title }}</a> </li> {% endfor %}
def parse_get_account(self, response): j = json.loads(response.body_as_unicode()) if j['d'][0] != "": item = ParkerItem() item['account'] = j['d'][0] return Request(method="GET", url=(url + '?' + urllib.urlencode(querystring)), headers=headers, callback=self.parse_third_request, meta={'item': item})
for thread in threading.enumerate(): if isinstance(thread, threading._Timer): # In Py2.7 at least, Timer is a function wrapping the class _Timer thread.cancel()
from django.db import transaction with transaction.atomic(): for i, row in df.iterrows(): mv = MeasureValue.objects.get(org=row.org, month=month) if (row.percentile is None) or np.isnan(row.percentile): # if it's already None, why set it to None? row.percentile = None mv.percentile = row.percentile mv.save()
from datetime import datetime line_to_add = 'def' with open('file.txt', 'a+') as openfile: if not (item for item in openfile if line_to_add not in line): openfile.write(str(datetime.now()) + " " + line_to_add + ' \n')
import copy def Class(clas12): inputData = ''.join(clas12.readlines()) line=inputData.split('\n') line2=[] for a in line: b=a.split(' ') line2.append(b) return line2 clas12=open('class12.txt','r') Class12=Class(clas12) Class13=copy.deepcopy(Class12)
class Registration(CreateView): """ View handles user registration. """ form_class = ExampleForm model = Example template_name = 'accounts/registration.html' success_url = reverse_lazy('accounts:registered') def form_valid(self, form): example = form.save(commit=False) example.extra_field = derive_data(form.cleaned_data) example.save() return super(Registration, self).form_valid(form)
ListlinkerHref = driver.find_elements_by_xpath("//*[@href]")
import csv with open('names.csv', 'w') as csvfile: fieldnames = ['first_name', 'last_name'] writer = csv.DictWriter(csvfile, fieldnames=fieldnames) writer.writeheader() writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'}) writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'}) writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'})
>>> from functools import wraps >>> def flip(func): 'Create a new function from the original with the arguments reversed' @wraps(func) def newfunc(*args): return func(*args[::-1]) return newfunc >>> def divide(a, b): return a / b >>> new_divide = flip(divide) >>> new_divide(30.0, 10.0) 0.3333333333333333
num = 0.1423 print '%06.2f' %num
class Recipe(object): def __init__(self, buildout, name, options): self.buildout, self.name, self.options = buildout, name, options directory = buildout['buildout']['directory'] download_cache = buildout['buildout'].get('download-cache')
action = getattr(a, convert)
>>> locale.setlocale(locale.LC_ALL, '') 'en_US.UTF-8' >>> locale.format("%.4f", 12345.678912, grouping=True) '12,345.6789'
f = open(fileName,'r') content = f.readlines() content.reverse() for line in content: if line.strip() == "* ============================== INERTIA ==============================": index = content.index(line) break for line in content[index::-1]: print line
np.hstack((x, y, z, a, b, c, d, e))
from functools import partial self.connect(self.Option1,SIGNAL("clicked()"), partial(self.myFunction, 1)) self.connect(self.Option2,SIGNAL("clicked()"), partial(self.myFunction, 2)) self.connect(self.Option3,SIGNAL("clicked()"), partial(self.myFunction, 3))
>>> dictionary = {'foo': 3, u'bar': [6.7]} >>> str = repr(dictionary) >>> str "{'foo': 3, u'bar': [6.7000000000000002]}" >>> exec("adict = " + str) >>> adict {'foo': 3, u'bar': [6.7000000000000002]}
import numpy as np import matplotlib.pyplot as plt fig, axs = plt.subplots(ncols=2, sharey=True) for ax in axs: ax.plot([0,1],[0,1], 'r-') ax.set_xticks([0.5,1.0]) ax.set_xticklabels(['0.5','1.0']) axs[-1].legend(('Some plot'), loc=2) for ax in axs[1:]: ax.yaxis.set_visible(False) fig.subplots_adjust(wspace=0) plt.show()
text = "Test Message" message = client.messages.create( body= text, to="+12125551234", from_="+15105551234", ) print message.sid
frozen = Freezer(with_no_argument_rules=False, log_url_for=False) @frozen.register_generator def your_generator_here(): yield "your", {"paths": "here"}
\d+(?=\D*$)
fig, ax = plt.subplots(1, 1) boxplot = sns.boxplot(x="Regularisierungsparameter", y="F1", data=data.sort("Regularisierungsparameter"), ax=ax) labels = ['%.5f' % float(t.get_text()) for t in ax.get_xticklabels()] ax.set_xticklabels(labels)
>>> config = 'H/2' >>> config == 'H/2' or 'H' or '2H' True >>> config == 'H/2' or config == 'H' or config == '2H' True >>> config = 'H' >>> config == 'H/2' or 'H' or '2H' 'H' >>> config == 'H/2' or config == 'H' or config == '2H' True >>> config = 'R' >>> config == 'H/2' or 'H' or '2H' 'H' >>> config == 'H/2' or config == 'H' or config == '2H' False
elif event.type==pygame.MOUSEBUTTONDOWN and event.button==LEFT: print "You pressed the left mouse button at (%d,%d)" %event.pos screen.set_at((event.pos.x, event.pos.y), pygame.Color(255,0,0,255))
def generateFromFile ( fileName ): for line in open( fileName ): for segment in line.split( ',' ): yield segment for ln in generateFromFile( "input.txt" ): ch.Add( ln.strip() )
[i for i in xrange(no_jobs) for x in xrange(T)]
class BaseHandler(webapp2.RequestHandler): def __init__(self, *args, **kwargs): super(BaseHandler, self).__init__(*args, **kwargs) country = self.request.headers.get('X-AppEngine-Country') if not country == "US" and not country == "" and not country == None: # The last two handle local development self.redirect('international_holding_page') logging.info(country)
re.sub(r'(?<!\s)(\{)',r' \1','{{{{{{')
lobbies = Lobby.all().fetch(10) keys = [lobby.key() for lobby in lobbies] q = aUser.gql('WHERE lobby IN :1', keys) users = q.fetch(1000)
>>> import curses >>> curses.ACS_ULCORNER exception >>> curses.initscr() >>> curses.ACS_ULCORNER >>> 4194412
>>> s = 'hello' >>> s.rfind('l') 3
from scipy.sparse import lil_matrix result = lil_matrix((N, N)) # In order to save memory, one may add: dtype=bool, or dtype=numpy.int8 with open('matrix.csv') as input_file: for line in input_file: x, y = map(int, line.split(',', 1)) # The "1" is only here to speed the splitting up result[x, y] = 1
form['field_name'].value()
from __future__ import division eval('14/15')
>>> from igraph import Graph >>> d = {'a': ['b', 'c', 'd'], 'b': ['c', 'd'], 'c': ['d']} >>> g = Graph.TupleList([(k, v) for k, vs in d.iteritems() for v in vs]) >>> print g IGRAPH UN-- 4 6 -- + attr: name (v) + edges (vertex names): a -- b, c, d b -- a, c, d c -- a, b, d d -- a, b, c
grep -Po "(?<=<cite>).*?(?=</cite>)" /tmp/file.txt | sed 's:<[^>]*>::g'
import urllib, json service_url = 'https://www.googleapis.com/freebase/v1/mqlread' query = [{ "name": "citigroup", "/common/topic/alias": []}] params = { 'query': json.dumps(query), 'key': key, 'limit':5} url = service_url + '?' + urllib.urlencode(params) response = json.loads(urllib.urlopen(url).read()) print response
guess = 50 # this should be outside the loop, I think while True: # infinite loop n = raw_input("\n\nTrue, False or Correct?: ") if n == "Correct": break # stops the loop elif n == "True": # etc.
sum(1<<i for i, b in enumerate(x) if b)
list1 = ['a', 'b', 'c'] list2 = [1, 2, 3, 4] my_dict = {'list1': list1, 'list2': list2}
try: import BeautifulSoup # Standard except ImportError: import MyBeautifulSoup as BeautifulSoup # internal distribution
import copy def scrub(x): ret = copy.deepcopy(x) # Handle dictionaries. Scrub all values if isinstance(x, dict): for k,v in ret.items(): ret[k] = scrub(v) # Handle None if x == None: ret = '' # Finished scrubbing return ret
import logging logger = logging.getLogger(__name__) class QtHandler(logging.Handler): def __init__(self): logging.Handler.__init__(self) def emit(self, record): record = self.format(record) XStream.stdout().write("{}\n".format(record)) handler = QtHandler() handler.setFormatter(logging.Formatter("%(levelname)s: %(message)s")) logger.addHandler(handler) logger.setLevel(logging.DEBUG)
if any(key in dict for key in ['asdf', 'qwer', 'zxcf']): # contains at least one of them
try: map(subprocess.check_call, script_list) except Exception, e: # failed script
[list(k[:i]) for i in range(1, len(k)+1)]
$ awk '/Mark End/{f=0}/Mark Begin/{f=1;next}f' file Text 2 Text 4 $ awk '/Mark End/{f=0}/Mark Begin/{f=1;next}f{p=$0}END{print p}' file Text 4
>>> x=[['1', '7', 'U1'], ['1.5', '8', 'U1']] >>> zip(*x) [('1', '1.5'), ('7', '8'), ('U1', 'U1')] >>> [[sum(float(n) for n in nums)] for nums in zip(*x)[:-1]] [[2.5], [15.0]]
>>> import re >>> var = "++" >>> re.search(re.escape(var), '++') <_sre.SRE_Match object at 0x02B36B80>
def copytree(src, dst, symlinks=False, ignore=None):
def saveAsTextFile(path: String) { this.map(x => (NullWritable.get(), new Text(x.toString))) .saveAsHadoopFile[TextOutputFormat[NullWritable, Text]](path) }
>>> N = 5 >>> coords = np.random.uniform(size=(N, 2)) >>> coords [[ 0.00510663 0.52338403] [ 0.88250555 0.0440339 ] [ 0.1753249 0.4534223 ] [ 0.13600696 0.71194949] [ 0.87044574 0.80934245]] >>> coords.sum(axis=0) array([ 2.31797242, 0.95364616]) >>> (coords.sum(axis=0)**2).sum() 12.247833350611774
BEGIN; DELETE FROM main_table WHERE id IN (SELECT id FROM temp_table); INSERT INTO main_table SELECT * FROM temp_table; COMMIT;
>>> from collections import namedtuple >>> Test = namedtuple('Test', 'foo bar baz') >>> t1 = Test(1, 2, 3) >>> t1 Test(foo=1, bar=2, baz=3) >>> t2 = t1._replace(bar=t1.bar+1) >>> t2 Test(foo=1, bar=3, baz=3)
>>> class Base(object): ... pass ... >>> class Derived(Base): ... def print_base(self): ... for base in self.__class__.__bases__: ... print base.__name__ ... >>> foo = Derived() >>> foo.print_base() Base
In [12]: sentence = 'hello world cat dog' In [13]: words = ['cat', 'bear', 'dog'] In [15]: [w*(sentence.find(w)>=0) for w in words] Out[15]: ['cat', '', 'dog']
>>> print(textwrap.wrap(txt, 160)) ['It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of', 'incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we', 'had nothing before us, we were all going direct to Heaven, we were all going direct the other way-- in short, the period was so far like the present period,', 'that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only.'] >>>
import multiprocessing class My_Class(multiprocessing.Process): def __init__(self, initial_value): super(My_Class, self).__init__() self.v = initial_value def run(self): print 'Hello from a class ' + str(self.v) return if __name__ == '__main__': for x in range(100): process = My_Class(x) process.start()
df= pd.DataFrame(np.random.randn(10,4)) df[4]= [[df[2][x],df[3][x]] for x in range(df.shape[0])]
def getXML(self,subreddit): url = 'http://www.reddit.com'+subreddit+'.rss' source = urllib.request.urlretrieve(url,'rss.xml') self.getXmlData()
import plotly.graph_objs as go layout = go.Layout( yaxis=dict( range=[0, 0.4] ) ) Dataframe.iplot(kind='bubble', x='branch', y='retention', size='active_users', text='active_users', xTitle='', yTitle='Retention', filename='cufflinks/PlotName', layout = layout)
def some_request_function(request): if request.is_secure(): #You are safe! else: #You are NOT safe!
"INSERT INTO storage_folders SET folder_path='" + filepath + "', company='" + company + '" ON DUPLICATE KEY UPDATE company='" + company + "'"
unsortedlist = self.driver.find_elements(By.Locator, row_element) self.driver.find_elements(By.Locator, sort).click() sortedTable = self.driver.find_elements(By.Locator, row_element) sortedList = sorted(unsortedList, key=str.lower) for item in sortedTable: assert sortedTable[i] == sortedList[i]
xterm -e ssh servercomp cd /srv/django \; python manage.py shell
import pandas as pd d = {1 : {'we': 26, 'is': 112}, 2 : {'tp': 26, 'fp': 91}, 3 : {'pp': 23, 'kj': 74}} # Replace the inner dicts with their string representations for i in d: d[i] = str(d[i]) # Convert to dataframe df = pd.DataFrame.from_dict(d, orient='index').reset_index() # Clean up column names df.rename(columns={'index': 'row', 0: 'col1'}, inplace=True)
def cap_to_size(some_string, size_limit, encoding): result = "" for char in some_string: size_limit -= len(char.encode(encoding)) if size_limit >= 0: result += char else: return result
>>> listA = ['a', 'b', 'c', 'd'] >>> listB = [ 1 , 2 , 3 , 4 , 5 ] >>> listC = ['!', '?', '='] >>> result = list(itertools.product(listA, listB, listC)) >>> result[:5] [('a', 1, '!'), ('a', 1, '?'), ('a', 1, '='), ('a', 2, '!'), ('a', 2, '?')] >>>
data = [ "abc", "aBB", "abD", "Aac", "AAb", "ABc", "ABa" ] print sorted(data, key = lambda item: item.upper())
class MySpider(BaseSpider): ... def parse(self, response): jsonresponse = json.loads(response) item = MyItem() item["firstName"] = jsonresponse["firstName"] return item
import lxml.html telnr = "0306636793" p = lxml.html.HTMLParser(encoding='utf-8') root = lxml.etree.parse("http://www.11880.com/rueckwaertssuche/%s"%telnr, parser=p).getroot() h3 = root.cssselect(b'h3') txt = h3[0].text_content()
my_product = models.MyProducts.query.filter_by(code=123456).first() # @note: code is Integer, not a String, right? if my_product: my_product.comment = "greeeeat product" db.session.add(my_product) db.session.commit()
user = authenticate( email = form.cleaned_data['email'], password = form.cleaned_data['password2'] ) login(request, user)
with open('in.txt', 'r') as fin, open('out.txt', 'w') as fout: for line in fin: if line.startswith('00000'): fout.write(line)
outcome_qs = Outcome.objects.all() self.fields['relevantoutcome'] = forms.ModelMultipleChoiceField(queryset=outcome_qs, required=True, widget=forms.CheckboxSelectMultiple) for outcome in outcome_qs: # Use Outcome primary key to easily match two fields in your view. self.fields['outcomevalue_%s' % outcome.pk] = forms.CharField(widget=forms.TextInput(attrs={'size':'30'})
self.function = lambda *args: module1.f(*args)[0]
In [87]: %timeit cythonmodule.doit(lam=lam, y0=y0, zxp=zxp, z=z, k=k, ra=ra) 1 loops, best of 3: 501 ms per loop In [85]: %timeit doit() 1 loops, best of 3: 4.97 s per loop
new_obj_list = list(set(obj_list))
from PIL import Image image_file = Image.open("convert_image.png") # open colour image image_file = image_file.convert('1') # convert image to black and white image_file.save('result.png')
celeryd: celery -A app.celery worker -E -B --loglevel=INFO
import os output = [] for _, _, files in os.walk(directory): for f in files: fullpath = os.path.join(directory, os.path.basename(f)) output.append(subprocess.check_output([fullpath])) print '\n'.join(output)
def matcher(pattern): def f(repo): return all(p is None or r == p for r, p in zip(repo, pattern)) return f >>> repo = (('framework', 'django', '1.3'), ('cms', 'fein', '1.3'), ('cms', 'django-cms', '2.2')) >>> pattern = (None, None, '1.3') >>> filter(matcher(pattern), repo) (('framework', 'django', '1.3'), ('cms', 'fein', '1.3'))
rhs = sol.rhs
class A(models.Model): title = models.CharField(max_length=30) class B(models.Model): title = models.CharField(max_length=255) a = models.ManyToManyField(A) class C(models.Model): title = models.CharField() property1 = models.CharField() class A_B_C(models.Model): a = models.ForeignKey(A) b = models.ForeignKey(B) c = models.ForeignKey(C) class Meta: unique_together = ('a', 'b', 'c')
data = {} with open("data.csv") as f: reader = csv.reader(f, delimiter="\t") reader.next() # Skip header for row in reader: row = list(map(int, row)) data[row[0]] = row[1:]
replacements = { 'Name': ['FirstName','First Name','Nombre','NameFirst', 'Name', 'Given name', 'given name', 'Name'], 'Address': ['Residence','Primary Address', 'primary address' ], #... } df.rename(columns={el:k for k,v in replacements.iteritems() for el in v}, inplace=True)
dist = pkg_resources.get_distribution('your-app') if dist.precedence == pkg_resources.DEVELOP_DIST: # package is in development mode ...
associate(instance_id=None, network_interface_id=None, private_ip_address=None, allow_reassociation=False, dry_run=False)
import re # Use "with" so the file will automatically be closed with open("input.txt", "r") as fobj: text = fobj.read() # Use word boundary anchors (\b) so only five-digit numbers are matched. # Otherwise, 123456 would also be matched (and the match result would be 12345)! output = re.findall(r'\b\d{5}\b', text) # Join the matches together out_str = ",".join(output) # Write them to a file, again using "with" so the file will be closed. with open("output.txt", "w") as outp: outp.write(out_str)
for arg in sys.argv[1:]: a=pyfits.getdata(arg).MAG_AUTO arr=numpy.array(a) indices = heapq.nlargest(10,xrange(len(arr)),key=arr.__getitem__) print indices
... boxPolygon = Polygon(boxCoords, facecolor=boxColors[k]) boxPolygon.set_hatch('*') ax1.add_patch(boxPolygon) ...
import hashlib str1 = 'abcxyz123' str2 = 'abcxyzhjk' str3 = 'abcxyz123' hash1 = hashlib.sha1() hash1.update(str1) print str(int(hash1.hexdigest(), 16))[:13] >>> 2655706373072 hash2 = hashlib.sha1() hash2.update(str2) print str(int(hash2.hexdigest(), 16))[:13] >>> 1219934364452 hash3 = hashlib.sha1() hash3.update(str3) print str(int(hash3.hexdigest(), 16))[:13] >>> 2655706373072
class EventForm(ModelForm): account = ModelChoiceField(queryset=Account.objects.all()) background = CharField(widget=Textarea(attrs={'class':'form-textarea resizeoff auto-resize js_auto_resize default'}), required=False) opportunities = ModelMultipleChoiceField(queryset=Opportinuty.objects.all(), label='SalesForce ID', required=False)
RedirectView( url=reverse_lazy('admin:login'), query_string=True, # You might want to set permanent=False, # as it defaults to True for Django < 1.9 permanent=False, )
class Model(QAbstractListModel): def __init__(self, parent=None, *args): super(Model, self).__init__(parent, *args) self.id_list = [] def data(self, index, role): if not index.isValid(): return None row_id = self.id_list[index.row()] if role == QtCore.Qt.DisplayRole: # query database to retrieve the row with the given row_id
ax = SubplotZero(fig, 111) ... for direction in ["left", "right", "bottom", "top"]: ax.axis[direction].set_visible(False)
>>> ip = '127.0.0.1' >>> print '.'.join(format(int(x), '04o') for x in ip.split('.')) 0177.0000.0000.0001
finaldict = {} dictlist = [{'a': ['e','f','g'], 'b': ['h','i','k'], 'c': ['u','v','w']}, {'a': ['t','u']}] for d in dictlist: for k in d.keys(): try: finaldict[k] += d[k] except KeyError: finaldict[k] = d[k]
import math import csv x = 2.0 with open('out.csv', 'wb') as f: writer = csv.writer(f, delimiter=',') while x < 100.0: print x, '\t', math.log(x)/math.log(2) writer.writerow([x, math.log(x)/math.log(2)]) x = x + x
coverage run /the/test/runner options to test runner
from sqlalchemy import or_ filter(or_(User.name == 'ed', User.name == 'wendy'))
payload = { 'user': 'newuser', 'pass': '12345', 'tos_understood': 'on', }
line = next(inf, '') # a file is an iterator over lines ignoreLines = all((s == '0') for s in line.split()) # ignore if all zeros
In [17]: bar.ix[[bar.iloc[0].name]] Out[17]: col1 col2 (a, b, c) 0.216689 0.262511
def __array_wrap__(self, obj): if obj.shape == (): return obj[()] # if ufunc output is scalar, return it else: return np.ndarray.__array_wrap__(self, obj)
widgets = [deadparrotlabel, sillywalkslabel, ... ] for w in widgets: w.config(state=DISABLED)
import itertools def getxy(point): return point[:2] sortedpoints = sorted(points, key=getxy) results = [] for xy, g in itertools.groupby(sortedpoints, key=getxy): results.append(max(g, key=operator.itemgetter(2)))
def FindFirstMatch(list1, list2): """ Returns the first element in list "list1" for which there is a matching element in list "list2" or None if there is no match """ setb = set(list2) return next((item for item in list1 if item in setb),None)
post_date = post_date.strftime('%B %d')
import json pre = driver.find_element_by_tag_name("pre").text data = json.loads(pre) print(data)
result = b_edge tmp_dict = { (i[0],i[1]): i[2] for i in edges } for index_j, j in enumerate(b_edge): for index_i, i in enumerate(j): if i in tmp_dict: result[index_j][index_i] = result[index_j][index_i] + (tmp_dict[i],)
>>> x = 4 >>> def func(): ... x = 6 ... >>> print(x) 4 >>> func() >>> print(x) 4 >>> def globalfunc(): ... global x ... x = 6 ... >>> print(x) 4 >>> globalfunc() >>> print(x) 6
class A(Document): meta = { 'abstract': True } pass class B(Document): meta = { 'abstract': True } pass class C(A, B): specific_field_1 = ... specific_field_2 = ... meta = { 'collection': 'class_c', }
class Parser(): def __init__(self, uri): self.uri = uri self.soup = self.createSoup() def createSoup(self): htmlPage = urlopen(self.uri) htmlText = htmlPage.read() return BeautifulSoup(htmlText)
import matplotlib.dates as mdates month_day_fmt = mdates.DateFormatter('%b %d') # "Locale's abbreviated month name. + day of the month" ax.xaxis.set_major_formatter(month_day_fmt)
def print_dictionary(d): print (d['a']).rjust(10)
for i, entry in enumerate(entries): bucket = i // 3 # insert into choosen bucket number
class SomeClass(db.Model): item = None class AnotherClass(db.Model): otherItem = db.ReferenceProperty(SomeClass) SomeClass.item = db.ReferenceProperty(AnotherClass)
import re # create regular expression pattern chop = re.compile('#chop-begin.*?#chop-end', re.DOTALL) # open file f = open('data', 'r') data = f.read() f.close() # chop text between #chop-begin and #chop-end data_chopped = chop.sub('', data) # save result f = open('data', 'w') f.write(data_chopped) f.close()
conda install PATH_TO_FILE/opencv3-3.1.0-py35_0.tar.bz2
import time # here get somehow your page content page_content = ????? prefix = "outut-" suffix = ".html" fname = "{prefix}{now:d}{suffix}".format(now=time.time()) print fname with open(fname, "w") as f: f.write(page_content)
import json v = [1, 2, 4] s = json.dumps(v)
import struct def int32(some_bytes): return struct.unpack("i", some_bytes)[0] def int16(some_bytes): return struct.unpack("h", some_bytes)[0]
def userouput(toprint): print(toprint) def userinput(): userin = raw_input("Enter: ") userouput(userin) if __name__ == '__main__': userinput()
all_pages = Page.objects.all() revision_ids = [p.revisions.order_by('-created').first().pk for p in all_pages] page_revisions = PageRevision.objects.filter(pk__in=revision_ids)
Smalldf = Smalldf[Smalldf.index.isin(Largedf.index))]
from string import ascii_lowercase for character in ascii_lowercase: c = character
for tbl in reversed(meta.sorted_tables): engine.execute(tbl.delete())
s1 = 'BREAKFAST IN ["Rolled Oats","Cornflakes","French Toast"]' s2 = 'COPIES_FOR_EXTERNAL > "0"' print s1.split(None, 2) # ['BREAKFAST', 'IN', '["Rolled Oats","Cornflakes","French Toast"]'] print s2.split(None, 2) # ['COPIES_FOR_EXTERNAL', '>', '"0"']
wb = xlrd.open_workbook("somewb.xls") my_date_tuple = xlrd.xldate_as_tuple(xls_timestamp_number,wb.datemode)
def firstcheck(): url = 'http://www.hacker.org/challenge/misc/minuteman.php' hogniergay = urlopen(url) data = hogniergay.read() hogniergay.close() global html html = data
df = pd.DataFrame({'a': [None] * 4, 'b': [2, 3, 10, 3]}) df.a.iloc[0] = 0.5 df.a.iloc[1:] = (df.b.shift(-1).cumprod() * df.a.iat[0])[:-1].values >>> df a b 0 0.5 2 1 1.5 3 2 15 10 3 45 3
select m.imdb_id, array_agg(g.genre_id) as genre_id from moviegenre g inner join movie m on g.movie_id = m.id where m.last_ingested_on is not null and not m.imdb_id in ('tt0169547') and not m.imdb_id in ('tt0169547') and g.genre_id in (2, 10) group by m.imdb_id
>>> from flask import render_template_string >>> render_template_string('hello {{ what }}', what='world') 'hello world'
>>> import csv >>> list(csv.reader(lines, delimiter=';')) [['00:00', 'Title', '00'], ['00:00', 'Title', '00'], ['00:00', 'Title', '00']]
import threading command = 'ls -l' #some_command t = threading.Thread(target=some_function,args=(command,)) t.start() def some_function(command): some_process = pexpect.spawn(command) some_process.expect('[pP]assword*') some_process.sendline(some_password) some_process.expect(pexpect.EOF,timeout=1000)
pylab_img[::-1,:,::-1] == cv_img
>>> l = [1,3,5,6,8,10] >>> all(y - x >= 2 for x, y in zip(l, l[1:])) False >>> l = [1,3,5,7,9,11] >>> all(y - x >= 2 for x, y in zip(l, l[1:])) True
import requests with open('./inp') as f: for line in f: print repr(line) r = requests.get(line.strip()) print r.text
cmd ='ps -ef | grep "Admin|%s"' % appid
In [48]: def solve(a,b): a,b=str(a),str(b) spaces=len(a.split())-1 return "{0} {1} {2}".format(a,"."*(68-len(a)-len(b)-spaces),b) ....: In [49]: print solve(a,b);print solve(p,q) Hello .......................................................... False Python rocks ................................................... True
import datetime def parse_date(line): for template, length in [("[%H:%M:%S %d.%m.%Y]", 21), ("%H:%M:%S-%d.%m.%Y", 19), ...]: try: return datetime.datetime.strptime(line[:length], template) except ValueError: pass
mapping =dict([c["name"],c["id"]) for c in campaigns]) #save this ... dont recreate it all the time print mapping[campaign_name] # get the id by campaign name
import datetime import matplotlib.pyplot as plt from matplotlib.dates import DayLocator, HourLocator, DateFormatter, drange import numpy as np date1 = datetime.datetime( 2000, 3, 2) date2 = datetime.datetime( 2001, 10, 10) delta = datetime.timedelta(days=28) dates = drange(date1, date2, delta) ys = np.arange( len(dates) ) fig, ax = plt.subplots() ax.plot_date(dates, ys*ys) ax.xaxis.set_major_formatter( DateFormatter('%Y-%m') ) plt.show()
server { listen 80; server_name customersite1.com; access_log /var/log/customersite1/access_log; location / { root /var/www/customersite1; uwsgi_pass 127.0.0.1:3031; include uwsgi_params; }
for a in psoup('a': {'class': 'playerLink'}): print a.text print a.next.next
# Use a private key spur.SshShell( hostname="localhost", username="bob", private_key_file="path/to/private.key" )
class SourceHandler(tornado.web.RequestHandler): @tornado.web.asynchronous def get(self): pipe = c.pipeline(transactional=True) pipe.zadd( 'test1'), 1212, "test" ) pipe.zadd( 'test2'), 1212, "test" ) ... pipe.execute() # of course you no longer have the response information... ...old code...
>>> text = ["this is a sentence", "so is this one"] >>> bigrams = [b for l in text for b in zip(l.split(" ")[:-1], l.split(" ")[1:])] >>> print(bigrams) [('this', 'is'), ('is', 'a'), ('a', 'sentence'), ('so', 'is'), ('is', 'this'), ('this', 'one')]
>>> user_dict['salt'] = uuid.uuid4().hex >>> print_stderr(user_dict['salt']) >>> import hashlib >>> m = hashlib.sha512() >>> m.update(user_dict['pwd']) >>> m.update(user_dict['salt']) >>> user_dict['pwd'] = m.hexdigest() >>> print_stderr(user_dict['pwd'])
>>> from construct import BitStruct, BitField >>> sample = "\xff\x01\x01\x01" >>> c = BitStruct("foo", BitField("status", 8), BitField("i", 24)) >>> c.parse(sample) Container({'status': 255, 'i': 65793})
public String[] java_lib_help_me_out() { return new String[] { "one", "two", "three" }; }
from os import stat from pwd import getpwuid def find_owner(filename): return getpwuid(stat(filename).st_uid).pw_name
import re month_pair = (re.compile('(\d\s*)m'), 'months') year_pair = (re.compile('(\d\s*)y'), 'years') def substitute(s, pairs): for (pattern, substitution) in pairs: match = pattern.search(s) if match: s = pattern.sub(match.group(1)+substitution, s) return s pairs = [month_pair, year_pair] print(substitute('65 y 4m', pairs))
from BeautifulSoup import BeautifulSoup from os.path import basename, splitext soup = BeautifulSoup(my_html_string) for img in soup.findAll('img'): img['src'] = 'cid:' + splitext(basename(img['src']))[0] my_html_string = str(soup)
def incomplete_tasks(modeladmin, request, queryset): queryset.update(completed=False) incomplete_tasks.short_description = 'Mark as Not Complete' class TaskAdmin(admin.ModelAdmin): list_display = ['title', 'completed'] ordering = ['created'] actions = [incomplete_tasks,] admin.site.register(Task, TaskAdmin)
dict_to_str = lambda x: ','.join("%s:%s" % (str(k), str(v)) for (k, v) in x.iteritems()) if isinstance(x, dict) else x
## Gather the address components in groups, removing any that are None address_parts = filter(None, [ model_obj.address_1, model_obj.address_2, u', '.join(filter(None, [model_obj.address_city, model_obj.state])), model_obj.zip, ]) ## In the template, join the address groups {{ address_parts|join:"<br>" }}
"{name} is a {adjective} {noun} that {verb}".format(**locals())
[s for s in partyinfo[partyinfo.index('Defendant'):] if s != 'Defendant']
runfunc(func, *args, **kwds) Call func with the given arguments under control of the Trace object with the current tracing parameters.
def print_rect(l, w, c): for a in range(w): print(a*" ", l*c)
unittest.main(verbosity=2)
<td><input disabled type="text" name="fname" style="width:235px;" value="{{ user.first_name }}"> </td>
>>> a = 10 >>> def test(): ... global a ... a = a + 2 ... >>> print a 10 >>> test() >>> print a 12 >>>
$ egrep hostmac filename.txt | sort -u | wc -l
import random count = 0 for x in range(20): a=random.randint(1000,2000) # b=(a>1500)// This is expected to give a boolean # print b if (a > 1500): count = count + 1 print count
import datetime as dt def draw_fft(self): ... outputfilename = 'output_{}.csv'.format( dt.datetime.now().strftime('%Y%m%d%H%M%S') ) np.savetxt(outputfilename, output, delimiter=',')
from collections import defaultdict initial_list = [ ['G1R', '2.56'], ['E219D', '11.56'], ['L335D', '2.56'], ['E248D', '90.28'], ['E219D', '2.56'], ['G1R', '15.78'], ['L335D', '2.56'], ] d = defaultdict(list) for k, v in initial_list: d[k].append(v) # possibly `int(v)` ?
import lxml.etree as le data = """<root xmlns:one="http://www.first.uri/here/" xmlns:two="http://www.second.uri/here/"> ...all other child elements here... </root>""" tree = le.XML(data) print(tree.nsmap) # {'two': 'http://www.second.uri/here/', 'one': 'http://www.first.uri/here/'}
>>> m = max(a) >>> [i for i, j in enumerate(a) if j == m] [9, 12]
words_list = ["Bluebird, 4005", "ABCD, 1", "EFGH, 2677", "IJKL, 2"] print sorted(words_list, key = lambda x: int(x.split(",")[1])) # ['ABCD, 1', 'IJKL, 2', 'EFGH, 2677', 'Bluebird, 4005']
def login_required(): def wrapper(fn): @wraps(fn) def decorated_view(*args, **kwargs): if not current_user.is_authenticated(): abort(401) # return jsonify(status='logged_off') return fn(*args, **kwargs) return decorated_view return wrapper
cv2.imwrite("IMAGE_NAME.png", warpedimage)
f = open('foo.dat','rb') # NOTE b for binary data = f.read() print len(data), f.tell() print repr(data[60:70])
{{ news.description|truncatewords:50 }}
>>> import requests >>> from bs4 import BeautifulSoup >>> r = requests.get('http://feeds.chicagotribune.com/~r/ChicagoBreakingNews/~3/T2Zg3dk4L88/story01.htm') >>> soup = BeautifulSoup(r.text, 'lxml') >>> soup.find('div', id='story-body') is not None False >>> soup = BeautifulSoup(r.text, 'html5') >>> soup.find('div', id='story-body') is not None True
i = 0 m = '' while i < len(s): m += ch2 if s[i] == ch else s[i] i += 1 return m
class Point3d(tuple): @property def x(self): return self[0] @property def y(self): return self[1] @property def z(self): return self[2]
>>> import ast >>> with open('/path/to/data2.txt', 'r') as classes: lines = [ast.literal_eval(line.strip()) for line in classes] >>> print lines [['Tom', 7, 2, 1], ['Jo', 8, 0, 0], ['Adelphe', 9, 0, 0]]
File.__contains__(path)
x='My Father is an American, and he is handsome. My Mother is from North America and she is nice' y = x.split()[1:] for (i,j) in enumerate(y): if j.startswith('America'): print y[i-1] an North
primes = [] for prime in xrange(1, 1000): for b in xrange(2, prime): if (prime % b == 0): break else: primes.append(prime) print primes
any('4110964_se' in f for f in files) # check if the string is in any of the list items
from copy import deepcopy g={1:'a',2:'b',3:["k",'c'],4:'d'} gt=copy.deepcopy(g) gt[3].remove('c')
foo(*(users_data['user_1'][k] for k in ('Age', 'address', 'height')))
class MyLongAdvancedClassName: ... _template = " My long advanced text %i " def method(self): print self._template
import re print re.sub(r'\bpi\b', 'math.pi', "2*pi") print re.sub(r'\bpi\b', 'math.pi', "the pink elephant")
>>> names = ['John', 'Bob'] >>> message = "{name} had a wonderful day at the park, but then {name} came and ruined it" >>> i = 0; >>> while '{name}' in message: ... message = message.replace('{name}', names[i], 1) ... i += 1 ... >>> message 'John had a wonderful day at the park, but then Bob came and ruined it'
if form.is_valid(): instance = form.save(commit=False) instance.commonObject = pk.loads(request.session.get('commonObject')) instance.save() return self.add_success(request, instance)
a = [intern("foo".replace("o","1")) for a in range(0,1000000)]
def numberOfNeighbors(rows, columns, row, column): topBottom = row in (0, rows-1) leftRight = column in (0, columns-1) if topBottom and leftRight: return 3 if topBottom or leftRight: return 5 return 8
>>> import win32evtlog >>> x = win32evtlog.EvtOpenChannelEnum() >>> win32evtlog.EvtNextChannelPath(x) u'Application' >>> win32evtlog.EvtNextChannelPath(x) u'HardwareEvents' >>> win32evtlog.EvtNextChannelPath(x) u'Internet Explorer' >>>
import csv spreadsheet_filenames = [ '0113_RE_fscom.csv', '0213_RE_fscom.csv', ] for filename in spreadsheet_filenames: with open(filename, 'r') as csvfile: sales = csv.reader(csvfile) for row in sales: print row
Python 2.7.2+ (default, Oct 4 2011, 20:06:09) [GCC 4.6.1] on linux2 Type "help", "copyright", "credits" or "license" for more information. >>> x=float("NaN") >>> x==x False
-e VCS+REPOS_URL[@REV]#egg=PACKAGE, --editable=VCS+REPOS_URL[@REV]#egg=PACKAGE
>>> names = ( "John", "Sal", "Bill" ) >>> ids = ( 123, 321, 231 ) >>> for x,y in zip(names, ids): ... print x,y ... John 123 Sal 321 Bill 231
x1 = [["x1", "y1"], ["x1", "x2"]] x2 = [["x1", "y1"], ["x1", "x2"], ["x2", "y2"]] set1 = {tuple(item) for item in x1} print [item for item in x2 if tuple(item) not in set1] # [['x2', 'y2']]
from operator import add, sub, mul, floordiv import random number1 = 9 number2 = 3 operators = {'+':add, '-':sub, '*':mul, '/':floordiv} operator_name = random.choice(operators.keys()) op = operators[operator_name] answer = op(number1, number2) question = "What is {}{}{}?".format(number1, operator_name, number2) print question print answer
class ExampleTestCase(unittest.TestCase): def setUp(self): pass def tearDown(self): time.sleep(1) # sleep time in seconds
def OnWaveletSelfAdded(event, wavelet): for id in wavelet.blips: blip = wavelet.blips[id] logging.debug(blip.text)
params = { 'version'='0.12', 'language'='en', ... } params = urllib.urlencode(params) params = params.replace('.', '%2E') resp = requests.get('?'.join(url, params), config={'encode_uri': False})
import functools class static_or_instance(object): def __init__(self, func): self.func = func def __get__(self, instance, owner): return functools.partial(self.func, instance) class C(object): @static_or_instance def a(self, arg): if self is None: print "called without self:", arg else: print "called with self:", arg C.a(42) C().a(3)
class T: def __init__(self,x): self.x = x def __radd__(self, other): return other + self.x test = (T(1),T(2),T(3),200) print sum(test)
time.sleep(delay-(time.time()-start))
import itertools lists = [[1,2,3,4], [1,2,3], [0,3,4]] print [sum(x) for x in itertools.izip_longest(*lists, fillvalue=0)] # prints [2, 7, 10, 4]
out_char = ctypes.c_char() result = lib.test(ctypes.byref(out_char))
session.sendline(cmd) # program started # put here user interaction # ... expect('(?i)password:'); sendline(passwd) ... session.prompt() # program ended (the shell prompt is shown)
path = '/path/to/database/file.db' conn = sqlite3.connect(path)
def get_success_url(self): if self.request.POST.get('save'): return reverse('success_url_for_save') elif self.request.POST.get('save_and_continue'): return reverse('success_url_for_save_and_continue', kwargs={'pk':self.object.pk}) else: return reverse('fallback_success_url')
>>> import os >>> "\x00"+os.urandom(4)+"\x00" '\x00!\xc0zK\x00'
class Wrapper(object): def __init__(self, wrapped): self.wrapped = wrapped for dunder in ('__add__', '__sub__', '__len__', ...): locals()[dunder] = lambda self, __f=dunder, *args, **kwargs: getattr(self.wrapped, __f)(*args, **kwargs) obj = [1,2,3] w = Wrapper(obj) print len(w)
def default_handler(parsed_url): pass def youtube_handler(parsed_url): pass def hulu_handler(parsed_url): pass handlers = { 'www.youtube.com': youtube_handler, 'hulu.com': hulu_handler, } handler = handlers.get(urlParsed.netloc, default_handler) handler(urlParsed)
>>> import string >>> ''.join(i for i in 'cats\xe2\x80\x99 faces' if i in string.printable) 'cats faces'
from OpenSSL import crypto p12 = crypto.load_pkcs12(file("push.p12", 'rb').read(), [password]) # PEM formatted private key print crypto.dump_privatekey(crypto.FILETYPE_PEM, p12.get_privatekey()) # PEM formatted certificate print crypto.dump_certificate(crypto.FILETYPE_PEM, p12.get_certificate())
def sort_with_indexes(data): sorted_data = sorted(enumerate(data), key=lambda key: key[1]) indexes = range(len(data)) indexes.sort(key=lambda key: sorted_data[key][0]) return [i[1] for i in sorted_data], indexes data, indexes = sort_with_indexes([1,3,4,2]) print data, indexes
$ ./qm.py -o 1,2,3 1X X1 $ ./qm.py -o 1,2 10 01 $ ./qm.py -o 0,15 1111 0000 $ ./qm.py -o 0,8,15 1111 X000
>>> class Example(object): ... pass ... >>> Example <class '__main__.Example'> >>> del Example >>> Example Traceback (most recent call last): File "<stdin>", line 1, in <module> NameError: name 'Example' is not defined
G = nx.erdos_renyi_graph(20,0.1) color_map = [] for node in G: if node <10: color_map.append('blue') else: color_map.append('green') nx.draw(G,node_color = color_map,with_labels = True) plt.show()
class Second(object): def __init__(self): self.variable3 = First() class Third(Second): def __init__(self): super(Third, self).__init__() self.variable4 = self.variable3.subvar2
>>> import random >>> functions = [functionA, functionB] >>> for _ in range(100): ... function = random.choice(functions) ... function()
class MyBooleanProperty(ndb.BooleanProperty): def _set_value(self, entity, value): if value == '': value = None ndb.BooleanProperty._set_value(self, entity, value)
def map_failure(ff): return {'Test Suite': ff['Test Suite'], 'Test': ff['Test'], 'Failure': failure, 'Project': 'project'} mappedFailures = [map_failure(ff) for ff in fixedFailures]
if (results.short and not results.verbose and not results.verbose2 and not results.list and not results.true):
>>> arr1 = ['name','age','sex'] >>> val1 = ['Jone','20','male'] >>> dict(zip(arr1, val1)) {'age': '20', 'name': 'Jone', 'sex': 'male'}
import csv def filter_time(filename, mintime, maxtime): timecol = 3 reader = csv.reader(open(filename)) next(reader) return [line for line in reader if mintime <= line[timecol] <= maxtime]
>>> p1 = re.compile(r'(?:%s)\s((?:to\s)?(\w+|\d+\w+)\s\w+)' % words) >>> dd = re.search(p1,str1) >>> dd.group() 'near oberoi mall' >>> cc = re.search(p1,str2) >>> cc.group() 'next to oberoi mall'
size_of_filtered_list = sum(1 for item in my_list if item % 2 == 0)
import pandas as pd import numpy as np print pd.DataFrame(np.array([[1,2],[3,4]])).stack() 0 0 1 1 2 1 0 3 1 4 dtype: int32
sortedSubjects = sorted(tmpSubjects.iteritems(), key=operator.itemgetter(1), cmp=comparator, # What about specifying the comparison? reverse=True)
thread = threading.Thread(target=win.player.get_midi_in, args=(test,))
'{:f}'.format(d) Out[12]: '0.000000001'
aa = {1:'a', 3:'c', 2:'b', 4:'d'} bb = {'apple':'a', 'pear':'b', 'mango': 'g'} bb_rev = dict((value, key) for key, value in bb.iteritems()) # bb.items() in python3 dd = dict((key, bb_rev[value]) for key, value in aa.iteritems() # aa.items() in python3 if value in bb_rev) print dd
def init_service(cls): class InitService(cls): def __init__(self, port='ignored'): super(InitService).__init__(5432) return InitService
def update(self): self.layout().removeWidget(self.child) self.child.setParent(None) self.child = QLabel("bar", self) self.layout().addWidget(self.child)
# refresh.py from django.core.management.base import BaseCommand, CommandError from main.models import * # You may want to import your models in order to use # them in your cron job. class Command(BaseCommand): help = 'Posts popular threads' def handle(self, *args, **options): # Code to refresh cache
>>> from urlparse import urlparse >>> o = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html') >>> o # doctest: +NORMALIZE_WHITESPACE ParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html', params='', query='', fragment='') >>> o.scheme 'http' >>> o.port 80 >>> o.geturl() 'http://www.cwi.nl:80/%7Eguido/Python.html'
import os.path BASE_DIR = os.path.dirname(os.path.abspath(__file__)) db_path = os.path.join(BASE_DIR, "PupilPremiumTable.db") with sqlite3.connect(db_path) as db:
import sqlalchemy import pyodbc engine = sqlalchemy.create_engine("mssql+pyodbc://<username>:<password>@<dsnname>") # write the DataFrame to a table in the sql database df.to_sql("table_name", engine)
skip=(slice(None,None,2),slice(None,None,2)) plt.quiver(x[skip], y[skip], u[skip], v[skip], color='black', headwidth=1, scale = 10, headlength=4)
In [1]: from decimal import Decimal, getcontext In [2]: def calculate(num, denom, precision=100): ...: getcontext().prec = precision ...: return str(Decimal(num) / Decimal(denom)) ...: In [3]: calculate(1, 7) Out[3]: '0.1428571428571428571428571428571428571428571428571428571428571428571428571428571428571428571428571429'
>>> 'Gen\xc3\xa8ve'.decode('latin1') u'Gen\xc3\xa8ve' >>> print 'Gen\xc3\xa8ve'.decode('latin1') GenÃ¨ve >>> 'Gen\xc3\xa8ve'.decode('utf8') u'Gen\xe8ve' >>> print 'Gen\xc3\xa8ve'.decode('utf8') Genève
import ast actual_list = ast.literal_eval(myList)
import subprocess out, err = subprocess.Popen(["pdftotext", "-", "-"], stdout=subprocess.PIPE).communicate(pdf_data)
match = re.search('U:\s*(\S+)') if match: username = match.group(1) match = re.search('U:\s*(\S+ - \S+)') if match: username_and_hash = match.group(1) match = re.search('U:\s*(\S+) - (\S+)') if match: username = match.group(1) userhash = match.group(2)
def __getattr__(self, attr): def default_method(*args): self.apply(attr, *args) return default_method
def index_containing_substring(the_list, substring): for i, s in enumerate(the_list): if substring in s: return i return -1
$ awk '{ sub(/^[0-9]+/,$2,$5); sub(/[0-9]+,$/,$3",",$6) } 1' file #name cdsStart cdsEnd exonCount exonStarts exonEnds NM_017436 431 586 3 431,440,513, 435,500,586, NM_001173466 720 950 4 720,752,821,823, 721,760,900,950,
yield whatever x = yield whatever
> ipython qtconsole --ConsoleWidget.font_size=11
for %f in (*.stl) do python file.py %f
>>> s = re.search(r".*\/(app.*)", "/home/python/app/index.html") >>> s.groups()[0] 'app/index.html'
>>> theListOfChars = ['a', 'b', 'x', 'd', 's'] >>> ''.join(theListOfChars) 'abxds'
def n_max(arr, n): indices = arr.ravel().argsort()[-n:] indices = (numpy.unravel_index(i, arr.shape) for i in indices) return [(arr[i], i) for i in indices]
rule = iptc.Rule() match = rule.create_match('state') match.state = 'RELATED,ESTABLISHED' match.target = iptc.Target('ACCEPT') chain = iptc.Chain(iptc.Table.(iptc.Table.FILTER), "INPUT") chain.insert_rule(rule)
import matplotlib.pyplot as plt x = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.65] y = [0, 0.15, 0.3, 0.35, 0.4, 0.55, 0.57, 0.58] fig = plt.figure() ax1 = fig.add_subplot(111) ax2 = ax1.twinx() ax3 = ax2.twiny() ax3.set_xlabel('2nd x-axis label') ax2.set_ylabel('2nd y-axis label') ax1.set_xlim([0,1]) ax1.plot(x, y)
In [11]: np.fromiter(xrange(10), count=10, dtype='float') Out[11]: array([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])
>>> import collections, operator >>> words = collections.Counter(map(operator.itemgetter(1), data)) >>> populars = [p for p in data if words[p[1]] >= 3]
from kotti.interfaces import IContent config.add_view( my_json_view, context=IContent, name='json', permission='view', renderer='json', )
props = <some list here> objects = [MyClass(property=foo, property2=prop) for prop in props] for obj in objects: obj.do_stuff(variable=foobar)
G = nx.MultiGraph()
{% regroup dict by col_mapper as column_gr %} {% for column in column_gr %} {{ column.grouper }}<br> {# assign the grouper to another variable #} {% with column.grouper as grouper %} {% regroup grouper by main_title as item_gr %} {% for i in item_gr %} {{ i }} {% endfor %} {% endwith %} {% endfor %}
valueString = """{"command":"SEARCH","data":{"someData":"someValue","otherData":"otherData"}}""" /// the """ ensures that the whole text between """ is handled as a string. payload = {'json': valueString}
from django.db import models, transaction class Course(models.Model): student_group = models.OneToOneField(Group, related_name="course_taken") @transaction.commit_on_success def save(self, *args, **kwargs): if not self.student_group_id: self.student_group, _ = Group.objects.get_or_create(name='_course_' + self.id + '_student') super(Course, self).save(*args, **kwargs)
values = [] for row in woof_1.findAll("tr", { "class" : "row_b" }): for col in row.findAll(re.compile('td')): if col.string: values.append(col.string) result = ''.join(values)
from tkFileDialog import askopenfilename fname = askopenfilename()
# do this once import re bad_strings = ['1080p', '720p'] # etc regex = '|'.join(re.escape(x) for x in bad_strings) subber = re.compile(regex, re.IGNORECASE).sub # do this once for each name name = name.replace(ext[1], '') # OR maybe better: name = ext[0] # see below cleanFileList.append(subber('', name))
#The structure of ListNode class ListNode: def __init__(self, val): self.val = val self.next = None # Supposes you have a circular linked list and you have a reference to head. You can do as follows to print the whole list. current = head.next while current != head: # stop when it comes back to head print current.val current = current.next
class AuthenticationMiddleware(object): def process_request(self, request): assert hasattr(request, 'session'), "The Django authentication middleware requires session middleware to be installed. Edit your MIDDLEWARE_CLASSES setting to insert 'django.contrib.sessions.middleware.SessionMiddleware'." request.user = SimpleLazyObject(lambda: get_user(request))
l = [('date_published', 'date'), ('headline', 'headline'), ('description', 'description')] for dict_val, html_val in l: try: meta_dict[dict_val] = html.find(html_val).text except: meta_dict[dict_val] = ''
subArray = [] newRow = [] for row in data: for i in xrange(0,len(row)): if (i % 3 == 0): continue newRow.append(row[i]) subArray.append(newRow) newRow = []
class GivenModel(models.Model): def change_view(self, request, object_id, form_url='', extra_context=None): your_obj = GivenModel.objects.get(id=asset_id.group(1)) extra_context = {'title': your_obj.description} return super(GivenModel, self).change_view(request, object_id, form_url, extra_context)
def get_list(self, term, offset=0, limit=DEFAULT_PAGE_SIZE): filters = list( field.ilike(u'%%%s%%' % term) for field in self._cached_fields ) filters.append(Organisation.org_id == "Google") return ( db.session.query(Product) .join(organisation_products_table) .join(Organisation) .filter(*filters) .all() )
class EmailSerializer(serializers.ModelSerializer): user_info = serializers.RelatedField(source='usermodel', read_only=True) class Meta: model = EmailAddress fields = ('id', 'email', 'user_info')
def add_after_every_n(iterator, item_to_add='\n', after_every=3): for i, element in enumerate(iterator, 1): # i counts from 1 yield element if i % after_every == 0: yield item_to_add pairs = [[1,2] for i in range(10)] pairs = [str(p) + ', ' for p in pairs] pairs_string = ''.join(add_after_every_n(pairs)) pairs_string = pairs_string[:-2] # remove last ', '
callable, args, state, _, _ = x.__reduce_ex__(2) y = callable(*args) if deepcopying: state = deepcopy(state) y.__dict__.update(state) return y
from PySide.QtCore import Signal class Gui(QWidget): def initUI(self): ... bgThread.dataReceived.connect(lambda data: lbl2.setText(str(data))) class BackgroundThread(QThread): dataReceived = Signal(list) ... def _summary(self): ... self.dataReceived.emit(data)
delta = end_financial_month - from_day return delta.days
[i for i, v in enumerate(L) if v[0] == 53]
var_1 = 'I have lots of text' var_2 = 'I have even more text' var_3 = 'but wait there is more' my_list = [var_1, var_2, var_3] for var in my_list: x = package.function(var) print x
label1.grid(row = 1, column = 1) label2.grid(row = 1, column = 2)
def Action1(self, intToPrint=None, **kwargs): print("Print 1: %d - %s"%(self.someVar,intToPrint)) def Action2(self, firstNum=None, firstString=None, **kwargs): print("Print 2: %d - %d %s"%(self.someVar,firstNum, firstString)) ... action1Group.set_defaults(func=MyClass.Action1) ... args.func(mc, **vars(args))
def Startup(): global PasswordSkip
>>> from urlparse import urljoin >>> urljoin('http://mysite.com/foo/bar/x.html', '../../images/img.png') 'http://mysite.com/images/img.png'
$ /usr/bin/python2.7 Python 2.7.1 (r271:86832, Jun 16 2011, 16:59:05) [GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin Type "help", "copyright", "credits" or "license" for more information. >>>
>>> import appuifw >>> import camera >>> def cb(im): ... appuifw.app.body.blit(im) ... >>> import graphics >>> appuifw.app.body=appuifw.Canvas() >>> camera.start_finder(cb)
In [3]: df.T.plot(kind='scatter', x=4, y=1)
batch_data = [allData[i] for i in rowIndices]
import iris cubes = iris.load('input.nc') # each variable in the netcdf file is a cube iris.save(cubes[0],'output.grib2') # save a specific variable to grib
def sendLine(self, line): return self.transport.write(line + self.delimiter)
In [9]: def foo(x): print "Called." return True In [10]: [1 for x in xrange(10) if foo(x)] Called. Called. Called. Called. Called. Called. Called. Called. Called. Called. Out[10]: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
>>> from datetime import datetime >>> d = datetime.strptime("10:30", "%H:%M") >>> d.strftime("%I:%M %p") '10:30 AM' >>> d = datetime.strptime("22:30", "%H:%M") >>> d.strftime("%I:%M %p") '10:30 PM'
cumulative = 0 for item in queryset: cumulative += item.minutes item.cumulative = cumulative
radii = np.linspace(0.5,1,10) thetas = np.linspace(0,2*np.pi,20) theta, r = np.meshgrid(thetas, radii) dr = 1 dt = 1 f = plt.figure() ax = f.add_subplot(111, polar=True) ax.quiver(theta, r, dr * cos(theta) - dt * sin (theta), dr * sin(theta) + dt * cos(theta))
import numpy as np from itertools import combinations t = np.random.rand(4,3) # dummy example np.array n_cols = t.shape[1] # number of columns # all the combinations in a tuple: combs = tuple( t[:, comb] for n in range(n_cols+1) for comb in combinations(range(n_cols), n) )
import sframe as sf from scipy.sparse import csr_matrix x = sf.SFrame({'users': [{'123': 1.0, '122': 5}, {'134': 3.0, '123': 10}]}) x = x.add_row_number('row_id') x = x.stack('users') A = csr_matrix((x['X3'], (x['row_id'], x['X2'])), shape=(2, 135))
void SomeCFunction(void) { /* ensure we hold the lock */ PyGILState_STATE state = PyGILState_Ensure(); /* Use the Python API */ ... /* Restore the state of Python */ PyGILState_Release(state); }
result = ["_".join((i, j)) for i, j in itertools.izip(la, itertools.cycle(lb))]
>>> s = 'she sells sea shells by the sea shore' >>> # Use hashlib >>> import hashlib >>> int(hashlib.sha1(s).hexdigest(), 16) % (10 ** 8) 58097614L >>> # Use hash() >>> abs(hash(s)) % (10 ** 8) 82148974
iter1 = ['\t'.join('1'*10) for _ in range(3)] result = '\n'.join(iter1).replace('\t', '\n')
import pytest @pytest.yield_fixture(scope='class') def teardown_after_all_params(): yield execute_at_the_end() @pytest.mark.usefixtures('teardown_after_all_params') class TestLinks: @pytest.mark.parametrize('lang', ["EN", "FR"]) def test_whats_hot_quick_links_are_displayed(self, lang): # Do something here
In [48]: s='Link: http://google.com/song.mp3 Another link, http://yahoo.com/another_song.mp3' In [49]: re.findall('http.*?mp3', s) Out[49]: ['http://google.com/song.mp3', 'http://yahoo.com/another_song.mp3']
from collections import defaultdict L = [1,2,45,55,5,4,4,4,4,4,4,5456,56,6,7,67] d = defaultdict(int) for i in L: d[i] += 1 result = max(d.iteritems(), key=lambda x: x[1]) print result # (4, 6) # The number 4 occurs 6 times
from argparse import RawTextHelpFormatter from django.core.management.base import BaseCommand class Command(BaseCommand): def create_parser(self, *args, **kwargs): parser = super(Command, self).create_parser(*args, **kwargs) parser.formatter_class = RawTextHelpFormatter return parser
df.groupby(['col2','col3'], as_index=False).sum()
def divide(arr, depth, m): if len(complements) <= depth: complements.append(2 ** (depth + 2) + 1) complement = complements[depth] for i in range(2): if complement - arr[i] <= m: arr[i] = [arr[i], complement - arr[i]] divide(arr[i], depth + 1, m) m = int(raw_input()) arr = [1, 2] complements = [] divide(arr, 0, m) print arr
itertools.product("ABC", repeat=4)
if sys.version_info < (3, 0): data = bytes(data) else: data = bytes(data, 'utf8')
import requests r = requests.get('http://site.com/source.json', params={'s': 'somevalue/or other here'}) json_result = r.json()
with open('file') as f: for line in f: pos = f.find('Total IPC') if pos >= 0: line[pos : pos + as_many_chars_you_need]
def method(self, alpha, beta, gamma, delta, epsilon, zeta, eta, theta, iota, kappa): pass
image = Gtk.Image(stock=Gtk.STOCK_OPEN) self.browse_button = Gtk.Button(label="Some Label", image=image)
import os def locateA(pattern, root): file = open(pattern, 'r') for path, dirs, files in os.walk(root): for word in files: file.seek(0) # this line is new for line in file: if line.strip() in word: print os.path.join(path, word), line.strip()
>>> dateutil.parser.parse('Sat Feb 06 07:00:13 -0800 2010') datetime.datetime(2010, 2, 6, 7, 0, 13, tzinfo=tzoffset(None, -28800))
import re PASSED = re.compile(r" passed : (\d+)") def get_passed_values(s): for match in PASSED.finditer(s): yield int(match.group(1)) # return the number as an integer def is_complete(s): return any(v > 0 for v in get_passed_values(s)) with open("test.txt") as test: s = test.read() if is_complete(s): print("TASK COMPLETED") else: raise ValueError("All 0s!")
try: # Python 3.3 or later import unittest.mock as mock except ImportError: # Make sure you install it first import mock class TestFoo(unittest.TestCase): def setUp(self): self.f = Foo() def test_bar(self): with mock.patch.object(self.f, '_is_positive_number') as is_pos: self.f.bar(3) self.assertTrue(is_pos.called)
x.index.asof(start)
python - <<'____HERE' """Look, we can have double quotes!"""" 'And single quotes! And `back ticks`!' "$(and what looks to the shell like process substitutions and $variables!)" ____HERE
class System(models.Model): pass class Interface(models.Model): assigned_to = models.ManyToManyField(to=User) system = models.ForeignKey(System) @property def systems(self): Interface.objects.get(system=self.system).interfacedsystem_set.all() class InterfacedSystem(models.Model): interface = models.ForeignKey(Interface) system = models.ForeignKey(System)
x1 = y1 = x2 = y2 = 0
select users.*, count(*) over (partition by friendship.user) from users inner join friendship on users.id = friendship.user order by count
with open(yourfile) as f: rows = [l.split() for l in f] names, firstnums, secondnums = zip(*rows)
def partitionIndexes(totalsize, numberofpartitions): # Compute the chunk size (integer division; i.e. assuming Python 2.7) chunksize = totalsize / numberofpartitions # How many chunks need an extra 1 added to the size? remainder = totalsize - chunksize * numberofpartitions a = 0 for i in xrange(numberofpartitions): b = a + chunksize + (i < remainder) # Yield the inclusive-inclusive range yield (a, b - 1) a = b
# Log every 1000 lines. LOG_EVERY_N = 1000 for i in range(1000): ... # calculations with i if (i % LOG_EVERY_N) == 0: print "logging: ..."
self.input.__iter__.return_value = iter(["5 5 N", "LRMR"])
df[~df.index.isin(df_a.index+df_b.index)]
options = [('python','hello.py'), ('python','hello2.py')] for option in options: process = subprocess.Popen(option) #do something here
>>> from Foundation import * >>> s = NSAppleScript.alloc().initWithSource_("tell app \"Finder\" to activate") >>> s.executeAndReturnError_(None)
df2 = pd.DataFrame(df.transpose().apply(lambda x: [', '.join(x)], axis=1))
def wavg(subdf): series = pd.Series() subdf = subdf.dropna(subset=['data']) series['np.mean'] = np.mean(subdf['data']) series['np.average (no weights)'] = np.average(subdf['data']) series['np.average (weighted)'] = np.average(subdf['data'], weights=subdf['Weights']) series['np.ma.average (weighted)'] = np.ma.average(subdf['data'], weights=subdf['Weights']) return series
python ../src/script1.py
import subprocess from subprocess import PIPE def main(): process = subprocess.Popen('echo %USERNAME%', stdout=PIPE, shell=True) username = process.communicate()[0] print username #prints the username of the account you're logged in as if __name__ == '__main__': main()
import RPi.GPIO as GPIO import time import subprocess GPIO.setmode(GPIO.BCM) GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_UP) while True: input_state = GPIO.input(18) if input_state == False: subprocess.call(something) # block until finished (depending on application)
>>> "Hello World!" 'Hello World!' >>> '\'Hello World!\', he said' "'Hello World!', he said" >>> "\"Hello World!\", he said" '"Hello World!", he said' >>> '"Hello World!", doesn\'t cut it anymore' '"Hello World!", doesn\'t cut it anymore'
import pandas as pd df = pd.read_excel(excel_file_path, sheetname="sheet_name")
data=np.array(((3,0,0,.24),(4,1,1,.41),(2,1,1,.63),(1,1,3,.38))) #imagine rows of a spreadsheet #now do sortrows(data,[3,-4]) ix=np.lexsort((data[:,3][::-1],data[:,2])) #this yields [0,2,1,3] #note that lexsort sorts first from the last row, so sort keys are in reverse order data[ix]
// rect should be empty region = XFixesCreateRegion(display, &rect, 1); XFixesSetWindowShapeRegion(display, window, ShapeInput, 0, 0, region); XFixesDestroyRegion(display, region);
from django.conf import settings text = u'<img src="%simages/%s"> %s' % (settings.STATIC_URL, ball_file, val)
def name_email(name): correct_email = False while correct_email == False: email = input('what is your email: ') if '@' in email: print('name and email accepted \n') print('name: ',name) print('email: ',email) correct_email = True else: print('email invalid, please try again \n') return email
result = re.sub(r"""(?x) (?<!\\) # Make sure that there is no backslash before the current position \\ # Match a backslash (?= # only if... (?:\\\\)* # an even number of backslashes follows (including zero) (?!\\) # and no further backslashes follow after that ) # (End of lookahead assertion)""", r"\\\\", subject)
>>> s = '"1,724,741","24,527,465",14.00,14.35,14.00,14.25' >>> import csv >>> r = csv.reader([s]) >>> for row in r: ... print ','.join(x.replace(",", "") for x in row) ... 1724741,24527465,14.00,14.35,14.00,14.25
x=foo[index]
df[c] = (df[c].str.lower() .str.decode('utf-8') .map(lambda x: unicodedata.normalize('NFKD', x)) .str.encode('ascii', 'ignore'))
def find_max(my_list): m = max([find_max(x) if type(x) is list else x for x in my_list]) return m
path = 'D:/my path/' + str(ran) + '.wav' wave_obj = sa.WaveObject.from_wave_file(path)
>>> [user.get('name') for user in root.findall('.//User')] ['admin']
s = 'A, 20140101, B, 20, C' print(s.replace(" 20,"," 30.1,")) A, 20140101, B, 30.1, C In [6]: s = 'A, 20140101, B, 20, C' In [7]: s.replace(" 20,"," 30.1,") Out[7]: 'A, 20140101, B, 30.1, C' In [8]: s = 'A, 120, 140101, B, 20, C' In [9]: s.replace(" 20,"," 30.1,") Out[9]: 'A, 120, 140101, B, 30.1, C'
entranche = poeme.split()
a = np.array([[1, 2, 3], [2, 3, 4] ,[4, 5, 6]]) friedmanchisquare(*(a[i, :] for i in range(a.shape[0])))
from PIL import Image from cStringIO import StringIO a = Image.new('RGB', (10, 10), 'black') # ... buf = StringIO() a.save(buf, 'png') b64img = '<img src="data:image/png;base64,{0}" />'.format(buf.getvalue().encode('base64'))
$cat set_3.txt | parallel -j+0 -k "python domaincheck.py {}"
get(key[, default]) Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a KeyError.
>>> s = "hello" >>> s[3] 'l' >>> s[5] Traceback (most recent call last): File "<stdin>", line 1, in ? IndexError: string index out of range >>> s[0] 'h' >>> s[-1] 'o' >>> s[-5] 'h' >>> s[-6] Traceback (most recent call last): File "<stdin>", line 1, in ? IndexError: string index out of range >>>
>>> from bs4 import BeautifulSoup >>> html = ''' ... <html> ... <body> ... <a title="dynamic link" href="test1.php">text</a> ... <a href="test2.php">text</a> ... </body> ... </html> ... ''' >>> soup = BeautifulSoup(html) >>> soup.select('a[title]') [<a href="test1.php" title="dynamic link">text</a>]
from decimal import Decimal x = Decimal('0.0000000001') y = Decimal('-0.00000000001')
>>> from collections import namedtuple >>> Person = namedtuple("Person", "name age") >>> Person("Alice", 33) Person(name='Alice', age=33) >>> alice = _ >>> bob = Person(age=27, name="Bob") >>> alice == bob False >>> bob.age 27 >>>
In [11]: df = pd.DataFrame([[1,2],[2,4]], columns=['1stcol', '2ndcol']) In [13]: df.columns Out[13]: Index([u'1stcol', u'2ndcol'], dtype='object') In [14]: df.columns[0] Out[14]: '1stcol' In [16]: df['1stcol'].name Out[16]: '1stcol'
new_files = open(source_file).read().split(u'\u2022') for par in new_files: open("%s.txt"%new_files.index(par),"w").write("%s"%par) LOAD DATA INFILE "%s.txt"%new_files.index(par) INTO TABLE your_DB_name.your_table;
import mock def mocked_get_now(timezone): dt = datetime.datetime(2012, 1, 1, 10, 10, 10) return timezone.localize(dt) @mock.patch('path.to.your.models.MyClass.get_now', side_effect=mocked_get_now) def your_test(self): # Within this test, `MyClass.get_now()` is a mock that'll return a predictable # timezone-aware datetime object, set to 2012-01-01 10:10:10.
# assuming your filters are stored in a list called all_filters all_filter_image = zeros(10*28, 30*28) for filter_num in range(300): # calculate start_x and start_y based on the size of your "large filter" # and the filter index all_filter_image[start_x:start_x + 28, start_y: start_y + 28] = all_filters[filter_num]
... def on_key_release(self, widget, ev, data=None): if ev.keyval == Gdk.KEY_Escape: #If Escape pressed, reset text widget.set_text("") ... def __init__(self): Gtk.Window.__init__(self) editor = Gtk.Entry() editor.connect("key-release-event", self.on_key_release) self.add(editor)
>>> from bs4 import BeautifulSoup >>> >>> data = """ ... <div> ... <p>text1</p> ... <p></p> ... <p>text2</p> ... </div> ... """ >>> soup = BeautifulSoup(data, "html.parser") >>> [p.get_text() for p in soup.find_all("p", text=True)] [u'text1', u'text2']
from xlsxwriter.workbook import Workbook workbook = Workbook('output.xlsx') worksheet = workbook.add_worksheet() format = workbook.add_format() format.set_border(style=1) worksheet.write('A1', "Hello, world!", format=format) workbook.close()
%%writefile filename.py
import numpy as np import matplotlib.pyplot as plt data = np.arange(25) data.shape = (5,5) plt.imshow(data, interpolation='none', extent=(-3, 27, 5, 31)) plt.show()
with open('file.dat') as input_file: newLines = [] for line in input_file: newLine = [x.strip() for x in line.split('|')] if len(newLine) == 6 and newLine[3] and newLine[4]: newLines.append(newLine)
def primeNumbers(limit): primeList = [2] for i in nextPrime(primeList): if i > limit: break primeList.append(i) return primeList
def finder(st,past_ind=0,l=None): if l is None: l = [] ... rest of function ...
class1 = {} with open("1.txt", "r+") as f: for line in f: columns = line.split(":") if len(columns) == 2: name = columns[0].strip() scores = map(int, columns[1].split(',')) class1[name] = scores for name, scores in class1.items(): print('{}: {}'.format(name, max(scores)))
>>> import subprocess >>> subprocess.call(['gksudo','python that_file.py'])
args, option_dict = ParseArguments(['', colCasaBasePath, "--default_partition="])
import sys sys.foo = 3
import ctypes def show_float(x): asdouble = ctypes.c_double(x) xpointer = ctypes.addressof(asdouble) xdata = ctypes.string_at(xpointer, 8) print "".join([bin(ord(i))[2:] for i in xdata]) x = 3.14 show_float(x) # prints 1111110000101111010111010001101110001111010011000000
data = "this this this %this %this" data = ' '.join(data.split('%')[::2]) data # => "this this this this"
>>> a = [0, 1, 2, 3] >>> for a[-1] in a: ... print a ... [0, 1, 2, 0] # assigned a[0] == 0 to a[-1] (or a[3]) [0, 1, 2, 1] # assigned a[1] == 1 to a[-1] [0, 1, 2, 2] # assigned a[2] == 2 to a[-1] [0, 1, 2, 2] # assigned a[3] == 2 (since the previous iteration) to a[-1]
In [63]: df.reindex(sorted(df.index, key=lambda x: x.lower())) Out[63]: Up Down BB LL MM BB LL MM cdiGMP 90 0 143 129 0 78 Pam3CSK4 0 81 0 0 60 0 Poly_IC 32 542 73 82 92 73
layout['yaxis']['range'] = [-5, 15]
import sys with open(sys.argv[1],'r+') as f1: lines=[x.strip() for x in f1] f1.truncate(0) f1.seek(0) for x in lines: if x: f1.write(x+'\n') else: f1.write("{0}:{1}\n\n".format(sys.argv[2],sys.argv[3])) f1.write("{0}:{1}\n\n".format(sys.argv[2],sys.argv[3]))
B = A[:] #makes a copy of only the first level of the mutable B = copy(A) #same as above, returns a 'shallow copy' of A B = deepcopy(A) #copies every element in the mutable, on every level
class JsonMinify(UIModule): def render(self, path): code=self.render_string(path) return slimit.minify(code)
import pandas as pd import numpy as np N = 100 df = pd.DataFrame( {'date': pd.date_range('2000-1-1', periods=N, freq='H'), 'value': np.random.random(N)}) index = pd.DatetimeIndex(df['date']) df.iloc[index.indexer_between_time('8:00','21:00')]
>>> print(textwrap.dedent(s)) Controller = require 'controller' class foo view: 'baz' class: 'bar' constructor: -> Controller.mix @
KEY_END : (lambda: move_to_line(widget.last_line), None)
App = win32com.client.dynamic.Dispatch("EA.App") EA = App.Repository if not EA.OpenFile("PATHTOYOUR.eap"): print ("load failed") for package in EA.Models: print(package.Name); Project = EA.GetProjectInterface() Project.Exit()
def Foo(Bar): def __setattr__(self, attr, value): # do something with attr and value super(Foo, self).__setattr__(attr, value)
In [5]: ss_prices Out[5]: values MM1 1 MM2 2 3MM 3 4AA 4 In [6]: ss_prices.filter(regex='^MM', axis=0) Out[6]: values MM1 1 MM2 2
element = driver.find_element_by_class_name('abc') href = element.get_attribute('href') href # => u'http://example.com/'
.. toctree:: ServerCommHandler
>>> from pathlib import Path >>> Path('a/b/c/d').parts ('a', 'b', 'c', 'd') >>> Path('a/b/c/d').parts[0] 'a'
secondr_table = Candidate._descriptor.find_relationship('voters').secondary_table cands_by_rank = ( session.query( Candidate.id, func.count(secondr_table.c.candidate_id).label('total') ) .join(secondr_table) .group_by(Candidate) .order_by('total DESC')
@mock.patch('path.my_file.randint', return_value=0) def test_place_value(m_randint): obj = math_q.Questions() obj.place_value("value of {0} in {1}", [1,2,3,4]) m_randint.assert_called_once_with(0, 3) assert obj.questions["question1"] == ...
>>> re.split('(\W)', 'foo/bar spam\neggs') ['foo', '/', 'bar', ' ', 'spam', '\n', 'eggs']
bulk = db.testdata.initialize_unordered_bulk_op() for i in range (0, len(ids)): bulk.find( { '_id': ids[i]}).update({ '$set': { "isBad" : "N" }}) print bulk.execute()
$output = array(); exec($some_command, $output);
with open("file1.txt", 'r') as in_file, open("file2.txt", 'a') as out_file: for lines in in_file: line = lines.strip() # Perform some operation out_file.write(line) out_file.write('\r\n')
import matplotlib.pyplot as plt import numpy as np x = np.arange(500) + 100 y = 50 * np.cos(x / 10.0) + 100 fig, ax = plt.subplots() ax.imshow(plt.imread('floor_plan.gif'), origin='lower') ax.autoscale(False) ax.plot(x, y) plt.show()
a = "this is the right string" b = "this is right the string" sum([1 for i,v in zip(a.split(), b.split()) if i == v])
from datetime import datetime, timedelta now = datetime.now() now = now - timedelta(minutes = now.minute % 15, seconds = now.second, microseconds = now.microsecond )
def edit_resource(res_name, res_id): res = False with db_pool().manager() as conn: cursor = conn.cursor() sql = """UPDATE `resource` SET `resource_name` = %s WHERE id = %s;""" if cursor.execute(sql, (res_name, res_id)) > 0: res = True conn.commit() return res
Ig_txts = [] i=340 while i <= 1020: Ig_txts.append( 'Ig='+str(i) ) i += 40 for Ig_txt in Ig_txts: path = 'C:/test/'+Ig_txt+'/340_TXT' out_file = 'C:/test/'+Ig_txt+'/Grey_Zone.csv' os.chdir(path) ... ...
from gevent import monkey monkey.patch_all(thread=False)
class BorgLike: _shared = 'default' def __init__(self, unique): self.unique = unique @property def shared(self): return BorgLike._shared @shared.setter def shared(self, value): BorgLike._shared = value
#!/usr/bin/env python import string s=string.Template(""" <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> <html lang="en"> <head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <title>My page</title> </head> <body> <p>$text</p> </body> </html> """) s.substitute(text='Hello World')
class Class1Test(TestCase): @mock.patch('mymodule.external_function') def test_method1(self, mock_external_function): pass
import poplib M = poplib.POP3_SSL('pop3.live.com', 995) #Connect to hotmail pop3 server try: M.user(raw_input("username: ")) #Get the username from the standar input M.pass_(raw_input("password: ")) #Get the password from the standar input except: print "username or password incorrect" else: print "Successful login"
import re StringIn = 'negxxx data1 xxxneg out of span negxxx data2 xxxneg negzzz data1 zzzneg out of span negzzz data2 zzzneg' StringIn = re.sub(r"negxxx(.*?)xxxneg", r"<span class='neg_xxx'>\1</span>" , StringIn) StringIn = re.sub(r"negzzz(.*?)zzzneg", r"<span class='neg_zzz'>\1</span>" , StringIn) print StringIn
My Computer ‣ Properties ‣ Advanced ‣ Environment Variables
>>> 'foo #comment'.split('#', 1)[0] 'foo ' >>> 'foo comment'.split('#', 1)[0] 'foo comment'
for line in infile: columns = line.strip().split() for x in data[columns[0]]: for y in data[columns[1]]: print x, y
import Image sizes = [(120,120), (720,720), (1600,1600)] files = ['a.jpg','b.jpg','c.jpg'] for image in files: for size in sizes: Image.open(image).thumbnail(size).save("thumbnail_%s_%s" % (image, "_".join(size)))
function M=mandelPerf() rr = -2:0.005:0.5; ii = -1:0.005:1; [R,I] = meshgrid(rr,ii); M = arrayfun(@(x) mandel(x), R+1i*I); end function n = mandel(z) n = 0; c = z; for n=0:100 if abs(z)>2 break end z = z^2+c; end end
>>> import lxml.etree >>> fragment = '<div>text1<span>childtext1</span>text2<span>childtext2</span>text3</div>' >>> div = lxml.etree.fromstring(fragment) >>> div.xpath('./text()') ['text1', 'text2', 'text3']
def sort_key(list_): if list_[2] == 's': return (list_[0], 0) return (list_[0], 1) test_list = [[1, 2, 's'], [1, 5, 'e'], [2, 4, 'e'], [2, 3, 's']] test_list.sort(key=sort_key) # [[1, 2, 's'], [1, 5, 'e'], [2, 3, 's'], [2, 4, 'e']]
arr = np.arange(6).reshape((2, 3)) desired_shape = np.array((5, 8)) pads = tuple((0, i) for i in (desired_shape-arr.shape)) # pads = ((0, add_rows), (0, add_columns), ...) np.pad(arr, pads, mode="wrap")
import collections with open("access_log.log","r") as arxiu_de_log: clean_log = [ (line.split(' ')+[None]*10)[10] for line in arxiu_de_log] counter = collections.Counter(clean_log) for count in counter.most_common(50): print(str(count[1])+"\t"+ str(count[0]))
export var="value"
adb shell dumpsys netstats
REMOVE: line.lower() l=line.split(" ") ADD: l = re.sub(r"\s+[\!\?\.\,\:\@]+\s+", r" ", s2.lower()).split(" ")
t = tuple(x[0] for x in s)
def ballPickerTwo(): a = random.randint(1, 59) b = a while b == a: b = random.randint(1, 59) c = b while c == b or c == a: c = random.randint(1, 59) d = c while d == c or d == b or d == a: d = random.randint(1, 59) ...
GET indice/_search { "query": { "bool": { "should": [ { "match": { "title": "title" } }, { "match": { "category": "category" } } ] } } }
r = master() r.get() # [3, 7] r.collect() # [(<GroupResult: #1 [#2, #3]>, [3, 7]), # (<AsyncResult: #2>, 3), # (<AsyncResult: #3>, 7)]
if int(c.high0) >= 34: plt.text(x, y, int(c.high0), fontsize=7, fontweight='bold')
>>> i = 1 >>> nestedTuple = [('a','b','c'), ('d','e','f'), ('g','h','i')] >>> nestedTuple[1] = nestedTuple[1][:i] + ('xXXXXx', ) + nestedTuple[1][i+1:] >>> nestedTuple [('a', 'b', 'c'), ('d', 'xXXXXx', 'f'), ('g', 'h', 'i')]
m = hashlib.md5() m.update('test') m.hexdigest()
>>> import json >>> json.loads('"\u003Cp\u003E"') u'<p>'
import pandas as pd pre_defined_list = ['foo', 'bar', 'baz'] good_data = [] for chunk in pd.read_csv('large_file.csv', chunksize=10**6): chunk = chunk[chunk['column_to_check'].isin(pre_defined_list)] good_data.append(chunk) df = pd.concat(good_data)
lines = sys.stdin.readlines()
leg = ax.legend() for t in leg.texts: t.set_multialignment('center')
set count to 0 for each element in the list: if the element is what we are looking for: add one to count
$.each(data.dates, function(i, val) { $('ul.list-group').empty().append( $('<li>').addClass('list-group-item list-group-item-success').text(val) ) });
tuple = Tuple(blah) t0 = Property(depends_on="tuple", fget=lambda self: self.tuple[0])
{% set escaped = "<div></div>"|e %} {{ '<div>'|safe + escaped + '</div>'|safe }}
from bs4 import BeautifulSoup soup = BeautifulSoup(html) ticketCount = soup.find('span', id='ticket_count').get_text(strip=True) print(ticketCount)
from azure.storage import QueueService import base64 queue_service = QueueService(account_name, account_key) queue_service.put_message('taskqueue', base64.b64encode('Hello world!'))
buildpath = sys.argv[1] buildpath = buildpath.replace('\\', '\\\\') print buildpath
from numpy import * # Your original list of numpy arrays ... b = [array([5, 7]), array([5, 5])] # ... can be converted to list of lists c = [list(x) for x in b]
import foo bar = foo.bar del foo
if any(c not in 'abc' for c in _str): # Don't use str as a name. print('Wrong character')
>>> import urllib2 >>> >>> request = urllib2.Request('http://downloads.graboidvideo.com/download_filter .php?file=GraboidVideoSetup.pkg&platform=Mac') >>> response = urllib2.urlopen(request) >>> >>> print response.info().getheader('Content-Type') application/octet-stream >>> >>> >>> request = urllib2.Request('http://www.yahoo.com') >>> response = urllib2.urlopen(request) >>> >>> print response.info().getheader('Content-Type') text/html;charset=utf-8
>>> seq = [[11, 12, 13, 14], [15, 16, 17]] >>> nseq = [["Point {}".format(i) for i in range(1, len(sub)+1)] for sub in seq] >>> nseq [['Point 1', 'Point 2', 'Point 3', 'Point 4'], ['Point 1', 'Point 2', 'Point 3']]
import glob, os.path paths = glob.glob("/sys/bus/w1/devices/28-*") path_names = [os.path.basename(path) for path in paths] if len(path_names) > 0: first_sensor = os.path.normpath(os.path.join(path_names[0], "w1_slave")) while True: # read from sensor file
// align on 1-byte #pragma pack(push, 1) struct MeshHeader { unsigned short _vertex_size; uint32 _vertex_count; unsigned short _index_buffer_count; short _position_offset; // ... }; // restore alignment #pragma pack(pop)
re.findall("%([^%]+)%", text)
average_diff = ts.groupby([ts.index.month, ts.index.day]).apply( lambda g: g - g.mean() )
body = {'key1': user['info1'], 'key2': user['info2']} service = build("myAPI", "v1", http=http, discoveryServiceUrl=DISCOVERY_URL) service.updateFan(websafeFanKey=fan['websafeKey'], body=body).execute()
# module.py: """About the module. module.data: contains the word "spam" """ data = "spam"
print(end1 + end2 + end3 + end4 + end5 + end6, end="") print(end7 + end8 + end9 + end10 + end11 + end12)
import datetime import matplotlib.pyplot as plt x = ['Mon Sep 1 16:40:20 2015', 'Mon Sep 1 16:45:20 2015', 'Mon Sep 1 16:50:20 2015', 'Mon Sep 1 16:55:20 2015'] y = range(4) x = [datetime.datetime.strptime(elem, '%a %b %d %H:%M:%S %Y') for elem in x] (fig, ax) = plt.subplots(1, 1) ax.plot(x, y) fig.show()
for line in file:
fig1,ax1=plt.subplots() fig2,ax2=plt.subplots() ax1.pie(...) ax2.pie(...) fig1.savefig(...) fig2.savefig(...)
def give_winner(first_selection, second_selection): rules = { 1: lambda x: x in (3, 4), 2: lambda x: x in (1, 5), 3: lambda x: x in (2, 4), 4: lambda x: x in (2, 5), 5: lambda x: x in (3, 1) } return rules[first_selection](second_selection)
import networkx as nx from nxpd import draw G = nx.DiGraph() G.graph['dpi'] = 120 G.add_nodes_from(range(1,9)) G.add_edges_from([(1,2),(1,3),(2,4),(3,6),(4,5),(4,6),(5,7),(5,8)]) draw(G, show='ipynb')
ssh-keygen -q -N '' -C 'generated key' -t rsa -f /path/to/key
import re m = re.search(r'pll=(\d+\.\d+),(\d+\.\d+)', 'https://www.testweb.com/cordi?ll=41.403781,2.1896&z=17&pll=41.403781,2.1896') print m.groups()
<tr> % for col in user_cols: ${getattr(self, col)()} % endfor </tr>
String align = selenium.getAttribute("ele_locator@align");
result = [] for model in [Model1, Model2, Model3]: names = model.objects.filter(name__startswith='bla') \ .values_list('name', flat=True).distinct() result += names
>>> np.frombuffer(buffer("\0\0"), dtype=np.float16)[0] 0.0 >>> np.frombuffer(buffer("\x00\x3c"), dtype=np.float16)[0] 1.0
link_string = '<a href="/search/?q=%%23%s"> %s </a>'
>>> eval(input('bricks are heavy')) bricks are heavy2, 30 Traceback (most recent call last): File "<stdin>", line 1, in <module> TypeError: eval() arg 1 must be a string or code object
<a href="{{ ''.join(['http://', entry.Url]) }}">{{ entry.Url }}</a> # entry.Url == www.google.com # <a href="http://www.google.com">www.google.com</a>
d = defaultdict(lambda: defaultdict(int))
str(child.encode('utf-8'))
# Emulator Management: Create, Start and Wait before_script: - echo no | android create avd --force -n test -t android-19 --abi armeabi-v7a - emulator -avd test -no-skin -no-audio -no-window & - android-wait-for-emulator - adb shell input keyevent 82 &
results = np.einsum('ij,jkl->ikl',factor,input)
>>> def func(): ... return "foo" ... >>> func() # Actually call the function; statement returns the function's return value 'foo' >>> func # Reference the function as value; statement returns *the function itself* <function func at 0x7f2c7a65b938> >>> var = func # Assign the function value to another variable >>> var # Now "var" references the same function as "func"... <function func at 0x7f2c7a65b938> >>> var() # ...and can also be called as a function 'foo' >>>
N, M, K = 100, 200, 300 matrixs = [sparse.rand(N, M, format="csr") for i in xrange(K)] matrixs2 = [m.tolil().reshape((1, N*M)) for m in matrixs] m1 = sparse.vstack(matrixs2).tocsr() # test with dense array #m2 = np.vstack([m.toarray().reshape(-1) for m in matrixs]) #np.allclose(m1.toarray(), m2)
intermediate_list = (combinations(item,2) for item in windowed) # outer parentheses required
class Food(object): def kimchi(self): return 'mmm' class country(object): def __init__(self): self.food = Food()
backupDir = "C:/Users/myuser/backups/" backupFile = "mybackup.zip" file = zipfile.ZipFile(backupDir + backupFile, "w") for name in os.listdir(backupDir): if name == backupFile: continue fullname = backupDir + name print "Found " + name file.write(fullname, os.path.basename(name), zipfile.ZIP_DEFLATED) file.close()
new_obj = random.choice(SHAPES)()
>>> s = "cats \\ dogs" >>> print s cats \ dogs >>> print s.replace("\\", "\\\\") cats \\ dogs
params = ["my.exe", "-param1", "-param2", "value 2"] if debug: print("executed command: " + " ".join(params)) result = subprocess.check_call(params)
band0 = biglist[::nbands] band1 = biglist[1::nbands] ....
>>> [x for x in L for y in range(4)] [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
myDictionary["key1"]["aKey"] = newValue
bounds = self.canvas.bbox(myText) # returns a tuple like (x1, y1, x2, y2) width = bounds[2] - bounds[0] height = bounds[3] - bounds[1]
>>> def frob(n=None): ... if n is None: ... n = int(raw_input("Please enter a value:")) ... return n**2 + n ... >>> frob(23) 552 >>> frob() Please enter a value:42 1806
int1, int2 = tuple
import urllib2 from multiprocessing.dummy import Pool def generate_urls(): # generate some dummy urls for i in range(100): yield 'http://example.com?param=%d' % i def get_url(url): try: return url, urllib2.urlopen(url).read(), None except EnvironmentError as e: return url, None, e pool = Pool(20) # limit number of concurrent connections for url, result, error in pool.imap_unordered(get_url, generate_urls()): if error is None: print result,
>>> import re >>> re.split(r'[^0-9]+', '(15,20) (17,30 ) ( 40 , 25)') ['', '15', '20', '17', '30', '40', '25', '']
[i[0] for i in taskscheduler.__dict__.items() if i[1] == 267008]
name_tag = elem.findall("./{some_name_space}name")
model = Model('some_title', 'some text') session.add(model) session.flush() return HTTPFound(location='/ads/%s/%s' % (model.id, model.title))
d['key']['key3'] = []
# True is where condition is satisfied: numpy.ndarray([False, False, ..., True, True]) mask = t > 3 # Uninitialized array with same shape as t Light = numpy.empty_like(t) # Light elements set to 5 where corresponding mask elements are True Light[mask] = 5 # Light elements set to 10 where corresponding mask elements are False Light[~mask] = 10
>>> binascii.hexlify(b'hello') b'68656c6c6f'
article_hash = hashlib.md5(scraped_info).hexdigest()
glib-compile-schemas
from functools import wraps from flask import request def webLog(func): @wraps(func) def newFunc(*args, **kwargs): print request.url + " : " + str(request.remote_addr) return func(*args, **kwargs) return newFunc
len(inspect.getsourcelines(a)[0])
>>> "español".decode('utf-8') u'espa\xf1ol'
s = 'ifmmp' new_s = '' for c in s: n = ord(c) n = n - 1 if n < ord('a'): # 'a' -> 'z' n = ord('z') new_s += chr(n) # print('new_s = %r' % new_s) -> new_s = 'hello'
>>> d = {"abc_123": 5, "def_456": 7, "ghi_789": 9} >>> temp = "abc_123" >>> d[temp] 5 >>> d.get("invalid", "not found") 'not found'
from django.utils import translation def view(request): client_lang = translation.get_language_from_request(request)
def my_filter(df, **kwargs): for column in kwargs: filter_value = kwargs[column] df = df.loc[df[column] == filter_value, ] return df filtered_df = my_filter(df, col1='N', col2='S')
self.positionX -= diff_norm[0] self.positionY -= diff_norm[1] self.rect.x = int(self.positionX) self.rect.y = int(self.positionY)
>>> from pyzipcode import ZipCodeDatabase >>> zcdb = ZipCodeDatabase() >>> zipcode = zcdb[54115] >>> zipcode.zip u'54115' >>> zipcode.city u'De Pere' >>> zipcode.state u'WI' >>> zipcode.longitude -88.078959999999995 >>> zipcode.latitude 44.42042 >>> zipcode.timezone -6
In [22]: words = ['one','two','three four','five','six seven'] ' '.join(words).split() Out[22]: ['one', 'two', 'three', 'four', 'five', 'six', 'seven']
Entry.objects.all().update(value= not F('value'))
simple_url_re = re.compile(r'^(https?)?://\[?\w', re.IGNORECASE) simple_url_2_re = re.compile(r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)$', re.IGNORECASE) if simple_url_re.match(text) or simple_url_2_re.match(text): raise ValidationError
#!/usr/bin/env python import cgi import json import os.path new_data = {"2": {"title": "what", "date": "tomorrow"}} print("Content-type: application/json\n\r") script_dir = os.path.dirname(os.path.abspath(__file__)) fname = os.path.join(script_dir, 'jobs.json') with open(fname) as f: data = json.load(f) data.update(new_data) with open(fname, 'w') as f: json.dump(data, f)
# Apache config for mod_rewrite # from callum85 at notspam dot msn dot com 19-Apr-2007 06:07 RewriteEngine on RewriteRule .* - [E=HTTP_X_FORWARDED_FOR:%{HTTP_X_FORWARDED_FOR}]
import subprocess variable = 'thevariable' subprocess.call("echo "+variable +" | thecommand", shell=True)
df1 = df1.merge(df2[['weeknum', 'datetime']], on=['weeknum'])
hiddenLists = [x.strip() for x in hiddenLists.split(",")] if i.name() in hiddenLists: ...
id_list = ['abc', 'def', 'ghi'] query_string = "delete from test where id in (%s)" % ','.join(['?'] * len(id_list)) cursor.execute(query_string, id_list)
from random import shuffle # Given list1 and list2 list1_shuf = [] list2_shuf = [] index_shuf = range(len(list1)) shuffle(index_shuf) for i in index_shuf: list1_shuf.append(list1[i]) list2_shuf.append(list2[i])
for /f "usebackq tokens=* delims=" %%# in ("C:\path\to\document.txt") do ( call "C:/path/to/script.js" %%# )
This is arithmetic progression and computes as S = ½(a1 + an)n, where a1 is first member, which is 1 in this case. an is the last member which is n in this case. def arthimPSum(n): return round((1 + n)*n *0.5) print(arthimPSum(10**9)) 500000000500000000
date_str = '2014-06-18 13:06:00.349565827' # split off the seconds & microseconds beginning, sec = date_str.rsplit(':', 1) # Use string formatting to recreate a rounded timestamp date = dateutil.parser.parse('{}:{:02.6f}'.format(beginning, float(sec)))
#!/usr/bin/python import sys.argv if sys.argv[1] == "stringhere": print("Argument is equal to string!")
>>> import inspect >>> inspect.getargspec(inspect.getargspec) ArgSpec(args=['func'], varargs=None, keywords=None, defaults=None) >>> print inspect.getsource(inspect.getsource) def getsource(object): """Return the text of the source code for an object. The argument may be a module, class, method, function, traceback, frame, or code object. The source code is returned as a single string. An IOError is raised if the source code cannot be retrieved.""" lines, lnum = getsourcelines(object) return string.join(lines, '')
