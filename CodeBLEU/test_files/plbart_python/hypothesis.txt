>>> l = [1, 2, 3, 4, 5] >>> [l[i:i+3] for
import datetime, timedelta, timedelta, timedelta, timedelta, timedelta, timedelta, timedelta, timedelta
def calculate_cost(x): return x * x
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
from django.contrib.auth.urls import reverse urlpatterns = patterns('', url(r'^
import sqlite3 conn = sqlite3.connect(db_name='mydb') cursor =
import json json_data = json.load(json_data)
import urllib2 from urllib2.urlopen import urlopen url = 'http://www.example.
def print_var(var): print var def print_var(var): print var
>>> import types >>> types.ModuleType <type 'type'> >>> types.ModuleType
class Example(object): def __init__(self, *args, **kw): super
import os import tempfile import os import os import time def open_file(filename): lock
>>> import re >>> re.search(r'(a)((a)((a
class MyForm(forms.Form): class Meta: proxy = True def __init__(
>>> from bs4 import BeautifulSoup >>> soup = BeautifulSoup(html) >>> soup.findAll('
import subprocess p = subprocess.Popen(('echo', 'test.txt', 'test
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
import smtplib from email.utils import validate_email from email.utils import validate_email
>>> d = {('a', 'b', 'c', 'd', 'e
ssh.send_control_key('foo', 'bar')
def get_time(start_time, end_time): start_time = start
def on_select(self, form, data): form.dropdown.args = data
def create_app(app): app.run(debug=True)
>>> type(x) <type 'tuple'> >>> type(x) <type '
def replace(value, name): if name == 'name': name = name.replace
>>> from nltk.corpus import wordnet >>> wordnet.WordNet(wordnet.
import numpy as np import scipy.io.rgb_array as rgb_array = np
import sys, os def get_name(name): return os.path.basename(
def counter(n): counter = 0 for i in range(n): counter += 1
>>>''.join(str(x) for x in range(len(x)
import maya.cmds.cmds.cmds.cmds.cmds.cmds.cmds.
>>> d = {k:v for k,v in d.items()} >>> d
import numpy as np import scipy.spatial.distance_matrix as euclidean_matrix from scipy
import csv with open('file1.csv', 'rb') as f1, open('file
df.isnull().any().any().any().any().any().any().any().
import numpy as np import scipy.io.wavfile as wave data = np.array
import urllib2 opener = urllib2.build_opener() opener.addheaders['HTTP_
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> [
>>> for i in range(len(list)-1):... print list[i]
>>> [x['name'] for x in data] [['name', 'name'], ['
Button(text='This is a button', bg='red', fg='blue', bg
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
>>> import string >>> list(string.ascii_lowercase) ['a', 'b
>>> float('0.1') / float('0.1')
def __init__(self, *args, **kwargs): super(Form, self).__
import MySQLdb.connect(host="localhost", user="root", passwd="root") cursor
def deck_deck(deck): deck = deck.deck() deck.shuffle(deck
class User(Base): __tablename__ = 'users' id = Column(Integer,
import os import itertools for root, dirs, files in os.walk(root): for
for i in range(len(list)): print list[i]
<script> var date = {{ user.date }}; {{ user.time }};
df.groupby('year')['year'].plot(kind='bar', ax=ax
import codecs with codecs.open(filename, 'rb') as f: data = f
import urllib from web import web from web import web from web.config import Config Config =
def test_test_something(self): self.assertTrue(test_something)
import subprocess subprocess.Popen(('echo', 'test.py', 'test.py
>>> '{:.2f}'.format(6) '2.1'
>>> import unicodedata >>> unicodedata.normalize('NFD', 'uucicicici
def func(a, b): return a + b def func2(a, b):
>>> import unicodedata >>> unicodedata.normalize('NFD', 'utf-8') u'NFD
>>> import ast >>> ast.literal_eval('['a','b','c','d
import org.apache.jython.util.Util.get_user_data(
import Image import Image im = Image.open('test.jpg') im.resize((
def generate_id(self, id_string): if id_string: id_
import time def start_time(): while True: time.sleep(60) # sleep
from lxml import etree doc = etree.fromstring(html_string) for node in
import Image import pygame.display.set_mode((255,255,0)) # or whatever
def pairs(n): return [n for n in range(n)]
import pygame.display.set_mode('w', 'w')
df.plot(kind='bar', linewidth=2)
>>> import struct >>> struct.unpack('>I', struct.pack('>I',
from sklearn.svm import SVC from sklearn.svm import LinearSVC from sklearn.
df.groupby('A').agg(lambda x: x.values)
import subprocess p = subprocess.Popen((' ','my_process.pid'),
from datetime import datetime, timedelta from sqlalchemy import timedelta from sqlalchemy.sql import func from sqlalchemy
from django.template.context_processors import context_processor def my_context_processor
>>> d = {k:v for k,v in d.iteritems()} >>> d
In [11]: df.to_dict(index=['date1', 'date2', '
>>> from lxml import etree >>> etree.fromstring('<foo>foo</foo>') '<
>>> import keyword >>> keyword.keyword_arguments() ['foo', 'bar', 'baz
>>> a = property(lambda x: x.value) >>> a.value 'value
import sys, os def my_func(x): return x + 1 def my_
import urllib2 url = "http://www.example.com/form.php"
>>> import inspect >>> inspect.getargspec(inspect.getargspec(inspect.getargspec
def func(x): return x + x def func2(x): return x + x
def scroll(self): self.widget.set_viewport(self.widget.get
>>> import re >>> re.findall(r'(a)((a)((a
import datetime import calendar import time today = datetime.date.today() # now you can
class UserAdmin(admin.ModelAdmin): def __unicode__(self): return self.
def callback(self, *args, **kwds): self.var1 = self
import os root = os.path.dirname(os.path.abspath(__file__
import sys import lcd lcd = lcd.open_file('path/to
import sys, os, sys, sys, sys, sys, sys, sys, sys
from sqlalchemy import Column, Column, DateTime, DateTime, DateTime, DateTime, DateTime, DateTime
def test_full_list(iterable): return [iterable]
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
>>> import datetime >>> datetime.datetime.strptime('2011-08', '%m/%d
import os import shutil for root, dirs, files in os.walk(root): for
import os with open('test.txt', 'wb') as f: f.write
def main(): while True: if __name__ == "__main__": main()
import collections with open('file.txt', 'r') as f: for line in
>>> from collections import OrderedDict >>> d = OrderedDict() >>> d['a'] = 'a
with open('file1.txt', 'r') as f1, open('file2.txt
def raw_input(): raw_input() raw_input() raw_input() raw
import csv with open('test.csv', 'wb') as f: writer = csv
import youtube api = youtube.VideoAPI( youtube_url='http://www.youtube
In [11]: df.index.map(lambda x: x.index) Out
>>> re.compile(r'(?P<name>[a-z]+)
$ Python 2.7.2 (default, Apr 13 2012, 20:16:59) [GCC
df.columns.values.tolist()
>>> struct.unpack('>I', struct.pack('>I', struct.pack
import multiprocessing def worker(n): for i in range(n): if n%i
>>> import struct >>> struct.unpack('>I', b'\x00\x00\x
>>> re.match(r'(?<=\b)(?<=\b)(?
>>> from collections import OrderedDict >>> d = OrderedDict() >>> d['a'] = 'b
>>> d = {k:v for k,v in d.iteritems()} >>> d
class A(object): def __init__(self, a, b): self.a
>>> import re >>> re.sub(r'(a)([^']+)', r
>>> import datetime >>> datetime.datetime.strptime('2011-08', '%m/%d
import os with open('test.txt', 'wb') as f: f.write
import urllib2 url = 'http://www.example.com/login' req =
def __init__(self, *args, **kwargs): super(Module, self).__
def test_method(self): self.assertEqual(self.method,'method')
import pyodbc.connect(host="localhost", user="root", passwd="root")
import csv with open('file.csv', 'rb') as f: reader = csv
from protractor.tools import expected_conditions from protractor.tools import expected_conditions
import os import sys import pygame import pygame pygame.init() pygame.mixer.init
from django.contrib.staticfiles import staticfiles_urlpatterns urlpatterns = patterns('', url(
import datetime def convert_time_string(time_string): return datetime.strptime(
self.widget = wx.Widget(self) self.widget.Bind(wx.
>>> import codecs >>> codecs.decode('utf-8', 'ignore') u'utf-8
import mechanize br = mechanize.Browser() br.open("http://www.
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
if isinstance(x, int): # do stuff
def async_func(self, *args, **kwargs): self.finish()
import csv with open('data.txt', 'rb') as f: reader = csv
>>> import decimal >>> decimal.Decimal('3.') 3.
import datetime, timedelta delta = datetime.timedelta(hours=7) delta = delta - timedelta
if not self.is_yes: self.is_yes = True
import subprocess subprocess.Popen((' ','my_program.py', 'a
import os import sys def is_content_seen(filename): with open(filename)
>>> import unicodedata >>> unicodedata.normalize('NFKD', 'utf-8') u'N
# Create elevation angle = elevation angle = angle + elevation angle = angle -
df.merge(df, left_on='date1', right_on='date2',
class A(object): def __init__(self, *args, **kwds):
import datetime, timedelta, timedelta, timedelta, timedelta, timedelta, timedelta, timedelta, timedelta
import subprocess p = subprocess.Popen(('echo', 'test.txt'), stdout=
def underscore(x): return x + 1
import socket def send(sock, data): try: return socket.socket(socket.
def parse(self, response): rules = [ Rule(LinkExtractor(allow='http
import os with open(filename, 'r') as f: for line in f:
if len(row) > 1: row[row[0]] = row[row[0]] + row
import harris import numpy as np import scipy.stats as harris from scipy
sqlite_connect("database.db", "username", "password") sqlite_connect("
>>> import csv >>> with open('test.csv', 'rb') as f: reader
def joined_data(data): joined_data = [] for i in range(len
import numpy as np import scipy.misc.kernel as kernel kernel = kernel.kernel.
>>> from datetime import datetime >>> datetime.datetime.now().strftime('%A, %d
class A(object): def __init__(self, *args, **kwds):
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
import sys, os def check_string(string): if string == '': return True
import zipfile import os import os for root, dirs, files in os.walk(path
>>> x = [1,2,3] >>> y = [1,2,3] >>> [x[i:
def remove_widget(widget, widget): widget.remove() widget.remove()
{% for item in sorted(data.items(), key=lambda item: item['date
from sqlalchemy.sql import func, update_id def update_id(self, id
>>> import datetime >>> datetime.strptime('24:mm:ss', '%m:%S
import numpy as np import scipy.io.savetxt('test.txt', data
import Image im = Image.open('test.tif') im.save('test
for key, value in zip(dict1, dict2): if key not in ['a',
import collections, urllib, urllib, urllib, urllib, urllib, urllib, urllib, urllib
>>> sentence = "I am a sentence." >>> word = "I am a sentence."
def load_user_data(): global user_data global user_data user_data
>>> l = [(1,2), (3,4), (4,5)] >>> [l[i:
>>> class Foo(object):... pass... >>> Foo.objects.create(**dict(
import os import os for root, dirs, files in os.walk(root): for
def outer(outer, inner): outer = outer + inner outer = outer + inner outer
import sys, os, sys, sys, sys, sys, sys, sys, sys
self.ui.GetInsertionPoint()
import pyspeech.tokenize import pyspeech.tokenize def skip_words(text
if any(line.strip() for line in text): print("ok")
from lxml import etree doc = etree.parse('http://www.example.com/
from lxml import etree tree = etree.parse(html_string) for node in tree
combo = wx.Box(self, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
manage.py collective
>>> [sorted(l, key=lambda x: x[1], reverse=True) for
import sys, __, __, __, __, __, __, __, __
def f(x): return x + x def f(x): return x + x
self.gridWidget.setFixedSize(width, height)
import pywt import matplotlib.pyplot as plt fig = plt.figure() ax = fig
def __call__(self, *args, **kwds): if self.parent:
import subprocess p = subprocess.Popen(('fasta', 'fasta'), stdin=
import os import os for root, dirs, files in os.walk(root): for
>>> import re >>> re.sub(r'(a|b|c)',
>>> import urllib >>> urllib.quote('foo', 'bar') 'foo'
import matplotlib.pyplot as plt import numpy as np import matplotlib.io as io import matplotlib
def get_list(list): return [list(x) for x in list]
import urllib urllib.urlretrieve('http://www.example.com/download.php
def do_something(): # Do something here def do_something(): # Do something here
>>> d = {u'a': u'a', u'b': u'
cursor.execute(query)
def get_first_name(name): return name
import sys, subprocess def main(): p = subprocess.Popen(sys.argv[1:])
class Person(models.Model): name = models.CharField(max_length=200)
>>> import urllib >>> >>> url = 'http://www.example.com/page.
plt.plot(x, y) plt.savefig('figure.png')
ax.xaxis.set_major_formatter(matplotlib.ticker.NullFormatter())
from twisted.internet import reactor reactor.connectTCP(host, port) reactor.run
df['A'] = df['B'].apply(lambda x: x['A'].
def func(x, y): return x + y def func_name(x,
>>> import json >>> json.dumps(dict(zip(name, value))) '{"
import salt from salt import * salt.init_state = 'normal' salt.init
import numpy as np import scipy.io.wavfile as wave from scipy.io.
>>> import string >>> string.ascii_letters + string.digits >>> print(string.
def keyPress(event): # Do stuff here return event def main(): while True:
class A(object): def __init__(self, a, b): self.a
import matplotlib.pyplot as plt import numpy as np x = np.arange(1,3) y
>>> import random >>> random.randint(1,3) >>> random.randint(1,3) >>> random.
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
import os import os if os.path.isdir(os.path.join(os
import psutil psutil.percent_usage( psutil.process_memory_percent( psutil.
import csv with open('data.csv', 'rb') as f: reader = csv
>>> import string >>> string.ascii_lowercase + string.ascii_uppercase >>>
df['A'] = df['B'].map(lambda x: x['A'])
import pypng.Image from pypng.image import Image from pypng.image import
import random def random_number(n): return random.randint(0, n)
if not self.number: self.number = 1
>>> import collections >>> d = collections.OrderedDict(sorted(d.iteritems(), key
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
import urllib def submit(): url = 'http://www.example.com/' req =
from django.db import connection from django.contrib.auth.models import User from django
def test_move_move_move_move_move_move_move_move
>>> df.groupby('id').apply(lambda x: x.split('|'))
def __eq__(self, other): return self.__dict__ == other.__dict__
plt.imshow(im, interpolation='nearest', cmap='hot', vmin=0, vmax=
>>> import string >>> string = "hello, world" >>> string.replace(string.
class A(object): def __init__(self, *args, **kwds):
>>> type(type(x)) <type 'type'>
class A(object): def __init__(self, a, b): self.a
import hashlib md5 = hashlib.md5() md5.update(data)
>>> import random >>> random.shuffle(list) >>> list(list(range(50
def default_value(self, value): if value is None: return value return value
....................................
from django.core.files.transforms import PatchCollection(patches.PatchCollection(patches
def draw(self, event): self.canvas.draw() self.canvas.draw
if key in registry.keys(): print('Key exists')
>>> from lxml import etree >>> tree = etree.parse('test.xml') >>> tree
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
import Crypto from Crypto import PKCS1_v1_v1_v1_v1_v1_v
print("This is a test string.")
import numpy as np import matplotlib.pyplot as plt import numpy as np data = np.
class A(object): def __init__(self, a, b): self.a
import json d = { 'a': 1, 'b': 2, 'c': 3 }
>>> [list(x) for x in range(len(x))] [['a',
def get_event(event): if not event.type: return event.data
import csv with open('test.csv', 'rb') as f: reader = csv
import sys sys.path.append("/path/to/your/script") sys.
if not db.session.query(User).filter(User.id==user.
def get_answer(x): answer = [] for i in range(x): answer
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
import pydoc.docutils.docutils.docutils.docutils.docutils
from django.db.models import Q qs = qs.filter(Q(name__
def add(self, item): if item not in self.queue: self.queue
import sys, os, sys, sys, sys, sys, sys, sys, sys
ax.set_ylim(min(df['x']), max(df['
from PIL import Image from rook.image import Image from rook.image import Image
def find_index(matrix, index): return index for i, j in enumerate(
import subprocess subprocess.Popen(args, stdout=subprocess.PIPE)
canvas.create_line(0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
from sqlalchemy.sql import func, date_filter from sqlalchemy.sql import func from sqlalchemy
import os import mutagen def make_files(files): for f in files: if
class User(models.Model): user = models.ForeignKey(User) #... class
df.groupby('id').apply(lambda x: x.iloc[x.index
def parent(parent, child): if child is None: return parent(parent, child
<script> var style = document.getElementById('style'); style.style.display =
def f(): global f f() # Do stuff here f() # Do stuff here f
import numpy as np a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,
plt.pcolor(x,y,cmap=plt.cm.r_
import subprocess subprocess.Popen('mplayer',stdout=subprocess.PIPE)
>>> isinstance(iterable, iter) True >>> isinstance(iterable, iter) False
>>> import re >>> re.findall(r'(a)((?:\d+
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
def __init__(self, index, value): self.index = index self.value
>>> import re >>> re.sub(r'(a)([^"]+', r
>>> import itertools >>> list(itertools.chain.from_iterable(itertools.
# # # # # # # # # # # # # # # # # #
>>> d = {'a':1,'b':2,'c':3,'d':
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
def make_list(list): return [list(x) for x in list]
>>> import re >>> s = "a,b,c,d,e,f
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for node in soup.find_
from django.db.models import Q from django.contrib.sites.models import Site
import Image im = Image.open('test.jpg') im.save('test.
import numpy as np import scipy.io.wavfile as wave wave wave = wave.
import os import os for root, dirs, files in os.walk(root): for
def get_context_data(self, **kwargs): if self.request.user
import re def split_script(script_path): return re.compile(r'
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
import urllib2 from werkzeug.wrappers import HTTPRedirect from werkzeug.wrappers import Simple
q = db.Query(User) q.filter(User.id == user.
def get_instance(self, instance_id): if instance_id is None:
# Create a figure object fig = figure(x='x', y='y', width
import sys def main(): while True: try: sys.stdout.flush() except Keyboard
self.ui.setFixedSize(width, height)
def weighted_path(node): if node is None: return [] return weighted_path
def largest_int(lst): return max(int(x) for x in lst
import os for root, dirs, files in os.walk(root): for f in
>>> sorted(mylist, key=lambda x: x[1], reverse=True) [('
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
import os import itertools for f in itertools.combinations(os.listdir(path), 2
def func(x, y): return x * y def func_a(x,
>>> a = [1, 2, 3, 4, 5] >>> a.append(4) >>> a [1, 2, 3,
for key, value in d.iteritems(): if key not in ['a', 'b
def change_form(self, request, *args, **kwargs): if request.
def recursive_func(x): if x == 0: return x return recursive_func(
import csv with open('test.csv', 'rb') as f: reader = csv
import numpy as np import itertools with open('file.txt') as f: for line
>>> import string >>> string = 'a,b,c,d,e,f
import numpy as np import scipy.stats as stats def avg_stats(x): return
>>> import re >>> re.findall(r'(a)([^)]+', '
sudo apt-get install sudo apt-get install sudo apt-get install
import csv with open('test.csv', 'wb') as f: writer = csv
>>> x = np.array([1,2,3]) >>> y = np.array([3,
sudo apt-get install mysql-connector- mysql-connector- mysql-connector
import sys, sys, sys, sys, sys, sys, sys, sys, sys
import ctypes ctypes.CDLL('test.crt')
>>> import re >>> re.search(r'(?P<name>[a-
re.sub(r'\b', 'a', 'b', flags=re.
>>> a = np.array([1,2,3,4,5,6,7,8]) >>> a array([ 1, 2,
>>> a = [1, 2, 3, 4] >>> b = a >>> b [1, 2, 3, 4] >>>
def fib(n): if n % 4 == 0: return n //= 4 return n
class A(object): def __init__(self, a, b): self.a
import numpy as np import matplotlib.pyplot as plt from scipy.io import BytesIO from scipy
>>> import re >>> s = 'a b c d e f g g g g g
import os import sys, time def log_to_file(filename): with open(
import os import os for root, dirs, files in os.walk(os.path
>>> import re >>> re.findall(r'(?P<name>[a-
>>> import ast >>> ast.literal_eval('foo', 'bar') ('foo',
import numpy as np import matplotlib.pyplot as plt x = np.array([1.,
>>> import re >>> re.findall(r'(\d+)', 'a string')
df.columns = df.columns.tolist()
>>> set(x) == set(y) True >>> set(x) == set
import csv with open('data.csv', 'rb') as f: reader = csv
>>> import re >>> re.compile(r'(\d+)') >>> re.compile
from django.db.models import F, User, User, User, User, User
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
>>> re.compile(r'(?P<name>[a-z]+)
>>> import codecs >>> codecs.encode('utf-8') u'utf-8'
from django.db import connection from django.core.cache import SortedDict from django.
import setuptools setuptools.setup_egg
import itertools import os, sys, time, sys, sys, time, sys, sys
import lxml.etree as ET tree = ET.parse('file1.xml') tree.
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
import numpy as np from itertools import chain with open('file.txt', 'r')
from flexlm.util import flexlm_license from flexlm.license import LN
from django.db.models import Q, Q, Q, Q, Q, Q
import datetime import calendar def days(start_date, end_date): return calendar.
>>> import re >>> re.split(r'(?<=\s)(?<=\
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
>>> from operator import itemgetter >>> >>> from operator import itemgetter >>> >>> >>> >>> >>> >>> >>>
import sys, time def print_right_side(self): sys.stdout.write
def get_url(self, request): return reverse('admin:login', kwargs={'
import sys, time def print_all(): for i in range(len(sys.
def update(self, *args): self.text.configure(text=self.
from django.db.models import Q qs = qs.filter(Q(name__
>>> import re >>> re.search(r'(a)((a)((a
>>> import ctypes >>> c = ctypes.CDLL('test.c') >>> c.
import os import sys sys.path.append(os.path.abspath(os.
def disable(self): self.disable = True self.disable = False def enable(
>>> import itertools >>> >>> l = [(1,2), (3,4), (4,5)] >>> [
class User(models.Model): user = models.ForeignKey(User) #... class
def check_for_one_return(a, b): if a == b:
class Session(object): def __init__(self, *args, **kw): self
....................................
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
>>> d = {k:v for k,v in d.iteritems()} >>> d
if db.query.count() == 0: return True
import os import time def read_file(filename): with open(filename, 'rb
import numpy as np import itertools a = np.array([1, 2, 3, 4, 5, 6, 7,
import os import itertools with open('data.txt', 'rb') as f: data
>>> import re >>> re.sub(r'<a href="(.*?)">(.*
import numpy as np import csv with open('data.csv', 'rb') as f
>>> import ast >>> ast.literal_eval(ast.literal_eval(ast.
def my_list(list): return [list(x) for x in list]
>>> import re >>> re.sub(r'([a-z]+)', r
import threading def main(): t = threading.Thread(target=main) t.start
>>> from sqlalchemy import Column >>> col = Column('name', String(50), nullable=
if os.path.exists(filename): # do stuff
for i in range(n): button = Button(root, text="button %s
def json_dumps(data): return json.dumps(data)
import numpy as np import scipy.stats as stats import numpy as np x = np.
>>> from collections import Counter >>> Counter(list) Counter({'a': 1, 'b':
import subprocess subprocess.Popen((' ','my_program.py','my
def func(x, y): return x + y @func def foo(x,
import numpy as np import scipy.stats as stats def log_log_norm(n
sns.set_x_values(df['x'], df['y'])
ax.set_xscale('log')
import subprocess subprocess.Popen(args, stdout=subprocess.PIPE)
def filter_false(iterable): if iterable: return [iterable] else: return filter
import ast ast.literal_eval(ast.literal_eval(a))
@patch('django.core.cache.backends.cache.backends.cache.backends
>>> re.compile(r'(?P<name>[a-z]+)
from tornado.gen import AsyncHandler from tornado.gen import AsyncHandler from tornado.gen
self.tableWidget.textBrowser().textBrowser().textBrowser().textBrowser().text
if (True) == True: # Do stuff
import matplotlib.pyplot as plt import numpy as np import matplotlib.ticker as ticker import matplotlib
>>> import re >>> re.sub(r'<.*?>(.*?)</.*
In [11]: df.sort(key=lambda x: x.order_by
CREATE TABLE foo (bar INT NOT NULL, baz INT NOT NULL, PRIMARY KEY (bar
>>> import itertools >>> list(itertools.product(*a)) [('a', 'b
class A(object): def __init__(self, a, b): self.a
def tree(d): if d is None: d = {} else: d.update
df.groupby(level=0).agg(lambda x: x.agg(lambda x
>>> '%.2f' % (math.log10(math.log10(math
>>> for i in range(len(matrix)-1): print(matrix[i])
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
df.delete(df['A'], axis=1)
if (PyPyPyPyPyPyPyPyPyPyPyPyPyPyPyPy
>>> a = ['a', 'b', 'c', 'd', 'e',
for i in range(n): print(i)
plt.subplots_adjust(hspace=0.5)
def sleep(): while True: time.sleep(60) print time.sleep(1)
import os import json with open('test.txt', 'w') as f: json
import os import os for root, dirs, files in os.walk(root): for
>>> import platform >>> platform.uname() ('Windows 7', 'x86_64', 'x
def next(): while True: line = raw_input("Enter a line: ") if
r = r.r_[r.r_[a,b,c]]
>>> import re >>> s = "foo bar baz" >>> re.sub(r'
import collections from collections import Counter from itertools import chain from itertools import chain from itertools import chain
from django.db.models import Q, Q, Q, Q, Q, Q
class SortedDict(dict): def __getitem__(self, key): return dict.__getitem
>>> re.compile(r'(?P<name>[a-z]+)
import numpy as np import scipy.stats as stats def f(x): return stats.
import os import sys import video_format = 'JPEG' video_format = '
def func(x, y): return x + y
>>> import pandas as pd >>> df['Count'] = df['Count'].map(lambda
>>> from collections import Counter >>> Counter(word.lower().split()) Counter({'a':
from django.core.files.uploadedfile import SimpleUploadedFile from django.core.
import sys, os, sys, time def read_file(filename): with open(
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
def save(self, *args, **kwargs): if self.save_on_
>>> a = [1,2,3] >>> b = [1,2,3] >>> max(a, key
import os import tempfile import os with open(os.path.join(os.path
class Foo(object): def __init__(self, value): self.value = value
import os import sys def main(): #... #... #... #... #... #
class UserAdmin(admin.ModelAdmin): def save(self, *args, **
import json json_data = json.dumps(data)
# # # # # # # # # # # # # # # # # #
>>> import unicodedata >>> unicodedata.normalize('NFD', 'g') 'NFD'
import os os.chdir(os.path.dirname(__file__))
>>> import re >>> re.findall(r'(?P<key>[a-
import json json_data = json.load(json_data) print json_data
>>> from itertools import combinations >>> from itertools import combinations >>> >>> for i, j in combinations
def get_queryset(self): return self.request.POST.getlist('queryset
>>> from collections import Counter >>> >>> Counter(list1) Counter({'a': 1, 'b
import numpy as np a = np.array([[1,2,3],[4,5,6]]) np.
from itertools import chain from itertools import chain chain chain(chain(chain(a, b
>>> import re >>> re.sub(r'(a)([^']+)', r
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
import subprocess subprocess.Popen( ["app1.py", "app2.py"], stdout=
from pysuite import suite suite = suite() suite.suite.report.output = suite
>>> d = {u'a': u'a', u'b': u'
from django.core.urlresolvers import reverse from django.core.urlresolvers import reverse
In [11]: np.array([1,2,3]) Out[11]: array([ 1,
from sqlalchemy.sql import func, func from sqlalchemy.orm import session session = sessionmaker
PyObject *result = PyInt_FromLong(0); PyObject *result = PyInt_From
import struct def bin_to_int(input_string): return struct.unpack('
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
from sklearn.svm import SVC from sklearn.svm import LinearSVC from sklearn.
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
import re lat, lon = re.findall(r'((\d+)\s
df.groupby('id').first()
>>> re.compile(r'^(?P<name>[a-z0-9]+
def get(self, request, *args, **kw): # Do stuff with the
from django.db import connection def check_key(self, key): if key in
>>> a = np.array([1,2,3]) >>> a array([[1,2,3],[4,
import pandas as pd df = pd.read_csv('data.csv') df.
>>> d = {k:v for k,v in d.iteritems()} >>> d
from django.db.models import Q qs = qs.filter(Q(user__
>>> '{:.2f}'.format(1234) '1234'
(defun map(lambda x: x, y: y)
if version.major_version_version_version_version_version_version_version
select * from table where id IN (SELECT id FROM table WHERE id IN (SELECT id
>>> import re >>> re.findall(r'(?P<name>[a-
from google.appengine.ext import db from google.appengine.api import render_table
import urllib urllib.urlretrieve('http://www.example.com/page.html
class BookAdmin(admin.ModelAdmin): list_display = ('title',) list
pip install mysqldb
>>> d = {u'a': u'a', u'b': u'
>>> import decimal >>> decimal.Decimal('0.1') Decimal('0.1')
>>> import re >>> re.split(r'([a-z]+)([a
import subprocess def run_progress(): p = subprocess.Popen(('prog', 'bar
class User(models.Model): user = models.ForeignKey(User) class Meta:
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
import xml.etree.ElementTree as ElementTree tree = ElementTree.parse('file.xml')
#!/usr/bin/env import sys, os, sys, os, sys,
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
from django.conf import settings from django.conf import settings from django.conf import settings
import xml.etree.ElementTree as ElementTree tree = ElementTree.parse('file.xml')
>>> d = {('a', 'b', 'c'): 'd'} >>> d
def remove_letters(sentence): return set(sentence.lower().split())
import urllib urllib.urlretrieve('http://www.example.com/index.html
import xlwt wb = xlwt.Workbook() wb.save('test.xls')
def button_clicked(self, event): # Do stuff here self.button = Button
def post(self, request, **kw): # Do stuff with the request.query
>>> class A(object):... pass... >>> A.A = A >>> A.
import m2crypto from Crypto import RSA from Crypto import PKCS1_v1_v1_v
import sys, inspect def myfunc(x): return x + 1 myfunc = my
def __call__(self, *args, **kwds): if self.args:
import time, time, time, time, uid, gid = imaplib.IMAP
In [1]: np.random.uniform(size=1)) Out[1]: array([ 1.
import suds.types.complex_type
import numpy as np import scipy.stats as stats import numpy as np from scipy.stats
>>> class A(object):... pass... >>> A.iter__ True >>> A.
import subprocess p = subprocess.Popen(('echo', 'test'), stdout=subprocess.
>>> import struct >>> struct.pack('>BBBBBBBBBBBBBBBBBB
>>> d = {k:v for k,v in d.iteritems()} >>> d
import os os.path.dirname(os.path.abspath(__file__))
>>> set(x) >>> set(x) >>> set(x) >>> set(
def write_html(self, writer_name="html"): """Write a HTML document
>>> import time >>> time.mktime(time.strptime('2014-02', '%m
import os os.system('cls')
pip install py3k
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
def find_first_node(node): if node is None: return node return node
>>> import collections >>> d = collections.defaultdict(list) >>> d.update(
def short_code(code): if code == '': return code return code
min(d['name'], key=lambda x: x['name'])
ax.set_ylim(0,1) ax.set_ylim(0,2) ax.
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for key, value in
>>> import gc >>> gc.get_objects() ['foo', 'bar', 'baz
import sys, os def is_version(version): return sys.version_info.
import sys import time with open(sys.argv[1], 'r') as f: for
from django.shortcuts import redirect from django.shortcuts import redirect from django.shortcut
cursor.execute("INSERT INTO test(name) VALUES (%s)" % (name
>>> re.compile(r'(?P<name>[a-z]+)
def get_queryset(self): return [self.request.user, self.request
def __unicode__(self): return unicode(self).encode('utf-8')
import IPython.notebook.clear_output()
class A(object): def __init__(self, a, b): self.a
nose.run_command('foo', 'bar', 'baz', 'foo', '
def make_description(self, *args, **kw): """This function is called
ttk.separator(width=width, height=height)
import subprocess p = subprocess.Popen(('echo', 'test.txt', 'test
>>> import re >>> re.split(r'(?P<name>[a-
def delete_user(request): if request.user.is_superuser: # Do
from lxml import etree doc = etree.parse('http://www.example.com/
>>> [x for x in range(len(x)+1) if x[i]
import bullet bullet.bullet.bullet_list = bullet.bullet_list
class MyFrame(Tkinter.Frame): def __init__(self, parent, frame
In [1]: from sympy import symbols In [2]: symbols('x') Out[2]: ('
import xmlrpc.rpc.rpc.rpc.rpc.rpc.rpc.rpc.rpc
import sys sys.path.append("/path/to/your/program/lib/
from pyspark.sql.functions import udf from pyspark.sql.functions import udf from pyspark
>>> d = { 'a':1, 'b':2, 'c':3, 'd
import numpy as np import matplotlib.pyplot as plt from sklearn.grid_search import Grid
import csv with open('file.txt', 'rb') as f: reader = csv
db.users.find({"$gte": { "id": "$_id" }
>>> a = [1,2,3] >>> b = [1,2,3] >>> a[b] =
ax2.set_ylim(min(x), max(y), color='r
from pywinauto import * from pywinauto import * from pywinauto import *
>>> import csv >>> >>> >>> with open('test.csv') as f: reader =
df['A'] = df['B'].map(lambda x: x['A'])
>>> from collections import defaultdict >>> d = defaultdict(set) >>> for key, value in
import itertools for i in itertools.combinations(range(len(list(list(i
from flask import Flask app = Flask(__name__, static_url_path='/') @
from google.appengine.ext import db db db.query(User.id, User
def submit(self): self.request.session['form_data'] = form_
>>> import unicodedata >>> unicodedata.normalize('NFD', u'\\u0F')
import pyfits.io.table as Table from pyfits.io.table
import os import os for i in range(len(input_list)): os.listdir
def __str__(self): return str(self)
>>> import re >>> re.sub(r'(a)([^']+)', r
import collections with open('file.txt', 'r') as f: words = collections
def create_bitmap(img): if img.mode == 'RGB': img.mode
df['A'] = df['B'].map(lambda x: x['A'].
def generate_sql_string(query_string): cursor = db.cursor() cursor
import os import tempfile import os os.makefile(os.path.join(os
>>> import numpy as np >>> a = np.array([1,2,3]) >>> a array
>>> import ast >>> ast.literal_eval('a string') 'a string'
>>> import unicodedata >>> unicodedata.normalize('NFD', 'r') 'r'
print(u'This is a unicode string.')
import requests r = requests.get(url, headers={'User-Agent': 'Mozilla
import pkgutil.get_package_name()
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
import subprocess subprocess.Popen('echo hello world', shell=True)
while True: if not cell.is_set(): break
from bdd import BDD from bdd import BDD from bdd import BDD
import sqlite3 conn = sqlite3.connect('my.db') cursor = conn.cursor
import Tkinter root = Tkinter.Tk() root.title("warning") root.mainloop()
if 'http://www.example.com/page.html' in text: text
import sys sys.path.append(os.path.abspath(__file__))
import urllib url = 'http://www.example.com/search.php?q
>>> import re >>> s = ['a', 'b', 'c', 'd',
plt.plot(x, y, kind='bar', label='Frequency')
for i in range(n): print(i)
var a = new[] { 1, 2, 3, 4, 5 }; var a = a.Get
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
import os with open(filename, 'rb') as f: for line in f:
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('c', '
def get_success_url(self, request, *args, **kwargs): if
import py2.x as py2.x from py2.x import TextType from py2.
from django.db.models import Q from django.contrib.comments.models import Comment
def get_next_next_next_next_next_next_next_next
import csv with open('data.csv', 'rb') as csvfile: reader =
import os os.system(' -i'+ os.path.basename(os
df.loc[df['A'] > 0, 'B'] = df['B']
plt.pcolor(label, label.get_font_manager().get_font
while True: if event.type == 'click': print("You are on the button
>>> import decimal >>> decimal.Decimal('1.23', places=3) Decimal('1.23
>>> import re >>> re.search(r'(?P<name>[a-
import time while True: sleep(time.time() * 1000)
from pyspark.io.spark.io.spark.io.spark.io.spark
>>> a = 'a' >>> a 'a' >>> a 'a'
<script> $(function() { var js = jQuery.init(); js.init({
class User(models.Model): user = models.ForeignKey(User) #... class
>>> import itertools >>> >>> itertools.combinations(range(2), n) [('a', '
def update_value(self, spinbox, value): spinbox.setValue(
from logging import Logger from logging import Logger from logging import Logger from logging import Logger from logging
import bidi.codec.encode_utf8("utf-8")
import socket port = socket.gethostbyname('localhost','my_port
SELECT * FROM table WHERE timestamp > (SELECT timestamp FROM table WHERE timestamp < (SELECT timestamp
pip install
>>> [x for x in zip(*x)] [['a', 'b', 'c
def decorator(func): def wrapper(*args, **kwds): if not isinstance(
import sys, time def check(): while True: try: time.sleep(60)
import urllib url = 'http://www.example.com/login' req = urllib
def listbox(self, *args): self.listbox.insert(0, self.
import pandas as pd df = pd.read_csv('data.csv', skiprows
class A(object): def __init__(self, *args, **kwds):
import json json_data = json.load(json_data)
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
import subprocess subprocess.Popen(("update", "my_script.py", "my
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
df['A'] = df['B'].isin(df['A']) df['B
import subprocess p = subprocess.Popen(('foo', 'bar'), stdout=subprocess.
from selenium import webdriver from selenium.webdriver.firefox import Firefox firefox = Firefox() firefox.
>>> re.search(r'(?P<name>[a-z]+)
def check_user(user, input): if user == input: return True return False
import os for root, dirs, files in os.walk(root): for f in
import gzip import os import os with open(os.path.join(os.path
for key, value in zip(d1, d2): if key not in d1: #
import pandas as pd import numpy as np import matplotlib.pyplot as plt from matplotlib.ticker
>>> import itertools >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>>
import ast with open('file.txt', 'r') as f: data = ast
pygtk.init() pygtk.init() pygtk.init() pygtk.
class A(object): def __init__(self, x): self.x = x
from scrapy import Browser from scrapy.http import Request from scrapy.utils import open_new
import numpy as np import scipy.stats as stats data = np.array([[1,2,3
import ldexp, frexp, ldexp, frexp, ldexp, frexp
import os pid = os.stat(os.path.join(os.path.
def user_id(user_id): user_id = user_id.id
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
import urllib html = urllib.urlopen("http://www.example.com/page.
>>> d = {k:v for k,v in d.iteritems()} >>> d
class A(object): def __init__(self, x): self.x = x
import pygame.sprite.Group(pygame.sprite.Group(pygame.sprite.Group
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
ax.xaxis.set_major_locator(matplotlib.ticker.FixedLocator())
re.compile(r'(?P<name>[name])(?P<value
PyObject *p = NULL; PyObject *p = NULL; PyObject *p = PyObject_
from django.contrib.auth.models import User User.objects.filter(user__
from apache.conf import Configurator from apache.conf import Configurator from apache.conf
>>> import re >>> s = "this is a string with a fragment" >>> re.
import unittest def test_main(): unittest.main()
class A(object): def __init__(self, x): self.x = x
import os import numpy as np import matplotlib.pyplot as plt import numpy as np import matplotlib
>>> import string >>> string = 'hello, world' >>> string.split() ['hello
import csv with open('data.csv', 'rb') as f: reader = csv
import sys, os, sys, sys, os, sys, sys, sys, sys
import csv with open('data.csv', 'rb') as f: reader = csv
import subprocess subprocess.Popen(' ', shell=True)
>>> import numpy as np >>> a = np.array([1,2,3]) >>> b =
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
nose.test_modules.test_modules.test_modules.test_modules.
class User(models.Model): user = models.ForeignKey(User) #... class
>>> import re >>> re.sub(r'(?<=\w+)\s+
import collections with open('file.txt') as f: data = collections.defaultdict
>>> import itertools >>> for i, j in itertools.groupby(a, lambda x:
import matplotlib.pyplot as plt import numpy as np import matplotlib.cm as cm fig =
from django.contrib.auth.models import User from django.db.models import User
import win32api import win32api win32api.GetVolumePath(win32
>>> import string >>> string = 'hello, world!' >>> string.replace('', '
>>> re.split(r'(?P<name>[a-z]+)
if event.group.type == 'DISABLED': print('User is disabled')
class MyPost(Post): def __init__(self, *args, **kw):
def getattr(obj, name): if name == 'foo': return getattr(obj,
import urllib url = 'http://www.example.com/page.html' page
from sklearn.svm import RandomForestClassifier from sklearn.svm import RandomForestClassifier from sklearn
import os import os for root, dirs, files in os.walk(os.path
from flask import Flask from flask.ext.wsgi import WSGIHTTPServer from flask.ext
>>> import re >>> re.findall(r'(?P<name>[a-
if isinstance(value, int): # do stuff
>>> from itertools import chain >>> list(chain(x, y)) [('a', '
import re def find_first_name(filename): with open(filename) as f
var p = new MemoryProfile(); p.SetSize(size); p.SetSize
self.gridWidget.setGridWidget(self.gridWidget)
import os import os for root, dirs, files in os.walk(os.path
PyObject *result = PyInt_FromLong(PyObject *self, &self->
def on_filter(self, *args): self.filter_function()
import datetime def my_date(start_date, end_date): return datetime.
def search_for_key(key, value): if key not in ['a',
import os import sys import time with open(sys.argv[1], 'w') as f
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
import threading def main(): while True: try: t = threading.Thread(target=
for i in range(len(line)-1): print(line[i:i
ax.set_xscale('log') ax.set_yscale('log')
df.loc[df['A'] == 'B']
....................................
>>> import string >>> string.replace('a', 'a') 'a'
def do_something(): while True: if input("Do you want to continue?")
from google.appengine.ext import webapp webapp.WSGIApplication(app.run())
from sqlalchemy.sql import func, func from sqlalchemy.sql import func q = func.
driver.find_element_by_css_selector('button.next')
$ echo $> $> $> $> $> $> $> $>
>>> import re >>> re.search(r'(?P<name>[a-
def get_first_name(name): if name == 'John': return name return
import re re.sub(r'(.*?)', r'\1', text)
import urllib2 from urllib2.request import RequestID, ResponseID from urllib2.request import
import pyodbc cursor = pyodbc.connect('dbname='my_db_name', user
import sys for i in range(n): sys.stdout.write(str(i
import sys, os def get_prompt(prompt): #... if you want to prompt
from xml.etree import ElementTree as ET root = ET.parse('http://example.
import numpy as np import matplotlib.pyplot as plt fig, ax = plt.subplots()
import boto.s3.connect_s3() bucket = boto.s3.bucket.
def create_new_code(code): if code == '': return code return code
import serial port = serial.SerialPort()
from flask import Flask from flask import make_app from flask import Flask from flask.client
import tweepy from tweepy import Tweepy from tweepy.api
import xml.etree.ElementTree as ElementTree tree = ElementTree.parse('test.xml')
from tornado.gen import minified_js_file from tornado.gen import gen from tornado
class User(models.Model): user = models.ForeignKey(User) class Meta:
import functools def decorator(func): @wraps(func) def wrapper(*args,
>>> for i, j in enumerate(gen):... print i, j... 1 1
if any(x in 'a' for x in 'b' if x in '
import os import time while True: try: os.stat(os.path.join
import os def open_file(filename): with open(filename, 'rb') as
>>> re.search(r'(?P<name>[a-z]+)
import os import sys def main(): print 'hello' sys.stdout.write('\n
import sys, __init__
with open('test.txt', 'w') as f: for i in range(
>>> import sys >>> sys.stdout.write('1.0') >>> sys.stdout.flush
>>> a = [1, 2, 3, 4, 5] >>> a [1, 2, 3, 4, 5]
>>> import re >>> [x for x in re.finditer(r'(a
urlpatterns = patterns('', url(r'^admin/', include('django.contrib.auth.
def __init__(self, value): self.value = value def __eq__(self
import os import shutil with open(os.path.join(os.path.dirname
import sys, os, sys, sys, sys, sys, sys, sys, sys
import multiprocessing def worker(): return multiprocessing.Pool() def worker(): return multiprocessing.Pool()
import csv with open('file.csv', 'rb') as f: reader = csv
class A(object): def __init__(self, a, b): self.a
pip install py2app
from django.core.files.uploadedfile import SimpleUploadedFile from django.core.
for i in range(n): # Do stuff
def default(self, *args, **kw): if not self.name: self
>>> import bs4 >>> soup = bs4.BeautifulSoup(html) >>> for elem
wx.Bind(wx.EVT_CHAR, self.on_char)
def do_something(): while True: if input("Do you want to continue?")
>>> [x for x in mylist if x[0] == 'a'] ['a', '
from django.core.urlresolvers import reverse from django.core.urlresolvers import reverse
>>> import itertools >>> >>> l = [[1,2,3],[4,5,6],[7,8,9]] >>> [
>>> import re >>> s = 'a b c d e f g g g g g
In [11]: df.loc[df['fisher'].isin(df['fish
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
import numpy as np import scipy.io.savezzz as savezzz
def button_clicked(self, button): if button.is_active: self.
from celery import Celery from celery.task import Task def task(task): return Task(
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
def map(obj, method): if isinstance(obj, basestring): return [method(
export PYTHONPATH=$PYTHONPATH:/usr/local/lib/activate
import matplotlib.pyplot as plt import numpy as np import matplotlib.dates as ts import matplotlib
>>> import re >>> re.split(r'(?P<name>[a-
import os import json from pymongo import MongoClient from pymongo import MongoClient from pymongo import MongoClient from pymongo
import os import shutil with open('file.txt', 'rb') as f: for
>>> import math >>> math.sqrt(math.log10(math.log10(
import struct def unpack(packet): return struct.unpack(">L",packet)
import os import os import os def get_subdir(dir): for root, dirnames
import urllib2 from urlparse import urlparse url = urlparse(urllib2.urlopen('http://www
>>> a = [1, 2, 3, 4, 5] >>> a [1, 2, 3, 4, 5] >>> a [1,
cursor.execute("INSERT INTO test(name) VALUES ({})".format(name))
>>> a = 'a' >>> b = 'b' >>> a.replace('a
import numpy as np import pickle with open('data.pickle', 'rb') as f
import os import sys, os, sys, os, sys, os, sys, os
import csv with open('data.csv', 'rb') as f: reader = csv
import os import sys, os, psutil, psutil, psutil, psutil, psutil, os
df.groupby('id').agg(lambda x: x.groupby('id').agg
import sys, time def main(): while True: user_input = raw_input("
import subprocess subprocess.check_output(["pip", "install", "pip"], shell=
import urllib def redirect(url): if url.startswith('http'): return url return urllib
import numpy as np a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,
def dialog_accept(self, dialog): dialog.accept() dialog.accept() dialog
>>> re.compile(r'(?P<name>[a-z]+)
>>> class A(object):... pass... >>> A.keys() ['a', '
>>> import itertools >>> >>> for i in itertools.combinations(range(50), 2):
import csv with open('file.csv', 'rb') as f: reader = csv
import uuid uuid.uuid4().hexdigest()
def breadth(node): if node is None: return [] return breadth(node
import sys, os, sys, sys, sys, sys, sys, sys, sys
import json d = { 'a':1, 'b':2, 'c':3, '
class A(object): def __init__(self, *args, **kwds):
def __getitem__(self, key): if key == self: return self elif key ==
repo.change(repo.get_change(change))
import os, collections def counter(): counter = collections.Counter() counter.update(counter
class C(object): def __init__(self, *args, **kwds):
def get_user_id(user_id): user_id = user_id
wx.caption(self.parent, self.parent.GetParent(), self.parent
import datetime, calendar def to_day(year, month, day): return calendar.
char[] { char[] = "hello"; char[] = "hello"; char[] =
import os for root, dirs, files in os.walk(root): for f in
setup.py setup.py setup.py setup.py setup.py setup.py
from django.utils.dateutil import format_date def to_date(date):
>>> import decimal >>> decimal.Decimal('0.1') Decimal('0.1')
df.pivot(index='A', columns=['B'])
>>> import base64 >>> base64.b64encode(base64.b64decode(base
>>> from collections import OrderedDict >>> >>> OrderedDict([('a', 'b'), ('c',
{% for item in list %} {{ item.name }} {% endfor %}
import urllib urllib.urlretrieve('http://www.example.com/file.txt
import itertools import itertools for i in itertools.combinations(range(10), repeat=i):
>>> from datetime import datetime >>> datetime.strptime('1922', '%m/%d/%
class MyForm(forms.Form): class Meta: model = MyModel fields = ('name
>>> import re >>> s = "a b c d e f g g g g g
>>> from nltk import word_tokenize >>> word_tokenize(sentences) [('a',
>>> import itertools >>> >>> list(itertools.chain.from_iterable(itertools
def handle(self, *args): if self.text: self.text = self
SELECT * FROM table WHERE (SELECT * FROM table) AND (SELECT * FROM table)
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
def render_template(self, template_name, **kwargs): context = super(
import subprocess p = subprocess.Popen((' ', 'test.py', 'test
def add_blank_line(line): if line.startswith(('':',':
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
import numpy as np import scipy.stats as stats import scipy.stats as stats import numpy
def default(self, *args, **kw): if self.name is None:
import sys, time def main(): while True: time.sleep(1) sys.stdout.
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
import boto s3 = boto.s3() bucket = s3.get_bucket(
import numpy as np from scipy.io import Image from scipy.io.misc import rgb
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
def subset_sum(seq, start, end): return sum(seq[start:
>>> import re >>> s = 'a string with a substring' >>> re.sub(
df.loc[df['A'] == 'B']
df.loc[df['A'] == 'B']
>>> import re >>> s = 'a,b,c,d,e,f
from django.core.management import setup setup(app) setup(app)
class Meta: #... def __init__(self, *args, **kw): super
class MyApplication(application): def run(self): # Do stuff here
import sys, telnetlib, telnetlib, telnetlib.Telnet, telnetlib.
>>> [x for x in range(len(x)+1) if x[i]
import sys import time def main(): while True: input = sys.stdin.readline()
df.apply(lambda x: df.apply(lambda y: df.apply(
from django.db.models import Q, Post, Comment, Comment, Comment, Comment
import os os.system('cls')
import zipfile import os import os zip = zipfile.ZipFile('test.zip') for root
plt.imshow(x, interpolation='none', aspect='auto') plt.imshow(
>>> import datetime >>> datetime.datetime.strptime('2015-02-13', '%Y-%m
>>> x = [1, 2, 3, 4] >>> y = [1, 2, 3, 4] >>> x [1, 2,
>>> from collections import Counter >>> Counter(sorted(list, key=lambda x: x
>>> import itertools >>> >>> >>> >>> [i for i in itertools.combinations(a,
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for i in soup.findAll('
import magic magic.magic_magic_function()
import pandas as pd df = pd.DataFrame({'A':['a','b','c
>>> int(round(1234,2)) 5
def print_function(func): print 'function: %s' % func.__name
from django.core.management import execute_command execute_command(" manage.py
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
>>> import re >>> s = 'a,b,c,d,e,f
import Image im = Image.open('image.jpg') im.resize((100,100
import numpy as np import matplotlib.pyplot as plt x = np.arange(0, 1, 1)
class FormSet(forms.FormSet): class Meta: model = User fields = ('
import os import sys import os os.path.dirname(os.path.abspath(__
env.hosts = env.hosts
import sys, os def create_new_module_name(name, bases, dct
>>> import string >>> string.translate(string.ascii_lowercase, string.digits
from django.db.models import Q, slugify from django.utils.slugify
import numpy as np import pandas as pd import numpy as np data = np.genfromtxt
>>> import re >>> re.findall(r'(?P<name>[a-
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
import json from tornado.gen import BaseJSONEncoder from tornado.http import HTTP
<select name="name" onchange="this.select_one()"> <option value
>>> import re >>> re.compile(r'<html.*?content=\s
>>> a = [1,2,3] >>> a [1, 2, 3] >>> a [1, 2, 3]
import socket def timeout(timeout): try: return socket.gethostbyname(
import numpy as np import matplotlib.pyplot as plt from scipy.io import load_dataset
{% if user.is_authenticated %} {% if user.is_authenticated %} {% endif
import os import itertools with open(filename, 'rb') as f: for line in
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
class A(object): def __init__(self, x): self.x = x
mer mer mer mer mer mer mer mer mer mer mer mer mer mer mer mer mer mer
import json json_data = json.load(json_data)
$.ajax({ url: 'http://www.example.com/login', data:
import sys, time def main(): while True: if sys.stdin.is_atty
def combine(a, b): return a + b + a + b
from pyodbc import pyodbc from sqlalchemy import create_engine, Column, MetaData from sqlalchemy.sql
>>> import struct >>> struct.unpack('>i', b'\x00') (u
import inspect def inspect(obj): return inspect.getsource(obj)
import os import itertools with open('test.txt', 'r') as f1, open
import sys, sql sql sql = "INSERT INTO table (col1,col2) VALUES ({
....................................
import subprocess subprocess.Popen(' ', shell=True)
>>> d = {k:v for k,v in d.items()} >>> d
import os.path.commonprefix(os.path.abspath(__file__))
>>> d = {k:v for k,v in d.items()} >>> d
(?P|||)
import sys eggs = [u'spam', u'spam', u'spam', u
import canvas canvas = canvas.Canvas(canvas) canvas.canvas.geometry('200x
import urllib import json url = 'http://www.example.com/search.php
>>> import os >>> os.stat('path/to/file') <stat object at
>>> import re >>> re.sub(r'(?P<name>[a-
def url_for(self, request, *args, **kwargs): # Do something
import numpy as np import tempfile def write_data(data): with tempfile.NamedTemporaryFile
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
class BaseModel(Document): __abstract__ = True
import xlwt workbook = xlwt.Workbook() worksheet = workbook.add_worksheet
import struct struct.unpack('>I', struct.pack('>I', struct.
def count(n): if n == 0: return 1 if n == 1: return 1 if
def func(x): return x + x return func
import os for root, dirs, files in os.walk(root): for file in
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
def grandchild(node, parent, child): if child is None: return grandchild
ax.set_xticklabels(list(zip(ax.get_xticklabels(),
def get_data(data): if data == '': return data else: return data
import urllib urllib.urlretrieve('http://www.example.com/', 'example.
import time def time_to_seconds(time): return time.time()
class Foo(object): def __init__(self, a, b): self.a
>>> d = {u'a': u'a', u'b': u'
# left margin is the right margin. # right margin is the right margin. # right
import pandas as pd df = pd.DataFrame({'A':['a','b','c
def create_list(list_of_tuples): for t in list_of_
>>> re.compile(r'(?P<name>[name])(?P<
def change_relationship_properties(node): if node.relationship_properties.name ==
db.collection.update({$inc:{$0}}}, {$unwind:{
def get_objects(self): return list(self.cursor.execute(sqlQuery
>>>''.join(map(str, list))''.join(map(str
>>> import re >>> re.compile(r'(?P<name>[a-
from flask import Flask from flask.decorators import csrf_token @csrf_token_
>>> sorted(sorted(data, key=lambda x: x[1], reverse=True),
>>> is_empty(u'foo') True >>> is_empty(u'foo
def on_button(self, event): # Do stuff here
import os with open('test.txt', 'rb') as f: for line in
import subprocess subprocess.Popen(('ssh', 'username', 'password'))
if isinstance(variable, basestring): print("This is a string") else: print("
class Image(object): def __init__(self, parent, image): self.parent
>>> for key, value in d.items(): print(key, value) >>> {'
from django.core.files.uploadedfile import SimpleUploadedFile from django.core.
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
def __eq__(self, other): if self is other: return True return False
>>> import sys >>> sys.stdout.write('\u033[') >>> sys.
text = self.text.get_parent().text.text = text
import os for root, dirs, files in os.walk(root): for f in
>>> d = {u'a': u'a', u'b': u'
def get_next_value(n): if n == 0: return n return next_
import subprocess subprocess.Popen((' ','my_program.py', 'w
import datetime import calendar def get_next_year(): return calendar.monthrange(year
class A(object): def __init__(self, a, b): self.a
import scipy.stats.bin_stats.bin_stats.bin_stats.bin
def intersect(a, b): return [i for i, j in zip(a
import json from cherrypy import Response from cherrypy import Client from cherrypy import cherrypy from cherrypy import json
import os f = open('file.txt', 'r') f.seek(0) f
import numpy as np import matplotlib.pyplot as plt import matplotlib.cm as cm from matplotlib
>>> import ast >>> ast.literal_eval('a,b,c,d,
def save(self, *args, **kwargs): if self.id: self.
>>> d = {k:v for k,v in d.iteritems()} >>> d
cursor.execute("INSERT INTO test(name) VALUES (%s)" % (name
import os import rtmp import sys import time def write_file(filename): with open
import time def schedule(): while True: time.sleep(60) # sleep for minute
import os import os for root, dirs, files in os.walk(root): for
df['A'] = df['B'].map(lambda x: x.mean())
import numpy as np import scipy.stats as stats import numpy as np import scipy.stats
INSERT INTO hash(hash) VALUES (SELECT hash FROM hash WHERE hash.hash = hash
....................................
import urllib url = 'http://www.example.com/my_html.html
perl -i 'print $a; print $a; print $a; print $
>>> d = {u'a': u'a', u'b': u'
def repeat_one(n): for i in range(n): yield i return repeat
def keyPress(event): # do stuff here return event def keyPress(event):
>>> d = {k:v for k,v in d.iteritems()} >>> d
>>> d = {k: min(v) for k,v in d.items
class Base(object): def __init__(self, x): self.x = x
import numpy as np a = np.array([[1,2,3],[4,5,6]]) np.
import csv with open('test.txt', 'rb') as f: reader = csv
def help(name): """This function is called by the help() function. """ return
>>> import math >>> math.sqrt(math.sqrt(math.sqrt(math.
>>> l = [1,2,3,4,5,6] >>> [l[i:i+3]
import numpy as np import os with open('file.txt', 'r') as f
def get_or_create(self, request, *args, **kwargs): if
df.drop(df.index, axis=1)
def get_choice(value): return value.lower()
import os import sys import os import sys import os import sys import os import sys sys sys
>>> re.search(r'(?P<name>[a-z]+)
import datetime, timedelta, timedelta, timedelta, timedelta, timedelta, timedelta, timedelta, timedelta
import numpy as np import csv with open('data.csv', 'wb') as f
<p> <a>Some text</a> <p>Some text</p
In [11]: df.groupby('id').apply(lambda x: x.iloc
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> [
>>> a = numpy.array([1, 2, 3, 4]) >>> a array([1, 2, 3, 4
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('c', '
import requests r = requests.get(url, headers={'User-Agent': 'Mozilla
>>> from collections import Counter >>> Counter(word for word, count in Counter(word.
>>> import pickle >>> pickle.load(pickle.dumps(data)) >>> pickle.load
>>> [x for x in list_of_tuples if len(x) == len
>>> import collections >>> d1 = collections.defaultdict(list) >>> d2 =
def is_unique(self, request): if request.POST.get('unique'):
def __init__(self, parent, *args, **kwds): self.parent
class A(object): def __init__(self, *args, **kwds):
import Image import numpy as np from scipy.io import BytesIO from scipy.io import Image
df.join(df.index, on='id')
>>> import itertools >>> [i for i in itertools.combinations(a, len(a
import sys import subprocess proc = subprocess.Popen(sys.argv[1:]) stdout, stderr
{% for item in days %} {% if item['date']>datetime.datetime(2013,
class bin(object): def __init__(self, *args, **kw): super
import os import sys def main(): print 'hello' sys.stdout.flush() sys
import random def random_string(): return random.choice(string.ascii_lowercase
import csv with open('test.csv', 'wb') as f: writer = csv
>>> import inspect >>> inspect.getsource(inspect.currentframe().f_code)
>>> re.sub(r'(a)(?P<name>[a-
>>> [x.split('_') for x in ['a', 'b', '
import os import os for root, dirs, files in os.walk(root): for
import numpy as np import scipy.stats as stats stats stats.t_stats.t
min(tuple(x) for x in my_list)
pip install flask
>>> import re >>> re.search(r'(a)((a)((b
from pydoc import doc doc = doc.render_string(u'test.html
def f(x): return x + 1 f(x) # or f(x
import json json_data = json.load(json_data) json_data['
if url.startswith('http://www.example.com/'): print 'ok'
>>> import yaml >>> yaml.load(yaml.dump(data)) {'a': 1,
def lua_func(x): return x * x + y * y
def print_recursion(n): for i in range(n): print(n[
>>> re.findall(r'(?P<name>[a-z]+)
import xlrd workbook = xlrd.open_workbook('test.xls') worksheet
>>> '{0}:{1}'.format(*a) 'a'
def __init__(self, *args, **kwds): self.data = self
>>> d = {k:v for k,v in d.items()} >>> d
import os import glob files = glob.glob('*.txt') for files in files:
from pymongo import MongoClient db = MongoClient() db.my_collection.update({'_id
import numpy as np import scipy.io.rotate_array(np.array([1.
df = pd.DataFrame({'A': [1,2,3], 'B': [4,5,6]}).
>>> import re >>> s = 'a b c d e f g g g g g
>>> print(Decimal('0.1')) 0.1
import os os.system('.exe')
from scrapy.utils import Selector from scrapy.spider import Spider from scrapy.utils import Selector
>>> d = {k:v for k,v in d.iteritems()} >>> d
import csv with open('data.csv', 'rb') as f: reader = csv
>>> re.search(r'(?P<name>[a-z]+)
class A(object): @classmethod def __init__(cls, *args, **
import mock def test_patch_module_name(mock): mock.patch('module
from hive import * from hive.engine import Logengine from hive.engine import Session Session
import datetime, calendar def week_day(start_date, end_date): start
import numpy as np import scipy.io.pdf import scipy.io.pdf, scipy
import unittest def test_skip_module(self): with open(self.filename)
def repeat(n): if n == 0: return n return repeat(n-1)
self.rect = wx.Rectangle(self.rect, self.rect.width,
>>> import html >>> html.literal_eval('''<html> <head> <
import pickle with open('data.pickle', 'wb') as pickle: pickle.dump
df.columns = df.columns.tolist()
def get_user_id(user_id): user_id = user_id
if int(input("Please enter a number: "))
print("Hello, world!")
def on_insert(self, document): if document.name == 'foo': document
import os for root, dirs, files in os.walk(root): for f in
import multiprocessing def worker(): return multiprocessing.Pool() def worker(): return multiprocessing.Pool()
def recursive_func(lst, n): if n == 0: return lst[:n-1
import mayavi.mlab as mlab import matplotlib.pyplot as plt from mayavi
from datetime import datetime, timedelta from sqlalchemy import query query = query.filter(date__
import csv from itertools import chain from itertools import chain from itertools import chain from itertools import chain
import requests r = requests.post(url, data=data)
class A(object): def __init__(self, x, y): self.x
>>> re.search(r'(?P<name>[a-z]+)
>>> import Image >>> img = Image.open('test.png') >>> width = img
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
df['A'] = df['B'].map(lambda x: x['A'].
def test_get_prop_prop_prop_prop_prop_prop_prop
import numpy as np import scipy.io.savetxt('test.txt', data
from datetime import datetime, timedelta from mysql import * from datetime import timedelta from datetime import datetime
import time def main(): while True: time.sleep(1) if __name__ == "__
[build_ext] recipe = zc.egg
>>> a = b = a >>> a b = b >>> a = b >>> a b
>>> from sympy import symbols >>> symbols('x') ['x', 'y', 'z
import sys, os, sys, sys, sys, sys, sys, sys, sys
>>> import re >>> s = '{"a":1, "b":2, "c":
df.groupby('name').agg({'value': lambda x: x.value})
import sys, os, sys, sys, sys, sys, sys, sys, sys
import codecs.open(u'foo.txt', 'rU')
def factorial(n): if n == 0: return 1 return factorial(n-1)
import gzip from django.http import HttpResponse def compress(request): return HttpResponse(json.
....................................
import pycassa import os import sys import pycassa.pycassa as pyc
>>> re.compile(r'(?P<name>[a-z]+)
import sys import time def main(): while True: input = sys.stdin.readline()
import subprocess subprocess.Popen(('echo', 'test.txt', 'test.txt
from scrapy import Request from scrapy.spider import Spider from scrapy.html import parse from scrapy
CREATE TABLE test ( id INT NOT NULL, name INT NOT NULL, age INT NOT NULL
df.loc[df['A'] == df['B']].dropna()
import threading def worker(d): for key, value in d.iteritems(): print key
>>> d = {u'a': u'a', u'b': u'
def region(x, y): return (x+y)
from os.path import join, dirname, basename from os.path import splitext from os
>>> label = 'This is a label' >>> label.set_font_size(
import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot as plt plt.
>>> url = 'http://www.example.com/page.html?q=
from PyQt4.QtCore import * from PyQt4.QtCore import * from PyQt4.Qt import *
with open('file.txt', 'r') as f: for line in f:
PyObject *result = PyObject_CallObject(PyObject *self, "foo", "
from nose.tools import test_runner from nose.tools import test_runner from nose
import os os.environ['DJANGO_SETTINGS_MODULE'] = 'YOUR_SETTINGS
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
def fictive(fictive): #... def fictive(fict
>>> d = {u'a': u'a', u'b': u'
>>> import string >>> string = "foo" >>> string.replace(string.ascii_
>>> import struct >>> struct.unpack("I", "hello") (u'Hello',
import urllib from urllib import urlretrieve urlretrieve('http://www.example.com/
import os import csv with open('data.csv', 'rb') as f: reader
PyObject *result = PyObject_CallObject(ctypes.c_char_p, "
def create_button(self, button): # Do Something self.button = Button(
def parse_code(code): code = code.split(';') return [code
def parse(self, response): for link in response.xpath('//a/@href'):
def index(start, stop, step): if start > stop: return start return step
def get_queryset(self): return qs.filter(self.id=self.
from PyQt4.QtCore import QMessageBox, QMessageBox, QMessageBox, QMessageBox, Q
>>> d = {k:v for k,v in d.iteritems()} >>> d
import matplotlib.pyplot as plt from matplotlib.patches import PatchCollection from matplotlib.patches import
import os for file in os.listdir(os.path.join(os.path
>>> re.findall(r'(?P<name>[a-z]+)
df['A'] = df['B'].map(lambda x: x['A'].
from django.test import TestTestTestTestTest import unittest from django.test.test
>>> import itertools >>> >>> itertools.product(range(n), repeat=n) [
import __init__ __init__ __init__ __init__ __init__ __init
import os def create_file(filename): with open(filename, 'rb') as
import numpy as np import matplotlib.pyplot as plt import matplotlib.pyplot as plt data =
import json from urllib import urlencode url = 'http://www.example.com/json
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
def help(self): if self.help: self.help()
>>> from nltk import word_tokenize >>> word_tokenize = [word.tokenize(line
import os import sys import os import sys import os import sys for root, dirs, files
import os os.system('cls')
from kivy import * from kivy import * from kivy.app import App, App, App
def func(x): return x + x def func2(x): return x + x
class MyEntity(db.Model): #... def __init__(self, *args
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for row in soup.findAll('
In [11]: df.index.tolist() Out[11]: ['a', '
>>> import re >>> s = 'a b c d e f g g g g g
def pairwise(iterable): return tuple(chain.from_iterable(iterable))
import threading def f(): while True: try: f.write(data) except Keyboard
SELECT * FROM table1 WHERE table2 = (SELECT * FROM table2) AND table1
def solve(x): return x * x
def bracket_list(node): if node is None: return [] else: return bracket
def __init__(self, *args, **kwargs): super(MyWidget, self
df.groupby('Group').agg(lambda x: x.groupby('Group').agg
setuptools.setup_egg_requires_egg_name = 'foo'
import re with open('file1.txt', 'r') as f1, open('file
>>> import ast >>> ast.literal_eval('['a','b','c','d
if soup.find_all('div',attrs={'class':'myclass'})[0] ==
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
>>> re.sub(r'(a)(?=[a-z])', r
print("This is a test") # prints "This is a test"
>>> import itertools >>> >>> >>> list(itertools.chain.from_iterable(it
import pydoc.Pydoc.PDFPDFPDFPDFPDFPDFPDFPDFPDFPDFPDF
self.item.color = self.item.color
def print_list(n): for i in range(n): print(i)
>>> import urllib >>> urllib.quote('uuuuuuuuuu
import json json_data = json.dumps(data)
>>> class A(object):... pass... >>> A.A = A >>> A.
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
import ImageTk.PhotoImage('test.png')
def delete(self, request): #... return self.table.delete(request)
>>> import re >>> re.findall(r'(?P<name>[a-
>>> import itertools >>> [i for i in itertools.combinations(a, 2) if i
def create_function(name, *args, **kwds): if name == '
import bpy bpy.data.scene.scene.scene.scene.scene.scene.
def forest(n): if n == 0: return [] else: return forest(n-1)
import docx doc = docx.Workbook() doc.add_paragraph(paragraph1,paragraph2)
self.calendarWidget.current().current().current().current().current().current().current
<table> <tr> <td> <a>Foo</a> <td
import imaplib imaplib.connect_to_imap(host, port, username,
>>> import itertools >>> >>> >>> from itertools import product >>> >>> >>> >>> >>> >>> from itertools
>>>''.join(map(str, x.split())) 'a'
df1 = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 2, 3]
import mock import numpy as np data = np.array([1, 2, 3, 4]) mock.
>>> a = [1,2,3] >>> b = [1,2,3] >>> a [1, 2, 3] >>>
import hashlib hash = hashlib.sha1() hash.update(data)
def _memoized(df): return df.groupby('name').agg(lambda x
df = pd.DataFrame({'A': ['a', 'b', 'c', '
from sklearn.pipeline import Pipeline from sklearn.svm import LinearSVC from sklearn.pipeline
import canvas canvas = canvas.Canvas(canvas) canvas.create_text(10, 10, '
>>> import re >>> s = 'a string with a string with a string with a string
def wrapper(func, *args, **kwargs): if not args: args = (
import matplotlib.pyplot as plt plt.plot(x,y) plt.show()
import xlwt import datetime wb = xlwt.Workbook() wb.save('test.
from django.core.management import setup setup( name='my_app', version='
>>> d = {k:v for k,v in d.iteritems()} >>> d
>>> import ast >>> ast.literal_eval('foo', 'bar') ['foo',
def sum_sum(num): sum = 0 while True: num += 1 if num
import csv with open('data.csv', 'rb') as csvfile: reader =
def main(): # Do stuff here return view(request,'main')
>>> min(a, key=lambda x: x[0]) 'nan'
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
>>> x = [1, 2, 3, 4] >>> y = x >>> y [1, 2, 3, 4]
cursor.execute("INSERT INTO table (name) VALUES (%s)" % (name
import numpy as np from scipy.integrate import quad, quad, quad, quad,
>>> import re >>> re.sub(r'(a)([^"]+', r
>>> df.to_dict(columns=['a', 'b', 'c']) {'
>>> import urllib >>> url = 'http://www.example.com/page.html
from django.db.models import Q users = User.objects.filter(user__
def get_first_name(name): if name == 'first': return name return
results = [result for result in results if result['date'] == result['date']
def __init__(self, *args, **kwds): self.args = args
import codecs codecs.open(u'test.doc', 'utf-8')
import os import sys import os import sys import os import sys import os import sys import os
import xl.workbook wb = xl.Workbook() wb.write('A1', '
def find_node(node): if node is None: return [] if node.left
from django.db.models import Q qs = qs.filter(Q(name__
>>> from itertools import chain >>> [chain(x) for x in chain(zip(
from django.core.text import rich_text_editor from django.core.text
plt.plot(x, y, marker='-', color='r', linewidth=2)
import pandas as pd df = pd.DataFrame({'A': [1, 2, 3], 'B':
>>> import itertools >>> >>> [i for i in itertools.combinations(it, 2)]
>>> a = ['a', 'b', 'c', 'd', 'e',
from pyramid.db import db db.create_row(db.create_row(
import pandas as pd df = pd.DataFrame({'A': [1, 2, 3], 'B':
>>> from itertools import chain >>> >>> [chain(x) for x in chain(chain
def print_list(list_of_tuples): for t in list_of_
>>> import math >>> math.sqrt(math.log(math.log(math.
>>> import re >>> re.search(r'(a)((a)((b
>>> import codecs >>> codecs.decode('utf8','ignore') u'utf8u
>>> import lxml.html >>> tree = lxml.html.parse('http://www.
import os for line in os.listdir(path): if line.startswith('file'):
def nested_func(x, y): return x + y + z + z +
def multiply(matrix, n): if n == 0: return matrix[n-n:
>>> re.findall(r'(?P<name>[a-z]+)
import pandas as pd df = pd.read_csv('file.csv', header=0)
import xlrd xlrd.open_workbook(filename)
def create_initial(request): initial = {} for key, value in request.POST
def hash(node): if node is None: return hash(node) return hash(
{% for field in form.fields %} <h1>{{ field.name }}</h
import random lines = [line.strip() for line in lines]
>>> from collections import Counter >>> d = Counter(sorted(d.items(), key=
import os for root, dirs, files in os.walk(path): for file in
def counter(counter): counter = 0 while counter < 100: counter += 1 return counter
import i...
>>> a = numpy.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
import os import collections blobs = collections.defaultdict(list) for blobs in blobs:
>>> l = [(1,2), (3,4), (4,5)] >>> [l[i:
import os os.system('cls')
if (self.rect.collididididididididididid
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
import sys, os, sys, sys, sys, sys, sys, sys, sys
import os import os for root, dirs, files in os.walk(root): for
def check(self): self.checkbutton = Checkbutton(self, text='check
import numpy as np a = np.array([1,2,3,4,5,6,7,8]) b = np
from django.db.models import Q from django.db.models import Q from django
from django.contrib.admin import setup setup(app=app, **settings)
class User(models.Model): user = models.ForeignKey(User) class Meta:
def run(self): self.window = self.window.parent() self.window
import numpy as np import scipy.linalg.matrix as linalg matrix = np.matrix(
( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
while True: if input == '': print('ok') break else: print('ok
from web2py import web2py app = web2py.Application(app)
>>> import urllib >>> url = 'http://www.example.com/page.html
>>> re.sub(r'(?P<name>[a-z]+)
def get_base_url(self, base_url): return base_url +
from django.db.models import Q from django.db.models import Q from django
def func(): global func def func(): global func() # Do stuff here func() #
import os import urllib import urllib import os import urllib url = 'http://www.example
with open('file.txt', 'r') as f: for line in f:
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
>>> import re >>> s = "a b c d e f g g g g g
df.groupby('A').agg(lambda x: x.index)
def total_amount(request): total = 0 total_amount = 0 total_amount
df.replace(df['A'], df['B'])
import csv with open('data.csv', 'rb') as f: reader = csv
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
from scrapy import Request from scrapy.utils import parse from scrapy.spider import Spider from scrapy
def create_list(self, *args, **kwargs): #... return [self
....................................
>>> class A(object):... pass... >>> A.A = A >>> A.
import sys import time def print_stdout(stdout): sys.stdout = stdout sys.
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
import urllib import urllib.request url = 'http://www.example.com/login
import urllib def post(self, *args, **kw): if not self.request
from django.core.urlresolvers import reverse from django.core.urlresolvers import reverse
>>> from markdown import markdown >>> markdown(text_content) '<html> <head>
>>> import xlsxwriter >>> workbook = xlsxwriter.Workbook('test.xlsx') >>> workbook
def create_database(): db = db.connect(host="localhost", user="root
{% if user.is_active %} <p>User is active</p> {%
import subprocess subprocess.Popen([" ", " ", " ", " ", "
import sys import os def clear_stdout(): sys.stdout = open(os.dev
wx.Frame.__init__(self, parent, style, style, size, style,
class User(models.Model): user = models.ForeignKey(User) user = models
>>>''.join(map(str, numbers)) '1234'
import maya.cmds cmds = cmds.cmds.cmds.cmds.cmds.cmds
def f(): def f(): print 'hello' f() # Do stuff here f()
import urllib2 url = 'http://www.example.com/page.html'
class A(object): def __init__(self, a, b): self.a
for i in range(len(soup.findAll('a',{'class':'a'})
import os import sys, os def open(filename): try: return os.open(
def main(): def foo(): pass def bar(): pass def baz(): pass def quux
>>> import itertools >>> >>> [i for i,j in itertools.chain(a,
import ecf from ecf.shared_edit import shared_edit_function def edit
>>> import itertools >>> [x for x in itertools.combinations(a, b)] [
class A(object): def __init__(self, parent): self.parent = parent
>>> import ast >>> ast.literal_eval(ast.literal_eval(ast.
import os import os for root, dirs, files in os.walk(root): if
pip.requirements.get('https://github.com/my-repo/my-
import csv with open('data.csv', 'rb') as f: reader = csv
import mayavi.pyplot as plt fig, ax = plt.subplots() ax.imshow
import os with open('file.txt', 'r') as f: for line in
from email.utils import add_email_part(email.Subject, email.Body
manage.py runserver 0.0.0.0:8000
>>> from collections import OrderedDict >>> d = OrderedDict() >>> d['a'] = 'a
>>> map(lambda x: x.split(','), ['a', 'b', '
from datetime import timedelta from django.db import models class Time(models.Model): timestamp
>>> d = {x: y for x, y in zip(a, b)}
def label_size(self, label): label.set_size(width, height
# create relationship graph = neo4j.Graph() # create relationship graph.add_
class A(object): def __init__(self, *args, **kwds):
from bs4 import BeautifulSoup soup = BeautifulSoup(html) links = soup.findAll('a
df.merge(df, left_on='id', right_on='id',
import csv with open('data.csv', 'rb') as f1, open('data
def f(x): return x + x def f(x): return x + x
import win32gui win32gui.GetWindowText(win32gui.GetWindow
class CreateView(CreateView): def get_context_data(self, **kwargs
>>> for i in range(len(a)):... a[i] = a[
>>> import string >>> string.join('a', 'b', 'c') 'a
def compare(a, b): if a == b: return True return False
>>> import random >>> random.shuffle(list) >>> list(random.sample(list
import socket def send(data): while True: data = socket.recv(1024) if
plt.scatter(x, y, c=c, cmap=c_r)
class A(object): def __init__(self, a, b): self.a
>>> set(list(set(list(set(list(set(list(list
def __init__(self, text): self.text = text def __call__(self
>>> d = {'a':1,'b':2,'c':3,'d':
import datetime, calendar def get_next_month(year): month = 1 while month
import base class Base(object): def __init__(self, base): self.base
>>> import re >>> re.split(r'(\d+)', 'a,b
import urllib urllib.urlretrieve('http://www.example.com/page.html
import numpy as np import scipy.stats as stats stats stats.ttest(data=
class A(object): def __init__(self, a, b): self.a
import urllib def handle(request): # Do stuff with request.headers return urllib.url
import numpy as np A = np.array([[1,2,3],[4,5,6]]) B =
>>> import re >>> re.sub(r'(?<=\s)', r'
class BaseModel(models.Model): #... class Meta: abstract = True
import itertools import pandas as pd df = pd.DataFrame({'A': [1, 2, 3], '
>>> d = {'a':1, 'b':2, 'c':3, 'd':
import urllib urllib.urlretrieve('http://www.example.com/test.html
>>> import base64 >>> base64.b64decode(base64.b64decode(base
class A(object): def __init__(self, *args, **kwds):
>>> from bs4 import BeautifulSoup >>> soup = BeautifulSoup(html) >>> soup.findAll('
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
In [1]: from scipy.spatial.distance import distance In [2]: distance = distance.
from bottle import route, run app = run(app) run(app)
import os if os.getppid() == os.getppid(): print("
>>> isinstance(s, basestring) True >>> isinstance(s, str) False
def __init__(self, *args, **kw): self.args = args self
import numpy as np import scipy.spatial.distance_matrix as km_matrix = scipy
>>> import itertools >>> >>> [list(g) for g in itertools.groupby(data
>>> [tuple(x) for x in range(len(x))] [('a',
print("This is a test sentence")
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
>>> import re >>> s = 'foo bar baz' >>> re.findall(r'
def first_prime(n): return list(set(n))
import os import tarfile import os import os import os for root, dirs, files in os
import pandas as pd df = pd.read_excel(filename, sheet_name='
>>> re.compile(r'(?P<name>[a-z]+)
>>> d = {k:v for k,v in d.iteritems()} >>> d
import codecs with codecs.open(filename, 'rb') as f: data = f
>>> set(x) == set(y) True
import datetime, timedelta def to_datetime(date): return datetime.strptime(date,
import os os.system('cls')
PyQt4.QtCore.QSqliteObject.connect(self, SIGNAL("clicked(Q
>>> import re >>> re.findall(r'(?P<name>[a-
import cPickle cPickle cPickle cPickle cPickle cPickle cPickle cPickle cPickle cPickle cPickle cPickle cPickle cPickle cPickle cPickle cPickle
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
import urllib urllib.urlopen("http://www.example.com/")
import socket socket.socket(socket.AF_INET, socket.SOCK_STREAM
def remove_all(self, combo): if combo.get_active() == False
>>> a = [[1,2,3],[4,5,6],[7,8,9]] >>> b = [[1,2,3],[
import urllib if urllib.urlretrieve(url, path): print 'HTTP OK' else
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
import pandas as pd df = pd.DataFrame({'A':['a','b','c
def create_form(self, request, *args, **kw): form = self
>>> import itertools >>> list(itertools.chain.from_iterable(itertools.
def get_node_name(node): if node.name == 'name': return
def default(self, *args, **kw): if not self.defaults: self
import urllib from pyPdf import PdfPages from pyPdf import PdfPages from pyPdf import
import datetime import calendar def get_date(start_date, end_date): return
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
>>> class A(object):... def __init__(self, x, y):...
class A(object): @classmethod def foo(cls): return cls() class B
import subprocess subprocess.Popen((' ','my_program.py', 'a
<script> var buttons = document.getElementsByTagName('button') for button in buttons:
from fabric.tasks import execute execute('task1', 'task2')
import subprocess p1 = subprocess.Popen(('a', 'b'), stdout=subprocess
import csv with open('data.csv', 'rb') as f: reader = csv
import win32api import win32api win32api.Win32_API win32api
def __call__(self, *args, **kwds): if self.parent is
import os import sys import os import sys import os import sys import os import sys import os
from flask import Flask from flask.ext.auth import BasicAuthentication from flask.ext.
>>> l_counts = {} >>> l_counts[l_counts[l_counts
import time def print_string(s): while True: time.sleep(time.
from django.db.models import Q, Q, Q, Q, Q, Q
import os for root, dirs, files in os.walk(root): for f in
>>> import ast >>> ast.literal_eval('['+']') ['['+']
QWebWidget::background()->setBackground('red')->setBackground('blue')->setBackground
>>> set(set(x)) set([2]) >>> set(set(x)) set
>>> import collections >>> collections.Counter(string.ascii_lowercase) Counter({'a
import numpy as np a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,
>>> a = [1, 2, 3] >>> b = [1, 2, 3] >>> a [1, 2, 3]
from wsgi import WSGIServer from wsgi import HTTPServer from wsgi import setup_app from wsgi
plt.xticks(x, y)
import os import sys, os, os, os, os, os, os, os
def get_data(self, request): data = {} for key, value in request
>>> d = {k:v for k,v in d.iteritems()} >>> d
import win32com.client win32com.client.GetNetworkInfo(None,
import sys, os def is_interactively_interactively_interactively
class MyWorkbook(object): def __init__(self, *args, **kwds
import pandas as pd df = pd.DataFrame({'A': [1, 2, 3], 'B':
with open('test.txt', 'w') as f: f.write(line
self.vboxLayout.removeAll(self.vboxLayout.itemText())
import subprocess subprocess.Popen('grep', shell=True)
>>> from sympy import Symbol >>> Symbol('x') Symbol('x')
>>> a = np.array([1,2,3]) >>> b = np.array([4,
>>> from collections import Counter >>> Counter(Counter(tuple(tuple(tuple(tuple(
def get_queryset(self): return self.queryset.filter(parent__parent=
def run(): while True: if __name__ == "__main__": run()
>>> import re >>> re.sub(r'(a|b|c)',
def __init__(self, parent, *args, **kw): self.parent =
>>> import re >>> s = "a b c d e f g g g g g
import numpy as np import matplotlib.pyplot as plt df = pd.DataFrame({'A':
def __init__(self, label): self.label = label def __call__(self
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
import os os.system('cls')
fig = plt.figure() ax = fig.add_subplot(111) ax.plot
import xml.etree.ElementTree as ET tree = ET.parse('test.xml')
def sum_sum(n): if n == 0: return 1 return sum_sum(
nose.run(test_func, test_func.defaults)
class A(object): def __init__(self, a, b): self.a
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
def on_label_clicked(self, widget): print widget.data()
>>> [x for x in tup if x[0] == 'a'] [['a', '
from django.db.models import Q from django.db.models import Q from django
import subprocess subprocess.Popen(('netstat','my_program.py', '
>>> import unicodedata >>> unicodedata.normalize('NFD', u'uuci') u
import numpy as np import pandas as pd df = pd.DataFrame({'A': [1, 2,
import urllib url = 'http://www.example.com/page.html' print
import sys, time def skip_first_line(stdin, line_number): if
import sys sys.path.append(os.path.dirname(__file__))
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
def __del__(self): if self: self.x = self.x # this
>>> import re >>> s = 'a b c d e f g g g g g
if not session.query(User).filter(User.id == user_id).
import numpy as np import scipy.stats as stats def monotonic(data): return np
>>> import csv >>> >>> data = [["a", "b", "c", "
import os import sys, os, sys, os, sys, sys, sys, sys
df.columns.name = df.columns.name.split('_')
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
def post(self, request, *args, **kw): # Do stuff with the
def __init__(self, *args, **kwds): self.kwds =
import matplotlib.pyplot as plt from matplotlib.collections import LineCollection from matplotlib.collections import
min(node for node in tree.getiterator() if node.type =='min
>>> import re >>> [re.compile(r'(a)(?=[a])
>>> import re >>> re.search(r'(?P<name>[a-
class A(object): def __init__(self, a, b): self.a
>>> import string >>> string = 'a b c d e f g g g g h
import os def test_file(filename): with open(filename, 'rb') as
>>> a = [1,2,3] >>> b = [1,2,3] >>> a[0] [1, 2, 3]
>>> a = [1,2,3] >>> b = a >>> a [1, 2, 3]
>>> import csv >>> with open('test.csv', 'w') as f: writer
import zipfile zipfile.ZipFile(zipfile, 'w')
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
>>> a = [1,2,3] >>> b = a >>> b [1, 2, 3] >>> a [1,
from django.db import connection connection = connection.connection() cursor = connection.cursor()
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> [
from django.db import connection def search(request): search_data = {} for search
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
import serial port = serial.SerialPort() port.write(data) port.write
>>> from string import escape >>> escape(u'\\u00F9F9F
import socket def connect(): while True: try: socket.setdefaulttimeout(30) except socket
class MyDict(dict): def __init__(self, *args, **kw):
import subprocess subprocess.Popen('command', shell=True)
class A(object): def __init__(self, a, b): self.a
import numpy as np from sqlalchemy import create_engine, MetaData engine = create_engine('
>>> import string >>> string.join('abc', 'defghi') 'abc',
import json json json_data = json.load(json_data) user_id
def sort(list): return sorted(list, key=lambda x: x[1], reverse
def __new__(cls, *args, **kwds): if isinstance(cls,
import os def dir(dir): return os.path.abspath(dir)
import datetime, timedelta start_date = datetime.datetime.now().strftime("%Y-%
>>> import re >>> re.findall(r'(a)((a)((b
box = gtk.Box(attrs={'class': 'box'}) box.pack_for
import socket from pyfpm import HTTPServer from pyfpm.util import Fpm
def f(x): return x + 1 def f(x): return x + 1
class A(object): def __init__(self, a, b): self.a
import os for root, dirs, files in os.walk(root): for f in
df.groupby('name').agg(lambda x: x.values)
import re with open('file.txt', 'r') as f: for line in
import urllib from urlparse import urlparse url = 'http://www.example.com/page
>>> d = {k: max(v) for k,v in d.iteritems
from django.db.models import Q, Q, Q, Q, Q, Q
>>> import itertools >>> >>> for i in itertools.product(*[(1,2),(3,4)])
def save(self, *args, **kwargs): # Do stuff with self.request
import sys, os, sys, sys, sys, sys, sys, sys, sys
def max_even(n, k): if k == 0: return n + 1 return
>>> a = [('a', 'b'), ('c', 'd'), ('d',
import numpy as np import pandas as pd df = pd.DataFrame(np.random.
import requests r = requests.get(url, headers={'User-Agent': 'Mozilla
from django.shortcuts import redirect from django.shortcuts import redirect from django.shortcut
from lxml import etree xmlschema = etree.XMLSchema(schema) xmlschema.schema =
cursor.execute("SELECT * FROM table WHERE id IN (SELECT id FROM table WHERE id
def query(): global query query = raw_input("Query: ") query = raw_
import datetime.datetime.utcnow().strftime('%m/%d/%Y')
if ssh.connect_to_host(host, port) == True: print "
def skip_values(value): for key, value in enumerate(value): yield value
from flask import Flask from flask.ext.app import app from flask.ext.app
import json data = json.load(json_data)
def max_value(data): max_value = max(data) return max_
>>> a = [1, 2, 3, 4] >>> b = [1, 2, 3, 4] >>> a [1, 2,
import csv with open('test.csv', 'wb') as f: writer = csv
class A(object): def __init__(self, a, b): self.a
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
>>> from collections import Counter >>> Counter(list(Counter(x) for x in xrange
# The label is the label, # the label is the label, # the label is
df.merge(df1, left_on='id', right_on='id')
def get_items(self, *args, **kw): #... return [self
from urllib import urlencode urlencode({'name': 'Jake', 'age': '24',
db.find({"$or": {"$and": {"$or": {"$and
class UserForm(forms.Form): class Meta: proxy = True class UserForm(
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('c', '
if request.POST.get('file_name', None) == request.POST.
import csv with open('data.csv', 'rb') as csvfile: reader =
import os for line in open('file.txt'): if line.startswith('a'):
setup.py install.py setup.py install.py setup.py install.py
SELECT * FROM table WHERE NOT EXISTS (SELECT * FROM table WHERE NOT EXISTS (SELECT *
>>> import collections >>> d = collections.defaultdict(list) >>> d.update(
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
def conditional_where(condition, value): if condition: return value else: return value
import os os.makedirs(os.path.dirname(__file__))
def reverse(sentence): while True: sentence = sentence.lower() if not sentence:
>>> import re >>> s = "a string with a substring" >>> re.sub(
if all(x in 'or' for x in ('a', 'b', '
def nested_list(n): for i in range(n): yield i for j
import sys sys.path.append(os.path.abspath(__file__))
def deriv(x, y): if y == 0: return x + y return deriv(
if isinstance(x, int): # do stuff
>>> from itertools import chain >>> >>> a = [('a', 'b'), ('c',
class A(object): def __init__(self, a, b): self.a
import csv with open('my.csv', 'rb') as f: reader = csv
import os import sys sys.path.append(os.path.dirname(sys.
>>> import itertools >>> >>> for i in itertools.product(*[i]):... print
import numpy as np import scipy.stats as stats import scipy.stats as stats import numpy
import csv with open('test.csv', 'rb') as f: reader = csv
import matplotlib.pyplot as plt from hist2d import hist2d from matplotlib.patches
from flask import Flask from flask.ext.html import Template from flask.ext.html
$ perl -e 'print $1;'
import subprocess subprocess.Popen(["putty", "putty"])
from contextlib import closing(gunicorn.Gunicorn.instance())
import csv from flask import Flask from flask import Response from flask.io import StringIO from flask
import re line = 'hello, how are you?' # or whatever line you want
class A(object): def __init__(self, value): self.value = value
gtk.garbage_collect(self.parent))
import subprocess p = subprocess.Popen(args, stdout=subprocess.PIPE) for i
import datetime from pytz import timezone, time def utc_time(tz): tz = tz
import pylongs.PyObject, pylongs.PyObject, pylongs
import sys for i in range(len(sys.stdin)-1): sys.stdout
import time def main(): while True: time.sleep(1) print("Starting process") main
$ echo $ echo $ echo $ echo $ echo $ echo $ echo $ echo $ echo
import urlparse url = urlparse.urlparse(url)
>>> import random >>> random.randint(0, 100) >>> random.randint(0, 100) >>> random.
def func(x): return x + 1 def func2(x): return x + 1
import xlrd xlrd.open_workbook('test.xls') for row in
import matplotlib.pyplot as plt import numpy as np x = np.array([1,2,3
[x for x in range(len(x)+1) if x[i] ==
>>> import re >>> s = 'a b c d e f g g g g g
In [1]: df.set_index('A') In [2]: df.set_
df.groupby('name').apply(lambda x: x.replace(' ', ''))
>>> from decimal import Decimal >>> Decimal('0.14285714285714285714285714
from google.appengine.ext import ndb from google.appengine.ext.datastore import Key
<script> var data = []; var data = []; data.push(data); data
import sys, time def myfunc(): print 'I' sys.stdout.flush()
def create_list(list_of_vars): # create list_of_vars
df.merge(df1, left_on='id', right_on='id')
>>> from collections import Counter >>> Counter(map(str, prices)) Counter({'a':
from django.core.urlresolvers import reverse from django.core.urlresolvers import reverse
def inner_append(inner, left, right): if left: return inner_append
>>> from collections import Counter >>> Counter(list(Counter(x) for x in range
>>> import re >>> re.split(r'(?P<name>[a-
import pandas as pd import numpy as np df = pd.DataFrame({'A': [1, 2,
from google.appengine.ext import ndb ndb.Property(blobstore_name='my
import json def encode(self, data): if data.encode('utf-8') == True
import os import sys import os os.environ['DJANGO_SETTINGS_MODULE'] =
import os import sys import time with open(sys.argv[1], 'rb') as f
if (self.id & 1)!= (self.id & 1): # Do something
import os import time def run_process(): while True: time.sleep(1) # sleep
import os os.mkdtemp()
def postorder(node): if node is None: return [] return postorder(node
def foo(x): return x + 1 def bar(x): return x + 1
import dask.array as dask.array from dask.core import dask.core as dask
import subprocess subprocess.Popen(' ', shell=True)
import re with open('file.txt', 'r') as f: for line in
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
>>> re.compile(r'(?P<name>[a-z]+)
import os with open('test.txt', 'w') as f: for line in
parser.add_argument('------------------------
cv2.rectangle(img, cv2.COLOR_BGR2RGB, cv2.H
from django.db.models import Q, Q, Q, Q, Q, Q
import pandas as pd df = pd.read_csv('data.csv', index_
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
df.groupby('name').first()
>>> set(set(x)) == set(set(x)) True
from sqlalchemy import create_engine, create_engine from sqlalchemy.orm import create_engine
import os import os for root, dirs, files in os.walk(os.path
import random a = np.array([1,2,3,4,5,6,7,8]) b = np.array
import socket import struct def get_ipv6_address(address): return struct.unpack("
import itertools import itertools def combinations(n): return [i for i in itertools.combinations
class MyModel(models.Model): #... class Meta: proxy = True
import os import monkeyrunner monkeyrunner.monkeypatch_object(monkeyrunner.monkeypatch
pip install --install-dir=/usr/lib/ 2.6/dist-packages
>>> l = [1, 2, 3, 4, 5] >>> sorted(l, key=lambda x:
def get_url(self, request): return reverse('admin:login', kwargs={'
>>> import bs4 >>> soup = bs4.BeautifulSoup(html) >>> for i
>>> from sympy import symbols >>> symbols('Symbol', 'x') ['Symbol', 'x
//table[contains(@id, 'a')]/tr/td[contains(@id
>>> import ast >>> ast.literal_eval('a = 1, b = 2, c =
import os import datetime, os os.chdir(os.path.dirname(__file
Gtk.ScrolledWindow(g, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
>>> import ast >>> ast.literal_eval(ast.literal_eval(a))
import sys, os, sys, sys, sys, sys, sys, sys, sys
import csv with open('my.csv', 'wb') as f: writer = csv
>>> import re >>> re.sub(r'(a)', r'(a
def get_text(self, item): return item.text
def f(x): return x + 1 def f(x): return x + 1
def form_data(self, request, *args, **kwargs): form = self
>>> id(x) Traceback (most recent call last): File "<stdin>", line 1,
>>> import ast >>> ast.literal_eval(d['a']) [u'a
from django.contrib.auth.decorators import user_passes_test(lambda x
label.configure(width=width, height=height) label.configure(width=
<p> {{ my_dict }} {{ my_dict }} {{ my_dict }}
>>> from_name = 'John Smith' >>> from_name = 'John Smith'
import csv with open('data.csv', 'rb') as f: reader = csv
from mock import MagicMock, MagicMock, MagicMock, MagicMock, MagicMock, MagicMock, MagicMock, MagicMock
pip install scikit-learn
import win32com.client win32com.client.Dispatch("Excel.Application")
>>> from ast import literal_eval >>> literal_eval(literal_eval(query))
import xlwt wb = xlwt.Workbook() wb.add_sheet('Alice
class User(db.Model): user = db.User() user = db.User
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
import csv with open('file.csv', 'rb') as f: reader = csv
print("Hello, world!")
print(' '.join(line.split()[:2]) for line in lines)
for line in file: if line.startswith('name'): print line
import Image import numpy as np img = Image.open('image.jpg') img.
import re def find_number(line): return len(re.findall(r'
def complement(b): complement = b[b[b[b[b[b
>>> import re >>> re.split(r'(?<=\s)(?<=\
import urllib from oauth import OAuthToken from oauth.client import Client from oauth.token import
>>> d = {k:v for k,v in d.items()} >>> d
import socket def is_net_error(sockname, port): try: return socket
>>> import re >>> re.sub(r'(a)', r'\1', string
import urllib import urllib def read_file(url): with open(url, 'rb
>>> import re >>> s = "a b c d e f g g g g g
>>> for i, j in enumerate(d):... print i, j... 1 1
df['Year'] = df['Year'].map(lambda x: x['Year'])
def route(self, route): if route == '': return redirect('index') return
import socket def open_file(socket, addr): sock = socket.socket() sock
def save(self, *args, **kwargs): # Do stuff self.save_
import urllib2 from bs4 import BeautifulSoup html = urllib2.urlopen("http://www.
import threading def main(): while True: # Do stuff here if __name__ == "__
import datetime import time import json json.dumps(datetime.now().date())
def create_cursor(): cursor = db.cursor() cursor.execute("CREATE cursor(
var image = new BitmapImage(new Uri("http://www.example.com/
plt.plot(x, y, marker='\t', linewidth=2, color='r
import subprocess subprocess.Popen((' ','my_program.exe', 'arg
db.connect(host="localhost", user="user", passwd="pass", db_
import json json_data = json.load(open('data.json')) json_
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
import github github.init_github_key ='my_github_key'
import pydoc.Pydoc.PydocString
def sort(self, radio_list): return sorted(radio_list, key=
import json json_data = json.dumps(data)
import random matrix = np.random.random((3,4))
import socket def scan(self): while True: try: addr = socket.socket()
def sum_sum(n): sum = 0 for i in range(n): sum
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
class UserAdmin(admin.ModelAdmin): list_display = ('first_name',
from PyQt4.QtGui import QApplication, QSqlQuery, QSqlQuery, QSql
import multiprocessing def worker(x): return x def main(): p = multiprocessing.Process(
def create_buttons(): buttons = [] for button in buttons: buttons.append(button
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 1, 2, 3,
>>> [x for x in range(len(x)+1) if x[i]
def get_search_results(self, tree): if tree.get_children()
import sys sys.path.append(os.path.abspath(__file__))
>>> import sys >>> sys.getsizeof(sys.stdin.readline()) 1
class A(object): def __init__(self, a, b): self.a
>>> from collections import OrderedDict >>> d = OrderedDict() >>> d['a'] = 'a
>>> import itertools >>> [list(itertools.combinations(a, 2)) for a
def bind(self, *args): self.var1 = self.var1 self
from pyPdf import PdfPages from pyPdf import PdfPages from pyPdf import PdfPages
>>> re.split(r'(?P<name>[a-z]+)
import xl.Workbook wb = xl.Workbook() sheet = wb.sheet_by_
import matplotlib.pyplot as plt import numpy as np x = np.linspace(0,1,100
>>> import re >>> s = 'a,b,c,d,e,f
>>> re.compile(r'(?P<name>[a-z]+)
import random def random_urandom(n): if n == 0: return random.choice
def f(): with open(filename, 'rb') as f: return f.read
import tempfile import os import os import tempfile import os os.makedirs(os.path
import os import os for root, dirs, files in os.walk(os.path
self.parent = self.parent.parent()
>>> re.sub(r'(a)(?=[a-z])', r
import csv with open('data.csv', 'rb') as f: reader = csv
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
>>> import codecs >>> codecs.decode('utf8','ignore') u'utf8u
def sum_sum(n): if n == 0: return [] return sum_sum(
class MyModelAdmin(admin.ModelAdmin): def __init__(self, *args
import os import datetime import os import time timestamp = time.time() for line in os
def foo(x): return x + 1 def bar(x): return x + 1
def __len__(self): return len(self.data)
from google.appengine.ext import webapp2 from google.appengine.ext import webapp2
>>> import json >>> json.dumps(test_dict) '{"test_dict":
if __name__ == "__main__": print "You are the main thread"
import urllib url = 'http://www.example.com/example.com/example
>>> [x for x in range(len(x)+1) if x[i]
import urllib2 opener = urllib2.build_opener() opener.addheaders = [('User
def get_name(self, request): return self.name
import os for i in range(n): with open(os.path.join(
class A(object): def __init__(self, *args, **kwds):
>>> a = [1, 2, 3, 4, 5] >>> a.append(3) >>> a [1, 2,
import numpy as np import matplotlib.pyplot as plt import numpy as np x = np.
import lxml.html tree = lxml.html.parse(html_string)
def queue_empty(queue): if queue is empty: queue = queue.Queue()
import json json_data = json.dumps(data)
def get_key(self, key): if key in self._keys: return self
import os with open('file.txt', 'r') as f: for line in
import re text = """This is a test sentence. This is a test sentence. This
>>> type(type(c)) <type 'tuple'>
import pdb.set_trace()
>>> import re >>> re.findall(r'(a)([^"]+', '
import sys, os, sys, time def f(x): return x + time.
import vim vim.Redo.register('foo', 'bar')
$ -m android emulator -m android emulator
PhotoImage(photo_name)
self.menubar = self.menubar.text()
def count(self, user): if user is None: user = User() user.
def switch(x): if x == 0: return x else: return switch(x)
>>> import ast >>> ast.literal_eval('12345') [u'12345',
import json json_data = json.load(json_data)
>>> import re >>> re.split(r'(?<=\s)\s+(?
>>> import itertools >>> >>> [i for i in itertools.combinations(range(6)[:
import urllib from BeautifulSoup import BeautifulSoup soup = BeautifulSoup(urllib.urlopen(url).read())
{% url'my_url' %} {% include'my_url' %}
import csv with open('file.txt', 'rb') as f: reader = csv
>>> import collections >>> l = [1, 2, 3, 4, 5] >>> [len(x) for
def range(start, stop, step): if start > stop: return start return step
>>> class A(object):... pass... >>> A.__bases__ [('A', '
import os import os os.makefile(os.path.join(os.path
import subprocess subprocess.Popen([" ", " ", " ", " ", "
>>> a = [u'a', u'b', u'c', u'
import os import StringIO from pyPdf import PdfFileWriter from pyPdf import PdfFileReader from py
df.groupby(level=0).agg(lambda x: x.index)
import os import os import numpy as np import os import tempfile for i in range(n
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
>>> import ast >>> ast.literal_eval('['a','b','c','d
>>> re.compile(r'(?P<name>[a-z]+)
if len(text) > 1: text[text[-1]] = text[text[-1]]
import os os.system('sudo /path/to/mongo')
from bottle import * from bottle import route, run app = run(app) run(
import time def test_seconds(self): return time.time()
>>> [dict(x) for x in d] [['a', 'b', '
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for i in soup.findAll('
def get_user(request): user = User.query.filter_by(user
import subprocess subprocess.Popen('command1',stdout=subprocess.PIPE)
import os import sys import subprocess p = subprocess.Popen(sys.argv[1:]) out
import codecs data = codecs.open(filename, 'rb')
def compare(key, value): if key.lower() == value: return True return
df['A'] = df['B'].map(lambda x: x['A'].
>>> import itertools >>> >>> list(itertools.chain.from_iterable(itertools
cursor.execute("select * from table_name")
def yield_value(self, value): self.value = value yield_value(
import numpy as np import matplotlib.pyplot as plt plt.imshow(np.array(
from sqlalchemy import func, func, func, func from sqlalchemy.sql import func, func
>>> d = {k:v for k,v in d.iteritems()} >>> d
if request.args.get('key', None) is None: # do stuff
def get_queryset(self): qs = super(UserAdmin, self).get_
import sys, time def main(): while True: sys.stdout.flush() time.
import multiprocessing def worker(n): if n == 0: return n return multiprocessing.Process(
>>> import lxml.html >>> import string >>> string = string.fromstring(string)
import sqlite3 conn = sqlite3.connect(host, user, passwd) cursor = conn
import socket def sendfile(filename, data): sock = socket.socket() sock.
import os def child(parent, name): if parent == None: parent = os.
from google.appengine.ext import webapp from google.appengine.api import webapp from google
df.columns.keys()
>>> from itertools import chain >>> list1 = ['a', 'b', 'c',
def reset_password(request): if request.user.is_authenticated(): # Do
def bisect(a, b): return bisect.bisect_right(a, b
df.merge(df, left_on='id', right_on='id')
>>> d = {k:v for k,v in d.iteritems()} >>> d
// create a new array of data members = [] # create a new array of data members
class A(object): def __init__(self, *args, **kwds):
from django.contrib.auth.login_url import LOGIN_URL from django.contrib
import json json_data = json.load(json_data)
class ContactForm(forms.Form): class Meta: proxy = True class ContactForm(
>>> import os >>> os.path.abspath(os.path.dirname(__file__
from google.appengine.ext import datastore from google.appengine.ext.datastore import Key
>>> import socket >>> l = [("127.0.0.1", "eth0"), ("eth0",
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
import sys, re def check_words(words): for word in words: if word
from django.core.management import setup setup(app_name='myapp',...)
def get_dict(d): return dict(d.items() for d in d
>>> import struct >>> struct.unpack('>I', '12345') (12345, '
# # # # # # # # # # # # # # # # # #
q = (session.query(User).filter(User.id==user.id
>>> import re >>> re.findall(r'(a)([^"]+', '

>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
import os import sys import os import os import os import os import sys import os import os
import subprocess p = subprocess.Popen(('command', 'arg1', 'arg2', '
>>> l = ['a', 'b', 'c', 'd', 'e',
virtualenv --no-site-packages --no-site-packages --no-site-
In [1]: from scipy.integrate import quad In [2]: quad(lambda x:
df.set_index(['x', 'y'])
>>> [x for x in list_of_tuples if x[0] not in list_
from tornado.gen import timezone from tornado.gen import AsyncHTTPServer from tornado.gen
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> [
getattr(obj, 'func_name')
>>> import struct >>> struct.unpack('>I', b'\x00\x00\x
import os def buffer(size): return os.stat(size).st_size
>>> import struct >>> struct.unpack('>I', 'a') (u'a
>>> re.compile(r'(?P<name>[a-z]+)
import matplotlib.pyplot as plt from matplotlib.colors import LogNorm from matplotlib import cm from
import os import os import os import os import os import os import os os.chdir
import multiprocessing def process(self): p = multiprocessing.Process(target=self.process
def timer(timer): global timer timer = Timer(timer, [timer, timer,
from os import path from os import listdir from os.path import abspath from os.path
import sys, os, sys, sys, sys, sys, sys, sys, sys
def is_even(time): if time > 5: return True return False
>>> import numpy >>> a = numpy.array([1,2,3]) >>> a array([1,
if prime(x, y): print(x, y)
import subprocess subprocess.Popen('scp', shell=True)
def decorated(func): def wrapper(*args, **kwds): if not isinstance(
import subprocess subprocess.Popen('tar', shell=True)
import os import shutil shutil.copyfile(os.path.join(os.path
import scipy.io.loadtxt('test.txt')
import xlsxwriter workbook = xlsxwriter.Workbook() worksheet = workbook.add_worksheet
from django.db.models import Count from django.db.models import Count from django
df.loc[df['A'] == 'B'] = df['B'] df
vim.set_color('red', 'green', 'blue')
from kivy.graphics import Canvas from kivy.graphics import Image from kivy.graphics import Canvas
def get_value(value): if value is None: return None return value
>>> import string >>> string = "a ééééééééé
from datetime import timedelta from django.db import timezone from django.utils import timezone from django
sns.set_linewidths(ax=ax, linewidth=2)
import numpy as np import scipy.io.memmap from scipy.io.memmap
def f(x): return x + x def f(x): return x + x
import sys sys.path.append('/path/to/your/module/file')
import itertools from collections import Counter from itertools import chain from collections import Counter from itertools import chain
import bittorrent.torrent.torrent.torrent.torrent.torrent.torrent.torrent.
>>> import os >>> print(os.urandom(6)[0]) # prints: >>> print
import sqlite3 db = sqlite3.connect('db.db') cursor = db.cursor
>>> from sympy import Symbol >>> Symbol('x') 'x'
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
>>> d = {k:v for k,v in d.items()} >>> d
import os os.system('cls')
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
def ask_user(prompt): if prompt == '': return raw_input("Please
import ast with open('file.txt', 'rb') as f: data = ast
import subprocess subprocess.Popen((' ','my_program.py', 'arg
import datetime datetime.datetime.strptime('2015-02-13', '%m/%d/%Y
var engine = Python.CreateEngine(); var engine.Execute("var a = 1; var
def main(): while True: if __name__ == "__main__": main()
>>> class A(object):... pass... >>> A.__dict__ {'a': 1,
import os import sys, os os.system('cls')
import csv with open('data.csv', 'rb') as csvfile: reader =
class A(object): def __init__(self, a, b): self.a
import os import os import os os.rename(os.listdir(os.path.
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
>>> import re >>> re.split(r'(?P<name>[a-
>>> import ast >>> ast.literal_eval('a,b,c,d,
def entry(self, entry): entry.configure(state='normal') entry.configure
import Image import numpy as np from scipy.io import BytesIO from scipy.io import Image
from scrapy.spider import Spider from scrapy.spider import Spider from scrapy.http import Request
import csv with open('file.csv', 'rb') as f: reader = csv
import xml.etree.ElementTree as ElementTree tree = ElementTree.parse('file.xml')
def foo(x): return x + 1 def bar(x): return x + 1
In [11]: np.mean(a, axis=0) Out[11]: array([
def __init__(self, *args, **kwds): self.kwds =
def my_func(d): d['a'] = d['b'] return d
import subprocess subprocess.Popen('vs2008', shell=True)
import lxml.html page = lxml.html.fromstring(html_string) for
>>> print(list(a)) ['a', 'b', 'c', 'd
from elasticsearch import Elasticsearch from elasticsearch import Elasticsearch from elasticsearch.dsl import DslClient from
# # # # # # # # # # # # # # # # # #
>>> import re >>> re.sub(r'(a)([^)]*', r
>>> re.compile(r'(?P<name>[a-z]+)
from ndb import Property, ndb ndb.put_multi(my_list)
>>> a = [1,2,3] >>> b = [1,2,3] >>> a == b True >>>
>>> [x for x in list_of_lists if x[0] == 'a']
import os profile_file = os.path.join(os.path.dirname(__
import urllib import json url = 'http://www.example.com/post' data
import time timestamp = time.mktime(time.strptime(timestamp, "%Y-%
import matplotlib.pyplot as plt import numpy as np x = np.linspace(0,1,100
def get(self, request): data = json.loads(request.body) return
>>> import os >>> os.path.basename(os.path.dirname(__file__
import numpy as np a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,
from e.g. co2 import co2 from e.g. co2 import
import itertools with open('file.txt', 'r') as f: for line in
df.loc[df['A'] == 'B'] = df['B']
if any(x in y for x, y in zip(a, b)])
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for item in data:
>>> import urllib >>> url = 'http://www.example.com/example/page
class A(object): def __init__(self, a, b): self.a
import struct.unpack('>I', b'\x00\x00\x00\x00\
import subprocess def schedule(p): subprocess.Popen(p, shell=True) p
def fill_dict(d, key): if key not in d: d[key
class ContactForm(forms.Form): class Meta: model = Contact fields = ('name
>>> import sys >>> sys.version # version of the sys module >>> sys.version #
import os import sys sys.path.append(os.path.abspath(os.
import time def watchdog(): while True: time.sleep(60)
import os with open('test.txt', 'wb') as f: f.write
df['min'] = df['min'].min() df['max'] = df['
import xlrd wb = xlrd.open_workbook('test.xls') for
import string import os with open(filename, 'rb') as f: data = string
import time def time_time(time_string): return time.mktime(time
import hashlib hash_password = hashlib.sha1() hash_password.update(password)
import subprocess subprocess.Popen('http://localhost:8080/brokers/brokers/my_
from flask import request from flask.ext.app import app_name from flask.ext
import os import shutil import os import shutil shutil shutil.copyfile(os.path.
def make_widget(widget, width, height): widget.configure(width, height
import urllib from bs4 import BeautifulSoup soup = BeautifulSoup(html) for product in soup.
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
(defun docstrings)
def subsets(L): subsets = [] for subset in L: subsets.append(subset
>>> [tuple(x) for x in tup] ['a', 'b', '
from sqlalchemy.sql import func, func from sqlalchemy.sql import func q = func.
def bise_binary(bisection): if bisection == 0: return True
import datetime def is_date(date): try: return datetime.date.today()
def find_first_second_third_th_th_th_th_th
def is_even(x): return x % 2 == 0
df.reset_index(drop=True)
>>> import collections >>> >>> collections.Counter(a).most_common(1) [('a',
boost::shared_ptr<std::vector<int>>(std::vector<int
import sys import time def main(): print 'hello' sys.stdout.write('Hello
import uuid uuid.uuid4().hexdigest()
>>> [i for i in list if i[0] == 'a'] ['a', '
import Image import os import StringIO from io import BytesIO from io import StringIO img = StringIO()
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> [
def func(x, y): return x + y def func_x(x,
import ast with open('file.txt', 'r') as f: data = ast
import py_code import py_code import py_code py_code = py_
import numpy as np import scipy.io.savetxt('data.csv', data
def entry_handler(self, event): self.entry.bind("<Return>", entry
from django.db.models import Q, Q, Q, Q, Q, Q
def f(x): return x + 1 def f(x): return x + 1
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
class A(object): def __init__(self, a, b): self.a
>>> import itertools >>> l = [[1,2,3],[4,5,6],[7,8,9]] >>> [list
import json data = json.load(json_data) for key, value in data
def validate(self, data): if data['type'] == 'type': return True
>>> import itertools >>> >>> [i * j for i, j in itertools.product(*
import math import xlrd.open_workbook(filename='test.xls')
>>> re.compile(r'(?P<name>[a-z]+)
$ echo $output;
import codecs with codecs.open(filename, 'wb') as f: f.write
def is_flow_flow_node(node): if node.parent == node:
class A(object): def __init__(self, x): self.x = x
>>> import re >>> re.findall(r'(?P<name>[a-
import numpy as np a = np.array([np.nan, np.nan,
import json from collections import OrderedDict from itertools import chain from itertools import chain from itertools import chain
pip install pip
import os import datetime import os import os import os import os import datetime for i in range
import Tkinter root = Tkinter.Tk() root.title("My title") root.mainloop
import json with open('test.json') as f: data = json.load(
class A(object): def __init__(self, a, b): self.a
def remove_dict(d): if d is None: d = {} return d.
>>> max(x.split(), key=lambda x: x[1]) 'a'
def make_menu(): menu = QtGui.QMenu() menu.add_widget(
import numpy as np import matplotlib.pyplot as plt import numpy as np x = np.
>>> import re >>> s = 'a b c d e f g g g g g
>>> a = [1, 2, 3, 4] >>> a [1, 2, 3, 4] >>> a [1, 2, 3,
from elasticsearch import * from elasticsearch import * from elasticsearch import * from elasticsearch.dsl import
import os os.remove(os.path.dirname(__file__))
from django.db.models import Q q = Q(user__id=user.
import subprocess subprocess.Popen('ls', stdout=subprocess.PIPE)
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
import csv with open('data.csv', 'wb') as f: writer = csv
>>> class A(object):... pass... >>> A() <__main__.A object
def get_queryset(self): return qs.filter(self.user_id__
class User(db.Model): __tablename__ = 'users' id = db.
import ast ast.literal_eval(input("Please enter a string: "))
import os with open(filename, 'r') as f: for line in f:
if response.status_code == 200: print 'Success' else: print 'Failure
import os import sys sys.path.append(os.path.abspath(__file__
def sort(list): return sorted(list, key=lambda x: x[1], reverse
import urllib2 url = 'http://www.example.com/page.html'
def __init__(self, *args, **kwargs): super(MyForm, self
>>> import itertools >>> >>> >>> >>> list(itertools.combinations(range(6)[::
>>> from jira.fields import ColumnDef >>> col = ColumnDef(name='name',
class A(object): def __init__(self, *args, **kwds):
from django.core.files.uploadedfile import SimpleUploadedFile from django.core.
import struct with open('test.txt', 'rb') as f: data = f
import os import itertools with open('test.txt', 'rb') as f: for
>>> np.dot(a, a[1:]) array([[1, 2], [3, 4]])
import baseDict, dict def baseDict(d): for key, value in d.
webapp2.WSGIApplication([('/', MainHandler), ('/', MainHandler), ('/', Main
def get_length(n): if n == 0: return n return n
import os with open('file.txt', 'rb') as f: for line in
import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm norm =
>>> d = {k: v for k, v in d.items()} >>> d
df.index.set_index('Date')
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
>>> import re >>> re.compile(r'(?P<date>\d+)\
import os import sys import os import sys import os import sys with open(sys.argv
def queue(queue, func): def queue_func(*args): func(*args)
import getpass getpass.getpass('username', 'password')
import numpy as np import matplotlib.pyplot as plt plt.plot(range(10), range
>>> import re >>> s = "a b c d e f g g g h h
def __dict__(self): return dict(self.keys())
from google.appengine.ext import webapp from google.appengine.ext import webapp from google
class User(models.Model): user = models.ForeignKey(User) #... class
def filter(self, key, value): if key not in self.keys: self
SELECT id FROM users WHERE user_id = (SELECT id FROM users WHERE user_id
vim.vim_name ='my vim function' vim.vim_name
>>> import textwrap >>> textwrap.fill(u'This is a test of a paragraph.
import numpy as np import matplotlib.pyplot as plt plt.plot(np.arange(0,
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for k,v in
def __init__(self, parent=None): self.parent = parent self.menu
......................................................
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
def break_long_line(line): if line == '': line = line.
import re def replace_dict(d): for key, value in d.iteritems():
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
def get_user(request): user = request.user return user
def __init__(self, parent): self.parent = parent def __call__(self
import sys, subprocess def main(): for line in sys.stdin: if line.startswith
>>> import json >>> json.dumps(test_dict) u'{"test_dict
>>> import re >>> re.split(r'(a) (a) (b
def verify_user(user_id, password): if user_id == user_
>>> import ast >>> ast.literal_eval('a string') 'a string'
>>> d = {} >>> for row in pivot_table:... d[row[0]] =
>>> import inspect >>> inspect.isfunction(inspect.currentframe().f_globals)
import threading def worker(): global worker def run_worker(): global worker def run_worker
from django.shortcuts import redirect from django.shortcuts import redirect from django.shortcut
>>> d = {u'name': u'Jake', u'age': u
>>> from sklearn.svm import SVC >>> from sklearn.svm import RandomForestClassifier >>>
import difflib difflib.diff_diff(a, b, c, d,
class A(object): def __init__(self, a, b): self.a
import sys, os, sys, sys, sys, sys, sys, sys, sys
import csv with open('data.csv', 'rb') as f: reader = csv
class A(object): def __init__(self, *args, **kw): super
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
>>> from collections import defaultdict >>> d = defaultdict(int) >>> for i in range(
def create_window(self): self.window = self.window.widget() self
def get_first_value(self, value): if value == 'first': return
class UserProfile(models.Model): user = models.OneToOneField(User, related
import os os.system('make')
import sys sys.stdout = open('dev.stdout', 'wb') sys.stdout
class Base(object): __tablename__ ='my_table' class Meta: proxy
def __call__(self, *args, **kwds): if self.name:
pip install numpy
$ echo $VIRTUAL_ENV/bin/activate $VIRTUAL_ENV/bin
df.groupby('id').agg({'id':['a','b','c','d
>>> a = [1, 2, 3] >>> b = a >>> b [1, 2, 3] >>> a [1,
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
>>> import ast >>> ast.literal_eval(ast.literal_eval(l))
class A(object): def __init__(self, a, b): self.a
import numpy as np import itertools for i in itertools.product(*a): print i,
import itertools def permutations(data): return itertools.permutations(data)
>>> import re >>> s = "a b c d e f g g h h h
var obj = new Object(); obj.Value = "foo"; // or whatever you need
with open('file.txt', 'r') as f: for line in f:
>>> import re >>> re.sub(r'<\s+', r'<
import pandas as pd import numpy as np import pandas as pd df = pd.DataFrame({'
import pickle with open('file.pickle', 'rb') as f: pickle.dump
def tween(self, *args): if self.current_game is self
//div[contains(@class, 'link')]
import seaborn as sns sns.set_aspect('same') sns.set_aspect('
>>> import re >>> s = 'a,b,c,d,e,f
cursor.execute("INSERT INTO foo (bar) VALUES ({})".format(foo))
self.treeView.setDropHandler(self.treeView.dropHandler)
>>> a = [1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,
import ast ast.literal_eval(input("What is the value of the input?
>>> a = [1,2,3] >>> b = [1,2,3] >>> [i for i in
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
def test_function(self): self.assertEqual(self.func1, self.func
import sys, os def print_output(self, line): sys.stdout.write
import argparse parser = argparse.ArgumentParser() parser.add_argument('-a', '--
PyObject *var = PyInt_FromLong(0); PyObject *var = PyInt_From
class UserAdmin(admin.ModelAdmin): class Meta: ordering = ('user_id
from django.core.urlresolvers import reverse from django.core.urlresolvers import reverse
>>> import re >>> s = "hello, how are you?" >>> re.sub(
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
def get_string_value(self, value): return value.encode('utf-8')
class Child(Base): __tablename__ = 'child' id = Column(Integer,
>>> import collections >>> counter = collections.Counter(list) >>> counter.most_common
import sys, random def my_function(): print 'Hello world!' sys.stdout.
>>> import string >>> string1 = "a" >>> string2 = "b" >>>
>>> import json >>> d = {u'a': u'a', u'b
from collections import defaultdict from itertools import chain from itertools import chain from itertools import chain from itertools
>>> df.groupby('name').first() Name, dtype, ordering, dtype, data
import csv with open('file.csv', 'rb') as f: reader = csv
>>> import itertools >>> >>> >>> >>> list(itertools.chain(a, b))
>>> re.sub(r'(?P<name>[a-z]+)
def convert_float(x): return x.astype(float) def convert_float
class A(object): def __init__(self, a, b): self.a
def create_list(self, *args, **kw): for i in range(
def main(): global global global global global global global global global global global global global global global
def get_user(self, user_id): return User.query.filter_
import pandas as pd df = pd.DataFrame({'A': ['A', 'B',
def get_queryset(self, request): qs = super(UserResourceResourceResourceResource
from app_dev import app_dev
import sys, time def init_global_var(): global global global global global global global
>>> import re >>> re.search(r'(?P<name>[a-
import tkinter root = tkinter.Tk() canvas = tkinter.Canvas(root) canvas.
def create_game(game_number): if game_number == 0: return Game(
>>> import unicodedata >>> unicodedata.normalize('NFD', 'u8') u'N
import pandas as pd df = pd.DataFrame({'A':['a','b','c
from datetime import datetime from datetime import timedelta from datetime import timedelta from datetime import datetime from datetime
>>> import ast >>> ast.literal_eval('a ='+ 'b = '
>>> import string >>> string = "Hello, world" >>> string.upper() # returns
>>> re.compile(r'(?P<name>[a-z]+)
def sum_of_integers(n): if n == 0: return 1 return sum
import sys, os for i in range(n): sys.stdout.write(str
>>> from itertools import chain >>> l = [list(x) for x in chain(
>>> [x for x in range(len(x)+1) if x[i]
def __init__(self, *args, **kw): self.var = kw.
import numpy as np import scipy.stats as stats import numpy as np from scipy.stats
>>> '{:.2f}'.format(1234) '123456789'
import csv with open('data.csv', 'wb') as f: writer = csv
>>> from bs4 import BeautifulSoup >>> soup = BeautifulSoup(html) >>> soup.find_
>>> max(a, key=lambda x: x[1]) 1
>>> from itertools import permutations >>> permutations(permutations(list(permutations(list(
import os import os os.chdir(os.path.abspath(__file__))
def reduce(self, iterable): return reduce(self.map, iterable)
import sys, os, sys, sys, sys, sys, sys, sys, sys
import subprocess for p in subprocess.Popen([" ", " ", " ", "
>>> [x for x in list1 if x not in list2] ['a', '
import pandas as pd import numpy as np import pandas as pd df = pd.DataFrame(
>>> from operator import itemgetter >>> >>> >>> lst = [('a', 'b'), ('a
>>> import unicodedata >>> unicodedata.normalize('NFD', 'utf-8') u'NFD
>>> import re >>> re.sub(r'(a)([^"]+', r
from swig import setup setup(console_output=setup())
import xml.etree.ElementTree as ElementTree tree = ElementTree.parse('file.xml')
class Foo(object): @classmethod def bar(cls): return cls.bar
from flask import Flask app = Flask(__name__, static_url_path='/') @
import string def add_space(word): return string.ascii_lowercase + string
if (time.time() - time.time())
df.loc[df['A'] == 'B'] = 'C' df['
from flask import Flask from flask import current_app, request from flask import current_app
def reverse(s): if s == '': return s[:-1] else: return s
#define NGROUPS 16 #define NGROUPS 16 #define NGROUPS 16
plt.legend(x, y, loc='best', loc='best')
from datetime import date, timedelta from django.db.models import Q, timedelta qs =
def max_and_min(a, b): return max(a, b)
>>> from urlparse import urlparse >>> urlparse('http://www.example.com/foo/
def __init__(self, *args, **kwargs): super(MyForm, self
from sklearn.datasets import load_iris from sklearn.datasets import load_iris from sklearn
import csv with open('file.txt', 'rb') as f: reader = csv
import sys sys.path.append('/path/to/your/program/file')
>>> import re >>> re.search(r'(?P<name>[a-
import urllib urllib.urlretrieve('http://www.example.com/doc/test
import requests r = requests.get(url, cookies={'foo': 'bar'})
def is_short(s): return len(s) < len(s)
def closure(x): if x == 0: return x return x def closure(x):
>>> d = {('a', 'b', 'c', 'd', 'e
>>> a = [1,2,3] >>> b = a >>> b [1, 2, 3] >>> a [1,
import os with open(filename, 'rb') as f: for line in f:
import boto.s3 conn = boto.s3 conn.connect_to_region
>>> import re >>> re.findall(r'(?P<name>[a-
import zipfile def zip_like(zip_like): return zip_like.zip_
from twisted.web import WSGIHTTPServer from twisted.web.web.web.web
>>> re.sub(r'(?P<name>[a-z]+)
import numpy as np import matplotlib.pyplot as plt from scipy.stats import probabilistic
>>> [x for x in range(6) if x not in [5]] >>> [
class A(object): def __init__(self, a, b): self.a
>>> import re >>> re.sub(r'(a)([^']+)', r
fig = plt.figure() ax = fig.add_subplot(111) ax.plot
import sys, subprocess, os def main(): print 'hello' sys.stdout = open
import urllib urllib.urlretrieve('http://www.example.com/login.php
>>> from __future__ import absolute_import, division >>> >>> from __future__ import
import csv import os import pandas as pd import csv from pandas import Series from pandas import Series
ax.set_ylim(0,1) ax.set_ylim(0,2)
def monkey(monkeypatch): # patch is called when monkey is called monkey.patch.
import inspect def inspect(module): return inspect.getsource(module)
import csv with open('data.csv', 'rb') as f: reader = csv
import subprocess subprocess.Popen(('kill','myProcess.exe'), shell=True
from scipy.stats import norm from scipy.stats import norm from scipy.stats import norm
import json import pandas as pd df = pd.DataFrame(data=df)
import sys, os def find_b(name): if name == 'b': return
import time def check_time(): while True: time.sleep(1) if time.time
ssh -p $PORT
import os os.chdir(os.chdir(os.chdir(os
>>> from itertools import chain >>> >>> >>> list(chain(zip(a, b),
>>> a = [1, 2, 3, 4, 5] >>> b = a + a >>> b [1, 2,
import subprocess subprocess.Popen(' ', shell=True)
import subprocess subprocess.Popen(' ', shell=True)
import ast with open('file.txt') as f: for line in f: if
>>> import collections >>> d = collections.defaultdict(list) >>> d.keys()
def sum_first_even(lst): return sum(lst)
df.head(level=0)
def search(self, search_string): if search_string in self.search_
class A(dict): def __init__(self, d): self.d = d
import csv with open('file1.csv', 'rb') as f1, open('file
import json with open('file.txt', 'r') as f: data = json
df.groupby('A').agg(lambda x: x.iloc[x.index
import numpy as np from scipy.io import Image from scipy.io import BytesIO from scipy
df.groupby('id').apply(lambda x: x.index)
class A(object): def __init__(self, a, b, c, d
>>> import itertools >>> >>> >>> [i for i in itertools.combinations(a, len
if all(x in y for x in range(len(y)-1))
import multiprocessing from multiprocessing import Pool def worker(): pool = Pool(processes=4) pool.
>>> import os >>> os.listdir(os.path.join(os.path.
import os def create_file(filename): with open(filename, 'rb') as
>>> import re >>> s = "hello there is a string with the length of the string
import random colors = [random.choice(colors) for _ in range(len(
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
>>> import os >>> os.path.dirname(os.path.dirname(os.
from google.appengine.ext import upload from google.appengine.files import FileUpload from
def func(x, y): return x + y def main(): func(x,
if isinstance(email, basestring): # Do something else
import subprocess subprocess.Popen('file1.txt', shell=True)
import sys, os, sys, sys, sys, sys, sys, sys, sys
import os def open(filename): with open(filename, 'rb') as f:
import urllib, urllib, urllib, urllib, urllib, urllib, urllib, urllib, urllib
import sys import subprocess subprocess.Popen(["php", "test.php"])
import numpy as np import scipy.stats as stats import scipy.stats as stats import scipy
>>> from sklearn.svm import SVC >>> from sklearn.svm import SVC >>> from
def f(x): return x + 1 def g(x): return x + 1
from docx import Document doc = Document() doc.add_paragraph(paragraph1,paragraph2)
>>> [x for x in d if x['name'] == 'Jake'] ['
if re.match(r'(a)(?P<name>[a-
import numpy as np import scipy.stats as stats import numpy as np import scipy.stats
import os with open('test.txt', 'r') as f: for line in
from django.core.management import call_command call_command('my_app.
if player.state == 'Brown': # Do stuff
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
import pandas as pd df = pd.DataFrame({'date':['2015', '2015', '2015
import urllib from bs4 import BeautifulSoup soup = BeautifulSoup(urllib.urlopen(url).read
def range(start, stop, step): if start <= stop: return start return step
In [1]: from scipy.integrate import quad In [2]: quad(lambda x:
import csv with open('test.csv', 'wb') as f: writer = csv
class UserAdmin(admin.ModelAdmin): def save(self, *args, **
var uuid = uuid.UUID4().hex
>>> re.compile(r'(?P<name>[a-z]+)
>>> import string >>> string = "a b c d e f g g h h h
<script> var data = { "data": { "foo": "bar" }
min(d['name'])
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
import pandas as pd df = pd.DataFrame({'A': [1, 2, 3], 'B':
def __call__(self, *args, **kwds): if self.key:
>>> import re >>> s = 'a string with a string with a string with a string
def clean(self): cleaned_data = self.cleaned_data.pop('cleaned
def __init__(self, *args, **kw): super(UserAdmin, self
import gzip import os import os with open(os.path.join(os.path
import json def main(): d = { 'a':1, 'b':2, 'c
import requests r = requests.post(url, data=data)
import json with open('data.json', 'rb') as f: data = json
def print_all(x): return x for i in range(len(x)
>>> type(c) <type 'tuple'> >>> type(c) <type '
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
>>> import datetime >>> datetime.datetime.now().isoformat() datetime.datetime(2013,
{% for item in data.items %} <p> {{ item.name }} <p
import os pid = os.popen(' ', 'w').read()
import sys, object, string, string, list, dict, list, dict, list
#... def parse(self, response): if response.status_code == 200:
import curses curses.initscr() curses.initscr() curses.initscr() curses
class User(Base): __tablename__ = 'users' id = Column(Integer,
>>> l = ['a', 'b', 'c', 'd', 'e',
import sys, os, sys, sys, sys, sys, sys, sys, sys
>>> int(int(x)) # or whatever
from django.contrib.auth.models import User from django.contrib.auth.models
>>> int(s) 5
>>> from dateutil import parser >>> parser.parse('2014-02', 'd-m
df.groupby(level=0).agg({'date':['year','month','day','
PyObject *obj = PyObject_CallObject("__init__", "obj"); PyObject *
import csv with open('test.txt', 'rb') as f: for line in
import os os.system('node.js/lessc')
def main(): global root root.mainloop()
def make_normal_argument(arg): if arg is None: return arg else:
def f(x): return x + 1 if x < 2 else x
def brute(n): if n == 0: return True return True
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
import os for root, dirs, files in os.walk(root): for f in
>>> import re >>> re.split(r'(?P<name>[a-
>>> import unicodedata >>> unicodedata.normalize('NFD', 'utf-8') u'NFD
>>> import codecs >>> codecs.decode('utf8','ignore') u'utf8u
import os import StringIO from pyPdf import PdfFileReader from pyPdf import PdfFileReader from py
for key, value in zip(keys, values): print key, value
def f(x): return x + x def g(x): return x + x
>>> re.split(r'(?P<name>[a-z]+)
<script> var user = document.getElementById('user'); // or whatever you want to
class Property(object): def __init__(self, name, value, *args,
import urllib url = 'http://www.youtube.com/embed/vYY
import subprocess subprocess.Popen('mysql', stdout=subprocess.PIPE)
pip install pyclamd
{% if user.is_authenticated %} <a href="{{ user.url }}">authenticated
def view(self, *args, **kwargs): # Do stuff here return self.
import email.utils.check_password(email.from_email())
import os os.getcwd()
def root_func(): root = Tk() root.after(1000, root_func)
>>> a = "hello, how are you?" >>> a.join('hello, how
def func(x): return x + 1 def func2(x): return x + 1
from twisted.web.client import Client from twisted.web.server import Server from twisted
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
>>> import csv >>> with open('file.csv', 'rb') as f: reader
import urllib2 url = 'http://www.example.com/cookie.php'
>>> import collections >>> l = collections.defaultdict(list) >>> l.append(
import subprocess subprocess.Popen(('echo', 'test.py', 'test.py
driver.find_element_by_css_selector('input[type="number"]
class Item(models.Model): #... class Meta: proxy = True #... class
import boto.cloudservers.set_metadata(region='us-east', metadata
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
from itertools import chain from operator import itemgetter from operator import itemgetter from operator import itemgetter from operator
import sys, re lines = sys.stdin.readlines() # or whatever lines = [
class A(object): def __init__(self, name): self.name = name
>>> import socket >>> port = 'eth0': 'eth0': 'eth0':
from PIL import Image from PIL import Image from PIL import Image from PIL import Image from PIL
def popup(self, *args): self.popup = self.popup.text self
import subprocess subprocess.Popen('test.py', stdout=subprocess.PIPE)
def sieve(n): if n == 0: return [] return sieve(n-1)
>>> import re >>> re.findall(r'(?P<name>[a-
import os import xml.etree.ElementTree as ElementTree doc = ElementTree.parse('test.
import dis dis.dis(dis.dis(dis.dis))
import subprocess p = subprocess.Popen(('ssh','ssh', 'username', '
sudo('ld_library_path', 'lib/ld_library_path')
#... #... #... #... #... #... #... #... #...
>>> class A(object):... pass... >>> A.A = A >>> A.
>>> import re >>> re.findall(r'((?:|?|?|?
df.loc[df['A'] == 'B']
tar = tarfile.TarFile(tarfile, 'tar.gz') tar.
def make_method_name(self, method_name): """This method is decorated
import matplotlib.pyplot as plt from itertools import chain fig = plt.figure() ax =
import csv from os import path from os import environ, getsize, getsize, getsize, getsize
import subprocess subprocess.call(["bash", "-c", "print $1"])
import sys import time def main(): while True: time.sleep(1) sys.stdout.
import datetime import time timestamp = time.mktime(time.strptime(timestamp, "%
import win32com.client win32com.client.Dispatch('Excel.Application')
query = { 'id': id, 'name': name, 'age': age,
import os import glob for root, dirs, files in os.walk(root): for
>>> import csv >>> with open('data.csv', 'wb') as f: writer
>>> from sqlite3.cursor import cursor >>> cursor.execute("select * from table") >>>
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
import sys, subprocess def write_file(filename, data): sys.stdout = open
>>> import re >>> [x.strip() for x in re.finditer(r
import matplotlib.pyplot as plt import datetime import matplotlib.dates as dt fig = plt.
import urllib from BeautifulSoup import BeautifulSoup html = urllib.urlopen("http://www.example.
>>> re.search(r'(?P<name>[a-z]+)
import sys, os def f(x): return x + x * x
for i in range(len(s)-1): print s[i:i+
def __init__(self, *args, **kwds): self.var = kw
import subprocess subprocess.Popen(' ', shell=True)
from django.core.validators import validate_email from django.core.validators import validate
import re def parse_file(filename): with open(filename) as f: return
def from_iterable(iterable): if iterable is None: return iterable else: return iterable
import os import sys import os os.system('cls')
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
import struct import time def to_datetime(seconds): return time.mktime(seconds
import numpy as np import matplotlib.pyplot as plt import numpy as np data = np.
import csv with open('data.csv', 'rb') as f: reader = csv
from django.contrib.auth.backends import User from django.contrib.auth.backends
import subprocess subprocess.Popen([" ", " ", " ", " ", "
from django.core.files.uploadedfile import SimpleUploadedFile from django.core.
def list_func(list_func): def wrapper(*args): if len(args
>>> import re >>> re.sub(r'(a)((a)((a
>>> a = [1,2,3] >>> b = [1,2,3] >>> a [1, 2, 3] >>>
>>> from collections import Counter >>> c = Counter(list(c)) >>> c.most
import urllib urllib.urlretrieve('http://www.example.com/download.torrent
class A(object): def __init__(self, a, b): self.a
import sys, re def replace(s): if s.startswith(s): return s
import sys sys.path.append(os.path.dirname(__file__))
import os import shutil for root, dirs, files in os.walk(root): for
In [11]: df.iloc[df['A'] == df['B']].
class User(db.Model): user = db.Column(db.String(50
df.loc[df['A']==df['B']].values
def my_func(x): return x + 1 def my_func(x):
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for i in soup.findAll('
from django.contrib.sites.models import Site from django.contrib.sites.models
def get_next_value(self, value): if value == '': return self
class A(object): def __init__(self, x): self.x = x
>>> import itertools >>> >>> list(itertools.combinations(range(6)[::-1])
>>> a = [(1,2), (3,4), (4,5)] >>> a.append((1,
def collide(sprite): if sprite.collidepoint: return True return False
import os import os import os import os import os import os import os import os import os
import os for root, dirs, files in os.walk(root): for file in
>>> import re >>> sorted(sorted(l, key=lambda x: int(x
def get_form_kwargs(self, request, **kwargs): if request.method
def __getitem__(self, index): if index == 0: return self elif index == 1:
import datetime, timedelta def datetime_time(hour, minute, second): return datetime.
import numpy as np import matplotlib.pyplot as plt fig = plt.figure() ax =
>>> d = {k: v for k, v in d.iteritems()} >>> d
import json json_data = json.dumps(data)
def print_print(x): print x if x == 0: print 'print'
class Start(webapp2.RequestHandler): @app.route('/start') def start_app
>>> from itertools import chain >>> >>> a = [(1,2), (3,4), (5,6),
for i in range(n): print(i)
class A(object): def __init__(self, a, b, c, d
import subprocess subprocess.Popen('merge', shell=True)
from google.appengine.ext import image from google.appengine.app.image import image
import os.path.abspath(os.path.dirname(os.path.dirname
>>> from itertools import chain >>> list(chain(zip(a, b), chain(
>>> import string >>> string = "a b c d e f g h h h h
def validate(self, form, user_id, user_id): if user_
self.lineEdit.setRange(QtCore.QLineEdit.verticalLineEdit.
import subprocess subprocess.Popen(('echo', 'test.py', 'test.py
def create_user(self, user): user.user = user user.user =
df.merge(df, left_on='id', right_on='id')
class A(object): def __init__(self, x, y): self.x
import os import os os.path.abspath(os.path.dirname(os.
import subprocess subprocess.Popen('C:\\Program Files\\MyProgram.exe', shell=
# # # # # # # # # # # # # # # # # #
import datetime import calendar import datetime today = datetime.date.today() # now the date
import csv with open('data.csv', 'rb') as f: reader = csv
def slice(x): return x if x == 0: return x else: return slice(
>>> d1 = {'a':1,'b':2,'c':3,'d
>>> import re >>> s = 'a,b,c,d,e,f
>>> import unicodedata >>> unicodedata.count('A', 'a') 1
>>> import collections >>> collections.Counter(list(c.keys() for c in collections
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
if (u'\\' in u'\\')
>>> import re >>> s = 'hello world' >>> re.sub(r'(
>>> [x.strip() for x in range(len(x))] [['a',
from pylons.app import app app = app.app_main() app.
from sqlalchemy import func, func from sqlalchemy.sql import func, func from sqlalchemy.orm
import sys for i in range(len(sys.argv)-1): print(sys
class MyHandler(opener.HTTPBasicAuthHandler): def post(self, req,
scrapy.spider.spider_class = scrapy.Spider
import csv with open('test.csv', 'rb') as f: reader = csv
import os with open('file.txt', 'r') as f: for line in
import sys, struct def read_buffer(buffer, length): try: return struct.
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('c', '
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
import re word = 'a word' subwords = [word.lower() for word
from django.core.cache import Response from django.core.cache import Cookie def render
import numpy as np import scipy.spatial.distance from scipy.spatial.distance import distance
>>> for line in lines:... if line.startswith('a'):... print line...
plt.text(0.5, 0.5, 'test', transform=ax.transAxes)
>>> import re >>> s = 'a,b,c,d,e,f
import os import pickle with open('test.pickle', 'rb') as f: pickle
import xml.etree.ElementTree as ET tree = ET.parse('test.xml')
def debug(self, level): if level == logging.DEBUG: self.level =
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
import Image import math image = Image.open('image.jpg') rotated_image =
>>> from collections import Counter >>> Counter(word.lower() for word in words) Counter
>>> import itertools >>> list(itertools.chain.from_iterable(zip(a
>>> import urllib >>> urllib.urlencode('utf-8') u'utf-85'
import string import itertools words = [word.upper() for word in itertools.combinations(
class UserResource(ModelResource): user = models.ForeignKey(User) class Meta:
import subprocess subprocess.Popen('echo $variable')
def sum_numbers(n): if n == 0: return 1 if n == 1: return
def current_quarter(self): if self.current_quarter is None:
>>> import re >>> s = "a b c d e f g g g g g
class Table(tables.Table): def __init__(self, *args, **kwargs
from multiprocessing import Pool def worker(pool): pool.map(worker, (pool.
from django.db import connection from django.contrib.auth.models import User from django
import socket def send(sock, host): sock.connect((host, port)) sock
def notebook_creation_hook(notebook, notebook_name): if notebook.notebook_
>>> a = [1,2,3] >>> b = a >>> b [1, 2, 3] >>> zip(
ax.xaxis.set_major_formatter(matplotlib.ticker.NullFormatter())
import pkg_resources.get_distribution('example.egg')
if not (is_even(is_even(is_even(is_even
from pyfacebook.io import facebook from pyfacebook.io import Image from pyfacebook.
from django.contrib.auth.login import User from django.contrib.auth.models
def expensive_function(x): if x is None: return x return x
class User(models.Model): user = models.ForeignKey(User) class Meta:
>>> import decimal >>> decimal.Decimal('0.1') Decimal('0.1')
for i in range(len(a)): a[i] = a[i+1]
def __eq__(self, other): return self is other self.value
>>> import ast >>> ast.literal_eval('['a','b','c','d
import numpy as np import scipy.stats as stats def my_func(x, y
import os, cStringIO message = StringIO.StringIO() message.write(message.get_
if (user.is_authenticated()) { // do stuff }
def f(x): return x + 1 def f(x): return x + 1
df.groupby(level=0).agg(lambda x: x[x['id']]
import os import sys import os import sys import os import sys sys.path.append(
class User(db.Model): #... def __init__(self, *args,
>>> import re >>> re.findall(r'(?<=\w+)\s+
import urllib2 from google.appengine.docs import doc from google.appengine.docs import
import os for root, dirs, files in os.walk(path): for file in
cursor.execute(sqlquery)
def get_user_id(user_id): user_id = user_id
df.columns.print_index(level=0)
>>> from operator import itemgetter >>> lst = [('a', 'b'), ('a', '
>>> print(x) >>> x = [1, 2, 3] >>> print(x) [1, 2,
class A(object): def __init__(self, parent): self.parent = parent
import os, os, os, os, os, os, os, os, os
import os os.chdir(os.path.abspath(__file__))
import os import mp3 from subprocess import Popen, PIPE, PIPE, PIPE, STDOUT,
>>> import struct >>> struct.unpack('>BBBBBBBBBBBBBBBBBB
import sys, time def print_console_line(self, line): sys.stdout
>>> import re >>> re.compile(r'(?P<name>[a-
import cherrypy cherrypy.quickstart(app)
import subprocess subprocess.Popen(('echo','my_process.exe','my
def grand_children(parent, grand_children): grand_children = grand_children
from django.db.models import Q q = Q(name__icontains__
import numpy as np import matplotlib.pyplot as plt import matplotlib.cm as cm import numpy
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
import os path = os.path.dirname(os.path.abspath(__file__
def key_down(event): if event.key == pygame.KEYDOWN: #

import maya.core.model.model.model.model.model.model.
def __init__(self, *args, **kwds): self.kwds =
if (self.parent.parent.parent.parent.parent.parent.parent.
from tornado.gen import context_processor from tornado.gen import context_processor from tornado
>>> pprint(my_list) [u'1', u'2', u'3', u
import os os.environ['PYTHON_PYTHON_PYTHON_MODULE']
for i in range(len(list_of_items)): print list_of_
df['A'] = df['B'].str.contains('a') df['B
if (a==b)
>>> import shlex >>> shlex.split( shlex.split(command)) ['a', '
>>> import lxml.html >>> tree = lxml.html.fromstring('<html>This
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('c', '
import matplotlib.pyplot as plt import numpy as np import matplotlib.ticker as ticker import matplotlib
>>> a = [1, 2, 3, 4, 5] >>> a [1, 2, 3, 4, 5] >>> a [1,
def prime(num): if num % prime(num): return True return False
import datetime, time def my_time(start_time, end_time): return
>>> import ctypes >>> c_char_p = ctypes.c_char_p >>>
>>> d1 = {'a':1,'b':2,'c':3,'d
class User(models.Model): user = models.ForeignKey(User) class Meta:
def invoice_invoice(invoice_id, invoice_id): if invoice_id:
def func(x): return x + x def main(): print func(x) #
>>> import itertools >>> >>> >>> list(itertools.combinations(range(len(list
import time def sleep(): while True: time.sleep(1) print('sleeping')
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
>>> import csv >>> >>> from operator import itemgetter >>> >>> >>> >>> from operator import itemgetter >>>
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> sum
pip install xxx
>>> d = {k:v for k,v in d.items()} >>> d
import random def count(num): if num == 0: return 1 return count(num)
import sys, re, re, re, re, re, re, re, re
import os os.system('sudo -u'+ os.getcwd())
>>> import json >>> json.dumps(d) u'{"a": u'b
def check_length(list): if len(list) == 1: return list[0] else
import numpy as np from scipy.sparse import coo_matrix from scipy.sparse import coo
from flask import Flask from flask.ext.wsgi import WSGIHTTPServer from flask.ext
def checkhostkey(host): return host.key
import sys, time def print_value(value): print value, time.sleep(1)
>>> import ast >>> ast.literal_eval('a string') ['a', 'b
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
from IPython.display import display from IPython.display import display from IPython.display import display
import logging logging.getLogger('mylogger')
import struct struct.unpack('>I', struct.pack('>I', struct.
>>> a = [1,2,3] >>> b = [1,2,3] >>> a == b True >>>
def keyPress(event): # Do stuff here return event.keycode
def create_dict(d): for key, value in d.items(): if value
<table> <tr> <td> <a> <b> <c>
df.drop(df['A'], axis=1)
import struct def hex_literal(data): return struct.unpack('>BBBBBB
import win32com.client wb = win32com.client.Dispatch("Excel.
import cairo from StringIO import StringIO from cairo import Image from cairo import Context,
import hashlib def check_password(password): if password is None: password = make_
def grid(self, row, column): """ grid(row, column) """ return
def after(self, *args): self.after(*args)
from django.db.models import Sum from django.db.models import Sum from django
from flask import Flask app = Flask(__name__, static_url_path='/') @
>>> import string >>> string = 'hello world' >>> string.decode('utf-8') #
def get_request_params(self, request, **kwargs): # Do something with
{% for item in data %} <p> {{ item.name }} {{ item.value
import json data = json.load(json_data) for item in data: if
{% for field in fields %} {% if field.time %} {{ field.time }} {%
>>> def empty_string(s): if s: return s return s >>> empty_
import xlrd def my_func(x): return xlrd.open_workbook
import urllib from BeautifulSoup import BeautifulSoup soup = BeautifulSoup(urllib.urlopen("http://www.
>>> s = "hello" >>> s.rjust(10) 'hello'
>>> from collections import Counter >>> Counter(list1) Counter({'a': 1, 'b':
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> [
>>> import ast >>> ast.literal_eval('['a', 'b', 'c
def prime_numbers(n): return [int(x) for x in range(
>>> import re >>> s = 'abc' >>> re.sub(r'(a
import unittest from unittest importTestSuite from unittest importTestSuite from unittest import TestCase,TestSuite from unittest
def consistency(data): return set(data) == set(data)
class A(models.Model): #... def __init__(self, *args,
df.index.set_index('id')
>>> import re >>> re.findall(r'(a)((a)((b
import datetime def timestamp_from_timestamp(timestamp): return datetime.datetime.now().
def suppress(node): if node is None: return node.text return node.text
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
>>> a = [[1,2,3],[4,5,6],[7,8,9]] >>> a [[1, 2, 3], [4,
>>> from urlparse import urlparse >>> urlparse('http://www.example.com/posts/
import re with open('file.txt', 'r') as f: for line in
import subprocess subprocess.Popen((' ','my_program.py', 'arg
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
import threading def worker(): global queue queue = threading.Queue() queue.put() queue
import numpy as np import scipy.io.matrix as np a = np.array([[
import urllib urllib.urlretrieve('http://www.facebook.com/login.php
class Person(models.Model): name = models.CharField(max_length=200)
def is_sorted(lst): return any(item in lst for item in lst)
def get_queryset(self): return qs.filter(user__user=self.
>>> from nltk.corpus import wordnet >>> wordnet.wordnet(wordnet.
>>> import re >>> s = "a,b,c,d,e,f
from django.core.response import Response from django.core.encoding import base64 from
>>> from collections import Counter >>> Counter(word.lower().count('a')) Counter({'
from datetime import datetime, timedelta from sqlalchemy import func, timedelta from sqlalchemy.sql import func
from sqlalchemy import uuid uuid = uuid.uuid4().hex
>>> from itertools import chain >>> [list(chain(x, y)) for x,
>>> import re >>> re.findall(r'(?P<name>[a-
import subprocess subprocess.Popen((' ', 'c:\\Python\\ ', 'c
# # # # # # # # # # # # # # # # # #
def on_change(self, cr, uid, ids, change): if change:
import pandas as pd df = pd.DataFrame({'A': [1, 2, 3], 'B':
In [1]: import numpy as np In [2]: np.array([1,2,3]) Out
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> [
>>> from collections import OrderedDict >>> OrderedDict([('1','version'), ('2','version'),
>>> import string >>> string = "a" >>> string.replace("a", "b
import os os.chdir(os.path.dirname(__file__))
from web.py import Page from web.py import Page from web.py import Page
>>> a = [1,2,3] >>> b = [1,2,3] >>> a == b True >>>
import json from collections import OrderedDict from collections import OrderedDict from collections import OrderedDict from collections import OrderedDict
import os os.makedirs(os.path.dirname(__file__))
def verify_grad(x, y, z): return x + y + z def
import re with open('log.txt', 'r') as f: for line in
>>> import re >>> re.findall(r'(?P<name>[a-
>>> re.compile(r'(?P<name>[a-z]+)
>>> import struct >>> struct.unpack('>I', 'hello world') [('hello',
>>> [x for x in zip(a, b)] ['a', 'b',
var engine = Python.CreateEngine(); var engine.CreateEngine = engine; var engine
import os def create_file(filename): with open(filename, 'rb') as
>>> from email import EmailMessage >>> from email.utils import rfc822 >>> from email.
import subprocess subprocess.Popen('cmd.exe', shell=True)
class A(dict): def __init__(self, *args, **kwds):
cursor.execute("SELECT * FROM table WHERE id IN (SELECT id FROM table WHERE id
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
>>> import numpy >>> a = numpy.array([1, 2, 3, 4, 5, 6, 7, 8, 9,
>>> type(x) <type'str'> >>> type(x) <type '
//a[contains(@name, 'name')]/b[contains(@name, '
>>> re.compile(r'(?P<name>[a-z0-9]+
import xml.etree.ElementTree as ET tree = ET.parse('file.xml')
plt.xticks(x.get_xticklabels(), rotation=45)
import jinja2 from jinja2.utils import jinja2 from jinja2.utils import jinja2 from
def get_data(request): data = request.DATA return data
def get_user_id(user_id): user_id = user_id
if not self.request.POST.get('id'): self.response.out.
>>> re.compile(r'(?P<name>[a-z]+)
df1 = pd.DataFrame({'date': ['2011', '2012', '2013', '2014',
from fabric.io import BytesIO from fabric.io import BytesIO from fabric.io import BytesIO
import csv with open('file.csv', 'rb') as f: reader = csv
import os os.system(' /path/to/my/program.py')
def yield_next(self): yield self.next() yield self.next() yield
import logging logging.getLogger('mymodule')
import caffe.io.load_dataset('my_data')
import lxml.etree as etree tree = etree.parse('test.xml') for node
from werkzeug.wrappers import BaseHandler from werkzeug.wrappers import BaseHandler from werkzeug
def __call__(self, *args, **kwds): if self.var1
def get_request(request): global request request request request.session['request'] =
>>> import struct >>> struct.unpack('>I', b'\x00\x00\x
import requests r = requests.get(url, stream=True)
def composite(x, y): return x * y + y * z
import json data = json.load(open('http://www.example.com/
if not any(x == 'a' for x in range(len(a)
>>> re.search(r'(?P<start>[a-z]+)
>>> import ast >>> ast.literal_eval('hello') ['hello', 'hello']
import sys for line in sys.stdin: if line.startswith('a'): print line
def fantasy(players): return min(players, key=lambda player: player
>>> import codecs >>> codecs.decode('utf8','ignore') ['utf8']
def poll(self): # Do stuff here self.db.queries.append(self
from sqlalchemy import Column, timedelta from sqlalchemy.sql import func, func from sqlalchemy.sql
>>> for tup in [('a', 'b'), ('c', 'd'), ('d
def func(a, b): return a+b def func_a(a,
import os import sys with open(sys.argv[1], 'r') as f: for
class A(object): def __init__(self, a, b): self.a
import cv2 cv2.CaptureFromCamera(camera_capture_filename)
import multiprocessing from multiprocessing import Pool def worker(): return Pool(processes=4) def worker():
import subprocess p = subprocess.Popen(('echo', 'test'), stdout=subprocess.
from sqlalchemy import create_engine, connection, cursor cursor = create_engine('postgresql://
import os import sys import os with open(sys.argv[1], 'rb') as f
import os.system('echo hello world')
ax.legend(x, y, loc='best')
import subprocess subprocess.Popen(('grep', '*.txt', '*.txt',
def wrap_array(array, wrapped_array, wrapped_array_value): wrapped
>>> import urllib >>> url = 'http://www.example.com/page.html
import os import sys, time for i in range(len(sys.argv)-1
import codecs with codecs.open(filename, 'rb') as f: data = f
import sys import os import sys import sys import sys sys sys.path.append(os
from django.core.files import staticfiles_storage from django.core.files import staticfiles
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
>>> import maya >>> import maya.cmds >>> cmds = maya.cmds.
import os import psutil psutil.process_memory_percent = psutil.process_memory_
import sys, time def main(): sys.stdout.flush() time.sleep(1) sys
>>> re.compile(r'(?P<name>[a-z]+)
>>> import ast >>> ast.literal_eval('""%s""%s""%
import numpy as np import scipy.io.image as io from scipy.io.image
df['A'] = df['B'].apply(lambda x: x.isnull())
df['A'] = df['B'] df['B'] = df['C']
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
import numpy as np import matplotlib.pyplot as plt plt.plot(x, y)
import sys, pkg_resources, pkg_resources, pkg_resources.get_distribution
import urllib2 req = urllib2.Request('http://www.example.com/')
for line in file: if line.startswith('a'): print line
def increment(num): global num for i in range(num): if num % i
import json with open('data.json', 'rb') as f: data = json
class Notification(models.Model): #... class Notification(models.Model): #...
sns.bar(x, y, hue='red', alpha=0.3)
import sys import os def my_func(): global sys.argv sys.argv = [
class A(object): def __init__(self, a, b): self.a
df.sort(key=lambda x: x.index, ascending=True)
total = 0 for i in range(n): total += i print total
>>> import urllib >>> url = 'http://www.example.com/url.html
>>> isinstance(x, basestring) True >>> isinstance(x, str) False >>> isinstance
import re def parse_xml(xml): for line in xml.open('file.
>>> import struct >>> struct.unpack('>I', struct.pack('>I',
>>> [str(x) for x in d] ['a', 'b', '
import zmq import zmq.sock, zmq.util from zmq.util import zmq.util
import os import sys import os os.system('cls')
import sys, collections, operator def big_set(data): return collections.defaultdict
import numpy as np a = np.array([1,2,3]) b = np.array
int(input("Please enter a number: "))
self.item.setStyle(QtGui.QStyle.Blue)
ax.xaxis.set_major_formatter(matplotlib.ticker.NullFormatter())
>>> class A(object):... pass... >>> A.A = A >>> A.
import urllib2 url = 'http://www.example.com/my-app/
from coverage import coverage from nose import suite suite = suite() suite.add(test)
from pytest import setup setup(name='test', py_modules=['pytest'])
from datetime import datetime from django.db import connection connection = connection.connection() cursor =
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
manage.py runserver 0.0.0.0:8000
class A(object): def __init__(self, a, b): self.a
def __init__(self, *args, **kwds): self.args = args
class NodeSerializer(serializers.ModelSerializer): class Meta: #... class NodeSerializer(
>>> import struct >>> struct.pack('I', 'a') 'a'
from flask import Flask from flask.ext.wsgi import WSGIApplication from flask.ext.
import pandas as pd df = pd.DataFrame({'A': [1, 2, 3], 'B':
import os os.environ['PYTHONPATH'] = [os.environ['PYTHONPATH']
def worker(n): return n * n
import numpy as np a = np.array([1,2,3]) b = np.array
import urllib urllib.urlretrieve('http://www.example.com/search.php
from cassandra.util import Counter from cassandra.util import total_size from cassandra.util
def get_status(request): status = status.HTTP_204_NO_CONTENT return
#... def get_checkbox_values(self, request): if request.POST:
>>> re.compile(r'(?P<name>[a-z]+)
>>> set(set(x)) set([x]) >>> set(set(x))
wx.Frame(parent, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
>>> for i in range(len(list_of_tuples)):... print list_
def sum_digits(num): digits = [] for digit in num: digits.append
>>> d = {k:v for k,v in d.iteritems()} >>> d
import httplib httplib.HTTPConnection = httplib.HTTPConnection
{% for item in data %} {{ item }} {% endfor %}
from django.db.models import Q, Q, Q, Q, Q, Q
def list_to_n(list): return [n for n in list if n
from lxml import etree doc = etree.parse('test.html') for elem in doc
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
>>> d = {k:v for k,v in d.items()} >>> d
import os def cleanup(self): # Do stuff here if __name__ == "__main
import re with open('file.txt', 'r') as f: for line in
In [11]: df.index.date_index = pd.DatetimeIndex(df
import numpy as np import healpy as healpy import healpy as he
import numpy as np import scipy.linalg.diag matrix = np.matrix(np.
import urllib2 from pywinauto import App, Canvas, Image from pywinauto import
>>> d = {k:v for k,v in d.iteritems()} >>> d
>>> re.compile(r'(?P<ip>[a-z0-9]+
from email.mime.util import MIMEText from email.mime.util import MIMEText
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
import codecs cursor = codecs.open(filename, encoding='utf-8') cursor.execute("
>>> from django.db.models import Q >>> q = Q(name__icont
import random a = [random.randint(0, len(a)) for _ in range(
import os import tempfile import os import pickle with open('test.pickle', 'wb')
vim.init() vim.init() vim.init() vim.init() vim.
import subprocess subprocess.Popen( " ", shell=True, stdout=subprocess.PIPE
import sparse_hash_map(sparse_hash_map(data))
class Appstats(webapp.RequestHandler): def __init__(self, *args, **
class MyForm(forms.Form): def __init__(self, *args, **
import yaml with open('test.yml', 'rb') as f: data = yaml
import numpy as np import numpy as np from scipy.spatial import distance_matrix = np
>>> from jinja import Environment >>> env = Environment() >>> env.update({'A': '
from sqlalchemy.sql import func, func from sqlalchemy.sql import func q = func.
ax.set_xticklabels(labels)
{% for key, value in d.items %} {{ value }} {% endfor %}
if (game.player) { # Do stuff here }
from django.utils.timezone import timezone from django.utils.timezone import timezone from django
import os, os, os, os, os, os, os, os, os
class A(object): def __init__(self, *args, **kwds):
import datetime, time def sorted(dates): return sorted(dates, key=lambda x
import csv with open('test.csv', 'wb') as f: writer = csv
>>> import itertools >>> >>> [list(itertools.chain(x)) for x in
import socket host = socket.gethostbyname('localhost','myhost')
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
def big_dict(data): return {k:v for k,v in data
>>> from bs4 import BeautifulSoup >>> soup = BeautifulSoup(html) >>> soup.find_
import sys, os, sys, sys, sys, sys, sys, sys, sys
import multiprocessing def worker(processes): for i in range(processes): p = multiprocessing.
df.groupby('name').agg({'age':['a','b','c','d
from sklearn.datasets import load_iris from sklearn.datasets import load_iris from sklearn
>>> from operator import itemgetter >>> >>> lst = [('a', 'b'), ('a',
from django.db import connection connection = connection.connect() cursor = connection.cursor()
>>> import re >>> re.split(r'(?<=\s)(?=[\
df.loc[(df['A'] == 'A') & (df['B']
>>> a = [1,2,3] >>> b = a >>> b = a >>> b [1, 2,
import sys, inspect def make_func(func): return func.__closure__
import urllib def print_marker(marker): print marker.strip()
def power(n): if n == 1: return True return power(n-1)
(defun pdb)
class MyTable(db.Model): #... class Meta: proxy = True
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> [
>>> class A(object):... def __init__(self, a, b):...
def get_local_value(value): global value value = value return value
>>> import collections >>> >>> d = collections.defaultdict(list) >>> for key,
import numpy as np a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,
import subprocess subprocess.Popen(' ', shell=True)
>>> d1 = {'a':1,'b':2,'c':3,'d
>>> import decimal >>> decimal.Decimal('0.1') Decimal('0.1')
import random def random_string(string): return ''.join(random.choice(string
import subprocess subprocess.Popen(('outlook.exe', 'outlook.exe',
import os os.system('cls')
import json data = json.load(json_data)
from pyPdf import PdfFileReader from pyPdf import PdfFileReader from pyPdf import PdfFileReader
>>> from itertools import chain >>> >>> [sum(x) for x in chain(zip
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
import Image import Image from PIL import Image from PIL import Image from PIL import Image from PIL
def close(self): self.window.close()
import os os.system(' -c'+ os.path.abspath(__file
import subprocess subprocess.Popen('bash', shell=True)
class A(object): @property def b(self): return self.a @property
import threading def is_acquired(self): return self.lock.acquire()
>>> class A(object):... pass... >>> a = A() >>> print a.
from datetime import datetime from django.utils import timezone from django.utils.dateutil import
from django.db.models import Q q1 = Q(title__icontains
class A(object): def __init__(self, a, b): self.a
>>> import codecs >>> codecs.encode('foo', 'utf-8') u'foo'
>>> import struct >>> struct.unpack('>I', struct.pack('>I',
import inspect def inspect_class(cls): return inspect.getsource(cls)
import turtle.left(90) turtle.right(90)
import pybrain.netnet as net net = net.get_network() net
>>> import re >>> re.findall(r'(?P<prefix>[a-
import ghost.py import urllib2 url = 'http://www.google.com'
def is_running(self): return self.is_running()
import Image import numpy as np from PIL import Image from PIL import Image from PIL import Image
>>> re.findall(r'(?P<name>[a-z]+)
def __init__(self, value): self.value = value def __getitem__(self
<table> <tr> <td> <a>test</a> <td
class A(object): def __init__(self, a, b): self.a
import datetime import os import time for i in range(len(os.environ['T
def prime_factors(n): return [n for n in range(n)]
>>> d = OrderedDict([('a', 'b'), ('c', 'd'), ('
plt.scatter(x, y, c=c, marker='\t', c
import urllib from bs4 import BeautifulSoup soup = BeautifulSoup(urllib.urlopen(url)) for
//node[text()='foo']/node[text()='bar']/node
>>> from sympy import Symbol >>> Symbol('x')
import os with open('file.txt', 'r') as f: for line in
import json with open('data.json') as f: data = json.load(
class User(Base): __tablename__ = 'users' id = Column(Integer,
>>> float('0.1') / float('0.1')
import networkx as nx G = networkx.DiGraph() G.add_edge(1,2)
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
def test_test_name(self): #... def test_name(self):
def main(): while True: if input("Do you want to play again?") ==
import urllib2 url = 'http://www.reddit.com/ruters/
class A(object): def __init__(self, *args, **kwds):
def __init__(self, *args, **kwds): self.var1 =
import pydot.dot as pydot dot = pydot.Dot() dot.add
>>> d = {k: v for k, v in d.items()} >>> d
>>> from bs4 import BeautifulSoup >>> soup = BeautifulSoup(html) >>> soup.find_
>>> import re >>> s = 'a b c d e f g g g g g
import ctypes def read_file(filename): with open(filename, 'rb') as
pip install libffi.h pip install libffi.h pip install libffi.h
class A(object): def __init__(self, a, b): self.a
def get_first_name(name): if name == 'first': return name return
>>> import unicodedata >>> unicodedata.normalize('NFD', 'utf-8') ['a', '
{% if data.get('data') == data.get('data'): data.get
def remove_empty_field(self, field_name): if field_name:
import requests r = requests.get(url, headers={'User-Agent': 'Mozilla
import lxml.etree as etree tree = etree.parse('test.xml') for child
def f(x): return x + x def f(x): return x + x
>>> import uuid >>> uuid.uuid4().hexdigest() '0000000001'
import os import pandas as pd df = pd.read_csv('test.csv')
def entry(self, entry): entry.insert(0,''.join(map(str
import os for i in range(n): for j in range(n): os.
import os import sys import subprocess subprocess subprocess.Popen(r'C:\Users\me
import os os.environ['LD_LIBRARY_PATH'] = '/path/to/
class User(models.Model): user = models.ForeignKey(User) class Meta:
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
import base64 img = base64.b64decode(img.read())
import os os.environ['LD_LIBRARY_PATH']
import pandas as pd import matplotlib.pyplot as plt df = pd.DataFrame({'A':
>>> import sys >>> sys.stdout.flush() >>> sys.stdout.flush() >>>
In [1]: from sympy import Symbol In [2]: Symbol('x') Out[2]: x
import sys import time with open(sys.argv[1], 'w') as f: for
>>> import itertools >>> list(itertools.product(*)) [('a', 'b'),
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
import sys, time def print_line(self, line): sys.stdout.write
if np.isnan(np.nan) or np.isnan(np.
from django.contrib.auth.models import User from django.contrib.auth.models
for i in range(len(list_of_ints)): if list_of_
import os def f(x): return x + 1 f(x)
class A(models.Model): #... class B(models.Model): #...
from django.db.models import Q from django.contrib.auth.models import User
import curses curses.initscr() curses.initscr() curses.initscr() curses
if dict1['name'] in dict2: print("A dictionary is already present")
import os import os os.chdir(os.path.dirname(__file__))
>>> d = {k:v for k,v in d.iteritems()} >>> d
>>> import string >>> string = "a b c d e f g g h h h
>>> import numpy >>> a = numpy.array([1, 2, 3, 4]) >>> print(a
import urllib def post(self, url): if url.startswith('http'): return self
>>> import codecs >>> codecs.decode('utf8','ignore') u'utf8u
import csv with open('data.csv', 'rb') as f: reader = csv
>>> import re >>> re.findall(r'(?P<name>[a-
import xml.etree.ElementTree as ET tree = ET.parse('file.xml')
>>> import collections >>> a = collections.defaultdict(list) >>> a.keys()
from flask import Flask from flask.ext.static import static_app from flask.ext
>>> a = ['a', 'b', 'c', 'd', 'e',
<script> $(function() { var html = $(this).html(); // or whatever
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
import sys import collections def map(self, x): return collections.defaultdict(list
{% for item in my_list %} {{ item }} {% endfor %}
import datetime, time, time, time, time, time, time, time, time
.. image:: image:: image:: image:: image:: image:: image:: image:: image
from django.db.models import Q q = Q(user__id=user.
>>> import struct >>> struct.unpack('>I', struct.pack('>I',
>>> import string >>> string.ascii_lowercase # or whatever you're using to
import urllib2 from bs4 import BeautifulSoup soup = BeautifulSoup(urllib2.urlopen(url))
def post(self, *args, **kw): # Do stuff with the form return
>>> type(x) <type 'list'> >>> type(x) <type '
>>> d = { 'a': 'a', 'b': 'b', 'c
>>> import re >>> re.findall(r'(?P<name>[a-
class User(db.Model): @property def user(self): return self.user
import sys, time def f(x): return x + time.time() + time
import numpy as np from scipy.io.wavfile import wave from scipy.io.
>>> re.compile(r'(?P<name>[a-z]+)
>>> a = [[1,2,3],[4,5,6],[7,8,9]] >>> b = [[1,2,3
......................................................
>>> from collections import OrderedDict >>> >>> >>> OrderedDict([('a', 'b'), ('c
>>> import re >>> re.findall(r'(?P<name>[a-
>>> import datetime >>> datetime.datetime.now().date() datetime.datetime(2013, 2,
import matplotlib.pyplot as plt import numpy as np import matplotlib.cm as cm fig =
import sys, os def read_file(filename): with open(filename, 'rb
>>> import re >>> re.findall(r'(\d+)', 'a,b
>>> import unicodedata >>> unicodedata.normalize('NFD', 'utf-8') u'NFD
def login_required(request): if request.user.is_authenticated(): return True
from sqlalchemy.sql import Column, Column from sqlalchemy.sql import Column, MetaData from sqlalchemy
apple.setup.plist
import numpy as np from scipy.sparse import coo_matrix from scipy.sparse import coo
class MyInterface(object): def __init__(self, *args, **kwds
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
>>> from string import ascii_lowercase >>> ascii_lowercase.decode('utf-8')
import zipfile import os import os import os import os import shutil for root, dirs, files
import os import sys, os, clip = os.path.splitext(os.
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
import json with open('data.json', 'rb') as json_data: json
import sys, types class A(object): def __init__(self, a, b
>>> d = {('a', 'b', 'c', 'd', 'e
from odf.core.document import document from odf.core.document import document
import os import itertools with open('file1.txt', 'rb') as f1, open
import os import sys import grp, grp, grp, grp, grp, grp, grp
if (conn.check_status(u'Connection successful') == True): print("
def patch_list(self, patch_list, patch_list, patch_list
import numpy as np import scipy.stats as cov cov = cov.cov(matrix,
import urllib import urllib from cStringIO import StringIO url = 'http://www.example.com
with open('file.txt', 'wb') as f: f.seek(0) f
import sys sys.path.append('/path/to/your/project/')
import socket def send(self, data): try: return socket.inet_ntoa
import subprocess subprocess.Popen((' ','my_program.py', 'w
import csv with open('file.txt', 'rb') as f: reader = csv
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
for i in range(len(list_of_objects)): #do stuff here
{% for item in data %} {{ item.name }} {% endfor %}
import matplotlib.pyplot as plt import numpy as np import matplotlib.patches as patches, patches
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
df['A'] = df['B'].str.contains('a') df['B
from google.appengine.ext import upload from google.appengine.files import files from google
>>> import re >>> re.search(r'(?<=\w+)\s+
from bitbucket.git import BitbucketRepo from bitbucket.blobstore import Bitbucket
import os import sys import subprocess subprocess subprocess.call([" ", "C"])
from web.py import web from web.py import Page from web.py import Page
def askopenfilename(): filename = askopenfilename()
import sys, struct, struct, struct, struct, struct, struct, struct, struct
import pandas as pd import numpy as np import pandas as pd df = pd.read_
import struct.unpack('>I', b'\x00\x00\x00\x00\
>>> import datetime >>> datetime.datetime.strptime('2011-08', '%Y-%m
import sys, os, sys, sys, sys, sys, sys, sys, sys
import sys, os def create_console_app(app): """Create a console app
pip install pyodbc.init_data_file('data_file.name','pyodbc
>>> import urllib >>> urllib.urlretrieve('http://www.example.com/test
ax.add_collection(cax.get_collection(), cax.get_
>>> from itertools import chain >>> list(chain(chain(a, b), chain(
>>> import re >>> re.split(r'(?<=\s)(?<=\
In [26]: df.groupby('id').agg({'a':['a','b
>>> import itertools >>> >>> list(itertools.chain.from_iterable(range(
from django.db.models import Q, Q, Q, Q, Q, Q
>>> import itertools >>> list(itertools.chain.from_iterable(itertools.
from cherrypy import HTTPServer from cherrypy import server from cherrypy.server import HTTPServer from cherrypy
pil.draw(text, width, height, fill='red', fill='blue
import os import os os.makedirs(os.path.dirname(os.path
import win32gui.GetWindowText(win32gui.GetWindowText(win
df.loc[df['A'] == 'A']
import webbrowser webbrowser.open_new_tab()
>>> import string >>> string = "a b c d e f g g h h h
import os import os for root, dirs, files in os.walk(path): for
>>> import collections >>> [len(x) for x in collections.Counter(x)]
>>> import ast >>> ast.literal_eval('a', 'b', 'c')
>>> a = [1, 2, 3, 4] >>> b = a >>> b [1, 2, 3, 4] >>>
>>> d = { 'a':1, 'b':2, 'c':3, 'd
df['position']
>>> set(set(x)) set([1, 2, 3, 4])
import numpy as np import matplotlib.pyplot as plt plt.plot(np.arange(0,
>>> import struct >>> struct.unpack('>b', b)[0] (b, b)
class __iadd__(self, other): def __add__(self, other): if
>>> import socket >>> socket.getfqdn()'myhost.com'
df.groupby('date')['date'].agg({'_id': lambda x: x
{% for item in data %} {{ item }} {% endfor %}
>>> import struct >>> struct.unpack('>BBBBBBBBBBBBBBBBBB
import os os.system(' ','')
import os import dicom import numpy as np from dicom import File, dicom_
def get_description(self, func): return func.__doc__
import numpy as np import scipy.stats as stats import scipy.stats as stats import scipy
import csv with open('data.csv', 'wb') as f: writer = csv
import subprocess subprocess.Popen('awk', shell=True)
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
class A(object): def __init__(self, a, b): self.a
class Base(object): @classmethod def from_subclass(cls, subclass): if
import cv2 cv2.namedWindow("photohop", cv2.WINDOW_AUTOSIZE)
import sys import StringIO import scapy sniff = scapy.Sethnic sniff.parse
import Image import matplotlib.pyplot as plt im = Image.open('test.png')
>>> import ast >>> ast.literal_eval('["a", "b", "c
>>> isinstance(s, basestring) True >>> isinstance(s, str) False >>> isinstance
for field in models.Model.objects.all(): print field.get_foo_
import struct with open(filename, 'rb') as f: data = f.read
re.compile(r'(?P<name>[name])(?P<value
>>> import re >>> s = "a b c d e f g g h h h
import sys, os, sys, sys, sys, sys, sys, sys, sys
(defun pydocstrings)
df.merge(df, left_on='id', right_on='id')
class A(object): def __init__(self, a, b): self.a
import sys def main(): while True: try: sys.stdin.write(str(
import re def matches(filename): matches = [] for match in re.finditer(
df['A'] = df['B'].map(lambda x: x['A'])
import os import sys import os import os with open(sys.argv[1], 'rb')
>>> import re >>> re.findall(r'(?P<name>[a-
import datetime datetime.datetime.now().isoformat()
import Tkinter as tk root = tk.Tk() label = tk.Label(root,
>>> ['And', 'and', 'and', 'and', 'and', 'and
df['D'] = df['D'].apply(lambda x: x['D']
class User(models.Model): user = models.ForeignKey(User) class Meta:
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
sns.boxplot(x, y, kind='box', ax=ax)
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
self.lineEdit.setFocus()
import os def find_default_app_name(filename): return os.path.
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
import os import os os.chdir(os.path.dirname(os.path
import os with open('file.txt', 'r') as f: for line in
>>> [x for x in range(len(x)+1) if x not in y
from gevent import monkey.patch_all(app)
import matplotlib.pyplot as plt import matplotlib.ticker as ticker fig = plt.figure()
plt.imshow(data, interpolation='nearest', aspect='auto') plt.xlim([0,
>>> import re >>> re.sub(r'(?<=\s)(?<=\
import xlim from win32com.client import Dispatch wb = Dispatch('W3K
# -*- coding: utf-8 -*- import ipdb # -*- coding: utf-8 -*- import
if not any(x in y for x in range(len(y)-1))
>>> d = {k:v for k,v in d.iteritems()} >>> d
>>> import urllib >>> url = 'http://www.example.com/page.html
apscheduler.schedulers.schedulers.schedulers.schedulers.schedulers.
class Person(models.Model): name = models.CharField(max_length=200)
import subprocess subprocess.Popen([" ", "test.py"])
def get_url(self, request): return url(r'^(?P<
import os import os os.makedirs(os.path.dirname(os.path
>>> import re >>> re.split(r'(?P<name>[a-
pip install django
import os from google.drive.drive import GoogleDrive from google.drive.drive import
import os import os for root, dirs, files in os.walk(os.path
import vim.snip_snippet(source)
>>> [x for x in range(len(x)+1) if x[i]
def serial_check(serial): if serial.is_serial(): return True return False
def index(i, j): return i + j
>>> import re >>> re.sub(r'(?<=\s)\s+',
>>> import codecs >>> codecs.decode('utf-8') u'utf-8'
def get_user_name(user_id): if user_id is None:
import threading def main(): global count count = 0 def run(): global count count += 1
import numpy as np import scipy.io.wavfile as wave data = wave.read
>>> import re >>> s = 'a b c d e f g g h h h
import numpy as np import os with open('test.txt', 'w') as f
from lxml import etree tree = etree.parse('test.xml') tree.xpath('//
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
def callback(self, *args, **kwargs): self.callback(self, *
>>> a = [1,2,3] >>> b = a[::2] >>> b[::2] # [1,
pip.ini
[buildout] recipe = pyside [egg] recipe = pyside [egg]
def test_func(func, *args, **kwds): if not isinstance(
import sys, word_count = 0 for line in sys.stdin: word_count
import os import sys, os, sys, time max_value = max(os.
{% if user.is_active %} <script> $(function() { $('input[
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
import subprocess subprocess.Popen([" ", "command.py"])
import os import shutil with open(os.path.join(os.path.dirname
response = response.body.get('response', None)
>>> import string >>> string = "Jumbled" >>> string.count('Jumble
import numpy as np import scipy.io.savetxt('test.txt', data
>>> import base64 >>> base64.b64decode('utf-8') u'utf-8'
import subprocess subprocess.Popen([" ", "php", "test.php"])
>>> import re >>> s = 'a b c d e f g g g g g
import re s = 'foo bar baz' re.sub(r'(a)
def write_file(filename, *args, **kwargs): with open(filename,
import numpy as np import scipy.stats as stats def multinomial(n): return stats
import os with open('test.txt', 'w') as f: f.write
import subprocess subprocess.Popen(('echo', 'test.py', 'test.py
>>> line = "hello, world" >>> line.decode('utf-8') 'hello,
In [26]: df.groupby('time')['time'].apply(lambda x:
import win32gui.GetUser()
import cgi def post(self): return cgi.FieldStorage()
>>> class A(object):... pass... >>> A.A = A >>> A.
>>> from collections import Counter >>> Counter(list1) Counter({'a': 1, 'b':
def set_process_number(node, process_number): p = ipyparallel
import os with open(filename, 'rb') as f: for line in f:
def __init__(self, *args, **kwds): self.args = args
>>> import itertools >>> list(itertools.combinations(list(itertools.combinations(
import sys, os def f(): print 'hello' sys.stdout.write('\n
import urllib from bs4 import BeautifulSoup html = urllib.urlopen("http://www.example
>>> a = [[1,2,3],[4,5,6],[7,8,9]] >>> [tuple(x)
>>> import re >>> s = "a,b,c,d,e,f
from tornado.ioloop import IOLoop from tornado.ioloop import IOLoop from tornado.http
if any(x in 'a' for x in 'b' if x in '
class BaseForm(forms.Form): class Meta: proxy = True class Meta: proxy
import smtplib from email.utils import EmailMessage msg = EmailMessage() msg.attach(
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
$ echo $PATH/to/your/script.py
>>> d = {'a':1, 'b':2, 'c':3, 'd':
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
import numpy as np import os with open('test.csv', 'wb') as f
import pandas as pd df = pd.DataFrame({'A': [1, 2, 3, 4], 'B
>>> import re >>> re.sub(r'(a|b|c)',
import subprocess subprocess.Popen((" ", "foo.py", "bar.py
{% for item in data %} {% if item['name'] == 'Jake' %}
import sys, os, sys, sys, sys, sys, sys, sys, sys
>>> l = [["a", "b", "c", "d", "e
df.index = df.index.tolist()
>>> print u'Japanese é é é é é é
def get_list(list): return [list]
import os import re tree = os.path.dirname(os.path.abspath(__
if int(n) == int(n): print("ok")
import svn svn.rev_number = svn.rev_number(svn.rev_
>>> d = {k:v for k,v in d.iteritems()} >>> d
import collections def freq(letter): return collections.Counter(letter) for letter in letters
def sort(items): return sorted(items, key=lambda x: x[1], reverse
from apache.server import HTTPServer from apache.server import HTTPServer from apache.server
def partial(func, *args, **kwds): if not func: return func
>>> import re >>> re.split(r'(?<=\s)\s+(?=
>>> from collections import Counter >>> >>> Counter(Counter(line.strip().split('_
import re with open('file.txt', 'r') as f: for line in
import csv with open('data.csv', 'rb') as csvfile: reader =
>>> [lambda x: x(x) for x in x] ['a', '
>>> import datetime >>> datetime.datetime.strptime('19 Sep 15 16:11', '%d
import xlrd wb = xlrd.open_workbook('test.xls') wb
df.groupby('Group').size().reset_index().unstack(level=0).
import time def time_time(start_time, end_time): return time.
with open('file1.txt', 'r') as f1, open('file2.txt
from flask import Flask from flask import jsonify from flask.ext.json import json from flask
import xml.etree.ElementTree as ElementTree tree = ElementTree.parse(xml_file)
class User(models.Model): user = models.ForeignKey(User)
from django.db.models import Q, Q, Q, Q, Q, Q
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
import requests def download(url): with open(url, 'rb') as f:
ax.xaxis.set_major_formatter(matplotlib.ticker.NullFormatter())
#!/usr/bin/env import sys import os import sys sys sys.path.
>>> for i in range(len(a)):... if a[i] == a
import json data = json.load(json_data)
from django.db.models import Q qs = qs.filter(Q(name__
def update(request): if request.POST.get('user_id'): user =
def copy(node): if node is None: return node return node
'*' '*' '*' '*' '*' '*' '*' '*' '*'
import sys, os def find_version(version): return sys.version_info[
>>> a = [1,2,3] >>> b = [1,2,3] >>> a.append(b
df.query(lambda x: x['name'] == 'name', 'age',
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
>>> from sympy import Symbol >>> Symbol('x') == Symbol('x') True
>>> import re >>> re.search(r'(?P<name>[a-
def progressbar(self, *args, **kw): self.progressbar.update
from PIL import Image from PIL import Image from PIL import Image from PIL import Image from PIL
{% if line.strip %} <script> $(function() { $('textarea[data-
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
import re s = 'a,b,c,d,e,f,g
from odt import canvas canvas = canvas.Canvas(canvas) canvas.add_node
import kodos.kodos.open_group(kodos.k
import subprocess subprocess.Popen((' ','my_program.exe', 'w
>>> import string >>> string.split(' ', 1) ['a', 'b', 'c
>>> import itertools >>> groups = itertools.groupby(data, key=lambda x: x
var script = new Script(); var script.Execute(".exe", "arg1",
import Image import Image from PIL import Image from PIL import Image from PIL import Image from PIL
>>> import ast >>> ast.literal_eval(ast.literal_eval(s))
import sys import time for i in range(50): sys.stdout.write(str
>>> import collections >>> a = collections.Counter(a) >>> a Counter({'a':
>>> import pandas as pd >>> df = pd.DataFrame({'A': [1, 2, 3], '
>>> import itertools >>> >>> >>> >>> >>> list(itertools.izip_longest(
import csv with open('data.csv', 'rb') as f: reader = csv
import csv with open('test.csv', 'wb') as f: writer = csv
with open('file.txt', 'r') as f: for line in f:
>>> [x for x in range(n)] [['a', 'b', 'c
class A(object): def __init__(self, a, b): self.a
def create_list_store(self, store_name): store_name = store
>>> import re >>> re.findall(r'<a\b\b\b
>>> import re >>> re.split(r'(?P<name>[a-
self.textCtrl.GetAll().Render(self.textCtrl.GetAll())
while True: if event.type == QUIT: print("QUIT") break
>>> import ast >>> ast.literal_eval(ast.literal_eval(l))
>>> import collections >>> collections.Counter(list) Counter({'a': 1, 'b':
def get_id(self, id): return id
def update(self, *args): self.label.set(text=self.
if (data['user_id'] =='some_id'):
import json data = json.dumps(data)
def put(self, request, **kw): if not request.body: return self
<select name="name" id="name" value="{{ name }}"> <option value
import sys, os, sys, sys, sys, sys, sys, sys, sys
df['A'] = df['B'].map(lambda x: x['A'])
import os, crlfile = os.path.splitext(os.path.abspath
import numpy as np import scipy.stats as stats stats statsmodels.statsmodels.stats
>>> from collections import Counter >>> Counter(enum.values()) Counter({'a': 1, '
def escape(value): return value.replace(u'_', u'').encode
import numpy as np import matplotlib.pyplot as plt from scipy.stats import moments from
>>> from itertools import chain >>> list(chain(zip(list(x), list(
import struct import os def write_structure(struct, segment_name): struct.unpack
>>> import re >>> re.sub(r'(a)([^"]+', r
import sys import os with open(sys.argv[1], 'r') as f: for
def get_email_protected(self, request, *args, **kwargs): if
import csv with open('data.csv', 'wb') as f: writer = csv
>>> from sqlite import sqlite_connect >>> conn = sqlite_connect(db_name)
import Image from PIL import Image from PIL import Image from PIL import Image from PIL import Image
>>> import re >>> re.sub(r'(?P<name>[a-
def reduce(iterable): return reduce(iterable, [])
def __init__(self, *args, **kwds): self.args = args
>>> import binascii >>> binascii.hexlify(u'0x0x0x0
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
def get_user_id(user_id): user_id = user_id
import tensorflow as tf tf.get_default_loader().run_pending_tasks()
def is_substring(s, substring): if substring: return True return False
>>> from itertools import chain >>> list(chain.from_iterable(chain(iterable,
from django.core. serializers importSerializer from django.core.serializers import SortedDictSerializer
html = pynotify.Notification(title='My HTML Notification', data=data, formatter
from google.appengine.ext import webapp from google.appengine.ext import webapp from google
def next(self): return self.nextSibling()
class A(object): def __init__(self, a, b): self.a
>>> from pyparsing import parse >>> parse(parse("foo", "bar")) [('
def update_json(self, data): data = json.loads(data) return
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
import urllib2 from oauth2client import Client from oauth2.client import Client from oauth2.
>>> d = collections.defaultdict(dict) >>> d['a'] is d['
>>> print(u'This is a test string.', end='\n') This is
import sys, time def parse(self, data): while True: data = sys.
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
from sqlalchemy import Column, Column, relationship from sqlalchemy.sql import func from sqlalchemy.orm
{% for item in mylist %} {{ item }} {% endfor %}
df.map(lambda x: x.map(lambda y: x.map(
>>> import ast >>> ast.literal_eval(ast.literal_eval(ast.
import os for root, dirs, files in os.walk(root): for filename in
def create_window(): window = tk.Tk() window.geometry('200x200
df.loc[df['A'] == 'A'] = df['B'] df
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
import os import os with open(os.path.join(os.path.dirname
import requests url = 'http://www.example.com/file.html' response
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
def f(x): return x + 1 def f(x): return x + 1
>>> import datetime >>> datetime.strptime('2011-04', '%m/%d/%Y
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
>>> d = {k:v for k,v in d.items()} >>> d
import csv with open('data.csv', 'rb') as f: reader = csv
import sys, re def myfunc(x): return x * x + 1 return my
>>> re.compile(r'(?P<name>[a-z]+)
import socket import os def grepping(ip): try: return socket.inet_nt
def get_registration_url(request): if request.user.is_authenticated():
In [26]: df.index.map(lambda x: x.replace(hour
def list_func(list_func): return [func(x) for x in
kivy kivy kivy kivy kivy kivy kivy kivy kivy kivy kivy kivy kivy kivy kivy kivy kivy kivy
>>> import struct >>> struct.unpack('>I', struct.pack('>I',
>>> re.compile(r'(?P<name>[a-z])(?
import numpy as np import scipy.linalg.norm_matrix_as_matrix = scipy
df.drop(df['A'], axis=1)
>>> import ast >>> ast.literal_eval('['A','B','C','D
>>> from collections import Counter >>> Counter(d.values()) Counter({'a': 1, '
df.loc[df['A'] == 'B'] = df['B'] df
def push(self, *args, **kwds): if self.is_special
window = gtk.Window() window.show() window.show() window.show()
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
>>> print(u'u' + u' + u' + u' + u
import pandas as pd from io import BytesIO blob = BytesIO() blob.save(blob)
class UserSerializer(serializers.ModelSerializer): class Meta: proxy = True class UserSerializer
import numpy as np import scipy.io.fasta as fasta import scipy.io
import fileinput def read_file(filename): with open(filename, 'rb')
>>> d = {k:v for k,v in d.iteritems()} >>> d
def get_user_id(user_id): return user_id.id
import urllib2 url = 'http://www.example.com/login' response =
var myTable = new MyTable(); var myTable.DataContext = myTable;
import ast with open('file.txt', 'r') as f: data = ast
def range(start, stop, step): if stop <= step: return start, stop
>>> zipcode = 'AAPL' >>> zipcode.encode('utf-8') '
def vowel_count(s): return len(s) == len(s)
import os for f in glob.iglob('path/to/file/*.py'):
import winapi winapi.GetWindow handles = winapi.GetWindowhandles()
from ipywidgets import Select from ipywidgets import Figure from ipywidgets import Figure
import shlex shlex.split(sys.argv[1:])
from django.db.models import Q from django.db.models import Q from django
>>> d = {k:v for k,v in d.items()} >>> d
>>> import urllib >>> url = 'http://www.example.com/page.html
import datetime, calendar def next_month(start_date, end_date): return
>>> a = [1, 2, 3, 4] >>> b = a >>> a [1, 2, 3, 4]
if os.environ['HTTP_HOST'] == 'example.com': print("HTTP
import sys sys.path.append(os.path.abspath(__file__))
>>> l = [1, 2, 3, 4, 5] >>> sorted(l, key=lambda x:
def insert(self, *args, **kw): # Do stuff self.insert_
>>> a = ['a', 'b', 'c', 'd', 'e',
>>> import re >>> re.sub(r'(?<=\w+)\s+
fig.add_subplot(111) fig.add_subplot(111) fig.add_
def redirect_to(request, redirect_to): if redirect_to is None:
import csv with open('data.csv', 'rb') as f: reader = csv
>>> import re >>> s = 'a b c d e f g g g g g
class User(models.Model): user = models.ForeignKey(User) #...
>>> from itertools import chain >>> list(chain(zip(a, b), repeat=2
def save(self, *args, **kwargs): if self.user.is_
>>> [x for x in list_of_lists if x[0] == 'a']
from django.db.models import Q from django.db.models import Q from django
import sys import subprocess p = subprocess.Popen(sys.argv[1:]) out, err
>>> [set(x) for x in range(len(x))] ['a',
class A(object): @classmethod def __init__(cls, *args, **
import matplotlib.pyplot as plt plt.plot(x,y) plt.savefig
( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
import struct struct.unpack('>I', struct.pack('>I', struct.
>>> import random >>> random.randint(0,3) >>> random.randint(0,3) >>> random.
perl -e 'print $a; print $a; print $a; print $
import itertools with open('file.txt', 'r') as f: for line in
class A(object): def __init__(self, a, b): self.a
import csv with open('file.csv', 'rb') as f: reader = csv
import json data = json.load(json_data)
for i in range(n): if n%i == 0: print('Found the element
from django.core.validators import validate_password_prompt from django.core.validators
>>> df.groupby('id').agg({'id':['a','b','c','
from django.db.models import Q, Q, Q, Q, Q, Q
class MyObject(object): def __init__(self, parent, *args, **
>>> import itertools >>> >>> list(itertools.chain.from_iterable(itertools
def get_filechooser(self, *args, **kwargs): if self.
>>> import string >>> string = "hello" >>> string.replace("a", "b
from django.core.test import TestCase @test.patch('django.core.test
>>> from collections import Counter >>> Counter(list) Counter({'a': 1, 'b':
import ast ast.literal_eval(data)
import Image import matplotlib.pyplot as plt im = Image.open('test.png')
import decimal def convert(number): try: return decimal.Decimal(number) except ValueError
import os import re filename = 'test.txt' # or whatever you want to check
import time def do_something(): while True: time.sleep(1) do_something()
import matplotlib.pyplot as plt plt.plot(x,y) plt.show()
class MyHandler(object): def __init__(self, *args, **kw):
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
import datetime def is_interval(start, end): return datetime.datetime.now().
>>> a = [('a', 'b'), ('c', 'd'), ('d',
import itertools for i in itertools.combinations(range(len(a)), 2):
>>> from itertools import groupby >>> >>> >>> >>> >>> [list(g) for g in
$.ajax({ url: "/myurl/", data: { 'data': data}, success
from django.db.models import Q from django.db.models import Q from django
df.head() df.head() df.head() df.head() df.
df.merge(df, left_on='id', right_on='id')
plt.vline(x, y, label='label', linewidth=2, color='r
# # # # # # # # # # # # # # # # # #
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
def update_parent(self, parent, child): if child is None: child =
df.merge(df, left_on='id', right_on='id')
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
import os import shutil for root, dirs, files in os.walk(root): for
from PyQt4.QtCore import QObject, QObject, QObject, QObject, Q
... if __name__ == '__main__':...
def query(query): cursor = db.cursor() cursor.execute(query) cursor
from django.core.files.base import TemplateFile from django.core.files.
(?P<name>[a-z0-9]+)
df.loc[df['A'] == 'B']
def is_int(num): if num == 0: return True return False
from django.db.models import Q, Q, Q, Q, Q, Q
from elixir.relationships import relationships from elixir.relationships import
>>> import re >>> re.sub(r'(?P<name>[a-
import datetime from bs4 import BeautifulSoup from bs4 import BeautifulSoup from bs4 import BeautifulSoup from
from sqlalchemy.sql import literal_column from sqlalchemy.sql import Column, Column from sqlalchemy
print("This is a test string") # prints the value of the string print("This
self.canvas.GetParent().GetChild(self.canvas.GetParent(), self
>>> [d['name'] for d in data] [['name', 'value'], ['
def check_one_value(a, b): if a == b: return True
In [1]: from datetime import datetime In [2]: from datetime import timedelta In [3]: sorted
>>> import ast >>> ast.literal_eval(ast.literal_eval(d['
import pandas as pd import csv with open('data.csv', 'rb') as f
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> [
from glasslasslasslab.cluster import cluster from glasslasslab.cluster import
>>> [x for x in range(len(x)+1)] ['a', '
import matplotlib.pyplot as plt.subplots() plt.subplots_adjust(hspace=0.
def remove_key(d, key): if key in d: return d[key
import xlrd from xlrd import Workbook workbook = Workbook() sheet = workbook.
db = db.connect(host="localhost", user="root", passwd="root")
import wx from cStringIO import StringIO from StringIO import StringIO img = StringIO() img.write(
import os import os import os for root, dirs, files in os.walk(path
def sum_numbers(n): return sum(n for n in range(n))
import re import sys import re import re import re import re import re import re import re
>>> from collections import Counter >>> Counter(item) Counter({'a': 1, 'b':
import csv with open('file.csv', 'rb') as f: reader = csv
>>> import codecs >>> codecs.decode('utf-8', 'ignore') u'utf-8
>>> import datetime >>> dates = [datetime.date(2013, 1, 1) for _ in range
>>> import operator >>> sorted(enumerate(enumerate(enumerate(enumerate(
>>> import csv >>> data = [["a", "b", "c", "d
class A(object): def __init__(self, x): self.x = x
df['A'] = df['B'].apply(lambda x: x['A'].
from datetime import datetime, timedelta from itertools import chain from itertools import chain from itertools import chain
import csv with open('data.csv', 'rb') as csvfile: reader =
>>> isinstance(obj, type) True >>> isinstance(obj, type) False
def parse(self, response): # Do stuff with response.body
>>> import re >>> re.sub(r'([a-z]+)', r
def __init__(self, *args): self.x = *args self.y
>>> import re >>> re.search(r'(a)((a)((b
>>> a = [1,2,3] >>> a [1, 2, 3] >>> a [1, 2, 3]
>>> import urllib >>> urllib.urlretrieve('http://www.example.com/example
import subprocess subprocess.Popen('my_program.py', shell=True)
>>> import decimal >>> decimal.Decimal('0.1') Decimal('0.1')
import sys, subprocess def main(): print 'hello' sys.stdout = subprocess.Popen
>>> [list(x) for x in range(len(x))] [['a',
from pyspark.sql import udf from pyspark.sql import DataFrame from pyspark.sql import udf
<script> $(function() { $('input[name="name"]').html(function
>>> import time >>> time.mktime(time.strptime('30', '%m/%
>>> import urllib >>> url = urllib.urlparse("http://www.example.com
def browse(self): self.file = QFileDialog.openFileName(self, "
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
from django.db import connection from django.db.models import Q from django.db
if __name__ == "__main__": main()
import mechanize br = mechanize.Browser() br.open("http://www.
def func(x): return x + 1 def func2(x): return x + 1
>>> import itertools >>> list(itertools.combinations(a, b)) [True,
import os os.system(' ')
class UserForm(forms.Form): class Meta: user = UserForm() class Meta
from tornado.ioloop import IOLoop from tornado import ioloop from tornado.ioloop
>>> a = [('a', 'b'), ('c', 'd'), ('d',
>>> from itertools import chain >>> list(chain(item.first, item.second))
>>> import json >>> json.dumps(data) '{"a": "b", "
import urllib urllib.urlretrieve('http://www.example.com/')
import os import time def clear(): os.system('cls') time.sleep(1) with
def print_function(x): print(x) print(x) print(x
import os def create_variable(name): global name name = os.path.basename
>>> import urllib >>> >>> url = 'http://www.example.com/page.
def create_function(func): def wrapper(*args, **kwds): # Do
df['A'] = df['B'].map(lambda x: x['A'].
>>> import re >>> s = "a b c d e f g g g g g
class A(object): def __init__(self, a, b): self.a
import *
print(u'0')
from sqlalchemy import func from sqlalchemy.sql import func from sqlalchemy.sql import func from sqlalchemy
import os import tempfile for filename in glob.iglob('*.csv'): with tempfile.
>>> a = [1, 2, 3, 4] >>> b = a >>> b [1, 2, 3, 4]
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
from google.appengine.ext import webapp from google.appengine.api import Key from google
>>> [x for x in range(len(x)+1) if x not in d
for row in driver.find_elements_by_class_name('table'): print
>>> import itertools >>> [list(itertools.chain(x)) for x in itertools
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
def composition(x, y): if x == y: return x + y return composition
from bs4 import BeautifulSoup soup = BeautifulSoup(html) doc = soup.find_all
import socket import time def capture_frame(ip): frame = None while frame is None
from werkzeug.wrappers import SimpleHTTPServer from werkzeug.wrappers import SimpleHTTPRequestHandler
>>> import inspect >>> inspect.getfullargspec(inspect.currentframe().f_code
>>> re.sub(r'(a)([^)]*', r'\1', '
>>> from itertools import groupby >>> from itertools import groupby >>> >>> >>> from itertools import groupby >>>
>>> import ast >>> ast.literal_eval('a string') a string
import csv with open('data.csv', 'rb') as f: reader = csv
import sys, os, sys, sys, sys, sys, sys, sys, sys
>>> import unicodedata >>> unicodedata.name(u'NFD', u'NFD')
>>> import ast >>> ast.literal_eval(ast.literal_eval(ast.
class Singleton(dict): def __missing__(self, key): if key in self:
parser.add_argument('------------------------
import kombu from kombu import correlation_id from kombu.core
import subprocess subprocess.Popen(["wnck", "wnck"], stdout=subprocess
import sys, re def print_string(filename): with open(filename) as f
def total_length(grid, start, end, step): total_length = 0
class User(db.Model): user = db.StringProperty() def __init__(
import subprocess subprocess.Popen((' ','myscript.py', 'arg1',
mask = QPixmap.fromData(image.data(), QImage.Format_RGB
>>> import re >>> re.split(r'(?P<name>[a-
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('c', '
class A(object): def __init__(self, *args, **kwds):
>>> d = {k:v for k,v in d.items()} >>> d
>>> import itertools >>> l = [[1,2,3],[4,5,6],[7,8,9]] >>> [list
def copy(a, b): if a == b: return a return b
from django.core.management import call_command call_command('myapp.my_
if isinstance(string, basestring): # Do something else
import urllib2 url = 'http://example.com/file.ext' req =
>>> import string >>> string.split(' ') ['a', 'b', 'c',
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
import os import os os.path.dirname(os.path.abspath(__file__
def f(x): return x + [x] def f(x): return x
def parse(self, response): # parse the response to a new url = response.
>>> import string >>> string = "a" >>> string.lower() 'a'
>>> import re >>> s = 'a string with a string' >>> re.sub(
def empty_tuple(tup): if not tup: return False return True
import re with open('file.txt', 'r') as f: for line in
df['A'] = df['B'].map(lambda x: x['A'].
def callback(self, *args): # Do stuff here self.root.after(1
import urllib if urllib.urlretrieve('http://www.example.com/') is
import os os.system('sudo /usr/bin/activate')
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
import random def random_choice(array): random_choice = random.choice(array
def __init__(self, *args, **kwds): self.args = args
>>> import re >>> re.findall(r'(a)([^']+)', '
if ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
import_transform(datetime.datetime.now().strftime('%Y-%m-%d %
import json with open('data.json', 'rb') as f: data = json
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
plt.plot(x, y, marker='-', linewidth=2)
>>> import jinja2 >>> from jinja2.utils import unescape >>> html = unescape(u'
import os def get_dir(path): return os.path.dirname(path)
import matplotlib.pyplot as plt import numpy as np x = np.linspace(0,1,100
def get_queryset(self): return list(self.request.POST.values_
def default_value(prompt, default_value): if default_value is None:
import numpy as np from sklearn.datasets import load_iris from sklearn.datasets import load
class UserResource(ModelResource): class Meta: proxy = True class UserResource(Model
def list_of_lists(list): """Return a list of lists of lists."
>>> import itertools >>> >>> >>> list(itertools.combinations(range(n), n
>>> d = {k:v for k,v in d.iteritems()} >>> d
import csv with open('file.csv', 'rb') as csvfile: reader =
import os def countdown(self): return len(self.stdout.readline()) def
import urllib2 url = 'http://www.example.com/post' data =
>>> import ast >>> ast.literal_eval(ast.literal_eval(ast.
>>> from sqlalchemy import * >>> q = (('a', 'b', 'c',
<script> $(function() { $('input[type="text"]').text(function
def get_button_text(self, button): return button.text()
import pandas as pd df = pd.DataFrame({'A': [1, 2, 3], 'B':
>>> import unicodedata >>> unicodedata.normalize('NFD', 'r').encode('utf-8')
>>> from nltk.tokenize import StanfordTokenizer >>> stanford_tokenize = StanfordTokenizer
>>> import struct >>> struct.pack('I', 1234) >>> struct.unpack('I
import matplotlib.pyplot as plt import shapely.geometry as Point from matplotlib import cm from
>>> d = {u'a': u'a', u'b': u'
import numpy as np import matplotlib.pyplot as plt data = np.array([[1,2,3
class UserAdmin(admin.ModelAdmin): class Meta: model = User fields = ('
>>> import re >>> s = "hello world" >>> re.findall(r'(
import ast with open('data.txt', 'rb') as f: data = ast
(?<=\w+)\s*(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:
def test_assert_called_once(self, *args, **kwds):
import numpy as np a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,
from django.core.management import call_command call_command('stack_trace',
>>> print(u'This is a test string.', flush=True) This is a
import sys, os, sys, time, sys, sys, sys, sys, sys
def blueprint_layout(app, blueprint): if blueprint.name == 'foo': return
>>> import sys >>> sys.version_info['version'] '2.7.92' >>> sys
from polymer.html import polymer from polymer.html import polymer from pol
def async_result(result): if result is None: result = [] return result def
import os os.chdir(os.getcwd())
>>> import ast >>> ast.literal_eval('{' + ast.literal_eval(
from django.db.models import Count from django.db.models import Q from django
class UserSerializer(serializers.ModelSerializer): #... def to_representation(self,
def __init__(self, *args, **kw): self.kw = kw
def check(self, *args, **kw): if self.is_special:
>>> re.compile(r'(?P<name>[a-z]+)
import codecs codecs.open(u'http://www.example.com/test.
def convert(self, string): return string.ascii_lowercase
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
import subprocess subprocess.Popen((" ", "my_process.py", "my
import numpy as np import matplotlib.pyplot as plt from scipy.io import matmat,
>>> import re >>> re.split(r'(a) (a) (a
logger.add_logger(logger.name, logger.level, logging.Formatter('%
import os from setuptools import setup setup setup( name='my_package', version='1.0
from django.db.models import Min, Value from django.db.models import Min
>>> a = [1,2,3] >>> a [1, 2, 3] >>> a [1, 2, 3]
import re html = re.compile(r'<html\s*([^<]*
import sys, os, sys, sys, sys, sys, sys, sys, sys
import re lines = [line.strip() for line in open('file.txt')]
df.loc[df['A'] == 'B']
import csv with open('data.csv', 'rb') as csvfile: reader =
import pandas as pd df = pd.DataFrame({'date': pd.date_range('
The The The The The The The The The The The The The The The The The The
class Parent(object): def __init__(self, parent): self.parent = parent
from redis import redis_db, redis_db, redis_db, redis_db
def disable_tab(self): self.tab = self.tab.widget() self
if (x == 'A': print('A') elif (x == 'B':
import __import__(name)
>>> from nltk import ngram >>> ngram('hello, world!') ['hello', '
import collections with open('file.txt', 'r') as f: for line in
import time def time_in_seconds(start_time, end_time): return
>>> a = [1,2,3] >>> b = [1,2,3] >>> a[b] =
import os os.system('cls')
def button_clicked(self, event): self.button.configure(state='normal
>>> import itertools >>> for i, j in itertools.groupby(sorted(itertools.
def global_var(): global_var def global_var(): global_var global_
def signal_is_connected(signal, frame): if frame.is_connected():
>>> a = [1, 2, 3] >>> b = a >>> b [1, 2, 3] >>> a [1,
ssh.login(host, port)
import random, itertools def random_sample(n): return [random.choice(n
>>> from itertools import chain >>> tup = [('a', 'b'), ('c', '
import scipy.sparse.linalg.dot(a,b)
import sys, os, sys, sys, sys, sys, sys, sys, sys
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
>>> import itertools >>> >>> list(itertools.chain.from_iterable(itertools
class Foo(object): def __init__(self, a, b, c, d
import numpy as np import scipy.interpolate.interp_dilation_data = scipy.
import urllib from cgi import escape from cStringIO import StringIO from StringIO import StringIO from StringIO import StringIO
import scilab import numpy as np import matplotlib.pyplot as plt from scilab
import subprocess subprocess.Popen(('echo $USER', 'foo', 'bar'), stdout
from pymongo import MongoClient client = MongoClient() client.user = 'user' client.aggregate
self.tabwidget.resize(width, height)
import socket def sock(): sock = socket.socket() sock.connect((host,port
ax.set_xscale('log') ax.set_yscale('log')
import os for i in range(len(files)): for f in files[i]:
ax.set_xscale('log') ax.set_yscale('log')
import numpy as np import matplotlib.pyplot as plt import numpy as np x = np.
>>> d = { 'a':1, 'b':2, 'c':3, 'd
import subprocess subprocess.Popen(["pyublas", "sample.py"], stdout=subprocess
mask = mask.astype(int) mask = mask[mask] mask = mask[
def compare(a, b): return set(set(a)) == set(b
import numpy as np import scipy.spatial.distance from scipy.spatial.distance import cdf
import urllib url = 'http://www.example.com/login' response = urllib
from sqlalchemy import func, timedelta def sort_by_sort(start_date, end
def callback(self, var, *args, **kw): if var is None:
import pandas as pd import numpy as np import pandas as pd df = pd.read_
df.groupby('id').agg({'count':['count']})
def entry_icon(self, entry): return entry.icon
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
def get_url(self, request, *args, **kw): # Do stuff
def get_next_value(request): if request.POST.get('next_
def wrap(func): @wraps(func) def wrapper(*args, **kw
df.groupby('N').apply(lambda x: x.iloc[:n])
>>> a = np.array([1,2,3]) >>> b = np.array([4,
>>> re.compile(r'(?P<name>[a-z]+)
import numpy as np a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,
from django.db.models import F, F, G, L, L, L
import csv with open('data.csv', 'rb') as f: reader = csv
df.groupby('A').agg(lambda x: x.min())
import time while True: sleep(time.time() * 1000)
import os os.environ['PATH'] = os.environ['PATH']
>>> [x for x in list if x.strip()] ['a', 'b',
>>> import struct >>> struct.pack('>BB', b'\x00\x00\x
from __future__ import absolute_import, absolute_import, absolute_import, absolute
from twisted.web import Client from twisted.web.client import Client from twisted.web
>>> int(byte_buffer.encode('hex'), 16) 16
>>> import re >>> s = 'a,b,c,d,e,f
class A(object): def __init__(self, a, b): self.a
>>> from sympy import Symbol >>> Symbol('x') 'x'
for i in range(start, stop): print(i)
>>> [x for x in range(len(x)+1) if x[i]
import datetime, time def time_delta(start, end): return time.time()
>>> import itertools >>> >>> >>> [x for x in itertools.groupby(a, b
df.groupby('id').agg({'a':['a','b','c','d
import sqlite3 conn = sqlite3.connect(':memory:') cursor = conn.cursor()
if not random.random(): print print print print print print print print print print print print
import sys, os, sys, os, sys, os, sys, os, sys
>>> d = {k:v for k,v in d.iteritems()} >>> d
>>> import ast >>> ast.literal_eval('['a','b','c','d
>>> from lxml import etree >>> tree = etree.parse('http://www.example.
>>> import re >>> re.split('(a)((a)((b)((
>>> import operator >>> a = ['a', 'b', 'c', 'd',
from datetime import timedelta from datetime import timedelta from datetime import timedelta from datetime import timedelta from datetime
import sys, itertools def count_comments(filename): with open(filename) as f
>>> import itertools >>> >>> for i in itertools.combinations(data, 2):... print
import sys, os, sys, sys, sys, sys, sys, sys, sys
>>> from bs4 import BeautifulSoup >>> soup = BeautifulSoup(html) >>> for link in soup
>>> import ast >>> ast.literal_eval(ast.literal_eval(l))
>>> df.groupby('name').agg(lambda x: x.order_by('
>>> import struct >>> struct.unpack('>i', struct.pack('>i',
import imaplib imaplib.init_imap_server(host, port) imaplib
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
df.groupby('name').agg(lambda x: x * x)
def foo(x): return x + x def bar(x): return x + x
def async_task(): while True: yield from mysteriously_async_task
with open('file.txt', 'r') as f: for line in f:
>>> import string >>> string.format(u'a', u'b', u'
class MyForm(forms.Form): class Meta: proxy = True def __init__(
df.apply(lambda x: np.dot(x, df.index))
def draw(self, *args, **kwds): self.draw_line(
if abs(amount) < abs(amount) else amount
def switch(n): if n == 1: return True return switch(n-1)
from sqlalchemy import create_engine, create_engine, create_engine, create_engine
while True: if input("Please enter a valid number: ") break print("Please enter
import xlrd wb = xlrd.open_workbook('test.xls') wb
dialog = QtGui.QDialog() dialog.setWindowFlags(Qt.WindowFlags |
from django.db.models import Count from django.db.models import Q qs =
df.groupby('id').agg(lambda x: x.id)
import datetime import calendar dates = [datetime.date(2013, 1, 1) for _ in range
import tensorflow as tf tf.reduce_sum(x, y, weights=tf.
//div[contains(@class,'sub-sub-sub-sub-sub-
>>> import re >>> s = "a b c d e f g g g g g
>>> import csv >>> reader = csv.DictReader(open('file.csv', '
def center(self, parent, anchor=Tk.E.E.E.E
def update_update_item(self, item, **kwargs): if not self.
>>> s = "I'm a number" >>> s.replace(u'',
>>> class A(object):... pass... >>> A.__name__ 'A'
import matplotlib.pyplot as plt from matplotlib.ticker import ScalarFormatter from matplotlib import cm from
>>> from enum import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
>>> d = {k:v for k,v in d.items()} >>> d
def irc(): while True: if not irc.is_bot(): print("bot is
regex = re.compile(r'(?P<name>[name])(?P
from sklearn.tree import MultiDictVectorizer from sklearn.svm import SVC from sklearn.
def gen(n): for i in range(n): yield n yield n
if args.get('name'): #do stuff
import boto.s3.connection import boto.s3.connection import boto.s3.connection
from functools import wraps def wrapper(func): @wraps(func) def wrapper(*
import os import fnmatch for root, dirs, files in os.walk(os.path
>>> for i, j in enumerate(a):... print i, j... 1 1
def __iter__(self): return iter(self)
plt.scatter(x, y, marker='\t', c=marker, markers
import distutils.core.command.install_lib.install_lib.install_lib
df.merge(df, left_on='A', right_on='B',
import unicodedata unicodedata.normalize('NFKD', 'abcdefgh')
def parse(self, response): for url in response.xpath('//a/@href'):
fig.set_aspect('equal')
import codecs html = codecs.open(u'http://www.example.com/
def recursive_function(n): if n == 1: return n return recursive_function(
>>> set(set(set(set(set(set(set(set(set
>>> from bs4 import BeautifulSoup >>> soup = BeautifulSoup(html) >>> soup.findAll('
>>> import re >>> s = "a b c d e f g g h h h
import string def is_string_or_string(string): return string.ascii_
import numpy as np import Image im = Image.open('test.jpg') im.
import struct def decode_octet(data): return struct.unpack('>I',
from pymongo import MongoClient client = MongoClient() client.update_one( { '$id
import threading def worker(): while True: try: t = threading.Thread(target=
import pandas as pd df1 = pd.DataFrame({'a': [1, 2, 3], 'b
>>> d = {u'a': u'a', u'b': u'
>>> from email import EmailMessage >>> from email.utils import parse_qs >>> from_
class User(models.Model): user = models.ForeignKey(User) class Meta:
from google.appengine.cache import cache from google.appengine.cache import GoogleCache from
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
>>> from django.db.models import Q >>> q = Q(name__icont
import xlwt.Workbook() xlwt.Workbook().write('test.xls') xl
>>> list1 = ['a', 'b', 'c', 'd', 'e
plt.plot(x, y, marker='\t', linewidth=2)
>>> import ast >>> ast.literal_eval('""a b c d e f g
def next_pair(pair): if pair[0] == pair[1]: return pair[0] else
def sum(n): if n == 0: return 1 return sum(n)
def run(): while True: # Do stuff here if __name__ == "__main__":
import urllib import urllib import urllib url = 'http://www.example.com/test
>>> import re >>> re.split(r'(?P<name>[a-
import csv with open('data.csv', 'rb') as csvfile: reader =
import numpy as np import matplotlib.pyplot as plt import matplotlib.path as path import matplotlib
>>> import numpy >>> a = numpy.array([1, 2, 3, 4, 5, 6, 7, 8, 9,
def f(x): return x + 1 def f(x): return x + 1
class A(object): def __init__(self, x, y): self.x
>>> a = [1, 2, 3, 4, 5] >>> b = [a, b] >>> b
import os import tempfile def write_file(filename, mode): with tempfile.NamedTemporaryFile
>>> l = [[1,2,3],[4,5,6],[7,8,9]] >>> [l.append(
import Image import os from PIL import Image from PIL import Image from PIL import Image from PIL
import xl.open_workbook('test.xls') sheet = xl.Worksheets
>>> import itertools >>> [list(itertools.combinations(l, 2)) for l
>>> from operator import itemgetter >>> >>> from operator import itemgetter >>> >>> >>> from operator import itemgetter
def get_first_name(name): return name
import os def open_at_at_time(filename): with open(filename,
import os for root, dirs, files in os.walk(root): if files:
def create_url(self, request, *args, **kwargs): if request.
def convert_int(s): if s == 0: return int(s[1:]) else
def default_value(self, value): if value is None: return "" return value
from flask import Flask from flask.ext.sqlalchemy import SQLAlchemy from flask.ext.sqlalchemy
def get_table(table_name): result = [] for row in table_name
>>> from itertools import chain >>> a = [('a', 'b'), ('a', '
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
import csv with open('data.csv', 'rb') as csvfile: reader =
>>> d = {u'a': u'a', u'b': u'
def iterable(iterable): return iter(iterable)
>>> [d['name'] for d in data] ['name', 'value', '
def get_output(df, index): if index == 0: return df[index]
import numpy as np import scipy.integrate as integrate from scipy.integrate import
import os os.system("cls")
>>> print repr(u) Ñ
def get_dict(d): if d is None: return {} else: return dict
>>> import re >>> s = "hello world" >>> re.sub(r'(
import matplotlib.pyplot as plt from collections import Counter from collections import Counter from collections import Counter
cursor.execute("INSERT INTO test(id) VALUES (%s)" % (row
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
>>> import re >>> re.split(r'(?P<name>[a-
import sys, time def print_time(): print time.time()
import random from sklearn.datasets import KFold from sklearn.datasets import load_iris from
import subprocess import time import sys import time import time import time import time import time import time
def is_int(x): return x == True
>>> import re >>> re.compile(r'<html\s*?([^>
class A(object): def __init__(self, a, b): self.a
import sys, os, sys, time def read_file(filename): with open(
import numpy as np import scipy.io.clip_array import numpy as np x =
>>> a = [1, 2, 3] >>> b = [1, 2, 3] >>> a.append(b
from django.db.models import Q qs = qs.filter(Q(name__
>>> d = {k:v for k,v in d.iteritems()} >>> d
from django.core.management import call_command call_command('my_app.
>>> import re >>> re.sub(r'([a-z])', r'
canvas.create_text(0, 0, 'Hello, world') canvas.create_rectangle(0,
import SimpleCV import SimpleCV from SimpleCV import Image from SimpleCV import SimpleCV from
class MyStaticFile(object): def __init__(self, filename): self.filename
class SomeForm(forms.Form): class Meta: exclude = ('name',)
import numpy as np import pandas as pd import numpy as np data = np.array([[
In [11]: df.insert(0, df.index[df.index.isin(
>>> from sqlalchemy import query >>> query = query.query(User) >>> result = query
>>> import struct >>> struct.unpack('>BBBBBBBBBBBBBBBBBB
>>> re.compile(r'(?P<digit>\d+)\s+(?
$ pip install pydoc
def on_menu_item_clicked(self, widget, data): #do stuff
>>> d = {u'a': u'a', u'b': u'
cython_out = open('out.pyx', 'w') cython_out.write
import sys, os, sys, os, sys, sys, sys, sys, sys
>>> type(str) <type'str'> >>> type(str) <type '
>>> class A(object):... pass... >>> a = A() >>> a.a
>>> var = 'hello' >>> var.value 'hello'
import numpy as np import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
def close(self): self.window.close()
>>> import ast >>> ast.literal_eval('a,b,c,d,
def counter(self): counter = 0 for i in range(self.count): counter
from mongoengine.signals import User, User, User, User, User, User,
def render(request): if request.method == 'POST': return HttpResponse(json.
>>> from decimal import Decimal >>> Decimal('0.14285714285714285714285714
class A(object): def __init__(self, a, b): self.a
def open(self): self.filedialog = QFileDialog() self.filedialog.
class MyOption(object): def __init__(self, *args, **kw):
def signal_handler(signal, frame): # Do stuff here signal.signal(signal
urlpatterns = patterns('', url(r'^^^^^^^$', 'django.
import sys, time def main(): while True: line = sys.stdin.readline()
from django.core.cache import cache_from_url from django.core.cache
df.loc[df['A'] == 'B'] = df['B'] df
var obj = new Dictionary<string, object>(); obj["a"] = "a";
>>> import itertools >>> list(itertools.chain.from_iterable(itertools.
>>> re.findall(r'(?P<key>[a-z]+)
from fabric.api import * from fabric.tasks import task from fabric.tasks import Task
import numpy as np import scipy.stats as stats import scipy.stats as stats import scipy
<table> <tr> <td> <table> <tr> <td>
import urllib2 url = 'http://www.example.com/test.html'
def f(x): return x + 1 def f(x): return x + 1
>>> for i in range(len(list_of_tuples)):... print list_
import lxml.html tree = lxml.html.fromstring(html_string) for
df.groupby('id').apply(lambda x: x['id'] == x['
cursor.execute("""SELECT * FROM table""")
import time def print_time(): time.sleep(1) print_time()
df['A'] = df['B'].apply(lambda x: x['A'].
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
import h264 import time def f(x): return time.mktime(x)
>>> from itertools import permutations >>> permutations(permutations(a), repeat=3) [('a
def decorator(func): @wraps(func) def wrapper(*args, **kw
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
class UserAdmin(admin.ModelAdmin): list_display = ('name',) list
import os os.environ['APPLICATION_ROOT'] = os.environ['APPLICATION_ROOT
import pygtk3 from pygtk3.signals import signal from pygtk3.signals import Signal
>>> import string >>> string = "foo" >>> string.strip() 'foo'
>>> l = [[1,2,3],[4,5,6],[7,8,9]] >>> [l[i:
import numpy as np import scipy.stats as stats import scipy.stats as stats import scipy
df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 2, 3]})
>>> s = "I am a string" >>> s.replace("I", "I
import sys, time for i in range(len(sys.argv)-1): print
import os import xlrd wb = xlrd.open_workbook('test.xls
import os import os def create_dir(dir): for i in range(dir):
import pycurl from pycurl import HTTPBasicAuth req = HTTPBasicAuthRequest("http
>>> d = {k:v for k,v in d.items()} >>> d
>>> import binascii >>> binascii.hexlify(u'a\xe9f\xe
class User(models.Model): user = models.ForeignKey(User)
import email.utils.parse_qs(qry)
>>> import string >>> string = "a b c d e f g g h h h
from django.core.cache import SimpleCache def clear_cache(cache_name):
>>> s = 'a' >>> s.replace('a', 'b') 'a
from flask import Flask from flask.ext.static import static from flask import request @app
import numpy as np a = np.array([1,2,3]) np.binarize
def find_root(n): if n == 0: return n if n == 1: return
from flask import Flask from flask.cache import cache from flask.cache import Session from flask
from django.contrib.auth.models import User from django.contrib.auth.models
import cv2 cv2.imshow(img, cv2.imread('test.jpg'))
import sys, os def f(): print 'hello' sys.stdout.flush() sys
import subprocess subprocess.Popen( [" ", "test.py"], stdin=subprocess.
>>> import collections >>> collections.defaultdict(list) [('a', 'b'), ('
import os import os for root, dirs, files in os.walk(root): for
def total(num): if num % 2 == 0: return num // 2 return total(
import os import sys import os import shutil def convert_file(filename): with open(
class User(models.Model): user = models.ForeignKey(User) #...
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
import os def is_executable(name): try: return os.popen(name).
import os import os os.path.abspath(os.path.dirname(__file__
import os import os import os import os import os import os import os import os import os
from django.db.models import Q qs = qs.filter(Q(name__
>>> import random >>> l = [1, 2, 3, 4] >>> random.shuffle(l) >>>
from sqlalchemy.sql import func, func from sqlalchemy.orm import aliased_app, aliased
import collections with open('file.txt', 'r') as f: d = collections
>>> import ast >>> ast.literal_eval('['a','b','c','d
>>> d = {('a', 'b', 'c'): 'd'} >>> d
import os class File(object): def __init__(self, filename): self.filename
import gtk style = gtk.Style() style.set_from_file('style.
>>> [x for x in list_of_lists if x not in list_of
import csv with open('data.csv', 'rb') as f: reader = csv
>>> import itertools >>> >>> list(itertools.product(*a)) [(1, 2), (2,
import datetime datetime.datetime.now().strftime('%Y-%m-%d %H:%
def binary_func(x): return x * x + x * x
from flask import Flask from flask.ext.image import Image from flask.ext.image
import sys, time def task(): for i in range(len(sys.argv)
import re def check_password(password): return re.match(r'([a
import csv from sqlite3.connect import sqlite3 conn = sqlite3.connect(db_name
def chunks(n, k): chunks = [] for i in range(k): chunks
>>> import re >>> re.findall(r'(\d+)', 'a,b
import urllib from walmart import walmart from walmart import WALM
>>> import types >>> [cls.__dict__ for cls in types.__dict__.values()
from fabric.contrib.auth.user import User from fabric.contrib.auth.user
import re with open('file.txt', 'r') as f: for line in
def monkey(monkeymonkeypatch): monkey.patch.object.__name__ ='monkey
import sys, smartctl, smartctl, sys, sys, sys, sys, sys
def decorate(cls): @classmethod def __new__(cls, name, bases,
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
import cv2 cv2.imshow(image, cv2.CHAIN_APPROX_
>>> import re >>> re.sub(r'(?<=\s)', r'
In [11]: df.loc[df['A']==1,'B'] Out
import praw from praw import GraphAPI from praw.client import Client from p
import os import datetime def mtime(filename): return datetime.datetime.fromtimestamp(os
import csv with open('data.csv', 'wb') as f: writer = csv
import basemap import matplotlib.pyplot as plt fig = plt.figure() ax = fig
>>> import datetime >>> datetime.datetime.now().strftime("%Y-%m-%d %
import re with open('test.txt', 'r') as f: for line in
>>> d = {k:v for k,v in d.items()} >>> d
import os os.mkfile('path/to/msi')
import numpy as np import scipy.misc.imread('test.jpg')
>>> import struct >>> struct.unpack('I', struct.pack('I', struct.
>>> from itertools import chain >>> list(chain(zip(list(chain(zip(
pivot = pivot.pivot(index='A', columns='B', values='C',
import os.path.abspath(os.path.dirname(__file__))
from PyQt4.QtCore import QUserDefaults from PyQt4.QtCore import QUserDefaults from PyQt
(defun "color" (defun "color" (defun "color"
import matplotlib.pyplot as plt from matplotlib.patches import Patch(color='red', edg
import csv with open('data.csv', 'rb') as f: reader = csv
import os import tempfile def save_file(filename): with tempfile.NamedTemporaryFile() as
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
pip install --egg=foo
import win32gui win32gui.GetPalette(win32gui.GetPalette(
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
import subprocess subprocess.Popen('http://www.example.com/test.html',
class A(object): def __init__(self, x): self.x = x
import os import sys import os import sys import os os.system('cls')
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
import matplotlib.pyplot as plt import numpy as np x = np.array([1,2,3
import csv with open('data.csv', 'rb') as csvfile: reader =
>>> from itertools import groupby >>> >>> [k for k,v in groupby(g,
plt.plot(x,y)
class A(object): def __init__(self, a, b): self.a
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
from django.shortcuts import redirect from django.shortcuts import redirect from django.shortcut
import rhythmbox.PyObject * track = rhythmbox.PyObject
import gephi.plugins.gephi.plugins.gephi.plugins
import os import sys, os, os, os, os, os, os, os
>>> import re >>> re.findall(r'(?P<name>[a-
class A(object): def __init__(self, a, b): self.a
>>> import re >>> s = "a b c d e f g g g g g
from markdown import markdown markdown = markdown(html_string) markdown.render(markdown
>>> a = [1,2,3] >>> b = [1,2,3] >>> a == b True >>>
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
def __init__(self, *args, **kwds): self.q = Q
import json from job import Job from job import Job from job import Job from job import Job
>>> import urllib >>> url = 'http://www.example.com/page.html
plt.plot(x,y) plt.legend(x,y) plt.
>>> a = [1, 2, 3, 4] >>> b = [1, 2, 3, 4] >>> a.append
if not (a==b): print("A is not a b")
self.widget.set_text('some text')
mercurial.merge(self,self,self,self,self,self,
def process(state): global state if state == 'active': global state state = state
import csv with open('data.csv', 'wb') as f: writer = csv
def __init__(self, *args, **kwds): self.args = args
>>> d = {'a':1,'b':2,'c':3,'d':
import os from google.appengine.docs import document from google.appengine.client import client
import sys for i in range(len(sys.stdout)-1): sys.stdout
df.groupby('name').agg(lambda x: x.replace('_', '
class A(object): def __init__(self, *args, **kwds):
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
>>> import hashlib >>> hash(sha1) hashlib.sha1() >>> hash(sha1) hashlib
from email.utils import EmailMultiAlternatives from email.utils import remove_blank_
>>> for key, value in d.items():... print key... >>> >>> [u
import codecs with codecs.open(filename, 'utf8') as f: for line
import json from django.core.urlresolvers import reverse from django.core.urlresolvers
from itertools import chain from operator import itemgetter from operator import itemgetter from operator import itemgetter from operator
from ggplot import * from ggplot import * from ggplot import * from ggplot
>>> from sqlalchemy import Column >>> c = Column(int, primary_key=True)
>>> import re >>> re.findall(r'<a[^>]*>(.*?)
>>> import itertools >>> >>> >>> list(itertools.chain.from_iterable(it
import urllib import urllib url = 'http://www.example.com/post' data
def ask(): # Do something with the user input return input
df.index.diff(df.index)
re.sub(r'(a)', r'\1', string)
>>> import re >>> re.sub(r'(?<=\s*\s*\s
>>> import base64 >>> base64.b64decode('foo') 'foo'
def update_view(request): form = UpdateForm(initial={'form': form,
import sys, os, sys, sys, sys, sys, sys, sys, sys
from django.core.urlresolvers import reverse from django.core.urlresolvers import reverse
import json json_data = json.load(json_data)
def func(x): return x + 1 def func2(x): return x + 1
class MyType(object): def __init__(self, name, value, *args
import jinja2 from jinja2.exceptions import UndefinedError from jinja2.utils import Markup from jinja
import zipfile zipfile = zipfile.ZipFile('zipfile.zip', 'w') zip
import csv with open('test.csv', 'wb') as f: writer = csv
>>> import re >>> re.split(r'(?P<name>[a-
import ast with open('file.txt', 'r') as f: for line in
def f(x): return x * x + x * x
def quiz(): print("What is your score?") print("What is your score?
//include <stdlib.h> std::string foo(std::string name)
>>> a = [None, None, None, None, None, None, None,
import subprocess p = subprocess.Popen(('ls', 'r', 'l', '
>>> ''.join(map(str, list)) 'a'
import os os.system("cls")
for i in range(n): if n%i == 0: print('a')
def count(vars): return len(vars)
In [1]: np.array([3,4,5]) Out[1]: array([3,4,
>>> from collections import Counter >>> Counter(list1) Counter({'a': 1, 'b':
import pymunk.core.core.core.core.core.core.core
import math def ceil(x): return math.ceil(x)
>>> from collections import Counter >>> Counter(Counter(a).most_common()) Counter({
(defun "make a buffer")
import os os.system(' /path/to/my/program.py')
import sys sys.path.append(os.path.abspath(__file__)))
db = pymongo.Connection() db.user = 'user' db.pass = '
>>> d = {'a':1, 'b':2, 'c':3, 'd':
import Tkinter root = Tkinter.Tk() root.geometry("400x400+400+
import numpy as np a = np.array([[1,2,3],[4,5,6]]) np.
>>> for i in range(len(list_of_lists)):... print list_
from flask import Flask from flask.test import Test app = Flask(__name__, static_
from jinja2 import Template engine = TemplateEngine(template_string='foo.html')
def pos_tagged(pos, tag): if tag: return pos[tag]
def __init__(self, *args, **kw): super(MyModel, self
def __init__(self, *args, **kwds): self.dict = kw
import json from django.core.files import ContentFile from django.core.files.
def round(x): if x == 0: return x return x
In [11]: df.index.value Out[11]: 0 1 1 1 2
import unicodedata def to_lower(s): return unicodedata.normalize('NFKD',
>>> a = ['a', 'b', 'c', 'd', 'e',
import csv with open('data.csv', 'rb') as f: reader = csv
from datetime import datetime, timedelta from youtube.comments import Comment from youtube.events import Event
>>> import numpy as np >>> np.fromstring(np.array(u'a
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
import urllib import urllib url = 'http://www.example.com/file.html
from flask import url_for, redirect from flask.ext.url_for import url
import sys, subprocess def main(): global global global global global global global global global global global
import xml.etree.ElementTree as ElementTree tree = ElementTree.parse('http://www.
import os os.environ['CURRENT_TIME']
import sys, os def main(): global var_var_var_var_var_
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
from flask import Flask from flask.ext.db import db db db.session = db
cursor.execute(sql)
>>> import json >>> d = {u'a': u'a', u'b
import requests url = 'http://www.example.com/get_data' response
class A(object): @property def a(self): return self.a @property
>>> d1 = {'a':1,'b':2,'c':3,'d
df.loc[df['A'] == 'B'] = df['B']
>>> import itertools >>> >>> >>> itertools.combinations(combinations(combinations(combinations(combinations(
def get_url(self, request): return tornado.gen.url(self.
from pyglet import Image from pyglet.image import Image from pyglet.display import
class A(object): def __eq__(self, other): if isinstance(other,
>>> from itertools import chain >>> list(chain.from_iterable(chain(*zip(*
>>> import re >>> re.findall(r'(a)([^"]+)', '
>>> import inspect >>> inspect.getfullargspec(inspect.currentframe().f_code
df.loc[(df['A'] == 'A') | (df['B']
driver.get(url)
>>> import maya >>> m = maya.Mel() >>> m.sub(
from flask import request @app.route('/test/<path:path:path:path
df['A'] = df['B'].apply(lambda x: x.isnull())
import numpy as np a = np.array([[1,2,3],[4,5,6]]) np.
import imaplib imaplib = imaplib.IMAP4_SSL('imap.gmail.
from django.contrib.auth.decorators import user_id from django.contrib.
import ast with open('myfile.txt', 'rb') as f: data = ast
import re xml = etree.parse('file.xml') xml = xml.replace('
def __init__(self, *args, **kwds): self.args = args
if not args.get('foo', None): print('foo is not None')
import csv with open('data.csv', 'rb') as csvfile: reader =
>>> import binascii >>> binascii.hexlify('abc') '0x01'
if not any(x in y for x in range(len(y)-1))
>>> import urllib >>> url = 'http://www.example.com/index.html
In [26]: df.loc[df['A'] == df['B']].
class User(db.Model): user = db.User() user = db.User
>>> from itertools import groupby >>> >>> >>> [k for k,v in groupby(g
import lxml.etree as etree tree = etree.parse('test.xml') for node
import numpy as np import scipy.io.wavfile as wave import numpy as np from
import numpy as np import scipy.stats as stats import scipy.stats as stats data =
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
def recursive(n): if n == 0: return [] return recursive(n-1) def recursive
import os import tarfile with tarfile.open(filename, 'rb') as tar: for
>>> for i in range(len(list)):... print(list[i])...
def iter_dates(dates): return [dates[i] for i in range(
class UserAdmin(admin.ModelAdmin): class Meta: proxy = True admin.site
import os import glob import os import os import os import os import os import os import os
>>> d = {u'a':u'a', u'b':u'
>>> import re >>> re.sub(r'(\d+)', r'\1\1',
import os os.system('sudo ', shell=True)
from django.contrib.auth.backends import User from django.contrib.auth.backends
import json json_data = json.load(open('data.json', 'r
def send(self, response): # do stuff with response response.headers.get('
>>> re.search(r'(?P<name>[a-z]+)
PyObject *frame = PyObject_CallObject(frame, "frame"); PyObject *frame =
import re with open('database.txt', 'r') as f: for line in
import numpy as np matrix = np.array([13,6,6,7,9,9,9,
def main(): print("Hello, world!") main()
import struct with open('data.bin', 'rb') as f: data = f
def make_makefile(filename): """Make a makefile object. """ return open(
class Meta: proxy = True
import cv2 cv2.LoadImage('image.jpg')
df.groupby('A').apply(lambda x: x.index)
while True: if not input("Do you want to play again?") break
>>> import codecs >>> codecs.sort(key=lambda x: x.decode('utf
from django.core.files.copy import copy_file from django.core.files
>>> from networkx import MultiDict >>> G = MultiDict(list1, list2) >>> G
>>> import redis >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>>
def __init__(self, *args, **kwds): self.args = args
def is_numeric(n): if n == 0: return True return False
>>> [list(x) for x in zip(*x)] [['a', 'b
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
import os with open(filename, 'rb') as f: # Do stuff with f
import sys sys.path.append(os.path.abspath(__file__))
>>> import bisect >>> bisect.bisect_right(range(1, 5), 'a') 1
def test_mock_method(self, mock_object): mock_object.return
>>> import socket >>> socket.setdefaultname('localhost','myname')'myname
import os import diff diff = diff.diff(os.listdir(os.path.
>>> import re >>> re.search(r'(?P<name>[a-
>>> a = [1,2,3] >>> a [1, 2, 3, 4] >>> a [1, 2, 3, 4]
import sys sys.path.append("/path/to/ / / /
apache.conf.set_include_path('path/to/apache/conf')
>>> d = {k: sum(v) for k,v in d.items
class A(models.Model): #... class B(models.Model): #...
import itertools with open('file.txt') as f: for line in itertools.is
>>>''.join(map(str, line.split())) 'a'
import sys, time def func(): print 'hello' sys.stdout.write(time
class C(object): def __init__(self, a, b, c, d
>>> l = [1, 2, 3, 4, 5] >>> sorted(l, key=lambda x:
import sys, os, sys, sys, sys, sys, sys, sys, sys
def get_queryset(self): return qs.filter(self.id=self.
df['A'] = df['B'].map(lambda x: x['A'])
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
def get_form_value(self, request, value): if value is None:
with open(filename, 'r') as f: for line in f: if line
>>> import re >>> re.compile(r'(?P<name>[a-
>>> import itertools >>> >>> list(itertools.chain.from_iterable(itertools
import urllib from nltk import token from nltk.tokenize import token from nltk.tokenize import token
''''''''''''''''' '
import IPython.notebook.notebook.notebook.notebook.notebook.notebook.notebook.notebook
import sys sys.path.append(os.path.abspath(__file__))
def __init__(self, *args, **kwds): self.args = args
class User(models.Model): user = models.ForeignKey(User) class Meta:
import csv with open('test.csv', 'rb') as f: reader = csv
>>> from itertools import chain >>> list(chain(zip(a, b), zip(
df['A'] = df['B'] df['B'] = df['C']
def range(start, stop, step, step, step, step, step, step
from django.core.management import setup setup(app=app, *args, **
import cherrypy cherrypy.server.socket.setdefaulttimeout(5) cherrypy.server.socket.
import subprocess subprocess.Popen((' ','my_program.py', 'arg
>>> import re >>> s = "a b c d e f g g g g g
>>> from itertools import chain >>> list(chain(zip(range(6)), repeat(
from django.core.files.static import static_file_path from django.core
import pandas as pd df = pd.DataFrame({'A':['a','b','c
import os with open('test.txt', 'wb') as f: f.write
soup = BeautifulSoup(html) for i in soup.findAll('tr'): if i.
def process(self, data): if data == None: return self.data = data
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
from azure.storage import Queue from azure.storage import Queue from azure.storage import Queue
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
class UserSerializer(serializers.ModelSerializer): class Meta: #... class UserSerializer(
import csv with open('data.csv', 'rb') as csvfile: reader =
>>> d = {k:v for k,v in d.items()} >>> d
import numpy as np a = np.array([[1,2,3],[4,5,6]]) np.
def primes(n): return [n for n in range(n)]
def accumulate(data): return {k:v for k,v in data.iteritems
import os os.system('cls')
import re re.search(r'(?P<video_id>\w+)\
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
>>> import string >>> string.lower() 'a'
import datetime import time timestamp = datetime.datetime.now().strftime("%Y-%m-%
import boto.connect_to_region('us-east-1')
import random def random_number(): return random.randint(0, 100)
import sys import time import sys import time for i in range(30): sys.stdout
>>> import itertools >>> >>> >>> list(itertools.combinations(range(50), 3
import mayavi.zoom_factor as zoom_factor from mayavi.zoom_factor
import boto.s3.connect_to_region(region_name='us-e
//a[contains(@name, 'foo')]
import os os.system('echo'+ os.getcwd())
>>> import re >>> s = 'a string with a string with a string with a string
def create_node(node): if node is None: return node.name return node
import numpy as np import scipy.io.fill_matrix(matrix, fill_value
class A(object): def __init__(self, x): self.x = x
>>> import re >>> re.sub(r'(a)([^']+)', r
class A(object): def __init__(self, a, b): self.a
import sys import mplayer manager = mplayer.Manager() manager.add_app(
class MyString(str): def __init__(self, value): self.value =
import csv with open('file1.csv', 'rb') as f1, open('file
>>> import codecs >>> codecs.decode('utf8','ignore') u'utf8u
import sys def main(): print 'hello' sys.exit(0)
import subprocess subprocess.Popen((' ','my_process.py','my
>>> for i, j in enumerate(list):... print i, j... 1 2
def write(self, line): self.transport.write(line) self.transport
>>> d = {'a':1,'b':2,'c':3,'d':
import csv with open('test.gpx', 'rb') as f: reader =
def connectionMade(self): self.client.connect(host,port)
import pandas as pd import numpy as np df = pd.DataFrame({'A': [1, 2,
import multiprocessing def worker(): p = multiprocessing.Process(target=worker) p.start
def test_input(): global input_file def test_input(): global input_file
db.find({'_id':'my_id'})
import sys, unicodedata, unicodedata, unicodedata, unicodedata, unicodedata, unicodedata, unicodedata, unicodedata
import numpy as np import matplotlib.pyplot as plt data = np.array(data)
def append(self, item): if not isinstance(item, list): return item else
from django.db.models import Q qs = qs.filter(Q(name__
import matplotlib.pyplot as plt from matplotlib.colors import ScalarMappable from matplotlib.colors
>>> import ast >>> ast.literal_eval('a string') array([u'a
>>> import urllib >>> url = 'http://www.example.com/test/test
import os os.path.dirname(os.path.abspath(__file__))
plt.plot(x, y, marker='\t', color='k', linewidth
import numpy as np import matplotlib.pyplot as plt x = np.linspace(0, 1, 1)
>>> import re >>> re.sub(r'(\d+)', r'\1\2',
var Console = new Console; Console.WriteLine("Hello World"); Console.WriteLine
import Image import StringIO from scipy.io import BytesIO from scipy.io import BytesIO from scipy
from google.appengine.ext import webapp from google.appengine.api import query_string
virtualenv-3.4 virtualenv-3.4 virtualenv-3.4 virtualenv-3.4 virtualenv-3.4 virtualenv-3.4
>>> from collections import Counter >>> Counter(list1) Counter({'a': 1, 'b':
class User(Base): __tablename__ = 'users' id = Column(Integer,
import unicodedata def remove_non_ascii_text(text): return unicodedata.normalize('
from rest_framework.decorators import user_passes_test(user_passes_
class A(object): def __init__(self, x): self.x = x
import matplotlib.pyplot as plt from matplotlib.image import Image from matplotlib.image import imshow
>>> d = {'a':1, 'b':2, 'c':3, 'd':
import subprocess subprocess.Popen(("ssh", "username", "password"))
from pyramid.api import route_name from pyramid.api import get_current_route
df1 = df1.set_index('A') df2 = df2.set_
import json json_data = json.load(json_data)
import json with open('file.json') as f: data = json.load(
import os import StringIO import os with open(os.path.join(os.path
import datetime, time def timestamp(timestamp): return datetime.datetime.strptime(timestamp,
>>> import ast >>> ast.literal_eval('a', 'b', 'c')
re.compile(r'(?P<name>[a-z]+)(?
import os os.makedirs(os.path.dirname(__file__))
import xml.etree.ElementTree as ET tree = ET.parse('http://www.
>>> import re >>> s = "a b c d e f g g g g g
>>> import numpy >>> a = numpy.array([1, 2, 3, 4, 5, 6, 7, 8, 9,
def validate(self, value): if isinstance(value, basestring): return value else:
import Image import math def ball(x, y): return math.sqrt(math.
fig = plt.figure() ax = fig.add_subplot(111) ax.plot
def process(self, future): self.future.done_callback(self.future
>>> from sqlite import sqlite_literal_column >>> from sqlite.literal import literal_eval
>>> import itertools >>> >>> >>> list(itertools.chain.from_iterable(it
>>> import xml.etree.ElementTree >>> xml.etree.ElementTree.ElementTree.ElementTree.
>>> l = [u'a', u'b', u'c', u'
self.Bind(wx.EVT_BUTTON, self.on_click)
import datetime datetime.now().replace(day=datetime.now().year, day=
from django.core.files.uploadedfile import SimpleUploadedFile from django.core.
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
>>> d = {k:v for k,v in d.iteritems()} >>> d
from django.core.files import static_files
In [26]: pd.DatetimeIndex(df['date'], format='%Y-%
import os import os os.path.dirname(os.path.abspath(__file__
if any(x)
>>> import os >>> os.stat('foo.png')['f'] >>> os.
import subprocess subprocess.Popen(["php", "my_script.php"])
from win32com.client import Dispatch from win32com.client import GetConsoleWindow
>>> import ast >>> ast.literal_eval('12345') '12345'
plt.pcolor(x,y)
>>> import itertools >>> >>> >>> list(itertools.chain.from_iterable(zip
import datetime, timedelta def is_aware(datetime): return datetime.datetime.now().
def grid(self, row, column): if row == column: return self.grid
import urllib2 from facepy import GraphAPI from facepy.client import GraphAPI from
class UserResource(Resource): class Meta: #other fields def create(self, *
for i in range(n): if n[i] == n[i]: turtle
import csv with open('file.csv', 'rb') as f: reader = csv
>>> import re >>> re.search(r'(a)((a)((a
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
import os os.system('sudo /path/to/your/application.html
>>> import re >>> re.compile(r'((\d+)') >>> re.
def __init__(self, name): self.name = name def __eq__(self
from django.contrib.auth.models import User User.objects.filter(username__
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
from google.appengine.ext import ndb from google.appengine.ext import datastore from google
>>> d = {k:v for k,v in d.iteritems()} >>> d
>>> d = [{'a':1,'b':2,'c':3,'d':
import subprocess subprocess.Popen([" ", " ", " ", " ", "
def f(x): return x + x def f(x): return x + x
import os import os import os with open(os.path.join(os.path
import numpy as np import scipy.stats as stats import scipy.stats as stats import scipy
from pymongo import MongoClient client = MongoClient() client.my_document.sort(key=
>>> d = {k:v for k,v in d.iteritems()} >>> d
In [11]: df.concat([df.iloc[i,j] for i
>>> import re >>> re.compile(r'(?P<name>[a-
class A(object): def __init__(self, x, y): self.x
class User(models.Model): user = models.ForeignKey(User) #...
>>> a = [1,2,3] >>> b = a >>> b [1, 2, 3, 3, 4, 5]
PyObject *func = PyObject_CallObject("func", "foo", "bar", "
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for d in d:
class A(object): def __init__(self, x): self.x = x
max(d.items(), key=lambda x: max(d[x], key
import json data = json.dumps(data)
>>> d = {k:v for k,v in d.items()} >>> d
>>> a = [1,2,3] >>> b = a >>> b [1, 2, 3] >>> a [1,
from django.core.management import setup setup(app_name='myapp', app_
import sys, os, sys, sys, sys, sys, sys, sys, sys
>>> a = [1,2,3,4,5,6] >>> a [1, 2, 3, 4, 5] >>> a
>>> [x for x in range(len(x)+1)] [1, 2, 3, 4,
def generator(x): return x + 1 def next_generator(x): return next
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
<script> $(function() { var template = $("#my_template").html(); var
import email.utils.send_from_email(email.from_email(email
import os import sys import os import sys import os import sys, os, sys, os
import base64 blob = base64.b64decode(blob.read())
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
import json import collections def shuffled(data): return [k for k,v in data
import os import json from google.appengine.api import client from google.appengine.auth
class User(models.Model): user = models.ForeignKey(User) class Meta:
$date = dateutil.parser_parse('2014-02', $date);
def calculate(x): global x x = x + 1 return x
<table> <tr> <td> <td> <a> <b>
def check_view(request): if request.method == 'POST': return True return
select * from table where id = %s and name = %s and age = %
import datetime.datetime.now().strftime("%Y-%m-%d")
import datetime, timedelta delta = datetime.timedelta(days=7) delta = delta - timedelta
if key in my_dict: print("ok")
from reportlab.pdflab import PdfPages from reportlab.pdflab.pdflab
{% for item in data %} {{ item }} {% endfor %}
for row in soup.find_all('tr'): print row['name']
>>> import string >>> string.split(' ') ['a', 'b', 'c',
>>> a = 'a' >>> b = 'b' >>> a == b True >>>
def do_something(): while True: if not input("Do you want to continue?
>>> d = {k:v for k,v in d.items()} >>> d
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
>>> d = {k: sum(v) for k,v in d.items
>>> a = [1, 2, 3] >>> b = a >>> b.append(4) >>> b [1,
import re with open('file.txt', 'r') as f: for line in
def __init__(self, *args, **kwds): self.data = data
class MyHandler(webapp2.RequestHandler): def post(self): # Do stuff self.
class UserResource(Resource): #... def get(self, bundle): #... #
>>> import re >>> re.sub(r'(?<=\))', r'\\
import json json_data = json.load(json_data) for tweet in json
from django.core.password_hash import hash_password_hash from django.core
>>> import gc >>> gc.get_objects() [('a', 'b'), ('
import os import os for root, dirs, files in os.walk(os.path
>>> a = [[1,2,3],[4,5,6],[7,8,9]] >>> b = [[1,2,3
def compare(a, b): return min(a, b) == min(a
import struct import struct data = struct.pack('I', b'\x00\x00\
>>> import re >>> word = 'a' >>> re.search(r'(a
def main(): for i in range(n): if n%i == 0: return i
>>> import lua >>> lua.parse_string('foo') >>> lua.
import itertools def combinations(n): return itertools.combinations(n, n)
>>> re.sub(r'(a)([^']+)', r'\1\1\
>>> [x + [y] for x, y in zip(a, b)]
from django.db.models import Sum from django.utils.date_range import datetime
def validate_func(func): def wrapper(*args): if not args: return func
>>> a = [1,2,3] >>> b = [1,2,3] >>> a.append(b
>>> from collections import OrderedDict >>> d = OrderedDict() >>> d['a'] = 'b
>>> import decimal >>> decimal.Decimal('0.1') Decimal('0.1')
>>> re.compile(r'(?P<name>[a-z]+)
def queue(queue, timeout): if queue.closed: queue.acquire() queue.
def edit(self, index, item): if index == 0: self.listWidget.
tkMessageBox.init_with_font(None, 'My font', (u'
import gtk import gtk import gtk import os def disable_cell_ editing(event): if
import urllib2 url = 'http://www.example.com/my/url'
import sys, os def disable_welcome_message(self): print 'Welcome!' sys
scrapy.spider.spider_class('scrapy.spider.spider.spider_class')
if all(x in y for x, y in zip(a, b))
>>> re.compile(r'(?P<name>[a-z]+)
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
class A(object): def __init__(self, x): self.x = x
for td in response.xpath('//td[@align="right"]/text()'): print
import numpy as np import scipy.stats as ss import scipy.stats as ss import scipy
>>> df.groupby('id').size().reset_index().values >>> df.groupby
>>> import re >>> re.sub(r'(a)', r'(a
class A(object): def __init__(self, *args, **kwds):
import xml.etree.ElementTree as ElementTree tree = ElementTree.parse('test.xml')
>>> a = [1, 2, 3] >>> a [1, 2, 3] >>> a [1, 2, 3]
import numpy as np import scipy.io.matrix as matrix matrix = np.array(
import subprocess subprocess.Popen('echo hello world', shell=True)
>>> type(type(str)) <type'str'> >>> type(str) <
import numpy as np import scipy.io.wavfile as wave import numpy as np #
>>> lst = ['a', 'b', 'c', 'd', 'e',
>>> import re >>> re.compile(r'(?<=\s)\s*(?
import struct def convert_int(data): return struct.unpack('I', data)[0]
df.update(df.index, df.value)
>>> d = {k:v for k,v in d.items()} >>> d
math.sqrt(math.sqrt(math.sqrt(math.sqrt(math.
>>> import collections >>> l = [["a", "b", "c", "d
import pandas as pd df = pd.DataFrame({'A': [1, 2, 3], 'B':
import subprocess subprocess.Popen(' ', shell=True)
import random a = range(6) b = random.randint(0,3) c = a +
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
import os with open('file.txt', 'r') as f: for line in
def __init__(self, *args, **kwds): self.kwds =
import math def largestPowerPowerOfTwo(n): if n == 2: return 1 elif
def create_ploneform(self, *args, **kwargs): if self.
class A(object): def __init__(self, value): self.value = value
import sys, time def clear(): sys.clear() time.sleep(1) sys.clear
class MyForm(forms.Form): def __init__(self, *args, **
>>> [tuple(x) for x in zip(a, b)] [['a',
the the the the the the the the the the the the the the the the the the
>>> import itertools >>> >>> >>> [i for i, j in itertools.combinations(a
import numpy as np import itertools max_value = max(itertools.combinations(a
import numpy as np import tempfile with open('test.csv', 'wb') as f
import pickle with open('my.pickle', 'rb') as f: pickle.dump
import urllib from bs4 import BeautifulSoup soup = BeautifulSoup(urllib.urlopen(url)) for
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
import pytables.tables.TableDefDef as TableDef def shape(self, row
class A(object): def __init__(self, x): self.x = x
from django.db.models import Q, Q, Q, Q, Q, Q
import os os.environ['PYTHONPATH']
>>> import ast >>> ast.literal_eval('intid(intid(intid
{% for key in my_dict %} {{ key }} {% endfor %}
>>> a = [1,2,3] >>> a[a[b]] = a[b[
def create_related_objects(self, *args, **kw): #... return
import itertools import numpy as np from itertools import combinations, combinations, combinations, combinations, combinations
def main(): global f f = open('f.txt', 'w') f.
import os import os for root, dirs, files in os.walk(root): for
def replace_cell(cell, cell): cell = cell.replace(cell, '
import os os.system('adb reboot')
import subprocess p = subprocess.Popen(args, stdout=subprocess.PIPE) while True
import httplib def close(self): self.client.close()
>>> from collections import Counter >>> Counter(d.values()) Counter({'a': 1, '
>>> import ast >>> ast.literal_eval('['a', 'b', 'c
driver.find_element_by_id("next_button")
import sys, os def run_command(command): sys.stdout.write(command
import numpy as np import scipy.stats as stats stats stats.logistic_prob(
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
import sys def remove_c_function(c_function): if c_function is
>>> import ast >>> ast.literal_eval('['a','b','c','d
>>> import re >>> s = 'hello world' >>> re.sub(r'(
import os os.environ['HOME'] = os.environ['HOME']
def count(s): return len(s) def count_count(s): return
import re def replace(match, *args, **kw): if match: return match
import requests r = requests.get(url, headers={'User-Agent': 'Mozilla
>>> from datetime import datetime >>> datetime.strptime('2015-02-13', '%m/%d
>>> import unicodedata >>> unicodedata.normalize('NFD', 'utf-8') u'NFD
import time def my_time(): global interval interval = time.time() interval.append
class BaseForm(forms.Form): class Meta: proxy = True class Meta: proxy
import numpy as np import scipy.stats as stats def f(x): return stats.
>>> import operator >>> a = [u'a', u'b', u'c
import sys, collections def process_data(data): for key, value in data.
import ast with open('file.txt') as f: for line in f: if
>>> import itertools >>> >>> [i for i,j in itertools.combinations(data,
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
import yaml yaml_file = yaml.load(yaml_file)
ax.set_xscale('log') ax.set_yscale('log')
>>> import urllib >>> >>> urllib.quote('foo', safe=True) 'foo'
SELECT * FROM table WHERE (SELECT * FROM table)
>>> a = [1,2,3] >>> b = [1,2,3] >>> a in b True >>>
if isinstance(obj, int): # do stuff
class A(object): def __init__(self, a, b): self.a
>>> import re >>> re.compile(r'(?P<name>[a-
from datetime import datetime from django.db.models import Q qs = qs.filter(
>>> import re >>> l = ['a', 'b', 'c', 'd',
>>> import itertools >>> >>> >>> [i for i in itertools.combinations(a, b
import sys import time for i in range(50): sys.stdout.write(str
def __init__(self, *args, **kwds): super(MyDjangoModel
for line in line.split(): if line.strip(): line.remove()
>>> a = [1, 2, 3, 4] >>> b = a >>> b [1, 2, 3, 4] >>>
<script> var plone = new Plone(); plone.add(plone
import subprocess subprocess.Popen((' ', 'foo.py', 'bar.py
class Turtle(object): def __init__(self, *args, **kwds
import csv with open('test.csv', 'rb') as f: reader = csv
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
class Test(object): def __init__(self, *args, **kwds):
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
import Image import os from PIL import Image from PIL import Image from PIL import Image from PIL
>>> import binascii >>> binascii.hexlify(u'12345') '12345'
import maya.cmds.JointJointJointJointJointJointJointJointJointJointJointJoint
>>> import re >>> re.findall(r'(?P<name>[a-
from django.contrib.auth.models import User from django.contrib.auth.models
import numpy as np import scipy.stats as stats import numpy as np mean = np.
import os import os for i in range(100): os.rename(os.listdir(
if ( ( ( ( ( ( ( ( ( ( ( ( [ [ [ [ [
if (data['id'] == 'test': print("Success") else: print("
def make_big_big_big_big_big_big_big_big
df.drop(df.index, axis=1)
df.cut(df['A'], df['B'], bins=df['A'],
while True: if not input("Please enter a number: ") break print("Please enter
from tensorflow.core.layers import DenseLayer from tensorflow.core.layers import DenseLayer
import urllib2 url = 'http://www.example.com/subdomain/sub
cursor.execute("INSERT INTO test (name) VALUES (%s)" % (name
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
>>> l = [1, 2, 3, 4, 5] >>> [len(x) for x in l
>>> [int(x) for x in mylist] [(1, 2), (3, 4), (5, 6
class User(models.Model): user = models.CharField(max_length=200)
>>> l = [(1,2), (3,4), (4,5)] >>> [l[i:
def isalpha(s): return s.lower() == 'alpha'
In [1]: stats.friedmm.sfriedm.sfriedmm
def is_truth(n): return n == True
def next_generator(generator): for i in range(len(generator)-1):
import xml.dom.minidom xml = xml.dom.minidom.parseString
import os os.system(' /path/to/my/program.py')
>>> d = {u'a': u'a', u'b': u'
class A(object): def __init__(self, x, y): self.x
if request.POST.get('user_id') == user_id: # Do
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
>>> import itertools >>> list(itertools.chain.from_iterable(itertools.
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
import mechanize br = mechanize.Browser() br.open("http://www.
import pandas as pd import numpy as np df = pd.DataFrame({'A':['a
import os import sys, time def daemon_handler(event): print 'Daemon!' sys
for i in range(n): print(i)
>>> re.sub(r'(a)(?=[a-z])', r
>>> d = {('a', 'b', 'c', 'd', 'e
import os import os import shutil for root, dirs, files in os.walk(root
import xl.open_workbook()
>>> import binascii >>> binascii.hexlify('abc') '0x01'
>>> sorted(mylist, key=lambda x: int(x.split('.')
import sys, os, sys, psutil, psutil, psutil, os, sys, sys
from django.core.management import setup setup(app=app, *args, **
import csv with open(filename, 'rb') as f: reader = csv.Dict
from jinja2 import Template engine = TemplateEngine(html_source=html_source)
>>> import collections >>> a = collections.Counter(a) >>> a.most_common
>>> re.search(r'(?P<name>[a-z]+)
import xlrd.open_workbook('test.xls') for row in xlrd
>>> d = {u'a': u'a', u'b': u'
import sys sys.stdout = open('/tmp/log.log', 'w') sys
def print_function(func): print 'function is called' return func print_function
import os import json with open('test.json') as f1, open('test2.
def main(): print("Hello, world!") main()
>>> a = [('a', 'b'), ('c', 'd'), ('d',
from django.db.models import Q from django.shortcuts import redirect from django.
df.where(df.A.isin(df.B.values), df.
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
def test_func(a, b): return a * b
<script> $(document).ready(function() { $.each(function(data)
import sys, time def run_func(): print 'Running function' time.sleep(1)
pip install pip
import threading def worker(): global db db = db.connect() db.close() def
import bisect def overlap(start, stop): if start > stop: return True return False
self.popup.setFocus()
import math angle = math.pi * math.pi * math.pi * math.
In [26]: df.to_datetime(df['date']).astype(datetime)
>>> a = [1,2,3] >>> b = [1,2,3] >>> a + b [1, 2,
>>> re.compile(r'(a)((a)((a)((a
>>> import re >>> s = 'a b c d e f g g g g g
import random import itertools with open('file.txt') as f: for line in f
import matplotlib.pyplot as plt plt.plot(x,y) plt.show()
import matplotlib.pyplot as plt from matplotlib.patches import PatchCollection from matplotlib.patches import
>>> re.findall(r'(?P<name>[a-z]+)
def change(x): return x + x
def with_value(self, value): if value is None: value = self.
import os def re_code(path): return os.path.abspath(path)
import inspect def inspect_module(module): return inspect.getsourcefile(module)
import subprocess subprocess.Popen('php', shell=True)
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
pip install -r requirements.txt
import json with open('data.json', 'rb') as f: data = json
pip install django
import os import sys for root, dirs, files in os.walk(os.path
import os def is_within_path(path): try: return os.path.
var form = new Form(); form.Control = new FormControl(); form.Control.
import random def hex_color(color): return random.choice(color)
// comment comment comment comment comment comment comment comment comment comment comment comment comment comment comment comment comment
from scrapy.spider import Spider from scrapy.spider import Spider from scrapy.spider import Spider
import subprocess p = subprocess.Popen(('foo', 'bar'), stdout=subprocess.
import subprocess subprocess.Popen(('echo', 'test.py', 'test.py
import sys, os, sys, sys, sys, sys, sys, sys, sys
def palindrome(string): if string.startswith("abcdef"): return True return False
>>> import ctypes >>> class A(object):... pass... >>> A.A = A
>>> import csv >>> data = [u'a', u'b', u'c
>>> a = [1, 2, 3] >>> b = a >>> a [1, 2, 3]
>>> d = {k:v for k,v in d.iteritems()} >>> d
f = open('file.txt', 'r') f.seek(0) f.readline
>>> import itertools >>> >>> l = [(1,2), (3,4), (5,6), (7,
>>> a = np.array([1, 2, 3, 4]) >>> a array([1, 2, 3, 4
>>> from operator import itemgetter >>> lst = [('a', 'b'), ('a', '
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
>>> from collections import Counter >>> Counter(list1) Counter({'a': 1, 'b':
>>> [d['name'] for d in [{'name': 'Jake', 'age
{% if user.is_active %} {% if user.is_active %} {% endif
py2exe.py2exe.py2exe.py2exe.py2
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
self.Bind(wx.EVT_BUTTON, self.on_button) def
import subprocess subprocess.Popen(('echo', 'test.py', 'test.py
import subprocess p = subprocess.Popen(('foo', 'bar'), stdin=subprocess.
import numpy as np import matplotlib.pyplot as plt from io import BytesIO from io import StringIO
def convert(s): if s == '': return s else: return convert(s
In [1]: np.where(np.array([1,2,3]), np.array([
import os import json from google.appengine.api import wavelet from google.appengine.
if not 'name' in data: print 'You' else: print 'You'
def to_dict(data): return {k:v for k,v in data
import sys, math def blackjack(player): if player == '': sys.exit
import cv2 cv2.SetWindowResolution(cv2.WINDOW_SIZE, cv2.WINDOW
import json json_data = json.dumps(data)
def is_gauss_waypoint(x, y): if x > y:
>>> import unicodedata >>> unicodedata.normalize('NFD', 'utf-8') u'NFD
>>> sorted(sorted(a, key=lambda x: x[1], reverse=True),
$ pip install --egg=foo
def cleanup(self): self.finish()
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
import re def find_non_matching_key(ip): return [int(x
df.to_csv('test.csv', index_col='id', index_
from sqlalchemy import Column, Integer, String from sqlalchemy.orm import db db.session =
from django.db import connection connection = connection.connection() cursor = connection.cursor()
class A(object): def __init__(self, x): self.x = x
>>> import itertools >>> >>> >>> list(itertools.chain.from_iterable(it
import win32com.client win32com.client.Dispatch('Excel.Application')
import subprocess subprocess.Popen('echo', shell=True)
import os import sys, os os.path.dirname(sys.argv[0])
import random def random_table(n): # Random table for i in range(n
>>> df.groupby('A').size().groupby('B').count() 1
sns.set_k_palette(palette='red', alpha=0.5)
import sys, os, sys, time def read_file(filename): with open(
>>> for i in range(len(a)):... print a[i]... 1
>>> import numpy as np >>> np.array([True, True, False, True,
import os os.path.join(os.path.dirname(__file__), '
import celery from collections import Counter from itertools import chain from itertools import chain from itertools import chain
import rpy2.Canvas(rpy2.Canvas(rpy2.Canvas(rpy
>>> import configparser >>> config = configparser.ConfigParser() >>> config.readfp(open('
import sys, bytesio, tokenize def tokenize(string): for line in sys.stdin
import itertools def sum_numbers(file): numbers = [] while True: line = file
>>> import re >>> re.findall(r'(a)([^']+)', '
sns.heatmap(x, y, cmap=plt.cm.StrN
>>> import re >>> re.sub(r'(?<=\s)', r'
>>> import ast >>> ast.literal_eval('['a','b','c','d
import pandas as pd import csv with open('data.csv', 'rb') as f
import csv with open('data.csv', 'rb') as csvfile: reader =
if all(x in y for x in a): print("ok")
grunt.initConfig({ 'default': { 'default': { 'default': { '
def __init__(self, parent, *args, **kwds): self.parent
print("Hello, world!")
def queue(self): while True: queue.put(self.queue())
from tornado.gen import AsyncHTTPServer from tornado.gen import IOLoop from tornado.gen
import zipfile import urllib url = 'http://www.example.com/zipfile.
import subprocess subprocess.Popen('ssh', stdout=subprocess.PIPE, stderr=subprocess.
import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm from scipy
import urllib urllib.urlretrieve('http://www.example.com/images/test
def read_int(self, data): return data.index(self.read(
>>> import itertools >>> >>> list(itertools.product(*g)) [(1, 2), (3,
from django.core.cache import cache def get_last_url(request): return
>>> my_list = [1,2,3] >>> my_set = {*my_list
import subprocess subprocess.Popen('play', stdout=subprocess.PIPE)
def func(d): if d is None: d = {} return d.get(
def get_data(self, request): data = request.POST.get('data
>>> import re >>> re.search(r'(a)((a)((a
>>> from xml.dom import minidom >>> dom = minidom.parse('test.xml')
import threading def run_thread(target): # Do stuff here def run_thread(
import os os.system(' /path/to/ / /path/
pip install --egg=egg
Clock.schedule_interval(self.clock, self.clock)
import zipfile from StringIO import StringIO from StringIO import StringIO from StringIO import StringIO from StringIO import StringIO
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
>>> from sympy import Symbol >>> Symbol('x') Symbol('x')
def main(): global global global global global global global global global global global global global global global
>>> int(u'0x', 16) == 1 >>> int(u'0
class A(object): def __init__(self, x): self.x = x
>>> class A(object):... def __init__(self, x):... self.
from django.core.urlresolvers import reverse from django.core.urlresolvers import reverse
for link in soup.find_all('a', href=True): print link.
ax.set_xticklabels(list(ax.get_xticklabels()[:3
import threading def worker(self): print 'Worker created!' self.threads = [] def
self.graphicsView.viewport().viewport().viewport().viewport().viewport().viewport().viewport
def func(a, b): return a + b def func_a(a,
class A(object): @classmethod def __new__(cls, name, bases,
import xml.etree.ElementTree as ElementTree tree = ElementTree.parse('test.xml')
import os import gif from PIL import Image from PIL import Image from PIL import Image from PIL
>>> import re >>> re.split(r'(?P<name>[a-
def dispatch(self, request, *args, **kw): if request.method ==
from haystack.db import Q, Q, Q, Q, Q, Q,
def get_user(): global user user = user_id if user is None: user
>>> a = [1,2,3,4,5] >>> a.append(4) >>> a [1, 2, 3, 4, 5]
import csv with open('data.csv', 'rb') as csvfile: reader =
>>> np.where(np.array([True,False,True,True,True
def remove_duplicates(list_of_tuples): for t in list_of_
>>> import struct >>> struct.unpack_from('I', struct.pack_from('
def fiedler(x): return x * x + 1
import threading def worker(): print 'Worker' def run_thread(target): # Do
import os import os import os os.system("namelist")
import csv with open('file.csv', 'rb') as f: reader = csv
ax.xaxis.set_major_formatter(matplotlib.ticker.NullFormatter())
from lxml import etree doc = etree.parse('test.xml') for node in doc
if isinstance(obj, int): # Do something else
class User(models.Model): user = models.ForeignKey(User) #... class
from blogs import BlogEntry from blogs.models import BlogEntry from blogs.
>>> import re >>> re.findall(r'(?P<url>.*)',
>>> import ast >>> ast.literal_eval('foo,bar,baz,qux
def __init__(self, *args, **kwargs): super(MyForm, self
>>> d = { 'a':1, 'b':2, 'c':3, 'd
$.ajax({ type: 'POST', url: '/form/', data: { 'form
from django.db import connection from django.test import TestCase from django.test.test
def foo(n, *args): if n == 0: return... return [foo(
df1 = df1.merge(df2, on='id', how='outer') df
def login_required(request): if request.user.is_authenticated(): return True
import subprocess subprocess.call([" ", " ", " ", " ", "
>>> float('0.1') 0.33333333 >>> float('0.1') 0.33333333
import os for root, dirnames, filenames in os.walk(path): for filename in
pygame.transform.scale(screen, (100,100))
import sys, gpio, gpio.gpio.gpio.gpio.
>>> [x for x in range(len(x)+1) if x not in empty
>>> import string >>> string = 'a' >>> string.replace(string, '').
import wnck window = wnck.Window() window.focus() window.
from rbin import Graph from rbin import Graph from rbin import Graph from rbin
import json json_data = json.load(json_data)
cursor.execute(sql)
import os os.system('start')
>>> import re >>> re.compile(r'(?P<a>[a-
import Tkinter root = Tkinter.Tk() root.bind('<Return>', lambda: self.
def f(x): return x + 1 def f(x): return x + 1
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
>>> a = [1, 2, 3, 4, 5] >>> a.append(4) >>> a [1, 2, 3,
var app = new ScriptEngine(); var script = script.Execute(".exe");
>>> import string >>> string = "hello" >>> string.strip() 'hello'
df.shift(start_index=start_index, axis=1)
>>> a = [1, 2, 3, 4] >>> b = a >>> b [1, 2, 3, 4] >>>
df['A'] = df['B'].map(lambda x: x.split('
import sys, os def f(): print 'hello' sys.exit(0)
def create_gui(): if self.parent is None: self.parent = self.
from django.db.models import Q q = Q(title__icontains=
def create_list(list_of_vars): #... for i in range(
>>> a = [1,2,3] >>> b = a >>> b [1, 2, 3]
df.groupby('Date')['Value'].plot(kind='bar', stacked=True
>>> import csv >>> data = [["a", "b", "c", "d
import sys, re def ignore_user_input(input_string): try: user
import os import os with open(filename, 'rb') as f: for line in
import sys sys.path.append(os.path.abspath(__file__))
import os from pypdf import PdfPages from pypdf import PdfPages from pypdf import
import os if os.path.exists("dev/sda"): # do stuff
def join(self, iterable): if isinstance(iterable, list): return list(iterable
def curve_fit(x, y): if x == y: return 1 else:
df['A'] = df['B'].map(lambda x: x['A'].
if random.randint(0,100) == 0: # do stuff
class MyTextField(models.Model): #... class Meta: proxy = True
def get_name(name): return name
import re with open('file.txt', 'r') as f: for line in
def __init__(self, *args, **kwds): self.kwds =
import ssl ssl_cert = ssl.SSLSSLv3_SSL('http://www.
yield yield yield yield yield yield yield yield yield yield yield yield yield yield yield yield yield yield
for i in range(n): for j in range(n): for k in range
>>> import re >>> s = 'a,b,c,d,e,f
import json with open('data.json') as json_file: data = json.
from django.contrib.admin.site import admin from django.core.files.uploaded
from flask import Flask app = Flask(__name__, static_url_path='/path/
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
import matplotlib.pyplot as plt plt.plot(x, y) plt.show()
>>> from collections import OrderedDict >>> >>> OrderedDict([('a', 'b'), ('a',
import socket def queue(socket): while True: data = socket.recv(1024) if
def run_function(func): def wrapper(*args, **kwds): func(*
import sys, os, sys, sys, sys, sys, sys, sys, sys
def get_extra_fields(self, request): if request.GET.get('
min(a, b)
import os import sys, os def is_server_status(host): return os.
import numpy as np import scipy.stats as stats stats stats.stats.stats.stats
import os import sys, os, os, os, os, os, os, os
def recursive_func(x): if x == 0: return x return recursive_func
df['A'] == df['B'].astype(str)
>>> import re >>> s = "hello there is a string with the middle of the string
from pyspark.sql import udf from pyspark.sql.functions import udf from pyspark.sql
import urllib url = 'http://www.example.com/login' req = urllib
def key(event): if event.type == pygame.KEYDOWN: # Do stuff
def __init__(self, *args, **kwds): self.kwds =
>>> a = [[1,2,3],[4,5,6],[7,8,9]] >>> b = [[1,2,3],[
def __init__(self, *args, **kwds): self.kwds =
>>> l = [1, 2, 3, 4, 5] >>> sorted(l, key=lambda x:
>>> import itertools >>> list(itertools.chain.from_iterable(itertools.
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
def __init__(self, *args, **kwargs): super(UserForm, self
from PyQt4.QtCore import QText, QTextObject, QTextObject, QText
from gevent import monkey monkey.patch_all(app=app)
<script> $(function() { $('table.delete').remove(); }); </script>
def max_int(n): if n == 0: return n return max_int(
import csv with open('data.csv', 'wb') as f: writer = csv
import numpy as np import scipy.io.savesavesavesavesavesavesavesavesave
import numpy as np from scipy.misc import imread, imread from scipy.misc
>>> import inspect >>> inspect.getsourcefile(inspect.currentframe().f_code
import os import subprocess p = subprocess.Popen(("ls", "r"), stdout=
>>> import itertools >>> >>> [i for i in itertools.combinations(a, repeat=
if required_var is None: # do stuff here
def filter_by_name(name, value): if name == 'name': return
>>> import pyobject >>> pyobject.get_property('x', 'y') '
import sys, subprocess, os, sys, sys, time def parse_command(command
>>> import urllib >>> >>> url = 'http://www.example.com/page.
def fizz(x): if x < 0: return x return fizz(x)
>>> from itertools import izip >>> from itertools import izip >>> >>> from itertools import izip >>> >>>
import os import sys def get_memory_usage(): return os.stat(sys.
import os import sys import urllib import urllib from libtorrent import torrent def getPorrentSize(
class User(models.Model): user = models.ForeignKey(User) class Meta:
def get_profile(request, profile_id): profile_id = profile_id
import sys, os, sys, sys, sys, sys, sys, sys, sys
>>> import re >>> s = "hello world" >>> re.sub(r'(
import itertools import operator def combinations(bins): return itertools.combinations(bins, 2)
>>> from collections import defaultdict >>> d = defaultdict(list) >>> for constraint in d:
df.to_excel(df['A'], index=['A'])
:py3 :py3 :py3 :py3 :py3 :py3
import os with open('file.fasta', 'rb') as f: for line
>>> l = [1, 2, 3, 4, 5] >>> [l[i:i+4] for
class A(object): def __init__(self, a, b): self.a
class A(object): def __init__(self, a, b): self.a
>>> import inspect >>> inspect.getsourcefile(inspect.currentframe())'my_
import os for line in os.listdir(path): if line.startswith(''): #
>>> isinstance(a, list) True >>> isinstance(a, list) False >>> isinstance
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
def is_letter(s): if s == '': return True return False
cursor.execute("INSERT INTO test(name) VALUES (%s)" % (name
with open('file.txt', 'r') as f: for line in f:
fig = mpld3.Canvas(fig) fig.add_artist(bar) fig
>>> d = {u'a': u'a', u'b': u'
from fabric.api import task def task(): return task()
>>> print('{:>2}'.format(x)) 'a b c d e
>>> d = {'a':1,'b':2,'c':3,'d':
import Image import numpy as np img = Image.open('test.jpg') img.
>>> from math import sqrt >>> sqrt(math.sqrt(math.sqrt(math.
import socket hostnames = [host.gethostname() for host in host.get
import pycurl.HTTPClient from pycurl.url import URL url = URL(url
>>> import decimal >>> decimal.Decimal('0.1') Decimal('0.1')
>>> from bs4 import BeautifulSoup >>> soup = BeautifulSoup(html) >>> soup.find('
import os os.system('cls')
def __init__(self, *args, **kwds): self.args = args
>>> a = [1,2,3] >>> b = [1,2,3] >>> a.remove(b
query = "SELECT * FROM table WHERE id IN (SELECT id FROM table WHERE id IN
boost:: :: :: :: :: :: :: :: ::
>>> d = {'a':1, 'b':2, 'c':3, 'd':
from multiprocessing import Process, Pipe def child(p): p.start() p.join
def get(self, request): if request.method == 'POST': return HttpResponse(
def isgenerator(f): return isinstance(f,generator)
import os for root, dirs, files in os.walk(root): for f in
def test_patch_random(patch_random, patch_random, patch_random
from flask import Flask from flask.ext.session import Session from flask.ext.session
var win = new Win32Window(); win.Bind(wx.EVT_LEFT
def sum_integers(n): if n == 0: return 1 return n - 1
>>> import lxml.html >>> tree = lxml.html.parse('http://www.
import os import csv with open('test.csv', 'rb') as f: reader
import numpy as np from scipy.spatial import gridsearch, grid_search, grid_
import cv2 cv2.imshow("test.jpg",img)
def f(x): return x + y def f2(x): return x + y
df['C'] = df['A'].apply(lambda x: x['B'].
>>> class A(object):... pass... >>> A.sort() >>> A.sort
from django.db.models import Q, Q, Q, Q, Q, Q
def create_user(user): user.id = user.id user.save()
>>> from collections import OrderedDict >>> d = OrderedDict() >>> for key, value in d.
>>> re.compile(r'(?P<name>[a-z]+)
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
>>> s = "Hello, world" >>> s.insert(0, s[0]) >>> s =
import os with open('file.txt', 'r') as f: for line in
SELECT * FROM table WHERE id IN (SELECT id FROM table WHERE id IN (SELECT id
import numpy as np import scipy.linalg.diag diagonal = np.diag(np.
import sys reload(sys.stdin)
import os import json with open(os.path.join(os.path.dirname
pip install py2k
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
def count(num): if num == 0: return 1 return count(num)
>>> import ast >>> ast.literal_eval('[' +'+'' + '
def create_command(): command = command.split() command = command[0] command = command
import os import pandas as pd import numpy as np import pandas as pd df = pd.
if (user.id == user.id) { // do stuff }
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
self.richtext.SetBackgroundColour(self.richtext.
>>> from itertools import chain >>> >>> >>> list(chain(tuple(x) for x
>>> from collections import Counter >>> Counter(x) Counter({'a': 1, 'b':
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
def change_user(request): user = User.query.filter_by(user
from scrapy import Request from scrapy.json import json from scrapy.spider import Spider from scrapy
>>> from operator import itemgetter >>> >>> lst = [('a', 'b'), ('a',
test_test_test_test_test_test_test_test_test_
class A(object): def __init__(self, a, b): self.a
from django.contrib.auth.views import login_required from django.contrib.auth
>>> import struct >>> struct.unpack('>BBBBBBBBBBBBBBBBBB
from collections import defaultdict from operator import itemgetter from operator import itemgetter from operator import itemgetter from operator
import subprocess subprocess.Popen( [" ", "foo", "bar"], stdout=subprocess
import sys import subprocess subprocess.Popen(["ls", "-l"])
import os import sys import tempfile import os import tempfile import os import tempfile with tempfile.Named
import sys, os, sys, sys, sys, sys, sys, sys, sys
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
import itertools for i in itertools.combinations(range(n), n): print(i
import csv with open('data.csv', 'rb') as f: reader = csv
import subprocess subprocess.Popen(["svn", "foo", "bar"])
>>> import ast >>> ast.literal_eval('['a','b','c','d
import p12 from Crypto import PKCS1_v1_v1_v1_v1_v1_
import csv with open('input.csv', 'rb') as f: reader = csv
%include "vector.h" %include "vector.h" %include "vector
import sound sound.Sound('sound.wav', sound.RATE * 2)
In [1]: import numpy as np In [2]: np.array([1,2,3]) Out
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
import numpy as np import random seed = random.seed()
>>> int(1234567890) + 1 >>> int(1234567890) + 1 >>> int
>>> [x.split() for x in re.finditer(r'(a
>>> import re >>> s = 'a b c d e f g g g h h
from django.core.files.uploadedfile import SimpleUploadedFile from django.core.
import sys for line in sys.stdin: if line.startswith('a'): print line
>>> [x for x in list_of_lists if x[0] not in ['a
import os os.environ['SCRIPT_NAME'] ='myscript.js'
>>> d = {k:v for k,v in d.items()} >>> d
def url_to_url(self, url): return url.replace(url.
def is_even(input_file): if input_file not in (input_
from django.db.models import Q, Q, Q, Q, Q, Q
for key, value in d.items(): if key not in ['a', 'b
>>> from ast import literal_eval >>> literal_eval(tuple(x.strip()
def test_fixture(self): #... def test_fixture(self): #...
>>> import ast >>> ast.literal_eval('['a', 'b', 'c
import subprocess subprocess.Popen('z39.50', shell=True)
>>> re.search(r'(a)((a)((a)((a
import subprocess p = subprocess.Popen(('foo', 'bar'), stdout=subprocess.
def recursive_function(n): if n == 0: return True return recursive_function(
import os import tempfile import os import os import tempfile def temp_dir(dir): temp
def get_checkbox_values(self, checkbox): return [Checkbox(self, value
def foo(a, b): if a: return a + b return a, b
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
def perm_permutations(perm, n): return [perm[i:i+
manage.py runserver 0.0.0.0:8000
>>> a = [[1,2,3],[4,5,6],[7,8,9]] >>> b = [[1,2,3],[
def ok(self): self.text.bind('<Return>', self.text.bind
from mock import patch from mock import patch from mock import patch from mock import patch from mock
def parse(self, response): for link in response.xpath('//a/@href'):
from Crypto import RSA from Crypto import Random from Crypto import PKCS1_v1_v1_v
import os for root, dirs, files in os.walk(root): print(root
import os import os for root, dirs, files in os.walk(root): for
>>> [x for x in list_of_lists if x[0] == 'a']
def update_variable(): global variable variable = 1 def update_variable(): global variable variable
import subprocess p = subprocess.Popen(('foo', 'bar'), stdout=subprocess.
>>> d = {k:v for k,v in d.iteritems()} >>> d
>>> re.sub(r'(?P<name>[a-z]+)
>>> from sympy import Symbol >>> Symbol('x') >>> Symbol('x') >>> Symbol('
# Create a list of strings that you want to plot in your example. # Create a
def get_index(self, item): return self.index(item)
import multiprocessing def worker(n): if n == 0: return n return multiprocessing.Process(
ax.set_aspect('equal')
>>> a = [(1,2), (3,4), (4,5)] >>> a array([(1,2),
>>> import itertools >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>>
def get_context_data(self, **kwargs): if self.request.POST
import os os.environ['PROJECT_NAME'] = 'project_name'
>>> a = [1, 2, 3, 4, 5] >>> b = a + [3] >>> b [1,
from datetime import datetime, timedelta from datetime import datetime, timedelta from datetime import datetime, timedelta
>>> import re >>> re.sub(r'(a)([^']+)', r
>>> import itertools >>> list(itertools.chain.from_iterable(itertools.
import csv with open('test.csv', 'rb') as f: reader = csv
import os def open_file(filename): with open(filename, 'rb') as
>>> [x for x in list_of_lists if x[0] == 'a']
def create_app(app): app.run()
self.widget.set_size(width, height)
def do_something(self): self.Do_something() self.Do_something
def create_buttons(self, d): for key, value in d.items():
import imaplib imaplib.init_imap_password(host, port, username,
import numpy as np grid = np.array([1,2,3]) grid = grid.reshape
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
<a href="{{ url_for('my_app.my_app_name',
import os os.environ['MAX_SIZE'] = os.environ['MAX_SIZE
from django.contrib.auth.models import User from django.contrib.admin import admin
plt.scatter(x, y, marker='\t', c=r'[
def func(x, y): return x + y def func2(x, y):
class A(object): def __init__(self, a, b): self.a
>>> import itertools >>> >>> >>> >>> [i for i,j in itertools.groupby(
import sys, os, sys, sys, sys, sys, sys, sys, sys
>>> import re >>> s = 'a,b,c,d,e,f
vim.set_max_line_length(30) vim.set_max_line
>>> for i, j in enumerate(a):... print i, j... 1 2
import numpy as np import scipy.stats as stats import scipy.stats as stats data =
//div[text() = 'Number of numbers']/text()
>>> import struct >>> struct.unpack('>I', struct.pack('>I',
def __init__(self, *args, **kwds): self.kwds =
import urllib2 url = 'http://www.example.com/page.html'
>>> import itertools >>> >>> >>> list(itertools.chain.from_iterable(it
import subprocess subprocess.Popen((' ','my_program.py','my
>>> a = [1, 2, 3, 4] >>> b = [1, 2, 3, 4] >>> a [1, 2,
>>> import unicodedata >>> unicodedata.normalize('NFD', 'utf-8') True
def update_last_name(self, *args, **kw): if self.
>>> from bs4 import BeautifulSoup >>> soup = BeautifulSoup(html) >>> soup.find('
PyObject *result = PyObject_CallObject("PyObject", "PyObject"); // call
import datetime, itertools def check_for_interval(start_time, end_time
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
import requests r = requests.get(url, stream=True)
>>> import struct >>> struct.unpack_from('I', 'a') [('a',
from sqlalchemy import query, func query = query.filter(func.func.list_
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
>>> [tuple(x) for x in tup] [(1, 2), (3, 4), (5, 6
>>> import ast >>> ast.literal_eval(ast.literal_eval(a))
df.pivot(index='id', columns='name', values='value')
>>> import re >>> re.sub(r'(a)([^']+)', r
>>> locals() {'a': 1, 'b': 2, 'c': 3}
>>> import string >>> string = 'a b c d e f g g g h h
import bulbs.cypher.query(query_string, query_string)
import subprocess subprocess.Popen([" ", "http://www.example.com"])
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
import os import os sorted(os.listdir(os.path.dirname(os.
>>> import sys >>> sys.argv ['__init__.py', '__init__.py
if __name__ == "__main__": main()
import multiprocessing.Pool def local_storage(filename): with open(filename, 'rb
def del_list(list): for i in list: if i == 0: list.
from django.core.cache import cache_key from django.core.cache import cache
<html> <head> <title>My Title</title> <body> <
>>> import string >>> string.startswith('a') True >>> string.startswith('a')
>>> re.search(r'(?P<name>[a-z]+)
import subprocess p = subprocess.Popen(("echo", "test.txt")) out,
def calculate_math_math_math_math_math_math_math_math
df.groupby('A')['B'].agg(lambda x: x.isnull())
def on_user_event(event): if event.type == pygame.QUIT
import os import json with open('test.json', 'wb') as f: json
import numpy as np from scipy.stats import norm from scipy.stats import LuSc
import xlrd sheet = xlrd.open_workbook('test.xls') sheet
>>> [x in y for x, y in zip(a, b)] True
df.loc[df['A'] == 'A'] = df['B'] df
def remove_view(request): if request.user.is_authenticated(): return HttpResponse
import sys, string, str, str, str, str, str, str, str
import numpy as np a = np.array([1,2,3]) b = np.array
import csv with open('data.csv', 'rb') as f: reader = csv
import os with open('test.txt', 'r') as f: for line in
import os import sys sys.path.append(os.path.abspath(sys.
import urllib2 opener = urllib2.build_opener() opener.addheaders = [('User
class MyModel(models.Model): #... class Meta: proxy = True #... class
import sys import subprocess p = subprocess.Popen(('echo', 'test.bdb
import sys, argparse parser = argparse.ArgumentParser() parser.add_argument('--
self.menu.Bind(wx.EVT_MENU, self.on_menu
{% for item in queryset %} {% if item.last %} {% endif %} {% endfor %}
import lxml.etree as etree tree = etree.parse('file.xml') for node
import math def primefinder(num): if num % 2 == 0: return num //
>>> import binascii >>> binascii.hexlify(hex(ord(u'b'))[:
class A(object): def __init__(self, a, b): self.a
import json data = json.load(open('http://www.example.com/
import urllib2 url = 'https://www.example.com/file.jpg'
import csv with open('test.csv', 'rb') as f: reader = csv
import urllib2 url = urllib2.urlencode({'base': 'http://www.example
import os import collections with open('file.txt') as f: for line in f
def __init__(self, *args, **kw): self.dict = kw.
>>> import re >>> re.split(r'(?P<name>[a-
import pandas as pd df = pd.read_csv('file.txt', index_
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
from django.core.urlresolvers import reverse from django.core.urlresolvers import reverse
import csv with open('test.csv', 'rb') as f: reader = csv
import requests r = requests.get(url, data=json.dumps(data))
class MyObject(object): def __init__(self, *args, **kwds
import foreman api_key ='mykey' # Set up the API key #
>>> re.compile(r'(?P<name>[a-z0-9]+
>>> d = {k:v for k,v in d.iteritems()} >>> d
def __init__(self, *args, **kw): self.args = args self
>>> import urllib >>> url = 'http://www.example.com/example.html
import numpy as np a = np.array([[1,2,3],[4,5,6]]) np.
PyObject *array = PyIntObject(PyObject *)
import numpy as np a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,
import logging logging.basicConfig(level='INFO', filename='test.log')
import json import time timestamp = time.mktime() json_data = json.load
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
def switch(x): return x == 1 def switch(x): return switch(x
>>> import re >>> re.sub(r'(^\n)', r'
import xlrd wb = xlrd.open_workbook("test.xls") wb
$ pip install --no-site-packages
import sys, time def main(): print("Hello, world!") sys.stdout.write
>>> import struct >>> struct.unpack('>I', struct.pack('>I',
def nested_list(n): for i in range(n): yield i nested_
import json with open('data.json', 'rb') as f: data = json
import datetime, time def timestamp_count(timestamp): return (timestamp - time.time
from flask import Flask app = Flask(__name__, static_url_path='/') @
from django.db.models import Q, F, Q, Q, Q, Q
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
wx.Frame(self, parent, style, style, style, style, style,
from django.contrib.auth.models import User from django.core.files.base
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
import numpy as np import scipy.io.wavfile as wave from scipy.io.
import os with open(filename, 'rb') as f: for line in f:
fig.canvas.draw() fig.canvas.draw() fig.canvas.draw()
import numpy as np import matplotlib.pyplot as plt import numpy as np import matplotlib.pyplot
import urllib import urllib url = 'http://www.example.com/file.xml
if (user_id == None) or (user_id == None) or (
import re with open('file.txt', 'r') as f: for line in
>>> import re >>> s = 'a string with a string with a string with a string
class A(object): def __init__(self, a, b): self.a
def group(group): return group.value
import VideoClip from pywinauto import GetVideoTrack from pywinauto import GetVideo
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
import numpy as np import scipy.stats as stats import numpy as np from scipy.stats
>>> import collections >>> collections.defaultdict(list) [('a', 'b'), ('
>>> import re >>> s = 'hello world' >>> re.search(r'(
def my_lambda(x): return x * x + x * x
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
....................................
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
PyObject *PyObject* PyObject* PyObject* PyObject* PyObject* Py
>>> class A(object):... pass... >>> A = A() >>> A is None
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
def test_test_test_test_test_test_test_test_test
py2app.py2app.py2app.py2app.py2
import numpy as np import scipy.stats as stats def get_data(data): return
if (value <= 3 or value <= 4): print("ok")
from flask import Flask from flask.ext.http import HttpResponse from flask.ext.http
import re with open('file.txt', 'r') as f: for line in
def get_context_data(self, **kwargs): if self.request.user
import pandas as pd import numpy as np import matplotlib.pyplot as plt from matplotlib.ticker
class A(object): def __init__(self, x, y): self.x
def change_icon(self, button): button.setIcon(QtCore.QIcon
import os if os.name == 'linux': print("Linux is a Linux system")
import os import sys import os import os import sys import os import sys, os, sys
from pika import rabbitmq from pika.pika import Pika from pika
>>> from string import lowercase >>> lowercase = lowercase.lowercase >>> uppercase
(?s)
import sys sys.path.append(os.path.abspath(__file__))
import os import os os.path.dirname(os.path.abspath(__file__
def rgb_to_string(rgb): return ''.join(map(str, rgb
def map(d, keys): if keys: return d[keys[0]] else: return
df.merge(df1, left_on='A', right_on='B',
import os for line in open('filename.txt'): print line
def slider(slider, step): if step == 0: return slider.get_value()
def prime(n): if n % 2 == 0: return True return prime(n)
>>> import itertools >>> >>> >>> data = [('a', 'b'), ('c', '
import os os.system('cls')
>>> isinstance(x, collections.Sequence) True >>> isinstance(x, collections.Sequence
import xl.workbook.Workbook() wb = xl.workbook.Workbook() wb
>>> import re >>> re.split(r'(?<=\s)\s+',
def is_property(self, attr): return attr.is_special
import smtplib from email.utils import validate_email_from_string import Verizon
import numpy as np import matplotlib.pyplot as plt data = np.array([[1,2,3
df.loc[df['A'] == 'B'] = df['B']
>>> from itertools import chain >>> [tuple(x) for x in chain(a,
import os import os import os for root, dirs, files in os.walk(os
>>> type(str(x)) <type'str'> >>> type(str(x
import sys sys.path.append(os.path.dirname(__file__))
import json data = json.dumps(data)
>>> import itertools >>> >>> l = [(1,2), (3,4), (4,5)] >>> [
for i in range(len(soup.findAll('a'))): print soup.findAll
df.groupby('A')['B'].apply(lambda x: x.iloc[0])
df.to_dict(index=['date1', 'date2', 'date3'])
easy_install --egg=egg
df.loc[df['name']=='A'].astype(str)
import nfqueue, sys, sys, sys, sys, sys, sys, sys,
plt.plot(x, y, marker='\t', color='red', linewidth
import pandas as pd df = pd.DataFrame({'A': ['a', 'b',
from sqlalchemy import create_engine from sqlalchemy.orm import SQLAlchemy from sqlalchemy.orm import P
import sys import pydub import pydub.playplay as play play = py
>>> import unicodedata >>> unicodedata.category('NFD', 'utf8') ['NFD
def draw(self, rect, rect): rect.fill(color="#FFFFFF
df.groupby('name').agg({'count': lambda x: len(x)})
df['A'] = df['B'].map(lambda x: x['A'])
import datetime import os import time with open('test.txt', 'rb') as f
from sqlalchemy import func, func from sqlalchemy.sql import func, func q = func.
import os import sys, os os.path.dirname(sys.executable)
import sys import time def progress(): while True: sys.stdout.write('\r%
>>> float('inf') Traceback (most recent call last): File "<stdin>", line 1,
>>> d = {'a':1,'b':2,'c':3,'d':
>>> import ast >>> ast.literal_eval('a,b,c,d,
>>> d1 = {'a':1,'b':2,'c':3,'d
>>> from itertools import groupby >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>>
cursor.execute("INSERT INTO table(id) VALUES (%s)" % (id
CREATE TABLE test ( id INT NOT NULL, name TEXT NOT NULL, age INT NOT NULL
import os import sys import time with open(sys.argv[1], 'wb') as f
sns.set_xticklabels(df['x'])
import subprocess subprocess.Popen([" ", " ", " ", " ", "
import stringio.StringIO import itertools with open(filename, 'rb') as f:
df.loc[(df['A'] == 'A') & (df['B']
>>> a = [1, 2, 3, 4] >>> b = a >>> b [1, 2, 3, 4] >>>
import matplotlib.pyplot as plt import numpy as np data = np.array([[1,2,3
import MySQLdb.connect(host="localhost", user="root", passwd="root", db
>>> a = np.array([1., 2., 3., 4.]) >>> a array
def prime_numbers(n): if n % 2 == 0: return True return prime_
if any(word in line for line in open('words.txt', 'r').
import caffe.io.open_file('path/to/file.mdb',
# The line that you want to be plotted is the line that you want to be plotted
import multiprocessing def worker(func): return func(x) def worker_func(x
class MyForm(forms.Form): class Meta: model = MyModel fields = ('name
>>> from itertools import chain >>> result = chain(chain(a,b), chain(
import os import urllib username = 'user_username' retweet = urllib.urlretrieve
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
from flask import Flask from flask.ext.wsgi import WSGIHTTPServer app = Flask(__
class A(object): def __init__(self, x): self.x = x
def make_big_data(data): for i in range(len(data)
>>> a = [1, 2, 3, 4] >>> b = [1, 2, 3, 4] >>> a [1, 2,
>>> a = [1, 2, 3] >>> b = [1, 2, 3] >>> a [1, 2, 3]
import os with open('file1.txt', 'r') as f: for line in
def start_next_next_next_next_next_next_next_next
def patch_patches(patch_patches, patch_patches, patch_patches, patch
df.loc[(df['A']==1) & (df['B']==2)
class Profile(models.Model): profile = models.OneToOneField(Profile, related_
def subtract(x, y): if x > y: return x return y
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
import os import pandas as pd import os import pandas as pd import os import os for root
import os import os with open('test.txt', 'w') as f: f
>>> import re >>> re.findall(r'(?P<url>.*)(?
import numpy as np import scipy.stats as stats def cycle_data(data): for
def update(d, key): if key not in d: d[key] =
>>> a = [1, 2, 3] >>> b = [1, 2, 3] >>> a [1, 2, 3] >>>
from django.db.models import Q q = Q(name__icontains=
import os import sys import time for line in sys.stdin: if line.startswith('
>>> import ctypes >>> c = ctypes.CDLL('test.c', buffer=c
import urllib import json url = 'http://www.example.com/post' data
>>> a = [1,2,3] >>> b = [1,2,3] >>> a[b] [1,
class A(object): def __init__(self, *args, **kwds):
In [11]: np.dot(matrix, axis=1) Out[11]: array([[
import dbus dbus.Interface(dbus.DBus.DBus.DBus.
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
class User(models.Model): user = models.ForeignKey(User) class Meta:
In [11]: df.to_numeric(df['A']).astype(str)
ax.set_xscale('log')
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
>>> a = [1, 2, 3, 4, 5] >>> a [1, 2, 3, 4, 5] >>> a [1,
SELECT * FROM table WHERE id IN (SELECT id FROM table WHERE id IN (SELECT id
self.ui.item.setEnabled(True)
import os os.system('make')
#!/usr/bin/ # -*- coding: utf-8 -*- import subprocess, os,
>>> import random >>> random.choice(list(range(6)), range(6)),
import os with open(filename, 'rb') as f: for line in f:
>>> a = [1, 2, 3, 4, 5] >>> b = a + a >>> b [1, 2,
>>> import urllib >>> url = 'http://www.example.com/page.html
>>> import re >>> s = "a b c d e f g g g g g
>>> d = {k:v for k,v in d.items()} >>> d
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
def get_global_var(): global global global global global global global global global global global
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
def strip_start_with_end_with_start_with_end_with
pip install -r requirements.txt
import matplotlib.pyplot as plt import numpy as np import matplotlib.cm as cm fig =
import csv with open('test.txt', 'w') as f: writer = csv
>>> for key, value in d.items(): print key, value >>> {'a':
import scipy.io.save('test.pdf', 'w')
from celery import Celery from celery.test import Test from celery.test import Test from celery
import numpy as np import scipy.io.wavfile as wave data = np.load
from emailgun import EmailGun from emailgun.mime.headers import MIME
from py.test import Test, fixture from py.test import Test, Test, Test
import os.path.abspath(os.path.dirname(__file__))
def func(x): return x + 1 def func2(x): return x + 1
......................................................
class A(object): def __init__(self, a, b): self.a
import time def draw(self): time.sleep(30) self.rect.fill((
import os import struct with open(filename, 'rb') as f: data = f
self.toolbar.SetBackground(wx.Colour(wx.Colour.BGR2
>>> import string >>> string.ascii_lowercase + string.ascii_uppercase >>>
>>> a = -inf >>> a -0.0 >>> a -0.0 >>> a -0.0 >>> a -0.0 >>>
import urllib urllib.urlretrieve('http://www.google.com/', 'http://
import sys def int_int(s): try: return int(s) except ValueError
def outer_func(x, y): return x + y + z + z +
>>> a = [1, 2, 3, 4, 5] >>> b = a[2:] >>> b [1,
import numpy as np import itertools def isGrayCode(num1, num2): return (num
import numpy as np import matplotlib.pyplot as plt from scipy.io import Image from scipy
db.aggregate( {$match:{$_id}})
fig = FigureCanvas(fig) fig.canvas.add_subplot(111) fig.
from lxml import etree tree = etree.parse('http://www.example.com/
import multiprocessing pool = multiprocessing.Pool() pool.map(lambda x: x.get
from django.db.models import Sum from django.db.models import Sum from django
import os.path.append(os.path.dirname(os.path.abspath
import datetime timestamp = datetime.datetime.now().strftime("%Y-%m-%d %
import sys, os, sys, sys, sys, sys, sys, sys, sys
>>> import itertools >>> list(itertools.chain(list(itertools.chain.
import os with open(filename, 'rb') as f: data = f.read
parser.add_argument('--name', action=lambda: 'foo', nargs='
>>> import json >>> json.dumps(data) # ['a', 'b', '
>>> import ctypes >>> a = ctypes.Array(ctypes.c_char_p)
import pandas as pd df = pd.DataFrame({'A':['a','b','c
import matplotlib.pyplot as plt import pandas as pd df = pd.DataFrame({'A':
import wave import numpy as np import scipy.io.wavfile as wave data = wave
def counter(self, counter): if counter: return counter else: return counter(self
>>> import re >>> s = "a b c d e f g g h h h
import numpy as np import scipy.stats as stats import scipy.stats as stats import scipy
def __place__(self, x, y): if x > y: self.x
>>> a = [1, 2, 3, 4] >>> a [1, 2, 3, 4] >>> a [1, 2, 3,
>>> import re >>> s = 'a string with a string with a string with a string
>>> import re >>> re.findall(r'(http://www.example.com
def test_setup(self): self.setup_function() self.setup_function
{% if user.is_authenticated %} {% endif %} {% endif %}
class A(object): def __init__(self, *args, **kw): super
>>> class A(object):... def __init__(self, *args, **kwargs
>>> import re >>> url = 'http://www.example.com/page/page
import os.path.replace(os.path.sep, '\\\\')
min(line.split()[:-1])
>>> print(list(zip(a, b)) ['a', 'b', '
>>> import datetime >>> datetime.datetime.strptime('2011', 'yyyy', '%a %
def timer(): global global global global global global global global global global global global global global global
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
>>> from __future__ import division >>> print(Decimal( '111'),Decimal( '11
def main(): global global global global global global global global global global global global global global global
>>> set(set(x)) {2: None} >>> set(x) {2:
>>> d = {k:v for k,v in d.items()} >>> d
import os import sys import win32gui win32gui.GetWindowText(sys.
>>> map(lambda x: x['name'], x['age']) ['a', '
from django.db import connection connection = connection.connect() cursor = connection.cursor()
import subprocess subprocess.Popen((" ", "my_script.py", "arg
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> [
In [11]: df.loc[df['A'] == df['B']].
>>> [int(x) for x in xrange(6)] [1, 2, 3, 4, 5]
>>> from collections import Counter >>> Counter(sorted(words, key=lambda x: x
import unicodedata unicodedata unicodedata.normalize('NFD', unicodedata.normalize('NFD', unicodedata
import urllib def post(request): data = json.loads(request.body) return
{% for key, value in mydict.items %} {{ value }} {% endfor %}
from twisted.web.client import Client from twisted.web.server import Server from twisted
import subprocess subprocess.Popen(" ", shell=True)
import matplotlib.pyplot as plt plt.figure() plt.imshow(data) plt.
def inverse(s): return int(s)
if (game.is_played): print("Played")
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> sum
import csv with open('data.csv', 'wb') as f: writer = csv
import numpy as np import matplotlib.pyplot as plt data = np.array(data)
if not db.exists(): db.create_db(name='my_name',
import urllib2 from werkzeug.utils import sanitize html = urllib2.urlopen("http://www
import requests r = requests.get(url, proxies={'proxy': 'http://www
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
import csv with open('file.csv', 'rb') as f: reader = csv
def get_result(self, *args, **kwargs): if self.result is
>>> import re >>> s = 'a,b,c,d,e,f
cursor.execute("INSERT INTO test(name) VALUES ({})".format(name))
from django.core.files import SimpleUploadedFile from django.core.files import Simple
def f(): return 'hello' def f(): return f() f()
def func(a, b): return a + b func(a, b)
import os import sys def main(): print 'hello' sys.stdout.write('hello
#include <iostream> #include <iostream> #include <i
def func(x, y): return x + y def func_args(x,
import json json_dict = json.load(open('file.json', 'r
>>> import urllib >>> url = 'http://www.example.com/path/to
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
def get(self, request, *args, **kw): # Do something with the
def triangle(triangle): iftriangle: return triangle(triangle) return triangle
>>> from collections import Counter >>> Counter(list) Counter({'a': 0, 'b':
def update_data(): global global global global global global global global global global global global global
import socket def connect(host, port): socket.setdefaulttimeout(30) return socket.
>>> from itertools import chain >>> >>> >>> list(chain.from_iterable(chain(
import os import stat stat.S_ISDIR(os.stat.S_IS
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
from flask import Flask from flask import request from flask import jsonify from flask.ext.json
//include <iostream> using namespace std; //include <iostream>
from pyramid import pyramid from pyramid.web import WSGIServer from pyramid.web import WSGIServer
def slugify(self, slug): slug = slugify(slug) return slug
$.ajax({ url: 'http://www.example.com/select_value',
import os with open('file1.txt', 'r') as f1, open('file
def create_function(func, *args, **kwds): if not isinstance(
>>> import datetime >>> datetime.date.today().year # year of the year >>> datetime
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
import subprocess subprocess.Popen(('echo $VAR', 'foo', 'bar'))
>>> [int(x) for x in range(len(x))] ['1', '2',
import pickle with open('test.pickle', 'wb') as f: pickle.dump
>>> import numpy >>> a = numpy.array([1, 2, 3, 4]) >>> a array([1,
>>> struct.unpack('>I', b'\x00\x00\x00\x00\
import urllib url = 'http://www.example.com/file.pdf' response
import csv with open('data.csv', 'rb') as f: reader = csv
ax.xaxis.set_major_formatter(matplotlib.ticker.NullFormatter())
def cut_cut(s, cut_cut): if cut_cut: return cut
import base64 from base64 import base64 from StringIO import StringIO from StringIO import StringIO from
import Image im = Image.open('image.tostring') im.putpixel
import re numbers = [int(x) for x in re.findall(r'
import requests r = requests.Session() r.headers['content-type'] = '
import itertools with open('file1.txt', 'r') as f1, open('file
plt.scatter(x, y, marker='\t', c=marker, marker
import multiprocessing as mp def worker(n): return mp.Pool() p = mp.
PyObject *code = PyInt_FromLong(0); PyObject *code = PyInt_From
>>> import re >>> re.sub(r'(a)([^']+)', r
import serial import time def time(serial): while True: try: serial.write(
>>> import lxml.html >>> tree = lxml.html.fromstring('<html> <
def square(n): if n == 0: return n return (n-1) * (n
class MyTable(QTable): def __init__(self, parent, style, *
import sys, time def trace(event): if event.type == 'SIGINT':
>>> from itertools import chain >>> list(chain(a, b)) ['a', '
def remove_adjacent_elements(list): return [x for x in list if
self.textedit.textEdit.textEdit.textEdit.textEdit.text
def get_last_name(self, *args, **kwargs): if self.
def __init__(self, *args, **kwds): self.kwds =
import cv2 cv2.imshow(img,weight=weight)
>>> import re >>> re.compile(r'(?<=\s+)\s+
>>> a = [1, 2, 3] >>> b = a >>> b [1, 2, 3] >>> a [1,
>>> d = {k:v for k,v in d.iteritems()} >>> d
>>> import itertools >>> a = [(1,2), (3,4), (4,5)] >>> b =
sqlite.connect(db_name, db_name)
import time while True: time.sleep(60)
import sys, time def update_time(): sys.stdout.write('Hello, world
import numpy as np a = np.array([[1,2,3],[4,5,6]]) np.
import json from tweepy import tweepy json_data = json.load(
def guess(deck): guess = card[deck] guess = guess + 1 guess =
>>> import itertools >>> list(itertools.combinations(list(itertools.combinations(
import util class A(util.util.util.util.util.util.util
import os os.system('echo $PATH')
from IPython.display import display from IPython.display import display from IPython.notebook import notebook
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
class A(object): def __init__(self, parent): self.parent = parent
>>> [list(x) for x in zip(a, b)] [['a',
>>> import re >>> re.findall(r'(?P<name>[a-
>>> import struct >>> struct.unpack('>I', struct.pack('>I',
char[] { char[] { "Hello", "World"; //... } }
from django.db.models import Q, Q, Q, Q, Q, Q
>>> urlencode('http://www.example.com/test.html', safe=
def find_prob(prob,prob): if prob is None: prob = prob.
>>> from decimal import Decimal >>> Decimal('0.14285714285714285714285714
import os with open('test.txt', 'rb') as f: for line in
import os import sys def kill_process(pid): if pid == 0: sys.exit
>>> a = None >>> a is None True >>> a is None True
class MyModel(models.Model): #... def __init__(self, *args,
import re with open('file.txt', 'r') as f: for line in
class MyInterface(Interface): def __init__(self, *args, **kw):
>>> import re >>> re.findall(r'(?P<name>[a-
def get_value(self, row): return row[0]
df['time'] = df['time'].map(lambda x: x['time'])
>>> import re >>> re.sub(r'(a)(?=[a-z
setup.py bdist_egg
from fabric.api import hosts from fabric.hosts import Host, Host, Port def host
import os import sys, os, sys, sys, os, sys, sys, sys
from django.db.models import Q from django.db.models import Q from django
>>> [x for x in list_of_words if x not in ['a',
def get_queryset(self): return qs.filter(user=self.request.
import datetime, calendar def generate_date(start_date, end_date): start
In [11]: df.diag(level=0) Out[11]: 0 1 1 2
import os with open('file.txt', 'rb') as f: for line in
>>> d = {k:v for k,v in d.iteritems()} >>> d
import multiprocessing def worker(worker): return worker.apply_async(worker, args=(
>>> import re >>> s = "a b c d e f g g g g g
def recursive_func(x): if x == 0: return x else: return recursive_
from datetime import datetime, timedelta from django.db import connection connection = connection.connect()
import os import struct import os import StringIO import os import struct with open(os.path
import urllib import urllib url = 'http://www.example.com/file.html
>>> d = {k:v for k,v in d.iteritems()} >>> d
>>> import struct >>> struct.unpack('>I', b'\x0f\x
import __import__("foo")
import datetime, calendar def week_start(year, month, day, week): return
def parse(self, source): for child in source: if child.name == '
>>> import re >>> re.split(r'(?<=\s)\s+',
import os import os for root, dirs, files in os.walk(root): for
df.loc[df['A'] == df['B']].shift(1)
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
>>> from collections import Counter >>> Counter(sorted(Counter(sorted(Counter(Counter(
class A(object): def __init__(self, x): self.x = x
plt.hist(x, bins=bins, title=title)
def create_dict(d): for i in range(len(d)-1):
from mongoengine import mongoengine.query(User).filter(User.id==user
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
import logging logging.basicConfig(level='INFO', message='Hello, World!')
import os import sys, os, sys, os, sys, sys, sys, sys
import xml.etree.ElementTree as ET tree = ET.parse('test.xml')
>>> import nltk >>> nltk.word_tokenize(text) [('a', 'b'),
>>> import codecs >>> codecs.decode('utf8','ignore') u'utf8u
>>> import string >>> string = 'hello, world!' >>> ''.join(string.ascii
import json json.load(json_data)
import os import sys with open(sys.argv[1], 'r') as f: for
import sys, os, sys, sys, sys, sys, sys, sys, sys
def next_next_next_next_next_next_next_next_next
import multiprocessing def worker(n): if n == 0: return n return multiprocessing.Pool()
from django.core.cache import Response from django.core.cache import CacheView from
sed -e's/^\s/^\s/^\s/
>>> import re >>> s = 'a b c d e f g g g g g
import sys, subprocess def main(): print 'hello' sys.stdout = subprocess.Popen
from django.db.models import Q from django.contrib.auth.models import User
>>> re.compile(r'^^^^^^^^^^^^

from arma import * from arma import statsmodels.models import LogisticRegression from
class A(object): def __init__(self, a, b): self.a
import urllib url = 'http://www.example.com/page.html' page
df.groupby('id').agg(lambda x: x.count())
import os import zipfile zip_path = os.path.abspath(os.path.
import time def f(): while True: line = raw_input("Enter line: ")
import cv2 cv2.imshow(img,cv2.COLOR_BGR2GRAY)
import os import os for root, dirs, files in os.walk(root): for
import subprocess p = subprocess.Popen(('echo', 'test.py', 'test
import os from azure.storage import Storage from azure.storage import Storage from azure.storage
>>> df.to_dict(orient='records') {'records': [{'name': '
import os for root, dirs, files in os.walk(os.path.dirname
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
>>> import csv >>> data = [["a", "b", "c", "d
import urllib from pyserial import SerialNumber from pyserial import SerialNumber from pyserial import
import os import subprocess subprocess.Popen('mp3 -i'+ os.path.
if (node1 is None) or (node2 is None) or (node1
>>> import ast >>> ast.literal_eval(ast.literal_eval(l))
import subprocess subprocess.Popen((' ', 'test.log', 'test.log
import sys, os, sys, sys, sys, sys, sys, sys, sys
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('c', '
from django.db.models import Q qs = qs.filter(Q(user__
from django.db.models import Q, Count qs = qs.values_list('
from pymongo import MongoClient from pymongo import MongoClient from pymongo import MongoClient from pymongo import MongoClient from pymongo
df.loc[df['A'] == 'B'] = df['B'] df
$ echo $> $> $> $> $> $> $> $>
def map(mapping): if isinstance(mapping, dict): return [mapping] else:
import subprocess p = subprocess.Popen(('foo', 'bar'), stdout=subprocess.
>>> import csv >>> with open('file.csv', 'rb') as f: reader
ax.xaxis.set_color('red')
from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver
def quicksort(seq): if seq[0] == 0: return seq[0] elif seq[0] ==
def move(self, x, y): self.x = x self.y =
def eval(x): if x is None: return x return x
def recursive_data(data): if data == None: return [] return recursive_data
import yaml from collections import OrderedDict from yaml import DictConfig from yaml import DictConfig from yaml
from django.contrib.auth.models import User user = User.objects.get(
import xlsxwriter workbook = xlsxwriter.Workbook() worksheet = workbook.add_worksheet
>>> import re >>> s = 'a,b,c,d,e,f
import numpy as np import scipy.io.wavfile as wave from scipy.io.
import os import operator with open('file1.txt', 'rb') as f1, open
ax.set_xscale('log')
max(max(x) for x in range(max(x)-1))
class MyForm(forms.Form): def __init__(self, *args, **
import os import os for root, dirs, files in os.walk(os.path
import os import subprocess subprocess.Popen("screenshot.png")
>>> import re >>> s = 'a b c d e f g g g g h
>>> import networkx >>> G = networkx.DiGraph() >>> G.add_edge(1,
while True: if input == '': break print("You have guessed it!")
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('c', '
import os import os with open(os.path.join(os.path.dirname
import itertools def unique_tokens(tokens): return set(tokens) def unique_tokens
>>> import sqlite3 >>> sqlite3.connect('mydb','sqlite:///tmp/test
import numpy as np a = np.array([[1,2,3],[4,5,6]]) mask =
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
pip install --upgrade pip install --upgrade pip install --upgrade pip install --upgrade pip install
import itertools with open('file.txt', 'r') as f: for line in
In [1]: import numpy as np In [2]: a = np.array([1, 2, 3,
if not any(x == 'A' for x in range(len(list)
import numpy as np import scipy.io.png as img img = img.reshape((
>>> import ctypes >>> c_data = ctypes.c_data_buffer(ctypes.
import os if os.fork() == 0: print "forked" else: print "
def main(): global root root = Tk() root.after(1000, main) root.
import os import sys def create_script(): #... def run_script(): #...
>>> re.findall(r'(?P<name>[a-z]+)
>>> import datetime >>> datetime.datetime.strptime('2011-08', '%Y-%m
class Meta: proxy = True
import os with open('test.txt', 'r') as f: for line in
>>> import decimal >>> decimal.Decimal('0.1') Decimal('0.1')
import xml.etree.ElementTree as ElementTree tree = ElementTree.parse('http://www.
>>> re.compile(r'(?P<name>[a-z]+)
pip install scrapy
import re print(re.escape(r'(a)([^"]+', '
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
class A(object): def __init__(self, x): self.x = x
def limit(num): if num == 0: return num return num
import csv with open('test.csv', 'wb') as f: writer = csv
import os import os for root, dirs, files in os.walk(root): for
def get_fields(self, bundle): return bundle.fields
import pygtk pygtk.init() pygtk.keyframe.Keyframe(g
import os import os def get_location(filename): return os.path.abspath(
import xlrd xlrd.open_workbook(filename)
import itertools import operator def all_options(self, option_list): return [i
def freeze(self): self.freeze = True self.freeze = freeze
def get_queryset(self): return self.get_queryset()
>>> import json >>> json.dumps(dict(zip(keys, values))) '{"
def f(x): return x + 1 def f(x): return x + 1
def label_name(self, label): if label is None: label = self.
def partition(seq, start, stop, step): if start > stop: return seq
import os import string import os filename = 'test.txt' with open(filename,
PyObject *var = PyInt_FromLong(0); PyObject *var = PyInt_From
from beaker import * from beaker import * from beaker import * from beaker
>>> from collections import Counter >>> Counter(list) Counter({'a': 1, 'b':
>>> import re >>> re.findall(r'(?P<name>[a-
if timestamp.is_hour(): # do stuff
import subprocess subprocess.Popen((' ', 'test.py', 'w', '
df.groupby('A').agg(lambda x: x.sum())
plt.xticks(x)
label.center().center().center().center().center().center().center().center().
>>> d = {u'a': u'a', u'b': u'
>>> d = {('a', 'b', 'c', 'd'):[('
>>> from itertools import product >>> list(product(*x)) [(1, 2), (3, 5), (3,
>>> print(str(x)) 1
def start(): global counter counter = 0 while counter < 100: counter += 1 print counter
df.iloc[df['date'] == df['date'].astype(str)]
from sqlalchemy.sql import func, func from sqlalchemy.orm import deferred deferred deferred(func
import urllib from bs4 import BeautifulSoup soup = BeautifulSoup(urllib.urlopen(url)) for
import os import os for root, dirs, files in os.walk(root): for
manage.py runserver 0.0.0.0:8000
>>> sorted(mylist, key=lambda x: int(x[1])) ['1',
import os import sys, os, sys, unicodedata def get_dir(path): return
[None]
import numpy as np a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,
>>> import re >>> re.split(r'(?P<name>[a-
def game(): print("You are the first turtles.") #You are the first
{% for fieldset in fieldset %} {{ fieldset.fields }} {% endfor %}
os.path.join(os.path.dirname(__file__), 'test.
def main(): print "hello" print "hello" print "hello" print "hello
def func(a, b): return a+b def func_args(a,
>>> a = [1, 2, 3, 4, 5] >>> b = a >>> b [1, 2, 3, 4,
if any(x in s for x in range(len(s)-1))
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
>>> df.columns.keys() ['a', 'b', 'c', 'd
import os import os for root, dirs, files in os.walk(root): for
from IPython.display import display display(display('My notebook'))
>>> d = {'a':1,'b':2,'c':3,'d':
from flask import Flask from flask.ext.api import API_KEY from flask.ext
>>> from bs4 import BeautifulSoup >>> soup = BeautifulSoup(html) >>> for elem in soup
class A(object): def __init__(self, x, y): self.x
import boto.file_storage import boto.file_storage.UploadedFileStorage(bucket
from flask import Flask from flask.ext.iframe import iframe from flask.ext.iframe
pip install --upgrade
import os for root, dirs, files in os.walk(root): for file in
df.resample('D', index=df.index, how='resample')
>>> import unicodedata >>> unicodedata.index('NFD', 'u8f4f4
if not any(x == 'A' for x in range(len(list)))
import os import time filename = 'test.txt' with open(filename, 'rb
import requests r = requests.get(url, headers={'User-Agent': 'Mozilla
>>> re.sub(r'(?<=\n)', r'(?<=\
>>> re.search(r'(?P<question>\w+)\s+(?
>>> [list(i) for i in range(len(list(i))]))]
if all(k in d for k in d): print("ok")
import os with open(filename, 'r') as f: for line in f:
import os os.system('sudo -i -h -m -s -h -
>>> from collections import Counter >>> Counter(list) Counter({'a': 1, 'b':
import zlib def compress(data): return zlib.compressobj(data, zlib.Z
class A(object): def __init__(self, a, b): self.a
import zipfile zip_file = zipfile.ZipFile(zip_file) zip_file.
import urllib urllib.urlretrieve('http://www.example.com/login.php
import csv with open('test.csv', 'wb') as f: writer = csv
>>> class A(object):... pass... >>> A.A = A >>> A.
import socket sock = socket.socket() sock.connect((host,port))
import os def f(filename): with open(filename, 'r') as f:
def create_app(app, *args, **kw): if not app.is
import os def open_file(filename): with open(filename, 'rb') as
import numpy as np import scipy.io.wavfile as wave data = np.array
df.groupby('name').agg(lambda x: x.index)
df['A'] = df['B'].isin(df['A']) df['B
>>> import re >>> re.compile(r'(\d+)\s+(\d
>>> import sys >>> sys.maxsize # this is the length of the string >>> sys
import os import sys, os def open_file(filename): with open(filename,
import sys, os def run_script(self, script_name): sys.stdout
class A(object): def __init__(self, a, b): self.a
def __mul__(self, other): if isinstance(other, int): return self.
>>> import unicodedata >>> unicodedata.normalize('NFD', 'utf-8') u'NFD
if not request.POST: # Do something
pip install pip
import cherrypy from cherrypy import HTTPServer from cherrypy import HTTPServer from cherrypy import cherrypy from cherrypy
>>> isinstance(obj, type) True >>> isinstance(obj, type) False
def make_toc_tree(node): if node.name == 'node': return
import os with open(filename, 'rb') as f: with open(filename,
from django.db.models import Q, Q, Q, Q, Q, Q
def __init__(self, *args, **kwds): self.dict = kw
>>> import snmp >>> snmp.sncmp(snm.snmp_interface, snmp
>>> import re >>> re.sub(r'(a)', r'a,
class A(object): @classmethod def __init__(cls, *args, **
def __init__(self, *args, **kwds): self.kwds =
def multiply(x, y): return x * y * y
import json def my_function(data): if data: return json.dumps(data
import urllib import json url = 'http://www.example.com/login' data
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
>>> import re >>> s = 'a b c d e f g g g g g
<input name="random" value="{{ random.choice(range(random.randint(0,
def ngram_processing(ngram_file): for i in range(ngram
class User(models.Model): user = models.ForeignKey(User) class Meta:
from django.core.management import call_command call_command('my_app.
>>> import ast >>> ast.literal_eval(ast.literal_eval(data))
import time def sleep(): while True: time.sleep(1) print("sleeping")
class User(models.Model): user = models.ForeignKey(User) #...
import imaplib imaplib.init_app(app) imaplib.init_app
import os import video from win32com.client import Dispatch from win32com.client
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
# # # # # # # # # # # # # # # # # #
import subprocess subprocess.Popen(('echo', 'test.py', 'test.py
>>> [x for x in mylist if x[0] == 'a'] ['a', '
fig = plt.figure() ax = fig.add_subplot(111) ax.plot
>>> from collections import OrderedDict >>> OrderedDict([('A', 'B'), ('A', '
import __builtin__ as builtins builtins builtins.isfile( builtins.builtins.builtins.
import multiprocessing pool = multiprocessing.Pool() pool.map(worker, data)
import numpy as np a = np.array([[1,2,3],[4,5,6]]) np.
class A(object): def __init__(self, a, b): self.a
>>> import struct >>> struct.unpack('I', 'a') (u'I',
>>> re.findall(r'(?P<name>[a-z]+)
>>> import collections >>> d = collections.Counter() >>> for i in range(len(
class A(object): def __init__(self, a, b): self.a
>>> a = [1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,
import ctypes def my_func(a, b): return a + b c = ctypes
import random a = [1, 2, 3, 4] random.shuffle(a)
def create_user(user, *args, **kw): if user.is_
def compare(input_list): if len(input_list) == 1: return True
import os from os import path from os import path from os.path import abspath from os
>>> import lxml.html >>> tree = lxml.html.parse(html_string)
import os import pybox2d from pybox2d import Box2D from py
>>> import ast >>> ast.literal_eval(ast.literal_eval(a))
import re text = re.compile(r'<script>([^<]+)</script
>>> from datetime import datetime >>> datetime.strptime('2015-02', '%m/%d/%
from itertools import chain from operator import itemgetter from operator import itemgetter from operator import itemgetter from operator
>>> class A(object):... pass... >>> A.foo = A >>> A.
import csv with open('data.csv', 'rb') as csvfile: reader =
>>> re.search(r'(?P<name>[a-z]+)
import json json.dumps(data)
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
import multiprocessing def worker(): global cache cache = multiprocessing.Pool() cache.map(worker
class A(object): def __init__(self, x): self.x = x
def add(self, *args): self.entry = Entry(self, *args
import json json_data = json.load(json_data)
import subprocess subprocess.Popen(' ', stdout=subprocess.PIPE)
>>> from itertools import product >>> list(product(range(6)[::-1], repeat=2
import csv with open('data.txt', 'rb') as f: reader = csv
import sys, os def is_stdout(stdout): return True if __name__ ==
def func(x, y): if x is None: return y return func(x
>>> a = [1, 2, 3, 4] >>> b = [1, 2, 3, 4] >>> a [1, 2,
>>> re.search(r'(?P<name>[a-z]+)
import os import struct with open(filename, 'rb') as f: data = f
app.yaml app.yaml app.yaml app.yaml app.yaml app.yaml
import sys, subprocess, os, sys, sys, sys, sys, sys, sys
>>> [len(x) for x in zip(*a)] [9, 9, 9, 9,
import subprocess p = subprocess.Popen(('echo', 'test.txt', 'test
import imaplib imaplib.create_user(username='me', password='me',
from django.db.models import Q from django.db.models import Q from django
import sys, os class A(object): def __init__(self, *args,
>>> class A(object):... pass... >>> A.__name__ 'A'
from google.appengine.ext import webapp from google.appengine.ext import webapp from google
class MyInterface(object): def __init__(self, *args, **kwds
>>> import unicodedata >>> unicodedata.normalize('NFD', 'utf-8') ['NFD',
import sys import subprocess p = subprocess.Popen(('echo', 'test.txt',
import os import os filename = os.path.basename(os.path.dirname(
import datetime from datetime import timedelta from django.utils.timeutil import time from django.
import matplotlib.pyplot as plt plt.plot(x,y) plt.show()
>>> import re >>> s = re.compile(r'(?P<name>[
from django.contrib.auth.models import User from django.contrib.auth.models
import MySQLdb db = MySQLdb.connect(host="localhost", user="root", passwd="
ax.legend(x, y, loc='best', loc='best')
>>> import re >>> re.split(r'(?<=\s+)\s+
import time def sleep(time): while True: line = time.sleep(time.
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
def as_view(request, *args, **kwargs): # Do something with the
import subprocess p = subprocess.Popen(('echo', 'test'), stdout=subprocess.
def __init__(self, *args, **kw): if not self.is_
>>> import urllib >>> url = 'http://www.example.com/images/images
import base64 def m2crypto(data): return base64.b64encode(data
def make_random_number(n): if n == 0: return random.randint(0,
def replace_value(x, y): if x == y: return x[x
import Image import Image im = Image.open('test.jpg') im.thumbnail((
import numpy as np import matplotlib.pyplot as plt from scipy.stats import binomial,
$ echo "Hello, world"
cursor.execute("INSERT INTO test(name) VALUES ({})".format(name))
import tweepy from tweepy import tweepy from tweepy.api
import argparse parser = argparse.ArgumentParser() parser.add_argument('--file',
from django.db.models import Q q = Q(id__in=q)
class Base(object): def __init__(self, value): self.value = value
plt.plot(x, y) plt.plot(x, y) plt.
>>> d = {k:v for k,v in d.items()} >>> d
import csv with open('file.csv', 'rb') as f: reader = csv
import github github.github_tag_name = 'github.github.github.github
from django.db.models import F, timedelta from django.utils import timezone from django
def __eq__(self, other): if self.parent is other: return True return
from django.db.models import Q, Q, Q, Q, Q, Q
import threading def main(): while True: try: # Do stuff except KeyboardInterrupt: print
>>> import re >>> re.compile(r'(?P<name>[a-
import urllib from lxml import etree from lxml import etree from lxml import etree from lxml import etree
import sys sys.modules['________________________
import sys, os, sys, sys, sys, sys, sys, sys, sys
ax.set_xticklabels(labels)
>>> import itertools >>> >>> >>> a = [[1,2,3],[],[],[],[],[],[],[],[
class A(object): def __init__(self, x): self.x = x
def update_one(self, *args, **kwargs): #...
def get_url(self, request, name): if name =='my_view
import os with open(filename, 'rb') as f: for line in f:
>>> import re >>> re.sub(r'([0-9]*)', r'(
>>> 'ramón' == u'ramón' True >>> 'ramó
import xl.open_workbook() sheet = xl.Worksheets.sheet_by
from django.db.models import Q qs = qs.filter(Q(date__
class A(object): def __eq__(self, other): if isinstance(other,
import sys sys.path.append(os.path.abspath(__file__))
>>> from collections import OrderedDict >>> d = OrderedDict() >>> d['a'] = 'a
df.drop_duplicates(subset=['A'])
def min_value(l): min_value = min(l) return min_
import struct struct.pack('>BBBBBBBBBBBBBB', struct.pack
>>> import urllib >>> url = 'http://www.example.com/page.html
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
>>> import re >>> re.sub(r'(a)([^']+)', r
def func(x, y, z): if x == y: return z return func
import csv with open('file.csv', 'rb') as f: reader = csv
class A(object): def __init__(self, a, b): self.a
import os import sys, os def check_password(user, password): if user ==
def __init__(self, *args, **kwds): self.args = args
def first_time(x): return x.split()[0]
>>> d = {k:v for k,v in d.iteritems()} >>> d
>>> import string >>> string = "hello, world" >>> string.replace(string,
class A(object): def __init__(self, a, b): self.a
def menu(self,event): if event.type == 'MENU': self.menu
import csv with open('data.csv', 'rb') as f: data = csv
import socket def remove_all_components(socket): while True: try: data =
>>> d = {k:v for k,v in d.iteritems()} >>> d
>>> import re >>> re.sub(r'(a)((a)((b
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6],[
from web2py import web2py from web2py.client import Client from web
>>> import re >>> re.sub(r'(?P<name>[a-
>>> import struct >>> struct.unpack('>I', '12345') [('1', ''),
//div[contains(@name, 'a')]
def func(x): return x + x return func
from django.core.mail import EmailMultiAlternatives from django.core.mail import
class MyForm(forms.Form): class Meta: proxy = True def __init__(
if translation.activate(request.META['LANGUAGE_CODE'])
select * from table_name where id IN (SELECT id FROM table_name WHERE id
>>> import re >>> s = "a b c d e f g g g g g
>>> class A(object):... def __init__(self, a, b):...
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
import csv with open('data.csv', 'rb') as f: reader = csv
class A(object): def __init__(self, value): self.value = value
def func(x, y): return x + y def func_x(x,
conda install conda
apache.server.HTTPServer.HTTPServer.HTTPServer.HTTPServer.HTTPServer
from scrapy import Request, Interval def start_requests(self): start_requests = Request
>>> float(7) Decimal('0.14285714285714285714285714285714
import urllib url = urllib.urlencode({'username': 'user', 'password': '
import urllib from urllib import urlencode url = 'http://www.flickr.com
def combine(a, b): return a + b
import arrow arrow.arrow.arrow(arrow.arrow.arrow(arrow.arrow(
import os import sys import os for i in range(n): os.system('cls
def __str__(self): return self.name
from django.db.models import Q q1 = Q(title='My Title',
plt.plot(x,y) plt.colorbar() plt.colorbar()
from google.appengine.ext import datastore from google.appengine.ext.datastore import Key
import datetime from collections import defaultdict from collections import Counter from collections import defaultdict from collections import defaultdict
>>> [int(x) for x in range(6)] ['a', 'b
import itertools for i in itertools.combinations(a, 2): print(i)
>>> df.loc[df['name'] == 'Jake', 'name'] ['
import lxml.etree as ET tree = ET.parse('test.xml') for node
import sys, re def decode(data): data = sys.stdin.read() if
def __gt__(self, other): if isinstance(other, int): return self.
import pdb.set_trace()
import google.appengine.api as g g = g.get_object('my_
>>> from itertools import chain >>> list(chain(zip(list(zip(zip(
(((((((((((((((((((((((((((((((((((
import subprocess subprocess.Popen(args, shell=True)
>>> a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9,
>>> import networkx as nx >>> G = nx.DiGraph() >>> G.add_
def get_name(self, request): return request.POST.get('name',
import os os.makedirs(os.path.dirname(__file__))
>>> import struct >>> struct.unpack('>I', 'hello') (None, None
>>> [x for x in list if x[0] == 'a'] ['a', '
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
if not count: count = 0 if count == 1: count += 1 else: count +=
import json with open('my.json', 'rb') as f: data = json
{% for field in fields %} <input type="hidden" name="field" value="{{
>>> d = {k:v for k,v in d.items()} >>> d
self.tableView.setData(self.model.index(self.model.
import pdb.set_trace()
df.groupby('A')['B'].apply(lambda x: x.mean())
import tkinterFileDialog.askopenfilename()
import numpy as np import hdf5 as hdf5 import numpy as np from scipy import io
>>> a = [1, 2, 3, 4, 5] >>> b = [1, 2, 3, 4, 5] >>> a
>>> import itertools >>> for i in itertools.product(*[i]):... print i
import multiprocessing def worker(queue): data = [] for i in range(queue.n
>>> import itertools >>> >>> >>> itertools.combinations(range(6)[::2], repeat=3)
df['new_col'] = df['new_col'].apply(lambda x:
from datetime import datetime from google.appengine.ext import db from google.appengine.ext
import os import itertools with open('test.txt', 'rb') as f: data
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for link in soup.findAll('
class Test(object): def __init__(self, a, b, c, d
import zope.zdb.db.db.db.db.db.db.
class User(models.Model): user = models.ForeignKey(User) #...
with open('file.txt', 'r') as f: for line in f:
>>> d = {('a', 'b', 'c'): 'd'} >>> sorted
>>> d = {k:v for k,v in d.items()} >>> d
>>> import itertools >>> [list(g) for g in itertools.combinations(data,
if abs(point) < abs(point) else point
self.widget.show()
import numpy as np from scipy.stats import norm from scipy.stats import norm from scipy
import urllib urllib.urlretrieve('http://www.google.com/', 'http://
>>> import pandas >>> df = pandas.DataFrame({'A': [1, 2, 3, 4, 5]})
import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_
>>> import re >>> s = "hello, how are you?" >>> re.sub(
def create_widget(self, widget): widget.configure(state="normal") widget
def get_next_value(list_of_tuples): for tup in list_
import csv from itertools import chain from itertools import chain from itertools import chain from itertools import chain
def parse_qs(query): qs = parse_qs(query) return qs
from pyspark.sql.functions import udf from pyspark.sql.functions import func from pyspark
class A(object): def __init__(self, x): self.x = x
def sort(self): return sorted(self.sorted_folder_list, key=
df1 = df1.set_index('name') df2 = df2.set_
import os import os for root, dirs, files in os.walk(root): for
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
>>> import ast >>> ast.literal_eval(u'u').encode('utf
from sklearn.svm import SVC from sklearn.svm import SVC from sklearn.svm
import numpy as np a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,
>>> re.sub(r'(?P<name>[a-z]+)
awk -F's/^/^/^/^/^/^/
ax.xaxis.set_major_formatter(matplotlib.ticker.NullFormatter())
import os import os for root, dirs, files in os.walk(os.path
In [11]: np.array([1,2,3,4,5,7,9,11,11,11,
df.merge(df1, how='outer')
import datetime, timedelta, timedelta, timedelta, timedelta, timedelta, timedelta, timedelta, timedelta
import sys, os, sys, time def read_file(filename): with open(
>>> import ast >>> ast.literal_eval('['a','b','c','d
import os import base64 import os os.chdir(os.path.dirname(__
>>> import decimal >>> numbers = [int(x) for x in numbers] >>> numbers
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
def replace(n, x): if n == 0: return x return x + 1 def
>>> from bs4 import BeautifulSoup >>> soup = BeautifulSoup(html) >>> soup.get_
def func(x): return x * x
from flask.test import Flask from flask.testing import TestCase from flask.testing import TestCase
import json data = json.dumps(data)
>>> for i in range(n):... print i... 1 2 3 4 5 6
from django.contrib.auth.models import User from django.contrib.auth.models
>>> d = {k:v for k,v in d.items()} >>> d
>>> d1 = {'a':1,'b':2,'c':3,'d
import subprocess p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=
import urllib from scrapy import Request from scrapy.utils import session_cookie from scrapy.http
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
def make_string(func): def wrapper(*args): if isinstance(args, basestring
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
import itertools import random a = [1, 2, 3, 4, 5] b = [random.choice(
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
class A(object): def __init__(self, a, b): self.a
#...................................................
>>> d = {k:v for k,v in d.iteritems()} >>> d
import multiprocessing def worker(n): if n == 0: return n return multiprocessing.Process(
import os import cv2 img = cv2.imread('test.jpg') img.
plt.colorbar(x, y, vmin=0, vmax=min_min_ vmax
import xlsxwriter workbook = xlsxwriter.Workbook() worksheet = workbook.add_worksheet
import json with open('data.json') as f: data = json.load(
fig = plt.figure() ax = fig.add_subplot(111) ax.plot
def reduce(iterable): return reduce(iterable, [])
>>> from collections import Counter >>> Counter(list) Counter({'a': 1, 'b':
import numpy as np import matplotlib.pyplot as plt import numpy as np x = np.
import os import sys def is_even(file_size): try: return int(
df.groupby('name').apply(lambda x: x.isin(x))
from IPython.display import display display.set_default_css_path() display.
>>> import re >>> s = 'a string with first letter' >>> re.sub(
def factoryboy(factoryboy): return factoryboy(factoryboy(
import csv import numpy as np import matplotlib.pyplot as plt with open('data.csv
class Foo(object): def __init__(self, a, b): self.a
import networkx as nx G = nx.DiGraph() G.add_edge(1,2)
import lxml.html html = lxml.html.fromstring(html) soup = lxml
import json with open('data.json') as f: data = json.load(
class A(object): def __init__(self, *args, **kwds):
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
df['Year'] = df['Year'].map(lambda x: x.iloc[:
import urllib2 req = urllib2.Request('http://www.example.com/file
NSAppleScript.initWithSource(self, source, source, source, source,
>>> from collections import OrderedDict >>> OrderedDict([('a', 'b'), ('a', '
df['A'] = df['B'].map(lambda x: x['A'].
df.loc[df['A'] == 'B'] = df['B'] df
>>> import itertools >>> list(itertools.chain.from_iterable(itertools.
def distance(x, y): return abs(x - y) / (y -
>>> d = {k:v for k,v in d.iteritems()} >>> d
row = wx.ListBox(self.ui.sheet1, self.ui.sheet
import threading def worker(self): while True: data = self.request.read()
>>> from bs4 import BeautifulSoup >>> soup = BeautifulSoup(html) >>> soup.find_
plt.plot(x, y, marker='\t', linestyle='-',
import mechanize br = mechanize.Browser() br.open("http://www.
>>> class A(object):... def __init__(self, a, b, c
df.replace(df.c.text(), 'a').replace(df.c
def is_true(a): return a in a
from django.db.models import Q from django.db.models import Q from django
from datetime import datetime, timedelta from sqlalchemy import date, timedelta from sqlalchemy.sql import func
import csv with open('test.csv', 'wb') as f: writer = csv
from flask import Flask app = Flask(__name__, static_dir=os.path.
def get_context_data(self, **kwargs): if self.request.GET
import csv with open('file.csv', 'rb') as f: reader = csv
>>> import binascii >>> binascii.hexlify(u'abc') u'abc'
>>> import ast >>> ast.literal_eval('['a','b','c','d
import os with open('file1.txt', 'rb') as f1, open('file
import math def round(x): return math.floor(math.log(x))
>>> import random >>> random.seed(6) >>> random.seed() >>> random.seed
import json data = json.dumps(test_data)
from django.db.models import Q def get_queryset(self): return Q(
>>> [int(x) for x in range(len(x))] ['1', '2',
def create_entity(entity, parent=None): if parent is None: parent =
from django.core.management import call_command call_command('test', 'django
import os for i in range(len(os.listdir(os.path.dirname
>>> import itertools >>> >>> for i, j in itertools.combinations(range(len(
>>> import unicodedata >>> unicodedata.normalize('NFD', 'utf-8') u'NFD
>>> from ast import literal_eval >>> d = {u'a': u'a
def create_dict(d): for key, value in d.items(): if value
def my_global_var(): global var_var def my_global_var():
def __init__(self, name): self.name = name def __get__(self
class A(object): def __init__(self, x): self.x = x
class A(object): def __init__(self, a, b): self.a
>>> import re >>> s = 'hello world' >>> re.findall(r'(
from django.core.management import call_command call_command('my_module',
class Form(forms.Form): def __init__(self, *args, **kw
def sort(list): return list(sorted(list, key=lambda x: x
class A(object): def __init__(self, x): self.x = x
if (np.isnan(data['data['data['data['data['data
import subprocess subprocess.Popen( "kill", stdout=subprocess.PIPE, stderr=subprocess
import random hash(random.choice(list(range(len(list(list(
import os for root, dirs, files in os.walk(root): for file in
import socket def send(data): while True: data = socket.recv(1024) if
import lxml.etree as etree tree = etree.parse('http://www.example.
import subprocess p = subprocess.Popen(('echo', 'test.txt', 'test
import json from jinja2 import Environment env = Environment() env.update(settings['KEY
import socket def get_domain_name(domain): return socket.gethostby
>>> import re >>> re.sub(r'(a)([^']+)', r
import os import sys def open_file(filename): with open(filename, 'rb
>>> import string >>> string = 'a,b,c,d,e,f
>>> from fractions import Fraction >>> a = Fraction(1,2) >>> a.index('1')
import os import sys import os import shutil for root, dirs, files in os.walk
def pagelist(page_size, page_size): """Pagelist of pages in
import multiprocessing def worker(self): # Do stuff here self.pool.map(worker
>>> l = [(1,2), (3,4), (4,5)] >>> l.append(4) >>>
perl -u "print $1; print $2; print $1; print $2; print $
>>> d = {'a':1,'b':2,'c':3,'d':
>>> import numpy as np >>> a = np.array([[1,2,3],[4,5,6]])
def f(x): return x + x def g(x): return x + x
import subprocess subprocess.Popen((' ','my_program.py', 'a
>>> import ast >>> ast.literal_eval(u'a string') 'a string
>>> d = {k:v for k,v in d.iteritems()} >>> d
def all_models(self): return [models.Model(name='my_name
>>> import ast >>> ast.literal_eval('['a','b','c','d
>>> import ast >>> ast.literal_eval('['a','b','c','d
import subprocess p = subprocess.Popen(('ls', 'r'), stdout=subprocess.
import pandas as pd df = pd.read_csv('file.csv', index_
import inspect def inspect_func(func): return inspect.getsource(func)
def random_numbers(): return [int(x) for x in range(n)]
class User(models.Model): user = models.ForeignKey(User) #... class
>>> [x for x in range(len(x)+1) if x[i]
import matplotlib.pyplot as plt.grid(row = 1, column = 5, rowspan =
print(u'This is a test of a test of a test of a test of
import collections dic = collections.defaultdict(list) for key, value in dic.
class A(object): def __init__(self, a, b): self.a
>>> a = [1,2,3] >>> b = [1,2,3] >>> a.append(b
import subprocess subprocess.Popen('http://www.example.com/')
from django.db.models import Count from django.db.models import Count from django
class UserAdmin(admin.ModelAdmin): list_display = ('name',) list
>>> from collections import Counter >>> d = Counter(d.values()) >>> d.update
>>> a = 'hello' >>> b = 'hello' >>> a == b True >>>
>>> isinstance(x, basestring) True >>> isinstance(x, basestring) False
def upload_to(self, filename): return self.upload_to(filename)
import numpy as np import tempfile with tempfile.NamedTemporaryFile() as f: f.write
$string = "Hello, world!"; $string_encoded = $string_encoded
import os import sys, os, os, os, os, os, os, os
import youtubedl.VideoDownloader from youtube.dl.video import VideoDownloader from youtube.
import os import os filename = os.path.basename(os.path.abspath(
>>> import codecs >>> codecs.open(r'(u'[u'),'
>>> from collections import Counter >>> >>> >>> Counter(sorted(lst, key=lambda x
>>> import numpy as np >>> a = np.array([1, 2, 3, 4, 5, 6, 7,
>>> from itertools import chain >>> [tuple(x) for x in chain(zip(
import numpy as np a = np.array([[1,2,3],[4,5,6]]) b =
df['A'] = df['B'].map(lambda x: x['A'])
ax.set_ylim(min(x), max(y))
def disorder(lst): return [lst[i:i+3] for i in
import base64 import base64.b64decode(base64.b64decode(base64.
for i in range(x): label = label.append(i) label.append
import lxml.html page = lxml.html.fromstring(html_string) page
import scipy.stats.bin_moother(x, y)
def calculate_average(num): while True: if num % 2 == 0: print num
>>> import operator >>> a = [(1,2), (3,4), (5,6), (7,8
>>> import urllib >>> url = 'http://www.example.com/bs4/'
from flask import Flask from flask import request @app.route('/test') def test():
>>> from itertools import chain >>> [tuple(x) for x in chain(zip(
import os os.environ['PATH'] = os.environ['PATH']
>>> import re >>> s = "hello, world" >>> re.sub(r'
import json from handsontable import handsontable from handsontable import Table from hand
from django.core.urlresolvers import reverse from django.core.urlresolvers import reverse
def get_next_value(self, value): if value == '': return self
>>> import struct >>> struct.unpack('I', struct.pack('I', struct.
from django.db.models import Q q = Q(Q(name__icont
import matplotlib.pyplot as plt import numpy as np fig = plt.figure() ax =
import os import sys, os, os, os, os, os, os, os
import os os.remove(os.path.dirname(__file__))
def worker(self): # Do stuff here def main(): # Do stuff here def worker
>>> import re >>> s = 'hello there' >>> re.sub(r'(
if all(x == 'A' for x in range(len(list)))
class UserAdmin(admin.ModelAdmin): class Meta: model = User fields = ('
import string import urllib.urlretrieve('http://www.example.com/test.
>>> import lxml.html >>> tree = lxml.html.fromstring(html_string
var = '{{ id }}'
>>> import re >>> re.sub(r'(a)([^']+)', r
>>> import itertools >>> >>> >>> [i for i in itertools.combinations(range(n
perl -e 'print $1; print $2; print $1; print $2; print $
>>> a = [1, 2, 3] >>> a [1, 2, 3] >>> a [1, 2, 3]
>>> import re >>> s = 'a b c d e f g g g g g
re.compile(r'(?P<name>[name])(?P<value
def backwards(self, start, end): return (start, end)
from asyncio import asyncio from asyncio import Popen, PIPE def process_response(self, response
import os with open('file.txt', 'r') as f: for line in
from celery import Celery from celery.task import task from celery.task import Task from celery
>>> d = { 'a': 1, 'b': 2, 'c': 3 } >>>
from bs4 import BeautifulSoup soup = BeautifulSoup(html) for item in soup.findAll('
if pygame.version_info.get_version_info.get_version_info
import __builtin__ as builtins
import numpy as np np.array([True, True, True, True, True,
import urllib url = urllib.urlretrieve('http://www.example.com/login
>>> a = [1,2,3] >>> b = a >>> a [1, 2, 3] >>> b [1,
import subprocess subprocess.Popen('adb shell', stdout=subprocess.PIPE)
>>> import datetime >>> datetime.datetime.strptime('2011-08', '%m/%d
pip install -dev
def append(self, item): if isinstance(item, list): self.append(
>>> import string >>> string.count('a') 1 >>>
import json json_data = json.load(json_data)
import win32evt.MouseMove event = win32evt.MouseMove event.type
df = pd.DataFrame({'A': ['a', 'b', 'c', '
>>> from itertools import chain >>> [tuple(x) for x in chain(zip(
>>> re.compile(r'(?P<name>[name])(?P<
def check(self, *args, **kw): if self.is_special:
def refresh(self): self.text = self.text.replace(self.text
import sys, time def main(): print 'hello' sys.stdout.write(time
import os with open('file.txt') as f: for line in f: if
>>> from datetime import datetime >>> datetime.strptime('1984', '%m/%d/%
